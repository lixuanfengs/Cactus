<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://cactusli.net/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://cactusli.net/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Cactus&amp;apos;s Blog</title>
    <link>https://cactusli.net/</link>
    <description>仙人球的博客</description>
    <language>zh-CN</language>
    <pubDate>Fri, 22 Mar 2024 05:16:34 GMT</pubDate>
    <lastBuildDate>Fri, 22 Mar 2024 05:16:34 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Java</category>
    <category>使用指南</category>
    <category>指南</category>
    <item>
      <title>Java8 函数编程lambda表达式</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 函数编程lambda表达式</source>
      <description>我们关心的是如何写出好代码，而不是符合函数编程风格的代码。 Java8 函数编程lambda表达式 简介 lambda表达式 分类 惰性求值方法 及早求值方法 stream &amp; parallelStream stream &amp; parallelStream parallelStream原理: stream与parallelStream性能测试对比 Str...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>我们关心的是如何写出好代码，而不是符合函数编程风格的代码。</p>
</blockquote>
<ul>
<li>Java8 函数编程lambda表达式
<ul>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">lambda表达式</a></li>
<li>分类
<ul>
<li><a href="#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">惰性求值方法</a></li>
<li><a href="#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">及早求值方法</a></li>
</ul>
</li>
<li>stream &amp; parallelStream
<ul>
<li><a href="#stream--parallelstream-1">stream &amp; parallelStream</a></li>
<li><a href="#parallelstream%E5%8E%9F%E7%90%86">parallelStream原理:</a></li>
<li><a href="#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94">stream与parallelStream性能测试对比</a></li>
<li><a href="#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B">Stream中常用方法如下:</a></li>
</ul>
</li>
<li>常用例子
<ul>
<li><a href="#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99">匿名类简写</a></li>
<li><a href="#foreach">forEach</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">方法引用</a></li>
<li><a href="#filter--predicate">Filter &amp; Predicate</a></li>
<li><a href="#mapreduce">Map&amp;Reduce</a></li>
<li><a href="#collectors">Collectors</a></li>
<li><a href="#flatmap">flatMap</a></li>
<li><a href="#distinct">distinct</a></li>
<li><a href="#count">count</a></li>
<li><a href="#match">Match</a></li>
<li><a href="#minmaxsummarystatistics">min,max,summaryStatistics</a></li>
<li><a href="#peek">peek</a></li>
</ul>
</li>
<li>FunctionalInterface
<ul>
<li><a href="#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface">理解注解 @FunctionInterface</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">自定义函数接口</a></li>
<li><a href="#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">内置四大函数接口</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#简介"><span></span></a><a href="#%E7%AE%80%E4%BB%8B">#</a> 简介</h2>
<blockquote>
<p>在Java世界里面，面向对象还是主流思想，对于习惯了面向对象编程的开发者来说，抽象的概念并不陌生。面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此，因此这两种编程方式我们都得学。</p>
</blockquote>
<blockquote>
<p>这种新的抽象方式还有其他好处。很多人不总是在编写性能优先的代码，对于这些人来说，函数式编程带来的好处尤为明显。程序员能编写出更容易阅读的代码——这种代码更多地表达了业务逻辑，而不是从机制上如何实现。易读的代码也易于维护、更可靠、更不容易出错。</p>
</blockquote>
<blockquote>
<p>在写回调函数和事件处理器时，程序员不必再纠缠于匿名内部类的冗繁和可读性，函数式编程让事件处理系统变得更加简单。能将函数方便地传递也让编写惰性代码变得容易，只有在真正需要的时候，才初始化变量的值。</p>
</blockquote>
<p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p>
<p>核心思想: 使用不可变值和函数，函数对一个值进行处理，映射成另一个值。</p>
<p>对核心类库的改进主要包括集合类的API和新引入的流Stream。流使程序员可以站在更高的抽象层次上对集合进行操作。</p>
<h2><a class="header-anchor" href="#lambda表达式"><span></span></a><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a> lambda表达式</h2>
<ul>
<li>lambda表达式仅能放入如下代码: 预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法，或者SAM(Single Abstract Method 单个抽象方法)类型。这些称为lambda表达式的目标类型，可以用作返回类型，或lambda目标代码的参数。例如，若一个方法接收Runnable、Comparable或者 Callable 接口，都有单个抽象方法，可以传入lambda表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式。</li>
<li>lambda表达式内可以使用<code>方法引用</code>，仅当该方法不修改lambda表达式提供的参数。本例中的lambda表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(n </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(n));</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span><span style="color:#7F848E;font-style:italic">  // 使用方法引用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，若对参数有任何修改，则不能使用方法引用，而需键入完整地lambda表达式，如下所示:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF"> s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"*"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> s </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "*"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>事实上，可以省略这里的lambda参数的类型声明，编译器可以从列表的类属性推测出来。</p>
<ul>
<li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li>
<li>Lambda表达式在Java中又称为闭包或匿名函数，所以如果有同事把它叫闭包的时候，不用惊讶。</li>
<li>Lambda方法在编译器内部被翻译成私有方法，并派发 invokedynamic 字节码指令来进行调用。可以使用JDK中的 javap 工具来反编译class文件。使用 javap -p 或 javap -c -v 命令来看一看lambda表达式生成的字节码。大致应该长这样:</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#61AFEF"> lambda$0</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>lambda表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在lambda内部修改定义在域外的变量。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> primes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">[]{</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">});</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> factor </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">primes</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(element </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> { factor++; });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compile time error : "local variables referenced from a lambda expression must be final or effectively final" 另外，只是访问它而不作修改是可以的，如下所示:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> primes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">[]{</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">});</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> factor </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">primes</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(element </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(factor</span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF">element); });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#分类"><span></span></a><a href="#%E5%88%86%E7%B1%BB">#</a> 分类</h2>
<h3><a class="header-anchor" href="#惰性求值方法"><span></span></a><a href="#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">#</a> 惰性求值方法</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(f </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上示例，这行代码并未做什么实际性的工作，filter只是<strong>描述</strong>了Stream，<strong>没有产生新的集合</strong>。</p>
<p>如果是多个条件组合，可以通过代码块{}</p>
<h3><a class="header-anchor" href="#及早求值方法"><span></span></a><a href="#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">#</a> 及早求值方法</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(f </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">)).</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上示例，collect最终会从Stream产生新值，拥有终止操作。</p>
<p>理想方式是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果。与建造者模式相似，建造者模式先是使用一系列操作设置属性和配置，最后调用build方法，创建对象。</p>
<h2><a class="header-anchor" href="#stream-parallelstream"><span></span></a><a href="#stream-parallelstream">#</a> stream &amp; parallelStream</h2>
<h3><a class="header-anchor" href="#stream-parallelstream-1"><span></span></a><a href="#stream-parallelstream-1">#</a> stream &amp; parallelStream</h3>
<p>每个Stream都有两种模式: 顺序执行和并行执行。</p>
<p>顺序流:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> people </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> list</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并行流:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> people </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> list</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parallel</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>顾名思义，当使用顺序方式去遍历时，每个item读完后再读下一个item。而使用并行去遍历时，数组会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。</p>
<h3><a class="header-anchor" href="#parallelstream原理"><span></span></a><a href="#parallelstream%E5%8E%9F%E7%90%86">#</a> parallelStream原理:</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> originalList </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> someData</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">split1 </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> originalList</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mid)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//将数据分小部分</span></span>
<span class="line"><span style="color:#E06C75">split2 </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> originalList</span><span style="color:#E06C75">(mid</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">end)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">split1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//小部分执行操作</span></span>
<span class="line"><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">split2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> revisedList </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> split1 </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> split2</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//将结果合并</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家对hadoop有稍微了解就知道，里面的 MapReduce 本身就是用于并行处理大数据集的软件框架，其 处理大数据的核心思想就是大而化小，分配到不同机器去运行map，最终通过reduce将所有机器的结果结合起来得到一个最终结果，与MapReduce不同，Stream则是利用多核技术可将大数据通过多核并行处理，而MapReduce则可以分布式的。</p>
<h3><a class="header-anchor" href="#stream与parallelstream性能测试对比"><span></span></a><a href="#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94">#</a> stream与parallelStream性能测试对比</h3>
<p>如果是多核机器，理论上并行流则会比顺序流快上一倍，下面是测试代码</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> t0 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//初始化一个范围100万整数流,求能被2整除的数字，toArray()是终点方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> a[]</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">IntStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">range</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1_000_000</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> p </span><span style="color:#56B6C2">%</span><span style="color:#D19A66"> 2</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> t1 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//和上面功能一样，这里是用并行流来计算</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> b[]</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">IntStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">range</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1_000_000</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">parallel</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> p </span><span style="color:#56B6C2">%</span><span style="color:#D19A66"> 2</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> t2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//我本机的结果是serial: 0.06s, parallel 0.02s，证明并行流确实比顺序流快</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printf</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"serial: %.2fs, parallel %.2fs%n"</span><span style="color:#ABB2BF">, (t1 </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> t0) </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 1e-9</span><span style="color:#ABB2BF">, (t2 </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> t1) </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 1e-9</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#stream中常用方法如下"><span></span></a><a href="#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B">#</a> Stream中常用方法如下:</h3>
<ul>
<li><code>stream()</code>, <code>parallelStream()</code></li>
<li><code>filter()</code></li>
<li><code>findAny()</code> <code>findFirst()</code></li>
<li><code>sort</code></li>
<li><code>forEach</code> void</li>
<li><code>map(), reduce()</code></li>
<li><code>flatMap()</code> - 将多个Stream连接成一个Stream</li>
<li><code>collect(Collectors.toList())</code></li>
<li><code>distinct</code>, <code>limit</code></li>
<li><code>count</code></li>
<li><code>min</code>, <code>max</code>, <code>summaryStatistics</code></li>
</ul>
<p>看下所有API:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#常用例子"><span></span></a><a href="#%E5%B8%B8%E7%94%A8%E4%BE%8B%E5%AD%90">#</a> 常用例子</h2>
<h3><a class="header-anchor" href="#匿名类简写"><span></span></a><a href="#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99">#</a> 匿名类简写</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Thread</span><span style="color:#E06C75">( () </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"In Java8, Lambda expression rocks !!"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75"> )</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 用法</span></span>
<span class="line"><span style="color:#E06C75">(params) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> expression</span></span>
<span class="line"><span style="color:#E06C75">(params) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> statement</span></span>
<span class="line"><span style="color:#E06C75">(params) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> { statements }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#foreach"><span></span></a><a href="#foreach">#</a> forEach</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// forEach</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> features </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Lambdas"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Default Method"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Stream API"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Date and Time API"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">features</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(n </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(n));</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span>
<span class="line"><span style="color:#E5C07B">features</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#方法引用"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">#</a> 方法引用</h3>
<p><em>构造引用</em></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Supplier&lt;Student&gt; s = () -&gt; new Student();</span></span>
<span class="line"><span style="color:#E5C07B">Supplier</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Student</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Student</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>对象::实例方法 Lambda表达式的(形参列表)与实例方法的(实参列表)类型，个数是对应</code></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// set.forEach(t -&gt; System.out.println(t));</span></span>
<span class="line"><span style="color:#E5C07B">set</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类名::静态方法</code></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Stream&lt;Double&gt; stream = Stream.generate(() -&gt; Math.random());</span></span>
<span class="line"><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Double</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">generate</span><span style="color:#ABB2BF">(Math</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">random);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类名::实例方法</code></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//  TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;((s1,s2) -&gt; s1.compareTo(s2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/*  这里如果使用第一句话，编译器会有提示: Can be replaced with Comparator.naturalOrder，这句话告诉我们</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  String已经重写了compareTo()方法，在这里写是多此一举，这里为什么这么写，是因为为了体现下面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  这句编译器的提示: Lambda can be replaced with method reference。好了，下面的这句就是改写成方法引用之后: </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">*/</span></span>
<span class="line"><span style="color:#E5C07B">TreeSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> set </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeSet</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(String</span><span style="color:#C678DD">::</span><span style="color:#E06C75">compareTo)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filter-predicate"><span></span></a><a href="#filter-predicate">#</a> Filter &amp; Predicate</h3>
<p>常规用法</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(args[]){</span></span>
<span class="line"><span style="color:#E5C07B">    List</span><span style="color:#E06C75"> languages </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Java"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Scala"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"C++"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Haskell"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Lisp"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Languages which starts with J :"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"J"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Languages which ends with a "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">endsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Print all languages :"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#D19A66">true</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Print no language : "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#D19A66">false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Print language whose length greater than 4:"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 4</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> filter</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#E06C75"> names</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Predicate</span><span style="color:#E06C75"> condition) {</span></span>
<span class="line"><span style="color:#E5C07B">    names</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((name) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">condition</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(name))).</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((name) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(name </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个Predicate组合filter</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 可以用and()、or()和xor()逻辑函数来合并Predicate，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> startsWithJ </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> n</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"J"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> fourLetterLong </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> n</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">names</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">startsWithJ</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">and</span><span style="color:#ABB2BF">(fourLetterLong))</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((n) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"nName, which starts with 'J' and four letter long is : "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> n));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#map-reduce"><span></span></a><a href="#map-reduce">#</a> Map&amp;Reduce</h3>
<p>map将集合类(例如列表)元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> costBeforeTax </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">200</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">300</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">400</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">500</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">double</span><span style="color:#E06C75"> bill </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> costBeforeTax</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((cost) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> cost </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> .12</span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF">cost).</span><span style="color:#61AFEF">reduce</span><span style="color:#ABB2BF">((sum, cost) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> sum </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> cost).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Total : "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> bill);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#collectors"><span></span></a><a href="#collectors">#</a> Collectors</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 将字符串换成大写并用逗号链接起来</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> G7 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"USA"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Japan"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"France"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Germany"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Italy"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"U.K."</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"Canada"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> G7Countries </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> G7</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(x </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">", "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(G7Countries);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Collectors.joining(", ")</li>
<li>Collectors.toList()</li>
<li>Collectors.toSet() ，生成set集合</li>
<li>Collectors.toMap(MemberModel::getUid, Function.identity())</li>
<li>Collectors.toMap(ImageModel::getAid, o -&gt; IMAGE_ADDRESS_PREFIX + o.getUrl())</li>
</ul>
<h3><a class="header-anchor" href="#flatmap"><span></span></a><a href="#flatmap">#</a> flatMap</h3>
<p>将多个Stream连接成一个Stream</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> result</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">),</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">6</span><span style="color:#ABB2BF">)).</span><span style="color:#61AFEF">flatMap</span><span style="color:#ABB2BF">(a</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果: [1, 3, 5, 6]</p>
<h3><a class="header-anchor" href="#distinct"><span></span></a><a href="#distinct">#</a> distinct</h3>
<p>去重</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">LikeDO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> likeDOs</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">LikeDO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> likeTidList </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> likeDOs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(LikeDO</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getTid)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">distinct</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#count"><span></span></a><a href="#count">#</a> count</h3>
<p>计总数</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> countOfAdult</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">persons</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                       .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAge</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 18</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                       .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(person </span><span style="color:#C678DD">-&gt;</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Adult</span><span style="color:#ABB2BF">(person))</span></span>
<span class="line"><span style="color:#ABB2BF">                       .</span><span style="color:#61AFEF">count</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#match"><span></span></a><a href="#match">#</a> Match</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> anyStartsWithA </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">anyMatch</span><span style="color:#ABB2BF">((s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(anyStartsWithA);</span><span style="color:#7F848E;font-style:italic">      // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> allStartsWithA </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">allMatch</span><span style="color:#ABB2BF">((s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(allStartsWithA);</span><span style="color:#7F848E;font-style:italic">      // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> noneStartsWithZ </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">noneMatch</span><span style="color:#ABB2BF">((s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"z"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(noneStartsWithZ);</span><span style="color:#7F848E;font-style:italic">      // true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#min-max-summarystatistics"><span></span></a><a href="#min-max-summarystatistics">#</a> min,max,summaryStatistics</h3>
<p>最小值，最大值</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lists </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p2"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p3"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p4"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">Person</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(t </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">())).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果比较器涉及多个条件，比较复杂，可以定制</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B"> Person</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">      @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">      public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> compare</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Person</span><span style="color:#E06C75;font-style:italic"> o1</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Person</span><span style="color:#E06C75;font-style:italic"> o2</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">           if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">o1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> o2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">()) </span><span style="color:#C678DD">return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">           if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">o1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> o2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">()) </span><span style="color:#C678DD">return</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">           return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">       }</span></span>
<span class="line"><span style="color:#ABB2BF"> }).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>summaryStatistics</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//获取数字的个数、最小值、最大值、总和以及平均值</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> primes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">13</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">17</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">19</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">23</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">29</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">IntSummaryStatistics</span><span style="color:#E06C75"> stats </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> primes</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">mapToInt</span><span style="color:#ABB2BF">((x) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> x).</span><span style="color:#61AFEF">summaryStatistics</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Highest prime number in List : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMax</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Lowest prime number in List : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMin</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sum of all prime numbers : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSum</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Average of all prime numbers : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAverage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#peek"><span></span></a><a href="#peek">#</a> peek</h3>
<p>可以使用peek方法，peek方法可只包含一个空的方法体，只要能设置断点即可，但有些IDE不允许空，可以如下文示例，简单写一个打印逻辑。</p>
<p>注意，调试完后要删掉。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lists </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p2"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p3"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p4"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(lists);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">				 .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(f </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">peek</span><span style="color:#ABB2BF">(t </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">                })</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(list2);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#functionalinterface"><span></span></a><a href="#functionalinterface">#</a> FunctionalInterface</h2>
<h3><a class="header-anchor" href="#理解注解-functioninterface"><span></span></a><a href="#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface">#</a> 理解注解 @FunctionInterface</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * An informative annotation type used to indicate that an interface</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * type declaration is intended to be a &lt;i&gt;functional interface&lt;/i&gt; as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * defined by the Java Language Specification.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Conceptually, a functional interface has exactly one abstract</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * method.  Since {@linkplain java.lang.reflect.Method#isDefault()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * default methods} have an implementation, they are not abstract.  If</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * an interface declares an abstract method overriding one of the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * public methods of {@code java.lang.Object}, that also does</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;em&gt;not&lt;/em&gt; count toward the interface's abstract method count</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * since any implementation of the interface will have an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * implementation from {@code java.lang.Object} or elsewhere.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;p&gt;Note that instances of functional interfaces can be created with</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * lambda expressions, method references, or constructor references.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;p&gt;If a type is annotated with this annotation type, compilers are</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * required to generate an error message unless:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;li&gt; The type is an interface type and not an annotation type, enum, or class.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;li&gt; The annotated type satisfies the requirements of a functional interface.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;p&gt;However, the compiler will treat any interface meeting the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * definition of a functional interface as a functional interface</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * regardless of whether or not a {@code FunctionalInterface}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * annotation is present on the interface declaration.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @jls 4.3.2. The Class Object</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @jls 9.8 Functional Interfaces</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @jls 9.4.3 Interface Method Body</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Documented</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Retention</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">RetentionPolicy</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RUNTIME</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Target</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ElementType</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TYPE</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> FunctionalInterface</span><span style="color:#E06C75">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>interface做注解的注解类型，被定义成java语言规范</li>
<li>一个被它注解的接口只能有一个抽象方法，有两种例外</li>
<li>第一是接口允许有实现的方法，这种实现的方法是用default关键字来标记的(java反射中java.lang.reflect.Method#isDefault()方法用来判断是否是default方法)</li>
<li>第二如果声明的方法和java.lang.Object中的某个方法一样，它可以不当做未实现的方法，不违背这个原则: 一个被它注解的接口只能有一个抽象方法, 比如: <code>java public interface Comparator&lt;T&gt; { int compare(T o1, T o2); boolean equals(Object obj); } </code></li>
<li>如果一个类型被这个注解修饰，那么编译器会要求这个类型必须满足如下条件:
<ul>
<li>这个类型必须是一个interface，而不是其他的注解类型、枚举enum或者类class</li>
<li>这个类型必须满足function interface的所有要求，如你个包含两个抽象方法的接口增加这个注解，会有编译错误。</li>
</ul>
</li>
<li>编译器会自动把满足function interface要求的接口自动识别为function interface，所以你才不需要对上面示例中的 ITest接口增加@FunctionInterface注解。</li>
</ul>
<h3><a class="header-anchor" href="#自定义函数接口"><span></span></a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">#</a> 自定义函数接口</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">FunctionalInterface</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> IMyInterface</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> study</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.isea.java</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestIMyInterface</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        IMyInterface</span><span style="color:#E06C75"> iMyInterface</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> () </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"I like study"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        iMyInterface</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">study</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#内置四大函数接口"><span></span></a><a href="#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">#</a> 内置四大函数接口</h3>
<ul>
<li>消费型接口: Consumer&lt; T&gt; void accept(T t)有参数，无返回值的抽象方法；</li>
</ul>
<blockquote>
<p><code>比如: map.forEach(BiConsumer&lt;A, T&gt;)</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Consumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> greeter </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Hello, "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">firstName</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">greeter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Luke"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Skywalker"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>供给型接口: <code>Supplier &lt; T&gt; T get()</code> 无参有返回值的抽象方法；</li>
</ul>
<blockquote>
<p><code>以stream().collect(Collector&lt;? super T, A, R&gt; collector)为例:</code></p>
</blockquote>
<p>比如:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Supplier</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> personSupplier </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Person</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">personSupplier</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">   // new Person</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再如:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 调用方法</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">R</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> R</span><span style="color:#61AFEF"> collect</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collector</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> T</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> R</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> collector)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Collectors.toSet</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#E5C07B">	Collector</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> ?</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#61AFEF"> toSet</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> CollectorImpl</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">((</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E06C75">) HashSet</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> Set</span><span style="color:#C678DD">::</span><span style="color:#E06C75">add</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                               (left</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> right) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> { </span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAll</span><span style="color:#ABB2BF">(right);</span><span style="color:#C678DD"> return</span><span style="color:#E06C75"> left</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                               CH_UNORDERED_ID)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// CollectorImpl</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Supplier</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> BiConsumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> BinaryOperator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> R</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> finisher</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> characteristics</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">CollectorImpl</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BiConsumer</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BinaryOperator</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              Function</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">R</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> finisher</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Characteristics</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> characteristics) {</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">supplier</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">accumulator</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">combiner</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">finisher</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> finisher</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">characteristics</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> characteristics</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">CollectorImpl</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BiConsumer</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BinaryOperator</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Characteristics</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> characteristics) {</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#E06C75">(supplier</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> castingIdentity</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> characteristics)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// collect()方法实现</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">R</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> R</span><span style="color:#61AFEF"> collect</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collector</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> P_OUT</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> R</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> collector) {</span></span>
<span class="line"><span style="color:#E5C07B">    A</span><span style="color:#E06C75"> container</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">isParallel</span><span style="color:#E06C75">()</span></span>
<span class="line"><span style="color:#56B6C2">            &amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">characteristics</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">CONCURRENT</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#56B6C2">            &amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isOrdered</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">||</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">characteristics</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNORDERED</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E06C75">        container </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">supplier</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        BiConsumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> ?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> P_OUT</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> accumulator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accumulator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        forEach</span><span style="color:#E06C75">(u </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> accumulator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(container, u)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        container </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> evaluate</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ReduceOps</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">makeRef</span><span style="color:#ABB2BF">(collector)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">characteristics</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">IDENTITY_FINISH</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">           ?</span><span style="color:#E06C75"> (R) container</span></span>
<span class="line"><span style="color:#C678DD">           :</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">finisher</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(container);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>断定型接口: <code>Predicate&lt;T&gt; boolean test(T t)</code>:有参，但是返回值类型是固定的boolean</li>
</ul>
<blockquote>
<p><code>比如: steam().filter()中参数就是Predicate</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> predicate </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"foo"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">              // true</span></span>
<span class="line"><span style="color:#E5C07B">predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">negate</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"foo"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">     // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> nonNull </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Objects</span><span style="color:#C678DD">::</span><span style="color:#E06C75">nonNull</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> isNull </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Objects</span><span style="color:#C678DD">::</span><span style="color:#E06C75">isNull</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> isEmpty </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> String</span><span style="color:#C678DD">::</span><span style="color:#E06C75">isEmpty</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> isNotEmpty </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> isEmpty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">negate</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>函数型接口: Function&lt;T,R&gt; R apply(T t)有参有返回值的抽象方法；</li>
</ul>
<blockquote>
<p><code>比如: steam().map() 中参数就是Function&lt;? super T, ? extends R&gt;；reduce()中参数BinaryOperator&lt;T&gt; (ps: BinaryOperator&lt;T&gt; extends BiFunction&lt;T,T,T&gt;)</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> toInteger </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Integer</span><span style="color:#C678DD">::</span><span style="color:#E06C75">valueOf</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> backToString </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> toInteger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">andThen</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">backToString</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"123"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">     // "123"</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#一些例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</h2>
<ul>
<li>输出 年龄&gt;25的女程序员中名字排名前3位的姓名</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">javaProgrammers</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAge</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 25</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#98C379">"female"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getGender</span><span style="color:#ABB2BF">())))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">((p, p2) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getFirstName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getFirstName</span><span style="color:#ABB2BF">())))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">          //.forEach(e -&gt; e.setSalary(e.getSalary() / 100 * 5 + e.getSalary()))//涨工资</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printf</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"%s %s; "</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getFirstName</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLastName</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>工资最高的 Java programmer</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Person</span><span style="color:#E06C75"> person </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">((p, p2) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> p2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">()))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>将 Java programmers 的 first name 存放到 TreeSet</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">TreeSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> javaDevLastName </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getLastName)</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">toCollection</span><span style="color:#ABB2BF">(TreeSet</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>计算付给 Java programmers 的所有money</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> totalSalary </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">parallelStream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">mapToInt</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">sum</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Comparator多属性排序: 先按名字不分大小写排，再按GID倒序排，最后按年龄正序排</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">	List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> personList </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getTestList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">	personList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getName, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">CASE_INSENSITIVE_ORDER</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">			.</span><span style="color:#61AFEF">thenComparing</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getGid, (a, b) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(a))</span></span>
<span class="line"><span style="color:#ABB2BF">			.</span><span style="color:#61AFEF">thenComparingInt</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getAge));</span></span>
<span class="line"><span style="color:#E5C07B">	personList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Person</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getTestList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#E5C07B"> Lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newArrayList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"301"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">			new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">6</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">			new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"302"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"zhang"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"302"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"zhang"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"301"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">			new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Li"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"301"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 输出结果</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=6]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=10]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=11]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=302, age=9]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=301, age=10]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=Li, gid=301, age=8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=zhang, gid=302, age=9]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=zhang, gid=301, age=9]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>处理字符串</li>
</ul>
<p>两个新的方法可在字符串类上使用: join和chars。第一个方法使用指定的分隔符，将任何数量的字符串连接为一个字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">":"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"foobar"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"foo"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"bar"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; foobar:foo:bar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个方法chars从字符串所有字符创建数据流，所以你可以在这些字符上使用流式操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#98C379">"foobar:foo:bar"</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">chars</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">distinct</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">mapToObj</span><span style="color:#ABB2BF">(c </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">((</span><span style="color:#C678DD">char</span><span style="color:#ABB2BF">)c))</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; :abfor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅仅是字符串，正则表达式模式串也能受益于数据流。我们可以分割任何模式串，并创建数据流来处理它们，而不是将字符串分割为单个字符的数据流，像下面这样:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">":"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">splitAsStream</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"foobar:foo:bar"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(s </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"bar"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">":"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; bar:foobar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，正则模式串可以转换为谓词。这些谓词可以像下面那样用于过滤字符串流:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Pattern</span><span style="color:#E06C75"> pattern </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">".*@gmail</span><span style="color:#56B6C2">\\</span><span style="color:#98C379">.com"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"bob@gmail.com"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"alice@hotmail.com"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asPredicate</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">count</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的模式串接受任何以<code>@gmail.com</code>结尾的字符串，并且之后用作Java8的Predicate来过滤电子邮件地址流。</p>
<ul>
<li>Local Cache实现</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestLocalCache</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ConcurrentHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Long</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> cache </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ConcurrentHashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	static</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> i</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#ABB2BF"> (i </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#ABB2BF"> i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#ABB2BF"> (i </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">		return</span><span style="color:#E5C07B"> cache</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">computeIfAbsent</span><span style="color:#ABB2BF">(i, (key) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">			System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Slow calculation of "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(i </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(i </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">		});</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#E06C75">	</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// warm up</span></span>
<span class="line"><span style="color:#C678DD">		for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 101</span><span style="color:#ABB2BF">; i++)</span></span>
<span class="line"><span style="color:#E5C07B">	        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379">	            "f("</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> i </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ") = "</span><span style="color:#56B6C2"> +</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(i));</span></span>
<span class="line"><span style="color:#ABB2BF">		</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// read -&gt; cal</span></span>
<span class="line"><span style="color:#C678DD">		long</span><span style="color:#E06C75"> current</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">fibonacci</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">		System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF">current);</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>`集合--》取元素的一个属性--》去重</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png" type="image/png"/>
    </item>
    <item>
      <title>GC 垃圾回收器之CMS GC问题分析与解决</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BCMS%20GC%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BCMS%20GC%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收器之CMS GC问题分析与解决</source>
      <description>本文整理自美团技术团队在新窗口打开, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。 GC 垃圾回收器之CMS GC问题分析与解决 写在前面 1.1 引言 1.2 概览 GC 基础 2.1 基础概念 2.2 JVM 内存划分 2.3 分配对象 2.4 收集对象 2.4.1 识别垃圾 2.4.2 收集算法 2.5 收集器 2.5....</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文整理自<a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html" target="_blank" rel="noopener noreferrer">美团技术团队在新窗口打开</a>, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。</p>
</blockquote>
<ul>
<li>
<p>GC 垃圾回收器之CMS GC问题分析与解决</p>
<ul>
<li>
<ol>
<li>写在前面</li>
</ol>
</li>
</ul>
<!-- more -->
<ul>
<li>
<p><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a></p>
</li>
<li>
<p><a href="#12-%E6%A6%82%E8%A7%88">1.2 概览</a></p>
</li>
<li>
<ol start="2">
<li>GC 基础</li>
</ol>
<ul>
<li><a href="#21-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">2.1 基础概念</a></li>
<li><a href="#22-jvm-%E5%86%85%E5%AD%98%E5%88%92%E5%88%86">2.2 JVM 内存划分</a></li>
<li><a href="#23-%E5%88%86%E9%85%8D%E5%AF%B9%E8%B1%A1">2.3 分配对象</a></li>
<li>2.4 收集对象
<ul>
<li><a href="#241-%E8%AF%86%E5%88%AB%E5%9E%83%E5%9C%BE">2.4.1 识别垃圾</a></li>
<li><a href="#242-%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95">2.4.2 收集算法</a></li>
</ul>
</li>
<li>2.5 收集器
<ul>
<li><a href="#251-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E5%99%A8">2.5.1 分代收集器</a></li>
<li><a href="#252-%E5%88%86%E5%8C%BA%E6%94%B6%E9%9B%86%E5%99%A8">2.5.2 分区收集器</a></li>
<li><a href="#253-%E5%B8%B8%E7%94%A8%E6%94%B6%E9%9B%86%E5%99%A8">2.5.3 常用收集器</a></li>
<li><a href="#254-%E5%85%B6%E4%BB%96%E6%94%B6%E9%9B%86%E5%99%A8">2.5.4 其他收集器</a></li>
</ul>
</li>
<li>2.6 常用工具
<ul>
<li><a href="#261-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF">2.6.1 命令行终端</a></li>
<li><a href="#262-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">2.6.2 可视化界面</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="3">
<li>GC 问题判断</li>
</ol>
<ul>
<li>3.1 判断 GC 有没有问题？
<ul>
<li><a href="#311-%E8%AE%BE%E5%AE%9A%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86">3.1.1 设定评价标准</a></li>
<li><a href="#312-%E8%AF%BB%E6%87%82-gc-cause">3.1.2 读懂 GC Cause</a></li>
</ul>
</li>
<li><a href="#32-%E5%88%A4%E6%96%AD%E6%98%AF%E4%B8%8D%E6%98%AF-gc-%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98">3.2 判断是不是 GC 引发的问题？</a></li>
<li>3.3 问题分类导读
<ul>
<li><a href="#331-mutator-%E7%B1%BB%E5%9E%8B">3.3.1 Mutator 类型</a></li>
<li><a href="#332-gc-%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB">3.3.2 GC 问题分类</a></li>
<li><a href="#333-%E6%8E%92%E6%9F%A5%E9%9A%BE%E5%BA%A6">3.3.3 排查难度</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="4">
<li>常见场景分析与解决</li>
</ol>
<ul>
<li>4.1 场景一：动态扩容引起的空间震荡
<ul>
<li><a href="#411-%E7%8E%B0%E8%B1%A1">4.1.1 现象</a></li>
<li><a href="#412-%E5%8E%9F%E5%9B%A0">4.1.2 原因</a></li>
<li><a href="#413-%E7%AD%96%E7%95%A5">4.1.3 策略</a></li>
<li><a href="#414-%E5%B0%8F%E7%BB%93">4.1.4 小结</a></li>
</ul>
</li>
<li>4.2 场景二：显式 GC 的去与留
<ul>
<li><a href="#421-%E7%8E%B0%E8%B1%A1">4.2.1 现象</a></li>
<li><a href="#422-%E5%8E%9F%E5%9B%A0">4.2.2 原因</a></li>
<li><a href="#423-%E7%AD%96%E7%95%A5">4.2.3 策略</a></li>
<li><a href="#424-%E5%B0%8F%E7%BB%93">4.2.4 小结</a></li>
</ul>
</li>
<li>4.3 场景三：MetaSpace 区 OOM
<ul>
<li><a href="#431-%E7%8E%B0%E8%B1%A1">4.3.1 现象</a></li>
<li><a href="#432-%E5%8E%9F%E5%9B%A0">4.3.2 原因</a></li>
<li><a href="#433-%E7%AD%96%E7%95%A5">4.3.3 策略</a></li>
<li><a href="#434-%E5%B0%8F%E7%BB%93">4.3.4 小结</a></li>
</ul>
</li>
<li>4.4 场景四：过早晋升 *
<ul>
<li><a href="#441-%E7%8E%B0%E8%B1%A1">4.4.1 现象</a></li>
<li><a href="#442-%E5%8E%9F%E5%9B%A0">4.4.2 原因</a></li>
<li><a href="#443-%E7%AD%96%E7%95%A5">4.4.3 策略</a></li>
<li><a href="#444-%E5%B0%8F%E7%BB%93">4.4.4 小结</a></li>
<li><a href="#445-%E5%8A%A0%E9%A4%90">4.4.5 加餐</a></li>
</ul>
</li>
<li>4.5 场景五：CMS Old GC 频繁*
<ul>
<li><a href="#451-%E7%8E%B0%E8%B1%A1">4.5.1 现象</a></li>
<li><a href="#452-%E5%8E%9F%E5%9B%A0">4.5.2 原因</a></li>
<li><a href="#453-%E7%AD%96%E7%95%A5">4.5.3 策略</a></li>
<li><a href="#454-%E5%B0%8F%E7%BB%93">4.5.4 小结</a></li>
</ul>
</li>
<li>4.6 场景六：单次 CMS Old GC 耗时长*
<ul>
<li><a href="#461-%E7%8E%B0%E8%B1%A1">4.6.1 现象</a></li>
<li><a href="#462-%E5%8E%9F%E5%9B%A0">4.6.2 原因</a></li>
<li><a href="#463-%E7%AD%96%E7%95%A5">4.6.3 策略</a></li>
<li><a href="#464-%E5%B0%8F%E7%BB%93">4.6.4 小结</a></li>
</ul>
</li>
<li>4.7 场景七：内存碎片&amp;收集器退化
<ul>
<li><a href="#471-%E7%8E%B0%E8%B1%A1">4.7.1 现象</a></li>
<li><a href="#472-%E5%8E%9F%E5%9B%A0">4.7.2 原因</a></li>
<li><a href="#473-%E7%AD%96%E7%95%A5">4.7.3 策略</a></li>
<li><a href="#474-%E5%B0%8F%E7%BB%93">4.7.4 小结</a></li>
</ul>
</li>
<li>4.8 场景八：堆外内存 OOM
<ul>
<li><a href="#481-%E7%8E%B0%E8%B1%A1">4.8.1 现象</a></li>
<li><a href="#482-%E5%8E%9F%E5%9B%A0">4.8.2 原因</a></li>
<li><a href="#483-%E7%AD%96%E7%95%A5">4.8.3 策略</a></li>
<li><a href="#484-%E5%B0%8F%E7%BB%93">4.8.4 小结</a></li>
</ul>
</li>
<li>4.9 场景九：JNI 引发的 GC 问题
<ul>
<li><a href="#491-%E7%8E%B0%E8%B1%A1">4.9.1 现象</a></li>
<li><a href="#492-%E5%8E%9F%E5%9B%A0">4.9.2 原因</a></li>
<li><a href="#493-%E7%AD%96%E7%95%A5">4.9.3 策略</a></li>
<li><a href="#494-%E5%B0%8F%E7%BB%93">4.9.4 小结</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="5">
<li>总结</li>
</ol>
<ul>
<li><a href="#51-%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8Bsop">5.1 处理流程（SOP）</a></li>
<li><a href="#52-%E6%A0%B9%E5%9B%A0%E9%B1%BC%E9%AA%A8%E5%9B%BE">5.2 根因鱼骨图</a></li>
<li><a href="#53-%E8%B0%83%E4%BC%98%E5%BB%BA%E8%AE%AE">5.3 调优建议</a></li>
</ul>
</li>
<li>
<p><a href="#6-%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">6. 写在最后</a></p>
</li>
<li>
<p><a href="#7-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">7. 参考资料</a></p>
</li>
<li>
<p><a href="#8-%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B">8. 作者简介</a></p>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#_1-写在前面"><span></span></a><a href="#_1-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2">#</a> 1. 写在前面</h2>
<blockquote>
<p>本文主要针对 Hotspot VM 中“CMS + ParNew”组合的一些使用场景进行总结。重点通过部分源码对根因进行分析以及对排查方法进行总结，排查过程会省略较多，另外本文专业术语较多，有一定的阅读门槛，如未介绍清楚，还请自行查阅相关材料。</p>
</blockquote>
<h3><a class="header-anchor" href="#_1-1-引言"><span></span></a><a href="#_1-1-%E5%BC%95%E8%A8%80">#</a> 1.1 引言</h3>
<p>自 Sun 发布 Java 语言以来，开始使用 GC 技术来进行内存自动管理，避免了手动管理带来的悬挂指针（Dangling Pointer）问题，很大程度上提升了开发效率，从此 GC 技术也一举成名。GC 有着非常悠久的历史，1960 年有着“Lisp 之父”和“人工智能之父”之称的 John McCarthy 就在论文中发布了 GC 算法，60 年以来， GC 技术的发展也突飞猛进，但不管是多么前沿的收集器也都是基于三种基本算法的组合或应用，也就是说 GC 要解决的根本问题这么多年一直都没有变过。笔者认为，在不太远的将来， GC 技术依然不会过时，比起日新月异的新技术，GC 这门古典技术更值得我们学习。</p>
<p>目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用，文中若有错误之处，还请大家不吝指正。</p>
<p>GC 问题处理能力能不能系统性掌握？一些影响因素都是互为因果的问题该怎么分析？比如一个服务 RT 突然上涨，有 GC 耗时增大、线程 Block 增多、慢查询增多、CPU 负载高四个表象，到底哪个是诱因？如何判断 GC 有没有问题？使用 CMS 有哪些常见问题？如何判断根因是什么？如何解决或避免这些问题？阅读完本文，相信你将会对 CMS GC 的问题处理有一个系统性的认知，更能游刃有余地解决这些问题，下面就让我们开始吧！</p>
<h3><a class="header-anchor" href="#_1-2-概览"><span></span></a><a href="#_1-2-%E6%A6%82%E8%A7%88">#</a> 1.2 概览</h3>
<p>想要系统性地掌握 GC 问题处理，笔者这里给出一个学习路径，整体文章的框架也是按照这个结构展开，主要分四大步。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><strong>建立知识体系</strong>： 从 JVM 的内存结构到垃圾收集的算法和收集器，学习 GC 的基础知识，掌握一些常用的 GC 问题分析工具。</p>
<p><strong>确定评价指标</strong>： 了解基本 GC 的评价方法，摸清如何设定独立系统的指标，以及在业务场景中判断 GC 是否存在问题的手段。</p>
<p><strong>场景调优实践</strong>： 运用掌握的知识和系统评价指标，分析与解决九种 CMS 中常见 GC 问题场景。</p>
<p><strong>总结优化经验</strong>： 对整体过程做总结并提出笔者的几点建议，同时将总结到的经验完善到知识体系之中。</p>
<h2><a class="header-anchor" href="#_2-gc-基础"><span></span></a><a href="#_2-gc-%E5%9F%BA%E7%A1%80">#</a> 2. GC 基础</h2>
<p>在正式开始前，先做些简要铺垫，介绍下 JVM 内存划分、收集算法、收集器等常用概念介绍，基础比较好的同学可以直接跳过这部分。</p>
<h3><a class="header-anchor" href="#_2-1-基础概念"><span></span></a><a href="#_2-1-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">#</a> 2.1 基础概念</h3>
<ul>
<li><strong>GC</strong>： GC 本身有三种语义，下文需要根据具体场景带入不同的语义：
<ul>
<li><strong>Garbage Collection</strong>：垃圾收集技术，名词。</li>
<li><strong>Garbage Collector</strong>：垃圾收集器，名词。</li>
<li><strong>Garbage Collecting</strong>：垃圾收集动作，动词。</li>
</ul>
</li>
<li><strong>Mutator</strong>： 生产垃圾的角色，也就是我们的应用程序，垃圾制造者，通过 Allocator 进行 allocate 和 free。</li>
<li><strong>TLAB</strong>： Thread Local Allocation Buffer 的简写，基于 CAS 的独享线程（Mutator Threads）可以优先将对象分配在 Eden 中的一块内存，因为是 Java 线程独享的内存区没有锁竞争，所以分配速度更快，每个 TLAB 都是一个线程独享的。</li>
<li><strong>Card Table</strong>： 中文翻译为卡表，主要是用来标记卡页的状态，每个卡表项对应一个卡页。当卡页中一个对象引用有写操作时，写屏障将会标记对象所在的卡表状态改为 dirty，卡表的本质是用来解决跨代引用的问题。具体怎么解决的可以参考 StackOverflow 上的这个问题 <a href="https://stackoverflow.com/questions/19154607/how-actually-card-table-and-writer-barrier-works" target="_blank" rel="noopener noreferrer">how-actually-card-table-and-writer-barrier-works在新窗口打开</a>，或者研读一下 cardTableRS.app 中的源码。</li>
</ul>
<h3><a class="header-anchor" href="#_2-2-jvm-内存划分"><span></span></a><a href="#_2-2-jvm-%E5%86%85%E5%AD%98%E5%88%92%E5%88%86">#</a> 2.2 JVM 内存划分</h3>
<p>从 JCP（Java Community Process）的官网中可以看到，目前 Java 版本最新已经到了 Java 16，未来的 Java 17 以及现在的 Java 11 和 Java 8 是 LTS 版本，JVM 规范也在随着迭代在变更，由于本文主要讨论 CMS，此处还是放 Java 8 的内存结构。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>GC 主要工作在 Heap 区和 MetaSpace 区（上图蓝色部分），在 Direct Memory 中，如果使用的是 DirectByteBuffer，那么在分配内存不够时则是 GC 通过 Cleaner#clean 间接管理。</p>
<p>任何自动内存管理系统都会面临的步骤：为新对象分配空间，然后收集垃圾对象空间，下面我们就展开介绍一下这些基础知识。</p>
<h3><a class="header-anchor" href="#_2-3-分配对象"><span></span></a><a href="#_2-3-%E5%88%86%E9%85%8D%E5%AF%B9%E8%B1%A1">#</a> 2.3 分配对象</h3>
<p>Java 中对象地址操作主要使用 Unsafe 调用了 C 的 allocate 和 free 两个方法，分配方法有两种：</p>
<ul>
<li><strong>空闲链表</strong>（free list）： 通过额外的存储记录空闲的地址，将随机 IO 变为顺序 IO，但带来了额外的空间消耗。</li>
<li><strong>碰撞指针</strong>（bump pointer）： 通过一个指针作为分界点，需要分配内存时，仅需把指针往空闲的一端移动与对象大小相等的距离，分配效率较高，但使用场景有限。</li>
</ul>
<h3><a class="header-anchor" href="#_2-4-收集对象"><span></span></a><a href="#_2-4-%E6%94%B6%E9%9B%86%E5%AF%B9%E8%B1%A1">#</a> 2.4 收集对象</h3>
<h4><a class="header-anchor" href="#_2-4-1-识别垃圾"><span></span></a><a href="#_2-4-1-%E8%AF%86%E5%88%AB%E5%9E%83%E5%9C%BE">#</a> 2.4.1 识别垃圾</h4>
<p><strong>引用计数法</strong>（Reference Counting）： 对每个对象的引用进行计数，每当有一个地方引用它时计数器 +1、引用失效则 -1，引用的计数放到对象头中，大于 0 的对象被认为是存活对象。虽然循环引用的问题可通过 Recycler 算法解决，但是在多线程环境下，引用计数变更也要进行昂贵的同步操作，性能较低，早期的编程语言会采用此算法。</p>
<p><strong>可达性分析</strong>，又称引用链法（Tracing GC）： 从 GC Root 开始进行对象搜索，可以被搜索到的对象即为可达对象，此时还不足以判断对象是否存活/死亡，需要经过多次标记才能更加准确地确定，整个连通图之外的对象便可以作为垃圾被回收掉。目前 Java 中主流的虚拟机均采用此算法。</p>
<blockquote>
<p>备注：引用计数法是可以处理循环引用问题的，下次面试时不要再这么说啦~ ~</p>
</blockquote>
<h4><a class="header-anchor" href="#_2-4-2-收集算法"><span></span></a><a href="#_2-4-2-%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95">#</a> 2.4.2 收集算法</h4>
<p>自从有自动内存管理出现之时就有的一些收集算法，不同的收集器也是在不同场景下进行组合。</p>
<p><strong>Mark-Sweep</strong>（标记-清除）： 回收过程主要分为两个阶段，第一阶段为追踪（Tracing）阶段，即从 GC Root 开始遍历对象图，并标记（Mark）所遇到的每个对象，第二阶段为清除（Sweep）阶段，即回收器检查堆中每一个对象，并将所有未被标记的对象进行回收，整个过程不会发生对象移动。整个算法在不同的实现中会使用三色抽象（Tricolour Abstraction）、位图标记（BitMap）等技术来提高算法的效率，存活对象较多时较高效。</p>
<p><strong>Mark-Compact</strong> （标记-整理）： 这个算法的主要目的就是解决在非移动式回收器中都会存在的碎片化问题，也分为两个阶段，第一阶段与 Mark-Sweep 类似，第二阶段则会对存活对象按照整理顺序（Compaction Order）进行整理。主要实现有双指针（Two-Finger）回收算法、滑动回收（Lisp2）算法和引线整理（Threaded Compaction）算法等。</p>
<p><strong>Copying</strong>（复制）： 将空间分为两个大小相同的 From 和 To 两个半区，同一时间只会使用其中一个，每次进行回收时将一个半区的存活对象通过复制的方式转移到另一个半区。有递归（Robert R. Fenichel 和 Jerome C. Yochelson提出）和迭代（Cheney 提出）算法，以及解决了前两者递归栈、缓存行等问题的近似优先搜索算法。复制算法可以通过碰撞指针的方式进行快速地分配内存，但是也存在着空间利用率不高的缺点，另外就是存活对象比较大时复制的成本比较高。</p>
<p>三种算法在是否移动对象、空间和时间方面的一些对比，假设存活对象数量为 <em>L</em>、堆空间大小为 <em>H</em>，则：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>把 mark、sweep、compaction、copying 这几种动作的耗时放在一起看，大致有这样的关系：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-4.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>虽然 compaction 与 copying 都涉及移动对象，但取决于具体算法，compaction 可能要先计算一次对象的目标地址，然后修正指针，最后再移动对象。copying 则可以把这几件事情合为一体来做，所以可以快一些。另外，还需要留意 GC 带来的开销不能只看 Collector 的耗时，还得看 Allocator 。如果能保证内存没碎片，分配就可以用 pointer bumping 方式，只需要挪一个指针就完成了分配，非常快。而如果内存有碎片就得用 freelist 之类的方式管理，分配速度通常会慢一些。</p>
<h3><a class="header-anchor" href="#_2-5-收集器"><span></span></a><a href="#_2-5-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5 收集器</h3>
<p>目前在 Hotspot VM 中主要有分代收集和分区收集两大类，具体可以看下面的这个图，不过未来会逐渐向分区收集发展。在美团内部，有部分业务尝试用了 ZGC（感兴趣的同学可以学习下这篇文章 <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>），其余基本都停留在 CMS 和 G1 上。另外在 JDK11 后提供了一个不执行任何垃圾回收动作的回收器 Epsilon（A No-Op Garbage Collector）用作性能分析。另外一个就是 Azul 的 Zing JVM，其 C4（Concurrent Continuously Compacting Collector）收集器也在业内有一定的影响力。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-5.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>备注：值得一提的是，早些年国内 GC 技术的布道者 RednaxelaFX （江湖人称 R 大）也曾就职于 Azul，本文的一部分材料也参考了他的一些文章。</p>
</blockquote>
<h4><a class="header-anchor" href="#_2-5-1-分代收集器"><span></span></a><a href="#_2-5-1-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.1 分代收集器</h4>
<ul>
<li><strong>ParNew</strong>： 一款多线程的收集器，采用复制算法，主要工作在 Young 区，可以通过 <code>-XX:ParallelGCThreads</code> 参数来控制收集的线程数，整个过程都是 STW 的，常与 CMS 组合使用。</li>
<li><strong>CMS</strong>： 以获取最短回收停顿时间为目标，采用“标记-清除”算法，分 4 大步进行垃圾收集，其中初始标记和重新标记会 STW ，多数应用于互联网站或者 B/S 系统的服务器端上，JDK9 被标记弃用，JDK14 被删除，详情可见 <a href="https://openjdk.java.net/jeps/363" target="_blank" rel="noopener noreferrer">JEP 363在新窗口打开</a>。</li>
</ul>
<h4><a class="header-anchor" href="#_2-5-2-分区收集器"><span></span></a><a href="#_2-5-2-%E5%88%86%E5%8C%BA%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.2 分区收集器</h4>
<ul>
<li><strong>G1</strong>： 一种服务器端的垃圾收集器，应用在多处理器和大容量内存环境中，在实现高吞吐量的同时，尽可能地满足垃圾收集暂停时间的要求。</li>
<li><strong>ZGC</strong>： JDK11 中推出的一款低延迟垃圾回收器，适用于大内存低延迟服务的内存管理和回收，SPECjbb 2015 基准测试，在 128G 的大堆下，最大停顿时间才 1.68 ms，停顿时间远胜于 G1 和 CMS。</li>
<li><strong>Shenandoah</strong>： 由 Red Hat 的一个团队负责开发，与 G1 类似，基于 Region 设计的垃圾收集器，但不需要 Remember Set 或者 Card Table 来记录跨 Region 引用，停顿时间和堆的大小没有任何关系。停顿时间与 ZGC 接近，下图为与 CMS 和 G1 等收集器的 benchmark。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-6.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-5-3-常用收集器"><span></span></a><a href="#_2-5-3-%E5%B8%B8%E7%94%A8%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.3 常用收集器</h4>
<p>目前使用最多的是 CMS 和 G1 收集器，二者都有分代的概念，主要内存结构如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-5-4-其他收集器"><span></span></a><a href="#_2-5-4-%E5%85%B6%E4%BB%96%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.4 其他收集器</h4>
<p>以上仅列出常见收集器，除此之外还有很多，如 Metronome、Stopless、Staccato、Chicken、Clover 等实时回收器，Sapphire、Compressor、Pauseless 等并发复制/整理回收器，Doligez-Leroy-Conthier 等标记整理回收器，由于篇幅原因，不在此一一介绍。</p>
<h3><a class="header-anchor" href="#_2-6-常用工具"><span></span></a><a href="#_2-6-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">#</a> 2.6 常用工具</h3>
<p>工欲善其事，必先利其器，此处列出一些笔者常用的工具，具体情况大家可以自由选择，本文的问题都是使用这些工具来定位和分析的。</p>
<h4><a class="header-anchor" href="#_2-6-1-命令行终端"><span></span></a><a href="#_2-6-1-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF">#</a> 2.6.1 命令行终端</h4>
<ul>
<li>标准终端类：jps、jinfo、jstat、jstack、jmap</li>
<li>功能整合类：jcmd、vjtools、arthas、greys</li>
</ul>
<h4><a class="header-anchor" href="#_2-6-2-可视化界面"><span></span></a><a href="#_2-6-2-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">#</a> 2.6.2 可视化界面</h4>
<ul>
<li>简易：JConsole、JVisualvm、HA、GCHisto、GCViewer</li>
<li>进阶：MAT、JProfiler</li>
<li>命令行推荐 <a href="">arthas</a> ，可视化界面推荐 JProfiler，此外还有一些在线的平台 gceasy、heaphero、fastthread ，美团内部的 Scalpel（一款自研的 JVM 问题诊断工具，暂时未开源）也比较好用。</li>
</ul>
<h2><a class="header-anchor" href="#_3-gc-问题判断"><span></span></a><a href="#_3-gc-%E9%97%AE%E9%A2%98%E5%88%A4%E6%96%AD">#</a> 3. GC 问题判断</h2>
<p>在做 GC 问题排查和优化之前，我们需要先来明确下到底是不是 GC 直接导致的问题，或者应用代码导致的 GC 异常，最终出现问题。</p>
<h3><a class="header-anchor" href="#_3-1-判断-gc-有没有问题"><span></span></a><a href="#_3-1-%E5%88%A4%E6%96%AD-gc-%E6%9C%89%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98">#</a> 3.1 判断 GC 有没有问题？</h3>
<h4><a class="header-anchor" href="#_3-1-1-设定评价标准"><span></span></a><a href="#_3-1-1-%E8%AE%BE%E5%AE%9A%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86">#</a> 3.1.1 设定评价标准</h4>
<p>评判 GC 的两个核心指标：</p>
<ul>
<li><strong>延迟（Latency）</strong>： 也可以理解为最大停顿时间，即垃圾收集过程中一次 STW 的最长时间，越短越好，一定程度上可以接受频次的增大，GC 技术的主要发展方向。</li>
<li><strong>吞吐量（Throughput）</strong>： 应用系统的生命周期内，由于 GC 线程会占用 Mutator 当前可用的 CPU 时钟周期，吞吐量即为 Mutator 有效花费的时间占系统总运行时间的百分比，例如系统运行了 100 min，GC 耗时 1 min，则系统吞吐量为 99%，吞吐量优先的收集器可以接受较长的停顿。</li>
</ul>
<p>目前各大互联网公司的系统基本都更追求低延时，避免一次 GC 停顿的时间过长对用户体验造成损失，衡量指标需要结合一下应用服务的 SLA，主要如下两点来判断：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>简而言之，即为一次停顿的时间不超过应用服务的 TP9999，GC 的吞吐量不小于 99.99%。举个例子，假设某个服务 A 的 TP9999 为 80 ms，平均 GC 停顿为 30 ms，那么该服务的最大停顿时间最好不要超过 80 ms，GC 频次控制在 5 min 以上一次。如果满足不了，那就需要调优或者通过更多资源来进行并联冗余。（大家可以先停下来，看看监控平台上面的 gc.meantime 分钟级别指标，如果超过了 6 ms 那单机 GC 吞吐量就达不到 4 个 9 了。）</p>
<blockquote>
<p>备注：除了这两个指标之外还有 Footprint（资源量大小测量）、反应速度等指标，互联网这种实时系统追求低延迟，而很多嵌入式系统则追求 Footprint。</p>
</blockquote>
<h4><a class="header-anchor" href="#_3-1-2-读懂-gc-cause"><span></span></a><a href="#_3-1-2-%E8%AF%BB%E6%87%82-gc-cause">#</a> 3.1.2 读懂 GC Cause</h4>
<p>拿到 GC 日志，我们就可以简单分析 GC 情况了，通过一些工具，我们可以比较直观地看到 Cause 的分布情况，如下图就是使用 gceasy 绘制的图表：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，我们很清晰的就能知道是什么原因引起的 GC，以及每次的时间花费情况，但是要分析 GC 的问题，先要读懂 GC Cause，即 JVM 什么样的条件下选择进行 GC 操作，具体 Cause 的分类可以看一下 Hotspot 源码：<code>src/share/vm/gc/shared/gcCause.hpp 和 src/share/vm/gc/shared/gcCause.cpp</code> 中。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#C678DD"> char*</span><span style="color:#E5C07B"> GCCause</span><span style="color:#ABB2BF">::</span><span style="color:#61AFEF">to_string</span><span style="color:#ABB2BF">(GCCause::</span><span style="color:#E5C07B">Cause</span><span style="color:#E06C75;font-style:italic"> cause</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">  switch</span><span style="color:#ABB2BF"> (cause) {</span></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _java_lang_system_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "System.gc()"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _full_gc_alot:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "FullGCAlot"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _scavenge_alot:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "ScavengeAlot"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _allocation_profiler:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Allocation Profiler"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _jvmti_force_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "JvmtiEnv ForceGarbageCollection"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _gc_locker:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "GCLocker Initiated GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _heap_inspection:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Heap Inspection Initiated GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _heap_dump:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Heap Dump Initiated GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _wb_young_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "WhiteBox Initiated Young GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _wb_conc_mark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "WhiteBox Initiated Concurrent Mark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _wb_full_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "WhiteBox Initiated Full GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _no_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "No GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _allocation_failure:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Allocation Failure"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _tenured_generation_full:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Tenured Generation Full"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _metadata_GC_threshold:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Metadata GC Threshold"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _metadata_GC_clear_soft_refs:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Metadata GC Clear Soft References"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_generation_full:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Generation Full"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_initial_mark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Initial Mark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_final_remark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Final Remark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_concurrent_mark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Concurrent Mark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _old_generation_expanded_on_last_scavenge:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Old Generation Expanded On Last Scavenge"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _old_generation_too_full_to_scavenge:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Old Generation Too Full To Scavenge"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _adaptive_size_policy:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Ergonomics"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _g1_inc_collection_pause:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "G1 Evacuation Pause"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _g1_humongous_allocation:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "G1 Humongous Allocation"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _dcmd_gc_run:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Diagnostic Command"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _last_gc_cause:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "ILLEGAL VALUE - last gc cause - ILLEGAL VALUE"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    default</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "unknown GCCause"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#61AFEF">  ShouldNotReachHere</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点需要关注的几个GC Cause：</p>
<ul>
<li><code>System.gc()</code>： 手动触发GC操作。</li>
<li><code>CMS</code>： CMS GC 在执行过程中的一些动作，重点关注 CMS Initial Mark 和 CMS Final Remark 两个 STW 阶段。</li>
<li><code>Promotion Failure</code>： Old 区没有足够的空间分配给 Young 区晋升的对象（即使总可用内存足够大）。</li>
<li><code>Concurrent Mode Failure</code>： CMS GC 运行期间，Old 区预留的空间不足以分配给新的对象，此时收集器会发生退化，严重影响 GC 性能，下面的一个案例即为这种场景。</li>
<li><code>GCLocker Initiated GC</code>： 如果线程执行在 JNI 临界区时，刚好需要进行 GC，此时 GC Locker 将会阻止 GC 的发生，同时阻止其他线程进入 JNI 临界区，直到最后一个线程退出临界区时触发一次 GC。</li>
</ul>
<p>什么时机使用这些 Cause 触发回收，大家可以看一下 CMS 的代码，这里就不讨论了，具体在 <code>/src/hotspot/share/gc/cms/concurrentMarkSweepGeneration.cpp</code> 中。</p>
<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">bool</span><span style="color:#E5C07B"> CMSCollector</span><span style="color:#ABB2BF">::</span><span style="color:#61AFEF">shouldConcurrentCollect</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#61AFEF">  LogTarget</span><span style="color:#ABB2BF">(Trace, gc) log;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#ABB2BF"> (_full_gc_requested) {</span></span>
<span class="line"><span style="color:#E5C07B">    log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"CMSCollector: collect because of explicit  gc request (or GCLocker)"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">  FreelistLocker </span><span style="color:#61AFEF">x</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // </span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-1.png" type="image/png"/>
    </item>
    <item>
      <title>GC 垃圾回收器之G1详解</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BG1%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BG1%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收器之G1详解</source>
      <description>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。 G...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。</p>
</blockquote>
<ul>
<li>
<p>GC 垃圾回收器之G1详解</p>
<ul>
<li>
<p><a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a></p>
</li>
<li>
<ol start="2">
<li>G1的内存模型</li>
</ol>
<ul>
<li>2.1 分区概念
<ul>
<li><a href="#211-%E5%88%86%E5%8C%BAregion">2.1.1 分区Region</a></li>
<li><a href="#212-%E5%8D%A1%E7%89%87card">2.1.2 卡片Card</a></li>
<li><a href="#213-%E5%A0%86heap">2.1.3 堆Heap</a></li>
</ul>
</li>
<li>2.2 分代模型
<ul>
<li><a href="#221-%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86">2.2.1 分代垃圾收集</a></li>
<li><a href="#222-%E6%9C%AC%E5%9C%B0%E5%88%86%E9%85%8D%E7%BC%93%E5%86%B2-local-allocation-buffer-lab">2.2.2 本地分配缓冲 Local allocation buffer (Lab)</a></li>
</ul>
</li>
<li>2.3 分区模型
<ul>
<li><a href="#231-%E5%B7%A8%E5%BD%A2%E5%AF%B9%E8%B1%A1humongous-region">2.3.1 巨形对象Humongous Region</a></li>
<li><a href="#232-%E5%B7%B2%E8%AE%B0%E5%BF%86%E9%9B%86%E5%90%88remember-set-rset">2.3.2 已记忆集合Remember Set (RSet)</a></li>
<li><a href="#233-per-region-table-prt">2.3.3 Per Region Table (PRT)</a></li>
</ul>
</li>
<li>2.4 收集集合 (CSet)
<ul>
<li><a href="#241-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-young-collection">2.4.1 年轻代收集集合 CSet of Young Collection</a></li>
<li><a href="#242-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-mixed-collection">2.4.2 混合收集集合 CSet of Mixed Collection</a></li>
<li><a href="#243-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95">2.4.3 并发标记算法（三色标记法）</a></li>
<li><a href="#244-%E6%BC%8F%E6%A0%87%E9%97%AE%E9%A2%98">2.4.4 漏标问题</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="3">
<li>G1的活动周期</li>
</ol>
<ul>
<li><a href="#31-g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%B4%BB%E5%8A%A8%E6%B1%87%E6%80%BB">3.1 G1垃圾收集活动汇总</a></li>
<li>3.2 RSet的维护
<ul>
<li><a href="#321-%E6%A0%85%E6%A0%8Fbarrier">3.2.1 栅栏Barrier</a></li>
<li><a href="#322-%E8%B5%B7%E5%A7%8B%E5%BF%AB%E7%85%A7%E7%AE%97%E6%B3%95snapshot-at-the-beginning-satb">3.2.2 起始快照算法Snapshot at the beginning (SATB)</a></li>
<li><a href="#323-%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E7%BA%BF%E7%A8%8Bconcurrence-refinement-threads">3.2.3 并发优化线程Concurrence Refinement Threads</a></li>
</ul>
</li>
<li>3.3 并发标记周期 Concurrent Marking Cycle
<ul>
<li><a href="#331-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%BA%BF%E7%A8%8B-concurrent-marking-threads">3.3.1 并发标记线程 Concurrent Marking Threads</a></li>
<li><a href="#332-%E5%88%9D%E5%A7%8B%E6%A0%87%E8%AE%B0-initial-mark">3.3.2 初始标记 Initial Mark</a></li>
<li><a href="#333-%E6%A0%B9%E5%88%86%E5%8C%BA%E6%89%AB%E6%8F%8F-root-region-scanning">3.3.3 根分区扫描 Root Region Scanning</a></li>
<li><a href="#334-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0-concurrent-marking">3.3.4 并发标记 Concurrent Marking</a></li>
<li><a href="#335-%E5%AD%98%E6%B4%BB%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97-live-data-accounting">3.3.5 存活数据计算 Live Data Accounting</a></li>
<li><a href="#336-%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0-remark">3.3.6 重新标记 Remark</a></li>
<li><a href="#337-%E6%B8%85%E9%99%A4-cleanup">3.3.7 清除 Cleanup</a></li>
</ul>
</li>
<li>3.4 年轻代收集/混合收集周期
<ul>
<li><a href="#341-gc%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E6%95%B0">3.4.1 GC工作线程数</a></li>
<li><a href="#342-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-young-collection">3.4.2 年轻代收集 Young Collection</a></li>
</ul>
</li>
<li>3.5 并发标记周期后的年轻代收集 Young Collection Following Concurrent Marking Cycle
<ul>
<li><a href="#351-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E5%91%A8%E6%9C%9F-mixed-collection-cycle">3.5.1 混合收集周期 Mixed Collection Cycle</a></li>
<li><a href="#352-%E8%BD%AC%E7%A7%BB%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%8B%85%E4%BF%9D%E6%9C%BA%E5%88%B6-full-gc">3.5.2 转移失败的担保机制 Full GC</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="#4-%E6%80%BB%E7%BB%93">4. 总结</a></p>
</li>
<li>
<p><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></p>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#_1-概述"><span></span></a><a href="#_1-%E6%A6%82%E8%BF%B0">#</a> 1. 概述</h2>
<p>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。G1是一个分代的，增量的，并行与并发的标记-复制垃圾回收器。它的设计目标是为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。G1回收器和CMS比起来，有以下不同：</p>
<ul>
<li>G1垃圾回收器是<strong>compacting</strong>的，因此其回收得到的空间是连续的。这避免了CMS回收器因为不连续空间所造成的问题。如需要更大的堆空间，更多的floating garbage。连续空间意味着G1垃圾回收器可以不必采用空闲链表的内存分配方式，而可以直接采用bump-the-pointer的方式；</li>
<li>G1回收器的内存与CMS回收器要求的内存模型有极大的不同。G1将内存划分一个个固定大小的region，每个region可以是年轻代、老年代的一个。<strong>内存的回收是以region作为基本单位的</strong>；</li>
<li>G1还有一个及其重要的特性：<strong>软实时</strong>（soft real-time）。所谓的实时垃圾回收，是指在要求的时间内完成垃圾回收。“软实时”则是指，用户可以指定垃圾回收时间的限时，G1会努力在这个时限内完成垃圾回收，但是G1并不担保每次都能在这个时限内完成垃圾回收。通过设定一个合理的目标，可以让达到90%以上的垃圾回收时间都在这个时限内。</li>
</ul>
<h2><a class="header-anchor" href="#_2-g1的内存模型"><span></span></a><a href="#_2-g1%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">#</a> 2. G1的内存模型</h2>
<h3><a class="header-anchor" href="#_2-1-分区概念"><span></span></a><a href="#_2-1-%E5%88%86%E5%8C%BA%E6%A6%82%E5%BF%B5">#</a> 2.1 分区概念</h3>
<p>G1分区示意图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-1.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-1-1-分区region"><span></span></a><a href="#_2-1-1-%E5%88%86%E5%8C%BAregion">#</a> 2.1.1 分区Region</h4>
<p>G1采用了分区(Region)的思路，将整个堆空间分成若干个大小相等的内存区域，每次分配对象空间将逐段地使用内存。因此，在堆的使用上，G1并不要求对象的存储一定是物理上连续的，只要逻辑上连续即可；每个分区也不会确定地为某个代服务，可以按需在年轻代和老年代之间切换。启动时可以通过参数-XX:G1HeapRegionSize=n可指定分区大小(1MB~32MB，且必须是2的幂)，默认将整堆划分为2048个分区。</p>
<h4><a class="header-anchor" href="#_2-1-2-卡片card"><span></span></a><a href="#_2-1-2-%E5%8D%A1%E7%89%87card">#</a> 2.1.2 卡片Card</h4>
<p>在每个分区内部又被分成了若干个大小为512 Byte卡片(Card)，标识堆内存最小可用粒度所有分区的卡片将会记录在全局卡片表(Global Card Table)中，分配的对象会占用物理上连续的若干个卡片，当查找对分区内对象的引用时便可通过记录卡片来查找该引用对象(见RSet)。每次对内存的回收，都是对指定分区的卡片进行处理。</p>
<h4><a class="header-anchor" href="#_2-1-3-堆heap"><span></span></a><a href="#_2-1-3-%E5%A0%86heap">#</a> 2.1.3 堆Heap</h4>
<p>G1同样可以通过-Xms/-Xmx来指定堆空间大小。当发生年轻代收集或混合收集时，通过计算GC与应用的耗费时间比，自动调整堆空间大小。如果GC频率太高，则通过增加堆尺寸，来减少GC频率，相应地GC占用的时间也随之降低；目标参数-XX:GCTimeRatio即为GC与应用的耗费时间比，G1默认为9，而CMS默认为99，因为CMS的设计原则是耗费在GC上的时间尽可能的少。另外，当空间不足，如对象空间分配或转移失败时，G1会首先尝试增加堆空间，如果扩容失败，则发起担保的Full GC。Full GC后，堆尺寸计算结果也会调整堆空间。</p>
<h3><a class="header-anchor" href="#_2-2-分代模型"><span></span></a><a href="#_2-2-%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B">#</a> 2.2 分代模型</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-2.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-2-1-分代垃圾收集"><span></span></a><a href="#_2-2-1-%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86">#</a> 2.2.1 分代垃圾收集</h4>
<p>分代垃圾收集可以将关注点集中在最近被分配的对象上，而无需整堆扫描，避免长命对象的拷贝，同时独立收集有助于降低响应时间。虽然分区使得内存分配不再要求紧凑的内存空间，但G1依然使用了分代的思想。与其他垃圾收集器类似，G1将内存在逻辑上划分为年轻代和老年代，其中年轻代又划分为Eden空间和Survivor空间。但年轻代空间并不是固定不变的，当现有年轻代分区占满时，JVM会分配新的空闲分区加入到年轻代空间。</p>
<p>整个年轻代内存会在初始空间<code>-XX:G1NewSizePercent</code>(默认整堆5%)与最大空间(默认60%)之间动态变化，且由参数目标暂停时间<code>-XX:MaxGCPauseMillis</code>(默认200ms)、需要扩缩容的大小以<code>-XX:G1MaxNewSizePercent</code>及分区的已记忆集合(RSet)计算得到。当然，G1依然可以设置固定的年轻代大小(参数-XX:NewRatio、-Xmn)，但同时暂停目标将失去意义。</p>
<h4><a class="header-anchor" href="#_2-2-2-本地分配缓冲-local-allocation-buffer-lab"><span></span></a><a href="#_2-2-2-%E6%9C%AC%E5%9C%B0%E5%88%86%E9%85%8D%E7%BC%93%E5%86%B2-local-allocation-buffer-lab">#</a> 2.2.2 本地分配缓冲 Local allocation buffer (Lab)</h4>
<p>值得注意的是，由于分区的思想，每个线程均可以"认领"某个分区用于线程本地的内存分配，而不需要顾及分区是否连续。因此，每个应用线程和GC线程都会独立的使用分区，进而减少同步时间，提升GC效率，这个分区称为本地分配缓冲区(Lab)。</p>
<p>其中，应用线程可以独占一个本地缓冲区(TLAB)来创建的对象，而大部分都会落入Eden区域(巨型对象或分配失败除外)，因此TLAB的分区属于Eden空间；而每次垃圾收集时，每个GC线程同样可以独占一个本地缓冲区(GCLAB)用来转移对象，每次回收会将对象复制到Suvivor空间或老年代空间；对于从Eden/Survivor空间晋升(Promotion)到Survivor/老年代空间的对象，同样有GC独占的本地缓冲区进行操作，该部分称为晋升本地缓冲区(PLAB)。</p>
<h3><a class="header-anchor" href="#_2-3-分区模型"><span></span></a><a href="#_2-3-%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B">#</a> 2.3 分区模型</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-3.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>G1对内存的使用以分区(Region)为单位，而对对象的分配则以卡片(Card)为单位。</p>
<h4><a class="header-anchor" href="#_2-3-1-巨形对象humongous-region"><span></span></a><a href="#_2-3-1-%E5%B7%A8%E5%BD%A2%E5%AF%B9%E8%B1%A1humongous-region">#</a> 2.3.1 巨形对象Humongous Region</h4>
<p>一个大小达到甚至超过分区大小一半的对象称为巨型对象(Humongous Object)。当线程为巨型分配空间时，不能简单在TLAB进行分配，因为巨型对象的移动成本很高，而且有可能一个分区不能容纳巨型对象。因此，巨型对象会直接在老年代分配，所占用的连续空间称为巨型分区(Humongous Region)。G1内部做了一个优化，一旦发现没有引用指向巨型对象，则可直接在年轻代收集周期中被回收。</p>
<p>巨型对象会独占一个、或多个连续分区，其中第一个分区被标记为开始巨型(StartsHumongous)，相邻连续分区被标记为连续巨型(ContinuesHumongous)。由于无法享受Lab带来的优化，并且确定一片连续的内存空间需要扫描整堆，因此确定巨型对象开始位置的成本非常高，如果可以，应用程序应避免生成巨型对象。</p>
<h4><a class="header-anchor" href="#_2-3-2-已记忆集合remember-set-rset"><span></span></a><a href="#_2-3-2-%E5%B7%B2%E8%AE%B0%E5%BF%86%E9%9B%86%E5%90%88remember-set-rset">#</a> 2.3.2 已记忆集合Remember Set (RSet)</h4>
<p>在串行和并行收集器中，GC通过整堆扫描，来确定对象是否处于可达路径中。然而G1为了避免STW式的整堆扫描，在每个分区记录了一个已记忆集合(RSet)，内部类似一个反向指针，记录引用分区内对象的卡片索引。当要回收该分区时，通过扫描分区的RSet，来确定引用本分区内的对象是否存活，进而确定本分区内的对象存活情况。</p>
<p>事实上，并非所有的引用都需要记录在RSet中，如果一个分区确定需要扫描，那么无需RSet也可以无遗漏的得到引用关系。那么引用源自本分区的对象，当然不用落入RSet中；同时，G1 GC每次都会对年轻代进行整体收集，因此引用源自年轻代的对象，也不需要在RSet中记录。最后只有老年代的分区可能会有RSet记录，这些分区称为拥有RSet分区(an RSet’s owning region)。</p>
<h4><a class="header-anchor" href="#_2-3-3-per-region-table-prt"><span></span></a><a href="#_2-3-3-per-region-table-prt">#</a> 2.3.3 Per Region Table (PRT)</h4>
<p>RSet在内部使用Per Region Table(PRT)记录分区的引用情况。由于RSet的记录要占用分区的空间，如果一个分区非常"受欢迎"，那么RSet占用的空间会上升，从而降低分区的可用空间。G1应对这个问题采用了改变RSet的密度的方式，在PRT中将会以三种模式记录引用：</p>
<ul>
<li>稀少：直接记录引用对象的卡片索引</li>
<li>细粒度：记录引用对象的分区索引</li>
<li>粗粒度：只记录引用情况，每个分区对应一个比特位</li>
</ul>
<p>由上可知，粗粒度的PRT只是记录了引用数量，需要通过整堆扫描才能找出所有引用，因此扫描速度也是最慢的。</p>
<h3><a class="header-anchor" href="#_2-4-收集集合-cset"><span></span></a><a href="#_2-4-%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset">#</a> 2.4 收集集合 (CSet)</h3>
<p>CSet收集示意图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-4.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>收集集合(CSet)代表每次GC暂停时回收的一系列目标分区。在任意一次收集暂停中，CSet所有分区都会被释放，内部存活的对象都会被转移到分配的空闲分区中。因此无论是年轻代收集，还是混合收集，工作的机制都是一致的。年轻代收集CSet只容纳年轻代分区，而混合收集会通过启发式算法，在老年代候选回收分区中，筛选出回收收益最高的分区添加到CSet中。</p>
<p>候选老年代分区的CSet准入条件，可以通过活跃度阈值-XX:G1MixedGCLiveThresholdPercent(默认85%)进行设置，从而拦截那些回收开销巨大的对象；同时，每次混合收集可以包含候选老年代分区，可根据CSet对堆的总大小占比-XX:G1OldCSetRegionThresholdPercent(默认10%)设置数量上限。</p>
<p>由上述可知，G1的收集都是根据CSet进行操作的，年轻代收集与混合收集没有明显的不同，最大的区别在于两种收集的触发条件。</p>
<h4><a class="header-anchor" href="#_2-4-1-年轻代收集集合-cset-of-young-collection"><span></span></a><a href="#_2-4-1-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-young-collection">#</a> 2.4.1 年轻代收集集合 CSet of Young Collection</h4>
<p>应用线程不断活动后，年轻代空间会被逐渐填满。当JVM分配对象到Eden区域失败(Eden区已满)时，便会触发一次STW式的年轻代收集。在年轻代收集中，Eden分区存活的对象将被拷贝到Survivor分区；原有Survivor分区存活的对象，将根据任期阈值(tenuring threshold)分别晋升到PLAB中，新的survivor分区和老年代分区。而原有的年轻代分区将被整体回收掉。</p>
<p>同时，年轻代收集还负责维护对象的年龄(存活次数)，辅助判断老化(tenuring)对象晋升的时候是到Survivor分区还是到老年代分区。年轻代收集首先先将晋升对象尺寸总和、对象年龄信息维护到年龄表中，再根据年龄表、Survivor尺寸、Survivor填充容量-XX:TargetSurvivorRatio(默认50%)、最大任期阈值-XX:MaxTenuringThreshold(默认15)，计算出一个恰当的任期阈值，凡是超过任期阈值的对象都会被晋升到老年代。</p>
<h4><a class="header-anchor" href="#_2-4-2-混合收集集合-cset-of-mixed-collection"><span></span></a><a href="#_2-4-2-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-mixed-collection">#</a> 2.4.2 混合收集集合 CSet of Mixed Collection</h4>
<p>年轻代收集不断活动后，老年代的空间也会被逐渐填充。当老年代占用空间超过整堆比IHOP阈值-XX:InitiatingHeapOccupancyPercent(默认45%)时，G1就会启动一次混合垃圾收集周期。为了满足暂停目标，G1可能不能一口气将所有的候选分区收集掉，因此G1可能会产生连续多次的混合收集与应用线程交替执行，每次STW的混合收集与年轻代收集过程相类似。</p>
<p>为了确定包含到年轻代收集集合CSet的老年代分区，JVM通过参数混合周期的最大总次数-XX:G1MixedGCCountTarget(默认8)、堆废物百分比-XX:G1HeapWastePercent(默认5%)。通过候选老年代分区总数与混合周期最大总次数，确定每次包含到CSet的最小分区数量；根据堆废物百分比，当收集达到参数时，不再启动新的混合收集。而每次添加到CSet的分区，则通过计算得到的GC效率进行安排。</p>
<h4><a class="header-anchor" href="#_2-4-3-并发标记算法-三色标记法"><span></span></a><a href="#_2-4-3-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95-%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95">#</a> 2.4.3 并发标记算法（三色标记法）</h4>
<p>CMS和G1在并发标记时使用的是同一个算法：三色标记法，使用白灰黑三种颜色标记对象。白色是未标记；灰色自身被标记，引用的对象未标记；黑色自身与引用对象都已标记。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>GC 开始前所有对象都是白色，GC 一开始所有根能够直达的对象被压到栈中，待搜索，此时颜色是灰色。然后灰色对象依次从栈中取出搜索子对象，子对象也会被涂为灰色，入栈。当其所有的子对象都涂为灰色之后该对象被涂为黑色。当 GC 结束之后灰色对象将全部没了，剩下黑色的为存活对象，白色的为垃圾。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-5-1.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-4-4-漏标问题"><span></span></a><a href="#_2-4-4-%E6%BC%8F%E6%A0%87%E9%97%AE%E9%A2%98">#</a> 2.4.4 漏标问题</h4>
<p>在remark过程中，黑色指向了白色，如果不对黑色重新扫描，则会漏标。会把白色D对象当作没有新引用指向从而回收掉。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>并发标记过程中，Mutator删除了所有从灰色到白色的引用，会产生漏标。此时白色对象应该被回收</p>
<p>产生漏标问题的条件有两个：</p>
<ul>
<li>黑色对象指向了白色对象</li>
<li>灰色对象指向白色对象的引用消失</li>
</ul>
<p>所以要解决漏标问题，打破两个条件之一即可：</p>
<ul>
<li><strong>跟踪黑指向白的增加</strong> incremental update：增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。CMS采用该方法。</li>
<li><strong>记录灰指向白的消失</strong> SATB snapshot at the beginning：关注引用的删除，当灰–&gt;白消失时，要把这个 引用 推到GC的堆栈，保证白还能被GC扫描到。G1采用该方法。</li>
</ul>
<p><strong>为什么G1采用SATB而不用incremental update</strong>？</p>
<p>因为采用incremental update把黑色重新标记为灰色后，之前扫描过的还要再扫描一遍，效率太低。G1有RSet与SATB相配合。Card Table里记录了RSet，RSet里记录了其他对象指向自己的引用，这样就不需要再扫描其他区域，只要扫描RSet就可以了。</p>
<p>也就是说 灰色–&gt;白色 引用消失时，如果没有 黑色–&gt;白色，引用会被push到堆栈，下次扫描时拿到这个引用，由于有RSet的存在，不需要扫描整个堆去查找指向白色的引用，效率比较高。SATB配合RSet浑然天成。</p>
<h2><a class="header-anchor" href="#_3-g1的活动周期"><span></span></a><a href="#_3-g1%E7%9A%84%E6%B4%BB%E5%8A%A8%E5%91%A8%E6%9C%9F">#</a> 3. G1的活动周期</h2>
<h3><a class="header-anchor" href="#_3-1-g1垃圾收集活动汇总"><span></span></a><a href="#_3-1-g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%B4%BB%E5%8A%A8%E6%B1%87%E6%80%BB">#</a> 3.1 G1垃圾收集活动汇总</h3>
<p>G1垃圾收集活动周期图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-7.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#_3-2-rset的维护"><span></span></a><a href="#_3-2-rset%E7%9A%84%E7%BB%B4%E6%8A%A4">#</a> 3.2 RSet的维护</h3>
<p>由于不能整堆扫描，又需要计算分区确切的活跃度，因此，G1需要一个增量式的完全标记并发算法，通过维护RSet，得到准确的分区引用信息。在G1中，RSet的维护主要来源两个方面：写栅栏(Write Barrier)和并发优化线程(Concurrence Refinement Threads)</p>
<h4><a class="header-anchor" href="#_3-2-1-栅栏barrier"><span></span></a><a href="#_3-2-1-%E6%A0%85%E6%A0%8Fbarrier">#</a> 3.2.1 栅栏Barrier</h4>
<p>栅栏代码示意</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-8.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>我们首先介绍一下栅栏(Barrier)的概念。栅栏是指在原生代码片段中，当某些语句被执行时，栅栏代码也会被执行。而G1主要在赋值语句中，使用写前栅栏(Pre-Write Barrrier)和写后栅栏(Post-Write Barrrier)。事实上，写栅栏的指令序列开销非常昂贵，应用吞吐量也会根据栅栏复杂度而降低。</p>
<p><strong>写前栅栏 Pre-Write Barrrier</strong></p>
<p>即将执行一段赋值语句时，等式左侧对象将修改引用到另一个对象，那么等式左侧对象原先引用的对象所在分区将因此丧失一个引用，那么JVM就需要在赋值语句生效之前，记录丧失引用的对象。JVM并不会立即维护RSet，而是通过批量处理，在将来RSet更新(见SATB)。</p>
<p><strong>写后栅栏 Post-Write Barrrier</strong></p>
<p>当执行一段赋值语句后，等式右侧对象获取了左侧对象的引用，那么等式右侧对象所在分区的RSet也应该得到更新。同样为了降低开销，写后栅栏发生后，RSet也不会立即更新，同样只是记录此次更新日志，在将来批量处理(见Concurrence Refinement Threads)。</p>
<h4><a class="header-anchor" href="#_3-2-2-起始快照算法snapshot-at-the-beginning-satb"><span></span></a><a href="#_3-2-2-%E8%B5%B7%E5%A7%8B%E5%BF%AB%E7%85%A7%E7%AE%97%E6%B3%95snapshot-at-the-beginning-satb">#</a> 3.2.2 起始快照算法Snapshot at the beginning (SATB)</h4>
<p>Taiichi Tuasa贡献的增量式完全并发标记算法起始快照算法(SATB)，主要针对标记-清除垃圾收集器的并发标记阶段，非常适合G1的分区块的堆结构，同时解决了CMS的主要烦恼：重新标记暂停时间长带来的潜在风险。</p>
<p>SATB会创建一个对象图，相当于堆的逻辑快照，从而确保并发标记阶段所有的垃圾对象都能通过快照被鉴别出来。当赋值语句发生时，应用将会改变了它的对象图，那么JVM需要记录被覆盖的对象。因此写前栅栏会在引用变更前，将值记录在SATB日志或缓冲区中。每个线程都会独占一个SATB缓冲区，初始有256条记录空间。当空间用尽时，线程会分配新的SATB缓冲区继续使用，而原有的缓冲去则加入全局列表中。最终在并发标记阶段，并发标记线程(Concurrent Marking Threads)在标记的同时，还会定期检查和处理全局缓冲区列表的记录，然后根据标记位图分片的标记位，扫描引用字段来更新RSet。此过程又称为并发标记/SATB写前栅栏。</p>
<h4><a class="header-anchor" href="#_3-2-3-并发优化线程concurrence-refinement-threads"><span></span></a><a href="#_3-2-3-%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E7%BA%BF%E7%A8%8Bconcurrence-refinement-threads">#</a> 3.2.3 并发优化线程Concurrence Refinement Threads</h4>
<p>G1中使用基于Urs Hölzle的快速写栅栏，将栅栏开销缩减到2个额外的指令。栅栏将会更新一个card table type的结构来跟踪代间引用。</p>
<p>当赋值语句发生后，写后栅栏会先通过G1的过滤技术判断是否是跨分区的引用更新，并将跨分区更新对象的卡片加入缓冲区序列，即更新日志缓冲区或脏卡片队列。与SATB类似，一旦日志缓冲区用尽，则分配一个新的日志缓冲区，并将原来的缓冲区加入全局列表中。</p>
<p>并发优化线程(Concurrence Refinement Threads)，只专注扫描日志缓冲区记录的卡片来维护更新RSet，线程最大数目可通过<code>-XX:G1ConcRefinementThreads</code>(默认等于<code>-XX:ParellelGCThreads</code>)设置。并发优化线程永远是活跃的，一旦发现全局列表有记录存在，就开始并发处理。如果记录增长很快或者来不及处理，那么通过阈值<code>-X:G1ConcRefinementGreenZone/-XX:G1ConcRefinementYellowZone/-XX:G1ConcRefinementRedZone</code>，G1会用分层的方式调度，使更多的线程处理全局列表。如果并发优化线程也不能跟上缓冲区数量，则Mutator线程(Java应用线程)会挂起应用并被加进来帮助处理，直到全部处理完。因此，必须避免此类场景出现。</p>
<h3><a class="header-anchor" href="#_3-3-并发标记周期-concurrent-marking-cycle"><span></span></a><a href="#_3-3-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E5%91%A8%E6%9C%9F-concurrent-marking-cycle">#</a> 3.3 并发标记周期 Concurrent Marking Cycle</h3>
<p>并发标记周期是G1中非常重要的阶段，这个阶段将会为混合收集周期识别垃圾最多的老年代分区。整个周期完成根标记、识别所有(可能)存活对象，并计算每个分区的活跃度，从而确定GC效率等级。</p>
<p>当达到IHOP阈值<code>-XX:InitiatingHeapOccupancyPercent</code>(老年代占整堆比，默认45%)时，便会触发并发标记周期。整个并发标记周期将由初始标记(Initial Mark)、根分区扫描(Root Region Scanning)、并发标记(Concurrent Marking)、重新标记(Remark)、清除(Cleanup)几个阶段组成。其中，初始标记(随年轻代收集一起活动)、重新标记、清除是STW的，而并发标记如果来不及标记存活对象，则可能在并发标记过程中，G1又触发了几次年轻代收集。</p>
<h4><a class="header-anchor" href="#_3-3-1-并发标记线程-concurrent-marking-threads"><span></span></a><a href="#_3-3-1-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%BA%BF%E7%A8%8B-concurrent-marking-threads">#</a> 3.3.1 并发标记线程 Concurrent Marking Threads</h4>
<p>并发标记位图过程</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>要标记存活的对象，每个分区都需要创建位图(Bitmap)信息来存储标记数据，来确定标记周期内被分配的对象。G1采用了两个位图Previous Bitmap、Next Bitmap，来存储标记数据，Previous位图存储上次的标记数据，Next位图在标记周期内不断变化更新，同时Previous位图的标记数据也越来越过时，当标记周期结束后Next位图便替换Previous位图，成为上次标记的位图。同时，每个分区通过顶部开始标记(TAMS)，来记录已标记过的内存范围。同样的，G1使用了两个顶部开始标记Previous TAMS(PTAMS)、Next TAMS(NTAMS)，记录已标记的范围。</p>
<p>在并发标记阶段，G1会根据参数<code>-XX:ConcGCThreads</code>(默认GC线程数的1/4，即<code>-XX:ParallelGCThreads/4</code>)，分配并发标记线程(Concurrent Marking Threads)，进行标记活动。每个并发线程一次只扫描一个分区，并通过"手指"指针的方式优化获取分区。并发标记线程是爆发式的，在给定的时间段拼命干活，然后休息一段时间，再拼命干活。</p>
<p>每个并发标记周期，在初始标记STW的最后，G1会分配一个空的Next位图和一个指向分区顶部(Top)的NTAMS标记。Previous位图记录的上次标记数据，上次的标记位置，即PTAMS，在PTAMS与分区底部(Bottom)的范围内，所有的存活对象都已被标记。那么，在PTAMS与Top之间的对象都将是隐式存活(Implicitly Live)对象。在并发标记阶段，Next位图吸收了Previous位图的标记数据，同时每个分区都会有新的对象分配，则Top与NTAMS分离，前往更高的地址空间。在并发标记的一次标记中，并发标记线程将找出NTAMS与PTAMS之间的所有存活对象，将标记数据存储在Next位图中。同时，在NTAMS与Top之间的对象即成为已标记对象。如此不断地更新Next位图信息，并在清除阶段与Previous位图交换角色。</p>
<h4><a class="header-anchor" href="#_3-3-2-初始标记-initial-mark"><span></span></a><a href="#_3-3-2-%E5%88%9D%E5%A7%8B%E6%A0%87%E8%AE%B0-initial-mark">#</a> 3.3.2 初始标记 Initial Mark</h4>
<p>初始标记(Initial Mark)负责标记所有能被直接可达的根对象(原生栈对象、全局对象、JNI对象)，根是对象图的起点，因此初始标记需要将Mutator线程(Java应用线程)暂停掉，也就是需要一个STW的时间段。事实上，当达到IHOP阈值时，G1并不会立即发起并发标记周期，而是等待下一次年轻代收集，利用年轻代收集的STW时间段，完成初始标记，这种方式称为借道(Piggybacking)。在初始标记暂停中，分区的NTAMS都被设置到分区顶部Top，初始标记是并发执行，直到所有的分区处理完。</p>
<h4><a class="header-anchor" href="#_3-3-3-根分区扫描-root-region-scanning"><span></span></a><a href="#_3-3-3-%E6%A0%B9%E5%88%86%E5%8C%BA%E6%89%AB%E6%8F%8F-root-region-scanning">#</a> 3.3.3 根分区扫描 Root Region Scanning</h4>
<p>在初始标记暂停结束后，年轻代收集也完成的对象复制到Survivor的工作，应用线程开始活跃起来。此时为了保证标记算法的正确性，所有新复制到Survivor分区的对象，都需要被扫描并标记成根，这个过程称为根分区扫描(Root Region Scanning)，同时扫描的Suvivor分区也被称为根分区(Root Region)。根分区扫描必须在下一次年轻代垃圾收集启动前完成(并发标记的过程中，可能会被若干次年轻代垃圾收集打断)，因为每次GC会产生新的存活对象集合。</p>
<h4><a class="header-anchor" href="#_3-3-4-并发标记-concurrent-marking"><span></span></a><a href="#_3-3-4-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0-concurrent-marking">#</a> 3.3.4 并发标记 Concurrent Marking</h4>
<p>和应用线程并发执行，并发标记线程在并发标记阶段启动，由参数<code>-XX:ConcGCThreads</code>(默认GC线程数的1/4，即<code>-XX:ParallelGCThreads/4</code>)控制启动数量，每个线程每次只扫描一个分区，从而标记出存活对象图。在这一阶段会处理Previous/Next标记位图，扫描标记对象的引用字段。同时，并发标记线程还会定期检查和处理STAB全局缓冲区列表的记录，更新对象引用信息。参数<code>-XX:+ClassUnloadingWithConcurrentMark</code>会开启一个优化，如果一个类不可达(不是对象不可达)，则在重新标记阶段，这个类就会被直接卸载。所有的标记任务必须在堆满前就完成扫描，如果并发标记耗时很长，那么有可能在并发标记过程中，又经历了几次年轻代收集。如果堆满前没有完成标记任务，则会触发担保机制，经历一次长时间的串行Full GC。</p>
<h4><a class="header-anchor" href="#_3-3-5-存活数据计算-live-data-accounting"><span></span></a><a href="#_3-3-5-%E5%AD%98%E6%B4%BB%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97-live-data-accounting">#</a> 3.3.5 存活数据计算 Live Data Accounting</h4>
<p>存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。</p>
<h4><a class="header-anchor" href="#_3-3-6-重新标记-remark"><span></span></a><a href="#_3-3-6-%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0-remark">#</a> 3.3.6 重新标记 Remark</h4>
<p>重新标记(Remark)是最后一个标记阶段。在该阶段中，G1需要一个暂停的时间，去处理剩下的SATB日志缓冲区和所有更新，找出所有未被访问的存活对象，同时安全完成存活数据计算。这个阶段也是并行执行的，通过参数-XX:ParallelGCThread可设置GC暂停时可用的GC线程数。同时，引用处理也是重新标记阶段的一部分，所有重度使用引用对象(弱引用、软引用、虚引用、最终引用)的应用都会在引用处理上产生开销。</p>
<h4><a class="header-anchor" href="#_3-3-7-清除-cleanup"><span></span></a><a href="#_3-3-7-%E6%B8%85%E9%99%A4-cleanup">#</a> 3.3.7 清除 Cleanup</h4>
<p>紧挨着重新标记阶段的清除(Clean)阶段也是STW的。Previous/Next标记位图、以及PTAMS/NTAMS，都会在清除阶段交换角色。清除阶段主要执行以下操作：</p>
<ul>
<li><strong>RSet梳理</strong>，启发式算法会根据活跃度和RSet尺寸对分区定义不同等级，同时RSet数理也有助于发现无用的引用。参数<code>-XX:+PrintAdaptiveSizePolicy</code>可以开启打印启发式算法决策细节；</li>
<li><strong>整理堆分区</strong>，为混合收集周期识别回收收益高(基于释放空间和暂停目标)的老年代分区集合；</li>
<li><strong>识别所有空闲分区</strong>，即发现无存活对象的分区。该分区可在清除阶段直接回收，无需等待下次收集周期。</li>
</ul>
<h3><a class="header-anchor" href="#_3-4-年轻代收集-混合收集周期"><span></span></a><a href="#_3-4-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E5%91%A8%E6%9C%9F">#</a> 3.4 年轻代收集/混合收集周期</h3>
<p>年轻代收集和混合收集周期，是G1回收空间的主要活动。当应用运行开始时，堆内存可用空间还比较大，只会在年轻代满时，触发年轻代收集；随着老年代内存增长，当到达IHOP阈值<code>-XX:InitiatingHeapOccupancyPercent</code>(老年代占整堆比，默认45%)时，G1开始着手准备收集老年代空间。首先经历并发标记周期，识别出高收益的老年代分区，前文已述。但随后G1并不会马上开始一次混合收集，而是让应用线程先运行一段时间，等待触发一次年轻代收集。在这次STW中，G1将保准整理混合收集周期。接着再次让应用线程运行，当接下来的几次年轻代收集时，将会有老年代分区加入到CSet中，即触发混合收集，这些连续多次的混合收集称为混合收集周期(Mixed Collection Cycle)。</p>
<h4><a class="header-anchor" href="#_3-4-1-gc工作线程数"><span></span></a><a href="#_3-4-1-gc%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E6%95%B0">#</a> 3.4.1 GC工作线程数</h4>
<p>GC工作线程数 <code>-XX:ParallelGCThreads</code></p>
<p>JVM可以通过参数<code>-XX:ParallelGCThreads</code>进行指定GC工作的线程数量。参数<code>-XX:ParallelGCThreads</code>默认值并不是固定的，而是根据当前的CPU资源进行计算。如果用户没有指定，且CPU小于等于8，则默认与CPU核数相等；若CPU大于8，则默认JVM会经过计算得到一个小于CPU核数的线程数；当然也可以人工指定与CPU核数相等。</p>
<h4><a class="header-anchor" href="#_3-4-2-年轻代收集-young-collection"><span></span></a><a href="#_3-4-2-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-young-collection">#</a> 3.4.2 年轻代收集 Young Collection</h4>
<p>每次收集过程中，既有并行执行的活动，也有串行执行的活动，但都可以是多线程的。在并行执行的任务中，如果某个任务过重，会导致其他线程在等待某项任务的处理，需要对这些地方进行优化。</p>
<p><strong>并行活动</strong></p>
<ul>
<li><code>外部根分区扫描 Ext Root Scanning</code>：此活动对堆外的根(JVM系统目录、VM数据结构、JNI线程句柄、硬件寄存器、全局变量、线程对栈根)进行扫描，发现那些没有加入到暂停收集集合CSet中的对象。如果系统目录(单根)拥有大量加载的类，最终可能其他并行活动结束后，该活动依然没有结束而带来的等待时间。</li>
<li><code>更新已记忆集合 Update RS</code>：并发优化线程会对脏卡片的分区进行扫描更新日志缓冲区来更新RSet，但只会处理全局缓冲列表。作为补充，所有被记录但是还没有被优化线程处理的剩余缓冲区，会在该阶段处理，变成已处理缓冲区(Processed Buffers)。为了限制花在更新RSet的时间，可以设置暂停占用百分比-XX:G1RSetUpdatingPauseTimePercent(默认10%，即-XX:MaxGCPauseMills/10)。值得注意的是，如果更新日志缓冲区更新的任务不降低，单纯地减少RSet的更新时间，会导致暂停中被处理的缓冲区减少，将日志缓冲区更新工作推到并发优化线程上，从而增加对Java应用线程资源的争夺。</li>
<li><code>RSet扫描 Scan RS</code>：在收集当前CSet之前，考虑到分区外的引用，必须扫描CSet分区的RSet。如果RSet发生粗化，则会增加RSet的扫描时间。开启诊断模式-XX:UnlockDiagnosticVMOptions后，通过参数-XX:+G1SummarizeRSetStats可以确定并发优化线程是否能够及时处理更新日志缓冲区，并提供更多的信息，来帮助为RSet粗化总数提供窗口。参数-XX：G1SummarizeRSetStatsPeriod=n可设置RSet的统计周期，即经历多少此GC后进行一次统计</li>
<li><code>代码根扫描 Code Root Scanning</code>：对代码根集合进行扫描，扫描JVM编译后代码Native Method的引用信息(nmethod扫描)，进行RSet扫描。事实上，只有CSet分区中的RSet有强代码根时，才会做nmethod扫描，查找对CSet的引用。</li>
<li><code>转移和回收 Object Copy</code>：通过选定的CSet以及CSet分区完整的引用集，将执行暂停时间的主要部分：CSet分区存活对象的转移、CSet分区空间的回收。通过工作窃取机制来负载均衡地选定复制对象的线程，并且复制和扫描对象被转移的存活对象将拷贝到每个GC线程分配缓冲区GCLAB。G1会通过计算，预测分区复制所花费的时间，从而调整年轻代的尺寸。</li>
<li><code>终止 Termination</code>：完成上述任务后，如果任务队列已空，则工作线程会发起终止要求。如果还有其他线程继续工作，空闲的线程会通过工作窃取机制尝试帮助其他线程处理。而单独执行根分区扫描的线程，如果任务过重，最终会晚于终止。</li>
<li><code>GC外部的并行活动 GC Worker Other</code>：该部分并非GC的活动，而是JVM的活动导致占用了GC暂停时间(例如JNI编译)。</li>
</ul>
<p><strong>串行活动</strong></p>
<ul>
<li><code>代码根更新 Code Root Fixup</code>：根据转移对象更新代码根。</li>
<li><code>代码根清理 Code Root Purge</code>：清理代码根集合表。</li>
<li><code>清除全局卡片标记 Clear CT</code>：在任意收集周期会扫描CSet与RSet记录的PRT，扫描时会在全局卡片表中进行标记，防止重复扫描。在收集周期的最后将会清除全局卡片表中的已扫描标志。</li>
<li><code>选择下次收集集合 Choose CSet</code>：该部分主要用于并发标记周期后的年轻代收集、以及混合收集中，在这些收集过程中，由于有老年代候选分区的加入，往往需要对下次收集的范围做出界定；但单纯的年轻代收集中，所有收集的分区都会被收集，不存在选择。</li>
<li><code>引用处理 Ref Proc</code>：主要针对软引用、弱引用、虚引用、final引用、JNI引用。当Ref Proc占用时间过多时，可选择使用参数<code>-XX:ParallelRefProcEnabled</code>激活多线程引用处理。G1希望应用能小心使用软引用，因为软引用会一直占据内存空间直到空间耗尽时被Full GC回收掉；即使未发生Full GC，软引用对内存的占用，也会导致GC次数的增加。</li>
<li><code>引用排队 Ref Enq</code>：此项活动可能会导致RSet的更新，此时会通过记录日志，将关联的卡片标记为脏卡片。</li>
<li><code>卡片重新脏化 Redirty Cards</code>：重新脏化卡片。</li>
<li><code>回收空闲巨型分区 Humongous Reclaim</code>：G1做了一个优化：通过查看所有根对象以及年轻代分区的RSet，如果确定RSet中巨型对象没有任何引用，则说明G1发现了一个不可达的巨型对象，该对象分区会被回收。</li>
<li><code>释放分区 Free CSet</code>：回收CSet分区的所有空间，并加入到空闲分区中。</li>
<li><code>其他活动 Other</code>：GC中可能还会经历其他耗时很小的活动，如修复JNI句柄等。</li>
</ul>
<h3><a class="header-anchor" href="#_3-5-并发标记周期后的年轻代收集-young-collection-following-concurrent-marking-cycle"><span></span></a><a href="#_3-5-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E5%91%A8%E6%9C%9F%E5%90%8E%E7%9A%84%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-young-collection-following-concurrent-marking-cycle">#</a> 3.5 并发标记周期后的年轻代收集 Young Collection Following Concurrent Marking Cycle</h3>
<p>当G1发起并发标记周期之后，并不会马上开始混合收集。G1会先等待下一次年轻代收集，然后在该收集阶段中，确定下次混合收集的CSet(Choose CSet)。</p>
<h4><a class="header-anchor" href="#_3-5-1-混合收集周期-mixed-collection-cycle"><span></span></a><a href="#_3-5-1-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E5%91%A8%E6%9C%9F-mixed-collection-cycle">#</a> 3.5.1 混合收集周期 Mixed Collection Cycle</h4>
<p>单次的混合收集与年轻代收集并无二致。根据暂停目标，老年代的分区可能不能一次暂停收集中被处理完，G1会发起连续多次的混合收集，称为混合收集周期(Mixed Collection Cycle)。G1会计算每次加入到CSet中的分区数量、混合收集进行次数，并且在上次的年轻代收集、以及接下来的混合收集中，G1会确定下次加入CSet的分区集(Choose CSet)，并且确定是否结束混合收集周期。</p>
<h4><a class="header-anchor" href="#_3-5-2-转移失败的担保机制-full-gc"><span></span></a><a href="#_3-5-2-%E8%BD%AC%E7%A7%BB%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%8B%85%E4%BF%9D%E6%9C%BA%E5%88%B6-full-gc">#</a> 3.5.2 转移失败的担保机制 Full GC</h4>
<p>转移失败(Evacuation Failure)是指当G1无法在堆空间中申请新的分区时，G1便会触发担保机制，执行一次STW式的、单线程的Full GC。Full GC会对整堆做标记清除和压缩，最后将只包含纯粹的存活对象。参数-XX:G1ReservePercent(默认10%)可以保留空间，来应对晋升模式下的异常情况，最大占用整堆50%，更大也无意义。</p>
<p>G1在以下场景中会触发Full GC，同时会在日志中记录to-space-exhausted以及Evacuation Failure：</p>
<ul>
<li>从年轻代分区拷贝存活对象时，无法找到可用的空闲分区</li>
<li>从老年代分区转移存活对象时，无法找到可用的空闲分区</li>
<li>分配巨型对象时在老年代无法找到足够的连续分区</li>
</ul>
<p>由于G1的应用场合往往堆内存都比较大，所以Full GC的收集代价非常昂贵，应该避免Full GC的发生。</p>
<h2><a class="header-anchor" href="#_4-总结"><span></span></a><a href="#_4-%E6%80%BB%E7%BB%93">#</a> 4. 总结</h2>
<p>G1是一款非常优秀的垃圾收集器，不仅适合堆内存大的应用，同时也简化了调优的工作。通过主要的参数初始和最大堆空间、以及最大容忍的GC暂停目标，就能得到不错的性能；同时，我们也看到G1对内存空间的浪费较高，但通过<strong>首先收集尽可能多的垃圾</strong>(Garbage First)的设计原则，可以及时发现过期对象，从而让内存占用处于合理的水平。</p>
<p>虽然G1也有类似CMS的收集动作：初始标记、并发标记、重新标记、清除、转移回收，并且也以一个串行收集器做担保机制，但单纯地以类似前三种的过程描述显得并不是很妥当。</p>
<ul>
<li>G1的设计原则是"<strong>首先收集尽可能多的垃圾</strong>(Garbage First)"。因此，G1并不会等内存耗尽(串行、并行)或者快耗尽(CMS)的时候开始垃圾收集，而是在内部采用了启发式算法，在老年代找出具有高收集收益的分区进行收集。同时G1可以根据用户设置的暂停时间目标自动调整年轻代和总堆大小，暂停目标越短年轻代空间越小、总空间就越大；</li>
<li>G1采用内存分区(Region)的思路，将内存划分为一个个相等大小的内存分区，回收时则以分区为单位进行回收，存活的对象复制到另一个空闲分区中。由于都是以相等大小的分区为单位进行操作，因此G1天然就是一种压缩方案(局部压缩)；</li>
<li>G1虽然也是分代收集器，但整个内存分区不存在物理上的年轻代与老年代的区别，也不需要完全独立的survivor(to space)堆做复制准备。G1只有逻辑上的分代概念，或者说每个分区都可能随G1的运行在不同代之间前后切换；</li>
<li>G1的收集都是STW的，但年轻代和老年代的收集界限比较模糊，采用了混合(mixed)收集的方式。即每次收集既可能只收集年轻代分区(年轻代收集)，也可能在收集年轻代的同时，包含部分老年代分区(混合收集)，这样即使堆内存很大时，也可以限制收集范围，从而降低停顿。</li>
</ul>
<h2><a class="header-anchor" href="#参考资料"><span></span></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a> 参考资料</h2>
<ul>
<li>Charlie H, Monica B, Poonam P, Bengt R. Java Performance Companion</li>
<li>周志明. 深入理解JVM虚拟机</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-1.jpeg" type="image/jpeg"/>
    </item>
    <item>
      <title>GC 垃圾回收器之ZGC详解</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BZGC%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BZGC%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收器之ZGC详解</source>
      <description>GC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于大内存低延迟服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章新一代垃圾回收器ZGC的探索与实践在新窗口打开比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>GC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于<strong>大内存低延迟</strong>服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章<a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC相关的知识体系。</p>
</blockquote>
<ul>
<li>GC 垃圾回收器之ZGC详解
<ul>
<li><a href="#zgc%E6%A6%82%E8%BF%B0">ZGC概述</a></li>
<li>GC之痛
<ul>
<li>CMS与G1停顿时间瓶颈
<ul>
<li><a href="#%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">标记阶段停顿分析</a></li>
<li><a href="#%E6%B8%85%E7%90%86%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">清理阶段停顿分析</a></li>
<li><a href="#%E5%A4%8D%E5%88%B6%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">复制阶段停顿分析</a></li>
</ul>
</li>
</ul>
</li>
<li>ZGC原理
<ul>
<li><a href="#%E5%85%A8%E5%B9%B6%E5%8F%91%E7%9A%84zgc">全并发的ZGC</a></li>
<li>ZGC关键技术
<ul>
<li><a href="#%E7%9D%80%E8%89%B2%E6%8C%87%E9%92%88">着色指针</a></li>
<li><a href="#%E8%AF%BB%E5%B1%8F%E9%9A%9C">读屏障</a></li>
</ul>
</li>
<li><a href="#zgc%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E6%BC%94%E7%A4%BA">ZGC并发处理演示</a></li>
</ul>
</li>
<li>ZGC调优实践
<ul>
<li>调优基础知识
<ul>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E9%87%8D%E8%A6%81%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">理解ZGC重要配置参数</a></li>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E8%A7%A6%E5%8F%91%E6%97%B6%E6%9C%BA">理解ZGC触发时机</a></li>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E6%97%A5%E5%BF%97">理解ZGC日志</a></li>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E5%81%9C%E9%A1%BF%E5%8E%9F%E5%9B%A0">理解ZGC停顿原因</a></li>
</ul>
</li>
<li>调优案例
<ul>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%80%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E4%B8%AD%E6%B5%81%E9%87%8F%E7%AA%81%E5%A2%9E%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">案例一：秒杀活动中流量突增，出现性能毛刺</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%BA%8C%E5%8E%8B%E6%B5%8B%E6%97%B6%E6%B5%81%E9%87%8F%E9%80%90%E6%B8%90%E5%A2%9E%E5%A4%A7%E5%88%B0%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E5%90%8E%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">案例二：压测时，流量逐渐增大到一定程度后，出现性能毛刺</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%89-%E5%8D%95%E6%AC%A1gc%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B430ms%E4%B8%8E%E9%A2%84%E6%9C%9F%E5%81%9C%E9%A1%BF10ms%E5%B7%A6%E5%8F%B3%E6%9C%89%E8%BE%83%E5%A4%A7%E5%B7%AE%E8%B7%9D">案例三： 单次GC停顿时间30ms，与预期停顿10ms左右有较大差距</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E5%9B%9B%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF%E5%8D%95%E6%AC%A1gc%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF%E9%87%8D%E5%90%AF%E5%90%8E%E6%81%A2%E5%A4%8D">案例四：服务启动后，运行时间越长，单次GC时间越长，重启后恢复</a></li>
</ul>
</li>
</ul>
</li>
<li>升级ZGC效果
<ul>
<li><a href="#%E5%BB%B6%E8%BF%9F%E9%99%8D%E4%BD%8E">延迟降低</a></li>
<li><a href="#%E5%90%9E%E5%90%90%E4%B8%8B%E9%99%8D">吞吐下降</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#zgc概述"><span></span></a><a href="#zgc%E6%A6%82%E8%BF%B0">#</a> ZGC概述</h2>
<blockquote>
<p>ZGC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器，它的设计目标包括：</p>
</blockquote>
<ul>
<li>停顿时间不超过10ms；</li>
<li>停顿时间不会随着堆的大小，或者活跃对象的大小而增加（对程序吞吐量影响小于15%）；</li>
<li>支持8MB~4TB级别的堆（未来支持16TB）。</li>
</ul>
<p>从设计目标来看，我们知道ZGC适用于<strong>大内存低延迟</strong>服务的内存管理和回收。本文主要介绍ZGC在低延时场景中的应用和卓越表现，文章内容主要分为四部分：</p>
<ol>
<li><strong>GC之痛</strong>：介绍实际业务中遇到的GC痛点，并分析CMS收集器和G1收集器停顿时间瓶颈；</li>
<li><strong>ZGC原理</strong>：分析ZGC停顿时间比G1或CMS更短的本质原因，以及背后的技术原理；</li>
<li><strong>ZGC调优实践</strong>：重点分享对ZGC调优的理解，并分析若干个实际调优案例；</li>
<li><strong>升级ZGC效果</strong>：展示在生产环境应用ZGC取得的效果。</li>
</ol>
<h2><a class="header-anchor" href="#gc之痛"><span></span></a><a href="#gc%E4%B9%8B%E7%97%9B">#</a> GC之痛</h2>
<blockquote>
<p>很多低延迟高可用Java服务的系统可用性经常受GC停顿的困扰。GC停顿指垃圾回收期间STW（Stop The World），当STW时，所有应用线程停止活动，等待GC停顿结束。</p>
</blockquote>
<p>以美团风控服务为例，部分上游业务要求风控服务65ms内返回结果，并且可用性要达到99.99%。但因为GC停顿，我们未能达到上述可用性目标。当时使用的是CMS垃圾回收器，单次Young GC 40ms，一分钟10次，接口平均响应时间30ms。通过计算可知，有（40ms + 30ms) * 10次 / 60000ms = 1.12%的请求的响应时间会增加0 ~ 40ms不等，其中30ms * 10次 / 60000ms = 0.5%的请求响应时间会增加40ms。可见，GC停顿对响应时间的影响较大。为了降低GC停顿对系统可用性的影响，我们从降低单次GC时间和降低GC频率两个角度出发进行了调优，还测试过G1垃圾回收器，但这三项措施均未能降低GC对服务可用性的影响。</p>
<h3><a class="header-anchor" href="#cms与g1停顿时间瓶颈"><span></span></a><a href="#cms%E4%B8%8Eg1%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B4%E7%93%B6%E9%A2%88">#</a> CMS与G1停顿时间瓶颈</h3>
<blockquote>
<p>在介绍ZGC之前，首先回顾一下CMS和G1的GC过程以及停顿时间的瓶颈。CMS新生代的Young GC、G1和ZGC都基于标记-复制算法，但算法具体实现的不同就导致了巨大的性能差异。</p>
</blockquote>
<p>标记-复制算法应用在CMS新生代（ParNew是CMS默认的新生代垃圾回收器）和G1垃圾回收器中。标记-复制算法可以分为三个阶段：</p>
<ul>
<li><strong>标记阶段</strong>，即从GC Roots集合开始，标记活跃对象；</li>
<li><strong>转移阶段</strong>，即把活跃对象复制到新的内存地址上；</li>
<li><strong>重定位阶段</strong>，因为转移导致对象的地址发生了变化，在重定位阶段，所有指向对象旧地址的指针都要调整到对象新的地址上。</li>
</ul>
<p>下面以G1为例，通过G1中标记-复制算法过程（G1的Young GC和Mixed GC均采用该算法），分析G1停顿耗时的主要瓶颈。G1垃圾回收周期如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>G1的混合回收过程可以分为标记阶段、清理阶段和复制阶段。</p>
<h4><a class="header-anchor" href="#标记阶段停顿分析"><span></span></a><a href="#%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">#</a> 标记阶段停顿分析</h4>
<ul>
<li><strong>初始标记阶段</strong>：初始标记阶段是指从GC Roots出发标记全部直接子节点的过程，该阶段是STW的。由于GC Roots数量不多，通常该阶段耗时非常短。</li>
<li><strong>并发标记阶段</strong>：并发标记阶段是指从GC Roots开始对堆中对象进行可达性分析，找出存活对象。该阶段是并发的，即应用线程和GC线程可以同时活动。并发标记耗时相对长很多，但因为不是STW，所以我们不太关心该阶段耗时的长短。</li>
<li><strong>再标记阶段</strong>：重新标记那些在并发标记阶段发生变化的对象。该阶段是STW的。</li>
</ul>
<h4><a class="header-anchor" href="#清理阶段停顿分析"><span></span></a><a href="#%E6%B8%85%E7%90%86%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">#</a> 清理阶段停顿分析</h4>
<ul>
<li><strong>清理阶段</strong>清点出有存活对象的分区和没有存活对象的分区，该阶段不会清理垃圾对象，也不会执行存活对象的复制。该阶段是STW的。</li>
</ul>
<h4><a class="header-anchor" href="#复制阶段停顿分析"><span></span></a><a href="#%E5%A4%8D%E5%88%B6%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">#</a> 复制阶段停顿分析</h4>
<ul>
<li><strong>复制算法</strong>中的转移阶段需要分配新内存和复制对象的成员变量。转移阶段是STW的，其中内存分配通常耗时非常短，但对象成员变量的复制耗时有可能较长，这是因为复制耗时与存活对象数量与对象复杂度成正比。对象越复杂，复制耗时越长。</li>
</ul>
<p>四个STW过程中，初始标记因为只标记GC Roots，耗时较短。再标记因为对象数少，耗时也较短。清理阶段因为内存分区数量少，耗时也较短。转移阶段要处理所有存活的对象，耗时会较长。因此，<strong>G1停顿时间的瓶颈主要是标记-复制中的转移阶段STW</strong>。为什么转移阶段不能和标记阶段一样并发执行呢？主要是G1未能解决转移过程中准确定位对象地址的问题。</p>
<p>G1的Young GC和CMS的Young GC，其标记-复制全过程STW，这里不再详细阐述。</p>
<h2><a class="header-anchor" href="#zgc原理"><span></span></a><a href="#zgc%E5%8E%9F%E7%90%86">#</a> ZGC原理</h2>
<h3><a class="header-anchor" href="#全并发的zgc"><span></span></a><a href="#%E5%85%A8%E5%B9%B6%E5%8F%91%E7%9A%84zgc">#</a> 全并发的ZGC</h3>
<blockquote>
<p>与CMS中的ParNew和G1类似，<strong>ZGC也采用标记-复制算法</strong>，不过ZGC对该算法做了重大改进：<strong>ZGC在标记、转移和重定位阶段几乎都是并发</strong>的，这是ZGC实现停顿时间小于10ms目标的最关键原因。</p>
</blockquote>
<p>ZGC垃圾回收周期如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>ZGC只有三个STW阶段：初始标记，再标记，初始转移。其中，初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短；再标记阶段STW时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC几乎所有暂停都只依赖于GC Roots集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全STW的，且停顿时间随存活对象的大小增加而增加。</p>
<h3><a class="header-anchor" href="#zgc关键技术"><span></span></a><a href="#zgc%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF">#</a> ZGC关键技术</h3>
<p>ZGC通过着色指针和读屏障技术，解决了转移过程中准确访问对象的问题，实现了并发转移。大致原理描述如下：并发转移中“并发”意味着GC线程在转移对象的过程中，应用线程也在不停地访问对象。假设对象发生转移，但对象地址未及时更新，那么应用线程可能访问到旧地址，从而造成错误。而在ZGC中，应用线程访问对象将触发“读屏障”，如果发现对象被移动了，那么“读屏障”会把读出来的指针更新到对象的新地址上，这样应用线程始终访问的都是对象的新地址。那么，JVM是如何判断对象被移动过呢？就是利用对象引用的地址，即着色指针。下面介绍着色指针和读屏障技术细节。</p>
<h4><a class="header-anchor" href="#着色指针"><span></span></a><a href="#%E7%9D%80%E8%89%B2%E6%8C%87%E9%92%88">#</a> 着色指针</h4>
<blockquote>
<p>着色指针是一种将信息存储在指针中的技术。</p>
</blockquote>
<p>ZGC仅支持64位系统，它把64位虚拟地址空间划分为多个子空间，如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>其中，[0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。</p>
<p>当应用程序创建对象时，首先在堆空间申请一个虚拟地址，但该虚拟地址并不会映射到真正的物理地址。ZGC同时会为该对象在M0、M1和Remapped地址空间分别申请一个虚拟地址，且这三个虚拟地址对应同一个物理地址，但这三个空间在同一时间有且只有一个空间有效。ZGC之所以设置三个虚拟地址空间，是因为它使用“空间换时间”思想，去降低GC停顿时间。“空间换时间”中的空间是虚拟空间，而不是真正的物理空间。后续章节将详细介绍这三个空间的切换过程。</p>
<p>与上述地址空间划分相对应，ZGC实际仅使用64位地址空间的第041位，而第4245位存储元数据，第47~63位固定为0。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>ZGC将对象存活信息存储在42~45位中，这与传统的垃圾回收并将对象存活信息放在对象头中完全不同。</p>
<h4><a class="header-anchor" href="#读屏障"><span></span></a><a href="#%E8%AF%BB%E5%B1%8F%E9%9A%9C">#</a> 读屏障</h4>
<blockquote>
<p>读屏障是JVM向应用代码插入一小段代码的技术。当应用线程从堆中读取对象引用时，就会执行这段代码。需要注意的是，仅“从堆中读取对象引用”才会触发这段代码。</p>
</blockquote>
<p>读屏障示例：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> obj</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FieldA</span><span style="color:#7F848E;font-style:italic">   // 从堆中读取引用，需要加入屏障</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">Load</span><span style="color:#E06C75"> barrier</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> o  </span><span style="color:#7F848E;font-style:italic">// 无需加入屏障，因为不是从堆中读取引用</span></span>
<span class="line"><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">dosomething</span><span style="color:#ABB2BF">()</span><span style="color:#7F848E;font-style:italic"> // 无需加入屏障，因为不是从堆中读取引用</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">  obj</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FieldB</span><span style="color:#7F848E;font-style:italic">  //无需加入屏障，因为不是对象引用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ZGC中读屏障的代码作用：在对象标记和转移过程中，用于确定对象的引用地址是否满足条件，并作出相应动作。</p>
<h3><a class="header-anchor" href="#zgc并发处理演示"><span></span></a><a href="#zgc%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E6%BC%94%E7%A4%BA">#</a> ZGC并发处理演示</h3>
<p>接下来详细介绍ZGC一次垃圾回收周期中地址视图的切换过程：</p>
<ul>
<li><strong>初始化</strong>：ZGC初始化之后，整个内存空间的地址视图被设置为Remapped。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。</li>
<li><strong>并发标记阶段</strong>：第一次进入标记阶段时视图为M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从Remapped调整为M0。所以，在标记阶段结束之后，对象的地址要么是M0视图，要么是Remapped。如果对象的地址是M0视图，那么说明对象是活跃的；如果对象的地址是Remapped视图，说明对象是不活跃的。</li>
<li><strong>并发转移阶段</strong>：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被GC转移线程或者应用线程访问过，那么就将对象的地址视图从M0调整为Remapped。</li>
</ul>
<p>其实，在标记阶段存在两个地址视图M0和M1，上面的过程显示只用了一个地址视图。<strong>之所以设计成两个，是为了区别前一次标记和当前标记</strong>。也即，第二次进入并发标记阶段后，地址视图调整为M1，而非M0。</p>
<p>着色指针和读屏障技术不仅应用在并发转移阶段，还应用在并发标记阶段：将对象设置为已标记，传统的垃圾回收器需要进行一次内存访问，并将对象存活信息放在对象头中；而在ZGC中，只需要设置指针地址的第42~45位即可，并且因为是寄存器访问，所以速度比访问内存更快。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#zgc调优实践"><span></span></a><a href="#zgc%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5">#</a> ZGC调优实践</h2>
<blockquote>
<p>ZGC不是“银弹”，需要根据服务的具体特点进行调优。网络上能搜索到实战经验较少，调优理论需自行摸索，我们在此阶段也耗费了不少时间，最终才达到理想的性能。本文的一个目的是列举一些使用ZGC时常见的问题，帮助大家使用ZGC提高服务可用性。</p>
</blockquote>
<h3><a class="header-anchor" href="#调优基础知识"><span></span></a><a href="#%E8%B0%83%E4%BC%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">#</a> 调优基础知识</h3>
<h4><a class="header-anchor" href="#理解zgc重要配置参数"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E9%87%8D%E8%A6%81%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">#</a> 理解ZGC重要配置参数</h4>
<blockquote>
<p>以我们服务在生产环境中ZGC参数配置为例，说明各个参数的作用：</p>
</blockquote>
<p>重要参数配置样例：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">Xms10G </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">Xmx10G</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ReservedCodeCacheSize</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">256m </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">InitialCodeCacheSize</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">256m </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">UnlockExperimentalVMOptions </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">UseZGC</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ConcGCThreads</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">2</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ParallelGCThreads</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ZCollectionInterval</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">120</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ZAllocationSpikeTolerance</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">UnlockDiagnosticVMOptions </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">ZProactive</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">Xlog</span><span style="color:#C678DD">:</span><span style="color:#E06C75">safepoint</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">classhisto</span><span style="color:#56B6C2">*=</span><span style="color:#E06C75">trace</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">age</span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">gc</span><span style="color:#56B6C2">*=</span><span style="color:#E06C75">info</span><span style="color:#C678DD">:</span><span style="color:#E06C75">file</span><span style="color:#56B6C2">=/</span><span style="color:#E06C75">opt</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">logs</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">logs</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">gc</span><span style="color:#56B6C2">-%</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">log</span><span style="color:#C678DD">:</span><span style="color:#E06C75">time</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">tid</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">tags</span><span style="color:#C678DD">:</span><span style="color:#E06C75">filecount</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">filesize</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">50m </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>-Xms -Xmx</code>：堆的最大内存和最小内存，这里都设置为10G，程序的堆内存将保持10G不变。</li>
<li><code>-XX:ReservedCodeCacheSize -XX:InitialCodeCacheSize</code>：设置CodeCache的大小， JIT编译的代码都放在CodeCache中，一般服务64m或128m就已经足够。我们的服务因为有一定特殊性，所以设置的较大，后面会详细介绍。</li>
<li><code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code>：启用ZGC的配置。</li>
<li><code>-XX:ConcGCThreads</code>：并发回收垃圾的线程。默认是总核数的12.5%，8核CPU默认是1。调大后GC变快，但会占用程序运行时的CPU资源，吞吐会受到影响。</li>
<li><code>-XX:ParallelGCThreads</code>：STW阶段使用线程数，默认是总核数的60%。</li>
<li><code>-XX:ZCollectionInterval</code>：ZGC发生的最小时间间隔，单位秒。</li>
<li><code>-XX:ZAllocationSpikeTolerance</code>：ZGC触发自适应算法的修正系数，默认2，数值越大，越早的触发ZGC。</li>
<li><code>-XX:+UnlockDiagnosticVMOptions -XX:-ZProactive</code>：是否启用主动回收，默认开启，这里的配置表示关闭。</li>
<li><code>-Xlog</code>：设置GC日志中的内容、格式、位置以及每个日志的大小。</li>
</ul>
<h4><a class="header-anchor" href="#理解zgc触发时机"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E8%A7%A6%E5%8F%91%E6%97%B6%E6%9C%BA">#</a> 理解ZGC触发时机</h4>
<blockquote>
<p>相比于CMS和G1的GC触发机制，ZGC的GC触发机制有很大不同。ZGC的核心特点是并发，GC过程中一直有新的对象产生。如何保证在GC完成之前，新产生的对象不会将堆占满，是ZGC参数调优的第一大目标。因为在ZGC中，当垃圾来不及回收将堆占满时，会导致正在运行的线程停顿，持续时间可能长达秒级之久。</p>
</blockquote>
<p>ZGC有多种GC触发机制，总结如下：</p>
<ul>
<li><strong>阻塞内存分配请求触发</strong>：当垃圾来不及回收，垃圾将堆占满时，会导致部分线程阻塞。我们应当避免出现这种触发方式。日志中关键字是“Allocation Stall”。</li>
<li><strong>基于分配速率的自适应算法</strong>：最主要的GC触发方式，其算法原理可简单描述为”ZGC根据近期的对象分配速率以及GC时间，计算出当内存占用达到什么阈值时触发下一次GC”。自适应算法的详细理论可参考彭成寒《新一代垃圾回收器ZGC设计与实现》一书中的内容。通过ZAllocationSpikeTolerance参数控制阈值大小，该参数默认2，数值越大，越早的触发GC。我们通过调整此参数解决了一些问题。日志中关键字是“Allocation Rate”。</li>
<li><strong>基于固定时间间隔</strong>：通过ZCollectionInterval控制，适合应对突增流量场景。流量平稳变化时，自适应算法可能在堆使用率达到95%以上才触发GC。流量突增时，自适应算法触发的时机可能会过晚，导致部分线程阻塞。我们通过调整此参数解决流量突增场景的问题，比如定时活动、秒杀等场景。日志中关键字是“Timer”。</li>
<li><strong>主动触发规则</strong>：类似于固定间隔规则，但时间间隔不固定，是ZGC自行算出来的时机，我们的服务因为已经加了基于固定时间间隔的触发机制，所以通过-ZProactive参数将该功能关闭，以免GC频繁，影响服务可用性。 日志中关键字是“Proactive”。</li>
<li><strong>预热规则</strong>：服务刚启动时出现，一般不需要关注。日志中关键字是“Warmup”。</li>
<li><strong>外部触发</strong>：代码中显式调用System.gc()触发。 日志中关键字是“System.gc()”。</li>
<li><strong>元数据分配触发</strong>：元数据区不足时导致，一般不需要关注。 日志中关键字是“Metadata GC Threshold”。</li>
</ul>
<h4><a class="header-anchor" href="#理解zgc日志"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E6%97%A5%E5%BF%97">#</a> 理解ZGC日志</h4>
<p>一次完整的GC过程，需要注意的点已在图中标出。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>注意：该日志过滤了进入安全点的信息。正常情况，在一次GC过程中还穿插着进入安全点的操作。</p>
<p>GC日志中每一行都注明了GC过程中的信息，关键信息如下：</p>
<ul>
<li><strong>Start</strong>：开始GC，并标明的GC触发的原因。上图中触发原因是自适应算法。</li>
<li><strong>Phase-Pause Mark Start</strong>：初始标记，会STW。</li>
<li><strong>Phase-Pause Mark End</strong>：再次标记，会STW。</li>
<li><strong>Phase-Pause Relocate Start</strong>：初始转移，会STW。</li>
<li><strong>Heap信息</strong>：记录了GC过程中Mark、Relocate前后的堆大小变化状况。High和Low记录了其中的最大值和最小值，我们一般关注High中Used的值，如果达到100%，在GC过程中一定存在内存分配不足的情况，需要调整GC的触发时机，更早或者更快地进行GC。</li>
<li><strong>GC信息统计</strong>：可以定时的打印垃圾收集信息，观察10秒内、10分钟内、10个小时内，从启动到现在的所有统计信息。利用这些统计信息，可以排查定位一些异常点。</li>
</ul>
<p>日志中内容较多，关键点已用红线标出，含义较好理解，更详细的解释大家可以自行在网上查阅资料。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#理解zgc停顿原因"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E5%81%9C%E9%A1%BF%E5%8E%9F%E5%9B%A0">#</a> 理解ZGC停顿原因</h4>
<p>我们在实战过程中共发现了6种使程序停顿的场景，分别如下：</p>
<ul>
<li><strong>GC时，初始标记</strong>：日志中Pause Mark Start。</li>
<li><strong>GC时，再标记</strong>：日志中Pause Mark End。</li>
<li><strong>GC时，初始转移</strong>：日志中Pause Relocate Start。</li>
<li><strong>内存分配阻塞</strong>：当内存不足时线程会阻塞等待GC完成，关键字是”Allocation Stall”。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>安全点</strong>：所有线程进入到安全点后才能进行GC，ZGC定期进入安全点判断是否需要GC。先进入安全点的线程需要等待后进入安全点的线程直到所有线程挂起。</li>
<li><strong>dump线程、内存</strong>：比如jstack、jmap命令。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#调优案例"><span></span></a><a href="#%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B">#</a> 调优案例</h3>
<p>我们维护的服务名叫Zeus，它是美团的规则平台，常用于风控场景中的规则管理。规则运行是基于开源的表达式执行引擎Aviator。Aviator内部将每一条表达式转化成Java的一个类，通过调用该类的接口实现表达式逻辑。</p>
<p>Zeus服务内的规则数量超过万条，且每台机器每天的请求量几百万。这些客观条件导致Aviator生成的类和方法会产生很多的ClassLoader和CodeCache，这些在使用ZGC时都成为过GC的性能瓶颈。接下来介绍两类调优案例。</p>
<blockquote>
<p><strong>第一类：内存分配阻塞，系统停顿可达到秒级</strong></p>
</blockquote>
<h4><a class="header-anchor" href="#案例一-秒杀活动中流量突增-出现性能毛刺"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E4%B8%80-%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E4%B8%AD%E6%B5%81%E9%87%8F%E7%AA%81%E5%A2%9E-%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">#</a> 案例一：秒杀活动中流量突增，出现性能毛刺</h4>
<p>日志信息：对比出现性能毛刺时间点的GC日志和业务日志，发现JVM停顿了较长时间，且停顿时GC日志中有大量的“Allocation Stall”日志。</p>
<p>分析：这种案例多出现在“自适应算法”为主要GC触发机制的场景中。ZGC是一款并发的垃圾回收器，GC线程和应用线程同时活动，在GC过程中，还会产生新的对象。GC完成之前，新产生的对象将堆占满，那么应用线程可能因为申请内存失败而导致线程阻塞。当秒杀活动开始，大量请求打入系统，但自适应算法计算的GC触发间隔较长，导致GC触发不及时，引起了内存分配阻塞，导致停顿。</p>
<p>解决方法：</p>
<p>（1）开启”基于固定时间间隔“的GC触发机制：-XX:ZCollectionInterval。比如调整为5秒，甚至更短。 （2）增大修正系数-XX:ZAllocationSpikeTolerance，更早触发GC。ZGC采用正态分布模型预测内存分配速率，模型修正系数ZAllocationSpikeTolerance默认值为2，值越大，越早的触发GC，Zeus中所有集群设置的是5。</p>
<h4><a class="header-anchor" href="#案例二-压测时-流量逐渐增大到一定程度后-出现性能毛刺"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E4%BA%8C-%E5%8E%8B%E6%B5%8B%E6%97%B6-%E6%B5%81%E9%87%8F%E9%80%90%E6%B8%90%E5%A2%9E%E5%A4%A7%E5%88%B0%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E5%90%8E-%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">#</a> 案例二：压测时，流量逐渐增大到一定程度后，出现性能毛刺</h4>
<p>日志信息：平均1秒GC一次，两次GC之间几乎没有间隔。</p>
<p>分析：GC触发及时，但内存标记和回收速度过慢，引起内存分配阻塞，导致停顿。</p>
<p>解决方法：增大-XX:ConcGCThreads， 加快并发标记和回收速度。ConcGCThreads默认值是核数的1/8，8核机器，默认值是1。该参数影响系统吞吐，如果GC间隔时间大于GC周期，不建议调整该参数。</p>
<blockquote>
<p><strong>第二类：GC Roots 数量大，单次GC停顿时间长</strong></p>
</blockquote>
<h4><a class="header-anchor" href="#案例三-单次gc停顿时间30ms-与预期停顿10ms左右有较大差距"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E4%B8%89-%E5%8D%95%E6%AC%A1gc%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B430ms-%E4%B8%8E%E9%A2%84%E6%9C%9F%E5%81%9C%E9%A1%BF10ms%E5%B7%A6%E5%8F%B3%E6%9C%89%E8%BE%83%E5%A4%A7%E5%B7%AE%E8%B7%9D">#</a> 案例三： 单次GC停顿时间30ms，与预期停顿10ms左右有较大差距</h4>
<p>日志信息：观察ZGC日志信息统计，“Pause Roots ClassLoaderDataGraph”一项耗时较长。</p>
<p>分析：dump内存文件，发现系统中有上万个ClassLoader实例。我们知道ClassLoader属于GC Roots一部分，且ZGC停顿时间与GC Roots成正比，GC Roots数量越大，停顿时间越久。再进一步分析，ClassLoader的类名表明，这些ClassLoader均由Aviator组件生成。分析Aviator源码，发现Aviator对每一个表达式新生成类时，会创建一个ClassLoader，这导致了ClassLoader数量巨大的问题。在更高Aviator版本中，该问题已经被修复，即仅创建一个ClassLoader为所有表达式生成类。</p>
<p>解决方法：升级Aviator组件版本，避免生成多余的ClassLoader。</p>
<h4><a class="header-anchor" href="#案例四-服务启动后-运行时间越长-单次gc时间越长-重启后恢复"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E5%9B%9B-%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E-%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF-%E5%8D%95%E6%AC%A1gc%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF-%E9%87%8D%E5%90%AF%E5%90%8E%E6%81%A2%E5%A4%8D">#</a> 案例四：服务启动后，运行时间越长，单次GC时间越长，重启后恢复</h4>
<p>日志信息：观察ZGC日志信息统计，“Pause Roots CodeCache”的耗时会随着服务运行时间逐渐增长。</p>
<p>分析：CodeCache空间用于存放Java热点代码的JIT编译结果，而CodeCache也属于GC Roots一部分。通过添加-XX:+PrintCodeCacheOnCompilation参数，打印CodeCache中的被优化的方法，发现大量的Aviator表达式代码。定位到根本原因，每个表达式都是一个类中一个方法。随着运行时间越长，执行次数增加，这些方法会被JIT优化编译进入到Code Cache中，导致CodeCache越来越大。</p>
<p>解决方法：JIT有一些参数配置可以调整JIT编译的条件，但对于我们的问题都不太适用。我们最终通过业务优化解决，删除不需要执行的Aviator表达式，从而避免了大量Aviator方法进入CodeCache中。</p>
<p>值得一提的是，我们并不是在所有这些问题都解决后才全量部署所有集群。即使开始有各种各样的毛刺，但计算后发现，有各种问题的ZGC也比之前的CMS对服务可用性影响小。所以从开始准备使用ZGC到全量部署，大概用了2周的时间。在之后的3个月时间里，我们边做业务需求，边跟进这些问题，最终逐个解决了上述问题，从而使ZGC在各个集群上达到了一个更好表现。</p>
<h2><a class="header-anchor" href="#升级zgc效果"><span></span></a><a href="#%E5%8D%87%E7%BA%A7zgc%E6%95%88%E6%9E%9C">#</a> 升级ZGC效果</h2>
<h3><a class="header-anchor" href="#延迟降低"><span></span></a><a href="#%E5%BB%B6%E8%BF%9F%E9%99%8D%E4%BD%8E">#</a> 延迟降低</h3>
<p>TP(Top Percentile)是一项衡量系统延迟的指标：TP999表示99.9%请求都能被响应的最小耗时；TP99表示99%请求都能被响应的最小耗时。</p>
<p>在Zeus服务不同集群中，ZGC在低延迟（TP999 &lt; 200ms）场景中收益较大：</p>
<ul>
<li>TP999：下降12142ms，下降幅度18%74%。</li>
<li>TP99：下降528ms，下降幅度10%47%。</li>
</ul>
<p>超低延迟（TP999 &lt; 20ms）和高延迟（TP999 &gt; 200ms）服务收益不大，原因是这些服务的响应时间瓶颈不是GC，而是外部依赖的性能。</p>
<h3><a class="header-anchor" href="#吞吐下降"><span></span></a><a href="#%E5%90%9E%E5%90%90%E4%B8%8B%E9%99%8D">#</a> 吞吐下降</h3>
<p>对吞吐量优先的场景，ZGC可能并不适合。例如，Zeus某离线集群原先使用CMS，升级ZGC后，系统吞吐量明显降低。究其原因有二：</p>
<ul>
<li>第一，ZGC是单代垃圾回收器，而CMS是分代垃圾回收器。单代垃圾回收器每次处理的对象更多，更耗费CPU资源；</li>
<li>第二，ZGC使用读屏障，读屏障操作需耗费额外的计算资源。</li>
</ul>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>ZGC作为下一代垃圾回收器，性能非常优秀。ZGC垃圾回收过程几乎全部是并发，实际STW停顿时间极短，不到10ms。这得益于其采用的着色指针和读屏障技术。</p>
<p>Zeus在升级JDK 11+ZGC中，通过将风险和问题分类，然后各个击破，最终顺利实现了升级目标，GC停顿也几乎不再影响系统可用性。</p>
<p>最后推荐大家升级ZGC，Zeus系统因为业务特点，遇到了较多问题，而风控其他团队在升级时都非常顺利。</p>
<h2><a class="header-anchor" href="#参考文献"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">#</a> 参考文献</h2>
<ul>
<li><a href="https://wiki.openjdk.java.net/display/zgc/Main" target="_blank" rel="noopener noreferrer">ZGC官网</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-1.png" type="image/png"/>
    </item>
    <item>
      <title>GC 垃圾回收基础知识</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收基础知识</source>
      <description>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 GC 垃圾回收基础知识 判断一个对象是否可被回收 1. 引用计数算法 2. 可达性分析算法 3. 方法区的回收 4. finalize() 引用类型 1. 强引用 2. 软引用...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p>
</blockquote>
<ul>
<li>GC 垃圾回收基础知识
<ul>
<li>判断一个对象是否可被回收
<ul>
<li><a href="#1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95">1. 引用计数算法</a></li>
<li><a href="#2-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95">2. 可达性分析算法</a></li>
<li><a href="#3-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6">3. 方法区的回收</a></li>
<li><a href="#4-finalize">4. finalize()</a></li>
</ul>
</li>
<li>引用类型
<ul>
<li><a href="#1-%E5%BC%BA%E5%BC%95%E7%94%A8">1. 强引用</a></li>
<li><a href="#2-%E8%BD%AF%E5%BC%95%E7%94%A8">2. 软引用</a></li>
<li><a href="#3-%E5%BC%B1%E5%BC%95%E7%94%A8">3. 弱引用</a></li>
<li><a href="#4-%E8%99%9A%E5%BC%95%E7%94%A8">4. 虚引用</a></li>
</ul>
</li>
<li>垃圾回收算法
<ul>
<li>[1. 标记 - 清除](#1-标记</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/0635cbe8.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之 Java 内存模型引入</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之 Java 内存模型引入</source>
      <description>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面JMM详解, JVM 内存结构详解, Java 对象模型详解等铺垫。 JVM 基础之 Java 内存模型引入 JMM引入 从堆栈说起 堆栈里面放了什么? 线程栈如何访问堆上对象? 线程栈访问堆...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</p>
</blockquote>
<ul>
<li>JVM 基础之 Java 内存模型引入
<ul>
<li>JMM引入
<ul>
<li><a href="#%E4%BB%8E%E5%A0%86%E6%A0%88%E8%AF%B4%E8%B5%B7">从堆栈说起</a></li>
<li><a href="#%E5%A0%86%E6%A0%88%E9%87%8C%E9%9D%A2%E6%94%BE%E4%BA%86%E4%BB%80%E4%B9%88">堆栈里面放了什么? </a></li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A0%86%E4%B8%8A%E5%AF%B9%E8%B1%A1">线程栈如何访问堆上对象? </a></li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E8%AE%BF%E9%97%AE%E5%A0%86%E7%A4%BA%E4%BE%8B">线程栈访问堆示例</a></li>
</ul>
</li>
<li>JMM与硬件内存结构关系
<ul>
<li><a href="#%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B">硬件内存结构简介</a></li>
<li>[JMM与硬件内存连接 - 引入](#jmm与硬件内存连接</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之 Java 内存模型详解</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之 Java 内存模型详解</source>
      <description>本文主要转载自 Info 上深入理解Java内存模型在新窗口打开, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系。 JVM 基础之 Java 内存模型详解...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要转载自 Info 上<a href="https://www.infoq.cn/article/java_memory_model/" target="_blank" rel="noopener noreferrer">深入理解Java内存模型在新窗口打开</a>, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系。</p>
</blockquote>
<ul>
<li>JVM 基础之 Java 内存模型详解
<ul>
<li>基础
<ul>
<li><a href="#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%86%E7%B1%BB">并发编程模型的分类</a></li>
<li><a href="#java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8A%BD%E8%B1%A1">Java 内存模型的抽象</a></li>
<li><a href="#%E9%87%8D%E6%8E%92%E5%BA%8F">重排序</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E5%99%A8%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E6%8C%87%E4%BB%A4">处理器重排序与内存屏障指令</a></li>
<li><a href="#happens-before">happens-before</a></li>
</ul>
</li>
<li>重排序
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96%E6%80%A7">数据依赖性</a></li>
<li><a href="#as-if-serial-%E8%AF%AD%E4%B9%89">as-if-serial 语义</a></li>
<li><a href="#%E7%A8%8B%E5%BA%8F%E9%A1%BA%E5%BA%8F%E8%A7%84%E5%88%99">程序顺序规则</a></li>
<li><a href="#%E9%87%8D%E6%8E%92%E5%BA%8F%E5%AF%B9%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BD%B1%E5%93%8D">重排序对多线程的影响</a></li>
</ul>
</li>
<li>顺序一致性
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89%E4%B8%8E%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81">数据竞争与顺序一致性保证</a></li>
<li><a href="#%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">顺序一致性内存模型</a></li>
<li><a href="#%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E6%9E%9C">同步程序的顺序一致性效果</a></li>
<li><a href="#%E6%9C%AA%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%89%B9%E6%80%A7">未同步程序的执行特性</a></li>
</ul>
</li>
<li>总结
<ul>
<li><a href="#%E5%A4%84%E7%90%86%E5%99%A8%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">处理器内存模型</a></li>
<li><a href="#jmm%E5%A4%84%E7%90%86%E5%99%A8%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">JMM，处理器内存模型与顺序一致性内存模型之间的关系</a></li>
<li><a href="#jmm-%E7%9A%84%E8%AE%BE%E8%AE%A1">JMM 的设计</a></li>
<li><a href="#jmm-%E7%9A%84%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%9D%E8%AF%81">JMM 的内存可见性保证</a></li>
<li><a href="#jsr-133-%E5%AF%B9%E6%97%A7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BF%AE%E8%A1%A5">JSR-133 对旧内存模型的修补</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#基础"><span></span></a><a href="#%E5%9F%BA%E7%A1%80">#</a> 基础</h2>
<h3><a class="header-anchor" href="#并发编程模型的分类"><span></span></a><a href="#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%86%E7%B1%BB">#</a> 并发编程模型的分类</h3>
<p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p>
<p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写 - 读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p>
<p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p>
<p>Java 的并发采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的 Java 程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p>
<h3><a class="header-anchor" href="#java-内存模型的抽象"><span></span></a><a href="#java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8A%BD%E8%B1%A1">#</a> Java 内存模型的抽象</h3>
<p>在 java 中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java 语言规范称之为 formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>
<p>Java 线程之间的通信由 Java 内存模型（本文简称为 JMM）控制，JMM 决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java 内存模型的抽象示意图如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：</p>
<ul>
<li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li>
<li>然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。</li>
</ul>
<p>下面通过示意图来说明这两个步骤：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，本地内存 A 和 B 有主内存中共享变量 x 的副本。假设初始时，这三个内存中的 x 值都为 0。线程 A 在执行时，把更新后的 x 值（假设值为 1）临时存放在自己的本地内存 A 中。当线程 A 和线程 B 需要通信时，线程 A 首先会把自己本地内存中修改后的 x 值刷新到主内存中，此时主内存中的 x 值变为了 1。随后，线程 B 到主内存中去读取线程 A 更新后的 x 值，此时线程 B 的本地内存的 x 值也变为了 1。</p>
<p>从整体来看，这两个步骤实质上是线程 A 在向线程 B 发送消息，而且这个通信过程必须要经过主内存。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 java 程序员提供内存可见性保证。</p>
<h3><a class="header-anchor" href="#重排序"><span></span></a><a href="#%E9%87%8D%E6%8E%92%E5%BA%8F">#</a> 重排序</h3>
<p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p>
<ul>
<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>
<li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>
<li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>
</ul>
<p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p>
<p>JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>
<h3><a class="header-anchor" href="#处理器重排序与内存屏障指令"><span></span></a><a href="#%E5%A4%84%E7%90%86%E5%99%A8%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E6%8C%87%E4%BB%A4">#</a> 处理器重排序与内存屏障指令</h3>
<p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读 / 写操作的执行顺序，不一定与内存实际发生的读 / 写操作顺序一致！为了具体说明，请看下面示例：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Processor A</span></span>
<span class="line"><span style="color:#E06C75">a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //A1  </span></span>
<span class="line"><span style="color:#E06C75">x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //A2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Processor B</span></span>
<span class="line"><span style="color:#E06C75">b </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //B1  </span></span>
<span class="line"><span style="color:#E06C75">y </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //B2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 初始状态：a = b = 0；处理器允许执行后得到结果：x = y = 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设处理器 A 和处理器 B 按程序的顺序并行执行内存访问，最终却可能得到 x = y = 0 的结果。具体的原因如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这里处理器 A 和处理器 B 可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到 x = y = 0 的结果。</p>
<p>从内存操作实际发生的顺序来看，直到处理器 A 执行 A3 来刷新自己的写缓存区，写操作 A1 才算真正执行了。虽然处理器 A 执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器 A 的内存操作顺序被重排序了（处理器 B 的情况和处理器 A 一样，这里就不赘述了）。</p>
<p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写 - 读操做重排序。</p>
<p>下面是常见处理器允许的重排序类型的列表：</p>
<p>|           | Load-Load | Load-Store | Store-Store | Store-Load | 数据依赖 |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之JVM 内存结构</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJVM%20%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJVM%20%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之JVM 内存结构</source>
      <description>本文主要对JVM 内存结构进行讲解，注意不要和Java内存模型混淆了。原先这里放了一篇我自己整理的文章，最近看到海星的javakeeper公众号整理的文章，整理的很好。所以替换为他的文章，以方便你构筑JVM内存结构的知识体系。 imgimg 运行时数据区 一、程序计数器 1.1 作用 1.2 概述 二、虚拟机栈 2.1 概述 2.2 栈的存储单位 2....</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对JVM 内存结构进行讲解，注意不要和Java内存模型混淆了。原先这里放了一篇我自己整理的文章，最近看到<strong>海星的javakeeper公众号</strong>整理的文章，整理的很好。所以替换为他的文章，以方便你构筑JVM内存结构的知识体系。</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/007S8ZIlly1gg9kuge8ovj32150tt7cd.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA">运行时数据区</a></p>
<p><a href="#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">一、程序计数器</a></p>
<ul>
<li><a href="">1.1 作用</a></li>
<li><a href="">1.2 概述</a></li>
</ul>
<p><a href="">二、虚拟机栈</a></p>
<ul>
<li><a href="">2.1 概述</a></li>
<li><a href="">2.2 栈的存储单位</a></li>
<li><a href="">2.3 栈运行原理</a></li>
<li><a href="">2.4 栈帧的内部结构</a></li>
</ul>
<p><a href="">三、本地方法栈</a></p>
<ul>
<li><a href="">3.1 本地方法接口</a></li>
<li><a href="">3.2 本地方法栈（Native Method Stack）</a></li>
</ul>
<p><a href="">四、堆内存</a></p>
<ul>
<li><a href="">4.1 内存划分</a></li>
<li><a href="">4.2 设置堆内存大小和 OOM</a></li>
<li><a href="">4.3 对象在堆中的生命周期</a></li>
<li><a href="">4.4 对象的分配过程</a></li>
<li><a href="">4.5 GC 垃圾回收简介</a></li>
<li><a href="">4.6 TLAB</a></li>
<li><a href="">4.7 堆是分配对象存储的唯一选择吗</a></li>
</ul>
<p><a href="">五、方法区</a></p>
<ul>
<li><a href="">5.1 解惑</a></li>
<li><a href="">5.2 设置方法区内存的大小</a></li>
<li><a href="">5.3 方法区内部结构</a></li>
<li><a href="">5.4 运行时常量池</a></li>
<li><a href="">5.5 方法区在 JDK6、7、8中的演进细节</a></li>
<li><a href="">5.6 方法区的垃圾回收</a></li>
</ul>
<h2><a class="header-anchor" href="#运行时数据区"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA">#</a> 运行时数据区</h2>
<p>内存是非常重要的系统资源，是硬盘和 CPU 的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM 内存布局规定了 Java 在运行过程中内存申请、分配、管理的策略，保证了 JVM 的高效稳定运行。不同的 JVM 对于内存的划分方式和管理机制存在着部分差异。</p>
<p>下图是 JVM 整体架构，中间部分就是 Java 虚拟机定义的各种运行时数据区域。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc6fz21n8kj30u00wpn5v.jpg" alt="jvm-framework" tabindex="0" loading="lazy"><figcaption>jvm-framework</figcaption></figure>
<p>Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁。</p>
<ul>
<li><strong>线程私有</strong>：程序计数器、虚拟机栈、本地方法区</li>
<li><strong>线程共享</strong>：堆、方法区, 堆外内存（Java7的永久代或JDK8的元空间、代码缓存）</li>
</ul>
<blockquote>
<p>下面我们就来一一解读下这些内存区域，先从最简单的入手</p>
</blockquote>
<h2><a class="header-anchor" href="#一、程序计数器"><span></span></a><a href="#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">#</a> 一、程序计数器</h2>
<p>程序计数寄存器（<strong>Program Counter Register</strong>），Register 的命名源于 CPU 的寄存器，寄存器存储指令相关的线程信息，CPU 只有把数据装载到寄存器才能够运行。</p>
<p>这里，并非是广义上所指的物理寄存器，叫程序计数器（或PC计数器或指令计数器）会更加贴切，并且也不容易引起一些不必要的误会。<strong>JVM 中的 PC 寄存器是对物理 PC 寄存器的一种抽象模拟</strong>。</p>
<p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的<strong>行号指示器</strong>。</p>
<h3><a class="header-anchor" href="#_1-1-作用"><span></span></a><a href="#_1-1-%E4%BD%9C%E7%94%A8">#</a> 1.1 作用</h3>
<p>PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc5kmznm1sj31m50u0wph.jpg" alt="jvm-pc-counter" tabindex="0" loading="lazy"><figcaption>jvm-pc-counter</figcaption></figure>
<p>（分析：进入class文件所在目录，执行 <code>javap -v xx.class</code> 反解析（或者通过 IDEA 插件 <code>Jclasslib</code> 直接查看，上图），可以看到当前类对应的Code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等信息。）</p>
<p>关于类的字节码相关可以看：<a href="">JVM基础 - 类字节码详解</a></p>
<h3><a class="header-anchor" href="#_1-2-概述"><span></span></a><a href="#_1-2-%E6%A6%82%E8%BF%B0">#</a> 1.2 概述</h3>
<blockquote>
<p>通过下面两个问题，理解下PC计数器</p>
</blockquote>
<ul>
<li><strong>使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？</strong></li>
</ul>
<p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p>
<ul>
<li><strong>PC寄存器为什么会被设定为线程私有的？</strong></li>
</ul>
<p>多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU会不停的做任务切换，这样必然会导致经常中断或恢复。为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为每个线程都分配了一个PC寄存器，每个线程都独立计算，不会互相影响。</p>
<blockquote>
<p>相关总结如下：</p>
</blockquote>
<ul>
<li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域</li>
<li>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致</li>
<li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）</li>
<li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li>
<li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li>
<li><strong>它是唯一一个在 JVM 规范中没有规定任何 <code>OutOfMemoryError</code> 情况的区域</strong></li>
</ul>
<h2><a class="header-anchor" href="#二、虚拟机栈"><span></span></a><a href="#%E4%BA%8C%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">#</a> 二、虚拟机栈</h2>
<h3><a class="header-anchor" href="#_2-1-概述"><span></span></a><a href="#_2-1-%E6%A6%82%E8%BF%B0">#</a> 2.1 概述</h3>
<blockquote>
<p>Java 虚拟机栈(Java Virtual Machine Stacks)，早期也叫 Java 栈。每个线程在创建的时候都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame），对应着一次次 Java 方法调用，是线程私有的，生命周期和线程一致。</p>
</blockquote>
<p><strong>作用</strong>：主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</li>
<li>JVM 直接对虚拟机栈的操作只有两个：每个方法执行，伴随着<strong>入栈</strong>（进栈/压栈），方法执行结束<strong>出栈</strong></li>
<li><strong>栈不存在垃圾回收问题</strong></li>
</ul>
<p><strong>栈中可能出现的异常</strong>：</p>
<p>Java 虚拟机规范允许 <strong>Java虚拟机栈的大小是动态的或者是固定不变的</strong></p>
<ul>
<li>如果采用固定大小的 Java 虚拟机栈，那每个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 <strong>StackOverflowError</strong> 异常</li>
<li>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个<strong>OutOfMemoryError</strong>异常</li>
</ul>
<p>可以通过参数<code>-Xss</code>来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p>
<p>官方提供的参考工具，可查一些参数和操作：https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html#BGBCIEFC</p>
<h3><a class="header-anchor" href="#_2-2-栈的存储单位"><span></span></a><a href="#_2-2-%E6%A0%88%E7%9A%84%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D">#</a> 2.2 栈的存储单位</h3>
<p>栈中存储什么？</p>
<ul>
<li>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧（Stack Frame）的格式存在</strong></li>
<li>在这个线程上正在执行的每个方法都各自有对应的一个栈帧</li>
<li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li>
</ul>
<h3><a class="header-anchor" href="#_2-3-栈运行原理"><span></span></a><a href="#_2-3-%E6%A0%88%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86">#</a> 2.3 栈运行原理</h3>
<ul>
<li>JVM 直接对 Java 栈的操作只有两个，对栈帧的<strong>压栈</strong>和<strong>出栈</strong>，遵循“先进后出/后进先出”原则</li>
<li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（<strong>栈顶栈帧</strong>）是有效的，这个栈帧被称为<strong>当前栈帧</strong>（Current Frame），与当前栈帧对应的方法就是<strong>当前方法</strong>（Current Method），定义这个方法的类就是<strong>当前类</strong>（Current Class）</li>
<li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作</li>
<li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前栈帧</li>
<li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧</li>
<li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</li>
<li>Java 方法有两种返回函数的方式，<strong>一种是正常的函数返回，使用 return 指令，另一种是抛出异常，不管用哪种方式，都会导致栈帧被弹出</strong></li>
</ul>
<p>IDEA 在 debug 时候，可以在 debug 窗口看到 Frames 中各种方法的压栈和出栈情况</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc9lezaxrbj319v0u0k4w.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#_2-4-栈帧的内部结构"><span></span></a><a href="#_2-4-%E6%A0%88%E5%B8%A7%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84">#</a> 2.4 栈帧的内部结构</h3>
<p>每个<strong>栈帧</strong>（Stack Frame）中存储着：</p>
<ul>
<li>局部变量表（Local Variables）</li>
<li>操作数栈（Operand Stack）(或称为表达式栈)</li>
<li>动态链接（Dynamic Linking）：指向运行时常量池的方法引用</li>
<li>方法返回地址（Return Address）：方法正常退出或异常退出的地址</li>
<li>一些附加信息</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc8tjehg8bj318m0lbtbu.jpg" alt="jvm-stack-frame" tabindex="0" loading="lazy"><figcaption>jvm-stack-frame</figcaption></figure>
<p>继续深抛栈帧中的五部分~~</p>
<h4><a class="header-anchor" href="#_2-4-1-局部变量表"><span></span></a><a href="#_2-4-1-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8">#</a> 2.4.1. 局部变量表</h4>
<ul>
<li>局部变量表也被称为局部变量数组或者本地变量表</li>
<li>是一组变量值存储空间，<strong>主要用于存储方法参数和定义在方法体内的局部变量</strong>，包括编译器可知的各种 Java 虚拟机<strong>基本数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此相关的位置）和 <strong>returnAddress</strong> 类型（指向了一条字节码指令的地址，已被异常表取代）</li>
<li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此<strong>不存在数据安全问题</strong></li>
<li><strong>局部变量表所需要的容量大小是编译期确定下来的</strong>，并保存在方法的 Code 属性的 <code>maximum local variables</code> 数据项中。在方法运行期间是不会改变局部变量表的大小的</li>
<li>方法嵌套调用的次数由栈的大小决定。一般来说，<strong>栈越大，方法嵌套调用次数越多</strong>。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</li>
<li><strong>局部变量表中的变量只在当前方法调用中有效</strong>。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</li>
<li>参数值的存放总是在局部变量数组的 index0 开始，到数组长度 -1 的索引结束</li>
</ul>
<h5><a class="header-anchor" href="#槽-slot"><span></span></a><a href="#%E6%A7%BD-slot">#</a> 槽 Slot</h5>
<ul>
<li>局部变量表最基本的存储单元是 Slot（变量槽）</li>
<li>在局部变量表中，32 位以内的类型只占用一个 Slot(包括returnAddress类型)，64 位的类型（long和double）占用两个连续的 Slot
<ul>
<li>byte、short、char 在存储前被转换为int，boolean也被转换为int，0 表示 false，非 0 表示 true</li>
<li>long 和 double 则占据两个 Slot</li>
</ul>
</li>
<li>JVM 会为局部变量表中的每一个 Slot 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值，索引值的范围从 0 开始到局部变量表最大的 Slot 数量</li>
<li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<strong>按照顺序被复制</strong>到局部变量表中的每一个 Slot 上</li>
<li><strong>如果需要访问局部变量表中一个 64bit 的局部变量值时，只需要使用前一个索引即可</strong>。（比如：访问 long 或 double 类型变量，不允许采用任何方式单独访问其中的某一个 Slot）</li>
<li>如果当前帧是由构造方法或实例方法创建的，那么该对象引用 this 将会存放在 index 为 0 的 Slot 处，其余的参数按照参数表顺序继续排列（这里就引出一个问题：静态方法中为什么不可以引用 this，就是因为this 变量不存在于当前方法的局部变量表中）</li>
<li><strong>栈帧中的局部变量表中的槽位是可以重用的</strong>，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而<strong>达到节省资源的目的</strong>。（下图中，this、a、b、c 理论上应该有 4 个变量，c 复用了 b 的槽）</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc9s12g5wlj31li0owdm9.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>在栈帧中，与性能调优关系最为密切的就是局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递</li>
<li><strong>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</strong></li>
</ul>
<h4><a class="header-anchor" href="#_2-4-2-操作数栈"><span></span></a><a href="#_2-4-2-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88">#</a> 2.4.2. 操作数栈</h4>
<ul>
<li>每个独立的栈帧中除了包含局部变量表之外，还包含一个<strong>后进先出</strong>（Last-In-First-Out）的操作数栈，也可以称为<strong>表达式栈</strong>（Expression Stack）</li>
<li><strong>操作数栈，在方法执行过程中，根据字节码指令，往操作数栈中写入数据或提取数据，即入栈（push）、出栈（pop）</strong></li>
<li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。比如，执行复制、交换、求和等操作</li>
</ul>
<h5><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h5>
<ul>
<li>操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</strong></li>
<li>操作数栈就是 JVM 执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，<strong>此时这个方法的操作数栈是空的</strong></li>
<li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的 Code 属性的 <code>max_stack</code> 数据项中</li>
<li>栈中的任何一个元素都可以是任意的 Java 数据类型
<ul>
<li>32bit 的类型占用一个栈单位深度</li>
<li>64bit 的类型占用两个栈单位深度</li>
</ul>
</li>
<li>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问</li>
<li><strong>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中</strong>，并更新 PC 寄存器中下一条需要执行的字节码指令</li>
<li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证</li>
<li>另外，我们说<strong>Java虚拟机的解释引擎是基于栈的执行引擎</strong>，其中的栈指的就是操作数栈</li>
</ul>
<h5><a class="header-anchor" href="#栈顶缓存-top-of-stack-cashing"><span></span></a><a href="#%E6%A0%88%E9%A1%B6%E7%BC%93%E5%AD%98-top-of-stack-cashing">#</a> 栈顶缓存（Top-of-stack-Cashing）</h5>
<p>HotSpot 的执行引擎采用的并非是基于寄存器的架构，但这并不代表 HotSpot VM 的实现并没有间接利用到寄存器资源。寄存器是物理 CPU 中的组成部分之一，它同时也是 CPU 中非常重要的高速存储资源。一般来说，寄存器的读/写速度非常迅速，甚至可以比内存的读/写速度快上几十倍不止，不过寄存器资源却非常有限，不同平台下的CPU 寄存器数量是不同和不规律的。寄存器主要用于缓存本地机器指令、数值和下一条需要被执行的指令地址等数据。</p>
<p>基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读/写次数。由于操作数是存储在内存中的，因此频繁的执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM 设计者们提出了栈顶缓存技术，<strong>将栈顶元素全部缓存在物理 CPU 的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率</strong></p>
<h4><a class="header-anchor" href="#_2-4-3-动态链接-指向运行时常量池的方法引用"><span></span></a><a href="#_2-4-3-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5-%E6%8C%87%E5%90%91%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">#</a> 2.4.3. 动态链接（指向运行时常量池的方法引用）</h4>
<ul>
<li><strong>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用</strong>。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接(Dynamic Linking)。</li>
<li>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为<strong>符号引用</strong>（Symbolic Reference）保存在 Class 文件的常量池中。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong></li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gca4k4gndgj31d20o2td0.jpg" alt="jvm-dynamic-linking" tabindex="0" loading="lazy"><figcaption>jvm-dynamic-linking</figcaption></figure>
<h5><a class="header-anchor" href="#jvm-是如何执行方法调用的"><span></span></a><a href="#jvm-%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84">#</a> JVM 是如何执行方法调用的</h5>
<p>方法调用不同于方法执行，方法调用阶段的唯一任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。Class 文件的编译过程中不包括传统编译器中的连接步骤，一切方法调用在 Class文件里面存储的都是<strong>符号引用</strong>，而不是方法在实际运行时内存布局中的入口地址（<strong>直接引用</strong>）。也就是需要在类加载阶段，甚至到运行期才能确定目标方法的直接引用。</p>
<blockquote>
<p>【这一块内容，除了方法调用，还包括解析、分派（静态分派、动态分派、单分派与多分派），这里先不介绍，后续再挖】</p>
</blockquote>
<p>在 JVM 中，将符号引用转换为调用方法的直接引用与方法的绑定机制有关</p>
<ul>
<li><strong>静态链接</strong>：当一个字节码文件被装载进 JVM 内部时，如果被调用的<strong>目标方法在编译期可知</strong>，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</li>
<li><strong>动态链接</strong>：如果被调用的方法在编译期无法被确定下来，也就是说，只能在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接</li>
</ul>
<p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。<strong>绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次</strong>。</p>
<ul>
<li>早期绑定：<strong>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时</strong>，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</li>
<li>晚期绑定：如果被调用的方法在编译器无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式就被称为晚期绑定。</li>
</ul>
<h5><a class="header-anchor" href="#虚方法和非虚方法"><span></span></a><a href="#%E8%99%9A%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%9E%E8%99%9A%E6%96%B9%E6%B3%95">#</a> 虚方法和非虚方法</h5>
<ul>
<li>如果方法在编译器就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法，比如静态方法、私有方法、final 方法、实例构造器、父类方法都是非虚方法</li>
<li>其他方法称为虚方法</li>
</ul>
<h5><a class="header-anchor" href="#虚方法表"><span></span></a><a href="#%E8%99%9A%E6%96%B9%E6%B3%95%E8%A1%A8">#</a> 虚方法表</h5>
<p>在面向对象编程中，会频繁的使用到动态分派，如果每次动态分派都要重新在类的方法元数据中搜索合适的目标有可能会影响到执行效率。为了提高性能，JVM 采用在类的方法区建立一个虚方法表（virtual method table），使用索引表来代替查找。非虚方法不会出现在表中。</p>
<p>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p>
<p>虚方法表会在类加载的连接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM 会把该类的方法表也初始化完毕。</p>
<h4><a class="header-anchor" href="#_2-4-4-方法返回地址-return-address"><span></span></a><a href="#_2-4-4-%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80-return-address">#</a> 2.4.4. 方法返回地址（return address）</h4>
<p>用来存放调用该方法的 PC 寄存器的值。</p>
<p>一个方法的结束，有两种方式</p>
<ul>
<li>正常执行完成</li>
<li>出现未处理的异常，非正常退出</li>
</ul>
<p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的 PC 计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定的，栈帧中一般不会保存这部分信息。</p>
<p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p>
<ol>
<li>
<p>执行引擎遇到任意一个方法返回的字节码指令，会有返回值传递给上层的方法调用者，简称<strong>正常完成出口</strong></p>
<p>一个方法的正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定</p>
<p>在字节码指令中，返回指令包含 ireturn(当返回值是 boolean、byte、char、short 和 int 类型时使用)、lreturn、freturn、dreturn 以及 areturn，另外还有一个 return 指令供声明为 void 的方法、实例初始化方法、类和接口的初始化方法使用。</p>
</li>
<li>
<p>在方法执行的过程中遇到了异常，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称<strong>异常完成出口</strong></p>
<p>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</p>
</li>
</ol>
<p>本质上，<strong>方法的退出就是当前栈帧出栈的过程</strong>。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p>
<p>正常完成出口和异常完成出口的区别在于：<strong>通过异常完成出口退出的不会给他的上层调用者产生任何的返回值</strong></p>
<h4><a class="header-anchor" href="#_2-4-5-附加信息"><span></span></a><a href="#_2-4-5-%E9%99%84%E5%8A%A0%E4%BF%A1%E6%81%AF">#</a> 2.4.5. 附加信息</h4>
<p>栈帧中还允许携带与 Java 虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息，但这些信息取决于具体的虚拟机实现。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/007S8ZIlly1gg9kuge8ovj32150tt7cd.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>JVM 基础之Java 类加载机制</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJava%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJava%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之Java 类加载机制</source>
      <description>这篇文章将带你深入理解Java 类加载机制。 JVM 基础之Java 类加载机制 类的生命周期 类的加载: 查找并加载类的二进制数据 连接 验证: 确保被加载的类的正确性 准备: 为类的静态变量分配内存，并将其初始化为默认值 解析: 把类中的符号引用转换为直接引用 初始化 使用 卸载 类加载器， JVM类加载机制 类加载器的层次 寻找类加载器 类的加载...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>这篇文章将带你深入理解Java 类加载机制。</p>
</blockquote>
<ul>
<li>JVM 基础之Java 类加载机制
<ul>
<li>类的生命周期
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD-%E6%9F%A5%E6%89%BE%E5%B9%B6%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE">类的加载: 查找并加载类的二进制数据</a></li>
<li>连接
<ul>
<li><a href="#%E9%AA%8C%E8%AF%81-%E7%A1%AE%E4%BF%9D%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">验证: 确保被加载的类的正确性</a></li>
<li><a href="#%E5%87%86%E5%A4%87-%E4%B8%BA%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E5%B9%B6%E5%B0%86%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA%E9%BB%98%E8%AE%A4%E5%80%BC">准备: 为类的静态变量分配内存，并将其初始化为默认值</a></li>
<li><a href="#%E8%A7%A3%E6%9E%90-%E6%8A%8A%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8">解析: 把类中的符号引用转换为直接引用</a></li>
</ul>
</li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li>
<li><a href="#%E5%8D%B8%E8%BD%BD">卸载</a></li>
</ul>
</li>
<li>类加载器， JVM类加载机制
<ul>
<li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1">类加载器的层次</a></li>
<li><a href="#%E5%AF%BB%E6%89%BE%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">寻找类加载器</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD">类的加载</a></li>
</ul>
</li>
<li><a href="#jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">JVM类加载机制</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">自定义类加载器</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#类的生命周期"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">#</a> 类的生命周期</h2>
<p>其中类加载的过程包括了<code>加载</code>、<code>验证</code>、<code>准备</code>、<code>解析</code>、<code>初始化</code>五个阶段。在这五个阶段中，<code>加载</code>、<code>验证</code>、<code>准备</code>和<code>初始化</code>这四个阶段发生的顺序是确定的，<em>而<code>解析</code>阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定(也成为动态绑定或晚期绑定)</em>。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#类的加载-查找并加载类的二进制数据"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD-%E6%9F%A5%E6%89%BE%E5%B9%B6%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE">#</a> 类的加载: 查找并加载类的二进制数据</h3>
<p>加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情:</p>
<ul>
<li>通过一个类的全限定名来获取其定义的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_1.png" alt="java_jvm_classload_1" tabindex="0" loading="lazy"><figcaption>java_jvm_classload_1</figcaption></figure>
<p>相对于类加载的其他阶段而言，<em>加载阶段(准确地说，是加载阶段获取类的二进制字节流的动作)是可控性最强的阶段</em>，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p>
<p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个<code>java.lang.Class</code>类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>
<p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p>
<blockquote>
<p>加载.class文件的方式</p>
</blockquote>
<ul>
<li>从本地系统中直接加载</li>
<li>通过网络下载.class文件</li>
<li>从zip，jar等归档文件中加载.class文件</li>
<li>从专有数据库中提取.class文件</li>
<li>将Java源文件动态编译为.class文件</li>
</ul>
<h3><a class="header-anchor" href="#连接"><span></span></a><a href="#%E8%BF%9E%E6%8E%A5">#</a> 连接</h3>
<h4><a class="header-anchor" href="#验证-确保被加载的类的正确性"><span></span></a><a href="#%E9%AA%8C%E8%AF%81-%E7%A1%AE%E4%BF%9D%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">#</a> 验证: 确保被加载的类的正确性</h4>
<p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作:</p>
<ul>
<li><code>文件格式验证</code>: 验证字节流是否符合Class文件格式的规范；例如: 是否以<code>0xCAFEBABE</code>开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li>
<li><code>元数据验证</code>: 对字节码描述的信息进行语义分析(注意: 对比<code>javac</code>编译阶段的语义分析)，以保证其描述的信息符合Java语言规范的要求；例如: 这个类是否有父类，除了<code>java.lang.Object</code>之外。</li>
<li><code>字节码验证</code>: 通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li>
<li><code>符号引用验证</code>: 确保解析动作能正确执行。</li>
</ul>
<blockquote>
<p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，<em>如果所引用的类经过反复验证，那么可以考虑采用<code>-Xverifynone</code>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</em></p>
</blockquote>
<h4><a class="header-anchor" href="#准备-为类的静态变量分配内存-并将其初始化为默认值"><span></span></a><a href="#%E5%87%86%E5%A4%87-%E4%B8%BA%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98-%E5%B9%B6%E5%B0%86%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA%E9%BB%98%E8%AE%A4%E5%80%BC">#</a> 准备: 为类的静态变量分配内存，并将其初始化为默认值</h4>
<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，<strong>这些内存都将在方法区中分配</strong>。对于该阶段有以下几点需要注意:</p>
<ul>
<li>
<p>这时候进行内存分配的仅包括类变量(<code>static</code>)，而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>
</li>
<li>
<p>这里所设置的初始值通常情况下是数据类型默认的零值(如<code>0</code>、<code>0L</code>、<code>null</code>、<code>false</code>等)，而不是被在Java代码中被显式地赋予的值。</p>
<p>假设一个类变量的定义为: <code>public static int value = 3</code>；那么变量value在准备阶段过后的初始值为<code>0</code>，而不是<code>3</code>，因为这时候尚未开始执行任何Java方法，而把value赋值为3的<code>put static</code>指令是在程序编译后，存放于类构造器<code>&lt;clinit&gt;()</code>方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</p>
</li>
</ul>
<blockquote>
<p>这里还需要注意如下几点</p>
</blockquote>
<ul>
<li>对基本数据类型来说，对于类变量(static)和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</li>
<li>对于同时被<code>static</code>和<code>final</code>修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</li>
<li>对于引用数据类型<code>reference</code>来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即<code>null</code>。</li>
<li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</li>
<li>如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。假设上面的类变量value被定义为: <code> public static final int value = 3；</code>编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。我们可以理解为<code>static final</code>常量在编译期就将其结果放入了调用它的类的常量池中</li>
</ul>
<h4><a class="header-anchor" href="#解析-把类中的符号引用转换为直接引用"><span></span></a><a href="#%E8%A7%A3%E6%9E%90-%E6%8A%8A%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8">#</a> 解析: 把类中的符号引用转换为直接引用</h4>
<p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对<code>类</code>或<code>接口</code>、<code>字段</code>、<code>类方法</code>、<code>接口方法</code>、<code>方法类型</code>、<code>方法句柄</code>和<code>调用点</code>限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。</p>
<p><code>直接引用</code>就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>
<h3><a class="header-anchor" href="#初始化"><span></span></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 初始化</h3>
<p>初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式:</p>
<ul>
<li>声明类变量是指定初始值</li>
<li>使用静态代码块为类变量指定初始值</li>
</ul>
<p><strong>JVM初始化步骤</strong></p>
<ul>
<li>假如这个类还没有被加载和连接，则程序先加载并连接该类</li>
<li>假如该类的直接父类还没有被初始化，则先初始化其直接父类</li>
<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>
</ul>
<p><strong>类初始化时机</strong>: 只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种:</p>
<ul>
<li>创建类的实例，也就是new的方式</li>
<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射(如Class.forName("com.pdai.jvm.Test"))</li>
<li>初始化某个类的子类，则其父类也会被初始化</li>
<li>Java虚拟机启动时被标明为启动类的类(Java Test)，直接使用java.exe命令来运行某个主类</li>
</ul>
<h3><a class="header-anchor" href="#使用"><span></span></a><a href="#%E4%BD%BF%E7%94%A8">#</a> 使用</h3>
<p>类访问方法区内的数据结构的接口， 对象是Heap区的数据。</p>
<h3><a class="header-anchor" href="#卸载"><span></span></a><a href="#%E5%8D%B8%E8%BD%BD">#</a> 卸载</h3>
<p><strong>Java虚拟机将结束生命周期的几种情况</strong></p>
<ul>
<li>执行了System.exit()方法</li>
<li>程序正常执行结束</li>
<li>程序在执行过程中遇到了异常或错误而异常终止</li>
<li>由于操作系统出现错误而导致Java虚拟机进程终止</li>
</ul>
<h2><a class="header-anchor" href="#类加载器-jvm类加载机制"><span></span></a><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">#</a> 类加载器， JVM类加载机制</h2>
<h3><a class="header-anchor" href="#类加载器的层次"><span></span></a><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1">#</a> 类加载器的层次</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>注意: 这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。</p>
</blockquote>
<blockquote>
<p>站在Java虚拟机的角度来讲，只存在两种不同的类加载器: 启动类加载器: 它使用C++实现(这里仅限于<code>Hotspot</code>，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的)，是虚拟机自身的一部分；所有其他的类加载器: 这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类<code>java.lang.ClassLoader</code>，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</p>
</blockquote>
<p><strong>站在Java开发人员的角度来看，类加载器可以大致划分为以下三类</strong> :</p>
<p><code>启动类加载器</code>: Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库(如rt.jar，所有的<code>java.*</code>开头的类均被Bootstrap ClassLoader加载)。启动类加载器是无法被Java程序直接引用的。</p>
<p><code>扩展类加载器</code>: Extension ClassLoader，该加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库(如j<code>avax.*</code>开头的类)，开发者可以直接使用扩展类加载器。</p>
<p><code>应用程序类加载器</code>: Application ClassLoader，该类加载器由<code>sun.misc.Launcher$AppClassLoader</code>来实现，它负责加载用户类路径(ClassPath)所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
<p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点:</p>
<ul>
<li>在执行非置信代码之前，自动验证数字签名。</li>
<li>动态地创建符合用户特定需要的定制化构建类。</li>
<li>从特定的场所取得java class，例如数据库中和网络中。</li>
</ul>
<h3><a class="header-anchor" href="#寻找类加载器"><span></span></a><a href="#%E5%AF%BB%E6%89%BE%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">#</a> 寻找类加载器</h3>
<p>寻找类加载器小例子如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.pdai.jvm.classloader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ClassLoaderTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">     public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ClassLoader</span><span style="color:#E06C75"> loader</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getContextClassLoader</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(loader);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">loader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParent</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">loader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParent</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getParent</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Launcher$AppClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">64fef26a</span></span>
<span class="line"><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Launcher$ExtClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">1ddd40f3</span></span>
<span class="line"><span style="color:#D19A66">null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的结果可以看出，并没有获取到<code>ExtClassLoader</code>的父Loader，原因是<code>BootstrapLoader</code>(引导类加载器)是用C语言实现的，找不到一个确定的返回父Loader的方式，于是就返回<code>null</code>。</p>
<h3><a class="header-anchor" href="#类的加载"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD">#</a> 类的加载</h3>
<p>类加载有三种方式:</p>
<p>1、命令行启动应用时候由JVM初始化加载</p>
<p>2、通过Class.forName()方法动态加载</p>
<p>3、通过ClassLoader.loadClass()方法动态加载</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.pdai.jvm.classloader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> loaderTest</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ClassNotFoundException</span><span style="color:#ABB2BF"> { </span></span>
<span class="line"><span style="color:#E5C07B">                ClassLoader</span><span style="color:#E06C75"> loader</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> HelloWorld</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClassLoader</span><span style="color:#ABB2BF">(); </span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(loader); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //使用ClassLoader.loadClass()来加载类，不会执行初始化块 </span></span>
<span class="line"><span style="color:#E5C07B">                loader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Test2"</span><span style="color:#ABB2BF">); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //使用Class.forName()来加载类，默认会执行初始化块 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//                Class.forName("Test2"); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //使用Class.forName()来加载类，并指定ClassLoader，初始化时不执行静态块 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//                Class.forName("Test2", false, loader); </span></span>
<span class="line"><span style="color:#ABB2BF">        }</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test2</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">        static</span><span style="color:#E06C75"> { </span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"静态初始化块执行了！"</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">        } </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别切换加载方式，会有不同的输出结果。</p>
<blockquote>
<p>Class.forName()和ClassLoader.loadClass()区别?</p>
<ul>
<li>Class.forName(): 将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；</li>
<li>ClassLoader.loadClass(): 只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。</li>
<li>Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。</li>
</ul>
</blockquote>
<h2><a class="header-anchor" href="#jvm类加载机制"><span></span></a><a href="#jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">#</a> JVM类加载机制</h2>
<ul>
<li><code>全盘负责</code>，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>
<li><code>父类委托</code>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>
<li><code>缓存机制</code>，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</li>
<li><code>双亲委派机制</code>, 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</li>
</ul>
<p><strong>双亲委派机制过程？</strong></p>
<ol>
<li>当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。</li>
<li>当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。</li>
<li>如果BootStrapClassLoader加载失败(例如在$JAVA_HOME/jre/lib里未查找到该class)，会使用ExtClassLoader来尝试加载；</li>
<li>若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。</li>
</ol>
<p><strong>双亲委派代码实现</strong></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> loadClass</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> name)throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#61AFEF"> loadClass</span><span style="color:#E06C75">(name</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> loadClass</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> name</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> resolve)throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 首先判断该类型是否已经被加载</span></span>
<span class="line"><span style="color:#E5C07B">            Class</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> findLoadedClass</span><span style="color:#E06C75">(name)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (parent </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                         //如果存在父类加载器，就委派给父类加载器加载</span></span>
<span class="line"><span style="color:#E06C75">                        c </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parent</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(name, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">                    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)</span></span>
<span class="line"><span style="color:#E06C75">                        c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> findBootstrapClass0</span><span style="color:#E06C75">(name)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ClassNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                 // 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span></span>
<span class="line"><span style="color:#E06C75">                    c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> findClass</span><span style="color:#E06C75">(name)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (resolve) {</span></span>
<span class="line"><span style="color:#61AFEF">                resolveClass</span><span style="color:#E06C75">(c)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双亲委派优势</strong></p>
<ul>
<li>系统类防止内存中出现多份同样的字节码</li>
<li>保证Java程序安全稳定运行</li>
</ul>
<h2><a class="header-anchor" href="#自定义类加载器"><span></span></a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">#</a> 自定义类加载器</h2>
<p>通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输 Java 类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 ClassLoader 类，从上面对 loadClass 方法来分析来看，我们只需要重写 findClass 方法即可。下面我们通过一个示例来演示自定义类加载器的流程:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.pdai.jvm.classloader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyClassLoader</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> ClassLoader</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> findClass</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ClassNotFoundException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">classData</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> loadClassData</span><span style="color:#ABB2BF">(name);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (classData </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ClassNotFoundException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#61AFEF"> defineClass</span><span style="color:#ABB2BF">(name, classData, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">classData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] loadClassData</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> className</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> fileName</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> root </span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> File</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">separatorChar</span></span>
<span class="line"><span style="color:#56B6C2">                +</span><span style="color:#E5C07B"> className</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">replace</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'.'</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">File</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">separatorChar</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ".class"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            InputStream</span><span style="color:#E06C75"> ins</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#ABB2BF">(fileName);</span></span>
<span class="line"><span style="color:#E5C07B">            ByteArrayOutputStream</span><span style="color:#E06C75"> baos</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> bufferSize</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1024</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[bufferSize];</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> length</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> ((length </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ins</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer)) </span><span style="color:#56B6C2">!=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                baos</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, length);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> baos</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toByteArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getRoot</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> root;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setRoot</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> root</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">root</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> root;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">  {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        MyClassLoader</span><span style="color:#E06C75"> classLoader</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyClassLoader</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        classLoader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setRoot</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"D:</span><span style="color:#56B6C2">\\</span><span style="color:#98C379">temp"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">testClass</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">            testClass </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> classLoader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"com.pdai.jvm.classloader.Test2"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            Object</span><span style="color:#E06C75"> object</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> testClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getClassLoader</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">ClassNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InstantiationException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IllegalAccessException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义类加载器的核心在于对字节码文件的获取，如果是加密的字节码则需要在该类中对文件进行解密。由于这里只是演示，我并未对class文件进行加密，因此没有解密的过程。</p>
<p><strong>这里有几点需要注意</strong> :</p>
<p>1、这里传递的文件名需要是类的全限定性名称，即<code>com.pdai.jvm.classloader.Test2</code>格式的，因为 defineClass 方法是按这种格式进行处理的。</p>
<p>2、最好不要重写loadClass方法，因为这样容易破坏双亲委托模式。</p>
<p>3、这类Test 类本身可以被 AppClassLoader 类加载，因此我们不能把com/pdai/jvm/classloader/Test2.class 放在类路径下。否则，由于双亲委托机制的存在，会直接导致该类由 AppClassLoader 加载，而不会通过我们自定义类加载器来加载。</p>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之字节码的增强技术</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之字节码的增强技术</source>
      <description>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。 JVM 基础之字节码的增强技术 字节码增强技术 ASM ASM API 核心API 树形API 直接利用ASM实现AOP ASM工具 Ja...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。</p>
</blockquote>
<ul>
<li>JVM 基础之字节码的增强技术
<ul>
<li>字节码增强技术
<ul>
<li>ASM
<ul>
<li>ASM API
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83api">核心API</a></li>
<li><a href="#%E6%A0%91%E5%BD%A2api">树形API</a></li>
</ul>
</li>
<li><a href="#%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8asm%E5%AE%9E%E7%8E%B0aop">直接利用ASM实现AOP</a></li>
<li><a href="#asm%E5%B7%A5%E5%85%B7">ASM工具</a></li>
</ul>
</li>
<li><a href="#javassist">Javassist</a></li>
</ul>
</li>
<li>运行时类的重载
<ul>
<li><a href="#%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA">问题引出</a></li>
<li><a href="#instrument">Instrument</a></li>
<li><a href="#jvmti--agent--attach-api">JVMTI &amp; Agent &amp; Attach API</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">使用场景</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
<li><a href="#%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B">作者简介</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#字节码增强技术"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF">#</a> 字节码增强技术</h2>
<p>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#asm"><span></span></a><a href="#asm">#</a> ASM</h3>
<p>对于需要手动操纵字节码的需求，可以使用ASM，它可以直接生产 .class字节码文件，也可以在类被加载入JVM之前动态修改类行为（如下图17所示）。ASM的应用场景有AOP（Cglib就是基于ASM）、热部署、修改其他jar包中的类等。当然，涉及到如此底层的步骤，实现起来也比较麻烦。接下来，本文将介绍ASM的两种API，并用ASM来实现一个比较粗糙的AOP。但在此之前，为了让大家更快地理解ASM的处理流程，强烈建议读者先对访问者模式进行了解。简单来说，访问者模式主要用于修改或操作一些数据结构比较稳定的数据，而通过第一章，我们知道字节码文件的结构是由JVM固定的，所以很适合利用访问者模式对字节码文件进行修改。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#asm-api"><span></span></a><a href="#asm-api">#</a> ASM API</h4>
<h5><a class="header-anchor" href="#核心api"><span></span></a><a href="#%E6%A0%B8%E5%BF%83api">#</a> 核心API</h5>
<p>ASM Core API可以类比解析XML文件中的SAX方式，不需要把这个类的整个结构读取进来，就可以用流式的方法来处理字节码文件。好处是非常节约内存，但是编程难度较大。然而出于性能考虑，一般情况下编程都使用Core API。在Core API中有以下几个关键类：</p>
<ul>
<li>ClassReader：用于读取已经编译好的.class文件。</li>
<li>ClassWriter：用于重新构建编译后的类，如修改类名、属性以及方法，也可以生成新的类的字节码文件。</li>
<li>各种Visitor类：如上所述，CoreAPI根据字节码从上到下依次处理，对于字节码文件中不同的区域有不同的Visitor，比如用于访问方法的MethodVisitor、用于访问类变量的FieldVisitor、用于访问注解的AnnotationVisitor等。为了实现AOP，重点要使用的是MethodVisitor。</li>
</ul>
<h5><a class="header-anchor" href="#树形api"><span></span></a><a href="#%E6%A0%91%E5%BD%A2api">#</a> 树形API</h5>
<p>ASM Tree API可以类比解析XML文件中的DOM方式，把整个类的结构读取到内存中，缺点是消耗内存多，但是编程比较简单。TreeApi不同于CoreAPI，TreeAPI通过各种Node类来映射字节码的各个区域，类比DOM节点，就可以很好地理解这种编程方式。</p>
<h4><a class="header-anchor" href="#直接利用asm实现aop"><span></span></a><a href="#%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8asm%E5%AE%9E%E7%8E%B0aop">#</a> 直接利用ASM实现AOP</h4>
<p>利用ASM的CoreAPI来增强类。这里不纠结于AOP的专业名词如切片、通知，只实现在方法调用前、后增加逻辑，通俗易懂且方便理解。首先定义需要被增强的Base类：其中只包含一个process()方法，方法内输出一行“process”。增强后，我们期望的是，方法执行前输出“start”，之后输出”end”。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Base</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> process</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了利用ASM实现AOP，需要定义两个类：一个是MyClassVisitor类，用于对字节码的visit以及修改；另一个是Generator类，在这个类中定义ClassReader和ClassWriter，其中的逻辑是，classReader读取字节码，然后交给MyClassVisitor类处理，处理完成后由ClassWriter写字节码并将旧的字节码替换掉。Generator类较简单，我们先看一下它的实现，如下所示，然后重点解释MyClassVisitor类。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassReader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassVisitor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassWriter</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Generator</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//读取</span></span>
<span class="line"><span style="color:#E5C07B">        ClassReader</span><span style="color:#E06C75"> classReader</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ClassReader</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"meituan/bytecode/asm/Base"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        ClassWriter</span><span style="color:#E06C75"> classWriter</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ClassWriter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassWriter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">COMPUTE_MAXS</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //处理</span></span>
<span class="line"><span style="color:#E5C07B">        ClassVisitor</span><span style="color:#E06C75"> classVisitor</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyClassVisitor</span><span style="color:#ABB2BF">(classWriter);</span></span>
<span class="line"><span style="color:#E5C07B">        classReader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(classVisitor, </span><span style="color:#E5C07B">ClassReader</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SKIP_DEBUG</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">data</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> classWriter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toByteArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //输出</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> f</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"operation-server/target/classes/meituan/bytecode/asm/Base.class"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        FileOutputStream</span><span style="color:#E06C75"> fout</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#ABB2BF">(f);</span></span>
<span class="line"><span style="color:#E5C07B">        fout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(data);</span></span>
<span class="line"><span style="color:#E5C07B">        fout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"now generator cc success!!!!!"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyClassVisitor继承自ClassVisitor，用于对字节码的观察。它还包含一个内部类MyMethodVisitor，继承自MethodVisitor用于对类内方法的观察，它的整体代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassVisitor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.MethodVisitor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.Opcodes</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyClassVisitor</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> ClassVisitor</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyClassVisitor</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassVisitor</span><span style="color:#E06C75;font-style:italic"> cv</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(ASM5, cv);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> visit</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> version</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> access</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> signature</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                      String</span><span style="color:#E06C75;font-style:italic"> superName</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">interfaces</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        cv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visit</span><span style="color:#ABB2BF">(version, access, name, signature, superName, interfaces);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> MethodVisitor</span><span style="color:#61AFEF"> visitMethod</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> access</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> desc</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> signature</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">exceptions</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MethodVisitor</span><span style="color:#E06C75"> mv</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitMethod</span><span style="color:#ABB2BF">(access, name, desc, signature,</span></span>
<span class="line"><span style="color:#ABB2BF">                exceptions);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //Base类中有两个方法：无参构造以及process方法，这里不增强构造方法</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;init&gt;"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#ABB2BF"> mv </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            mv </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyMethodVisitor</span><span style="color:#ABB2BF">(mv);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> mv;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    class</span><span style="color:#E5C07B"> MyMethodVisitor</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> MethodVisitor</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#61AFEF"> MyMethodVisitor</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">MethodVisitor</span><span style="color:#E06C75;font-style:italic"> mv</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            super</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ASM5</span><span style="color:#ABB2BF">, mv);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> visitCode</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitCode</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitFieldInsn</span><span style="color:#ABB2BF">(GETSTATIC, </span><span style="color:#98C379">"java/lang/System"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"out"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Ljava/io/PrintStream;"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitLdcInsn</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"start"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitMethodInsn</span><span style="color:#ABB2BF">(INVOKEVIRTUAL, </span><span style="color:#98C379">"java/io/PrintStream"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"println"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"(Ljava/lang/String;)V"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> visitInsn</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> opcode</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> ((opcode </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">IRETURN</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> opcode </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RETURN</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2">                    ||</span><span style="color:#ABB2BF"> opcode </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ATHROW</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //方法在返回之前，打印"end"</span></span>
<span class="line"><span style="color:#E5C07B">                mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitFieldInsn</span><span style="color:#ABB2BF">(GETSTATIC, </span><span style="color:#98C379">"java/lang/System"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"out"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Ljava/io/PrintStream;"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitLdcInsn</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"end"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitMethodInsn</span><span style="color:#ABB2BF">(INVOKEVIRTUAL, </span><span style="color:#98C379">"java/io/PrintStream"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"println"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"(Ljava/lang/String;)V"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitInsn</span><span style="color:#ABB2BF">(opcode);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用这个类就可以实现对字节码的修改。详细解读其中的代码，对字节码做修改的步骤是：</p>
<ul>
<li>首先通过MyClassVisitor类中的visitMethod方法，判断当前字节码读到哪一个方法了。跳过构造方法 <code>&lt;init&gt;</code> 后，将需要被增强的方法交给内部类MyMethodVisitor来进行处理。</li>
<li>接下来，进入内部类MyMethodVisitor中的visitCode方法，它会在ASM开始访问某一个方法的Code区时被调用，重写visitCode方法，将AOP中的前置逻辑就放在这里。 MyMethodVisitor继续读取字节码指令，每当ASM访问到无参数指令时，都会调用MyMethodVisitor中的visitInsn方法。我们判断了当前指令是否为无参数的“return”指令，如果是就在它的前面添加一些指令，也就是将AOP的后置逻辑放在该方法中。</li>
<li>综上，重写MyMethodVisitor中的两个方法，就可以实现AOP了，而重写方法时就需要用ASM的写法，手动写入或者修改字节码。通过调用methodVisitor的visitXXXXInsn()方法就可以实现字节码的插入，XXXX对应相应的操作码助记符类型，比如mv.visitLdcInsn(“end”)对应的操作码就是ldc “end”，即将字符串“end”压入栈。 完成这两个visitor类后，运行Generator中的main方法完成对Base类的字节码增强，增强后的结果可以在编译后的target文件夹中找到Base.class文件进行查看，可以看到反编译后的代码已经改变了。然后写一个测试类MyTest，在其中new Base()，并调用base.process()方法，可以看到下图右侧所示的AOP实现效果：</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#asm工具"><span></span></a><a href="#asm%E5%B7%A5%E5%85%B7">#</a> ASM工具</h4>
<p>利用ASM手写字节码时，需要利用一系列visitXXXXInsn()方法来写对应的助记符，所以需要先将每一行源代码转化为一个个的助记符，然后通过ASM的语法转换为visitXXXXInsn()这种写法。第一步将源码转化为助记符就已经够麻烦了，不熟悉字节码操作集合的话，需要我们将代码编译后再反编译，才能得到源代码对应的助记符。第二步利用ASM写字节码时，如何传参也很令人头疼。ASM社区也知道这两个问题，所以提供了工具<a href="https://plugins.jetbrains.com/plugin/5918-asm-bytecode-outline" target="_blank" rel="noopener noreferrer">ASM ByteCode Outline在新窗口打开</a>。</p>
<p>安装后，右键选择“Show Bytecode Outline”，在新标签页中选择“ASMified”这个tab，如图19所示，就可以看到这个类中的代码对应的ASM写法了。图中上下两个红框分别对应AOP中的前置逻辑于后置逻辑，将这两块直接复制到visitor中的visitMethod()以及visitInsn()方法中，就可以了。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#javassist"><span></span></a><a href="#javassist">#</a> Javassist</h3>
<p>ASM是在指令层次上操作字节码的，阅读上文后，我们的直观感受是在指令层次上操作字节码的框架实现起来比较晦涩。故除此之外，我们再简单介绍另外一类框架：强调源代码层次操作字节码的框架Javassist。</p>
<p>利用Javassist实现字节码增强时，可以无须关注字节码刻板的结构，其优点就在于编程简单。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构或者动态生成类。其中最重要的是ClassPool、CtClass、CtMethod、CtField这四个类：</p>
<ul>
<li>CtClass（compile-time class）：编译时类信息，它是一个class文件在代码中的抽象表现形式，可以通过一个类的全限定名来获取一个CtClass对象，用来表示这个类文件。</li>
<li>ClassPool：从开发视角来看，ClassPool是一张保存CtClass信息的HashTable，key为类名，value为类名对应的CtClass对象。当我们需要对某个类进行修改时，就是通过pool.getCtClass(“className”)方法从pool中获取到相应的CtClass。</li>
<li>CtMethod、CtField：这两个比较好理解，对应的是类中的方法和属性。</li>
</ul>
<p>了解这四个类后，我们可以写一个小Demo来展示Javassist简单、快速的特点。我们依然是对Base中的process()方法做增强，在方法调用前后分别输出”start”和”end”，实现代码如下。我们需要做的就是从pool中获取到相应的CtClass对象和其中的方法，然后执行method.insertBefore和insertAfter方法，参数为要插入的Java代码，再以字符串的形式传入即可，实现起来也极为简单。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> com.meituan.mtrace.agent.javassist.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> JavassistTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> NotFoundException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> CannotCompileException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IllegalAccessException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> InstantiationException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ClassPool</span><span style="color:#E06C75"> cp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ClassPool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDefault</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        CtClass</span><span style="color:#E06C75"> cc</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cp</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"meituan.bytecode.javassist.Base"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        CtMethod</span><span style="color:#E06C75"> m</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertBefore</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">start</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertAfter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">end</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Class</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toClass</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeFile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/Users/zen/projects"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Base</span><span style="color:#E06C75"> h</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Base)</span><span style="color:#E5C07B">c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        h</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#运行时类的重载"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E9%87%8D%E8%BD%BD">#</a> 运行时类的重载</h2>
<h3><a class="header-anchor" href="#问题引出"><span></span></a><a href="#%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA">#</a> 问题引出</h3>
<p>上一章重点介绍了两种不同类型的字节码操作框架，且都利用它们实现了较为粗糙的AOP。其实，为了方便大家理解字节码增强技术，在上文中我们避重就轻将ASM实现AOP的过程分为了两个main方法：第一个是利用MyClassVisitor对已编译好的class文件进行修改，第二个是new对象并调用。这期间并不涉及到JVM运行时对类的重加载，而是在第一个main方法中，通过ASM对已编译类的字节码进行替换，在第二个main方法中，直接使用已替换好的新类信息。另外在Javassist的实现中，我们也只加载了一次Base类，也不涉及到运行时重加载类。</p>
<p>如果我们在一个JVM中，先加载了一个类，然后又对其进行字节码增强并重新加载会发生什么呢？模拟这种情况，只需要我们在上文中Javassist的Demo中main()方法的第一行添加Base b=new Base()，即在增强前就先让JVM加载Base类，然后在执行到c.toClass()方法时会抛出错误，如下图20所示。跟进c.toClass()方法中，我们会发现它是在最后调用了ClassLoader的native方法defineClass()时报错。也就是说，JVM是不允许在运行时动态重载一个类的。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>显然，如果只能在类加载前对类进行强化，那字节码增强技术的使用场景就变得很窄了。我们期望的效果是：在一个持续运行并已经加载了所有类的JVM中，还能利用字节码增强技术对其中的类行为做替换并重新加载。为了模拟这种情况，我们将Base类做改写，在其中编写main方法，每五秒调用一次process()方法，在process()方法中输出一行“process”。</p>
<p>我们的目的就是，在JVM运行中的时候，将process()方法做替换，在其前后分别打印“start”和“end”。也就是在运行中时，每五秒打印的内容由”process”变为打印”start process end”。那如何解决JVM不允许运行时重加载类信息的问题呢？为了达到这个目的，我们接下来一一来介绍需要借助的Java类库。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.lang.management.ManagementFactory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Base</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> name</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ManagementFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getRuntimeMXBean</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> s</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">split</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"@"</span><span style="color:#ABB2BF">)[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //打印当前Pid</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pid:"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">s);</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">5000L</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#61AFEF">            process</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> process</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#instrument"><span></span></a><a href="#instrument">#</a> Instrument</h3>
<p>instrument是JVM提供的一个可以修改已加载类的类库，专门为Java语言编写的插桩服务提供支持。它需要依赖JVMTI的Attach API机制实现，JVMTI这一部分，我们将在下一小节进行介绍。在JDK 1.6以前，instrument只能在JVM刚启动开始加载类时生效，而在JDK 1.6之后，instrument支持了在运行时对类定义的修改。要使用instrument的类修改功能，我们需要实现它提供的ClassFileTransformer接口，定义一个类文件转换器。接口中的transform()方法会在类文件被加载时调用，而在transform方法里，我们可以利用上文中的ASM或Javassist对传入的字节码进行改写或替换，生成新的字节码数组后返回。</p>
<p>我们定义一个实现了ClassFileTransformer接口的类TestTransformer，依然在其中利用Javassist对Base类中的process()方法进行增强，在前后分别打印“start”和“end”，代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.lang.instrument.ClassFileTransformer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestTransformer</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> ClassFileTransformer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] transform</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#E06C75;font-style:italic"> loader</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> className</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">classBeingRedefined</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ProtectionDomain</span><span style="color:#E06C75;font-style:italic"> protectionDomain</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">classfileBuffer</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Transforming "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> className);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            ClassPool</span><span style="color:#E06C75"> cp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ClassPool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDefault</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            CtClass</span><span style="color:#E06C75"> cc</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cp</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"meituan.bytecode.jvmti.Base"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            CtMethod</span><span style="color:#E06C75"> m</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertBefore</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">start</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertAfter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">end</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toBytecode</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在有了Transformer，那么它要如何注入到正在运行的JVM呢？还需要定义一个Agent，借助Agent的能力将Instrument注入到JVM中。我们将在下一小节介绍Agent，现在要介绍的是Agent中用到的另一个类Instrumentation。在JDK 1.6之后，Instrumentation可以做启动后的Instrument、本地代码（Native Code）的Instrument，以及动态改变Classpath等等。我们可以向Instrumentation中添加上文中定义的Transformer，并指定要被重加载的类，代码如下所示。这样，当Agent被Attach到一个JVM中时，就会执行类字节码替换并重载入JVM的操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.lang.instrument.Instrumentation</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestAgent</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> agentmain</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Instrumentation</span><span style="color:#E06C75;font-style:italic"> inst</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //指定我们自己定义的Transformer，在其中利用Javassist做字节码替换</span></span>
<span class="line"><span style="color:#E5C07B">        inst</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addTransformer</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> TestTransformer</span><span style="color:#ABB2BF">(), </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //重定义类并载入新的字节码</span></span>
<span class="line"><span style="color:#E5C07B">            inst</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">retransformClasses</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Base</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Agent Load Done."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"agent load failed!"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#jvmti-agent-attach-api"><span></span></a><a href="#jvmti-agent-attach-api">#</a> JVMTI &amp; Agent &amp; Attach API</h3>
<p>上一小节中，我们给出了Agent类的代码，追根溯源需要先介绍JPDA（Java Platform Debugger Architecture）。如果JVM启动时开启了JPDA，那么类是允许被重新加载的。在这种情况下，已被加载的旧版本类信息可以被卸载，然后重新加载新版本的类。正如JDPA名称中的Debugger，JDPA其实是一套用于调试Java程序的标准，任何JDK都必须实现该标准。</p>
<p>JPDA定义了一整套完整的体系，它将调试体系分为三部分，并规定了三者之间的通信接口。三部分由低到高分别是Java 虚拟机工具接口（JVMTI），Java 调试协议（JDWP）以及 Java 调试接口（JDI），三者之间的关系如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>现在回到正题，我们可以借助JVMTI的一部分能力，帮助动态重载类信息。JVM TI（JVM TOOL INTERFACE，JVM工具接口）是JVM提供的一套对JVM进行操作的工具接口。通过JVMTI，可以实现对JVM的多种操作，它通过接口注册各种事件勾子，在JVM事件触发时，同时触发预定义的勾子，以实现对各个JVM事件的响应，事件包括类文件加载、异常产生与捕获、线程启动和结束、进入和退出临界区、成员变量修改、GC开始和结束、方法调用进入和退出、临界区竞争与等待、VM启动与退出等等。</p>
<p>而Agent就是JVMTI的一种实现，Agent有两种启动方式，一是随Java进程启动而启动，经常见到的java -agentlib就是这种方式；二是运行时载入，通过attach API，将模块（jar包）动态地Attach到指定进程id的Java进程内。</p>
<p>Attach API 的作用是提供JVM进程间通信的能力，比如说我们为了让另外一个JVM进程把线上服务的线程Dump出来，会运行jstack或jmap的进程，并传递pid的参数，告诉它要对哪个进程进行线程Dump，这就是Attach API做的事情。在下面，我们将通过Attach API的loadAgent()方法，将打包好的Agent jar包动态Attach到目标JVM上。具体实现起来的步骤如下：</p>
<ul>
<li>定义Agent，并在其中实现AgentMain方法，如上一小节中定义的代码块7中的TestAgent类；</li>
<li>然后将TestAgent类打成一个包含MANIFEST.MF的jar包，其中MANIFEST.MF文件中将Agent-Class属性指定为TestAgent的全限定名，如下图所示；</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>最后利用Attach API，将我们打包好的jar包Attach到指定的JVM pid上，代码如下：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> com.sun.tools.attach.VirtualMachine</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Attacher</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> AttachNotSupportedException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AgentLoadException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AgentInitializationException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 传入目标 JVM pid</span></span>
<span class="line"><span style="color:#E5C07B">        VirtualMachine</span><span style="color:#E06C75"> vm</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> VirtualMachine</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">attach</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"39333"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        vm</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadAgent</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/Users/zen/operation_server_jar/operation-server.jar"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>由于在MANIFEST.MF中指定了Agent-Class，所以在Attach后，目标JVM在运行时会走到TestAgent类中定义的agentmain()方法，而在这个方法中，我们利用Instrumentation，将指定类的字节码通过定义的类转化器TestTransformer做了Base类的字节码替换（通过javassist），并完成了类的重新加载。由此，我们达成了“在JVM运行时，改变类的字节码并重新载入类信息”的目的。</li>
</ul>
<p>以下为运行时重新载入类的效果：先运行Base中的main()方法，启动一个JVM，可以在控制台看到每隔五秒输出一次”process”。接着执行Attacher中的main()方法，并将上一个JVM的pid传入。此时回到上一个main()方法的控制台，可以看到现在每隔五秒输出”process”前后会分别输出”start”和”end”，也就是说完成了运行时的字节码增强，并重新载入了这个类。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#使用场景"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 使用场景</h3>
<p>至此，字节码增强技术的可使用范围就不再局限于JVM加载类前了。通过上述几个类库，我们可以在运行时对JVM中的类进行修改并重载了。通过这种手段，可以做的事情就变得很多了：</p>
<ul>
<li>热部署：不部署服务而对线上服务做修改，可以做打点、增加日志等操作。</li>
<li>Mock：测试时候对某些服务做Mock。</li>
<li>性能诊断工具：比如bTrace就是利用Instrument，实现无侵入地跟踪一个正在运行的JVM，监控到类和方法级别的状态信息。</li>
</ul>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>字节码增强技术相当于是一把打开运行时JVM的钥匙，利用它可以动态地对运行中的程序做修改，也可以跟踪JVM运行中程序的状态。此外，我们平时使用的动态代理、AOP也与字节码增强密切相关，它们实质上还是利用各种手段生成符合规范的字节码文件。综上所述，掌握字节码增强后可以高效地定位并快速修复一些棘手的问题（如线上性能问题、方法出现不可控的出入参需要紧急加日志等问题），也可以在开发中减少冗余代码，大大提高开发效率。</p>
<h2><a class="header-anchor" href="#参考文献"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">#</a> 参考文献</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之类字节码详解</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之类字节码详解</source>
      <description>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行。 JVM 基础之类字节码详解 多语言编译为字节码在JVM运行 Java字节码文件 Class文件的结构属性 从一个例子开始 反编译字节码文件 字节码文件信息 常量池 方法表集合 类名 再看两个示例 分析try-catch-finally kotlin 函数扩展的实现 参考文章 # ...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行。</p>
</blockquote>
<ul>
<li>JVM 基础之类字节码详解
<ul>
<li><a href="#%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E4%B8%BA%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8jvm%E8%BF%90%E8%A1%8C">多语言编译为字节码在JVM运行</a></li>
<li>Java字节码文件
<ul>
<li><a href="#class%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E5%B1%9E%E6%80%A7">Class文件的结构属性</a></li>
<li><a href="#%E4%BB%8E%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%BC%80%E5%A7%8B">从一个例子开始</a></li>
<li><a href="#%E5%8F%8D%E7%BC%96%E8%AF%91%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6">反编译字节码文件</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF">字节码文件信息</a></li>
<li><a href="#%E5%B8%B8%E9%87%8F%E6%B1%A0">常量池</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E8%A1%A8%E9%9B%86%E5%90%88">方法表集合</a></li>
<li><a href="#%E7%B1%BB%E5%90%8D">类名</a></li>
</ul>
</li>
<li>再看两个示例
<ul>
<li><a href="#%E5%88%86%E6%9E%90try-catch-finally">分析try-catch-finally</a></li>
<li><a href="#kotlin-%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95%E7%9A%84%E5%AE%9E%E7%8E%B0">kotlin 函数扩展的实现</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#多语言编译为字节码在jvm运行"><span></span></a><a href="#%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E4%B8%BA%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8jvm%E8%BF%90%E8%A1%8C">#</a> 多语言编译为字节码在JVM运行</h2>
<p>计算机是不能直接运行java代码的，必须要先运行java虚拟机，再由java虚拟机运行编译后的java代码。这个编译后的java代码，就是本文要介绍的java字节码。</p>
<p>为什么jvm不能直接运行java代码呢，这是因为在cpu层面看来计算机中所有的操作都是一个个指令的运行汇集而成的，java是高级语言，只有人类才能理解其逻辑，计算机是无法识别的，所以java代码必须要先编译成字节码文件，jvm才能正确识别代码转换后的指令并将其运行。</p>
<ul>
<li>Java代码间接翻译成字节码，储存字节码的文件再交由运行于不同平台上的JVM虚拟机去读取执行，从而实现一次编写，到处运行的目的。</li>
<li>JVM也不再只支持Java，由此衍生出了许多基于JVM的编程语言，如Groovy, Scala, Koltin等等。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-class-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#java字节码文件"><span></span></a><a href="#java%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6">#</a> Java字节码文件</h2>
<p>class文件本质上是一个以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑的排列在class文件中。jvm根据其特定的规则解析该二进制数据，从而得到相关信息。</p>
<p>Class文件采用一种伪结构来存储数据，它有两种类型：无符号数和表。这里暂不详细的讲。</p>
<p>本文将通过简单的java例子编译后的文件来理解。</p>
<h3><a class="header-anchor" href="#class文件的结构属性"><span></span></a><a href="#class%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E5%B1%9E%E6%80%A7">#</a> Class文件的结构属性</h3>
<p>在理解之前先从整体看下java字节码文件包含了哪些类型的数据：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-class-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#从一个例子开始"><span></span></a><a href="#%E4%BB%8E%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%BC%80%E5%A7%8B">#</a> 从一个例子开始</h3>
<p>下面以一个简单的例子来逐步讲解字节码。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//Main.java</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Main</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> inc</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> m </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以下命令, 可以在当前所在路径下生成一个Main.class文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">javac</span><span style="color:#98C379"> Main.java</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以文本的形式打开生成的class文件，内容如下:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">cafe</span><span style="color:#98C379"> babe</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0034</span><span style="color:#D19A66"> 0013</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">a00</span><span style="color:#D19A66"> 0400</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">f09</span></span>
<span class="line"><span style="color:#61AFEF">0003</span><span style="color:#D19A66"> 0010</span><span style="color:#D19A66"> 0700</span><span style="color:#D19A66"> 1107</span><span style="color:#D19A66"> 0012</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 016</span><span style="color:#98C379">d</span><span style="color:#D19A66"> 0100</span></span>
<span class="line"><span style="color:#61AFEF">0149</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 063</span><span style="color:#98C379">c</span><span style="color:#D19A66"> 696</span><span style="color:#98C379">e</span><span style="color:#D19A66"> 6974</span><span style="color:#D19A66"> 3</span><span style="color:#98C379">e01</span><span style="color:#D19A66"> 0003</span><span style="color:#D19A66"> 2829</span></span>
<span class="line"><span style="color:#61AFEF">5601</span><span style="color:#D19A66"> 0004</span><span style="color:#D19A66"> 436</span><span style="color:#98C379">f</span><span style="color:#D19A66"> 6465</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">f4c</span><span style="color:#D19A66"> 696</span><span style="color:#98C379">e</span><span style="color:#D19A66"> 654</span><span style="color:#98C379">e</span></span>
<span class="line"><span style="color:#61AFEF">756d</span><span style="color:#D19A66"> 6265</span><span style="color:#D19A66"> 7254</span><span style="color:#D19A66"> 6162</span><span style="color:#D19A66"> 6</span><span style="color:#98C379">c65</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0369</span><span style="color:#D19A66"> 6</span><span style="color:#98C379">e63</span></span>
<span class="line"><span style="color:#61AFEF">0100</span><span style="color:#D19A66"> 0328</span><span style="color:#D19A66"> 2949</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">a53</span><span style="color:#D19A66"> 6</span><span style="color:#98C379">f75</span><span style="color:#D19A66"> 7263</span><span style="color:#D19A66"> 6546</span></span>
<span class="line"><span style="color:#61AFEF">696c</span><span style="color:#D19A66"> 6501</span><span style="color:#D19A66"> 0009</span><span style="color:#D19A66"> 4</span><span style="color:#98C379">d61</span><span style="color:#D19A66"> 696</span><span style="color:#98C379">e</span><span style="color:#D19A66"> 2</span><span style="color:#98C379">e6a</span><span style="color:#D19A66"> 6176</span><span style="color:#D19A66"> 610</span><span style="color:#98C379">c</span></span>
<span class="line"><span style="color:#61AFEF">0007</span><span style="color:#D19A66"> 0008</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">c00</span><span style="color:#D19A66"> 0500</span><span style="color:#D19A66"> 0601</span><span style="color:#D19A66"> 0010</span><span style="color:#D19A66"> 636</span><span style="color:#98C379">f</span><span style="color:#D19A66"> 6</span><span style="color:#98C379">d2f</span></span>
<span class="line"><span style="color:#61AFEF">7268</span><span style="color:#D19A66"> 7974</span><span style="color:#D19A66"> 686</span><span style="color:#98C379">d</span><span style="color:#D19A66"> 372</span><span style="color:#98C379">f</span><span style="color:#D19A66"> 4</span><span style="color:#98C379">d61</span><span style="color:#D19A66"> 696</span><span style="color:#98C379">e</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 106</span><span style="color:#98C379">a</span></span>
<span class="line"><span style="color:#61AFEF">6176</span><span style="color:#D19A66"> 612</span><span style="color:#98C379">f</span><span style="color:#D19A66"> 6</span><span style="color:#98C379">c61</span><span style="color:#D19A66"> 6</span><span style="color:#98C379">e67</span><span style="color:#D19A66"> 2</span><span style="color:#98C379">f4f</span><span style="color:#D19A66"> 626</span><span style="color:#98C379">a</span><span style="color:#D19A66"> 6563</span><span style="color:#D19A66"> 7400</span></span>
<span class="line"><span style="color:#61AFEF">2100</span><span style="color:#D19A66"> 0300</span><span style="color:#D19A66"> 0400</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0200</span><span style="color:#D19A66"> 0500</span><span style="color:#D19A66"> 0600</span></span>
<span class="line"><span style="color:#61AFEF">0000</span><span style="color:#D19A66"> 0200</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0700</span><span style="color:#D19A66"> 0800</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0900</span><span style="color:#D19A66"> 0000</span></span>
<span class="line"><span style="color:#61AFEF">1d00</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 052</span><span style="color:#98C379">a</span><span style="color:#98C379"> b700</span><span style="color:#D19A66"> 01</span><span style="color:#98C379">b1</span><span style="color:#D19A66"> 0000</span></span>
<span class="line"><span style="color:#61AFEF">0001</span><span style="color:#D19A66"> 000</span><span style="color:#98C379">a</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0006</span><span style="color:#D19A66"> 0001</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0003</span><span style="color:#D19A66"> 0001</span></span>
<span class="line"><span style="color:#61AFEF">000b</span><span style="color:#D19A66"> 000</span><span style="color:#98C379">c</span><span style="color:#D19A66"> 0001</span><span style="color:#D19A66"> 0009</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 001</span><span style="color:#98C379">f</span><span style="color:#D19A66"> 0002</span><span style="color:#D19A66"> 0001</span></span>
<span class="line"><span style="color:#61AFEF">0000</span><span style="color:#D19A66"> 0007</span><span style="color:#D19A66"> 2</span><span style="color:#98C379">ab4</span><span style="color:#D19A66"> 0002</span><span style="color:#D19A66"> 0460</span><span style="color:#98C379"> ac00</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0100</span></span>
<span class="line"><span style="color:#61AFEF">0a00</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0600</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0800</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">d00</span></span>
<span class="line"><span style="color:#61AFEF">0000</span><span style="color:#D19A66"> 0200</span><span style="color:#D19A66"> 0</span><span style="color:#98C379">e</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>文件开头的4个字节("cafe babe")称之为 <code>魔数</code>，唯有以"cafe babe"开头的class文件方可被虚拟机所接受，这4个字节就是字节码文件的身份识别。</li>
<li>0000是编译器jdk版本的次版本号0，0034转化为十进制是52,是主版本号，java的版本号从45开始，除1.0和1.1都是使用45.x外,以后每升一个大版本，版本号加一。也就是说，编译生成该class文件的jdk版本为1.8.0。</li>
</ul>
<p>通过java -version命令稍加验证, 可得结果。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">Java</span><span style="color:#E06C75">(TM) </span><span style="color:#E5C07B">SE</span><span style="color:#E5C07B"> Runtime</span><span style="color:#61AFEF"> Environment</span><span style="color:#E06C75"> (build </span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_131</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b11)</span></span>
<span class="line"><span style="color:#E5C07B">Java</span><span style="color:#61AFEF"> HotSpot</span><span style="color:#E06C75">(TM) </span><span style="color:#D19A66">64</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">Bit</span><span style="color:#E5C07B"> Server</span><span style="color:#61AFEF"> VM</span><span style="color:#E06C75"> (build </span><span style="color:#D19A66">25.131</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b11</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mixed mode)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>继续往下是常量池... 知道是这么分析的就可以了，然后我们通过工具反编译字节码文件继续去看。</p>
<h3><a class="header-anchor" href="#反编译字节码文件"><span></span></a><a href="#%E5%8F%8D%E7%BC%96%E8%AF%91%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6">#</a> 反编译字节码文件</h3>
<blockquote>
<p>使用到java内置的一个反编译工具javap可以反编译字节码文件, 用法: <code>javap &lt;options&gt; &lt;classes&gt;</code></p>
</blockquote>
<p>其中<code>&lt;options&gt;</code>选项包括:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">  -help</span><span style="color:#D19A66">  --help</span><span style="color:#D19A66">  -</span><span style="color:#ABB2BF">?</span><span style="color:#98C379">        输出此用法消息</span></span>
<span class="line"><span style="color:#61AFEF">  -version</span><span style="color:#98C379">                 版本信息</span></span>
<span class="line"><span style="color:#61AFEF">  -v</span><span style="color:#D19A66">  -verbose</span><span style="color:#98C379">             输出附加信息</span></span>
<span class="line"><span style="color:#61AFEF">  -l</span><span style="color:#98C379">                       输出行号和本地变量表</span></span>
<span class="line"><span style="color:#61AFEF">  -public</span><span style="color:#98C379">                  仅显示公共类和成员</span></span>
<span class="line"><span style="color:#61AFEF">  -protected</span><span style="color:#98C379">               显示受保护的/公共类和成员</span></span>
<span class="line"><span style="color:#61AFEF">  -package</span><span style="color:#98C379">                 显示程序包/受保护的/公共类</span></span>
<span class="line"><span style="color:#61AFEF">                           和成员</span><span style="color:#ABB2BF"> (默认)</span></span>
<span class="line"><span style="color:#61AFEF">  -p</span><span style="color:#D19A66">  -private</span><span style="color:#98C379">             显示所有类和成员</span></span>
<span class="line"><span style="color:#61AFEF">  -c</span><span style="color:#98C379">                       对代码进行反汇编</span></span>
<span class="line"><span style="color:#61AFEF">  -s</span><span style="color:#98C379">                       输出内部类型签名</span></span>
<span class="line"><span style="color:#61AFEF">  -sysinfo</span><span style="color:#98C379">                 显示正在处理的类的</span></span>
<span class="line"><span style="color:#61AFEF">                           系统信息</span><span style="color:#ABB2BF"> (路径, </span><span style="color:#98C379">大小,</span><span style="color:#98C379"> 日期,</span><span style="color:#98C379"> MD5</span><span style="color:#98C379"> 散列</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">  -constants</span><span style="color:#98C379">               显示最终常量</span></span>
<span class="line"><span style="color:#61AFEF">  -classpath</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pat</span><span style="color:#ABB2BF">h&gt;        </span><span style="color:#98C379">指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#61AFEF">  -cp</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pat</span><span style="color:#ABB2BF">h&gt;               </span><span style="color:#98C379">指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#61AFEF">  -bootclasspath</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pat</span><span style="color:#ABB2BF">h&gt;    </span><span style="color:#98C379">覆盖引导类文件的位置</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入命令<code>javap -verbose -p Main.class</code>查看输出内容:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">Classfile </span><span style="color:#56B6C2">/</span><span style="color:#E06C75">E</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaCode</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">TestProj</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">out</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">production</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">TestProj</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">com</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">rhythm7</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">Main</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span></span>
<span class="line"><span style="color:#E5C07B">  Last</span><span style="color:#E06C75"> modified </span><span style="color:#D19A66">2018</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">4</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> size </span><span style="color:#D19A66">362</span><span style="color:#E06C75"> bytes</span></span>
<span class="line"><span style="color:#E5C07B">  MD5</span><span style="color:#E06C75"> checksum 4aed8540b098992663b7ba08c65312de</span></span>
<span class="line"><span style="color:#E5C07B">  Compiled</span><span style="color:#E06C75"> from </span><span style="color:#98C379">"Main.java"</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.rhythm7.Main</span></span>
<span class="line"><span style="color:#E06C75">  minor version: 0</span></span>
<span class="line"><span style="color:#E06C75">  major version: 52</span></span>
<span class="line"><span style="color:#E06C75">  flags: ACC_PUBLIC, ACC_SUPER</span></span>
<span class="line"><span style="color:#E06C75">Constant pool:</span></span>
<span class="line"><span style="color:#E06C75">   #1 = Methodref          #4.#18         </span><span style="color:#7F848E;font-style:italic">// java/lang/Object."&lt;init&gt;":()V</span></span>
<span class="line"><span style="color:#E06C75">   #2 = Fieldref           #3.#19         </span><span style="color:#7F848E;font-style:italic">// com/rhythm7/Main.m:I</span></span>
<span class="line"><span style="color:#E06C75">   #3 = Class              #20            </span><span style="color:#7F848E;font-style:italic">// com/rhythm7/Main</span></span>
<span class="line"><span style="color:#E06C75">   #4 = Class              #21            </span><span style="color:#7F848E;font-style:italic">// java/lang/Object</span></span>
<span class="line"><span style="color:#E06C75">   #5 = Utf8               m</span></span>
<span class="line"><span style="color:#E06C75">   #6 = Utf8               I</span></span>
<span class="line"><span style="color:#E06C75">   #7 = Utf8               </span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">init</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#E06C75">   #8 = Utf8               ()V</span></span>
<span class="line"><span style="color:#E06C75">   #9 = Utf8               Code</span></span>
<span class="line"><span style="color:#E06C75">  #10 = Utf8               LineNumberTable</span></span>
<span class="line"><span style="color:#E06C75">  #11 = Utf8               LocalVariableTable</span></span>
<span class="line"><span style="color:#E06C75">  #12 = Utf8               this</span></span>
<span class="line"><span style="color:#E06C75">  #13 = Utf8               Lcom/rhythm7/Main;</span></span>
<span class="line"><span style="color:#E06C75">  #14 = Utf8               inc</span></span>
<span class="line"><span style="color:#E06C75">  #15 = Utf8               ()I</span></span>
<span class="line"><span style="color:#E06C75">  #16 = Utf8               SourceFile</span></span>
<span class="line"><span style="color:#E06C75">  #17 = Utf8               Main.java</span></span>
<span class="line"><span style="color:#E06C75">  #18 = NameAndType        #7:#8          </span><span style="color:#7F848E;font-style:italic">// "&lt;init&gt;":()V</span></span>
<span class="line"><span style="color:#E06C75">  #19 = NameAndType        #5:#6          </span><span style="color:#7F848E;font-style:italic">// m:I</span></span>
<span class="line"><span style="color:#E06C75">  #20 = Utf8               com/rhythm7/Main</span></span>
<span class="line"><span style="color:#E06C75">  #21 = Utf8               java/lang/Object</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    descriptor</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> I</span></span>
<span class="line"><span style="color:#E06C75">    flags</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> ACC_PRIVATE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> com.rhythm7.Main</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">    descriptor: ()V</span></span>
<span class="line"><span style="color:#61AFEF">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#61AFEF">    Code:</span></span>
<span class="line"><span style="color:#61AFEF">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#61AFEF">         0: aload_0</span></span>
<span class="line"><span style="color:#61AFEF">         1: invokespecial #1                  </span><span style="color:#7F848E;font-style:italic">// Method java/lang/Object."&lt;init&gt;":()V</span></span>
<span class="line"><span style="color:#61AFEF">         4: return</span></span>
<span class="line"><span style="color:#61AFEF">      LineNumberTable:</span></span>
<span class="line"><span style="color:#61AFEF">        line 3: 0</span></span>
<span class="line"><span style="color:#61AFEF">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#61AFEF">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#61AFEF">            0       5     0  this   Lcom/rhythm7/Main</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> inc</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">    descriptor: ()I</span></span>
<span class="line"><span style="color:#61AFEF">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#61AFEF">    Code:</span></span>
<span class="line"><span style="color:#61AFEF">      stack=2, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#61AFEF">         0: aload_0</span></span>
<span class="line"><span style="color:#61AFEF">         1: getfield      #2                  </span><span style="color:#7F848E;font-style:italic">// Field m:I</span></span>
<span class="line"><span style="color:#61AFEF">         4: iconst_1</span></span>
<span class="line"><span style="color:#61AFEF">         5: iadd</span></span>
<span class="line"><span style="color:#61AFEF">         6: ireturn</span></span>
<span class="line"><span style="color:#61AFEF">      LineNumberTable:</span></span>
<span class="line"><span style="color:#61AFEF">        line 8: 0</span></span>
<span class="line"><span style="color:#61AFEF">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#61AFEF">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#61AFEF">            0       7     0  this   Lcom/rhythm7/Main</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#E06C75">SourceFile</span><span style="color:#C678DD">:</span><span style="color:#98C379"> "Main.java"</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#字节码文件信息"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF">#</a> 字节码文件信息</h3>
<p>开头的7行信息包括:Class文件当前所在位置，最后修改时间，文件大小，MD5值，编译自哪个文件，类的全限定名，jdk次版本号，主版本号。</p>
<p>然后紧接着的是该类的访问标志：ACC_PUBLIC, ACC_SUPER，访问标志的含义如下:</p>
<p>| 标志名称       | 标志值 | 含义                                                         |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-class-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 相关知识体系详解</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 相关知识体系详解</source>
      <description>本系列将给大家构建JVM核心知识点全局知识体系。 JVM 相关知识体系详解 知识体系 学习要点 参考文章 # 知识体系 imgimg # 学习要点 不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本系列将给大家构建JVM核心知识点全局知识体系。</p>
</blockquote>
<ul>
<li>JVM 相关知识体系详解
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li><a href="#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9">学习要点</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#学习要点"><span></span></a><a href="#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9">#</a> 学习要点</h2>
<blockquote>
<p>不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识点放到一张图里，帮助你理解。</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p><strong>A. Java进阶 - JVM相关 知识体系</strong>： 首先按照上述<code>学习思路</code>，理解总体知识点在全局上与知识体系之间的对应关系。</p>
</blockquote>
<ul>
<li><a href="">JVM 相关知识体系</a></li>
</ul>
<blockquote>
<p><strong>B. Java进阶 - JVM相关 类加载</strong>： 然后理解类字节码和类的加载机制。</p>
</blockquote>
<ul>
<li>JVM基础 - 类字节码详解
<ul>
<li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li>
</ul>
</li>
<li>JVM基础 - 字节码的增强技术
<ul>
<li>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。</li>
</ul>
</li>
<li>JVM基础 - Java 类加载机制
<ul>
<li>这篇文章将带你深入理解Java 类加载机制</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>C. Java进阶 - JVM相关 内存结构</strong>： 因为类字节码是加载到JVM内存结构中的，所以紧接着理解JVM内存结构。</p>
</blockquote>
<ul>
<li>JVM基础 - JVM内存结构
<ul>
<li>本文主要对JVM 内存结构进行讲解，注意不要和Java内存模型混淆了</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>D. Java进阶 - JVM相关 JMM</strong>： 然后通过理解JVM与硬件之间的联系，理解Java 通过其内存模型保证数据线程安全等，这是JVM在并发上底层的支持。</p>
</blockquote>
<ul>
<li>JVM基础 - Java 内存模型引入
<ul>
<li>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</li>
</ul>
</li>
<li>JVM基础 - Java 内存模型详解
<ul>
<li>本文主要转载自 Info 上<a href="https://www.infoq.cn/article/java_memory_model/" target="_blank" rel="noopener noreferrer">深入理解Java内存模型在新窗口打开</a>, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>E. Java进阶 - JVM相关 GC</strong>： 再者理解下Java GC机制，如何回收内存等。</p>
</blockquote>
<ul>
<li>GC - Java 垃圾回收基础知识
<ul>
<li>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</li>
</ul>
</li>
<li>GC - Java 垃圾回收器之G1详解
<ul>
<li>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。</li>
</ul>
</li>
<li>GC - Java 垃圾回收器之ZGC详解
<ul>
<li>ZGC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于<strong>大内存低延迟</strong>服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章<a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC相关的知识体系</li>
</ul>
</li>
<li>GC - Java 垃圾回收器之CMS GC问题分析与解决
<ul>
<li>本文整理自<a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html" target="_blank" rel="noopener noreferrer">美团技术团队在新窗口打开</a>, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>F. Java进阶 - JVM相关 排错调优</strong>： 最后围绕着调试和排错，分析理解JVM调优参数，动态字节码技术及动态在线调试的原理；学会使用常用的调工具和在线动态调试工具等。</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-debug.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>调试排错 - JVM 调优参数
<ul>
<li>本文对JVM涉及的常见的调优参数和垃圾回收参数进行阐述</li>
</ul>
</li>
<li>调试排错 - Java 内存分析之堆内存和MetaSpace内存
<ul>
<li>本文以两个简单的例子(<code>堆内存溢出</code>和<code>MetaSpace (元数据) 内存溢出</code>）解释Java 内存溢出的分析过程</li>
</ul>
</li>
<li>调试排错 - Java 内存分析之堆外内存
<ul>
<li>Java 堆外内存分析相对来说是复杂的，美团技术团队的<a href="https://tech.meituan.com/2019/01/03/spring-boot-native-memory-leak.html" target="_blank" rel="noopener noreferrer">Spring Boot引起的“堆外内存泄漏”排查及经验总结在新窗口打开</a>可以为很多Native Code内存泄漏/占用提供方向性指引。</li>
</ul>
</li>
<li>调试排错 - Java 线程分析之线程Dump分析
<ul>
<li>Thread Dump是非常有用的诊断Java应用问题的工具。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之Linux命令
<ul>
<li>Java 在线问题排查之通过linux常用命令排查。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之工具单
<ul>
<li>Java 在线问题排查之通过java调试/排查工具进行问题定位。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之JVM可视化工具
<ul>
<li>本文主要梳理常见的JVM可视化的分析工具，主要包括JConsole, Visual VM, Vusial GC, JProfile 和 MAT等。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之应用在线调试Arthas
<ul>
<li>本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经1.7万个点赞了，深受开发者喜爱。具体解决在线问题，比如：</li>
<li>这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?</li>
<li>我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况?</li>
<li>有什么办法可以监控到JVM的实时运行状态?</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之使用IDEA本地调试和远程调试
<ul>
<li>Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化；并且在实际的排错过程中，还会用到Remote Debug。IDEA 相比 Eclipse/STS效率更高，本文主要介绍基于IDEA的Debug和Remote Debug的技巧。</li>
</ul>
</li>
<li>调试排错 - Java动态调试技术原理
<ul>
<li>本文转载自 美团技术团队胡健的<a href="https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html" target="_blank" rel="noopener noreferrer">Java 动态调试技术原理及实践在新窗口打开</a>, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%AD%A6%E4%B9%A0%E6%96%87%E7%8C%AE">#</a> 参考文章</h2>
<ul>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5" target="_blank" rel="noopener noreferrer">Java虚拟机规范（Java SE 8）在新窗口打开</a></li>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf" target="_blank" rel="noopener noreferrer">JSR-133: JavaTM Memory Model and Thread Specification</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错之 JVM 调优参数</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20JVM%20%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20JVM%20%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错之 JVM 调优参数</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 内存分析之堆内存和MetaSpace内存</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8CMetaSpace%E5%86%85%E5%AD%98.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8CMetaSpace%E5%86%85%E5%AD%98.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 内存分析之堆内存和MetaSpace内存</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 内存分析之堆外内存</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 内存分析之堆外内存</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 线程分析之线程Dump分析</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%90%E4%B9%8B%E7%BA%BF%E7%A8%8BDump%E5%88%86%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%90%E4%B9%8B%E7%BA%BF%E7%A8%8BDump%E5%88%86%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 线程分析之线程Dump分析</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 问题排查之JVM可视化工具</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BJVM%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BJVM%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之JVM可视化工具</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 问题排查之Linux命令</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BLinux%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BLinux%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之Linux命令</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 问题排查之使用IDEA本地调试和远程调试</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E4%BD%BF%E7%94%A8IDEA%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E4%BD%BF%E7%94%A8IDEA%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之使用IDEA本地调试和远程调试</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 问题排查之工具单</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%B7%A5%E5%85%B7%E5%8D%95.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%B7%A5%E5%85%B7%E5%8D%95.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之工具单</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java 问题排查之应用在线调试Arthas</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%BA%94%E7%94%A8%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95Arthas.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%BA%94%E7%94%A8%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95Arthas.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之应用在线调试Arthas</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>调试排错 Java动态调试技术原理</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java动态调试技术原理</source>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
    </item>
    <item>
      <title>Java8 JRE精简</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JRE%E7%B2%BE%E7%AE%80.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JRE%E7%B2%BE%E7%AE%80.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 JRE精简</source>
      <description>理解Java8 JRE精简需理解几个问题: 为什么精简Java8 JRE，及好处是啥? 在不同平台上如何编译等? Java8 JRE精简 JRE精简好处 概念 使用工具开发的效果 JDEPS工具使用 在linux上构建profile 编译后compact大致的占用空间 总结 Oracle公司如期发布了Java 8正式版！没有让广大javaer失望。对于...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java8 JRE精简需理解几个问题:</p>
<ul>
<li>为什么精简Java8 JRE，及好处是啥?</li>
<li>在不同平台上如何编译等?</li>
</ul>
</blockquote>
<ul>
<li>Java8 JRE精简
<ul>
<li><a href="#jre%E7%B2%BE%E7%AE%80%E5%A5%BD%E5%A4%84">JRE精简好处</a></li>
<li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li>
<li>使用工具开发的效果
<ul>
<li><a href="#jdeps%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8">JDEPS工具使用</a></li>
<li><a href="#%E5%9C%A8linux%E4%B8%8A%E6%9E%84%E5%BB%BAprofile">在linux上构建profile</a></li>
<li><a href="#%E7%BC%96%E8%AF%91%E5%90%8Ecompact%E5%A4%A7%E8%87%B4%E7%9A%84%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4">编译后compact大致的占用空间</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<p>Oracle公司如期发布了Java 8正式版！没有让广大javaer失望。对于一个人来说，18岁是人生的转折点，从稚嫩走向成熟，法律意味着你是完全民事行为能力人，不再收益于未成年人保护法，到今年为止，java也走过了18年，java8是一个新的里程碑，带来了前所未有的诸多特性，lambda表达式，Stream API，新的Date time api，多核并发支持，重大安全问题改进等，相信java会越来越好，丰富的类库以及庞大的开源生态环境是其他语言所不具备的，说起丰富的类库，很多同学就吐槽了，java该减肥了，确实是该减肥，java8有个很好的特性，即JEP161(http://openjdk.java.net/jeps/161 ),该特性定义了Java SE平台规范的一些子集，使java应用程序不需要整个JRE平台即可部署和运行在小型设备上。开发人员可以基于目标硬件的可用资源选择一个合适的JRE运行环境。</p>
<h2><a class="header-anchor" href="#jre精简好处"><span></span></a><a href="#jre%E7%B2%BE%E7%AE%80%E5%A5%BD%E5%A4%84">#</a> JRE精简好处</h2>
<ul>
<li>更小的Java环境需要更少的计算资源。</li>
<li>一个较小的运行时环境可以更好的优化性能和启动时间。</li>
<li>消除未使用的代码从安全的角度总是好的。</li>
<li>这些打包的应用程序可以下载速度更快。</li>
</ul>
<h2><a class="header-anchor" href="#概念"><span></span></a><a href="#%E6%A6%82%E5%BF%B5">#</a> 概念</h2>
<p>紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是compact1&lt;compact2&lt;compact3,他们包含的API如下图所示</p>
<p>使用javac根据profile编译应用程序</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">javac</span><span style="color:#98C379"> –bootclasspath,</span><span style="color:#98C379"> or</span><span style="color:#98C379"> javac</span><span style="color:#98C379"> –profile</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果不符合compact的api，则报错。</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> javac</span><span style="color:#D19A66"> -profile</span><span style="color:#98C379"> compact2</span><span style="color:#98C379"> Test.java</span></span>
<span class="line"><span style="color:#61AFEF">Test.java:7:</span><span style="color:#98C379"> error:</span><span style="color:#98C379"> ThreadMXBean</span><span style="color:#98C379"> is</span><span style="color:#98C379"> not</span><span style="color:#98C379"> available</span><span style="color:#98C379"> in</span><span style="color:#98C379"> profile</span><span style="color:#98C379"> 'compact2'</span></span>
<span class="line"><span style="color:#61AFEF"> ThreadMXBean</span><span style="color:#98C379"> bean</span><span style="color:#98C379"> =</span><span style="color:#98C379"> ManagementFactory.getThreadMXBean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF"> ^</span></span>
<span class="line"><span style="color:#61AFEF">Test.java:7:</span><span style="color:#98C379"> error:</span><span style="color:#98C379"> ManagementFactory</span><span style="color:#98C379"> is</span><span style="color:#98C379"> not</span><span style="color:#98C379"> available</span><span style="color:#98C379"> in</span><span style="color:#98C379"> profile</span><span style="color:#98C379"> 'compact2'</span></span>
<span class="line"><span style="color:#61AFEF"> ThreadMXBean</span><span style="color:#98C379"> bean</span><span style="color:#98C379"> =</span><span style="color:#98C379"> ManagementFactory.getThreadMXBean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">                     ^</span></span>
<span class="line"><span style="color:#61AFEF">2</span><span style="color:#98C379"> errors</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jre-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#使用工具开发的效果"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E7%9A%84%E6%95%88%E6%9E%9C">#</a> 使用工具开发的效果</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jre-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#jdeps工具使用"><span></span></a><a href="#jdeps%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8">#</a> JDEPS工具使用</h3>
<p>java8新增一个工具，用来分析应用程序所依赖的profile，有三个参数比较常用 -p，-v，-r</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.Set</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.HashSet</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Deps</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">random</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">    Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">set</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#56B6C2">**************</span><span style="color:#E06C75"> PROFILE </span><span style="color:#56B6C2">********************</span></span>
<span class="line"><span style="color:#E06C75">jdeps </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">P</span><span style="color:#E5C07B"> Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#56B6C2">   &lt;</span><span style="color:#E06C75">unnamed</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#E06C75">                                            compact1</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          compact1</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          compact1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2">**************</span><span style="color:#E06C75"> VERBOSE </span><span style="color:#56B6C2">********************</span></span>
<span class="line"><span style="color:#E06C75">jdeps </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">v </span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#61AFEF">   Deps</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">PrintStream</span><span style="color:#E06C75">                                </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Math</span><span style="color:#E06C75">                                     </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">                                   </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">                                   </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">System</span><span style="color:#E06C75">                                   </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HashSet</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2">**************</span><span style="color:#E06C75"> RECURSIVE </span><span style="color:#56B6C2">********************</span></span>
<span class="line"><span style="color:#E06C75">jdeps </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">R</span><span style="color:#E5C07B"> Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#56B6C2">   &lt;</span><span style="color:#E06C75">unnamed</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#E06C75">                                            </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#56B6C2">/</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#E5C07B">   javax</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">crypto</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#E06C75">                                            </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reflect</span><span style="color:#E06C75">                                  </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">net</span><span style="color:#E06C75">                                           </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nio</span><span style="color:#E06C75">                                           </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cert</span><span style="color:#E06C75">                                 </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">spec</span><span style="color:#E06C75">                                 </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#E06C75">                               </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">regex</span><span style="color:#E06C75">                                    </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">zip</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">auth</span><span style="color:#E06C75">                                </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jca</span><span style="color:#E5C07B">                                   JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E5C07B">                                  JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">validator</span><span style="color:#E5C07B">                             JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">   javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">interfaces</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">math</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#E5C07B">   javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">spec</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">math</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">spec</span><span style="color:#E06C75">                                 </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#56B6C2">/</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#E5C07B">   java</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">security</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#E5C07B">                                       JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">   sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">util</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#E5C07B">                                       JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interfaces</span><span style="color:#E5C07B">                            JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">spec</span><span style="color:#E5C07B">                                  JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#在linux上构建profile"><span></span></a><a href="#%E5%9C%A8linux%E4%B8%8A%E6%9E%84%E5%BB%BAprofile">#</a> 在linux上构建profile</h3>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> hg</span><span style="color:#98C379"> clone</span><span style="color:#98C379"> http://hg.openjdk.java.net/jdk8/jdk8/</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> cd</span><span style="color:#98C379"> jdk8</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> make</span><span style="color:#98C379"> images</span><span style="color:#98C379"> profiles</span><span style="color:#98C379"> :</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># Finished profiles (build time 00:00:27)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jre-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 JavaFx 2.0</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JavaFx%202.0.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JavaFx%202.0.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 JavaFx 2.0</source>
      <description>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。与android这方面确实有点相似性。@pdai Java8 JavaFx 2.0...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。与android这方面确实有点相似性。@pdai</p>
</blockquote>
<ul>
<li>Java8 JavaFx 2.0
<ul>
<li><a href="#javafx%E5%8E%86%E5%8F%B2">JavaFX历史</a></li>
<li>JavaFx8的新特性
<ul>
<li><a href="#%E5%85%A8%E6%96%B0%E7%8E%B0%E4%BB%A3%E4%B8%BB%E9%A2%98modena">全新现代主题: Modena</a></li>
<li><a href="#javafx-3d">JavaFX 3D</a></li>
<li><a href="#%E5%AF%8C%E6%96%87%E6%9C%AC">富文本</a></li>
<li><a href="#treetableview">TreeTableView</a></li>
<li><a href="#%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6datepicker">日期控件DatePicker</a></li>
<li><a href="#%E7%94%A8%E4%BA%8E-css-%E7%BB%93%E6%9E%84%E7%9A%84%E5%85%AC%E5%85%B1-api">用于 CSS 结构的公共 API</a></li>
<li><a href="#webview-%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD">WebView 增强功能</a></li>
<li><a href="#javafx-scene-builder-20">JavaFX Scene Builder 2.0</a></li>
</ul>
</li>
<li><a href="#javafx-8%E5%BC%80%E5%8F%912048%E6%B8%B8%E6%88%8F">JavaFX 8开发2048游戏</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#javafx历史"><span></span></a><a href="#javafx%E5%8E%86%E5%8F%B2">#</a> JavaFX历史</h2>
<p>跟java在服务器端和web端成绩相比，桌面一直是java的软肋，于是Sun公司在2008年推出JavaFX，弥补桌面软件的缺陷，请看下图JavaFX一路走过来的改进</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-javafx-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上图看出，一开始推出时候，开发者需使用一种名为JavaFX Script的静态的、声明式的编程语言来开发JavaFX应用程序。因为JavaFX Script将会被编译为Java bytecode，程序员可以使用Java代码代替。</p>
<p>JavaFX 2.0之后的版本摒弃了JavaFX Script语言，而作为一个Java API来使用。因此使用JavaFX平台实现的应用程序将直接通过标准Java代码来实现。</p>
<p>JavaFX 2.0 包含非常丰富的 UI 控件、图形和多媒体特性用于简化可视化应用的开发，WebView可直接在应用中嵌入网页；另外 2.0 版本允许使用 FXML 进行 UI 定义，这是一个脚本化基于 XML 的标识语言。</p>
<p>从JDK 7u6开始，JavaFx就与JDK捆绑在一起了，JavaFX团队称，下一个版本将是8.0，目前所有的工作都已经围绕8.0库进行。这是因为JavaFX将捆绑在Java 8中，因此该团队决定跳过几个版本号，迎头赶上Java 8。</p>
<h2><a class="header-anchor" href="#javafx8的新特性"><span></span></a><a href="#javafx8%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">#</a> JavaFx8的新特性</h2>
<h4><a class="header-anchor" href="#全新现代主题-modena"><span></span></a><a href="#%E5%85%A8%E6%96%B0%E7%8E%B0%E4%BB%A3%E4%B8%BB%E9%A2%98-modena">#</a> 全新现代主题: Modena</h4>
<p>新的Modena主题来替换原来的Caspian主题。不过在Application的start()方法中，可以通过setUserAgentStylesheet(STYLESHEET_CASPIAN)来继续使用Caspian主题。</p>
<p>参考http://fxexperience.com/2013/03/modena-theme-update/</p>
<h4><a class="header-anchor" href="#javafx-3d"><span></span></a><a href="#javafx-3d">#</a> JavaFX 3D</h4>
<p>在JavaFX8中提供了3D图像处理API，包括Shape3D (Box, Cylinder, MeshView, Sphere子类),SubScene, Material, PickResult, LightBase (AmbientLight 和PointLight子类),SceneAntialiasing等。Camera类也得到了更新。从JavaDoc中可以找到更多信息。</p>
<h4><a class="header-anchor" href="#富文本"><span></span></a><a href="#%E5%AF%8C%E6%96%87%E6%9C%AC">#</a> 富文本</h4>
<p>强化了富文本的支持</p>
<h4><a class="header-anchor" href="#treetableview"><span></span></a><a href="#treetableview">#</a> TreeTableView</h4>
<h4><a class="header-anchor" href="#日期控件datepicker"><span></span></a><a href="#%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6datepicker">#</a> 日期控件DatePicker</h4>
<p>增加日期控件</p>
<h4><a class="header-anchor" href="#用于-css-结构的公共-api"><span></span></a><a href="#%E7%94%A8%E4%BA%8E-css-%E7%BB%93%E6%9E%84%E7%9A%84%E5%85%AC%E5%85%B1-api">#</a> 用于 CSS 结构的公共 API</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">CSS 样式设置是 JavaFX 的一项主要特性</span></span>
<span class="line"><span style="color:#E06C75">CSS 已专门在私有 API 中实现(</span><span style="color:#E5C07B">com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">javafx</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">css</span><span style="color:#E06C75"> 软件包)</span></span>
<span class="line"><span style="color:#E06C75">多种工具(例如 </span><span style="color:#E5C07B">Scene</span><span style="color:#E06C75"> Builder)需要 CSS 公共 </span><span style="color:#E5C07B">API</span></span>
<span class="line"><span style="color:#E06C75">开发人员将能够定义自定义 CSS 样式</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#webview-增强功能"><span></span></a><a href="#webview-%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD">#</a> WebView 增强功能</h4>
<ul>
<li>Nashorn JavaScript 引擎 https://blogs.oracle.com/nashorn/entry/open_for_business</li>
<li>WebSocket http://javafx-jira.kenai.com/browse/RT-14947</li>
<li>Web Workers http://javafx-jira.kenai.com/browse/RT-9782</li>
</ul>
<h4><a class="header-anchor" href="#javafx-scene-builder-2-0"><span></span></a><a href="#javafx-scene-builder-2-0">#</a> JavaFX Scene Builder 2.0</h4>
<p>可视化工具，加速JavaFX图形界面的开发，下载地址</p>
<p>JavaFX Scene Builder如同NetBeans一般，通过拖拽的方式配置界面，待完成界面之後，保存为FXML格式文件，此文件以XML描述物件配置，再交由JavaFX程式处理，因此可減少直接以JavaFX编写界面的困難度。</p>
<p>JavaFX Scene Builder 2.0新增JavaFX Theme预览功能，菜单「Preview」→「JavaFX Theme」选择不同的主題，包括:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">Modena</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#61AFEF"> Touch</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#E5C07B"> High</span><span style="color:#E06C75"> Contrast – </span><span style="color:#E5C07B">Black</span><span style="color:#E06C75"> on </span><span style="color:#61AFEF">White</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#E5C07B"> High</span><span style="color:#E06C75"> Contrast – </span><span style="color:#E5C07B">White</span><span style="color:#E06C75"> on </span><span style="color:#61AFEF">Black</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#E5C07B"> High</span><span style="color:#E06C75"> Contrast – </span><span style="color:#E5C07B">Yellow</span><span style="color:#E06C75"> on </span><span style="color:#61AFEF">Black</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#61AFEF">Caspian</span><span style="color:#E06C75"> (FX2)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Caspian</span><span style="color:#61AFEF"> Embedded</span><span style="color:#E06C75"> (FX2)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Caspian</span><span style="color:#E5C07B"> Embedded</span><span style="color:#61AFEF"> QVGA</span><span style="color:#E06C75"> (FX2)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#javafx-8开发2048游戏"><span></span></a><a href="#javafx-8%E5%BC%80%E5%8F%912048%E6%B8%B8%E6%88%8F">#</a> JavaFX 8开发2048游戏</h2>
<p>2048虽然不像前段时间那么火了，但个人还是非常喜欢玩2048，空闲时间都忍不住来一发，感谢 Gabriele Cirulli 发明了这了不起 (并且会上瘾)的2048游戏，因为是用MIT协议开源出来，各种语言版本的2048游戏横空出世，下图是用JavaFX 8来开发的一款2048。</p>
<p>所用到的技术</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Lambda</span><span style="color:#E06C75"> expressions</span></span>
<span class="line"><span style="color:#E5C07B">Stream</span><span style="color:#E5C07B"> API</span></span>
<span class="line"><span style="color:#E06C75">JavaFX </span><span style="color:#D19A66">8</span></span>
<span class="line"><span style="color:#E5C07B">JavaFX</span><span style="color:#E5C07B"> CSS</span><span style="color:#E06C75"> basics</span></span>
<span class="line"><span style="color:#E5C07B">JavaFX</span><span style="color:#E06C75"> animationsfx2048相关类的说明</span></span>
<span class="line"><span style="color:#E06C75">Game2048</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">游戏主类</span></span>
<span class="line"><span style="color:#E06C75">GameManager</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">包含游戏界面布局(Board)以及</span><span style="color:#61AFEF">Grid的操作</span><span style="color:#E06C75">(GridOperator)</span></span>
<span class="line"><span style="color:#E06C75">Board</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">包含labels ，分数，grid ，</span><span style="color:#E5C07B">Tile</span></span>
<span class="line"><span style="color:#E06C75">Tile</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">游戏中的数字块</span></span>
<span class="line"><span style="color:#E06C75">GridOperator</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Grid操作类</span></span>
<span class="line"><span style="color:#E06C75">Location</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">Direction 位置帮助类</span></span>
<span class="line"><span style="color:#E06C75">RecordManager，SessionManager，纪录游戏分数，会话类</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是源码地址，大家感兴趣的可以去学习下git.oschina.net/benhail/javase8-sample/tree/master/src/main/java/javase8sample/chapter13/javafx8/fx2048</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>比起AWT和SWING，JavaFX的优势很明显，各大主流IDE已经支持JavaFX的开发了，最佳的工具莫过于NetBeans，且随着lambda带来的好处，JavaFX的事件处理简洁了不少，以前需要写匿名函数类。另外JavaFX开源以来，JavaFX的生态环境也越来越活跃了，包括各种教程，嵌入式尝试，还有一些开源项目，比如: ControlsFX，JRebirth，DataFX Flow，mvvmFX，TestFX 等等。还有JavaFX是可以运行在Android和ios上面，这个很赞！</p>
<p>好了，总结到这里也差不多了，在RIA平台上面，有HTML5、Flex和微软的Sliverlight，JavaFX能否表现优秀，在于大家的各位，只要我们多用JavaFX，那么JavaFX也会越来越优秀，任何语言都是这样, THE END .</p>
<h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-javafx-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 LocalDate&amp;LocalDateTime</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20LocalDate_LocalDateTime.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20LocalDate_LocalDateTime.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 LocalDate&amp;LocalDateTime</source>
      <description>理解时间和日期库需要理解如下问题: Java8之前的Date有哪些槽点? Java8之前使用哪些常用的第三方时间库? Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么? 其它语言时间库? Java8 LocalDate&amp;LocalDateTime Java8之前的Date有哪些槽点 槽点一 槽点二 槽点三 槽点四 Java8时间...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解时间和日期库需要理解如下问题:</p>
<ul>
<li>Java8之前的Date有哪些槽点?</li>
<li>Java8之前使用哪些常用的第三方时间库?</li>
<li>Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?</li>
<li>其它语言时间库?</li>
</ul>
</blockquote>
<ul>
<li>Java8 LocalDate&amp;LocalDateTime
<ul>
<li>Java8之前的Date有哪些槽点
<ul>
<li><a href="#%E6%A7%BD%E7%82%B9%E4%B8%80">槽点一</a></li>
<li><a href="#%E6%A7%BD%E7%82%B9%E4%BA%8C">槽点二</a></li>
<li><a href="#%E6%A7%BD%E7%82%B9%E4%B8%89">槽点三</a></li>
<li><a href="#%E6%A7%BD%E7%82%B9%E5%9B%9B">槽点四</a></li>
</ul>
</li>
<li>Java8时间和日期
<ul>
<li><a href="#%E7%B1%BB%E6%A6%82%E8%A7%88">类概览</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E6%A6%82%E8%A7%88">方法概览</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4">其它语言时间</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java8之前的date有哪些槽点"><span></span></a><a href="#java8%E4%B9%8B%E5%89%8D%E7%9A%84date%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A7%BD%E7%82%B9">#</a> Java8之前的Date有哪些槽点</h2>
<blockquote>
<p>Tiago Fernandez做过一次投票，选举最烂的JAVA API，排第一的EJB2.X，第二的就是日期API。</p>
</blockquote>
<h4><a class="header-anchor" href="#槽点一"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E4%B8%80">#</a> 槽点一</h4>
<p>最开始的时候，Date既要承载日期信息，又要做日期之间的转换，还要做不同日期格式的显示，职责较繁杂(不懂单一职责，你妈妈知道吗? 纯属恶搞~哈哈)</p>
<p>后来从JDK 1.1 开始，这三项职责分开了:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">使用Calendar类实现日期和时间字段之间转换；</span></span>
<span class="line"><span style="color:#61AFEF">使用DateFormat类来格式化和分析日期字符串；</span></span>
<span class="line"><span style="color:#61AFEF">而Date只用来承载日期和时间信息。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原有Date中的相应方法已废弃。不过，无论是Date，还是Calendar，都用着太不方便了，这是API没有设计好的地方。</p>
<h4><a class="header-anchor" href="#槽点二"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E4%BA%8C">#</a> 槽点二</h4>
<p>坑爹的year和month</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Date</span><span style="color:#E06C75"> date </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Date</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2012</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(date);</span></span>
<span class="line"><span style="color:#E06C75">输出Thu Feb </span><span style="color:#D19A66">01</span><span style="color:#D19A66"> 00</span><span style="color:#C678DD">:</span><span style="color:#D19A66">00</span><span style="color:#C678DD">:</span><span style="color:#D19A66">00</span><span style="color:#E06C75"> CST </span><span style="color:#D19A66">3912</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察输出结果，year是2012+1900，而month，月份参数我不是给了1吗? 怎么输出二月(Feb)了?</p>
<p>应该曾有人告诉你，如果你要设置日期，应该使用 java.util.Calendar，像这样…</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Calendar</span><span style="color:#E06C75"> calendar </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写又不对了，calendar的month也是从0开始的，表达8月份应该用7这个数字，要么就干脆用枚举</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AUGUST</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意上面的代码，Calendar年份的传值不需要减去1900(当然月份的定义和Date还是一样)，这种不一致真是让人抓狂！</p>
<p>有些人可能知道，Calendar相关的API是IBM捐出去的，所以才导致不一致。</p>
<h4><a class="header-anchor" href="#槽点三"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E4%B8%89">#</a> 槽点三</h4>
<p>java.util.Date与java.util.Calendar中的所有属性都是可变的</p>
<p>下面的代码，计算两个日期之间的天数….</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">    Calendar</span><span style="color:#E06C75"> birth </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    birth</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1975</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAY</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">26</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    Calendar</span><span style="color:#E06C75"> now </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">daysBetween</span><span style="color:#ABB2BF">(birth, now));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">daysBetween</span><span style="color:#ABB2BF">(birth, now));</span><span style="color:#7F848E;font-style:italic"> // 显示 0? </span></span>
<span class="line"><span style="color:#E06C75"> }  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> daysBetween</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#E06C75"> begin</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Calendar</span><span style="color:#E06C75"> end) {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> daysBetween </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">begin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">before</span><span style="color:#ABB2BF">(end)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        begin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DAY_OF_MONTH</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        daysBetween</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> daysBetween</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>daysBetween有点问题，如果连续计算两个Date实例的话，第二次会取得0，因为Calendar状态是可变的，考虑到重复计算的场合，最好复制一个新的Calendar</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> daysBetween</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#E06C75"> begin</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Calendar</span><span style="color:#E06C75"> end) {</span></span>
<span class="line"><span style="color:#E5C07B">    Calendar</span><span style="color:#E06C75"> calendar </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Calendar) </span><span style="color:#E5C07B">begin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clone</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 复制</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> daysBetween </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">before</span><span style="color:#ABB2BF">(end)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DAY_OF_MONTH</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        daysBetween</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> daysBetween</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#槽点四"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E5%9B%9B">#</a> 槽点四</h4>
<p>SimpleDateTimeFormat是非线程安全的。</p>
<h2><a class="header-anchor" href="#java8时间和日期"><span></span></a><a href="#java8%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F">#</a> Java8时间和日期</h2>
<h3><a class="header-anchor" href="#类概览"><span></span></a><a href="#%E7%B1%BB%E6%A6%82%E8%A7%88">#</a> 类概览</h3>
<p>Java 8仍然延用了ISO的日历体系，并且与它的前辈们不同，java.time包中的类是不可变且线程安全的。新的时间及日期API位于java.time包中，下面是里面的一些关键的类:</p>
<ul>
<li>Instant——它代表的是时间戳</li>
<li>LocalDate——不包含具体时间的日期，比如2014-01-14。它可以用来存储生日，周年纪念日，入职日期等。</li>
<li>LocalTime——它代表的是不含日期的时间</li>
<li>LocalDateTime——它包含了日期及时间，不过还是没有偏移信息或者说时区。</li>
<li>ZonedDateTime——这是一个包含时区的完整的日期时间，偏移量是以UTC/格林威治时间为基准的。</li>
</ul>
<p>新的库还增加了ZoneOffset及Zoned，可以为时区提供更好的支持。有了新的DateTimeFormatter之后日期的解析及格式化也变得焕然一新了。</p>
<h3><a class="header-anchor" href="#方法概览"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E6%A6%82%E8%A7%88">#</a> 方法概览</h3>
<p>该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀:</p>
<ul>
<li>of: 静态工厂方法。</li>
<li>parse: 静态工厂方法，关注于解析。</li>
<li>get: 获取某些东西的值。</li>
<li>is: 检查某些东西的是否是true。</li>
<li>with: 不可变的setter等价物。</li>
<li>plus: 加一些量到某个对象。</li>
<li>minus: 从某个对象减去一些量。</li>
<li>to: 转换到另一个类型。</li>
<li>at: 把这个对象与另一个对象组合起来，例如: date.atTime(time)。</li>
</ul>
<h2><a class="header-anchor" href="#一些例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</h2>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TimeIntroduction</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testClock</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //时钟提供给我们用于访问某个特定 时区的 瞬时时间、日期 和 时间的。  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemUTC</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//系统默认UTC时钟(当前瞬时时间 System.currentTimeMillis())  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//每次调用将返回当前瞬时时间(UTC)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemDefaultZone</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//系统默认时区时钟(当前瞬时时间)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c31</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">system</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Europe/Paris"</span><span style="color:#ABB2BF">)); </span><span style="color:#7F848E;font-style:italic">//巴黎时区  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c31</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//每次调用将返回当前瞬时时间(UTC)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c32</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">system</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Asia/Shanghai"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//上海时区  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c32</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//每次调用将返回当前瞬时时间(UTC)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c4</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fixed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Asia/Shanghai"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//固定上海时区时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//不变 即时钟时钟在那一个点不动  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c5</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">offset</span><span style="color:#ABB2BF">(c1, </span><span style="color:#E5C07B">Duration</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofSeconds</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">)); </span><span style="color:#7F848E;font-style:italic">//相对于系统默认时钟两秒的时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c5</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testInstant</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //瞬时时间 相当于以前的System.currentTimeMillis()  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEpochSecond</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//精确到秒 得到相对于1970-01-01 00:00:00 UTC的一个时间  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toEpochMilli</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//精确到毫秒  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> clock1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemUTC</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获取系统UTC默认时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(clock1);</span><span style="color:#7F848E;font-style:italic">//得到时钟的瞬时时间  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toEpochMilli</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> clock2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fixed</span><span style="color:#ABB2BF">(instant1, </span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemDefault</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//固定瞬时时间时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant3</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(clock2);</span><span style="color:#7F848E;font-style:italic">//得到时钟的瞬时时间  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toEpochMilli</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//equals instant1  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testLocalDateTime</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //使用默认时区时钟瞬时时间创建 Clock.systemDefaultZone() --&gt;即相对于 ZoneId.systemDefault()默认时区  </span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> now</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(now);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//自定义时区  </span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> now2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Europe/Paris"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(now2);</span><span style="color:#7F848E;font-style:italic">//会以相应的时区显示日期  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//自定义时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> clock</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">system</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Asia/Dhaka"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> now3</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(clock);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(now3);</span><span style="color:#7F848E;font-style:italic">//会以相应的时区显示日期  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//不需要写什么相对时间 如java.util.Date 年是相对于1900 月是从0开始  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//2013-12-31 23:59  </span></span>
<span class="line"><span style="color:#ABB2BF">		</span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> d1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">12</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">31</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">23</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">59</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//年月日 时分秒 纳秒  </span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> d2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">12</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">31</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">23</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">59</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">59</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//使用瞬时时间 + 时区  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> d3</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofInstant</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemDefault</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(d3);</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//解析String</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java8 Optional类深度解析</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20Optional%E7%B1%BB%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20Optional%E7%B1%BB%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 Optional类深度解析</source>
      <description>对Java 8 Optional类进行深度解析。 Java 8 - Optional类深度解析 Optional类包含的方法 of ofNullable isPresent get ifPresent orElse orElseGet orElseThrow map flatMap filter 一些例子 参考 身为一名Java程序员，大家可能都有这样...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>对Java 8 Optional类进行深度解析。</p>
</blockquote>
<ul>
<li>Java 8 - Optional类深度解析
<ul>
<li>Optional类包含的方法
<ul>
<li><a href="#of">of</a></li>
<li><a href="#ofnullable">ofNullable</a></li>
<li><a href="#ispresent">isPresent</a></li>
<li><a href="#get">get</a></li>
<li><a href="#ifpresent">ifPresent</a></li>
<li><a href="#orelse">orElse</a></li>
<li><a href="#orelseget">orElseGet</a></li>
<li><a href="#orelsethrow">orElseThrow</a></li>
<li><a href="#map">map</a></li>
<li><a href="#flatmap">flatMap</a></li>
<li><a href="#filter">filter</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>身为一名Java程序员，大家可能都有这样的经历: 调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。在我的前一篇文章中，介绍了Scala是如何解决了这个问题。</p>
</blockquote>
<p>新版本的Java，比如Java 8引入了一个新的Optional类。Optional类的Javadoc描述如下:</p>
<blockquote>
<p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
</blockquote>
<h2><a class="header-anchor" href="#optional类包含的方法"><span></span></a><a href="#optional%E7%B1%BB%E5%8C%85%E5%90%AB%E7%9A%84%E6%96%B9%E6%B3%95">#</a> Optional类包含的方法</h2>
<h3><a class="header-anchor" href="#of"><span></span></a><a href="#of">#</a> of</h3>
<blockquote>
<p>为非null的值创建一个Optional。</p>
</blockquote>
<p>of方法通过工厂方法创建Optional类。需要注意的是，创建对象时传入的参数不能为null。如果传入参数为null，则抛出NullPointerException 。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//调用工厂方法创建Optional实例</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sanaulla"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//传入参数为null，抛出NullPointerException.</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> someNull </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#ofnullable"><span></span></a><a href="#ofnullable">#</a> ofNullable</h3>
<blockquote>
<p>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。</p>
</blockquote>
<p>ofNullable与of方法相似，唯一的区别是可以接受参数为null的情况。示例如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//下面创建了一个不包含任何值的Optional实例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//例如，值为'null'</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#E06C75"> empty </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofNullable</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#ispresent"><span></span></a><a href="#ispresent">#</a> isPresent</h3>
<p>非常容易理解</p>
<blockquote>
<p>如果值存在返回true，否则返回false。</p>
</blockquote>
<p>类似下面的代码:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//isPresent方法用来检查Optional实例中是否包含值</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPresent</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //在Optional实例内调用get()返回已存在的值</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//输出Sanaulla</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get</h3>
<blockquote>
<p>如果Optional有值则将其返回，否则抛出NoSuchElementException。</p>
</blockquote>
<p>上面的示例中，get方法用来得到Optional实例中的值。下面我们看一个抛出NoSuchElementException的例子:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//执行下面的代码会输出: No value present </span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //在空的Optional实例上调用get()，抛出NoSuchElementException</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NoSuchElementException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#ifpresent"><span></span></a><a href="#ifpresent">#</a> ifPresent</h3>
<blockquote>
<p>如果Optional实例有值则为其调用consumer，否则不做处理</p>
</blockquote>
<p>要理解ifPresent方法，首先需要了解Consumer类。简答地说，Consumer类包含一个抽象方法。该抽象方法对传入的值进行处理，但没有返回值。Java8支持不用接口直接通过lambda表达式传入参数。</p>
<p>如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。类似下面的代码:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//ifPresent方法接受lambda表达式作为参数。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//lambda表达式对Optional的值调用consumer进行处理。</span></span>
<span class="line"><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The length of the value is: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#orelse"><span></span></a><a href="#orelse">#</a> orElse</h3>
<blockquote>
<p>如果有值则将其返回，否则返回指定的其它值。</p>
</blockquote>
<p>如果Optional实例有值则将其返回，否则返回orElse方法传入的参数。示例如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//如果值不为null，orElse方法返回Optional实例的值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//如果为null，返回传入的消息。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: There is no value present!</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is no value present!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: Sanaulla</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is some value!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#orelseget"><span></span></a><a href="#orelseget">#</a> orElseGet</h3>
<blockquote>
<p>orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值。示例如下:</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//orElseGet与orElse方法类似，区别在于orElse传入的是默认值，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//orElseGet可以接受一个lambda表达式生成默认值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: Default Value</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: Sanaulla</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#orelsethrow"><span></span></a><a href="#orelsethrow">#</a> orElseThrow</h3>
<blockquote>
<p>如果有值则将其返回，否则抛出supplier接口创建的异常。</p>
</blockquote>
<p>在orElseGet方法中，我们传入一个Supplier接口。然而，在orElseThrow中我们可以传入一个lambda表达式或方法，如果值不存在来抛出异常。示例如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //orElseThrow与orElse方法类似。与返回默认值不同，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //orElseThrow会抛出lambda表达式或方法生成的异常 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">  empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseThrow</span><span style="color:#ABB2BF">(ValueAbsentException</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //输出: No value present in the Optional instance</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ValueAbsentException定义如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> ValueAbsentException</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Throwable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> ValueAbsentException</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> ValueAbsentException</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> msg</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">(msg);</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">  @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getMessage</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#98C379"> "No value present in the Optional instance"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#map"><span></span></a><a href="#map">#</a> map</h3>
<p>map方法文档说明如下:</p>
<blockquote>
<p>如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</p>
</blockquote>
<p>map方法用来对Optional实例的值执行一系列操作。通过一组实现了Function接口的lambda表达式传入操作。如果你不熟悉Function接口，可以参考我的这篇博客。map方法示例如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//map方法执行传入的lambda表达式参数对Optional实例的值进行修改。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//为lambda表达式的返回值创建新的Optional实例作为map方法的返回值。</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> upperName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#flatmap"><span></span></a><a href="#flatmap">#</a> flatMap</h3>
<blockquote>
<p>如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map(Funtion)方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</p>
</blockquote>
<p>flatMap方法与map方法类似，区别在于mapping函数的返回值不同。map方法的mapping函数返回值可以是任何类型T，而flatMap方法的mapping函数必须是Optional。</p>
<p>参照map函数，使用flatMap重写的示例如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//flatMap与map(Function)非常类似，区别在于传入方法的lambda表达式的返回类型。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//map方法中的lambda表达式返回值可以是任意类型，在map函数返回之前会包装为Optional。 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//但flatMap方法中的lambda表达式返回值必须是Optionl实例。 </span></span>
<span class="line"><span style="color:#E06C75">upperName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flatMap</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//输出SANAULLA</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filter"><span></span></a><a href="#filter">#</a> filter</h3>
<p>filter个方法通过传入限定条件对Optional实例的值进行过滤。文档描述如下:</p>
<blockquote>
<p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</p>
</blockquote>
<p>读到这里，可能你已经知道如何为filter方法传入一段代码。是的，这里可以传入一个lambda表达式。对于filter函数我们应该传入实现了Predicate接口的lambda表达式。如果你不熟悉Predicate接口，可以参考这篇文章。</p>
<p>现在我来看看filter的各种用法，下面的示例介绍了满足限定条件和不满足两种情况:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//filter方法检查给定的Option值是否满足某些条件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//如果满足则返回同一个Option实例，否则返回空Optional。</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> longName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">longName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//输出Sanaulla</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//另一个例子是Optional值不满足filter指定的条件。</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> anotherName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sana"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> shortName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> anotherName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: name长度不足6字符</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">shortName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#一些例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</h2>
<ul>
<li>一个综合例子</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OptionalDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //创建Optional实例，也可以通过方法返回值得到。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">name</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sanaulla"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //创建没有值的Optional实例，例如值为'null'</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#E06C75"> empty</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofNullable</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //isPresent方法用来检查Optional实例是否有值。</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPresent</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //调用get()返回Optional值。</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //在Optional实例上调用get()抛出NoSuchElementException。</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">NoSuchElementException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //ifPresent方法接受lambda表达式参数。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //如果Optional值不为空，lambda表达式会处理并在其上执行操作。</span></span>
<span class="line"><span style="color:#E5C07B">    name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The length of the value is: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //如果有值orElse方法会返回Optional实例，否则返回传入的错误信息。</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is no value present!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is some value!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //orElseGet与orElse类似，区别在于传入的默认值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //orElseGet接受lambda表达式生成默认值。</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //orElseThrow与orElse方法类似，区别在于返回值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //orElseThrow抛出由传入的lambda表达式/方法生成异常。</span></span>
<span class="line"><span style="color:#E5C07B">      empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseThrow</span><span style="color:#ABB2BF">(ValueAbsentException</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //map方法通过传入的lambda表达式修改Optonal实例默认值。 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //lambda表达式返回值会包装为Optional实例。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">upperName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //flatMap与map(Funtion)非常相似，区别在于lambda表达式的返回值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //map方法的lambda表达式返回值可以是任何类型，但是返回值会包装成Optional实例。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //但是flatMap方法的lambda返回值总是Optional类型。</span></span>
<span class="line"><span style="color:#ABB2BF">    upperName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flatMap</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //filter方法检查Optiona值是否满足给定条件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //如果满足返回Optional实例值，否则返回空Optional。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">longName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">longName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //另一个示例，Optional值不满足给定条件。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">anotherName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sana"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">shortName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> anotherName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">shortName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码输出如下:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">No</span><span style="color:#98C379"> value</span><span style="color:#98C379"> present</span></span>
<span class="line"><span style="color:#61AFEF">The</span><span style="color:#98C379"> length</span><span style="color:#98C379"> of</span><span style="color:#98C379"> the</span><span style="color:#98C379"> value</span><span style="color:#98C379"> is:</span><span style="color:#D19A66"> 8</span></span>
<span class="line"><span style="color:#61AFEF">There</span><span style="color:#98C379"> is</span><span style="color:#98C379"> no</span><span style="color:#98C379"> value</span><span style="color:#98C379"> present!</span></span>
<span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">Default</span><span style="color:#98C379"> Value</span></span>
<span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">No</span><span style="color:#98C379"> value</span><span style="color:#98C379"> present</span><span style="color:#98C379"> in</span><span style="color:#98C379"> the</span><span style="color:#98C379"> Optional</span><span style="color:#98C379"> instance</span></span>
<span class="line"><span style="color:#61AFEF">SANAULLA</span></span>
<span class="line"><span style="color:#61AFEF">SANAULLA</span></span>
<span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">The</span><span style="color:#98C379"> name</span><span style="color:#98C379"> is</span><span style="color:#98C379"> less</span><span style="color:#98C379"> than</span><span style="color:#D19A66"> 6</span><span style="color:#98C379"> characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>在 Java 8 中提高 Null 的安全性</li>
</ul>
<p>假设我们有一个像这样的类层次结构:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Outer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Nested</span><span style="color:#E06C75"> nested</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Nested</span><span style="color:#61AFEF"> getNested</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> nested;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Nested</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Inner</span><span style="color:#E06C75"> inner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Inner</span><span style="color:#61AFEF"> getInner</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> inner;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Inner</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> foo</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#61AFEF"> getFoo</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> foo;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决这种结构的深层嵌套路径是有点麻烦的。我们必须编写一堆 null 检查来确保不会导致一个 NullPointerException:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Outer</span><span style="color:#E06C75"> outer </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Outer</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#E06C75"> (outer </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> outer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nested</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> outer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nested</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inner</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">outer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nested</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inner</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">foo</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过利用 Java 8 的 Optional 类型来摆脱所有这些 null 检查。map 方法接收一个 Function 类型的 lambda 表达式，并自动将每个 function 的结果包装成一个 Optional 对象。这使我们能够在一行中进行多个 map 操作。Null 检查是在底层自动处理的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Outer</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Outer</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getNested)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Nested</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getInner)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Inner</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getFoo)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Outer</span><span style="color:#E06C75"> obj </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Outer</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">resolve</span><span style="color:#E06C75">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> obj</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getNested</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getInner</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getFoo</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 obj.getNested().getInner().getFoo()) 可能会抛出一个 NullPointerException 异常。在这种情况下，该异常将会被捕获，而该方法会返回 Optional.empty()。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> Optional</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> resolve</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> resolver) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        T</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> resolver</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofNullable</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NullPointerException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">empty</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，这两个解决方案可能没有传统 null 检查那么高的性能。不过在大多数情况下不会有太大问题。</p>
<h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 StampedLock</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20StampedLock.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20StampedLock.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 StampedLock</source>
      <description>本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。 Java8 StampedLock synchronized Lock StampedLock StampedLock与ReadWriteLock性能对比 总结 参考 # synchronized 在java5之前...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。</p>
</blockquote>
<ul>
<li>Java8 StampedLock
<ul>
<li><a href="#synchronized">synchronized</a></li>
<li><a href="#lock">Lock</a></li>
<li><a href="#stampedlock">StampedLock</a></li>
<li><a href="#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">StampedLock与ReadWriteLock性能对比</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#synchronized"><span></span></a><a href="#synchronized">#</a> synchronized</h2>
<p>在java5之前，实现同步主要是使用synchronized。它是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>
<p>有四种不同的同步块:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">实例方法</span></span>
<span class="line"><span style="color:#E06C75">静态方法</span></span>
<span class="line"><span style="color:#E06C75">实例方法中的同步块</span></span>
<span class="line"><span style="color:#E06C75">静态方法中的同步块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家对此应该不陌生，所以不多讲了，以下是代码示例</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">synchronized</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// do operation</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结: 在多线程并发编程中Synchronized一直是元老级角色，很多人都会称呼它为重量级锁，但是随着Java SE1.6对Synchronized进行了各种优化之后，性能上也有所提升。</p>
<h2><a class="header-anchor" href="#lock"><span></span></a><a href="#lock">#</a> Lock</h2>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">rwlock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// do operation</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">	rwlock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是Java 5在java.util.concurrent.locks新增的一个API。</p>
<p>Lock是一个接口，核心方法是lock()，unlock()，tryLock()，实现类有ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock；</p>
<p>ReentrantReadWriteLock, ReentrantLock 和synchronized锁都有相同的内存语义。</p>
<p>与synchronized不同的是，Lock完全用Java写成，在java这个层面是无关JVM实现的。Lock提供更灵活的锁机制，很多synchronized 没有提供的许多特性，比如锁投票，定时锁等候和中断锁等候，但因为lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</p>
<p>下面是Lock的一个代码示例</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> y</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> StampedLock</span><span style="color:#E06C75"> sl </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StampedLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> move</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// an exclusively locked method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">       x </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF">       y </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockWrite</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  	//下面看看乐观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   double</span><span style="color:#61AFEF"> distanceFromOrigin</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// A read-only method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryOptimisticRead</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获得一个乐观读锁</span></span>
<span class="line"><span style="color:#C678DD">     double</span><span style="color:#E06C75"> currentX</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x, currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">//将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#C678DD">     if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">validate</span><span style="color:#ABB2BF">(stamp)) { </span><span style="color:#7F848E;font-style:italic">//检查发出乐观读锁后同时是否有其他写锁发生? </span></span>
<span class="line"><span style="color:#ABB2BF">        stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//如果没有，我们再次获得一个读悲观锁</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">          currentX </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> x; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">          currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">     return</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sqrt</span><span style="color:#ABB2BF">(currentX </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentX </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> currentY </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	//下面是悲观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> moveIfAtOrigin</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// upgrade</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // Could instead start with optimistic, not read mode</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">       while</span><span style="color:#ABB2BF"> (x </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> y </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//循环，检查当前状态是否符合</span></span>
<span class="line"><span style="color:#C678DD">         long</span><span style="color:#E06C75"> ws</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryConvertToWriteLock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//将读锁转为写锁</span></span>
<span class="line"><span style="color:#C678DD">         if</span><span style="color:#ABB2BF"> (ws </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//这是确认转为写锁是否成功</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ws; </span><span style="color:#7F848E;font-style:italic">//如果成功 替换票据</span></span>
<span class="line"><span style="color:#ABB2BF">           x </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newX; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#ABB2BF">           y </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newY; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#C678DD">           break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#C678DD">         else</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">//如果不能成功转换为写锁</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//我们显式释放读锁</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//显式直接进行写锁 然后再通过循环再试</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#ABB2BF">       }</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//释放读锁或写锁</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结: 比synchronized更灵活、更具可伸缩性的锁定机制，但不管怎么说还是synchronized代码要更容易书写些</p>
<h2><a class="header-anchor" href="#stampedlock"><span></span></a><a href="#stampedlock">#</a> StampedLock</h2>
<p>它是java8在java.util.concurrent.locks新增的一个API。</p>
<p>ReentrantReadWriteLock 在沒有任何读写锁时，才可以取得写入锁，这可用于实现了悲观读取(Pessimistic Reading)，即如果执行中进行读取时，经常可能有另一执行要写入的需求，为了保持同步，ReentrantReadWriteLock 的读取锁定就可派上用场。</p>
<p>然而，如果读取执行情况很多，写入很少的情况下，使用 ReentrantReadWriteLock 可能会使写入线程遭遇饥饿(Starvation)问题，也就是写入线程迟迟无法竞争到锁定而一直处于等待状态。</p>
<p>StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p>
<p>所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施(重新读取变更信息，或者抛出异常) ，这一个小小改进，可大幅度提高程序的吞吐量！！</p>
<p>下面是java doc提供的StampedLock一个例子</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> y</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> StampedLock</span><span style="color:#E06C75"> sl </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StampedLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> move</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// an exclusively locked method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">       x </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF">       y </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockWrite</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //下面看看乐观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   double</span><span style="color:#61AFEF"> distanceFromOrigin</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// A read-only method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryOptimisticRead</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获得一个乐观读锁</span></span>
<span class="line"><span style="color:#C678DD">     double</span><span style="color:#E06C75"> currentX</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x, currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">//将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#C678DD">     if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">validate</span><span style="color:#ABB2BF">(stamp)) { </span><span style="color:#7F848E;font-style:italic">//检查发出乐观读锁后同时是否有其他写锁发生? </span></span>
<span class="line"><span style="color:#ABB2BF">        stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//如果没有，我们再次获得一个读悲观锁</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">          currentX </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> x; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">          currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">     return</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sqrt</span><span style="color:#ABB2BF">(currentX </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentX </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> currentY </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	//下面是悲观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> moveIfAtOrigin</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// upgrade</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // Could instead start with optimistic, not read mode</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">       while</span><span style="color:#ABB2BF"> (x </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> y </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//循环，检查当前状态是否符合</span></span>
<span class="line"><span style="color:#C678DD">         long</span><span style="color:#E06C75"> ws</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryConvertToWriteLock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//将读锁转为写锁</span></span>
<span class="line"><span style="color:#C678DD">         if</span><span style="color:#ABB2BF"> (ws </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//这是确认转为写锁是否成功</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ws; </span><span style="color:#7F848E;font-style:italic">//如果成功 替换票据</span></span>
<span class="line"><span style="color:#ABB2BF">           x </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newX; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#ABB2BF">           y </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newY; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#C678DD">           break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#C678DD">         else</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">//如果不能成功转换为写锁</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//我们显式释放读锁</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//显式直接进行写锁 然后再通过循环再试</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#ABB2BF">       }</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//释放读锁或写锁</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结:</p>
<p>StampedLock要比ReentrantReadWriteLock更加廉价，也就是消耗比较小。</p>
<h2><a class="header-anchor" href="#stampedlock与readwritelock性能对比"><span></span></a><a href="#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">#</a> StampedLock与ReadWriteLock性能对比</h2>
<p>是和ReadWritLock相比，在一个线程情况下，是读速度其4倍左右，写是1倍。</p>
<p>下图是六个线程情况下，读性能是其几十倍，写性能也是近10倍左右:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<ul>
<li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定；</li>
<li>ReentrantLock、ReentrantReadWriteLock,、StampedLock都是对象层面的锁定，要保证锁定一定会被释放，就必须将unLock()放到finally{}中；</li>
<li>StampedLock 对吞吐量有巨大的改进，特别是在读线程越来越多的场景下；</li>
<li>StampedLock有一个复杂的API，对于加锁操作，很容易误用其他方法;</li>
<li>当只有少量竞争者的时候，synchronized是一个很好的通用的锁实现;</li>
<li>当线程增长能够预估，ReentrantLock是一个很好的通用的锁实现;</li>
</ul>
<p>StampedLock 可以说是Lock的一个很好的补充，吞吐量以及性能上的提升足以打动很多人了，但并不是说要替代之前Lock的东西，毕竟他还是有些应用场景的，起码API比StampedLock容易入手。</p>
<h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 其它更新,字符串&amp;base64等</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0_%E5%AD%97%E7%AC%A6%E4%B8%B2_base64%E7%AD%89.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0_%E5%AD%97%E7%AC%A6%E4%B8%B2_base64%E7%AD%89.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 其它更新,字符串&amp;base64等</source>
      <description>本文对Java 8 其它更新介绍和解读。 Java8 其它更新,字符串&amp;base64等 处理数值 处理文件 查找文件 读写文件 java.util.Random java.util.Base64 参考 # 处理数值 Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer: int可表示最多2 ** 32个数...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文对Java 8 其它更新介绍和解读。</p>
</blockquote>
<ul>
<li>Java8 其它更新,字符串&amp;base64等
<ul>
<li><a href="#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC">处理数值</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6">处理文件</a></li>
<li><a href="#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">查找文件</a></li>
<li><a href="#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">读写文件</a></li>
<li><a href="#javautilrandom">java.util.Random</a></li>
<li><a href="#javautilbase64">java.util.Base64</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#处理数值"><span></span></a><a href="#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC">#</a> 处理数值</h2>
<p>Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer:</p>
<p>int可表示最多2 ** 32个数。Java中的数值默认为有符号的，所以最后一个二进制数字表示符号(0为正数，1为负数)。所以从十进制的0开始，最大的有符号正整数为2 ** 31 - 1。</p>
<p>你可以通过Integer.MAX_VALUE来访问它:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">      // 2147483647</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> +</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // -2147483648</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java8添加了解析无符号整数的支持，让我们看看它如何工作:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> maxUnsignedInt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">1l</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 32</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> string </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">(maxUnsignedInt);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> unsignedInt </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseUnsignedInt</span><span style="color:#ABB2BF">(string, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> string2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUnsignedString</span><span style="color:#ABB2BF">(unsignedInt, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像你看到的那样，现在可以将最大的无符号数2 ** 32 - 1解析为整数。而且你也可以将这个数值转换回无符号数的字符串表示。</p>
<p>这在之前不可能使用parseInt完成，就像这个例子展示的那样:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(string, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NumberFormatException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">err</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"could not parse signed int of "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> maxUnsignedInt);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个数值不可解析为有符号整数，因为它超出了最大范围2 ** 31 - 1。 算术运算</p>
<p>Math工具类新增了一些方法来处理数值溢出。这是什么意思呢? 我们已经看到了所有数值类型都有最大值。所以当算术运算的结果不能被它的大小装下时，会发生什么呢?</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">      // 2147483647</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> +</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // -2147483648</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就像你看到的那样，发生了整数溢出，这通常是我们不愿意看到的。</p>
<p>Java8添加了严格数学运算的支持来解决这个问题。Math扩展了一些方法，它们全部以exact结尾，例如addExact。当运算结果不能被数值类型装下时，这些方法通过抛出ArithmeticException异常来合理地处理溢出。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addExact</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ArithmeticException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">err</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // =&gt; integer overflow</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当尝试通过toIntExact将长整数转换为整数时，可能会抛出同样的异常:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toIntExact</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ArithmeticException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">err</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // =&gt; integer overflow</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#处理文件"><span></span></a><a href="#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6">#</a> 处理文件</h2>
<p>Files工具类首次在Java7中引入，作为NIO的一部分。JDK8 API添加了一些额外的方法，它们可以将文件用于函数式数据流。让我们深入探索一些代码示例。 列出文件</p>
<p>Files.list方法将指定目录的所有路径转换为数据流，便于我们在文件系统的内容上使用类似filter和sorted的流操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Path</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">list</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">))</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> joined </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(path </span><span style="color:#C678DD">-&gt;</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"."</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"; "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"List: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> joined);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子列出了当前工作目录的所有文件，之后将每个路径都映射为它的字符串表示。之后结果被过滤、排序，最后连接为一个字符串。如果你还不熟悉函数式数据流，你应该阅读我的Java8数据流教程。</p>
<p>你可能已经注意到，数据流的创建包装在try-with语句中。数据流实现了AutoCloseable，并且这里我们需要显式关闭数据流，因为它基于IO操作。</p>
<blockquote>
<p>返回的数据流是DirectoryStream的封装。如果需要及时处理文件资源，就应该使用try-with结构来确保在流式操作完成后，数据流的close方法被调用。</p>
</blockquote>
<h2><a class="header-anchor" href="#查找文件"><span></span></a><a href="#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">#</a> 查找文件</h2>
<p>下面的例子演示了如何查找在目录及其子目录下的文件:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> start </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> maxDepth </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Path</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">find</span><span style="color:#ABB2BF">(start, maxDepth, (path, attr) </span><span style="color:#C678DD">-&gt;</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">(path).</span><span style="color:#61AFEF">endsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">".js"</span><span style="color:#ABB2BF">))</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> joined </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"; "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Found: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> joined);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>find方法接受三个参数: 目录路径start是起始点，maxDepth定义了最大搜索深度。第三个参数是一个匹配谓词，定义了搜索的逻辑。上面的例子中，我们搜索了所有JavaScirpt文件(以.js结尾的文件名)。</p>
<p>我们可以使用Files.walk方法来完成相同的行为。这个方法会遍历每个文件，而不需要传递搜索谓词。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> start </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> maxDepth </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Path</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">walk</span><span style="color:#ABB2BF">(start, maxDepth)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> joined </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(path </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">endsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">".js"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"; "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"walk(): "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> joined);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们使用了流式操作filter来完成和上个例子相同的行为。</p>
<h2><a class="header-anchor" href="#读写文件"><span></span></a><a href="#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">#</a> 读写文件</h2>
<p>将文本文件读到内存，以及向文本文件写入字符串在Java 8 中是简单的任务。不需要再去摆弄读写器了。Files.readAllLines从指定的文件把所有行读进字符串列表中。你可以简单地修改这个列表，并且将它通过Files.write写到另一个文件中:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lines </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readAllLines</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lines</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print('foobar');"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1-modified.js"</span><span style="color:#ABB2BF">), lines);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意这些方法对内存并不十分高效，因为整个文件都会读进内存。文件越大，所用的堆区也就越大。</p>
<p>你可以使用Files.lines方法来作为内存高效的替代。这个方法读取每一行，并使用函数式数据流来对其流式处理，而不是一次性把所有行都读进内存。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lines</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">))</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">    stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(line </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> line</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">trim)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要更多的精细控制，你需要构造一个新的BufferedReader来代替:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newBufferedReader</span><span style="color:#ABB2BF">(path)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你需要写入文件时，简单地构造一个BufferedWriter来代替:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/output.js"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">BufferedWriter</span><span style="color:#E06C75"> writer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newBufferedWriter</span><span style="color:#ABB2BF">(path)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    writer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print('Hello World');"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BufferedReader也可以访问函数式数据流。lines方法在它所有行上面构建数据流:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newBufferedReader</span><span style="color:#ABB2BF">(path)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> countPrints </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> reader</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">lines</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(line </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> line</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">count</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(countPrints);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前为止你可以看到Java8提供了三个简单的方法来读取文本文件的每一行，使文件处理更加便捷。</p>
<p>不幸的是你需要显式使用try-with语句来关闭文件流，这会使示例代码有些凌乱。我期待函数式数据流可以在调用类似count和collect时可以自动关闭，因为你不能在相同数据流上调用终止操作两次。</p>
<h2><a class="header-anchor" href="#java-util-random"><span></span></a><a href="#java-util-random">#</a> java.util.Random</h2>
<p>在Java8中java.util.Random类的一个非常明显的变化就是新增了返回随机数流(random Stream of numbers)的一些方法。</p>
<p>下面的代码是创建一个无穷尽的double类型的数字流，这些数字在0(包括0)和1(不包含1)之间。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> doubleStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubles</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码是创建一个无穷尽的int类型的数字流，这些数字在0(包括0)和100(不包括100)之间。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">IntStream</span><span style="color:#E06C75"> intStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ints</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这些无穷尽的数字流用来做什么呢? 接下来，我通过一些案例来分析。记住，这些无穷大的数字流只能通过某种方式被截断(limited)。</p>
<p>示例1: 创建10个随机的整数流并打印出来:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">intStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例2: 创建100个随机整数:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">    List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> randomBetween0And99 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> intStream</span></span>
<span class="line"><span style="color:#ABB2BF">                                       .</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                                       .</span><span style="color:#61AFEF">boxed</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                                       .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于高斯伪随机数(gaussian pseudo-random values)来说，random.doubles()方法所创建的流不能等价于高斯伪随机数，然而，如果用java8所提供的功能是非常容易实现的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> gaussianStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">generate</span><span style="color:#ABB2BF">(random</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">nextGaussian).</span><span style="color:#61AFEF">mapToDouble</span><span style="color:#ABB2BF">(e </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> e);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我使用了Stream.generate api，并传入Supplier 类的对象作为参数，这个对象是通过调用Random类中的方法 nextGaussian()创建另一个高斯伪随机数。</p>
<p>接下来，我们来对double类型的伪随机数流和double类型的高斯伪随机数流做一个更加有意思的事情，那就是获得两个流的随机数的分配情况。预期的结果是: double类型的伪随机数是均匀的分配的，而double类型的高斯伪随机数应该是正态分布的。</p>
<p>通过下面的代码，我生成了一百万个伪随机数，这是通过java8提供的api实现的:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> doubleStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubles</span><span style="color:#ABB2BF">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">LinkedHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Range</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> rangeCountMap </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> doubleStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000000</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">boxed</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">of)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">emptyRangeCountMap, (m, e) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, </span><span style="color:#E5C07B">m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(e) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">), Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">mergeRangeCountMaps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">rangeCountMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((k, v) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">from</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> v));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的运行结果如下:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">    -1</span><span style="color:#D19A66">      49730</span></span>
<span class="line"><span style="color:#61AFEF">    -0.9</span><span style="color:#D19A66">    49931</span></span>
<span class="line"><span style="color:#61AFEF">    -0.8</span><span style="color:#D19A66">    50057</span></span>
<span class="line"><span style="color:#61AFEF">    -0.7</span><span style="color:#D19A66">    50060</span></span>
<span class="line"><span style="color:#61AFEF">    -0.6</span><span style="color:#D19A66">    49963</span></span>
<span class="line"><span style="color:#61AFEF">    -0.5</span><span style="color:#D19A66">    50159</span></span>
<span class="line"><span style="color:#61AFEF">    -0.4</span><span style="color:#D19A66">    49921</span></span>
<span class="line"><span style="color:#61AFEF">    -0.3</span><span style="color:#D19A66">    49962</span></span>
<span class="line"><span style="color:#61AFEF">    -0.2</span><span style="color:#D19A66">    50231</span></span>
<span class="line"><span style="color:#61AFEF">    -0.1</span><span style="color:#D19A66">    49658</span></span>
<span class="line"><span style="color:#61AFEF">    0</span><span style="color:#D19A66">       50177</span></span>
<span class="line"><span style="color:#61AFEF">    0.1</span><span style="color:#D19A66">     49861</span></span>
<span class="line"><span style="color:#61AFEF">    0.2</span><span style="color:#D19A66">     49947</span></span>
<span class="line"><span style="color:#61AFEF">    0.3</span><span style="color:#D19A66">     50157</span></span>
<span class="line"><span style="color:#61AFEF">    0.4</span><span style="color:#D19A66">     50414</span></span>
<span class="line"><span style="color:#61AFEF">    0.5</span><span style="color:#D19A66">     50006</span></span>
<span class="line"><span style="color:#61AFEF">    0.6</span><span style="color:#D19A66">     50038</span></span>
<span class="line"><span style="color:#61AFEF">    0.7</span><span style="color:#D19A66">     49962</span></span>
<span class="line"><span style="color:#61AFEF">    0.8</span><span style="color:#D19A66">     50071</span></span>
<span class="line"><span style="color:#61AFEF">    0.9</span><span style="color:#D19A66">     49695</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了类比，我们再生成一百万个高斯伪随机数:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> gaussianStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">generate</span><span style="color:#ABB2BF">(random</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">nextGaussian).</span><span style="color:#61AFEF">mapToDouble</span><span style="color:#ABB2BF">(e </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> e);</span></span>
<span class="line"><span style="color:#E5C07B">LinkedHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Range</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> gaussianRangeCountMap </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    gaussianStream</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(e </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (e </span><span style="color:#56B6C2">&gt;=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1.0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> e </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 1.0</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000000</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">boxed</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">of)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">emptyRangeCountMap, (m, e) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, </span><span style="color:#E5C07B">m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(e) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">), Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">mergeRangeCountMaps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">gaussianRangeCountMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((k, v) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">from</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> v));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码输出的结果恰恰与我们预期结果相吻合，即: double类型的伪随机数是均匀的分配的，而double类型的高斯伪随机数应该是正态分布的。</p>
<p>附: 完整代码可点击这里获取 https://gist.github.com/bijukunjummen/8129250</p>
<p>译文链接: http://www.importnew.com/9672.html</p>
<h2><a class="header-anchor" href="#java-util-base64"><span></span></a><a href="#java-util-base64">#</a> java.util.Base64</h2>
<blockquote>
<p>Java8中java.util.Base64性能比较高，推荐使用。请参考:</p>
<ul>
<li>性能对比: https://wizardforcel.gitbooks.io/java8-new-features/content/11.html</li>
<li>源代码: http://git.oschina.net/benhail/javase8-sample</li>
</ul>
</blockquote>
<p>该类提供了一套静态方法获取下面三种BASE64编解码器:</p>
<p>1)Basic编码: 是标准的BASE64编码，用于处理常规的需求</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 编码</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> asB64 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"some string"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(asB64);</span><span style="color:#7F848E;font-style:italic"> // 输出为: c29tZSBzdHJpbmc=</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 解码</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75">[] asBytes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDecoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">decode</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"c29tZSBzdHJpbmc="</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(asBytes, </span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic"> // 输出为: some string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)URL编码: 使用下划线替换URL里面的反斜线“/”</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> urlEncoded </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUrlEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"subjects?abcd"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Using URL Alphabet: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> urlEncoded);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 输出为:</span></span>
<span class="line"><span style="color:#E5C07B">Using</span><span style="color:#E5C07B"> URL</span><span style="color:#E06C75"> Alphabet</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> c3ViamVjdHM_YWJjZA</span><span style="color:#56B6C2">==</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3)MIME编码: 使用基本的字母数字产生BASE64输出，而且对MIME格式友好: 每一行输出不超过76个字符，而且每行以“\r\n”符结束。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">StringBuilder</span><span style="color:#E06C75"> sb </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuilder</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">t) {</span></span>
<span class="line"><span style="color:#E5C07B">  sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UUID</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">randomUUID</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75">[] toEncode </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> mimeEncoded </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMimeEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(toEncode);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(mimeEncoded);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 新特性知识体系</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 新特性知识体系</source>
      <description>Java 8 新特性详解汇总。 Java 新特性的增加都是来源于 JSR或者JEP JSR论坛: https://jcp.org/en/jsr/detail?id=335 Java8 新特性知识体系 知识体系 相关文章 函数编程 Optional类 default方法 类型注解 重复注解 类型推断 JRE 精简 LocalDate/LocalDateT...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java 8 新特性详解汇总。</p>
<ul>
<li>Java 新特性的增加都是来源于 JSR或者JEP</li>
<li>JSR论坛: https://jcp.org/en/jsr/detail?id=335</li>
</ul>
</blockquote>
<ul>
<li>Java8 新特性知识体系
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li>相关文章
<ul>
<li><a href="#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B">函数编程</a></li>
<li><a href="#optional%E7%B1%BB">Optional类</a></li>
<li><a href="#default%E6%96%B9%E6%B3%95">default方法</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">类型注解</a></li>
<li><a href="#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">重复注解</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD">类型推断</a></li>
<li><a href="#jre-%E7%B2%BE%E7%AE%80">JRE 精简</a></li>
<li><a href="#localdatelocaldatetime">LocalDate/LocalDateTime</a></li>
<li><a href="#javafx">JavaFX</a></li>
<li><a href="#permgen%E7%A7%BB%E9%99%A4">PermGen移除</a></li>
<li><a href="#stampedlock">StampedLock</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0">其它更新</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#相关文章"><span></span></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">#</a> 相关文章</h2>
<h3><a class="header-anchor" href="#函数编程"><span></span></a><a href="#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B">#</a> 函数编程</h3>
<blockquote>
<p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p>
</blockquote>
<ul>
<li>Lambda 表达式的特点</li>
<li>Lambda 表达式使用和Stream下的接口</li>
<li>函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.</li>
<li>Comparator排序为例贯穿所有知识点。</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 函数编程</a></p>
<h3><a class="header-anchor" href="#optional类"><span></span></a><a href="#optional%E7%B1%BB">#</a> Optional类</h3>
<blockquote>
<p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
</blockquote>
<ul>
<li>Optional类的意义</li>
<li>Optional类有哪些常用的方法</li>
<li>Optional举例贯穿所有知识点</li>
<li>多重类嵌套Null值判断</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - Optional类</a></p>
<h3><a class="header-anchor" href="#default方法"><span></span></a><a href="#default%E6%96%B9%E6%B3%95">#</a> default方法</h3>
<blockquote>
<p>默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java 8的lambdas表达式时，提供给我们一个平滑的过渡体验。</p>
</blockquote>
<ul>
<li>为什么会出现默认方法?</li>
<li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li>
<li>多重实现的默认方法冲突怎么办?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - default方法</a></p>
<h3><a class="header-anchor" href="#类型注解"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">#</a> 类型注解</h3>
<blockquote>
<p>那充满争议的类型注解究竟是什么? 复杂还是便捷?</p>
</blockquote>
<ul>
<li>注解在JDK哪个版本中出现的，可以在哪些地方用注解?</li>
<li>什么是类型注解?</li>
<li>类型注解的作用是什么?</li>
<li>为什么会出现类型注解(JSR308)?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 类型注解</a></p>
<h3><a class="header-anchor" href="#重复注解"><span></span></a><a href="#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">#</a> 重复注解</h3>
<ul>
<li>Java8之前对重复注解是怎么做的?</li>
<li>Java8对重复注解添加了什么支持?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 重复注解</a></p>
<h3><a class="header-anchor" href="#类型推断"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD">#</a> 类型推断</h3>
<blockquote>
<p>导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。</p>
</blockquote>
<ul>
<li>什么是泛型?</li>
<li>Java7对泛型推断做了哪些优化?</li>
<li>Java8对此有做了哪些优化?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 类型推断优化</a></p>
<h3><a class="header-anchor" href="#jre-精简"><span></span></a><a href="#jre-%E7%B2%BE%E7%AE%80">#</a> JRE 精简</h3>
<blockquote>
<p>模块化特性是javaer所期待的特性, 一个占用资源少的JRE运行环境，紧凑的JRE特性的出现，能带来以后的物联网的发展，甚至还是会有大量的java应用程序出现在物联网上面。</p>
</blockquote>
<ul>
<li>为什么精简Java8 JRE，及好处是啥?</li>
<li>紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是?</li>
<li>在不同平台上如何编译等?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - JRE精简</a></p>
<h3><a class="header-anchor" href="#localdate-localdatetime"><span></span></a><a href="#localdate-localdatetime">#</a> LocalDate/LocalDateTime</h3>
<blockquote>
<p>Date/Calendar槽点, java8对其进行了重写。</p>
</blockquote>
<ul>
<li>Java8之前的Date有哪些槽点? (Calendar的所有属性都是可变的，SimpleDateFormat的线程不安全性等)</li>
<li>Java8之前使用哪些常用的第三方时间库?</li>
<li>Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?</li>
<li>其它语言时间库?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - LocalDate/LocalDateTime</a></p>
<h3><a class="header-anchor" href="#javafx"><span></span></a><a href="#javafx">#</a> JavaFX</h3>
<blockquote>
<p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。</p>
</blockquote>
<ul>
<li>javaFX发展历程?</li>
<li>Java8对其增加了哪些特性?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - JavaFX</a></p>
<h3><a class="header-anchor" href="#permgen移除"><span></span></a><a href="#permgen%E7%A7%BB%E9%99%A4">#</a> PermGen移除</h3>
<blockquote>
<p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域。PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p>
</blockquote>
<ul>
<li>Java8之前 “java.lang.OutOfMemoryError: PermGen space”是怎么引起的，怎么解决的?</li>
<li>新增加的元空间(Metaspace)包含哪些东西，画出图</li>
<li>元空间(Metaspace)和PermGen对比</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 移除Permgen</a></p>
<h3><a class="header-anchor" href="#stampedlock"><span></span></a><a href="#stampedlock">#</a> StampedLock</h3>
<ul>
<li>为什么会引入StampedLock</li>
<li>用Lock写悲观锁和乐观锁举例</li>
<li>用StampedLock写悲观锁和乐观锁举例</li>
<li>性能对比</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - StampedLock</a></p>
<h3><a class="header-anchor" href="#其它更新"><span></span></a><a href="#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0">#</a> 其它更新</h3>
<ul>
<li>Java8 还有哪些其它更新
<ul>
<li>字符串</li>
<li>Base64</li>
<li>Random</li>
<li>Nashorn</li>
<li>...</li>
</ul>
</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 其它更新</a></p>
<h2><a class="header-anchor" href="#参考文档"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">#</a> 参考文档</h2>
<blockquote>
<p>主要参考自以下文档:</p>
</blockquote>
<ul>
<li>Java 8 教程汇总 https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-overview.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 移除Permgen</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%A7%BB%E9%99%A4Permgen.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%A7%BB%E9%99%A4Permgen.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 移除Permgen</source>
      <description>本文主要介绍PermGen space，及Java 8 - 移除Permgen。 Java8 移除Permgen PermGen space简单介绍 元空间(MetaSpace)一种新的内存空间诞生 PermGen vs. Metaspace 运行时比较 JDK 1.7 @64-bit – PermGen 耗尽测试 JDK 1.8 @64-bit – ...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍PermGen space，及Java 8 - 移除Permgen。</p>
</blockquote>
<ul>
<li>Java8 移除Permgen
<ul>
<li><a href="#permgen-space%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">PermGen space简单介绍</a></li>
<li><a href="#%E5%85%83%E7%A9%BA%E9%97%B4metaspace%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%9E%E7%94%9F">元空间(MetaSpace)一种新的内存空间诞生</a></li>
<li>PermGen vs. Metaspace 运行时比较
<ul>
<li><a href="#jdk-17-64-bit-%E2%80%93-permgen-%E8%80%97%E5%B0%BD%E6%B5%8B%E8%AF%95">JDK 1.7 @64-bit – PermGen 耗尽测试</a></li>
<li><a href="#jdk-18-64-bit-%E2%80%93-metaspace%E5%A4%A7%E5%B0%8F%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E6%B5%8B%E8%AF%95">JDK 1.8 @64-bit – Metaspace大小动态调整测试</a></li>
<li><a href="#jdk-18-64-bit-%E2%80%93-metaspace-%E5%8F%97%E9%99%90%E6%B5%8B%E8%AF%95">JDK 1.8 @64-bit – Metaspace 受限测试</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>很多开发者都在其系统中见过“java.lang.OutOfMemoryError: PermGen space”这一问题。这往往是由类加载器相关的内存泄漏以及新类加载器的创建导致的，通常出现于代码热部署时。相对于正式产品，该问题在开发机上出现的频率更高，在产品中最常见的“问题”是默认值太低了。常用的解决方法是将其设置为256MB或更高。</p>
</blockquote>
<h2><a class="header-anchor" href="#permgen-space简单介绍"><span></span></a><a href="#permgen-space%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">#</a> PermGen space简单介绍</h2>
<p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域，说说为什么会内存益出: 这一部分用于存放Class和Meta的信息,Class在被 Load的时候被放入PermGen space区域，它和和存放Instance的Heap区域不同,所以如果你的APP会LOAD很多CLASS的话,就很可能出现PermGen space错误。这种错误常见在web服务器对JSP进行pre compile的时候。</p>
<p>JVM 种类有很多，比如 Oralce-Sun Hotspot, Oralce JRockit, IBM J9, Taobao JVM(淘宝好样的！)等等。当然武林盟主是Hotspot了，这个毫无争议。需要注意的是，PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p>
<h2><a class="header-anchor" href="#元空间-metaspace-一种新的内存空间诞生"><span></span></a><a href="#%E5%85%83%E7%A9%BA%E9%97%B4-metaspace-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%9E%E7%94%9F">#</a> 元空间(MetaSpace)一种新的内存空间诞生</h2>
<p>JDK8 HotSpot JVM 将移除永久区，使用本地内存来存储类元数据信息并称之为: 元空间(Metaspace)；这与Oracle JRockit 和IBM JVM’s很相似，如下图所示</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这意味着不会再有java.lang.OutOfMemoryError: PermGen问题，也不再需要你进行调优及监控内存空间的使用……但请等等，这么说还为时过早。在默认情况下，这些改变是透明的，接下来我们的展示将使你知道仍然要关注类元数据内存的占用。请一定要牢记，这个新特性也不能神奇地消除类和类加载器导致的内存泄漏。</p>
<p>java8中metaspace总结如下:</p>
<ul>
<li>PermGen 空间的状况</li>
</ul>
<p>这部分内存空间将全部移除。</p>
<p>JVM的参数: PermSize 和 MaxPermSize 会被忽略并给出警告(如果在启用时设置了这两个参数)。</p>
<ul>
<li>Metaspace 内存分配模型</li>
</ul>
<p>大部分类元数据都在本地内存中分配。</p>
<p>用于描述类元数据的“klasses”已经被移除。</p>
<ul>
<li>Metaspace 容量</li>
</ul>
<p>默认情况下，类元数据只受可用的本地内存限制(容量取决于是32位或是64位操作系统的可用虚拟内存大小)。</p>
<p>新参数(MaxMetaspaceSize)用于限制本地内存分配给类元数据的大小。如果没有指定这个参数，元空间会在运行时根据需要动态调整。</p>
<ul>
<li>Metaspace 垃圾回收</li>
</ul>
<p>对于僵死的类及类加载器的垃圾回收将在元数据使用达到“MaxMetaspaceSize”参数的设定值时进行。</p>
<p>适时地监控和调整元空间对于减小垃圾回收频率和减少延时是很有必要的。持续的元空间垃圾回收说明，可能存在类、类加载器导致的内存泄漏或是大小设置不合适。</p>
<ul>
<li>Java 堆内存的影响</li>
</ul>
<p>一些杂项数据已经移到Java堆空间中。升级到JDK8之后，会发现Java堆 空间有所增长。</p>
<ul>
<li>Metaspace 监控</li>
</ul>
<p>元空间的使用情况可以从HotSpot1.8的详细GC日志输出中得到。</p>
<p>Jstat 和 JVisualVM两个工具，在使用b75版本进行测试时，已经更新了，但是还是能看到老的PermGen空间的出现。</p>
<p>前面已经从理论上充分说明，下面让我们通过“泄漏”程序进行新内存空间的观察……</p>
<h2><a class="header-anchor" href="#permgen-vs-metaspace-运行时比较"><span></span></a><a href="#permgen-vs-metaspace-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%AF%94%E8%BE%83">#</a> PermGen vs. Metaspace 运行时比较</h2>
<p>为了更好地理解Metaspace内存空间的运行时行为，</p>
<p>将进行以下几种场景的测试:</p>
<ul>
<li>使用JDK1.7运行Java程序，监控并耗尽默认设定的85MB大小的PermGen内存空间。</li>
<li>使用JDK1.8运行Java程序，监控新Metaspace内存空间的动态增长和垃圾回收过程。</li>
<li>使用JDK1.8运行Java程序，模拟耗尽通过“MaxMetaspaceSize”参数设定的128MB大小的Metaspace内存空间。</li>
</ul>
<p>首先建立了一个模拟PermGen OOM的代码</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ClassA</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD"> public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // do nothing</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个简单的ClassA，把他编译成class字节码放到D: /classes下面，测试代码中用URLClassLoader来加载此类型上面类编译成class</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 模拟PermGen OOM</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> benhail</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OOMTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //准备url</span></span>
<span class="line"><span style="color:#E5C07B">            URL</span><span style="color:#E06C75"> url</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"D:/classes"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">toURI</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">toURL</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            URL</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">urls</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> {url};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //获取有关类型加载的JMX接口</span></span>
<span class="line"><span style="color:#E5C07B">            ClassLoadingMXBean</span><span style="color:#E06C75"> loadingBean</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ManagementFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClassLoadingMXBean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //用于缓存类加载器</span></span>
<span class="line"><span style="color:#E5C07B">            List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">classLoaders</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //加载类型并缓存类加载器实例</span></span>
<span class="line"><span style="color:#E5C07B">                ClassLoader</span><span style="color:#E06C75"> classLoader</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> URLClassLoader</span><span style="color:#ABB2BF">(urls);</span></span>
<span class="line"><span style="color:#E5C07B">                classLoaders</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(classLoader);</span></span>
<span class="line"><span style="color:#E5C07B">                classLoader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ClassA"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //显示数量信息(共加载过的类型数目，当前还有效的类型数目，已经被卸载的类型数目)</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"total: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> loadingBean</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getTotalLoadedClassCount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"active: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> loadingBean</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLoadedClassCount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"unloaded: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> loadingBean</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnloadedClassCount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚拟机器参数设置如下: -verbose -verbose:gc</p>
<p>设置-verbose参数是为了获取类型加载和卸载的信息</p>
<p>设置-verbose:gc是为了获取垃圾收集的相关信息</p>
<h3><a class="header-anchor" href="#jdk-1-7-64-bit-–-permgen-耗尽测试"><span></span></a><a href="#jdk-1-7-64-bit-%E2%80%93-permgen-%E8%80%97%E5%B0%BD%E6%B5%8B%E8%AF%95">#</a> JDK 1.7 @64-bit – PermGen 耗尽测试</h3>
<p>Java1.7的PermGen默认空间为85 MB(或者可以通过-XX:MaxPermSize=XXXm指定)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以从上面的JVisualVM的截图看出: 当加载超过6万个类之后，PermGen被耗尽。我们也能通过程序和GC的输出观察耗尽的过程。</p>
<p>程序输出(摘取了部分)</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2">......</span></span>
<span class="line"><span style="color:#ABB2BF">[Loaded ClassA from file:/D:/classes/]</span></span>
<span class="line"><span style="color:#61AFEF">total:</span><span style="color:#D19A66"> 64887</span></span>
<span class="line"><span style="color:#61AFEF">active:</span><span style="color:#D19A66"> 64887</span></span>
<span class="line"><span style="color:#61AFEF">unloaded:</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF">[GC </span><span style="color:#D19A66">245041</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">213978K(</span><span style="color:#D19A66">536768</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0597188</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[Full GC </span><span style="color:#D19A66">213978</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211425K(</span><span style="color:#D19A66">644992</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.6456638</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[GC </span><span style="color:#D19A66">211425</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211425K(</span><span style="color:#D19A66">656448</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0086696</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[Full GC </span><span style="color:#D19A66">211425</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211411K(</span><span style="color:#D19A66">731008</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.6924754</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[GC </span><span style="color:#D19A66">211411</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211411K(</span><span style="color:#D19A66">726528</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0088992</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#56B6C2">...............</span></span>
<span class="line"><span style="color:#61AFEF">java.lang.OutOfMemoryError:</span><span style="color:#98C379"> PermGen</span><span style="color:#98C379"> space</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#jdk-1-8-64-bit-–-metaspace大小动态调整测试"><span></span></a><a href="#jdk-1-8-64-bit-%E2%80%93-metaspace%E5%A4%A7%E5%B0%8F%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E6%B5%8B%E8%AF%95">#</a> JDK 1.8 @64-bit – Metaspace大小动态调整测试</h3>
<p>Java的Metaspace空间: 不受限制 (默认)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上面的截图可以看到，JVM Metaspace进行了动态扩展，本地内存的使用由20MB增长到646MB，以满足程序中不断增长的类数据内存占用需求。我们也能观察到JVM的垃圾回收事件—试图销毁僵死的类或类加载器对象。但是，由于我们程序的泄漏，JVM别无选择只能动态扩展Metaspace内存空间。程序加载超过10万个类，而没有出现OOM事件。</p>
<h3><a class="header-anchor" href="#jdk-1-8-64-bit-–-metaspace-受限测试"><span></span></a><a href="#jdk-1-8-64-bit-%E2%80%93-metaspace-%E5%8F%97%E9%99%90%E6%B5%8B%E8%AF%95">#</a> JDK 1.8 @64-bit – Metaspace 受限测试</h3>
<p>Java的Metaspace空间: 128MB(-XX:MaxMetaspaceSize=128m)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以从上面的JVisualVM的截图看出: 当加载超过2万个类之后，Metaspace被耗尽；与JDK1.7运行时非常相似。我们也能通过程序和GC的输出观察耗尽的过程。另一个有趣的现象是，保留的原生内存占用量是设定的最大大小两倍之多。这可能表明，如果可能的话，可微调元空间容量大小策略，来避免本地内存的浪费。</p>
<p>从Java程序的输出中看到如下异常。</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">[Loaded ClassA from file:/D:/classes/]</span></span>
<span class="line"><span style="color:#61AFEF">total:</span><span style="color:#D19A66"> 21393</span></span>
<span class="line"><span style="color:#61AFEF">active:</span><span style="color:#D19A66"> 21393</span></span>
<span class="line"><span style="color:#61AFEF">unloaded:</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF">[GC (Metadata GC Threshold) </span><span style="color:#D19A66">64306</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">57010K(</span><span style="color:#D19A66">111616</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0145502</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[Full GC (Metadata GC Threshold) </span><span style="color:#D19A66">57010</span><span style="color:#ABB2BF">K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">56810K(</span><span style="color:#D19A66">122368</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.1068084</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#61AFEF">java.lang.OutOfMemoryError:</span><span style="color:#98C379"> Metaspace</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在设置了MaxMetaspaceSize的情况下，该空间的内存仍然会耗尽，进而引发“java.lang.OutOfMemoryError: Metadata space”错误。因为类加载器的泄漏仍然存在，而通常Java又不希望无限制地消耗本机内存，因此设置一个类似于MaxPermSize的限制看起来也是合理的。</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<ul>
<li>之前不管是不是需要，JVM都会吃掉那块空间……如果设置得太小，JVM会死掉；如果设置得太大，这块内存就被JVM浪费了。理论上说，现在你完全可以不关注这个，因为JVM会在运行时自动调校为“合适的大小”；</li>
<li>提高Full GC的性能，在Full GC期间，Metadata到Metadata pointers之间不需要扫描了，别小看这几纳秒时间；</li>
<li>隐患就是如果程序存在内存泄露，像OOMTest那样，不停的扩展metaspace的空间，会导致机器的内存不足，所以还是要有必要的调试和监控。</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 类型推断优化</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 类型推断优化</source>
      <description>理解Java 8 类型推断需理解几个问题: 什么是泛型 Java7对泛型推断做了哪些优化 Java8对此有做了哪些优化 Java8 类型推断优化 简单理解泛型 泛型的尴尬 java7的泛型类型推断改进 Java8的泛型类型推断改进 总结 # 简单理解泛型 泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 类型推断需理解几个问题:</p>
<ul>
<li>什么是泛型</li>
<li>Java7对泛型推断做了哪些优化</li>
<li>Java8对此有做了哪些优化</li>
</ul>
</blockquote>
<ul>
<li>Java8 类型推断优化
<ul>
<li><a href="#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">简单理解泛型</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC">泛型的尴尬</a></li>
<li><a href="#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">java7的泛型类型推断改进</a></li>
<li><a href="#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">Java8的泛型类型推断改进</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#简单理解泛型"><span></span></a><a href="#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">#</a> 简单理解泛型</h2>
<p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。</p>
<p>理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> box </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">box</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Apple</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">Apple</span><span style="color:#E06C75"> apple </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> box</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码自身已表达的很清楚: box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Apple</span><span style="color:#E06C75"> apple </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Apple)</span><span style="color:#E5C07B">box</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#泛型的尴尬"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC">#</a> 泛型的尴尬</h2>
<p>泛型的最大优点是提供了程序的类型安全同时可以向后兼容，但也有尴尬的地方，就是每次定义时都要写明泛型的类型，这样显示指定不仅感觉有些冗长，最主要是很多程序员不熟悉泛型，因此很多时候不能够给出正确的类型参数，现在通过编译器自动推断泛型的参数类型，能够减少这样的情况，并提高代码可读性。</p>
<h2><a class="header-anchor" href="#java7的泛型类型推断改进"><span></span></a><a href="#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">#</a> java7的泛型类型推断改进</h2>
<p>在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> myMap </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可能觉得:老子在声明变量的的时候已经指明了参数类型，为毛还要在初始化对象时再指定? 幸好，在Java SE 7中，这种方式得以改进，现在你可以使用如下语句进行声明并赋值:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> myMap </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //注意后面的"&lt;&gt;"</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这条语句中，编译器会根据变量声明时的泛型类型自动推断出实例化HashMap时的泛型类型。再次提醒一定要注意new HashMap后面的“&lt;&gt;”，只有加上这个“&lt;&gt;”才表示是自动类型推断，否则就是非泛型类型的HashMap，并且在使用编译器编译源代码时会给出一个警告提示。</p>
<p>但是: Java SE 7在创建泛型实例时的类型推断是有限制的: 只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。例如: 下面的例子在java 7无法正确编译(但现在在java8里面可以编译，因为根据方法参数来自动推断泛型的类型):</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"A"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">// 由于addAll期望获得Collection&lt;? extends String&gt;类型的参数，因此下面的语句无法通过</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAll</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#java8的泛型类型推断改进"><span></span></a><a href="#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">#</a> Java8的泛型类型推断改进</h2>
<p>java8里面泛型的目标类型推断主要2个:</p>
<p>1.支持通过方法上下文推断泛型目标类型</p>
<p>2.支持在方法调用链路当中，泛型类型推断传递到最后一个方法</p>
<p>让我们看看官网的例子</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">   static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> nil</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { ... };</span></span>
<span class="line"><span style="color:#C678DD">   static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> cons</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Z</span><span style="color:#E06C75;font-style:italic"> head</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">tail</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { ... };</span></span>
<span class="line"><span style="color:#E5C07B">   E</span><span style="color:#61AFEF"> head</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { ... }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据JEP101的特性，我们在调用上面方法的时候可以这样写</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//通过方法赋值的目标参数来自动推断泛型的类型</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nil</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//而不是显示的指定类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//List&lt;String&gt; l = List.&lt;String&gt;nil();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//通过前面方法参数类型推断泛型的类型</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cons</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">42</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nil</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//而不是显示的指定类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//List.cons(42, List.&lt;Integer&gt;nil());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>以上是JEP101的特性内容了，Java作为静态语言的代表者，可以说类型系统相当丰富。导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。 虽然说是小进步，但对于我们天天写代码的程序员，肯定能带来巨大的作用，至少心情更愉悦了</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 类型注解</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 类型注解</source>
      <description>理解Java 8 类型注解需理解几个问题: 注解在JDK哪个版本中出现的，可以在哪些地方用注解? 什么是类型注解? 类型注解的作用是什么? 为什么会出现类型注解(JSR308)? Java8 类型注解 什么是类型注解 类型注解的作用 类型注解向下兼容的解决方案 关于JSR 308 总结 # 什么是类型注解 注解大家都知道，从java5开始加入这一特性，...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 类型注解需理解几个问题:</p>
<ul>
<li>注解在JDK哪个版本中出现的，可以在哪些地方用注解?</li>
<li>什么是类型注解?</li>
<li>类型注解的作用是什么?</li>
<li>为什么会出现类型注解(JSR308)?</li>
</ul>
</blockquote>
<ul>
<li>Java8 类型注解
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">什么是类型注解</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%9C%E7%94%A8">类型注解的作用</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">类型注解向下兼容的解决方案</a></li>
<li><a href="#%E5%85%B3%E4%BA%8Ejsr-308">关于JSR 308</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#什么是类型注解"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">#</a> 什么是类型注解</h2>
<blockquote>
<p>注解大家都知道，从java5开始加入这一特性，发展到现在已然是遍地开花，在很多框架中得到了广泛的使用，用来简化程序中的配置。那充满争议的类型注解究竟是什么? 复杂还是便捷?</p>
</blockquote>
<ol>
<li>在java 8之前，注解只能是在声明的地方所使用，比如类，方法，属性；</li>
<li>java 8里面，注解可以应用在任何地方，比如:</li>
</ol>
<p>创建类实例</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">new</span><span style="color:#E06C75"> @</span><span style="color:#E5C07B">Interned</span><span style="color:#61AFEF"> MyObject</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型映射</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">myString </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E06C75"> String) str</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>implements 语句中</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> UnmodifiableList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E06C75"> @</span><span style="color:#E5C07B">Readonly</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">@</span><span style="color:#E5C07B">Readonly</span><span style="color:#E5C07B"> T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75"> … </span><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>throw exception声明</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> monitorTemperature</span><span style="color:#E06C75">() throws </span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Critical</span><span style="color:#E06C75"> TemperatureException { … }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，<strong>类型注解只是语法而不是语义，并不会影响java的编译时间，加载时间，以及运行时间，也就是说，编译成class文件的时候并不包含类型注解</strong>。</p>
<h2><a class="header-anchor" href="#类型注解的作用"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%9C%E7%94%A8">#</a> 类型注解的作用</h2>
<p>先看看下面代码</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">emptyList</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"One"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"hello"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">console</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码编译是通过的，但运行是会分别报UnsupportedOperationException； NumberFormatException；NullPointerException异常，这些都是runtime error；</p>
<p>类型注解被用来支持在Java的程序中做强类型检查。配合插件式的check framework，可以在编译的时候检测出runtime error，以提高代码质量。这就是类型注解的作用了。</p>
<p>check framework是第三方工具，配合Java的类型注解效果就是1+1&gt;2。它可以嵌入到javac编译器里面，可以配合ant和maven使用, 地址是http://types.cs.washington.edu/checker-framework/。 check framework可以找到类型注解出现的地方并检查，举个简单的例子:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> checkers.nullness.quals.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GetStarted</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> sample</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">NonNull</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> ref</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用javac编译上面的类</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">javac</span><span style="color:#D19A66"> -processor</span><span style="color:#98C379"> checkers.nullness.NullnessChecker</span><span style="color:#98C379"> GetStarted.java</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译是通过，但如果修改成</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> ref </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次编译，则出现</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">GetStarted.java:5:</span><span style="color:#98C379"> incompatible</span><span style="color:#98C379"> types.</span></span>
<span class="line"><span style="color:#61AFEF">found</span><span style="color:#98C379">   :</span><span style="color:#98C379"> @Nullable</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">nulltyp</span><span style="color:#ABB2BF">e&gt;</span></span>
<span class="line"><span style="color:#61AFEF">required:</span><span style="color:#98C379"> @NonNull</span><span style="color:#98C379"> Object</span></span>
<span class="line"><span style="color:#61AFEF">        @NonNull</span><span style="color:#98C379"> Object</span><span style="color:#98C379"> ref</span><span style="color:#98C379"> =</span><span style="color:#98C379"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">                              ^</span></span>
<span class="line"><span style="color:#61AFEF">1</span><span style="color:#98C379"> error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#类型注解向下兼容的解决方案"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">#</a> 类型注解向下兼容的解决方案</h2>
<p>如果你不想使用类型注解检测出来错误，则不需要processor，直接javac GetStarted.java是可以编译通过的，这是在java 8 with Type Annotation Support版本里面可以，但java 5,6,7版本都不行，因为javac编译器不知道@NonNull是什么东西，但check framework 有个向下兼容的解决方案，就是将类型注解nonnull用/**/注释起来，比如上面例子修改为</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> checkers.nullness.quals.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GetStarted</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> sample</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*@NonNull*/</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> ref</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样javac编译器就会忽略掉注释块，但用check framework里面的javac编译器同样能够检测出nonnull错误。 通过类型注解+check framework我们可以看到，现在runtime error可以在编译时候就能找到。</p>
<h2><a class="header-anchor" href="#关于jsr-308"><span></span></a><a href="#%E5%85%B3%E4%BA%8Ejsr-308">#</a> 关于JSR 308</h2>
<p>JSR 308想要解决在Java 1.5注解中出现的两个问题:</p>
<ul>
<li>在句法上对注解的限制: 只能把注解写在声明的地方</li>
<li>类型系统在语义上的限制: 类型系统还做不到预防所有的bug</li>
</ul>
<p>JSR 308 通过如下方法解决上述两个问题:</p>
<ul>
<li>对Java语言的句法进行扩充，允许注解出现在更多的位置上。包括: 方法接收器(method receivers，译注: 例public int size() @Readonly { … })，泛型参数，数组，类型转换，类型测试，对象创建，类型参数绑定，类继承和throws子句。其实就是类型注解，现在是java 8的一个特性</li>
<li>通过引入可插拔的类型系统(pluggable type systems)能够创建功能更强大的注解处理器。类型检查器对带有类型限定注解的源码进行分析，一旦发现不匹配等错误之处就会产生警告信息。其实就是check framework</li>
</ul>
<p>对JSR308，有人反对，觉得更复杂更静态了，比如</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NotEmpty</span><span style="color:#E5C07B"> List</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E06C75"> String</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> strings </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>换成动态语言为</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">var</span><span style="color:#E06C75"> strings </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> [</span><span style="color:#98C379">"one"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "two"</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有人赞成，说到底，代码才是“最根本”的文档。代码中包含的注解清楚表明了代码编写者的意图。当没有及时更新或者有遗漏的时候，恰恰是注解中包含的意图信息，最容易在其他文档中被丢失。而且将运行时的错误转到编译阶段，不但可以加速开发进程，还可以节省测试时检查bug的时间。</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>并不是人人都喜欢这个特性，特别是动态语言比较流行的今天，所幸，java 8并不强求大家使用这个特性，反对的人可以不使用这一特性，而对代码质量有些要求比较高的人或公司可以采用JSR 308，毕竟代码才是“最基本”的文档，这句话我是赞同的。虽然代码会增多，但可以使你的代码更具有表达意义。对这个特性有何看法，大家各抒己见。。。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 重复注解</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 重复注解</source>
      <description>理解Java 8 重复注解需理解几个问题: Jdk8之前对重复注解是怎么做的? Jdk8对重复注解添加了什么支持? Java8 重复注解 什么是重复注解 JDK8之前 Jdk8重复注解 总结 # 什么是重复注解 允许在同一申明类型(类，属性，或方法)的多次使用同一个注解 # JDK8之前 java 8之前也有重复使用注解的解决方案，但可读性不是很好，比...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 重复注解需理解几个问题:</p>
<ul>
<li>Jdk8之前对重复注解是怎么做的?</li>
<li>Jdk8对重复注解添加了什么支持?</li>
</ul>
</blockquote>
<ul>
<li>Java8 重复注解
<ul>
<li>什么是重复注解
<ul>
<li><a href="#jdk8%E4%B9%8B%E5%89%8D">JDK8之前</a></li>
<li><a href="#jdk8%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">Jdk8重复注解</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#什么是重复注解"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">#</a> 什么是重复注解</h2>
<p>允许在同一申明类型(类，属性，或方法)的多次使用同一个注解</p>
<h3><a class="header-anchor" href="#jdk8之前"><span></span></a><a href="#jdk8%E4%B9%8B%E5%89%8D">#</a> JDK8之前</h3>
<p>java 8之前也有重复使用注解的解决方案，但可读性不是很好，比如下面的代码:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authority</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">     String</span><span style="color:#61AFEF"> role</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authorities</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Authority</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">value</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RepeatAnnotationUseOldVersion</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Authorities</span><span style="color:#E06C75">({</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Admin"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,@</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Manager"</span><span style="color:#E06C75">)})</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomeThing</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由另一个注解来存储重复注解，在使用时候，用存储注解Authorities来扩展重复注解。</p>
<h3><a class="header-anchor" href="#jdk8重复注解"><span></span></a><a href="#jdk8%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">#</a> Jdk8重复注解</h3>
<p>我们再来看看java 8里面的做法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Repeatable</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Authorities</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authority</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">     String</span><span style="color:#61AFEF"> role</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authorities</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Authority</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">value</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RepeatAnnotationUseNewVersion</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Admin"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Manager"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomeThing</span><span style="color:#ABB2BF">(){ }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的地方是，创建重复注解Authority时，加上@Repeatable,指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解。从上面例子看出，java 8里面做法更适合常规的思维，可读性强一点</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>JEP120没有太多内容，是一个小特性，仅仅是为了提高代码可读性。这次java 8对注解做了2个方面的改进(JEP 104,JEP120)，相信注解会比以前使用得更加频繁了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 默认方法</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 默认方法</source>
      <description>理解Java 8 默认方法需理解几个问题: 为什么会出现默认方法? 接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别? 多重实现的默认方法冲突怎么办? Java8 默认方法 什么是默认方法，为什么要有默认方法 先上例子 什么是默认方法 为什么出现默认方法 java 8抽象类与接口对比 多重继承的冲突 举例子 总结 # 什么是默认方法，为什么...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 默认方法需理解几个问题:</p>
<ul>
<li>为什么会出现默认方法?</li>
<li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li>
<li>多重实现的默认方法冲突怎么办?</li>
</ul>
</blockquote>
<ul>
<li>Java8 默认方法
<ul>
<li>什么是默认方法，为什么要有默认方法
<ul>
<li><a href="#%E5%85%88%E4%B8%8A%E4%BE%8B%E5%AD%90">先上例子</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">什么是默认方法</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BA%E7%8E%B0%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">为什么出现默认方法</a></li>
</ul>
</li>
<li><a href="#java-8%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94">java 8抽象类与接口对比</a></li>
<li>多重继承的冲突
<ul>
<li><a href="#%E4%B8%BE%E4%BE%8B%E5%AD%90">举例子</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#什么是默认方法-为什么要有默认方法"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">#</a> 什么是默认方法，为什么要有默认方法</h2>
<h3><a class="header-anchor" href="#先上例子"><span></span></a><a href="#%E5%85%88%E4%B8%8A%E4%BE%8B%E5%AD%90">#</a> 先上例子</h3>
<p>一个接口A，Clazz类实现了接口A。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    default</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> foo</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">       System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Calling A.foo()"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Clazz</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">       Clazz</span><span style="color:#E06C75"> clazz</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Clazz</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">       clazz</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">foo</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//调用A.foo()</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码是可以编译的，即使Clazz类并没有实现foo()方法。在接口A中提供了foo()方法的默认实现。</p>
<h3><a class="header-anchor" href="#什么是默认方法"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">#</a> 什么是默认方法</h3>
<p>简单说，就是接口可以有实现方法，而且不需要实现类去实现其方法。只需在方法名前面加个default关键字即可。</p>
<h3><a class="header-anchor" href="#为什么出现默认方法"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BA%E7%8E%B0%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">#</a> 为什么出现默认方法</h3>
<p>为什么要有这个特性? 首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的java 8之前的集合框架没有foreach方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。</p>
<h2><a class="header-anchor" href="#java-8抽象类与接口对比"><span></span></a><a href="#java-8%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94">#</a> java 8抽象类与接口对比</h2>
<p>这一个功能特性出来后，很多同学都反应了，java 8的接口都有实现方法了，跟抽象类还有什么区别? 其实还是有的，请看下表对比。。</p>
<p>| 相同点                                                       | 不同点                                                       |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>AIO 异步IO详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/AIO%20%E5%BC%82%E6%AD%A5IO%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/AIO%20%E5%BC%82%E6%AD%A5IO%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">AIO 异步IO详解</source>
      <description>本文主要对异步IO和Java中对AIO的支持详解。 AIO 异步IO详解 异步IO JAVA对AIO的支持 JAVA AIO框架简析 代码实例 要点讲解 还有改进可能 为什么还有Netty 参考文章 # 异步IO 上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对异步IO和Java中对AIO的支持详解。</p>
</blockquote>
<ul>
<li>AIO 异步IO详解
<ul>
<li><a href="#%E5%BC%82%E6%AD%A5io">异步IO</a></li>
<li>JAVA对AIO的支持
<ul>
<li><a href="#java-aio%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90">JAVA AIO框架简析</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B">代码实例</a></li>
<li><a href="#%E8%A6%81%E7%82%B9%E8%AE%B2%E8%A7%A3">要点讲解</a></li>
<li><a href="#%E8%BF%98%E6%9C%89%E6%94%B9%E8%BF%9B%E5%8F%AF%E8%83%BD">还有改进可能</a></li>
</ul>
</li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%9C%89netty">为什么还有Netty</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#异步io"><span></span></a><a href="#%E5%BC%82%E6%AD%A5io">#</a> 异步IO</h2>
<p>上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明了IO模型是由操作系统提供支持，且这三种IO模型都是同步IO，都是采用的“应用程序不询问我，我绝不会主动通知”的方式。</p>
<p>异步IO则是采用“订阅-通知”模式: 即应用程序向操作系统注册IO监听，然后继续做自己的事情。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>和同步IO一样，异步IO也是由操作系统进行支持的。微软的windows系统提供了一种异步IO技术: IOCP(I/O Completion Port，I/O完成端口)；</p>
<p>Linux下由于没有这种异步IO技术，所以使用的是epoll(上文介绍过的一种多路复用IO技术的实现)对异步IO进行模拟。</p>
<h2><a class="header-anchor" href="#java对aio的支持"><span></span></a><a href="#java%E5%AF%B9aio%E7%9A%84%E6%94%AF%E6%8C%81">#</a> JAVA对AIO的支持</h2>
<h3><a class="header-anchor" href="#java-aio框架简析"><span></span></a><a href="#java-aio%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90">#</a> JAVA AIO框架简析</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这里通过这个结构分析要告诉各位读者JAVA AIO中类设计和操作系统的相关性</p>
<p>在文中我们一再说明JAVA AIO框架在windows下使用windows IOCP技术，在Linux下使用epoll多路复用IO技术模拟异步IO，这个从JAVA AIO框架的部分类设计上就可以看出来。例如框架中，在Windows下负责实现套接字通道的具体类是“sun.nio.ch.WindowsAsynchronousSocketChannelImpl”，其引用的IOCP类型文档注释如是:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">* Windows implementation of AsynchronousChannelGroup encapsulating an I/O </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">* completion port. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您感兴趣，当然可以去看看全部完整代码(建议从“java.nio.channels.spi.AsynchronousChannelProvider”这个类看起)。</p>
<p>特别说明一下，请注意图中的“java.nio.channels.NetworkChannel”接口，这个接口同样被JAVA NIO框架实现了，如下图所示:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#代码实例"><span></span></a><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B">#</a> 代码实例</h3>
<p>下面，我们通过一个代码示例，来讲解JAVA AIO框架的具体使用，先上代码，在针对代码编写和运行中的要点进行讲解:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> test</span><span style="color:#FFFFFF">AS</span><span style="color:#C678DD">ocket</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.UnsupportedEncodingException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.net.InetSocketAddress</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.ByteBuffer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.AsynchronousChannelGroup</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.AsynchronousServerSocketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.AsynchronousSocketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.CompletionHandler</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.ExecutorService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.Executors</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.apache.commons.logging.Log</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.apache.commons.logging.LogFactory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.apache.log4j.BasicConfigurator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SocketServer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        BasicConfigurator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configure</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> waitObject </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> args</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> Exception</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 对于使用的线程池技术，我一定要多说几句</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 1、Executors是线程池生成工具，通过这个工具我们可以很轻松的生成“固定大小的线程池”、“调度池”、“可伸缩线程数量的池”。具体请看API Doc</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 2、当然您也可以通过ThreadPoolExecutor直接生成池。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 3、这个线程池是用来得到操作系统的“IO事件通知”的，不是用来进行“得到IO数据后的业务处理的”。要进行后者的操作，您可以再使用一个池(最好不要混用)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 4、您也可以不使用线程池(不推荐)，如果决定不使用线程池，直接AsynchronousServerSocketChannel.open()就行了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * */</span></span>
<span class="line"><span style="color:#E5C07B">        ExecutorService</span><span style="color:#E06C75"> threadPool</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newFixedThreadPool</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        AsynchronousChannelGroup</span><span style="color:#E06C75"> group</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> AsynchronousChannelGroup</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withThreadPool</span><span style="color:#ABB2BF">(threadPool);</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> AsynchronousServerSocketChannel</span><span style="color:#E06C75"> serverSocket</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> AsynchronousServerSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(group);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //设置要监听的端口“0.0.0.0”代表本机所有IP设备</span></span>
<span class="line"><span style="color:#E5C07B">        serverSocket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"0.0.0.0"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">83</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //为AsynchronousServerSocketChannel注册监听，注意只是为AsynchronousServerSocketChannel通道注册监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //并不包括为 随后客户端和服务器 socketchannel通道注册的监听</span></span>
<span class="line"><span style="color:#E5C07B">        serverSocket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> ServerSocketChannelHandle</span><span style="color:#ABB2BF">(serverSocket));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //等待，以便观察现象(这个和要讲解的原理本身没有任何关系，只是为了保证守护线程不会退出)</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF">(waitObject) {</span></span>
<span class="line"><span style="color:#E5C07B">            waitObject</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 这个处理器类，专门用来响应 ServerSocketChannel 的事件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> ServerSocketChannelHandle</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> CompletionHandler</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">AsynchronousSocketChannel</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Log</span><span style="color:#E06C75"> LOGGER </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> LogFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLog</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ServerSocketChannelHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> AsynchronousServerSocketChannel</span><span style="color:#E06C75"> serverSocketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> serverSocketChannel</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ServerSocketChannelHandle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AsynchronousServerSocketChannel</span><span style="color:#E06C75;font-style:italic"> serverSocketChannel</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">serverSocketChannel</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> serverSocketChannel;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 注意，我们分别观察 this、socketChannel、attachment三个对象的id。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 来观察不同客户端连接到达时，这三个对象的变化，以说明ServerSocketChannelHandle的监听模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> completed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AsynchronousSocketChannel</span><span style="color:#E06C75;font-style:italic"> socketChannel</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Void</span><span style="color:#E06C75;font-style:italic"> attachment</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ServerSocketChannelHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"completed(AsynchronousSocketChannel result, ByteBuffer attachment)"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //每次都要重新注册监听(一次注册，一次响应)，但是由于“文件状态标示符”是独享的，所以不需要担心有“漏掉的”事件</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">serverSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(attachment, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //为这个新的socketChannel注册“read”事件，以便操作系统在收到数据并准备好后，主动通知应用程序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //在这里，由于我们要将这个客户端多次传输的数据累加起来一起处理，所以我们将一个stringbuffer对象作为一个“附件”依附在这个channel上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //</span></span>
<span class="line"><span style="color:#E5C07B">        ByteBuffer</span><span style="color:#E06C75"> readBuffer</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">50</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(readBuffer, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> StringBuffer</span><span style="color:#ABB2BF">(), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> SocketChannelReadHandle</span><span style="color:#ABB2BF">(socketChannel , readBuffer));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* (non-Javadoc)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * @see java.nio.channels.CompletionHandler#failed(java.lang.Throwable, java.lang.Object)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> failed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> exc</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Void</span><span style="color:#E06C75;font-style:italic"> attachment</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ServerSocketChannelHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"failed(Throwable exc, ByteBuffer attachment)"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 负责对每一个socketChannel的数据获取事件进行监听。&lt;p&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 重要的说明: 一个socketchannel都会有一个独立工作的SocketChannelReadHandle对象(CompletionHandler接口的实现)，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 其中又都将独享一个“文件状态标示”对象FileDescriptor、</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 一个独立的由程序员定义的Buffer缓存(这里我们使用的是ByteBuffer)、</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 所以不用担心在服务器端会出现“窜对象”这种情况，因为JAVA AIO框架已经帮您组织好了。&lt;p&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 但是最重要的，用于生成channel的对象: AsynchronousChannelProvider是单例模式，无论在哪组socketchannel，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 对是一个对象引用(但这没关系，因为您不会直接操作这个AsynchronousChannelProvider对象)。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> SocketChannelReadHandle</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> CompletionHandler</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> StringBuffer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Log</span><span style="color:#E06C75"> LOGGER </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> LogFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLog</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> AsynchronousSocketChannel</span><span style="color:#E06C75"> socketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 专门用于进行这个通道数据缓存操作的ByteBuffer&lt;br&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 当然，您也可以作为CompletionHandler的attachment形式传入。&lt;br&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 这是，在这段示例代码中，attachment被我们用来记录所有传送过来的Stringbuffer了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#E06C75"> byteBuffer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> SocketChannelReadHandle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AsynchronousSocketChannel</span><span style="color:#E06C75;font-style:italic"> socketChannel</span><span style="color:#ABB2BF"> , </span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#E06C75;font-style:italic"> byteBuffer</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> socketChannel;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> byteBuffer;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* (non-Javadoc)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * @see java.nio.channels.CompletionHandler#completed(java.lang.Object, java.lang.Object)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> completed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#E06C75;font-style:italic"> result</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StringBuffer</span><span style="color:#E06C75;font-style:italic"> historyContext</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //如果条件成立，说明客户端主动终止了TCP套接字，这时服务端终止就可以了</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(result </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"completed(Integer result, Void attachment) : 然后我们来取出通道中准备好的值"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 实际上，由于我们从Integer result知道了本次channel从操作系统获取数据总长度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 所以实际上，我们不需要切换成“读模式”的，但是为了保证编码的规范性，还是建议进行切换。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 另外，无论是JAVA AIO框架还是JAVA NIO框架，都会出现“buffer的总容量”小于“当前从操作系统获取到的总数据量”，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 但区别是，JAVA AIO框架中，我们不需要专门考虑处理这样的情况，因为JAVA AIO框架已经帮我们做了处理(做成了多次通知)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * */</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">contexts</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(contexts, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, result);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> nowContent</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(contexts , </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF"> , result , </span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            historyContext</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(nowContent);</span></span>
<span class="line"><span style="color:#E5C07B">            SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"================目前的传输结果: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> historyContext);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">UnsupportedEncodingException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //如果条件成立，说明还没有接收到“结束标记”</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">historyContext</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">indexOf</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"over"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //=========================================================================</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //          和上篇文章的代码相同，我们以“over”符号作为客户端完整信息的标记</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //=========================================================================</span></span>
<span class="line"><span style="color:#E5C07B">        SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"=======收到完整信息，开始处理业务========="</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        historyContext </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //还要继续监听(一次监听一次通知)</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">, historyContext, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* (non-Javadoc)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * @see java.nio.channels.CompletionHandler#failed(java.lang.Throwable, java.lang.Object)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> failed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> exc</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StringBuffer</span><span style="color:#E06C75;font-style:italic"> historyContext</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"=====发现客户端异常关闭，服务器将关闭TCP通道"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#要点讲解"><span></span></a><a href="#%E8%A6%81%E7%82%B9%E8%AE%B2%E8%A7%A3">#</a> 要点讲解</h3>
<p>注意在JAVA NIO框架中，我们说到了一个重要概念“selector”(选择器)。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”(选择器)了，改由channel通道直接到操作系统注册监听。</p>
<p>JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”(服务器监听通道)、“AsynchronousSocketChannel”(socket套接字通道)。但是无论哪种通道他们都有独立的fileDescriptor(文件标识符)、attachment(附件，附件可以使任意对象，类似“通道上下文”)，并被独立的SocketChannelReadHandle类实例引用。我们通过debug操作来看看它们的引用结构:</p>
<p>在测试过程中，我们启动了两个客户端(客户端用什么语言来写都行，用阻塞或者非阻塞方式也都行，只要是支持 TCP Socket套接字的就行，然后我们观察服务器端对这两个客户端通道的处理情况:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-3-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以看到，在服务器端分别为客户端1和客户端2创建的两个WindowsAsynchronousSocketChannelImpl对象为:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>客户端1: WindowsAsynchronousSocketChannelImpl: 760 | FileDescriptor: 762</p>
<p>客户端2: WindowsAsynchronousSocketChannelImpl: 792 | FileDescriptor: 797</p>
<p>接下来，我们让两个客户端发送信息到服务器端，并观察服务器端的处理情况。客户端1发来的消息和客户端2发来的消息，在服务器端的处理情况如下图所示:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>客户端1: WindowsAsynchronousSocketChannelImpl: 760 | FileDescriptor: 762 | SocketChannelReadHandle: 803 | HeapByteBuffer: 808</p>
<p>客户端2: WindowsAsynchronousSocketChannelImpl: 792 | FileDescriptor: 797 | SocketChannelReadHandle: 828 | HeapByteBuffer: 833</p>
<p>可以明显看到，服务器端处理每一个客户端通道所使用的SocketChannelReadHandle(处理器)对象都是独立的，并且所引用的SocketChannel对象都是独立的。</p>
<p>JAVA NIO和JAVA AIO框架，除了因为操作系统的实现不一样而去掉了Selector外，其他的重要概念都是存在的，例如上文中提到的Channel的概念，还有演示代码中使用的Buffer缓存方式。实际上JAVA NIO和JAVA AIO框架您可以看成是一套完整的“高并发IO处理”的实现。</p>
<h3><a class="header-anchor" href="#还有改进可能"><span></span></a><a href="#%E8%BF%98%E6%9C%89%E6%94%B9%E8%BF%9B%E5%8F%AF%E8%83%BD">#</a> 还有改进可能</h3>
<p>当然，以上代码是示例代码，目标是为了让您了解JAVA AIO框架的基本使用。所以它还有很多改造的空间，例如:</p>
<p>在生产环境下，我们需要记录这个通道上“用户的登录信息”。那么这个需求可以使用JAVA AIO中的“附件”功能进行实现。</p>
<p>记住JAVA AIO 和 JAVA NIO 框架都是要使用线程池的(当然您也可以不用)，线程池的使用原则，一定是只有业务处理部分才使用，使用后马上结束线程的执行(还回线程池或者消灭它)。JAVA AIO框架中还有一个线程池，是拿给“通知处理器”使用的，这是因为JAVA AIO框架是基于“订阅-通知”模型的，“订阅”操作可以由主线程完成，但是您总不能要求在应用程序中并发的“通知”操作也在主线程上完成吧_。</p>
<p>最好的改进方式，当然就是使用Netty或者Mina咯。</p>
<h2><a class="header-anchor" href="#为什么还有netty"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%9C%89netty">#</a> 为什么还有Netty</h2>
<ul>
<li>那么有的读者可能就会问，既然JAVA NIO / JAVA AIO已经实现了各主流操作系统的底层支持，那么为什么现在主流的JAVA NIO技术会是Netty和MINA呢? 答案很简单: 因为更好用，这里举几个方面的例子:</li>
<li>虽然JAVA NIO 和 JAVA AIO框架提供了 多路复用IO/异步IO的支持，但是并没有提供上层“信息格式”的良好封装。例如前两者并没有提供针对 Protocol Buffer、JSON这些信息格式的封装，但是Netty框架提供了这些数据格式封装(基于责任链模式的编码和解码功能)</li>
<li>要编写一个可靠的、易维护的、高性能的(注意它们的排序)NIO/AIO 服务器应用。除了框架本身要兼容实现各类操作系统的实现外。更重要的是它应该还要处理很多上层特有服务，例如: 客户端的权限、还有上面提到的信息格式封装、简单的数据读取。这些Netty框架都提供了响应的支持。</li>
<li>JAVA NIO框架存在一个poll/epoll bug: Selector doesn’t block on Selector.select(timeout)，不能block意味着CPU的使用率会变成100%(这是底层JNI的问题，上层要处理这个异常实际上也好办)。当然这个bug只有在Linux内核上才能重现。</li>
<li>这个问题在JDK 1.7版本中还没有被完全解决: http://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719。虽然Netty 4.0中也是基于JAVA NIO框架进行封装的(上文中已经给出了Netty中NioServerSocketChannel类的介绍)，但是Netty已经将这个bug进行了处理。</li>
<li>其他原因，用过Netty后，您就可以自己进行比较了。</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 之 BIO 详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E4%B9%8B%20BIO%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E4%B9%8B%20BIO%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 之 BIO 详解</source>
      <description>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。 IO 之 BIO 详解 几个重要概念 传统的BIO通信方式简介...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。</p>
</blockquote>
<ul>
<li>IO 之 BIO 详解
<ul>
<li><a href="#%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5">几个重要概念</a></li>
<li>传统的BIO通信方式简介
<ul>
<li><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84bio%E7%9A%84%E9%97%AE%E9%A2%98">传统的BIO的问题</a></li>
<li>[多线程方式 - 伪异步方式](#多线程方式</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 分类(传输，操作)</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%88%86%E7%B1%BB(%E4%BC%A0%E8%BE%93%EF%BC%8C%E6%93%8D%E4%BD%9C).html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%88%86%E7%B1%BB(%E4%BC%A0%E8%BE%93%EF%BC%8C%E6%93%8D%E4%BD%9C).html</guid>
      <source url="https://cactusli.net/rss.xml">IO 分类(传输，操作)</source>
      <description>本文主要从传输方式和数据操作两个方面分析Java IO的分类。 IO 分类(传输，操作) IO理解分类 - 从传输方式上 字节流 字符流 字节流和字符流的区别 字节转字符Input/OutputStreamReader/Writer IO理解分类 - 从数据操作上 文件(file) [数组(]) 管道操作 基本数据类型 缓冲操作 打印 对象序列化反序列...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要从<code>传输方式</code>和<code>数据操作</code>两个方面分析Java IO的分类。</p>
</blockquote>
<ul>
<li>IO 分类(传输，操作)
<ul>
<li>IO理解分类 - 从传输方式上
<ul>
<li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81">字节流</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E6%B5%81">字符流</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E5%92%8C%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB">字节流和字符流的区别</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E8%BD%AC%E5%AD%97%E7%AC%A6inputoutputstreamreaderwriter">字节转字符Input/OutputStreamReader/Writer</a></li>
</ul>
</li>
<li>IO理解分类 - 从数据操作上
<ul>
<li><a href="#%E6%96%87%E4%BB%B6file">文件(file)</a></li>
<li>[数组(<a href="#%E6%95%B0%E7%BB%84">])</a></li>
<li><a href="#%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C">管道操作</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></li>
<li><a href="#%E7%BC%93%E5%86%B2%E6%93%8D%E4%BD%9C">缓冲操作</a></li>
<li><a href="#%E6%89%93%E5%8D%B0">打印</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">对象序列化反序列化</a></li>
<li><a href="#%E8%BD%AC%E6%8D%A2">转换</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#io理解分类-从传输方式上"><span></span></a><a href="#io%E7%90%86%E8%A7%A3%E5%88%86%E7%B1%BB-%E4%BB%8E%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F%E4%B8%8A">#</a> IO理解分类 - 从传输方式上</h2>
<p>从数据传输方式或者说是运输方式角度看，可以将 IO 类分为:</p>
<ul>
<li>字节流</li>
<li>字符流</li>
</ul>
<p><code>字节</code>是个计算机看的，<code>字符</code>才是给人看的</p>
<h3><a class="header-anchor" href="#字节流"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E6%B5%81">#</a> 字节流</h3>
<p>(整体结构如下，部分派生类有缺失)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-1-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#字符流"><span></span></a><a href="#%E5%AD%97%E7%AC%A6%E6%B5%81">#</a> 字符流</h3>
<p>(整体结构如下，部分派生类有缺失)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-2-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#字节流和字符流的区别"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E5%92%8C%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> 字节流和字符流的区别</h3>
<ul>
<li>字节流读取单个字节，字符流读取单个字符(一个字符根据编码的不同，对应的字节也不同，如 UTF-8 编码中文汉字是 3 个字节，GBK编码中文汉字是 2 个字节。)</li>
<li>字节流用来处理二进制文件(图片、MP3、视频文件)，字符流用来处理文本文件(可以看做是特殊的二进制文件，使用了某种编码，人可以阅读)。</li>
</ul>
<blockquote>
<p>简而言之，字节是给计算机看的，字符才是给人看的。</p>
</blockquote>
<h3><a class="header-anchor" href="#字节转字符input-outputstreamreader-writer"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E8%BD%AC%E5%AD%97%E7%AC%A6input-outputstreamreader-writer">#</a> 字节转字符Input/OutputStreamReader/Writer</h3>
<p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</p>
<p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。</p>
<ul>
<li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li>
<li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li>
<li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节。</li>
</ul>
<p>UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端。</p>
<p>Java 使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#io理解分类-从数据操作上"><span></span></a><a href="#io%E7%90%86%E8%A7%A3%E5%88%86%E7%B1%BB-%E4%BB%8E%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8A">#</a> IO理解分类 - 从数据操作上</h2>
<p>从数据来源或者说是操作对象角度看，IO 类可以分为:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#文件-file"><span></span></a><a href="#%E6%96%87%E4%BB%B6-file">#</a> 文件(file)</h3>
<p>FileInputStream、FileOutputStream、FileReader、FileWriter</p>
<h3><a class="header-anchor" href="#数组"><span></span></a><a href="#%E6%95%B0%E7%BB%84">#</a> 数组([])</h3>
<ul>
<li>字节数组(byte[]): ByteArrayInputStream、ByteArrayOutputStream</li>
<li>字符数组(char[]): CharArrayReader、CharArrayWriter</li>
</ul>
<h3><a class="header-anchor" href="#管道操作"><span></span></a><a href="#%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C">#</a> 管道操作</h3>
<p>PipedInputStream、PipedOutputStream、PipedReader、PipedWriter</p>
<h3><a class="header-anchor" href="#基本数据类型"><span></span></a><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">#</a> 基本数据类型</h3>
<p>DataInputStream、DataOutputStream</p>
<h3><a class="header-anchor" href="#缓冲操作"><span></span></a><a href="#%E7%BC%93%E5%86%B2%E6%93%8D%E4%BD%9C">#</a> 缓冲操作</h3>
<p>BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</p>
<h3><a class="header-anchor" href="#打印"><span></span></a><a href="#%E6%89%93%E5%8D%B0">#</a> 打印</h3>
<p>PrintStream、PrintWriter</p>
<h3><a class="header-anchor" href="#对象序列化反序列化"><span></span></a><a href="#%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">#</a> 对象序列化反序列化</h3>
<p>ObjectInputStream、ObjectOutputStream</p>
<h3><a class="header-anchor" href="#转换"><span></span></a><a href="#%E8%BD%AC%E6%8D%A2">#</a> 转换</h3>
<p>InputStreamReader、OutputStreamWriter</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-1-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 常见类使用</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%B8%B8%E8%A7%81%E7%B1%BB%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%B8%B8%E8%A7%81%E7%B1%BB%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 常见类使用</source>
      <description>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。 IO 常见类使用 IO常见类的使用 File相关 字节流相关 实现逐行输出文本文件的内容 序列化 &amp; Serializable &amp; transient Java 中的网络支持: InetAddress URL Sockets Datagram 常见问题 参...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。</p>
</blockquote>
<ul>
<li>IO 常见类使用
<ul>
<li>IO常见类的使用
<ul>
<li><a href="#file%E7%9B%B8%E5%85%B3">File相关</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3">字节流相关</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">实现逐行输出文本文件的内容</a></li>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96--serializable--transient">序列化 &amp; Serializable &amp; transient</a></li>
<li>Java 中的网络支持:
<ul>
<li><a href="#inetaddress">InetAddress</a></li>
<li><a href="#url">URL</a></li>
<li><a href="#sockets">Sockets</a></li>
<li><a href="#datagram">Datagram</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#io常见类的使用"><span></span></a><a href="#io%E5%B8%B8%E8%A7%81%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8">#</a> IO常见类的使用</h2>
<p>Java 的 I/O 大概可以分成以下几类:</p>
<ul>
<li>磁盘操作: File</li>
<li>字节操作: InputStream 和 OutputStream</li>
<li>字符操作: Reader 和 Writer</li>
<li>对象操作: Serializable</li>
<li>网络操作: Socket</li>
</ul>
<h3><a class="header-anchor" href="#file相关"><span></span></a><a href="#file%E7%9B%B8%E5%85%B3">#</a> File相关</h3>
<p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。</p>
<p>递归地列出一个目录下所有文件:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> listAllFiles</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">File</span><span style="color:#E06C75"> dir) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (dir </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">exists</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isFile</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">File</span><span style="color:#E06C75"> file </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">listFiles</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">        listAllFiles</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#字节流相关"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3">#</a> 字节流相关</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> copyFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> src</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> dist) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> in </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(src)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    FileOutputStream</span><span style="color:#E06C75"> out </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#E06C75">(dist)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    byte</span><span style="color:#E06C75">[] buffer </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[</span><span style="color:#D19A66">20</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1024</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // read() 最多读取 buffer.length 个字节</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回的是实际读取的个数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回 -1 的时候表示读到 eof，即文件尾</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> !=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#实现逐行输出文本文件的内容"><span></span></a><a href="#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">#</a> 实现逐行输出文本文件的内容</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFileContent</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    FileReader</span><span style="color:#E06C75"> fileReader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileReader</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> bufferedReader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(fileReader)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> line</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((line </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> bufferedReader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(line);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在调用 BufferedReader 的 close() 方法时会去调用 Reader 的 close() 方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 因此只要一个 close() 调用即可</span></span>
<span class="line"><span style="color:#E5C07B">    bufferedReader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#序列化-serializable-transient"><span></span></a><a href="#%E5%BA%8F%E5%88%97%E5%8C%96-serializable-transient">#</a> 序列化 &amp; Serializable &amp; transient</h3>
<p>序列化就是将一个对象转换成字节序列，方便存储和传输。</p>
<ul>
<li>序列化: ObjectOutputStream.writeObject()</li>
<li>反序列化: ObjectInputStream.readObject()</li>
</ul>
<p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p>
<p><strong>Serializable</strong></p>
<p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ClassNotFoundException {</span></span>
<span class="line"><span style="color:#E5C07B">    A</span><span style="color:#E06C75"> a1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> A</span><span style="color:#E06C75">(</span><span style="color:#D19A66">123</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "abc"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> objectFile </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "file/a1"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ObjectOutputStream</span><span style="color:#E06C75"> objectOutputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ObjectOutputStream</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#E06C75">(objectFile))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    objectOutputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeObject</span><span style="color:#ABB2BF">(a1);</span></span>
<span class="line"><span style="color:#E5C07B">    objectOutputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    ObjectInputStream</span><span style="color:#E06C75"> objectInputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ObjectInputStream</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(objectFile))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    A</span><span style="color:#E06C75"> a2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (A) </span><span style="color:#E5C07B">objectInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readObject</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    objectInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a2);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> A</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> y</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">    A</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">x</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">y</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> y;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "x = "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> x </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "  "</span><span style="color:#56B6C2"> +</span><span style="color:#98C379"> "y = "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> y;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>transient</strong></p>
<p>transient 关键字可以使一些属性不会被序列化。</p>
<p>ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] elementData</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#java-中的网络支持"><span></span></a><a href="#java-%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%AF%E6%8C%81">#</a> Java 中的网络支持:</h3>
<ul>
<li>InetAddress: 用于表示网络上的硬件资源，即 IP 地址；</li>
<li>URL: 统一资源定位符；</li>
<li>Sockets: 使用 TCP 协议实现网络通信；</li>
<li>Datagram: 使用 UDP 协议实现网络通信。</li>
</ul>
<h4><a class="header-anchor" href="#inetaddress"><span></span></a><a href="#inetaddress">#</a> InetAddress</h4>
<p>没有公有的构造函数，只能通过静态方法来创建实例。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">InetAddress</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF"> host);</span></span>
<span class="line"><span style="color:#E5C07B">InetAddress</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByAddress</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] address);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#url"><span></span></a><a href="#url">#</a> URL</h4>
<p>可以直接从 URL 中读取字节流数据。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    URL</span><span style="color:#E06C75"> url </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> URL</span><span style="color:#E06C75">(</span><span style="color:#98C379">"http://www.baidu.com"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 字节流 */</span></span>
<span class="line"><span style="color:#E5C07B">    InputStream</span><span style="color:#E06C75"> is </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> url</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">openStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 字符流 */</span></span>
<span class="line"><span style="color:#E5C07B">    InputStreamReader</span><span style="color:#E06C75"> isr </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InputStreamReader</span><span style="color:#E06C75">(is</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "utf-8"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 提供缓存功能 */</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> br </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(isr)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> line</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((line </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> br</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(line);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    br</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#sockets"><span></span></a><a href="#sockets">#</a> Sockets</h4>
<ul>
<li>ServerSocket: 服务器端类</li>
<li>Socket: 客户端类</li>
<li>服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#datagram"><span></span></a><a href="#datagram">#</a> Datagram</h4>
<ul>
<li>DatagramSocket: 通信类</li>
<li>DatagramPacket: 数据包类</li>
</ul>
<h2><a class="header-anchor" href="#常见问题"><span></span></a><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">#</a> 常见问题</h2>
<ul>
<li>Java 字节读取流的read方法返回int的原因</li>
</ul>
<p>https://blog.csdn.net/congwiny/article/details/18922847</p>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>IO 模型 Unix IO 模型</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%A8%A1%E5%9E%8B%20Unix%20IO%20%E6%A8%A1%E5%9E%8B.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%A8%A1%E5%9E%8B%20Unix%20IO%20%E6%A8%A1%E5%9E%8B.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 模型 Unix IO 模型</source>
      <description>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。 IO 模型 Unix IO 模型 Unix IO 模型简介 阻塞式 I/O 非阻塞式 I/O I/O 复用 信号驱动 I/O 异步 I/O I/O 模型比较 同步 I/O 与异步 I/O 五大 I/O 模型比较 IO多路复用 IO多路复用工作模式 ...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。</p>
</blockquote>
<ul>
<li>IO 模型 Unix IO 模型
<ul>
<li>Unix IO 模型简介
<ul>
<li><a href="#%E9%98%BB%E5%A1%9E%E5%BC%8F-io">阻塞式 I/O</a></li>
<li><a href="#%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F-io">非阻塞式 I/O</a></li>
<li><a href="#io-%E5%A4%8D%E7%94%A8">I/O 复用</a></li>
<li><a href="#%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8-io">信号驱动 I/O</a></li>
<li><a href="#%E5%BC%82%E6%AD%A5-io">异步 I/O</a></li>
</ul>
</li>
<li>I/O 模型比较
<ul>
<li><a href="#%E5%90%8C%E6%AD%A5-io-%E4%B8%8E%E5%BC%82%E6%AD%A5-io">同步 I/O 与异步 I/O</a></li>
<li><a href="#%E4%BA%94%E5%A4%A7-io-%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83">五大 I/O 模型比较</a></li>
</ul>
</li>
<li>IO多路复用
<ul>
<li>IO多路复用工作模式
<ul>
<li><a href="#1-lt-%E6%A8%A1%E5%BC%8F">1. LT 模式</a></li>
<li><a href="#2-et-%E6%A8%A1%E5%BC%8F">2. ET 模式</a></li>
</ul>
</li>
<li>应用场景
<ul>
<li><a href="#1-select-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">1. select 应用场景</a></li>
<li><a href="#2-poll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">2. poll 应用场景</a></li>
<li><a href="#3-epoll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">3. epoll 应用场景</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#unix-io-模型简介"><span></span></a><a href="#unix-io-%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B">#</a> Unix IO 模型简介</h2>
<p>一个输入操作通常包括两个阶段:</p>
<ul>
<li>等待数据准备好</li>
<li>从内核向进程复制数据</li>
</ul>
<p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p>
<p>Unix 下有五种 I/O 模型:</p>
<ul>
<li>阻塞式 I/O</li>
<li>非阻塞式 I/O</li>
<li>I/O 复用(select 和 poll)</li>
<li>信号驱动式 I/O(SIGIO)</li>
<li>异步 I/O(AIO)</li>
</ul>
<h3><a class="header-anchor" href="#阻塞式-i-o"><span></span></a><a href="#%E9%98%BB%E5%A1%9E%E5%BC%8F-i-o">#</a> 阻塞式 I/O</h3>
<p>应用进程被阻塞，直到数据复制到应用进程缓冲区中才返回。</p>
<p>应该注意到，在阻塞的过程中，其它程序还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其他程序还可以执行，因此不消耗 CPU 时间，这种模型的执行效率会比较高。</p>
<p>下图中，recvfrom 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">ssize_t</span><span style="color:#61AFEF"> recvfrom</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> sockfd</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> void</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">buf</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> flags</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> struct</span><span style="color:#E06C75"> sockaddr </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">src_addr</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> socklen_t</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">addrlen</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492928416812_4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-0.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#非阻塞式-i-o"><span></span></a><a href="#%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F-i-o">#</a> 非阻塞式 I/O</h3>
<p>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询(polling)。</p>
<p>由于 CPU 要处理更多的系统调用，因此这种模型是比较低效的。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492929000361_5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#i-o-复用"><span></span></a><a href="#i-o-%E5%A4%8D%E7%94%A8">#</a> I/O 复用</h3>
<p>使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读，这一过程会被阻塞，当某一个套接字可读时返回。之后再使用 recvfrom 把数据从内核复制到进程中。</p>
<p>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。</p>
<p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。并且相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492929444818_6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#信号驱动-i-o"><span></span></a><a href="#%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8-i-o">#</a> 信号驱动 I/O</h3>
<p>应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。</p>
<p>相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492929553651_7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#异步-i-o"><span></span></a><a href="#%E5%BC%82%E6%AD%A5-i-o">#</a> 异步 I/O</h3>
<p>进行 aio_read 系统调用会立即返回，应用进程继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p>
<p>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492930243286_8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#i-o-模型比较"><span></span></a><a href="#i-o-%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83">#</a> I/O 模型比较</h2>
<h3><a class="header-anchor" href="#同步-i-o-与异步-i-o"><span></span></a><a href="#%E5%90%8C%E6%AD%A5-i-o-%E4%B8%8E%E5%BC%82%E6%AD%A5-i-o">#</a> 同步 I/O 与异步 I/O</h3>
<ul>
<li>同步 I/O: 应用进程在调用 recvfrom 操作时会阻塞。</li>
<li>异步 I/O: 不会阻塞。</li>
</ul>
<p>阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，虽然非阻塞式 I/O 和信号驱动 I/O 在等待数据阶段不会阻塞，但是在之后的将数据从内核复制到应用进程这个操作会阻塞。</p>
<h3><a class="header-anchor" href="#五大-i-o-模型比较"><span></span></a><a href="#%E4%BA%94%E5%A4%A7-i-o-%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83">#</a> 五大 I/O 模型比较</h3>
<p>前四种 I/O 模型的主要区别在于第一个阶段，而第二个阶段是一样的: 将数据从内核复制到应用进程过程中，应用进程会被阻塞。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492928105791_3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#io多路复用"><span></span></a><a href="#io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">#</a> IO多路复用</h2>
<blockquote>
<p>IO多路复用最为重要，后面的文章<a href="">Java NIO - IO多路复用详解</a>将对IO多路复用，Ractor模型以及Java NIO对其的支持作详解。</p>
</blockquote>
<p>这里主要概要性的理解: IO多路复用工作模式和应用。</p>
<h3><a class="header-anchor" href="#io多路复用工作模式"><span></span></a><a href="#io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F">#</a> IO多路复用工作模式</h3>
<p>epoll 的描述符事件有两种触发模式: LT(level trigger)和 ET(edge trigger)。</p>
<h4><a class="header-anchor" href="#_1-lt-模式"><span></span></a><a href="#_1-lt-%E6%A8%A1%E5%BC%8F">#</a> 1. LT 模式</h4>
<p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p>
<h4><a class="header-anchor" href="#_2-et-模式"><span></span></a><a href="#_2-et-%E6%A8%A1%E5%BC%8F">#</a> 2. ET 模式</h4>
<p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p>
<p>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<h3><a class="header-anchor" href="#应用场景"><span></span></a><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 应用场景</h3>
<p>很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p>
<h4><a class="header-anchor" href="#_1-select-应用场景"><span></span></a><a href="#_1-select-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 1. select 应用场景</h4>
<p>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时要求更高的场景，比如核反应堆的控制。</p>
<p>select 可移植性更好，几乎被所有主流平台所支持。</p>
<h4><a class="header-anchor" href="#_2-poll-应用场景"><span></span></a><a href="#_2-poll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 2. poll 应用场景</h4>
<p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p>
<p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p>
<p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且epoll 的描述符存储在内核，不容易调试。</p>
<h4><a class="header-anchor" href="#_3-epoll-应用场景"><span></span></a><a href="#_3-epoll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 3. epoll 应用场景</h4>
<p>只需要运行在 Linux 平台上，并且有非常大量的描述符需要同时轮询，而且这些连接最好是长连接。</p>
<h2><a class="header-anchor" href="#参考资料"><span></span></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a> 参考资料</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/1492928416812_4.png" type="image/png"/>
    </item>
    <item>
      <title>IO 源码解析之 InputStream</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20InputStream.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20InputStream.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 源码解析之 InputStream</source>
      <description>本文主要从JDK 11 源码角度分析InputStream。 IO 源码解析之 InputStream InputStream 类实现关系 InputStream 抽象类 源码实现 InputStream FilterInputStream ByteArrayInputStream BufferedInputStream 参考文章 # InputStr...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要从<strong>JDK 11 源码</strong>角度分析InputStream。</p>
</blockquote>
<ul>
<li>IO 源码解析之 InputStream
<ul>
<li><a href="#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">InputStream 类实现关系</a></li>
<li><a href="#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">InputStream 抽象类</a></li>
<li>源码实现
<ul>
<li><a href="#inputstream">InputStream</a></li>
<li><a href="#filterinputstream">FilterInputStream</a></li>
<li><a href="#bytearrayinputstream">ByteArrayInputStream</a></li>
<li><a href="#bufferedinputstream">BufferedInputStream</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#inputstream-类实现关系"><span></span></a><a href="#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">#</a> InputStream 类实现关系</h2>
<blockquote>
<p>InputStream是输入字节流，具体的实现类层次结构如下：</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#inputstream-抽象类"><span></span></a><a href="#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> InputStream 抽象类</h2>
<p>InputStream 类重要方法设计如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 读取下一个字节，如果没有则返回-1</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[]) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[]</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> off</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> len) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">readAllBytes</span><span style="color:#E06C75">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">readNBytes</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75">[] b</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> off</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> n) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 返回可读的字节数量</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 读取完，关闭流，释放资源</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> readlimit) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 重置读取位置为上次 mark 标记的位置</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 判断当前流是否支持标记流，和上面两个方法配套使用</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75"> out)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#源码实现"><span></span></a><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</h2>
<blockquote>
<p>梳理部分InputStream及其实现类的源码分析。</p>
</blockquote>
<h3><a class="header-anchor" href="#inputstream"><span></span></a><a href="#inputstream">#</a> InputStream</h3>
<p>InputStream抽象类源码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> InputStream</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Closeable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当使用skip方法时，最大的buffer size大小</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_SKIP_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2048</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 默认的buffer size</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> DEFAULT_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 8192</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK11中增加了一个nullInputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> InputStream</span><span style="color:#61AFEF"> nullInputStream</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InputStream</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> closed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF"> ()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readAllBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"len &lt; 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">requireNonNull</span><span style="color:#ABB2BF">(out);</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">                closed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        };</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取下一个字节的数据，如果没有则返回-1</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 检查边界</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 读取下一个字节</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">// 读到stream末尾，则返回读取的字节数量为-1</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        b[off] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">)c;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // i用来记录取了多少个字节</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 循环读取</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#ABB2BF"> (; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len ; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF">                c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span><span style="color:#7F848E;font-style:italic">// 读到stream末尾，则break</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">                b[off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> i] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">)c;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> ee</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 返回读取到的字节个数</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> i;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readAllBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 边界检查</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"len &lt; 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[]&gt; </span><span style="color:#E06C75">bufs</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 缓存每次读取到的内容放到bufs，最后组装成result</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">result</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 最后读取到的内容</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> total</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> remaining</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> len; </span><span style="color:#7F848E;font-style:italic">// 剩余字节长度</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buf</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(remaining, DEFAULT_BUFFER_SIZE)];</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nread</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 读取到结束为止，读取大小n可能大于或小于缓冲区大小</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(buf, nread,</span></span>
<span class="line"><span style="color:#E5C07B">                    Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> nread, remaining))) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                nread </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> n; </span></span>
<span class="line"><span style="color:#ABB2BF">                remaining </span><span style="color:#56B6C2">-=</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nread </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (MAX_BUFFER_SIZE </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> total </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> nread) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Required array size too large"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">                total </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> nread;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (result </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                    result </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> buf;</span></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (bufs </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                        bufs </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">                        bufs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#E5C07B">                    bufs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(buf);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果读不到内容（返回-1）或者没有剩余的字节，则跳出循环</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">while</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> remaining </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (bufs </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (result </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> result</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> ==</span><span style="color:#ABB2BF"> total </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#ABB2BF">                result </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(result, total);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 组装最后的result</span></span>
<span class="line"><span style="color:#ABB2BF">        result </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[total];</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> offset</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        remaining </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> total;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">b</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> bufs) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> count</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">, remaining);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, result, offset, count);</span></span>
<span class="line"><span style="color:#ABB2BF">            offset </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">            remaining </span><span style="color:#56B6C2">-=</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> count</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(b, off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> n, len </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> n);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (count </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            n </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> remaining</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> nr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(MAX_SKIP_BUFFER_SIZE, remaining);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">skipBuffer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (remaining </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            nr </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(skipBuffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, (</span><span style="color:#C678DD">int</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(size, remaining));</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nr </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">            remaining </span><span style="color:#56B6C2">-=</span><span style="color:#ABB2BF"> nr;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> remaining;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回可读的字节数量</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取完，关闭流，释放资源</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readlimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置读取位置为上次 mark 标记的位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"mark/reset not supported"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 判断当前流是否支持标记流，和上面两个方法配套使用。默认是false，由子类方法重写</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">requireNonNull</span><span style="color:#ABB2BF">(out, </span><span style="color:#98C379">"out"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> transferred</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[DEFAULT_BUFFER_SIZE];</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> read</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> ((read </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, DEFAULT_BUFFER_SIZE)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, read);</span></span>
<span class="line"><span style="color:#ABB2BF">            transferred </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> read;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> transferred;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>总结下JDK9的更新点</p>
</blockquote>
<p>类 java.io.InputStream 中增加了新的方法来读取和复制 InputStream 中包含的数据。</p>
<ul>
<li><code>readAllBytes</code>：读取 InputStream 中的所有剩余字节。</li>
<li><code>readNBytes</code>： 从 InputStream 中读取指定数量的字节到数组中。</li>
<li><code>transferTo</code>：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中 。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestInputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> InputStream</span><span style="color:#E06C75"> inputStream</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CONTENT </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Hello World"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Before</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setUp</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#56B6C2"> =</span></span>
<span class="line"><span style="color:#E5C07B">            TestInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getResourceAsStream</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/input.txt"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testReadAllBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> content</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readAllBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#61AFEF">        assertEquals</span><span style="color:#ABB2BF">(CONTENT, content);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testReadNBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">data</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readNBytes</span><span style="color:#ABB2BF">(data, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        assertEquals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Hello"</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(data));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testTransferTo</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> ByteArrayOutputStream</span><span style="color:#E06C75"> outputStream</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferTo</span><span style="color:#ABB2BF">(outputStream);</span></span>
<span class="line"><span style="color:#61AFEF">        assertEquals</span><span style="color:#ABB2BF">(CONTENT, </span><span style="color:#E5C07B">outputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong><code>read(byte[], int, int)</code> 和 <code>readNBytes(byte[], int, int)</code>看似是实现的相同功能，为何会设计readNBytes方法呢</strong>？</li>
</ul>
<p>这个问题可以参看<a href="https://stackoverflow.com/questions/53754387/java-read-vs-readnbytes-of-the-inputstream-instance" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a></p>
<ol>
<li>read(byte[], int, int)是尝试读到最多len个bytes，但是<strong>读取到的内容长度可能是小于len</strong>的。</li>
<li>readNBytes(byte[], int, int) 会一直（while循环）查找直到stream尾为止</li>
</ol>
<p>举个例子：如果文本内容是<code>12345&lt;end&gt;</code>, read(s,0,10)是允许返回<code>123</code>的, 而readNbytes(s,0,10)会一直（while循环）查找直到stream尾为止，并返回<code>12345</code>.</p>
<blockquote>
<p>补充下JDK11为什么会增加nullInputStream方法的设计？即空对象模式</p>
</blockquote>
<ul>
<li><strong>空对象模式</strong></li>
</ul>
<p>举个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyParser</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Parser</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Action</span><span style="color:#E06C75"> NO_ACTION </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Action</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomething</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">/* do nothing */</span><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#E06C75">  }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> Action</span><span style="color:#61AFEF"> findAction</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> userInput</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> ( </span><span style="color:#7F848E;font-style:italic">/* we can't find any actions */</span><span style="color:#ABB2BF"> ) {</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#ABB2BF"> NO_ACTION;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后便<strong>可以始终可以这么调用，而不用再判断空了</strong></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ParserFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParser</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">findAction</span><span style="color:#ABB2BF">(someInput).</span><span style="color:#61AFEF">doSomething</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filterinputstream"><span></span></a><a href="#filterinputstream">#</a> FilterInputStream</h3>
<p>FilterInputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FilterInputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> InputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 被装饰的inputStream</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> InputStream</span><span style="color:#E06C75"> in</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，注入被装饰的inputStream</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#61AFEF"> FilterInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InputStream</span><span style="color:#E06C75;font-style:italic"> in</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">in</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 本质是调用被装饰的inputStream的方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">skip</span><span style="color:#ABB2BF">(n);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">available</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readlimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">mark</span><span style="color:#ABB2BF">(readlimit);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">reset</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">markSupported</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么被装饰的inputStream是volatile类型的</strong>？</p>
<p>请参看： <a href="">关键字: volatile详解</a></p>
<h3><a class="header-anchor" href="#bytearrayinputstream"><span></span></a><a href="#bytearrayinputstream">#</a> ByteArrayInputStream</h3>
<p>ByteArrayInputStream源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ByteArrayInputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> InputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 内部保存的byte 数组</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取下一个字节的数组下标，byte[pos]就是read获取的下个字节</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> pos</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // mark的数组下标位置</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> mark </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 保存的有效byte的个数</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ByteArrayInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> buf</span><span style="color:#ABB2BF">[])</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">buf</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> buf;              </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pos</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">count</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造方法，带offset的</span></span>
<span class="line"><span style="color:#C678DD">     public</span><span style="color:#61AFEF"> ByteArrayInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> buf</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> offset</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> length</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {                </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">buf</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> buf;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pos</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> offset;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">count</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(offset </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> length, </span><span style="color:#E5C07B">buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mark</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> offset;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 从流中读取下一个字节，没有读取到返回 -1</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> count) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> (buf[pos++] </span><span style="color:#56B6C2">&amp;</span><span style="color:#D19A66"> 0xff</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">:</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 边界检查</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (b </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> off) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> count) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> avail) {</span></span>
<span class="line"><span style="color:#ABB2BF">            len </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> avail;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 从buf拷贝到byte 数组b中</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(buf, pos, b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> k</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> k) {</span></span>
<span class="line"><span style="color:#ABB2BF">            k </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> ?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> k;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> k;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 还有稍稍byte在buffer中未读取，即总的count 减去 当前byte位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 支持mark所以返回true</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在流中当前位置mark, readAheadLimit参数未使用    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readAheadLimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {            </span></span>
<span class="line"><span style="color:#ABB2BF">        mark </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置流，即回到mark的位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> mark;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭ByteArrayInputStream不会产生任何动作</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#bufferedinputstream"><span></span></a><a href="#bufferedinputstream">#</a> BufferedInputStream</h3>
<p>BufferedInputStream源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BufferedInputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> FilterInputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 默认的buffer大小</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> DEFAULT_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 8192</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 内部保存在byte 数组中</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭流的方法可能是异步的，所以使用原子AtomicReferenceFieldUpdater提供CAS无锁方式（可以解决CAS的ABA问题）来保证</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> AtomicReferenceFieldUpdater</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">BufferedInputStream</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[]</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> bufUpdater </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E5C07B">        AtomicReferenceFieldUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newUpdater</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">BufferedInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,  </span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[].</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"buf"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 有效byte的大小</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当前位置</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> pos</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 最后一次，调用mark方法，标记的位置</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> markpos </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 该变量惟一入口就是mark(int readLimit)，好比调用方法mark(1024)，那么后面读取的数据若是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 超过了1024字节，那么这次mark就为无效标记，子类能够选择抛弃该mark标记，从头开始。不过具体实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 跟具体的子类有关，在BufferedInputStream中，会抛弃mark标记，从新将markpos赋值为-1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> marklimit</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取被装饰的stream</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> InputStream</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        InputStream</span><span style="color:#E06C75"> input</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (input </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> input;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取实际内部的buffer数组</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] getBufIfOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> buf;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (buffer </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> buffer;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，buffer是8kb</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InputStream</span><span style="color:#E06C75;font-style:italic"> in</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">(in, DEFAULT_BUFFER_SIZE);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，指定buffer大小</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InputStream</span><span style="color:#E06C75;font-style:italic"> in</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(in);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (size </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Buffer size &lt;= 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 用更多的数据填充缓冲区,考虑到shuffling和其他处理标记的技巧，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 假设它是由同步方法调用的。该方法还假设所有数据已经被读入，因此pos &gt;count。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fill</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    	// 得到内部缓冲区buffer</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getBufIfOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 没有mark的情况下， pos为0</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            pos </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;            </span><span style="color:#7F848E;font-style:italic">/* no mark: throw away the buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // pos &gt;= buffer.length  buffer已经被读取完了 </span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">)  </span><span style="color:#7F848E;font-style:italic">/* no room left in buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        	// markpos &gt; 0  有标记，标记处在缓存中间</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {  </span><span style="color:#7F848E;font-style:italic">/* can throw away early part of the buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            	// 把buffer中，markpos到pos的部分移动到0-sz处，pos设置为sz，markpos为0</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> sz</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> pos </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> markpos;</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(buffer, markpos, buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, sz);</span></span>
<span class="line"><span style="color:#ABB2BF">                pos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> sz;</span></span>
<span class="line"><span style="color:#ABB2BF">                markpos </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // markpos已经为0了，marklimit比buffer.length小，再读取buffer已经没有地方了</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#ABB2BF"> marklimit) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            	// 清空缓存，清空标记，markpos为-1，pos为0</span></span>
<span class="line"><span style="color:#ABB2BF">                markpos </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;   </span><span style="color:#7F848E;font-style:italic">/* buffer got too big, invalidate mark */</span></span>
<span class="line"><span style="color:#ABB2BF">                pos </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;        </span><span style="color:#7F848E;font-style:italic">/* drop buffer contents */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // markpos已经为0了，marklimit比buffer.length大，而buffer.length已经最大了，不能扩容</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#ABB2BF"> MAX_BUFFER_SIZE) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Required array size too large"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">               // markpos已经为0了，marklimit比buffer.length大</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {            </span><span style="color:#7F848E;font-style:italic">/* grow buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            	// 建立一个长度为min(2*pos,marklimit,MAX_BUFFER_SIZE),的缓存数组，然后把原来0-pos移动到新数组的0-pos处</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> nsz</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&lt;=</span><span style="color:#ABB2BF"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#ABB2BF">                        pos </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 2</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> MAX_BUFFER_SIZE;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (nsz </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> marklimit)</span></span>
<span class="line"><span style="color:#ABB2BF">                    nsz </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> marklimit;</span></span>
<span class="line"><span style="color:#C678DD">                byte</span><span style="color:#E06C75"> nbuf</span><span style="color:#ABB2BF">[] </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[nsz];</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, nbuf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, pos);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 用bufUpdater替换buffer</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">bufUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, buffer, nbuf)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // Can't replace buf if there was an async close.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // Note: This would need to be changed if fill()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // is ever made accessible to multiple threads.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // But for now, the only way CAS can fail is via close.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // assert buf == null;</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">                buffer </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> nbuf;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 当前读取上限count为pos</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 从内部的输入流，读取pos到buffer.length部分，读取的字节数加到count</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer, pos, </span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> pos);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            count </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取byte</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 说明当前buf[]数组大小不够了，须要fill()</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> count) {</span></span>
<span class="line"><span style="color:#61AFEF">            fill</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 说明没有读取到任何数据</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> count)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getBufIfOpen</span><span style="color:#ABB2BF">()[pos++] </span><span style="color:#56B6C2">&amp;</span><span style="color:#D19A66"> 0xff</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Read characters into a portion of an array, reading from the underlying</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * stream at most once if necessary.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read1</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 当写入指定数组b的长度大小超过BufferedInputStream中核心缓存数组buf[]的大小而且 markpos &lt; 0，那么就直接从数据流中读取数据给b数组，而不经过buf[]缓存数组，避免buf[]数组急剧增大</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;=</span><span style="color:#61AFEF"> getBufIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#61AFEF">            fill</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            avail </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> cnt</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> avail </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getBufIfOpen</span><span style="color:#ABB2BF">(), pos, b, off, cnt);</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> cnt;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cnt;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取到byte数组b中</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        throws</span><span style="color:#E5C07B"> IOException</span></span>
<span class="line"><span style="color:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#61AFEF">        getBufIfOpen</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// Check for closed stream</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> ((off </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len) </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len))) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (;;) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nread</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> read1</span><span style="color:#ABB2BF">(b, off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> n, len </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> n);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nread </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> nread </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">            n </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> nread;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> len)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // if not closed but no bytes available, return</span></span>
<span class="line"><span style="color:#E5C07B">            InputStream</span><span style="color:#E06C75"> input</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (input </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> input</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">available</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 跳过n个</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        getBufIfOpen</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// Check for closed stream</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // If no mark position set then don't keep in buffer</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">skip</span><span style="color:#ABB2BF">(n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Fill in buffer to save bytes for reset</span></span>
<span class="line"><span style="color:#61AFEF">            fill</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            avail </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> skipped</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> n) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> avail </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> skipped;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> skipped;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // buf[]数组剩余字节数+输入流中剩余字节数</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">available</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> avail)</span></span>
<span class="line"><span style="color:#C678DD">                    ?</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span></span>
<span class="line"><span style="color:#C678DD">                    :</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> avail;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 标记位置，marklimit只有在这里才可以被赋值，readlimit表示mark()方法执行后，最多可以从流中读取的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 若是超过该字节大小，那么在fill()的时候，就会认为此mark()标记无效，从新将 markpos = -1，pos = 0</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readlimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        marklimit </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> readlimit;</span></span>
<span class="line"><span style="color:#ABB2BF">        markpos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        getBufIfOpen</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// 如果已经close, 则直接报错</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Resetting to invalid mark"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> markpos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 支持mark, 所以返回true</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 通过AtomicReferenceFieldUpdater的CAS无锁方式close</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> ( (buffer </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> buf) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">bufUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, buffer, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)) {</span></span>
<span class="line"><span style="color:#E5C07B">                InputStream</span><span style="color:#E06C75"> input</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#ABB2BF">                in </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (input </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E5C07B">                    input</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Else retry in case a new buf was CASed in fill()</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AtomicReferenceFieldUpdater具体可以参考：<a href="">JUC原子类: CAS, Unsafe和原子类详解</a></p>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 源码解析之 OutputStream</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20OutputStream.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20OutputStream.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 源码解析之 OutputStream</source>
      <description>本文主要从JDK 11源码角度分析 OutputStream。 @pdai IO 源码解析之 OutputStream OutputStream 类实现关系 OutputStream 抽象类 源码实现 OutputStream FilterOutputStream ByteArrayOutputStream BufferedOutputStream 参...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要从JDK 11源码角度分析 OutputStream。 @pdai</p>
</blockquote>
<ul>
<li>IO 源码解析之 OutputStream
<ul>
<li><a href="#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">OutputStream 类实现关系</a></li>
<li><a href="#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">OutputStream 抽象类</a></li>
<li>源码实现
<ul>
<li><a href="#outputstream">OutputStream</a></li>
<li><a href="#filteroutputstream">FilterOutputStream</a></li>
<li><a href="#bytearrayoutputstream">ByteArrayOutputStream</a></li>
<li><a href="#bufferedoutputstream">BufferedOutputStream</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#outputstream-类实现关系"><span></span></a><a href="#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">#</a> OutputStream 类实现关系</h2>
<blockquote>
<p>OutputStream是输出字节流，具体的实现类层次结构如下：</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#outputstream-抽象类"><span></span></a><a href="#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> OutputStream 抽象类</h2>
<p>OutputStream 类重要方法设计如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[]</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> off</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#E06C75">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#E06C75">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#源码实现"><span></span></a><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</h2>
<blockquote>
<p>梳理部分OutputStream及其实现类的源码分析。</p>
</blockquote>
<h3><a class="header-anchor" href="#outputstream"><span></span></a><a href="#outputstream">#</a> OutputStream</h3>
<p>OutputStream抽象类源码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Closeable</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Flushable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK11中增加了一个nullOutputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#61AFEF"> nullOutputStream</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutputStream</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> closed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">                closed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        };</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        write</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 检查边界合理性</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // len == 0 的情况已经在如下的for循环中隐式处理了</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF"> ; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len ; i++) {</span></span>
<span class="line"><span style="color:#61AFEF">            write</span><span style="color:#ABB2BF">(b[off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> i]);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>补充下JDK11为什么会增加nullOutputStream方法的设计？即空对象模式</p>
</blockquote>
<ul>
<li><strong>空对象模式</strong></li>
</ul>
<p>举个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyParser</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Parser</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Action</span><span style="color:#E06C75"> NO_ACTION </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Action</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomething</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">/* do nothing */</span><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#E06C75">  }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> Action</span><span style="color:#61AFEF"> findAction</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> userInput</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> ( </span><span style="color:#7F848E;font-style:italic">/* we can't find any actions */</span><span style="color:#ABB2BF"> ) {</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#ABB2BF"> NO_ACTION;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后便<strong>可以始终可以这么调用，而不用再判断空了</strong></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ParserFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParser</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">findAction</span><span style="color:#ABB2BF">(someInput).</span><span style="color:#61AFEF">doSomething</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filteroutputstream"><span></span></a><a href="#filteroutputstream">#</a> FilterOutputStream</h3>
<p>FilterOutputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FilterOutputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 被装饰的实际outputStream</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#E06C75"> out</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当前stream是否已经被close</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> closed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // close stream时加锁，防止其它线程同时close</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> closeLock </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化构造函数，传入被装饰的实际outputStream</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FilterOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> out;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入数据，本质调用被装饰outputStream的方法</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(b);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将数组中的所有字节写入</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        write</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 一个个写入</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> ((off </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> off)) </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len)) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF"> ; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len ; i++) {</span></span>
<span class="line"><span style="color:#61AFEF">            write</span><span style="color:#ABB2BF">(b[off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> i]);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // 强制刷新，将缓冲中的数据写入; 本质调用被装饰outputStream的方法</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flush</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭Stream</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果已经close, 直接退出</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 加锁处理，如果已经有线程正在closing则退出；</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (closeLock) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">            closed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // close前调用flush</span></span>
<span class="line"><span style="color:#E5C07B">        Throwable</span><span style="color:#E06C75"> flushException</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">            flush</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            flushException </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> e;</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#ABB2BF"> e;</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (flushException </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> closeException</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                   // evaluate possible precedence of flushException over closeException</span></span>
<span class="line"><span style="color:#C678DD">                   if</span><span style="color:#ABB2BF"> ((flushException </span><span style="color:#C678DD">instanceof</span><span style="color:#ABB2BF"> ThreadDeath) </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2">                       !</span><span style="color:#ABB2BF">(closeException </span><span style="color:#C678DD">instanceof</span><span style="color:#ABB2BF"> ThreadDeath)) {</span></span>
<span class="line"><span style="color:#E5C07B">                       flushException</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addSuppressed</span><span style="color:#ABB2BF">(closeException);</span></span>
<span class="line"><span style="color:#C678DD">                       throw</span><span style="color:#ABB2BF"> (ThreadDeath) flushException;</span></span>
<span class="line"><span style="color:#ABB2BF">                   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (flushException </span><span style="color:#56B6C2">!=</span><span style="color:#ABB2BF"> closeException) {</span></span>
<span class="line"><span style="color:#E5C07B">                        closeException</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addSuppressed</span><span style="color:#ABB2BF">(flushException);</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#ABB2BF"> closeException;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@pdai: 对比下JDK8中，close方法是没有加锁处理的。这种情况下你可以看JDK8源码中，直接利用java7的try with resources方式，优雅的调用flush方法后对out进行关闭。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#E06C75">() throws IOException {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75"> ostream </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> out) {</span></span>
<span class="line"><span style="color:#61AFEF">        flush</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#bytearrayoutputstream"><span></span></a><a href="#bytearrayoutputstream">#</a> ByteArrayOutputStream</h3>
<p>ByteArrayOutputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ByteArrayOutputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 实际的byte数组</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 数组中实际有效的byte的个数</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化默认构造，初始化byte数组大小为32</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">32</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化byte的大小</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (size </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Negative initial size: "</span></span>
<span class="line"><span style="color:#56B6C2">                                               +</span><span style="color:#ABB2BF"> size);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 扩容，确保它至少可以容纳由最小容量参数指定的元素数</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureCapacity</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (minCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">            grow</span><span style="color:#ABB2BF">(minCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 扩容的实质方法，确保它至少可以容纳由最小容量参数指定的元素数</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> grow</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> oldCapacity</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> newCapacity</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> oldCapacity </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> minCapacity;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#ABB2BF">(minCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(buf, newCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// overflow</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> (minCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> MAX_ARRAY_SIZE) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E5C07B">            Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#ABB2BF">            MAX_ARRAY_SIZE;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入，写入前确保byte数据长度</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacity</span><span style="color:#ABB2BF">(count </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        buf[count] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">) b;</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">+=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacity</span><span style="color:#ABB2BF">(count </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(b, off, buf, count, len);</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        write</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置，显然将实际有效的byte数量置为0</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] toByteArray</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(buf, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 长度，即count</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> size</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 转成string</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 转成string，指定的字符集</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> charsetName</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        throws</span><span style="color:#E5C07B"> UnsupportedEncodingException</span></span>
<span class="line"><span style="color:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count, charsetName);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#E06C75;font-style:italic"> charset</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count, charset);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 弃用</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Deprecated</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> hibyte</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, hibyte, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 对byte 数组而言，close没啥实质意义，所以空实现</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#bufferedoutputstream"><span></span></a><a href="#bufferedoutputstream">#</a> BufferedOutputStream</h3>
<p>BufferedOutputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BufferedOutputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> FilterOutputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Buffered outputStream底层也是byte数组</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 大小，buf[0]到buf[count-1]是实际存储的bytes</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，被装饰的outputStream，以及默认buf大小是8192</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">(out, </span><span style="color:#D19A66">8192</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(out);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (size </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Buffer size &lt;= 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** Flush the internal buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 内部的flush方法，将buffer中的有效bytes(count是有效的bytes大小)通过被装饰的outputStream写入</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flushBuffer</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (count </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">            count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入byte</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 当buffer满了以后，flush buffer</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (count </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">            flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf[count++] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">)b;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果请求长度已经超过输出缓冲区的大小，直接刷新输出缓冲区，然后直接写入数据。</span></span>
<span class="line"><span style="color:#61AFEF">            flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(b, off, len);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> count) {</span></span>
<span class="line"><span style="color:#61AFEF">            flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(b, off, buf, count, len);</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // flush方法，需要先将buffer中写入，最后在调用被装饰outputStream的flush方法</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flush</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 设计模式(装饰者模式)</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F).html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F).html</guid>
      <source url="https://cactusli.net/rss.xml">IO 设计模式(装饰者模式)</source>
      <description>Java I/O 使用了装饰者模式来实现。 # 装饰者模式 请参考装饰者模式详解 装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java I/O 使用了装饰者模式来实现。</p>
</blockquote>
<h2><a class="header-anchor" href="#装饰者模式"><span></span></a><a href="#%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F">#</a> 装饰者模式</h2>
<p>请参考<a href="">装饰者模式详解</a></p>
<p>装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/137c593d-0a9e-47b8-a9e6-b71f540b82dd.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#io-装饰者模式"><span></span></a><a href="#io-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F">#</a> IO 装饰者模式</h2>
<p>以 InputStream 为例，</p>
<ul>
<li>InputStream 是抽象组件；</li>
<li>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；</li>
<li>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ioNio.png" alt="ioNio" tabindex="0" loading="lazy"><figcaption>ioNio</figcaption></figure>
<p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">FileInputStream</span><span style="color:#E06C75"> fileInputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">BufferedInputStream</span><span style="color:#E06C75"> bufferedInputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedInputStream</span><span style="color:#E06C75">(fileInputStream)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/137c593d-0a9e-47b8-a9e6-b71f540b82dd.png" type="image/png"/>
    </item>
    <item>
      <title>Java IO 体系详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/Java%20IO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/Java%20IO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java IO 体系详解</source>
      <description>本文主要梳理Java IO/NIO/AIO的知识体系。 Java IO 体系详解 知识体系 相关文章 参考文章 # 知识体系 imgimg # 相关文章 A. Java进阶 - IO框架之知识体系：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。@pdai Java IO/NIO/AIO - Overview 本文主要梳理Java I...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:35:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要梳理Java IO/NIO/AIO的知识体系。</p>
</blockquote>
<ul>
<li>Java IO 体系详解
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">相关文章</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-overview2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#相关文章"><span></span></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">#</a> 相关文章</h2>
<blockquote>
<p><strong>A. Java进阶 - IO框架之知识体系</strong>：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。@pdai</p>
</blockquote>
<ul>
<li>Java IO/NIO/AIO - Overview
<ul>
<li>本文主要梳理Java IO/NIO/AIO的知识体系</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B. Java进阶 - IO框架之基础IO</strong>：其次对Java基础IO框架进行梳理，包括其分类，使用和源码详解。@pdai</p>
</blockquote>
<ul>
<li>Java IO - 分类(传输，操作)
<ul>
<li>本文主要从<code>传输方式</code>和<code>数据操作</code>两个方面分析Java IO的分类</li>
</ul>
</li>
<li>Java IO - 设计模式(装饰者模式)
<ul>
<li>Java I/O 使用了装饰者模式来实现</li>
</ul>
</li>
<li>Java IO - 源码: InputStream
<ul>
<li>本文主要从JDK源码角度分析InputStream</li>
</ul>
</li>
<li>Java IO - 源码: OutputStream
<ul>
<li>本文主要从JDK源码角度分析 OutputStream</li>
</ul>
</li>
<li>Java IO - 常见类使用
<ul>
<li>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>C. Java进阶 - IO框架之NIO/AIO等</strong>：然后再对Unix IO模型学习，引入到Java BIO/NIO/AIO相关知识详解。@pdai</p>
</blockquote>
<ul>
<li>IO 模型 - Unix IO 模型
<ul>
<li>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫</li>
</ul>
</li>
<li>Java IO - BIO 详解
<ul>
<li>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态</li>
</ul>
</li>
<li>Java NIO - 基础详解
<ul>
<li>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O</li>
</ul>
</li>
<li>Java NIO - IO多路复用详解
<ul>
<li>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持</li>
</ul>
</li>
<li>Java AIO - 异步IO详解
<ul>
<li>本文主要对异步IO和Java中对AIO的支持详解。@pdai</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>D. Java进阶 - IO框架之开源框架</strong>：最后再对常用的开源框架进行分析和详解。@pdai</p>
</blockquote>
<ul>
<li><a href="">Java NIO - 零拷贝实现</a>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。</li>
<li><a href="">Java N(A)IO - 框架: Netty</a>
<ul>
<li>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-overview2.png" type="image/png"/>
    </item>
    <item>
      <title>N(A)IO 框架 Netty</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/N(A)IO%20%E6%A1%86%E6%9E%B6%20Netty.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/N(A)IO%20%E6%A1%86%E6%9E%B6%20Netty.html</guid>
      <source url="https://cactusli.net/rss.xml">N(A)IO 框架 Netty</source>
      <description>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等。 N(A)IO 框架 Netty NIO框架 比较好的基于NIO的开源...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等。</p>
</blockquote>
<ul>
<li>N(A)IO 框架 Netty
<ul>
<li><a href="#nio%E6%A1%86%E6%9E%B6">NIO框架</a></li>
<li>比较好的基于NIO的开源框架(Netty)
<ul>
<li><a href="#%E4%BC%98%E7%82%B9">优点</a></li>
<li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#nio框架"><span></span></a><a href="#nio%E6%A1%86%E6%9E%B6">#</a> NIO框架</h2>
<p>目前流行的NIO框架非常的多。在论坛上、互联网上大家讨论和使用最多的有以下几种:</p>
<ul>
<li>原生JAVA NIO框架:</li>
</ul>
<p>JAVA NIO通信框架基于多路复用IO原理，我们将详细讲解它的工作原理。</p>
<ul>
<li>APACHE MINA 2:</li>
</ul>
<p>是一个网络应用程序框架，用来帮助用户简单地开发高性能和高可扩展性的网络应用程序。它提供了一个通过Java NIO在不同的传输例如TCP/IP和UDP/IP上抽象的事件驱动的异步API。</p>
<ul>
<li>NETTY 4/5:</li>
</ul>
<p>Netty是由JBOSS提供的一个java开源框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。我们将讲解NETTY 4 的工作原理。另外说一句: MINA和NETTY的主要作者是同一人Trustin Lee。</p>
<ul>
<li>Grizzly:</li>
</ul>
<p>Grizzly是一种应用程序框架，专门解决编写成千上万用户访问服务器时候产生的各种问题。使用JAVA NIO作为基础，并隐藏其编程的复杂性。</p>
<h2><a class="header-anchor" href="#比较好的基于nio的开源框架-netty"><span></span></a><a href="#%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%E5%9F%BA%E4%BA%8Enio%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6-netty">#</a> 比较好的基于NIO的开源框架(Netty)</h2>
<h3><a class="header-anchor" href="#优点"><span></span></a><a href="#%E4%BC%98%E7%82%B9">#</a> 优点</h3>
<ul>
<li>api简单，开发门槛低</li>
<li>功能强大，内置了多种编码、解码功能</li>
<li>与其它业界主流的NIO框架对比，netty的综合性能最优</li>
<li>社区活跃，使用广泛，经历过很多商业应用项目的考验</li>
<li>定制能力强，可以对框架进行灵活的扩展</li>
</ul>
<h3><a class="header-anchor" href="#例子"><span></span></a><a href="#%E4%BE%8B%E5%AD%90">#</a> 例子</h3>
<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">     &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.jboss.netty&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">     &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;netty&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">     &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.2.5.Final&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>服务端。接收客户端请求并将内容打印出来，同时发送一个消息收到回执。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NettyServer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> HEADER_LENGTH </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> bind</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> port</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ServerBootstrap</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ServerBootstrap</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> NioServerSocketChannelFactory</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">(),</span></span>
<span class="line"><span style="color:#E5C07B">                                                                                  Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 构造对应的pipeline</span></span>
<span class="line"><span style="color:#E5C07B">        b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setPipelineFactory</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> ChannelPipelineFactory</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#E5C07B"> ChannelPipeline</span><span style="color:#61AFEF"> getPipeline</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                ChannelPipeline</span><span style="color:#E06C75"> pipelines</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Channels</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">pipeline</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                pipelines</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addLast</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">MessageHandler</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">(), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> MessageHandler</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> pipelines;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 监听端口号</span></span>
<span class="line"><span style="color:#E5C07B">        b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(port));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 处理消息</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MessageHandler</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> SimpleChannelHandler</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> messageReceived</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ChannelHandlerContext</span><span style="color:#E06C75;font-style:italic"> ctx</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">MessageEvent</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 接收客户端请求</span></span>
<span class="line"><span style="color:#E5C07B">            ChannelBuffer</span><span style="color:#E06C75"> buffer</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (ChannelBuffer) </span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> message</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readableBytes</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">array</span><span style="color:#ABB2BF">(), </span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;服务端&gt;收到内容="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 给客户端发送回执</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">body</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "服务端已收到"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">header</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(HEADER_LENGTH).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">putInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">array</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Channels</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ctx</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">ChannelBuffers</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wrappedBuffer</span><span style="color:#ABB2BF">(header, body));</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;服务端&gt;发送回执,time="</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#61AFEF"> NettyServer</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1088</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>客户端。向服务端发送一个请求，然后打印服务端响应的内容。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NettyClient</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#E06C75"> readHeader  </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#E06C75"> writeHeader </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> SocketChannel</span><span style="color:#E06C75">    channel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> sendMessage</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">body</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建客户端通道</span></span>
<span class="line"><span style="color:#ABB2BF">        channel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> SocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">socket</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">setSoTimeout</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">60000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">connect</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AddressUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getHostIp</span><span style="color:#ABB2BF">(), </span><span style="color:#D19A66">1088</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 客户端发请求</span></span>
<span class="line"><span style="color:#61AFEF">        writeWithHeader</span><span style="color:#ABB2BF">(channel, body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 接收服务端响应的信息</span></span>
<span class="line"><span style="color:#E5C07B">        readHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        read</span><span style="color:#ABB2BF">(channel, readHeader);</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> bodyLen</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> readHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInt</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        ByteBuffer</span><span style="color:#E06C75"> bodyBuf</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(bodyLen).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        read</span><span style="color:#ABB2BF">(channel, bodyBuf);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;客户端&gt;收到响应内容: "</span><span style="color:#56B6C2"> +</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">bodyBuf</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">array</span><span style="color:#ABB2BF">(), </span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ",长度:"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> bodyLen);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeWithHeader</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannel</span><span style="color:#E06C75;font-style:italic"> channel</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">body</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        writeHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        writeHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        writeHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // channel.write(writeHeader);</span></span>
<span class="line"><span style="color:#E5C07B">        channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wrap</span><span style="color:#ABB2BF">(body));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannel</span><span style="color:#E06C75;font-style:italic"> channel</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#E06C75;font-style:italic"> buffer</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasRemaining</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> r</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (r </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"end of stream when reading header"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> body</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "客户发的测试请求！"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#61AFEF"> NettyClient</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">sendMessage</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
    </item>
    <item>
      <title>NIO 之 IO多路复用详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">NIO 之 IO多路复用详解</source>
      <description>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。@pdai NIO 之 IO多路复用详解 现实场景 典型的多路复用IO实现 Reactor模型和Proactor模型 传统IO模型 Reactor事件驱动模型 Reactor模型----业务处理与IO分离 Reactor模型----并发读写 Reactor模型示例 JAVA对多路复...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。@pdai</p>
</blockquote>
<ul>
<li>NIO 之 IO多路复用详解
<ul>
<li><a href="#%E7%8E%B0%E5%AE%9E%E5%9C%BA%E6%99%AF">现实场景</a></li>
<li><a href="#%E5%85%B8%E5%9E%8B%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8io%E5%AE%9E%E7%8E%B0">典型的多路复用IO实现</a></li>
<li>Reactor模型和Proactor模型
<ul>
<li><a href="#%E4%BC%A0%E7%BB%9Fio%E6%A8%A1%E5%9E%8B">传统IO模型</a></li>
<li><a href="#reactor%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B">Reactor事件驱动模型</a></li>
<li>[Reactor模型</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-reactor-1.png" type="image/png"/>
    </item>
    <item>
      <title>NIO 之零拷贝实现</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0.html</guid>
      <source url="https://cactusli.net/rss.xml">NIO 之零拷贝实现</source>
      <description>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。@pdai</p>
</blockquote>
<ul>
<li>NIO 之零拷贝实现
<ul>
<li>Java NIO零拷贝
<ul>
<li><a href="#mappedbytebuffer">MappedByteBuffer</a></li>
<li><a href="#directbytebuffer">DirectByteBuffer</a></li>
<li><a href="#filechannel">FileChannel</a></li>
</ul>
</li>
<li>其它的零拷贝实现
<ul>
<li><a href="#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D">Netty零拷贝</a></li>
<li><a href="#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94">RocketMQ和Kafka对比</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-nio零拷贝"><span></span></a><a href="#java-nio%E9%9B%B6%E6%8B%B7%E8%B4%9D">#</a> Java NIO零拷贝</h2>
<p>在 Java NIO 中的<strong>通道（Channel）*<em>就相当于操作系统的*<em>内核空间</em></em>（kernel space）的缓冲区，而</strong>缓冲区**（Buffer）对应的相当于操作系统的<strong>用户空间</strong>（user space）中的<strong>用户缓冲区</strong>（user buffer）。</p>
<ul>
<li><strong>通道</strong>（Channel）是全双工的（双向传输），它既可能是读缓冲区（read buffer），也可能是网络缓冲区（socket buffer）。</li>
<li><strong>缓冲区</strong>（Buffer）分为堆内存（HeapBuffer）和堆外内存（DirectBuffer），这是通过 malloc() 分配出来的用户态内存。</li>
</ul>
<p>堆外内存（DirectBuffer）在使用后需要应用程序手动回收，而堆内存（HeapBuffer）的数据在 GC 时可能会被自动回收。因此，在使用 HeapBuffer 读写数据时，为了避免缓冲区数据因为 GC 而丢失，NIO 会先把 HeapBuffer 内部的数据拷贝到一个临时的 DirectBuffer 中的本地内存（native memory），这个拷贝涉及到 <code>sun.misc.Unsafe.copyMemory()</code> 的调用，背后的实现原理与 <code>memcpy()</code> 类似。 最后，将临时生成的 DirectBuffer 内部的数据的内存地址传给 I/O 调用函数，这样就避免了再去访问 Java 对象处理 I/O 读写。</p>
<h3><a class="header-anchor" href="#mappedbytebuffer"><span></span></a><a href="#mappedbytebuffer">#</a> MappedByteBuffer</h3>
<p>MappedByteBuffer 是 NIO 基于**内存映射（mmap）**这种零拷贝方式的提供的一种实现，它继承自 ByteBuffer。FileChannel 定义了一个 map() 方法，它可以把一个文件从 position 位置开始的 size 大小的区域映射为内存映像文件。抽象方法 map() 方法在 FileChannel 中的定义如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#E5C07B"> MappedByteBuffer</span><span style="color:#61AFEF"> map</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">MapMode</span><span style="color:#E06C75"> mode</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> size)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>mode</strong>：限定内存映射区域（MappedByteBuffer）对内存映像文件的访问模式，包括只可读（READ_ONLY）、可读可写（READ_WRITE）和写时拷贝（PRIVATE）三种模式。</li>
<li><strong>position</strong>：文件映射的起始地址，对应内存映射区域（MappedByteBuffer）的首地址。</li>
<li><strong>size</strong>：文件映射的字节长度，从 position 往后的字节数，对应内存映射区域（MappedByteBuffer）的大小。</li>
</ul>
<p>MappedByteBuffer 相比 ByteBuffer 新增了 fore()、load() 和 isLoad() 三个重要的方法：</p>
<ul>
<li><strong>fore()</strong>：对于处于 READ_WRITE 模式下的缓冲区，把对缓冲区内容的修改强制刷新到本地文件。</li>
<li><strong>load()</strong>：将缓冲区的内容载入物理内存中，并返回这个缓冲区的引用。</li>
<li><strong>isLoaded()</strong>：如果缓冲区的内容在物理内存中，则返回 true，否则返回 false。</li>
</ul>
<p>下面给出一个利用 MappedByteBuffer 对文件进行读写的使用示例：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CONTENT </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Zero copy implemented by MappedByteBuffer"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> FILE_NAME </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/mmap.txt"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CHARSET </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "UTF-8"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>写文件数据</strong>：打开文件通道 fileChannel 并提供读权限、写权限和数据清空权限，通过 fileChannel 映射到一个可写的内存缓冲区 mappedByteBuffer，将目标数据写入 mappedByteBuffer，通过 <code>force()</code> 方法把缓冲区更改的内容强制写入本地文件。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeToFileByMappedByteBuffer</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getResource</span><span style="color:#ABB2BF">(FILE_NAME).</span><span style="color:#61AFEF">getPath</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">    byte</span><span style="color:#E06C75">[] bytes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CONTENT</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(CHARSET));</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fileChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(path, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">            StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WRITE</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUNCATE_EXISTING</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        MappedByteBuffer</span><span style="color:#E06C75"> mappedByteBuffer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(READ_WRITE, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">bytes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (mappedByteBuffer </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            mappedByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(bytes);</span></span>
<span class="line"><span style="color:#E5C07B">            mappedByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">force</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>读文件数据</strong>：打开文件通道 fileChannel 并提供只读权限，通过 fileChannel 映射到一个只可读的内存缓冲区 mappedByteBuffer，读取 mappedByteBuffer 中的字节数组即可得到文件数据。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFromFileByMappedByteBuffer</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getResource</span><span style="color:#ABB2BF">(FILE_NAME).</span><span style="color:#61AFEF">getPath</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> length </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CONTENT</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(CHARSET)).</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fileChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(path, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        MappedByteBuffer</span><span style="color:#E06C75"> mappedByteBuffer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(READ_ONLY, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, length);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (mappedByteBuffer </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#E06C75">[] bytes </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[length]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            mappedByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(bytes);</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> content </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#E06C75">(bytes</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> StandardCharsets</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UTF_8</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">            assertEquals</span><span style="color:#E06C75">(content</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "Zero copy implemented by MappedByteBuffer"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍 <code>map()</code> 方法的<strong>底层实现原理</strong>。<code>map()</code> 方法是 <code>java.nio.channels.FileChannel</code> 的抽象方法，由子类 <code>sun.nio.ch.FileChannelImpl.java</code> 实现，下面是和内存映射相关的核心代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> MappedByteBuffer</span><span style="color:#61AFEF"> map</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">MapMode</span><span style="color:#E06C75"> mode</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> size) throws IOException {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> pagePosition </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(position </span><span style="color:#56B6C2">%</span><span style="color:#E06C75"> allocationGranularity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> mapPosition </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> position </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> pagePosition</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> mapSize </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> pagePosition</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        addr </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> map0</span><span style="color:#E06C75">(imode</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapPosition</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapSize)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">gc</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">interrupt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            addr </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> map0</span><span style="color:#E06C75">(imode</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapPosition</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapSize)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Map failed"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> y)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> isize </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Unmapper</span><span style="color:#E06C75"> um </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Unmapper</span><span style="color:#E06C75">(addr</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapSize</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> isize</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mfd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">writable) </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (imode </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> MAP_RO)) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Util</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newMappedByteBufferR</span><span style="color:#ABB2BF">(isize, addr </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> pagePosition, mfd, um);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Util</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newMappedByteBuffer</span><span style="color:#ABB2BF">(isize, addr </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> pagePosition, mfd, um);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map() 方法通过本地方法 map0() 为文件分配一块虚拟内存，作为它的内存映射区域，然后返回这块内存映射区域的起始地址。</p>
<ul>
<li>文件映射需要在 Java 堆中创建一个 MappedByteBuffer 的实例。如果第一次文件映射导致 OOM，则手动触发垃圾回收，休眠 100ms 后再尝试映射，如果失败则抛出异常。</li>
<li>通过 Util 的 newMappedByteBuffer （可读可写）方法或者 newMappedByteBufferR（仅读） 方法方法反射创建一个 DirectByteBuffer 实例，其中 DirectByteBuffer 是 MappedByteBuffer 的子类。</li>
</ul>
<p><code>map()</code> 方法返回的是内存映射区域的起始地址，通过（<strong>起始地址 + 偏移量</strong>）就可以获取指定内存的数据。这样一定程度上替代了 <code>read()</code> 或 <code>write()</code> 方法，底层直接采用 <code>sun.misc.Unsafe</code>类的 <code>getByte()</code> 和 <code>putByte()</code> 方法对数据进行读写。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> map0</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> prot</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> mapSize) throws IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面是本地方法（native method）map0 的定义，它通过 JNI（Java Native Interface）调用底层 C 的实现，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_map0）的实现位于 JDK 源码包下的 <code>native/sun/nio/ch/FileChannelImpl.c</code>这个源文件里面。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">JNIEXPORT jlong JNICALL</span></span>
<span class="line"><span style="color:#61AFEF">Java_sun_nio_ch_FileChannelImpl_map0</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">JNIEnv </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">env</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">this</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                     jint </span><span style="color:#E06C75;font-style:italic">prot</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">off</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">len</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#C678DD"> *</span><span style="color:#ABB2BF">mapAddress </span><span style="color:#C678DD">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    jobject fdo </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">*</span><span style="color:#ABB2BF">env)-&gt;</span><span style="color:#61AFEF">GetObjectField</span><span style="color:#ABB2BF">(env, this, chan_fd);</span></span>
<span class="line"><span style="color:#ABB2BF">    jint fd </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> fdval</span><span style="color:#ABB2BF">(env, fdo);</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#ABB2BF"> protections </span><span style="color:#C678DD">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#ABB2BF"> flags </span><span style="color:#C678DD">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (prot </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> sun_nio_ch_FileChannelImpl_MAP_RO) {</span></span>
<span class="line"><span style="color:#ABB2BF">        protections </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF">        flags </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> MAP_SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (prot </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> sun_nio_ch_FileChannelImpl_MAP_RW) {</span></span>
<span class="line"><span style="color:#ABB2BF">        protections </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> PROT_WRITE </span><span style="color:#C678DD">|</span><span style="color:#ABB2BF"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF">        flags </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> MAP_SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (prot </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> sun_nio_ch_FileChannelImpl_MAP_PV) {</span></span>
<span class="line"><span style="color:#ABB2BF">        protections </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF">  PROT_WRITE </span><span style="color:#C678DD">|</span><span style="color:#ABB2BF"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF">        flags </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> MAP_PRIVATE;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    mapAddress </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> mmap64</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#D19A66">        0</span><span style="color:#ABB2BF">,</span><span style="color:#7F848E;font-style:italic">                    /* Let OS decide location */</span></span>
<span class="line"><span style="color:#ABB2BF">        len,</span><span style="color:#7F848E;font-style:italic">                  /* Number of bytes to map */</span></span>
<span class="line"><span style="color:#ABB2BF">        protections,</span><span style="color:#7F848E;font-style:italic">          /* File permissions */</span></span>
<span class="line"><span style="color:#ABB2BF">        flags,</span><span style="color:#7F848E;font-style:italic">                /* Changes are shared */</span></span>
<span class="line"><span style="color:#ABB2BF">        fd,</span><span style="color:#7F848E;font-style:italic">                   /* File descriptor of mapped file */</span></span>
<span class="line"><span style="color:#ABB2BF">        off);</span><span style="color:#7F848E;font-style:italic">                 /* Offset into file */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (mapAddress </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> MAP_FAILED) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (errno </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> ENOMEM) {</span></span>
<span class="line"><span style="color:#61AFEF">            JNU_ThrowOutOfMemoryError</span><span style="color:#ABB2BF">(env, </span><span style="color:#98C379">"Map failed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> IOS_THROWN;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> handle</span><span style="color:#ABB2BF">(env, </span><span style="color:#C678DD">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Map failed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> ((jlong) (</span><span style="color:#C678DD">unsigned</span><span style="color:#C678DD"> long</span><span style="color:#ABB2BF">) mapAddress);</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 map0() 函数最终是通过 <code>mmap64()</code> 这个函数对 Linux 底层内核发出内存映射的调用， <code>mmap64()</code> 函数的原型如下：</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/mman.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#61AFEF">mmap64</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">addr</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> prot</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> flags</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> fd</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> off64_t</span><span style="color:#E06C75;font-style:italic"> offset</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面详细介绍一下 <code>mmap64()</code> 函数各个参数的含义以及参数可选值：</p>
<ul>
<li>
<p><code>addr</code>：文件在用户进程空间的内存映射区中的起始地址，是一个建议的参数，通常可设置为 0 或 NULL，此时由内核去决定真实的起始地址。当 + flags 为 MAP_FIXED 时，addr 就是一个必选的参数，即需要提供一个存在的地址。</p>
</li>
<li>
<p><code>len</code>：文件需要进行内存映射的字节长度</p>
</li>
<li>
<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span>prot</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>：控制用户进程对内存映射区的访问权限</p>
<ul>
<li><code>PROT_READ</code>：读权限</li>
<li><code>PROT_WRITE</code>：写权限</li>
<li><code>PROT_EXEC</code>：执行权限</li>
<li><code>PROT_NONE</code>：无权限</li>
</ul>
</li>
<li>
<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span>flags</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>：控制内存映射区的修改是否被多个进程共享</p>
<ul>
<li><code>MAP_PRIVATE</code>：对内存映射区数据的修改不会反映到真正的文件，数据修改发生时采用写时复制机制</li>
<li><code>MAP_SHARED</code>：对内存映射区的修改会同步到真正的文件，修改对共享此内存映射区的进程是可见的</li>
<li><code>MAP_FIXED</code>：不建议使用，这种模式下 addr 参数指定的必须的提供一个存在的 addr 参数</li>
</ul>
</li>
<li>
<p><code>fd</code>：文件描述符。每次 map 操作会导致文件的引用计数加 1，每次 unmap 操作或者结束进程会导致引用计数减 1</p>
</li>
<li>
<p><code>offset</code>：文件偏移量。进行映射的文件位置，从文件起始地址向后的位移量</p>
</li>
</ul>
<p>下面总结一下 MappedByteBuffer 的特点和不足之处：</p>
<ul>
<li><strong>MappedByteBuffer 使用是堆外的虚拟内存</strong>，因此分配（map）的内存大小不受 JVM 的 -Xmx 参数限制，但是也是有大小限制的。 如果当文件超出 Integer.MAX_VALUE 字节限制时，可以通过 position 参数重新 map 文件后面的内容。</li>
<li><strong>MappedByteBuffer 在处理大文件时性能的确很高，但也存内存占用、文件关闭不确定等问题</strong>，被其打开的文件只有在垃圾回收的才会被关闭，而且这个时间点是不确定的。</li>
<li>MappedByteBuffer 提供了文件映射内存的 mmap() 方法，也提供了释放映射内存的 unmap() 方法。然而 unmap() 是 FileChannelImpl 中的私有方法，无法直接显示调用。因此，<strong>用户程序需要通过 Java 反射的调用 sun.misc.Cleaner 类的 clean() 方法手动释放映射占用的内存区域</strong>。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> clean</span><span style="color:#E06C75">(</span><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> buffer) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B">    AccessController</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doPrivileged</span><span style="color:#ABB2BF">((</span><span style="color:#E5C07B">PrivilegedAction</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Void</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">) () </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Method</span><span style="color:#E06C75"> getCleanerMethod</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cleaner"</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]);</span></span>
<span class="line"><span style="color:#E5C07B">            getCleanerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAccessible</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            Cleaner</span><span style="color:#E06C75"> cleaner</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Cleaner) </span><span style="color:#E5C07B">getCleanerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]);</span></span>
<span class="line"><span style="color:#E5C07B">            cleaner</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#directbytebuffer"><span></span></a><a href="#directbytebuffer">#</a> DirectByteBuffer</h3>
<p>DirectByteBuffer 的对象引用位于 Java 内存模型的堆里面，JVM 可以对 DirectByteBuffer 的对象进行内存分配和回收管理，一般使用 DirectByteBuffer 的静态方法 allocateDirect() 创建 DirectByteBuffer 实例并分配内存。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#61AFEF"> allocateDirect</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> capacity) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DirectByteBuffer</span><span style="color:#E06C75">(capacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DirectByteBuffer 内部的字节缓冲区位在于堆外的（用户态）直接内存，它是通过 Unsafe 的本地方法 allocateMemory() 进行内存分配，底层调用的是操作系统的 malloc() 函数。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">DirectByteBuffer</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> cap) {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> pa </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> VM</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isDirectMemoryPageAligned</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">pageSize</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">, (</span><span style="color:#C678DD">long</span><span style="color:#ABB2BF">)cap </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> (pa </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> ps </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">reserveMemory</span><span style="color:#ABB2BF">(size, cap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> base </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        base </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocateMemory</span><span style="color:#ABB2BF">(size);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unreserveMemory</span><span style="color:#ABB2BF">(size, cap);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setMemory</span><span style="color:#ABB2BF">(base, size, (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">) </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (pa </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (base </span><span style="color:#56B6C2">%</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E06C75">        address </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (base </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (ps </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        address </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    cleaner </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Cleaner</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Deallocator</span><span style="color:#ABB2BF">(base, size, cap));</span></span>
<span class="line"><span style="color:#E06C75">    att </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，初始化 DirectByteBuffer 时还会创建一个 Deallocator 线程，并通过 Cleaner 的 freeMemory() 方法来对直接内存进行回收操作，freeMemory() 底层调用的是操作系统的 free() 函数。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Deallocator</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#E06C75"> unsafe </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> address</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> capacity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#61AFEF"> Deallocator</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> address</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> capacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        assert</span><span style="color:#ABB2BF"> (address </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">address</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> address;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">size</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> size;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">capacity</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> capacity;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (address </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">freeMemory</span><span style="color:#ABB2BF">(address);</span></span>
<span class="line"><span style="color:#ABB2BF">        address </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unreserveMemory</span><span style="color:#ABB2BF">(size, capacity);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于使用 DirectByteBuffer 分配的是系统本地的内存，不在 JVM 的管控范围之内，因此直接内存的回收和堆内存的回收不同，直接内存如果使用不当，很容易造成 OutOfMemoryError。</p>
<p>说了这么多，那么 DirectByteBuffer 和零拷贝有什么关系？前面有提到在 MappedByteBuffer 进行内存映射时，它的 map() 方法会通过 Util.newMappedByteBuffer() 来创建一个缓冲区实例，初始化的代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#E5C07B"> MappedByteBuffer</span><span style="color:#61AFEF"> newMappedByteBuffer</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FileDescriptor</span><span style="color:#E06C75"> fd</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                            Runnable</span><span style="color:#E06C75"> unmapper) {</span></span>
<span class="line"><span style="color:#E5C07B">    MappedByteBuffer</span><span style="color:#E06C75"> dbb</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (directByteBufferConstructor </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        initDBBConstructor</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        dbb </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (MappedByteBuffer)</span><span style="color:#E5C07B">directByteBufferConstructor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">[] { </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(size), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Long</span><span style="color:#ABB2BF">(addr), fd, unmapper });</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InstantiationException</span><span style="color:#E06C75"> | </span><span style="color:#E5C07B">IllegalAccessException</span><span style="color:#E06C75"> | </span><span style="color:#E5C07B">InvocationTargetException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InternalError</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> dbb</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> initDBBRConstructor</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    AccessController</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doPrivileged</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> PrivilegedAction</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#E5C07B"> Void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">cl</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"java.nio.DirectByteBufferR"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                Constructor</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">ctor</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredConstructor</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#C678DD">                    new</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;[] { </span><span style="color:#E5C07B">int</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">long</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">FileDescriptor</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                    Runnable</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF"> });</span></span>
<span class="line"><span style="color:#E5C07B">                ctor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAccessible</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                directByteBufferRConstructor </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ctor;</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">ClassNotFoundException</span><span style="color:#ABB2BF"> | </span><span style="color:#E5C07B">NoSuchMethodException</span><span style="color:#ABB2BF"> |</span></span>
<span class="line"><span style="color:#E5C07B">                     IllegalArgumentException</span><span style="color:#ABB2BF"> | </span><span style="color:#E5C07B">ClassCastException</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InternalError</span><span style="color:#ABB2BF">(x);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }});</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DirectByteBuffer 是 MappedByteBuffer 的具体实现类。实际上，Util.newMappedByteBuffer() 方法通过反射机制获取 DirectByteBuffer 的构造器，然后创建一个 DirectByteBuffer 的实例，对应的是一个单独用于内存映射的构造方法：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">protected</span><span style="color:#61AFEF"> DirectByteBuffer</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FileDescriptor</span><span style="color:#E06C75"> fd</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Runnable</span><span style="color:#E06C75"> unmapper) {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    address </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    cleaner </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Cleaner</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, unmapper);</span></span>
<span class="line"><span style="color:#E06C75">    att </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，除了允许分配操作系统的直接内存以外，DirectByteBuffer 本身也具有文件内存映射的功能，这里不做过多说明。我们需要关注的是，DirectByteBuffer 在 MappedByteBuffer 的基础上提供了内存映像文件的随机读取 get() 和写入 write() 的操作。</p>
<ul>
<li>内存映像文件的随机读操作</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">nextGetIndex</span><span style="color:#ABB2BF">()))</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">checkIndex</span><span style="color:#ABB2BF">(i)))</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>内存映像文件的随机写操作</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#E5C07B">    unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">nextPutIndex</span><span style="color:#ABB2BF">()), ((x)));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#E5C07B">    unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">checkIndex</span><span style="color:#ABB2BF">(i)), ((x)));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存映像文件的随机读写都是借助 ix() 方法实现定位的， ix() 方法通过内存映射空间的内存首地址（address）和给定偏移量 i 计算出指针地址，然后由 unsafe 类的 get() 和 put() 方法和对指针指向的数据进行读取或写入。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> ix</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> address </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ((</span><span style="color:#C678DD">long</span><span style="color:#E06C75">)i </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filechannel"><span></span></a><a href="#filechannel">#</a> FileChannel</h3>
<p>FileChannel 是一个用于文件读写、映射和操作的通道，同时它在并发环境下是线程安全的，基于 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 getChannel() 方法可以创建并打开一个文件通道。FileChannel 定义了 transferFrom() 和 transferTo() 两个抽象方法，它通过在通道和通道之间建立连接实现数据传输的。</p>
<ul>
<li><code>transferTo()</code>：通过 FileChannel 把文件里面的源数据写入一个 WritableByteChannel 的目的通道。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WritableByteChannel</span><span style="color:#E06C75"> target)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>transferFrom()</code>：把一个源通道 ReadableByteChannel 中的数据读取到当前 FileChannel 的文件里面。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferFrom</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ReadableByteChannel</span><span style="color:#E06C75"> src</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> count)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面给出 FileChannel 利用 transferTo() 和 transferFrom() 方法进行数据传输的使用示例：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CONTENT </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Zero copy implemented by FileChannel"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> SOURCE_FILE </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/source.txt"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> TARGET_FILE </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/target.txt"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CHARSET </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "UTF-8"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在类加载根路径下创建 source.txt 和 target.txt 两个文件，对源文件 source.txt 文件写入初始化数据。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Before</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setup</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Path</span><span style="color:#E06C75"> source </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getClassPath</span><span style="color:#ABB2BF">(SOURCE_FILE));</span></span>
<span class="line"><span style="color:#C678DD">    byte</span><span style="color:#E06C75">[] bytes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CONTENT</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(CHARSET));</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fromChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(source, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">            StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WRITE</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUNCATE_EXISTING</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wrap</span><span style="color:#ABB2BF">(bytes));</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 transferTo() 方法而言，目的通道 toChannel 可以是任意的单向字节写通道 WritableByteChannel；而对于 transferFrom() 方法而言，源通道 fromChannel 可以是任意的单向字节读通道 ReadableByteChannel。其中，FileChannel、SocketChannel 和 DatagramChannel 等通道实现了 WritableByteChannel 和 ReadableByteChannel 接口，都是同时支持读写的双向通道。为了方便测试，下面给出基于 FileChannel 完成 channel-to-channel 的数据传输示例。</p>
<p>通过 transferTo() 将 fromChannel 中的数据拷贝到 toChannel</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fromChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(SOURCE_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">         FileChannel</span><span style="color:#E06C75"> toChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(TARGET_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> position </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> offset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferTo</span><span style="color:#ABB2BF">(position, offset, toChannel);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 transferFrom() 将 fromChannel 中的数据拷贝到 toChannel</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> transferFrom</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fromChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(SOURCE_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">         FileChannel</span><span style="color:#E06C75"> toChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(TARGET_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> position </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> offset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        toChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferFrom</span><span style="color:#ABB2BF">(fromChannel, position, offset);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍 transferTo() 和 transferFrom() 方法的底层实现原理，这两个方法也是 java.nio.channels.FileChannel 的抽象方法，由子类 sun.nio.ch.FileChannelImpl.java 实现。transferTo() 和 transferFrom() 底层都是基于 sendfile 实现数据传输的，其中 FileChannelImpl.java 定义了 3 个常量，用于标示当前操作系统的内核是否支持 sendfile 以及 sendfile 的相关特性。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> transferSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> pipeSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> fileSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>transferSupported</code>：用于标记当前的系统内核是否支持 sendfile() 调用，默认为 true。</li>
<li><code>pipeSupported</code>：用于标记当前的系统内核是否支持文件描述符（fd）基于管道（pipe）的 sendfile() 调用，默认为 true。</li>
<li><code>fileSupported</code>：用于标记当前的系统内核是否支持文件描述符（fd）基于文件（file）的 sendfile() 调用，默认为 true。</li>
</ul>
<p>下面以 transferTo() 的源码实现为例。FileChannelImpl 首先执行 transferToDirectly() 方法，以 sendfile 的零拷贝方式尝试数据拷贝。如果系统内核不支持 sendfile，进一步执行 transferToTrustedChannel() 方法，以 mmap 的零拷贝方式进行内存映射，这种情况下目的通道必须是 FileChannelImpl 或者 SelChImpl 类型。如果以上两步都失败了，则执行 transferToArbitraryChannel() 方法，基于传统的 I/O 方式完成读写，具体步骤是初始化一个临时的 DirectBuffer，将源通道 FileChannel 的数据读取到 DirectBuffer，再写入目的通道 WritableByteChannel 里面。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WritableByteChannel</span><span style="color:#E06C75"> target)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 计算文件的大小</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> sz </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> size</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 校验起始位置</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (position </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> sz)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> icount </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(count, </span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 校验偏移量</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((sz </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> position) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> icount)</span></span>
<span class="line"><span style="color:#E06C75">        icount </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(sz </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> position)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> transferToDirectly</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> transferToTrustedChannel</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> transferToArbitraryChannel</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来重点分析一下 transferToDirectly() 方法的实现，也就是 transferTo() 通过 sendfile 实现零拷贝的精髓所在。可以看到，transferToDirectlyInternal() 方法先获取到目的通道 WritableByteChannel 的文件描述符 targetFD，获取同步锁然后执行 transferToDirectlyInternal() 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferToDirectly</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WritableByteChannel</span><span style="color:#E06C75"> target)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 省略从target获取targetFD的过程</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">nd</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferToDirectlyNeedsPositionLock</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#E06C75"> (positionLock) {</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> pos </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> position</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#61AFEF"> transferToDirectlyInternal</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                        target</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> targetFD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">                position</span><span style="color:#E06C75">(pos)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> transferToDirectlyInternal</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> targetFD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终由 transferToDirectlyInternal() 调用本地方法 transferTo0() ，尝试以 sendfile 的方式进行数据传输。如果系统内核完全不支持 sendfile，比如 Windows 操作系统，则返回 UNSUPPORTED 并把 transferSupported 标识为 false。如果系统内核不支持 sendfile 的一些特性，比如说低版本的 Linux 内核不支持 DMA gather copy 操作，则返回 UNSUPPORTED_CASE 并把 pipeSupported 或者 fileSupported 标识为 false。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferToDirectlyInternal</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                        WritableByteChannel</span><span style="color:#E06C75"> target</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                        FileDescriptor</span><span style="color:#E06C75"> targetFD) throws IOException {</span></span>
<span class="line"><span style="color:#C678DD">    assert</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">nd</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferToDirectlyNeedsPositionLock</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">holdsLock</span><span style="color:#ABB2BF">(positionLock);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> ti </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">        begin</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        ti </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> threads</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isOpen</span><span style="color:#E06C75">())</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> transferTo0</span><span style="color:#E06C75">(fd</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> targetFD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">INTERRUPTED</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> isOpen</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED_CASE</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (target </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> SinkChannelImpl)</span></span>
<span class="line"><span style="color:#E06C75">                pipeSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (target </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> FileChannelImpl)</span></span>
<span class="line"><span style="color:#E06C75">                fileSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED_CASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            transferSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">normalize</span><span style="color:#ABB2BF">(n);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        threads</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(ti);</span></span>
<span class="line"><span style="color:#61AFEF">        end</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地方法（native method）transferTo0() 通过 JNI（Java Native Interface）调用底层 C 的函数，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_transferTo0）同样位于 JDK 源码包下的 native/sun/nio/ch/FileChannelImpl.c 源文件里面。JNI 函数 Java_sun_nio_ch_FileChannelImpl_transferTo0() 基于条件编译对不同的系统进行预编译，下面是 JDK 基于 Linux 系统内核对 transferTo() 提供的调用封装。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">#if</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__linux__</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">||</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__solaris__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/sendfile.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">_AIX</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">_ALLBSD_SOURCE</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/uio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">#define</span><span style="color:#61AFEF"> lseek64</span><span style="color:#ABB2BF"> lseek</span></span>
<span class="line"><span style="color:#C678DD">#define</span><span style="color:#61AFEF"> mmap64</span><span style="color:#ABB2BF"> mmap</span></span>
<span class="line"><span style="color:#C678DD">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">JNIEXPORT jlong JNICALL</span></span>
<span class="line"><span style="color:#61AFEF">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">JNIEnv </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">env</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">this</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                            jobject </span><span style="color:#E06C75;font-style:italic">srcFDO</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                            jlong </span><span style="color:#E06C75;font-style:italic">position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">count</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                            jobject </span><span style="color:#E06C75;font-style:italic">dstFDO</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF">    jint srcFD </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> fdval</span><span style="color:#ABB2BF">(env, srcFDO);</span></span>
<span class="line"><span style="color:#ABB2BF">    jint dstFD </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> fdval</span><span style="color:#ABB2BF">(env, dstFDO);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">#if</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__linux__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2">    off64_t</span><span style="color:#ABB2BF"> offset </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">off64_t</span><span style="color:#ABB2BF">)position;</span></span>
<span class="line"><span style="color:#ABB2BF">    jlong n </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> sendfile64</span><span style="color:#ABB2BF">(dstFD, srcFD, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">offset, (</span><span style="color:#C678DD">size_t</span><span style="color:#ABB2BF">)count);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__solaris__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    result </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> sendfilev64</span><span style="color:#ABB2BF">(dstFD, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">sfv, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">numBytes);    </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__APPLE__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    result </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> sendfile</span><span style="color:#ABB2BF">(srcFD, dstFD, position, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">numBytes, </span><span style="color:#D19A66">NULL</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#C678DD">#endif</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 Linux、Solaris 以及 Apple 系统而言，transferTo0() 函数底层会执行 sendfile64 这个系统调用完成零拷贝操作，sendfile64() 函数的原型如下：</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/sendfile.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">ssize_t</span><span style="color:#61AFEF"> sendfile64</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> out_fd</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> in_fd</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> off_t</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">offset</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> count</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面简单介绍一下 sendfile64() 函数各个参数的含义：</p>
<ul>
<li><code>out_fd</code>：待写入的文件描述符</li>
<li><code>in_fd</code>：待读取的文件描述符</li>
<li><code>offset</code>：指定 in_fd 对应文件流的读取位置，如果为空，则默认从起始位置开始</li>
<li><code>count</code>：指定在文件描述符 in_fd 和 out_fd 之间传输的字节数</li>
</ul>
<p>在 Linux 2.6.3 之前，out_fd 必须是一个 socket，而从 Linux 2.6.3 以后，out_fd 可以是任何文件。也就是说，sendfile64() 函数不仅可以进行网络文件传输，还可以对本地文件实现零拷贝操作。</p>
<h2><a class="header-anchor" href="#其它的零拷贝实现"><span></span></a><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0">#</a> 其它的零拷贝实现</h2>
<h3><a class="header-anchor" href="#netty零拷贝"><span></span></a><a href="#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D">#</a> Netty零拷贝</h3>
<p>Netty 中的零拷贝和上面提到的操作系统层面上的零拷贝不太一样, 我们所说的 Netty 零拷贝完全是基于（Java 层面）用户态的，它的更多的是偏向于数据操作优化这样的概念，具体表现在以下几个方面：</p>
<p>Netty 通过 DefaultFileRegion 类对 java.nio.channels.FileChannel 的 tranferTo() 方法进行包装，在文件传输时可以将文件缓冲区的数据直接发送到目的通道（Channel）</p>
<p>ByteBuf 可以通过 wrap 操作把字节数组、ByteBuf、ByteBuffer 包装成一个 ByteBuf 对象, 进而避免了拷贝操作 ByteBuf 支持 slice 操作, 因此可以将 ByteBuf 分解为多个共享同一个存储区域的 ByteBuf，避免了内存的拷贝 Netty 提供了 CompositeByteBuf 类，它可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免了各个 ByteBuf 之间的拷贝 其中第 1 条属于操作系统层面的零拷贝操作，后面 3 条只能算用户层面的数据操作优化。</p>
<h3><a class="header-anchor" href="#rocketmq和kafka对比"><span></span></a><a href="#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94">#</a> RocketMQ和Kafka对比</h3>
<p>RocketMQ 选择了 mmap + write 这种零拷贝方式，适用于业务级消息这种小块文件的数据持久化和传输；而 Kafka 采用的是 sendfile 这种零拷贝方式，适用于系统日志消息这种高吞吐量的大块文件的数据持久化和传输。但是值得注意的一点是，Kafka 的索引文件使用的是 mmap + write 方式，数据文件使用的是 sendfile 方式。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>NIO 体系详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">NIO 体系详解</source>
      <description>的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 NIO 体系详解 流与块 通道与缓冲区 1. 通道 2. 缓冲区 缓冲区状态变量 文件 NIO 实例 选择器 1. 创建选择器 2. 将通道注册到选择器上 3. 监听事件 4. 获取到达的事件 5. 事件循环 套接字 NIO 实例...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>
</blockquote>
<ul>
<li>NIO 体系详解
<ul>
<li><a href="#%E6%B5%81%E4%B8%8E%E5%9D%97">流与块</a></li>
<li>通道与缓冲区
<ul>
<li><a href="#1-%E9%80%9A%E9%81%93">1. 通道</a></li>
<li><a href="#2-%E7%BC%93%E5%86%B2%E5%8C%BA">2. 缓冲区</a></li>
</ul>
</li>
<li><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F">缓冲区状态变量</a></li>
<li><a href="#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B">文件 NIO 实例</a></li>
<li>选择器
<ul>
<li><a href="#1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8">1. 创建选择器</a></li>
<li><a href="#2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A">2. 将通道注册到选择器上</a></li>
<li><a href="#3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">3. 监听事件</a></li>
<li><a href="#4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6">4. 获取到达的事件</a></li>
<li><a href="#5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">5. 事件循环</a></li>
</ul>
</li>
<li><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B">套接字 NIO 实例</a></li>
<li><a href="#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">内存映射文件</a></li>
<li><a href="#%E5%AF%B9%E6%AF%94">对比</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<p>Standard IO是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。</p>
<h2><a class="header-anchor" href="#流与块"><span></span></a><a href="#%E6%B5%81%E4%B8%8E%E5%9D%97">#</a> 流与块</h2>
<p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p>
<p>面向流的 I/O 一次处理一个字节数据: 一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p>
<p>面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p>
<p>I/O 包和 NIO 已经很好地集成了，java.io.* 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，java.io.* 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p>
<h2><a class="header-anchor" href="#通道与缓冲区"><span></span></a><a href="#%E9%80%9A%E9%81%93%E4%B8%8E%E7%BC%93%E5%86%B2%E5%8C%BA">#</a> 通道与缓冲区</h2>
<h3><a class="header-anchor" href="#_1-通道"><span></span></a><a href="#_1-%E9%80%9A%E9%81%93">#</a> 1. 通道</h3>
<p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p>
<p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p>
<p>通道包括以下类型:</p>
<ul>
<li>FileChannel: 从文件中读写数据；</li>
<li>DatagramChannel: 通过 UDP 读写网络中数据；</li>
<li>SocketChannel: 通过 TCP 读写网络中数据；</li>
<li>ServerSocketChannel: 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li>
</ul>
<h3><a class="header-anchor" href="#_2-缓冲区"><span></span></a><a href="#_2-%E7%BC%93%E5%86%B2%E5%8C%BA">#</a> 2. 缓冲区</h3>
<p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p>
<p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p>
<p>缓冲区包括以下类型:</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>ShortBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>FloatBuffer</li>
<li>DoubleBuffer</li>
</ul>
<h2><a class="header-anchor" href="#缓冲区状态变量"><span></span></a><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F">#</a> 缓冲区状态变量</h2>
<ul>
<li>capacity: 最大容量；</li>
<li>position: 当前已经读写的字节数；</li>
<li>limit: 还可以读写的字节数。</li>
</ul>
<p>状态变量的改变过程举例:</p>
<p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/80804f52-8815-4096-b506-48eef3eed5c6.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/952e06bd-5a65-4cab-82e4-dd1536462f38.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/67bf5487-c45d-49b6-b9c0-a058d8c68902.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h2><a class="header-anchor" href="#文件-nio-实例"><span></span></a><a href="#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B">#</a> 文件 NIO 实例</h2>
<p>以下展示了使用 NIO 快速复制文件的实例:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fastCopy</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> src</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> dist) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获得源文件的输入字节流 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> fin </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(src)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获取输入字节流的文件通道 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileChannel</span><span style="color:#E06C75"> fcin </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获取目标文件的输出字节流 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileOutputStream</span><span style="color:#E06C75"> fout </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#E06C75">(dist)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获取输出字节流的通道 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileChannel</span><span style="color:#E06C75"> fcout </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 为缓冲区分配 1024 个字节 */</span></span>
<span class="line"><span style="color:#E5C07B">    ByteBuffer</span><span style="color:#E06C75"> buffer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocateDirect</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">true</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 从输入通道中读取数据到缓冲区中 */</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fcin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* read() 返回 -1 表示 EOF */</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (r </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 切换读写 */</span></span>
<span class="line"><span style="color:#E5C07B">        buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 把缓冲区的内容写入输出文件中 */</span></span>
<span class="line"><span style="color:#E5C07B">        fcout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#E06C75">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 清空缓冲区 */</span></span>
<span class="line"><span style="color:#E5C07B">        buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#选择器"><span></span></a><a href="#%E9%80%89%E6%8B%A9%E5%99%A8">#</a> 选择器</h2>
<p>NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。</p>
<p>NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。</p>
<p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p>
<p>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件具有更好的性能。</p>
<p>应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/4d930e22-f493-49ae-8dff-ea21cd6895dc.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#_1-创建选择器"><span></span></a><a href="#_1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8">#</a> 1. 创建选择器</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Selector</span><span style="color:#E06C75"> selector </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_2-将通道注册到选择器上"><span></span></a><a href="#_2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A">#</a> 2. 将通道注册到选择器上</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ServerSocketChannel</span><span style="color:#E06C75"> ssChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ServerSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configureBlocking</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">register</span><span style="color:#ABB2BF">(selector, </span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_ACCEPT</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p>
<p>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类:</p>
<ul>
<li>SelectionKey.OP_CONNECT</li>
<li>SelectionKey.OP_ACCEPT</li>
<li>SelectionKey.OP_READ</li>
<li>SelectionKey.OP_WRITE</li>
</ul>
<p>它们在 SelectionKey 的定义如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_READ </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_WRITE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_CONNECT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_ACCEPT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> interestSet </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_READ</span><span style="color:#56B6C2"> |</span><span style="color:#E5C07B"> SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_WRITE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_3-监听事件"><span></span></a><a href="#_3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">#</a> 3. 监听事件</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> num </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">select</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p>
<h3><a class="header-anchor" href="#_4-获取到达的事件"><span></span></a><a href="#_4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6">#</a> 4. 获取到达的事件</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keys </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">selectedKeys</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keyIterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keys</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    SelectionKey</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAcceptable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // ...</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isReadable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // ...</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_5-事件循环"><span></span></a><a href="#_5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">#</a> 5. 事件循环</h3>
<p>因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">true</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> num </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">select</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keys </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">selectedKeys</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keyIterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keys</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        SelectionKey</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAcceptable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // ...</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isReadable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // ...</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E5C07B">        keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#套接字-nio-实例"><span></span></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B">#</a> 套接字 NIO 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NIOServer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Selector</span><span style="color:#E06C75"> selector</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ServerSocketChannel</span><span style="color:#E06C75"> ssChannel</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ServerSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configureBlocking</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">register</span><span style="color:#ABB2BF">(selector, </span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_ACCEPT</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ServerSocket</span><span style="color:#E06C75"> serverSocket</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">socket</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        InetSocketAddress</span><span style="color:#E06C75"> address</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"127.0.0.1"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8888</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        serverSocket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(address);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">select</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">keys</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">selectedKeys</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">keyIterator</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> keys</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                SelectionKey</span><span style="color:#E06C75"> key</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAcceptable</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                    ServerSocketChannel</span><span style="color:#E06C75"> ssChannel1</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (ServerSocketChannel) </span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">channel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 服务器会为每个新连接创建一个 SocketChannel</span></span>
<span class="line"><span style="color:#E5C07B">                    SocketChannel</span><span style="color:#E06C75"> sChannel</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ssChannel1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                    sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configureBlocking</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 这个新连接主要用于从客户端读取数据</span></span>
<span class="line"><span style="color:#E5C07B">                    sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">register</span><span style="color:#ABB2BF">(selector, </span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_READ</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isReadable</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                    SocketChannel</span><span style="color:#E06C75"> sChannel</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (SocketChannel) </span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">channel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">readDataFromSocketChannel</span><span style="color:#ABB2BF">(sChannel));</span></span>
<span class="line"><span style="color:#E5C07B">                    sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> readDataFromSocketChannel</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannel</span><span style="color:#E06C75;font-style:italic"> sChannel</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ByteBuffer</span><span style="color:#E06C75"> buffer</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        StringBuilder</span><span style="color:#E06C75"> data</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuilder</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> limit</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            char</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">dst</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> char</span><span style="color:#ABB2BF">[limit];</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> limit; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF">                dst[i] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">char</span><span style="color:#ABB2BF">) </span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            data</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(dst);</span></span>
<span class="line"><span style="color:#E5C07B">            buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> data</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NIOClient</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Socket</span><span style="color:#E06C75"> socket</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Socket</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"127.0.0.1"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8888</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        OutputStream</span><span style="color:#E06C75"> out</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> socket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOutputStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> s</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "hello world"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#内存映射文件"><span></span></a><a href="#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">#</a> 内存映射文件</h2>
<p>内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的 I/O 快得多。</p>
<p>向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p>
<p>下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">MappedByteBuffer</span><span style="color:#E06C75"> mbb </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MapMode</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ_WRITE</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#对比"><span></span></a><a href="#%E5%AF%B9%E6%AF%94">#</a> 对比</h2>
<p>NIO 与普通 I/O 的区别主要有以下两点:</p>
<ul>
<li>NIO 是非阻塞的</li>
<li>NIO 面向块，I/O 面向流</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" type="image/png"/>
    </item>
    <item>
      <title>ArrayList 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">ArrayList 源码解析</source>
      <description>本文主要对ArrayList进行源码解析。 ArrayList 源码解析 概述 ArrayList的实现 底层数据结构 构造函数 自动扩容 add(), addAll() set() get() remove() trimToSize() indexOf(), lastIndexOf() Fail-Fast机制: 参考 # 概述 ArrayList实现...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对ArrayList进行源码解析。</p>
</blockquote>
<ul>
<li>ArrayList 源码解析
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li>ArrayList的实现
<ul>
<li><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">底层数据结构</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9">自动扩容</a></li>
<li><a href="#add-addall">add(), addAll()</a></li>
<li><a href="#set">set()</a></li>
<li><a href="#get">get()</a></li>
<li><a href="#remove">remove()</a></li>
<li><a href="#trimtosize">trimToSize()</a></li>
<li><a href="#indexof-lastindexof">indexOf(), lastIndexOf()</a></li>
<li><a href="#fail-fast%E6%9C%BA%E5%88%B6">Fail-Fast机制:</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h2>
<p><em>ArrayList</em>实现了<em>List</em>接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入<code>null</code>元素，底层通过<strong>数组实现</strong>。除该类未实现同步外，其余跟<em>Vector</em>大致相同。每个<em>ArrayList</em>都有一个容量(capacity)，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。前面已经提过，Java泛型只是编译器提供的语法糖，所以这里的数组是一个Object数组，以便能够容纳任何类型的对象。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png" alt="ArrayList_base" tabindex="0" loading="lazy"><figcaption>ArrayList_base</figcaption></figure>
<p>size(), isEmpty(), get(), set()方法均能在常数时间内完成，add()方法的时间开销跟插入位置有关，addAll()方法的时间开销跟添加元素的个数成正比。其余方法大都是线性时间。</p>
<p>为追求效率，ArrayList没有实现同步(synchronized)，如果需要多个线程并发访问，用户可以手动同步，也可使用Vector替代。</p>
<h2><a class="header-anchor" href="#arraylist的实现"><span></span></a><a href="#arraylist%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> ArrayList的实现</h2>
<h3><a class="header-anchor" href="#底层数据结构"><span></span></a><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 底层数据结构</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The array buffer into which the elements of the ArrayList are stored.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The capacity of the ArrayList is the length of this array buffer. Any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    transient</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] elementData</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // non-private to simplify nested class access</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The size of the ArrayList (the number of elements it contains).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@serial</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#构造函数"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an empty list with the specified initial capacity.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic">  initialCapacity</span><span style="color:#7F848E;font-style:italic">  the initial capacity of the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IllegalArgumentException</span><span style="color:#7F848E;font-style:italic"> if the specified initial capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         is negative</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> initialCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[initialCapacity]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Illegal Capacity: "</span><span style="color:#56B6C2">+</span></span>
<span class="line"><span style="color:#E06C75">                                               initialCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an empty list with an initial capacity of ten.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * collection, in the order they are returned by the collection's</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E06C75">        elementData </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((size </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">elementData</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> !=</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[]</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                elementData </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elementData, size, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">[].</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // replace with empty array.</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#自动扩容"><span></span></a><a href="#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9">#</a> 自动扩容</h3>
<p>每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p>
<p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * necessary, to ensure that it can hold at least the number of elements</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified by the minimum capacity argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic">   minCapacity</span><span style="color:#7F848E;font-style:italic">   the desired minimum capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureCapacity</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> minExpand </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (elementData </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // any size if not default element table</span></span>
<span class="line"><span style="color:#C678DD">            ?</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // larger than default for default empty table. It's already</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // supposed to be at default size.</span></span>
<span class="line"><span style="color:#C678DD">            :</span><span style="color:#E06C75"> DEFAULT_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> minExpand) {</span></span>
<span class="line"><span style="color:#61AFEF">            ensureExplicitCapacity</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureCapacityInternal</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (elementData </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></span>
<span class="line"><span style="color:#E06C75">            minCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">(DEFAULT_CAPACITY, minCapacity);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        ensureExplicitCapacity</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureExplicitCapacity</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">            grow</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The maximum size of array to allocate.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Some VMs reserve some header words in an array.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Attempts to allocate larger arrays may result in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * OutOfMemoryError: Requested array size exceeds VM limit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Increases the capacity to ensure that it can hold at least the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * number of elements specified by the minimum capacity argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#7F848E;font-style:italic"> the desired minimum capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> grow</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> (oldCapacity </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> minCapacity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // minCapacity is usually close to size, so this is a win:</span></span>
<span class="line"><span style="color:#E06C75">        elementData </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elementData, newCapacity);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// overflow</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAX_ARRAY_SIZE) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E5C07B">            Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#E06C75">            MAX_ARRAY_SIZE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_grow.png" alt="ArrayList_grow" tabindex="0" loading="lazy"><figcaption>ArrayList_grow</figcaption></figure>
<h3><a class="header-anchor" href="#add-addall"><span></span></a><a href="#add-addall">#</a> add(), addAll()</h3>
<p>跟C++ 的<em>vector</em>不同，<em>ArrayList</em>没有<code>push_back()</code>方法，对应的方法是<code>add(E e)</code>，<em>ArrayList</em>也没有<code>insert()</code>方法，对应的方法是<code>add(int index, E e)</code>。这两个方法都是向容器中添加新元素，这可能会导致<em>capacity</em>不足，因此在添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容。扩容操作最终是通过<code>grow()</code>方法完成的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends the specified element to the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> element to be appended to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount!!</span></span>
<span class="line"><span style="color:#E06C75">        elementData[size</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the specified position in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list. Shifts the element currently at that position (if any) and</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * any subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        rangeCheckForAdd</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount!!</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elementData, index, elementData, index </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">                         size </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> index);</span></span>
<span class="line"><span style="color:#E06C75">        elementData[index] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_add.png" alt="ArrayList_add" tabindex="0" loading="lazy"><figcaption>ArrayList_add</figcaption></figure>
<p><code>add(int index, E e)</code>需要先对元素进行移动，然后完成插入操作，也就意味着该方法有着线性的时间复杂度。</p>
<p><code>addAll()</code>方法能够一次添加多个元素，根据位置不同也有两个版本，一个是在末尾添加的<code>addAll(Collection&lt;? extends E&gt; c)</code>方法，一个是从指定位置开始插入的<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>方法。跟<code>add()</code>方法类似，在插入之前也需要进行空间检查，如果需要则自动扩容；如果从指定位置插入，也会存在移动元素的情况。 <code>addAll()</code>的时间复杂度不仅跟插入元素的多少有关，也跟插入的位置相关。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends all of the elements in the specified collection to the end of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this list, in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified collection's Iterator.  The behavior of this operation is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * undefined if the specified collection is modified while the operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * is in progress.  (This implies that the behavior of this call is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * undefined if the specified collection is this list, and this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list is nonempty.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> numNew)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(a, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, elementData, size, numNew);</span></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> numNew</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts all of the elements in the specified collection into this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list, starting at the specified position.  Shifts the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * currently at that position (if any) and any subsequent elements to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the right (increases their indices).  The new elements will appear</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in the list in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified collection's iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which to insert the first element from the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *              specified collection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#61AFEF">        rangeCheckForAdd</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> numNew)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numMoved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (numMoved </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elementData, index, elementData, index </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> numNew,</span></span>
<span class="line"><span style="color:#ABB2BF">                             numMoved);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(a, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, elementData, index, numNew);</span></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> numNew</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#set"><span></span></a><a href="#set">#</a> set()</h3>
<p>既然底层是一个数组<em>ArrayList</em>的<code>set()</code>方法也就变得非常简单，直接对数组的指定位置赋值即可。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">    rangeCheck</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//下标越界检查</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> elementData</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    elementData[index] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//赋值到指定位置，复制的仅仅是引用</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h3>
<p><code>get()</code>方法同样很简单，唯一要注意的是由于底层数组是Object[]，得到元素后需要进行类型转换。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">    rangeCheck</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (E) elementData[index]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//注意类型转换</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h3>
<p><code>remove()</code>方法也有两个版本，一个是<code>remove(int index)</code>删除指定位置的元素，另一个是<code>remove(Object o)</code>删除第一个满足<code>o.equals(elementData[index])</code>的元素。删除操作是<code>add()</code>操作的逆过程，需要将删除点之后的元素向前移动一个位置。需要注意的是为了让GC起作用，必须显式的为最后一个位置赋<code>null</code>值。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">    rangeCheck</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> elementData</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> numMoved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (numMoved </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elementData, index</span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, elementData, index, numMoved);</span></span>
<span class="line"><span style="color:#E06C75">    elementData[</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">size] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //清除该位置的引用，让GC起作用</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Java GC这里需要特别说明一下，<strong>有了垃圾收集器并不意味着一定不会有内存泄漏</strong>。对象能否被GC的依据是是否还有引用指向它，上面代码中如果不手动赋<code>null</code>值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p>
<h3><a class="header-anchor" href="#trimtosize"><span></span></a><a href="#trimtosize">#</a> trimToSize()</h3>
<p>ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize方法来实现。代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list's current size.  An application can use this operation to minimize</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> trimToSize</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            elementData </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">              ?</span><span style="color:#E5C07B"> EMPTY_ELEMENTDATA</span></span>
<span class="line"><span style="color:#C678DD">              :</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elementData, size);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#indexof-lastindexof"><span></span></a><a href="#indexof-lastindexof">#</a> indexOf(), lastIndexOf()</h3>
<p>获取元素的第一次出现的index:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the first occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> indexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (elementData[i]</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(elementData[i])</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取元素的最后一次出现的index:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the last occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> lastIndexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (elementData[i]</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(elementData[i])</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#fail-fast机制"><span></span></a><a href="#fail-fast%E6%9C%BA%E5%88%B6">#</a> Fail-Fast机制:</h3>
<p>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png" type="image/png"/>
    </item>
    <item>
      <title>Collection 类关系图</title>
      <link>https://cactusli.net/posts/Java/Collection/Collection%20%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/Collection%20%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.html</guid>
      <source url="https://cactusli.net/rss.xml">Collection 类关系图</source>
      <description>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。 Collection 类关系图 知识体系结构 介绍 Collection Set TreeSet HashSet LinkedHashSet List ArrayList Vector LinkedList Queue LinkedList Priorit...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:10:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。</p>
</blockquote>
<ul>
<li>Collection 类关系图
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">知识体系结构</a></li>
</ul>
<!-- more -->
<ul>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li>Collection
<ul>
<li>Set
<ul>
<li><a href="#treeset">TreeSet</a></li>
<li><a href="#hashset">HashSet</a></li>
<li><a href="#linkedhashset">LinkedHashSet</a></li>
</ul>
</li>
<li>List
<ul>
<li><a href="#arraylist">ArrayList</a></li>
<li><a href="#vector">Vector</a></li>
<li><a href="#linkedlist">LinkedList</a></li>
</ul>
</li>
<li>Queue
<ul>
<li><a href="#linkedlist-1">LinkedList</a></li>
<li><a href="#priorityqueue">PriorityQueue</a></li>
</ul>
</li>
</ul>
</li>
<li>Map
<ul>
<li><a href="#treemap">TreeMap</a></li>
<li><a href="#hashmap">HashMap</a></li>
<li><a href="#hashtable">HashTable</a></li>
<li><a href="#linkedhashmap">LinkedHashMap</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系结构"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">#</a> 知识体系结构</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_collections_overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#介绍"><span></span></a><a href="#%E4%BB%8B%E7%BB%8D">#</a> 介绍</h2>
<p>容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p>
<ul>
<li>降低编程难度</li>
<li>提高程序性能</li>
<li>提高API间的互操作性</li>
<li>降低学习难度</li>
<li>降低设计和实现相关API的难度</li>
<li>增加程序的重用性</li>
</ul>
<p>Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</p>
<h2><a class="header-anchor" href="#collection"><span></span></a><a href="#collection">#</a> Collection</h2>
<blockquote>
<p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。</p>
</blockquote>
<h3><a class="header-anchor" href="#set"><span></span></a><a href="#set">#</a> Set</h3>
<h4><a class="header-anchor" href="#treeset"><span></span></a><a href="#treeset">#</a> TreeSet</h4>
<p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p>
<h4><a class="header-anchor" href="#hashset"><span></span></a><a href="#hashset">#</a> HashSet</h4>
<p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p>
<h4><a class="header-anchor" href="#linkedhashset"><span></span></a><a href="#linkedhashset">#</a> LinkedHashSet</h4>
<p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p>
<h3><a class="header-anchor" href="#list"><span></span></a><a href="#list">#</a> List</h3>
<h4><a class="header-anchor" href="#arraylist"><span></span></a><a href="#arraylist">#</a> ArrayList</h4>
<p>基于动态数组实现，支持随机访问。</p>
<h4><a class="header-anchor" href="#vector"><span></span></a><a href="#vector">#</a> Vector</h4>
<p>和 ArrayList 类似，但它是线程安全的。</p>
<h4><a class="header-anchor" href="#linkedlist"><span></span></a><a href="#linkedlist">#</a> LinkedList</h4>
<p>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p>
<h3><a class="header-anchor" href="#queue"><span></span></a><a href="#queue">#</a> Queue</h3>
<h4><a class="header-anchor" href="#linkedlist-1"><span></span></a><a href="#linkedlist-1">#</a> LinkedList</h4>
<p>可以用它来实现双向队列。</p>
<h4><a class="header-anchor" href="#priorityqueue"><span></span></a><a href="#priorityqueue">#</a> PriorityQueue</h4>
<p>基于堆结构实现，可以用它来实现优先队列。</p>
<h2><a class="header-anchor" href="#map"><span></span></a><a href="#map">#</a> Map</h2>
<h3><a class="header-anchor" href="#treemap"><span></span></a><a href="#treemap">#</a> TreeMap</h3>
<p>基于红黑树实现。</p>
<h3><a class="header-anchor" href="#hashmap"><span></span></a><a href="#hashmap">#</a> HashMap</h3>
<p>基于哈希表实现。</p>
<h3><a class="header-anchor" href="#hashtable"><span></span></a><a href="#hashtable">#</a> HashTable</h3>
<p>和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p>
<h3><a class="header-anchor" href="#linkedhashmap"><span></span></a><a href="#linkedhashmap">#</a> LinkedHashMap</h3>
<p>使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_collections_overview.png" type="image/png"/>
    </item>
    <item>
      <title>HashSet &amp; HashMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">HashSet &amp; HashMap 源码解析</source>
      <description>本文主要对HashSet &amp; HashMap 进行源码解析。 HashSet &amp; HashMap 源码解析 Java7 HashMap 概述 get() put() remove() Java8 HashMap put 过程分析 数组扩容 get 过程分析 HashSet # Java7 HashMap # 概述 之所以把HashSet和HashMap...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对HashSet &amp; HashMap 进行源码解析。</p>
</blockquote>
<ul>
<li>HashSet &amp; HashMap 源码解析
<ul>
<li>Java7 HashMap
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li><a href="#get">get()</a></li>
<li><a href="#put">put()</a></li>
<li><a href="#remove">remove()</a></li>
</ul>
</li>
<li>Java8 HashMap
<ul>
<li><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">put 过程分析</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">数组扩容</a></li>
<li><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">get 过程分析</a></li>
</ul>
</li>
<li><a href="#hashset">HashSet</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java7-hashmap"><span></span></a><a href="#java7-hashmap">#</a> Java7 HashMap</h2>
<h3><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h3>
<p>之所以把<em>HashSet</em>和<em>HashMap</em>放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<em>HashSet</em>里面有一个<em>HashMap</em>(适配器模式)。因此本文将重点分析<em>HashMap</em>。</p>
<p><em>HashMap</em>实现了<em>Map</em>接口，即允许放入<code>key</code>为<code>null</code>的元素，也允许插入<code>value</code>为<code>null</code>的元素；除该类未实现同步外，其余跟<code>Hashtable</code>大致相同；跟<em>TreeMap</em>不同，该容器不保证元素顺序，根据需要该容器可能会对元素重新哈希，元素的顺序也会被重新打散，因此不同时间迭代同一个<em>HashMap</em>的顺序可能会不同。 根据对冲突的处理方式不同，哈希表有两种实现方式，一种开放地址方式(Open addressing)，另一种是冲突链表方式(Separate chaining with linked lists)。<strong>Java7 HashMap采用的是冲突链表方式</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png" alt="HashMap_base" tabindex="0" loading="lazy"><figcaption>HashMap_base</figcaption></figure>
<p>从上图容易看出，如果选择合适的哈希函数，<code>put()</code>和<code>get()</code>方法可以在常数时间内完成。但在对<em>HashMap</em>进行迭代时，需要遍历整个table以及后面跟的冲突链表。因此对于迭代比较频繁的场景，不宜将<em>HashMap</em>的初始大小设的过大。</p>
<p>有两个参数可以影响<em>HashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p>
<p>将对象放入到<em>HashMap</em>或<em>HashSet</em>中时，有两个方法需要特别关心: <code>hashCode()</code>和<code>equals()</code>。<strong><code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”</strong>。所以，如果要将自定义的对象放入到<code>HashMap</code>或<code>HashSet</code>中，需要**@Override** <code>hashCode()</code>和<code>equals()</code>方法。</p>
<h3><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h3>
<p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>，该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.getValue()</code>。因此<code>getEntry()</code>是算法的核心。 算法思想是首先通过<code>hash()</code>函数得到对应<code>bucket</code>的下标，然后依次遍历冲突链表，通过<code>key.equals(k)</code>方法来判断是否是要找的那个<code>entry</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_getEntry.png" alt="HashMap_getEntry" tabindex="0" loading="lazy"><figcaption>HashMap_getEntry</figcaption></figure>
<p>上图中<code>hash(k)&amp;(table.length-1)</code>等价于<code>hash(k)%table.length</code>，原因是<em>HashMap</em>要求<code>table.length</code>必须是2的指数，因此<code>table.length-1</code>就是二进制低位全是1，跟<code>hash(k)</code>相与会将哈希值的高位全抹掉，剩下的就是余数了。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//getEntry()方法</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[hash</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//得到冲突链表</span></span>
<span class="line"><span style="color:#E06C75">         e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//依次遍历冲突链表中的每个entry</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //依据equals()方法判断是否相等</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#put"><span></span></a><a href="#put">#</a> put()</h3>
<p><code>put(K key, V value)</code>方法是将指定的<code>key, value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>getEntry()</code>方法；如果没有找到，则会通过<code>addEntry(int hash, K key, V value, int bucketIndex)</code>方法插入新的<code>entry</code>，插入方式为<strong>头插法</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_addEntry.png" alt="HashMap_addEntry" tabindex="0" loading="lazy"><figcaption>HashMap_addEntry</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//addEntry()</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> addEntry</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> bucketIndex) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((size </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> threshold) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> table[bucketIndex])) {</span></span>
<span class="line"><span style="color:#61AFEF">        resize</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2</span><span style="color:#56B6C2"> *</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//自动扩容，并重新哈希</span></span>
<span class="line"><span style="color:#E06C75">        hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> key) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key) </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        bucketIndex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//hash%table.length</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //在冲突链表头部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[bucketIndex]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table[bucketIndex] </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Entry</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h3>
<p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法的具体逻辑是在<code>removeEntryForKey(Object key)</code>里实现的。<code>removeEntryForKey()</code>方法会首先找到<code>key</code>值对应的<code>entry</code>，然后删除该<code>entry</code>(修改链表的相应引用)。查找过程跟<code>getEntry()</code>过程类似。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_removeEntryForKey.png" alt="HashMap_removeEntryForKey" tabindex="0" loading="lazy"><figcaption>HashMap_removeEntryForKey</figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//removeEntryForKey()</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> removeEntryForKey</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> indexFor</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//hash&amp;(table.length-1)</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[i]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//得到冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//遍历冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">))) {</span><span style="color:#7F848E;font-style:italic">//找到要删除的entry</span></span>
<span class="line"><span style="color:#E06C75">            modCount</span><span style="color:#ABB2BF">++;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> e) table[i] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//删除的是冲突链表的第一个entry</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#E5C07B"> prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#java8-hashmap"><span></span></a><a href="#java8-hashmap">#</a> Java8 HashMap</h2>
<p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 <strong>数组+链表+红黑树</strong> 组成。</p>
<p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。</p>
<p>为了降低这部分的开销，在 Java8 中，当链表中的元素达到了 8 个时，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p>
<p>来一张图简单示意一下吧：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-collection-hashmap8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>注意，上图是示意图，主要是描述结构，不会达到这个状态的，因为这么多数据的时候早就扩容了。</p>
<p>下面，我们还是用代码来介绍吧，个人感觉，Java8 的源码可读性要差一些，不过精简一些。</p>
<p>Java7 中使用 Entry 来代表每个 HashMap 中的数据节点，Java8 中使用 Node，基本没有区别，都是 key，value，hash 和 next 这四个属性，不过，Node 只能用于链表的情况，红黑树的情况需要使用 TreeNode。</p>
<p>我们根据数组元素中，第一个节点数据类型是 Node 还是 TreeNode 来判断该位置下是链表还是红黑树的。</p>
<h3><a class="header-anchor" href="#put-过程分析"><span></span></a><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> put 过程分析</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> putVal</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> true</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 第四个参数 onlyIfAbsent 如果是 true，那么只有在不存在该 key 时才会进行 put 操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 第五个参数 evict 我们这里不关心</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> putVal</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> onlyIfAbsent</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">               boolean</span><span style="color:#E06C75"> evict) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 第一次 put 值的时候，会触发下面的 resize()，类似 java7 的第一次 put 也要初始化数组长度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 第一次 resize 和后续的扩容有些不一样，因为这次是数组从 null 初始化到默认的 16 或自定义的初始容量</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">        n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (tab </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> resize</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 找到具体的数组下标，如果此位置没有值，那么直接初始化一下 Node 并放置在这个位置就可以了</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> hash]) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">        tab[i] </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> newNode</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">// 数组该位置有数据</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 首先，判断该位置的第一个数据和我们要插入的数据，key 是不是"相等"，如果是，取出这个节点</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#E06C75">            e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果该节点是代表红黑树的节点，调用红黑树的插值方法，本文不展开说红黑树</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeNode)</span></span>
<span class="line"><span style="color:#E06C75">            e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">TreeNode</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)p)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putTreeVal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, tab, hash, key, value);</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 到这里，说明数组该位置上是一个链表</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> binCount </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">binCount) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 插入到链表的最后面(Java7 是插入到链表的最前面)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                    p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> newNode</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // TREEIFY_THRESHOLD 为 8，所以，如果新插入的值是链表中的第 8 个</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 会触发下面的 treeifyBin，也就是将链表转换为红黑树</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (binCount </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> TREEIFY_THRESHOLD </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// -1 for 1st</span></span>
<span class="line"><span style="color:#61AFEF">                        treeifyBin</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hash)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果在该链表中找到了"相等"的 key(== 或 equals)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                    ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 此时 break，那么 e 为链表中[与要插入的新值的 key "相等"]的 node</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // e!=null 说明存在旧值的key与要插入的key"相等"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 对于我们分析的put操作，下面这个 if 其实就是进行 "值覆盖"，然后返回旧值</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            V</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">onlyIfAbsent </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">            afterNodeAccess</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ++</span><span style="color:#E06C75">modCount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 如果 HashMap 由于新插入这个值导致 size 已经超过了阈值，需要进行扩容</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">size </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> threshold)</span></span>
<span class="line"><span style="color:#61AFEF">        resize</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    afterNodeInsertion</span><span style="color:#E06C75">(evict)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 Java7 稍微有点不一样的地方就是，Java7 是先扩容后插入新值的，Java8 先插值再扩容，不过这个不重要。</p>
<h3><a class="header-anchor" href="#数组扩容"><span></span></a><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">#</a> 数组扩容</h3>
<p>resize() 方法用于初始化数组或数组扩容，每次扩容后，容量为原来的 2 倍，并进行数据迁移。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">resize</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] oldTab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (oldTab </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> oldTab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> threshold</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> newCap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> newThr </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (oldCap </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 对应数组扩容</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (oldCap </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> MAXIMUM_CAPACITY) {</span></span>
<span class="line"><span style="color:#E06C75">            threshold </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> oldTab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 将数组大小扩大一倍</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((newCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldCap </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> MAXIMUM_CAPACITY </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                 oldCap </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> DEFAULT_INITIAL_CAPACITY)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 将阈值扩大一倍</span></span>
<span class="line"><span style="color:#E06C75">            newThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldThr </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // double threshold</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (oldThr </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 对应使用 new HashMap(int initialCapacity) 初始化后，第一次 put 的时候</span></span>
<span class="line"><span style="color:#E06C75">        newCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldThr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">// 对应使用 new HashMap() 初始化后，第一次 put 的时候</span></span>
<span class="line"><span style="color:#E06C75">        newCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> DEFAULT_INITIAL_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        newThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(DEFAULT_LOAD_FACTOR </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> DEFAULT_INITIAL_CAPACITY)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (newThr </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        float</span><span style="color:#E06C75"> ft </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">float</span><span style="color:#E06C75">)newCap </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> loadFactor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        newThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (newCap </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> MAXIMUM_CAPACITY </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> ft </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">float</span><span style="color:#E06C75">)MAXIMUM_CAPACITY </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">                  (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)ft </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    threshold </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newThr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 用新的数组大小初始化新的数组</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] newTab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Node</span><span style="color:#E06C75">[newCap]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newTab</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 如果是初始化数组，到这里就结束了，返回 newTab 即可</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (oldTab </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 开始遍历原数组，进行数据迁移。</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> oldCap</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">j) {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldTab[j]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                oldTab[j] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果该数组位置上只有单个元素，那就简单了，简单迁移这个元素就可以了</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                    newTab[</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> (newCap </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果是红黑树，具体我们就不展开了</span></span>
<span class="line"><span style="color:#C678DD">                else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (e </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeNode)</span></span>
<span class="line"><span style="color:#E06C75">                    ((</span><span style="color:#E5C07B">TreeNode</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)e)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">split</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, newTab, j, oldCap);</span></span>
<span class="line"><span style="color:#C678DD">                else</span><span style="color:#E06C75"> { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 这块是处理链表的情况，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 需要将此链表拆成两个链表，放到新的数组中，并且保留原来的先后顺序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // loHead、loTail 对应一条链表，hiHead、hiTail 对应另一条链表，代码还是比较简单的</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> loHead </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> loTail </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> hiHead </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hiTail </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">                        next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> oldCap) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (loTail </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                loHead </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            else</span></span>
<span class="line"><span style="color:#E5C07B">                                loTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            loTail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#C678DD">                        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (hiTail </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                hiHead </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            else</span></span>
<span class="line"><span style="color:#E5C07B">                                hiTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            hiTail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (loTail </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        loTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 第一条链表</span></span>
<span class="line"><span style="color:#E06C75">                        newTab[j] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> loHead</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (hiTail </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        hiTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 第二条链表的新的位置是 j + oldCap，这个很好理解</span></span>
<span class="line"><span style="color:#E06C75">                        newTab[j </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> oldCap] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> hiHead</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> newTab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#get-过程分析"><span></span></a><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> get 过程分析</h3>
<p>相对于 put 来说，get 真的太简单了。</p>
<ul>
<li>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)</li>
<li>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步</li>
<li>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步</li>
<li>遍历链表，直到找到相等(==或equals)的 key</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getNode</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key)) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> ?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getNode</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">        (first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[(n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> hash]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 判断第一个节点是不是就是需要的</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">first</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#7F848E;font-style:italic"> // always check first node</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> first</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> first</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 判断是否是红黑树</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (first </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeNode)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">TreeNode</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)first)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getTreeNode</span><span style="color:#ABB2BF">(hash, key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 链表遍历</span></span>
<span class="line"><span style="color:#C678DD">            do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                    ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#hashset"><span></span></a><a href="#hashset">#</a> HashSet</h2>
<p>前面已经说过<em>HashSet</em>是对<em>HashMap</em>的简单包装，对<em>HashSet</em>的函数调用都会转换成合适的<em>HashMap</em>方法，因此<em>HashSet</em>的实现非常简单，只有不到300行代码。这里不再赘述。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//HashSet是对HashMap的简单包装</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> map</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//HashSet里面有一个HashMap</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Dummy value to associate with an Object in the backing Map</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> PRESENT </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> HashSet</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        map </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span><span style="color:#7F848E;font-style:italic">//简单的方法转换</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, PRESENT)</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png" type="image/png"/>
    </item>
    <item>
      <title>LinkedHashSet&amp;Map 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/LinkedHashSet_Map%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/LinkedHashSet_Map%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">LinkedHashSet&amp;Map 源码解析</source>
      <description>本文主要对LinkedHashSet&amp;Map 源码解析。 LinkedHashSet&amp;Map 源码解析 Java 7 - LinkedHashSet&amp;Map 总体介绍 方法剖析 get() put() remove() LinkedHashSet LinkedHashMap经典用法 # Java 7 - LinkedHashSet&amp;Map # 总体介绍...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对LinkedHashSet&amp;Map 源码解析。</p>
</blockquote>
<ul>
<li>LinkedHashSet&amp;Map 源码解析
<ul>
<li>Java 7 - LinkedHashSet&amp;Map
<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">总体介绍</a></li>
<li>方法剖析
<ul>
<li><a href="#get">get()</a></li>
<li><a href="#put">put()</a></li>
<li><a href="#remove">remove()</a></li>
</ul>
</li>
<li><a href="#linkedhashset">LinkedHashSet</a></li>
<li><a href="#linkedhashmap%E7%BB%8F%E5%85%B8%E7%94%A8%E6%B3%95">LinkedHashMap经典用法</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-7-linkedhashset-map"><span></span></a><a href="#java-7-linkedhashset-map">#</a> Java 7 - LinkedHashSet&amp;Map</h2>
<h3><a class="header-anchor" href="#总体介绍"><span></span></a><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">#</a> 总体介绍</h3>
<p>如果你已看过前面关于<em>HashSet</em>和<em>HashMap</em>，以及<em>TreeSet</em>和<em>TreeMap</em>的讲解，一定能够想到本文将要讲解的<em>LinkedHashSet</em>和<em>LinkedHashMap</em>其实也是一回事。<em>LinkedHashSet</em>和<em>LinkedHashMap</em>在Java里也有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<strong>LinkedHashSet里面有一个LinkedHashMap(适配器模式)</strong>。因此本文将重点分析<em>LinkedHashMap</em>。</p>
<p><em>LinkedHashMap</em>实现了<em>Map</em>接口，即允许放入<code>key</code>为<code>null</code>的元素，也允许插入<code>value</code>为<code>null</code>的元素。从名字上可以看出该容器是<em>linked list</em>和<em>HashMap</em>的混合体，也就是说它同时满足<em>HashMap</em>和<em>linked list</em>的某些特性。<strong>可将*LinkedHashMap*看作采用*linked list*增强的*HashMap*。</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_base.png" alt="LinkedHashMap_base.png" tabindex="0" loading="lazy"><figcaption>LinkedHashMap_base.png</figcaption></figure>
<p>事实上<em>LinkedHashMap</em>是<em>HashMap</em>的直接子类，<strong>二者唯一的区别是*LinkedHashMap*在*HashMap*的基础上，采用双向链表(doubly-linked list)的形式将所有<code>entry</code>连接起来，这样是为保证元素的迭代顺序跟插入顺序相同</strong>。上图给出了<em>LinkedHashMap</em>的结构图，主体部分跟<em>HashMap</em>完全一样，多了<code>header</code>指向双向链表的头部(是一个哑元)，<strong>该双向链表的迭代顺序就是<code>entry</code>的插入顺序</strong>。</p>
<p>除了可以保迭代历顺序，这种结构还有一个好处 : <strong>迭代*LinkedHashMap*时不需要像*HashMap*那样遍历整个<code>table</code>，而只需要直接遍历<code>header</code>指向的双向链表即可</strong>，也就是说<em>LinkedHashMap</em>的迭代时间就只跟<code>entry</code>的个数相关，而跟<code>table</code>的大小无关。</p>
<p>有两个参数可以影响<em>LinkedHashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p>
<p>将对象放入到<em>LinkedHashMap</em>或<em>LinkedHashSet</em>中时，有两个方法需要特别关心: <code>hashCode()</code>和<code>equals()</code>。<strong><code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”</strong>。所以，如果要将自定义的对象放入到<code>LinkedHashMap</code>或<code>LinkedHashSet</code>中，需要@Override <code>hashCode()</code>和<code>equals()</code>方法。</p>
<p>通过如下方式可以得到一个跟源<em>Map</em> <strong>迭代顺序</strong>一样的<em>LinkedHashMap</em>:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> foo</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Map</span><span style="color:#E06C75"> m) {</span></span>
<span class="line"><span style="color:#E5C07B">    Map</span><span style="color:#E06C75"> copy </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> LinkedHashMap</span><span style="color:#E06C75">(m)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    ...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于性能原因，<em>LinkedHashMap</em>是非同步的(not synchronized)，如果需要在多线程环境使用，需要程序员手动同步；或者通过如下方式将<em>LinkedHashMap</em>包装成(wrapped)同步的:</p>
<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span>Map m = Collections.synchronizedMap(new LinkedHashMap(...));</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#方法剖析"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">#</a> 方法剖析</h3>
<h4><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h4>
<p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>。该方法跟<code>HashMap.get()</code>方法的流程几乎完全一样，读者可自行[参考前文在新窗口打开](https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet and HashMap.md#get)，这里不再赘述。</p>
<h4><a class="header-anchor" href="#put"><span></span></a><a href="#put">#</a> put()</h4>
<p><code>put(K key, V value)</code>方法是将指定的<code>key, value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>get()</code>方法；如果没有找到，则会通过<code>addEntry(int hash, K key, V value, int bucketIndex)</code>方法插入新的<code>entry</code>。</p>
<p>注意，这里的<strong>插入有两重含义</strong>:</p>
<blockquote>
<ol>
<li>从<code>table</code>的角度看，新的<code>entry</code>需要插入到对应的<code>bucket</code>里，当有哈希冲突时，采用头插法将新的<code>entry</code>插入到冲突链表的头部。</li>
<li>从<code>header</code>的角度看，新的<code>entry</code>需要插入到双向链表的尾部。</li>
</ol>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_addEntry.png" alt="LinkedHashMap_addEntry.png" tabindex="0" loading="lazy"><figcaption>LinkedHashMap_addEntry.png</figcaption></figure>
<p><code>addEntry()</code>代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// LinkedHashMap.addEntry()</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> addEntry</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> bucketIndex) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((size </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> threshold) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> table[bucketIndex])) {</span></span>
<span class="line"><span style="color:#61AFEF">        resize</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2</span><span style="color:#56B6C2"> *</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 自动扩容，并重新哈希</span></span>
<span class="line"><span style="color:#E06C75">        hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> key) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key) </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        bucketIndex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// hash%table.length</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 1.在冲突链表头部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B">    HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> old </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[bucketIndex]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Entry</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> old)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table[bucketIndex] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 2.在双向链表的尾部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B">    e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addBefore</span><span style="color:#ABB2BF">(header);</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中用到了<code>addBefore()</code>方法将新<code>entry e</code>插入到双向链表头引用<code>header</code>的前面，这样<code>e</code>就成为双向链表中的最后一个元素。<code>addBefore()</code>的代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// LinkedHashMap.Entry.addBefor()，将this插入到existingEntry的前面</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> addBefore</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> existingEntry) {</span></span>
<span class="line"><span style="color:#E06C75">    after  </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> existingEntry</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    before </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> existingEntry</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    before</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    after</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码只是简单修改相关<code>entry</code>的引用而已。</p>
<h4><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h4>
<p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法的具体逻辑是在<code>removeEntryForKey(Object key)</code>里实现的。<code>removeEntryForKey()</code>方法会首先找到<code>key</code>值对应的<code>entry</code>，然后删除该<code>entry</code>(修改链表的相应引用)。查找过程跟<code>get()</code>方法类似。</p>
<p>注意，这里的<strong>删除也有两重含义</strong>:</p>
<blockquote>
<ol>
<li>从<code>table</code>的角度看，需要将该<code>entry</code>从对应的<code>bucket</code>里删除，如果对应的冲突链表不空，需要修改冲突链表的相应引用。</li>
<li>从<code>header</code>的角度来看，需要将该<code>entry</code>从双向链表中删除，同时修改链表中前面以及后面元素的相应引用。</li>
</ol>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_removeEntryForKey.png" alt="LinkedHashMap_removeEntryForKey.png" tabindex="0" loading="lazy"><figcaption>LinkedHashMap_removeEntryForKey.png</figcaption></figure>
<p><code>removeEntryForKey()</code>对应的代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// LinkedHashMap.removeEntryForKey()，删除key值对应的entry</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> removeEntryForKey</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> indexFor</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// hash&amp;(table.length-1)</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[i]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 得到冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 遍历冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">))) {</span><span style="color:#7F848E;font-style:italic">// 找到要删除的entry</span></span>
<span class="line"><span style="color:#E06C75">            modCount</span><span style="color:#ABB2BF">++;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 1. 将e从对应bucket的冲突链表中删除</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> e) table[i] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#E5C07B"> prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 2. 将e从双向链表中删除</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#linkedhashset"><span></span></a><a href="#linkedhashset">#</a> LinkedHashSet</h3>
<p>前面已经说过<em>LinkedHashSet</em>是对<em>LinkedHashMap</em>的简单包装，对<em>LinkedHashSet</em>的函数调用都会转换成合适的<em>LinkedHashMap</em>方法，因此<em>LinkedHashSet</em>的实现非常简单，这里不再赘述。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> LinkedHashSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    extends</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Cloneable</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // LinkedHashSet里面有一个LinkedHashMap</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> LinkedHashSet</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> initialCapacity</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">float</span><span style="color:#E06C75;font-style:italic"> loadFactor</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        map </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> LinkedHashMap</span><span style="color:#ABB2BF">&lt;&gt;(initialCapacity, loadFactor);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span><span style="color:#7F848E;font-style:italic">//简单的方法转换</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, PRESENT)</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#linkedhashmap经典用法"><span></span></a><a href="#linkedhashmap%E7%BB%8F%E5%85%B8%E7%94%A8%E6%B3%95">#</a> LinkedHashMap经典用法</h3>
<p><em>LinkedHashMap</em>除了可以保证迭代顺序外，还有一个非常有用的用法: 可以轻松实现一个采用了FIFO替换策略的缓存。具体说来，LinkedHashMap有一个子类方法<code>protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code>，该方法的作用是告诉Map是否要删除“最老”的Entry，所谓最老就是当前Map中最早插入的Entry，如果该方法返回<code>true</code>，最老的那个元素就会被删除。在每次插入新元素的之后LinkedHashMap会自动询问removeEldestEntry()是否要删除最老的元素。这样只需要在子类中重载该方法，当元素个数超过一定数量时让removeEldestEntry()返回true，就能够实现一个固定大小的FIFO策略的缓存。示例代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/** 一个固定大小的FIFO替换策略的缓存 */</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> FIFOCache</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> LinkedHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#ABB2BF">&gt;{</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> cacheSize</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FIFOCache</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> cacheSize</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cacheSize</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> cacheSize;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当Entry个数超过cacheSize时，删除最老的Entry</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeEldestEntry</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">eldest</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">       return</span><span style="color:#61AFEF"> size</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> cacheSize;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_base.png" type="image/png"/>
    </item>
    <item>
      <title>LinkedList 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">LinkedList 源码解析</source>
      <description>本文主要对LinkedList进行源码解析。 LinkedList源码解析 概述 LinkedList实现 底层数据结构 构造函数 getFirst(), getLast() removeFirst(), removeLast(), remove(e), remove(index) add() addAll() clear() Positional A...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对LinkedList进行源码解析。</p>
</blockquote>
<ul>
<li>LinkedList源码解析
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li>LinkedList实现
<ul>
<li><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">底层数据结构</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li><a href="#getfirst-getlast">getFirst(), getLast()</a></li>
<li><a href="#removeFirst-removelast-removee-removeindex">removeFirst(), removeLast(), remove(e), remove(index)</a></li>
<li><a href="#add">add()</a></li>
<li><a href="#addall">addAll()</a></li>
<li><a href="#clear">clear()</a></li>
<li><a href="#positional-access-%E6%96%B9%E6%B3%95">Positional Access 方法</a></li>
<li><a href="#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C">查找操作</a></li>
<li><a href="#queue-%E6%96%B9%E6%B3%95">Queue 方法</a></li>
<li><a href="#deque-%E6%96%B9%E6%B3%95">Deque 方法</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h2>
<p><em>LinkedList</em>同时实现了<em>List</em>接口和<em>Deque</em>接口，也就是说它既可以看作一个顺序容器，又可以看作一个队列(<em>Queue</em>)，同时又可以看作一个栈(<em>Stack</em>)。这样看来，<em>LinkedList</em>简直就是个全能冠军。当你需要使用栈或者队列时，可以考虑使用<em>LinkedList</em>，一方面是因为Java官方已经声明不建议使用<em>Stack</em>类，更遗憾的是，Java里根本没有一个叫做<em>Queue</em>的类(它是个接口名字)。关于栈或队列，现在的首选是<em>ArrayDeque</em>，它有着比<em>LinkedList</em>(当作栈或队列使用时)有着更好的性能。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png" alt="LinkedList_base" tabindex="0" loading="lazy"><figcaption>LinkedList_base</figcaption></figure>
<p><em>LinkedList</em>的实现方式决定了所有跟下标相关的操作都是线性时间，而在首段或者末尾删除元素只需要常数时间。为追求效率<em>LinkedList</em>没有实现同步(synchronized)，如果需要多个线程并发访问，可以先采用<code>Collections.synchronizedList()</code>方法对其进行包装。</p>
<h2><a class="header-anchor" href="#linkedlist实现"><span></span></a><a href="#linkedlist%E5%AE%9E%E7%8E%B0">#</a> LinkedList实现</h2>
<h3><a class="header-anchor" href="#底层数据结构"><span></span></a><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 底层数据结构</h3>
<p><em>LinkedList</em>底层<strong>通过双向链表实现</strong>，本节将着重讲解插入和删除元素时双向链表的维护过程，也即是之间解跟<em>List</em>接口相关的函数，而将<em>Queue</em>和<em>Stack</em>以及<em>Deque</em>相关的知识放在下一节讲。双向链表的每个节点用内部类<em>Node</em>表示。<em>LinkedList</em>通过<code>first</code>和<code>last</code>引用分别指向链表的第一个和最后一个元素。注意这里没有所谓的哑元，当链表为空的时候<code>first</code>和<code>last</code>都指向<code>null</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">    transient</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pointer to first node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *            (first.prev == null &amp;&amp; first.item != null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    transient</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pointer to last node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *            (last.next == null &amp;&amp; last.item != null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    transient</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中Node是私有的内部类:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        Node</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">prev</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">next</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> element;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> next;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> prev;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#构造函数"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an empty list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> LinkedList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * collection, in the order they are returned by the collection's</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic">  c</span><span style="color:#7F848E;font-style:italic"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> LinkedList</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        addAll</span><span style="color:#E06C75">(c)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#getfirst-getlast"><span></span></a><a href="#getfirst-getlast">#</a> getFirst(), getLast()</h3>
<p>获取第一个元素， 和获取最后一个元素:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the first element in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> getFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the last element in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> getLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#removefirst-removelast-remove-e-remove-index"><span></span></a><a href="#removefirst-removelast-remove-e-remove-index">#</a> removeFirst(), removeLast(), remove(e), remove(index)</h3>
<p><code>remove()</code>方法也有两个版本，一个是删除跟指定元素相等的第一个元素<code>remove(Object o)</code>，另一个是删除指定下标处的元素<code>remove(int index)</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_remove.png" alt="LinkedList_remove.png" tabindex="0" loading="lazy"><figcaption>LinkedList_remove.png</figcaption></figure>
<p>删除元素 - 指的是删除第一次出现的这个元素, 如果没有这个元素，则返回false；判断的依据是equals方法， 如果equals，则直接unlink这个node；由于LinkedList可存放null元素，故也可以删除第一次出现null的元素；</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the first occurrence of the specified element from this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * if it is present.  If this list does not contain the element, it is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * unchanged.  More formally, removes the element with the lowest index</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * (if such an element exists).  Returns {@code true} if this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * contained the specified element (or equivalently, if this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * changed as a result of the call).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if this list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Unlinks non-null node x.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#61AFEF"> unlink</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert x != null;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 第一个元素</span></span>
<span class="line"><span style="color:#E06C75">            first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (next </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 最后一个元素</span></span>
<span class="line"><span style="color:#E06C75">            last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            next</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // GC</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>remove(int index)</code>使用的是下标计数， 只需要判断该index是否有元素即可，如果有则直接unlink这个node。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the element at the specified position in this list.  Shifts any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the left (subtracts one from their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the element that was removed from the list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> the index of the element to be removed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlink</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除head元素:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes and returns the first element from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element from this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> removeFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Unlinks non-null first node f.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> f) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert f == first &amp;&amp; f != null;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // help GC</span></span>
<span class="line"><span style="color:#E06C75">        first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (next </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            last </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            next</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除last元素:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes and returns the last element from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element from this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> removeLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlinkLast</span><span style="color:#E06C75">(l)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Unlinks non-null last node l.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> unlinkLast</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> l) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert l == last &amp;&amp; l != null;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // help GC</span></span>
<span class="line"><span style="color:#E06C75">        last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            first </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#add"><span></span></a><a href="#add">#</a> add()</h3>
<p><em>add()*方法有两个版本，一个是<code>add(E e)</code>，该方法在*LinkedList</em>的末尾插入元素，因为有<code>last</code>指向链表末尾，在末尾插入元素的花费是常数时间。只需要简单修改几个相关引用即可；另一个是<code>add(int index, E element)</code>，该方法是在指定下表处插入元素，需要先通过线性查找找到具体位置，然后修改相关引用完成插入操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends the specified element to the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;p&gt;This method is equivalent to {@link #addLast}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> element to be appended to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Collection#add})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        linkLast</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Links e as last element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> linkLast</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> newNode </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(l</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_add.png" alt="LinkedList_add" tabindex="0" loading="lazy"><figcaption>LinkedList_add</figcaption></figure>
<p><code>add(int index, E element)</code>, 当index==size时，等同于add(E e); 如果不是，则分两步: 1.先根据index找到要插入的位置,即node(index)方法；2.修改引用，完成插入操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Shifts the element currently at that position (if any) and any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkPositionIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> size)</span></span>
<span class="line"><span style="color:#61AFEF">            linkLast</span><span style="color:#E06C75">(element)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#61AFEF">            linkBefore</span><span style="color:#E06C75">(element</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的<code>node(int index)</code>函数有一点小小的trick，因为链表双向的，可以从开始往后找，也可以从结尾往前找，具体朝那个方向找取决于条件<code>index &lt; (size &gt;&gt; 1)</code>，也即是index是靠近前端还是后端。从这里也可以看出，linkedList通过index检索元素的效率没有arrayList高。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the (non-null) Node at the specified element index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert isElementIndex(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#addall"><span></span></a><a href="#addall">#</a> addAll()</h3>
<p>addAll(index, c) 实现方式并不是直接调用add(index,e)来实现，主要是因为效率的问题，另一个是fail-fast中modCount只会增加1次；</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends all of the elements in the specified collection to the end of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this list, in the order that they are returned by the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * collection's iterator.  The behavior of this operation is undefined if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the specified collection is modified while the operation is in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * progress.  (Note that this will occur if the specified collection is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this list, and it's nonempty.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(size</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> c)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts all of the elements in the specified collection into this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list, starting at the specified position.  Shifts the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * currently at that position (if any) and any subsequent elements to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the right (increases their indices).  The new elements will appear</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in the list in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified collection's iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which to insert the first element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *              from the specified collection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkPositionIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (numNew </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> pred</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> succ</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> size) {</span></span>
<span class="line"><span style="color:#E06C75">            succ </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            pred </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            succ </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            pred </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> succ</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> a) {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> newNode </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(pred</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (pred </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span></span>
<span class="line"><span style="color:#E5C07B">                pred</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            pred </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (succ </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> pred</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            pred</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> succ</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            succ</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> pred</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> numNew</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#clear"><span></span></a><a href="#clear">#</a> clear()</h3>
<p>为了让GC更快可以回收放置的元素，需要将node之间的引用关系赋空。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes all of the elements from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The list will be empty after this call returns.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> clear</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Clearing all of the links between nodes is "unnecessary", but:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // - helps a generational GC if the discarded nodes inhabit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //   more than one generation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // - is sure to free memory even if there is a reachable Iterator</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#positional-access-方法"><span></span></a><a href="#positional-access-%E6%96%B9%E6%B3%95">#</a> Positional Access 方法</h3>
<p>通过index获取元素</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index of the element to return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element at the specified position in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将某个位置的元素重新赋值:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Replaces the element at the specified position in this list with the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index of the element to replace</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be stored at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> oldVal </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> oldVal</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将元素插入到指定index位置:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Shifts the element currently at that position (if any) and any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkPositionIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> size)</span></span>
<span class="line"><span style="color:#61AFEF">            linkLast</span><span style="color:#E06C75">(element)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#61AFEF">            linkBefore</span><span style="color:#E06C75">(element</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除指定位置的元素:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the element at the specified position in this list.  Shifts any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the left (subtracts one from their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the element that was removed from the list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> the index of the element to be removed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlink</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它位置的方法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Tells if the argument is the index of an existing element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isElementIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Tells if the argument is the index of a valid position for an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * iterator or an add operation.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isPositionIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an IndexOutOfBoundsException detail message.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Of the many possible refactorings of the error handling code,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this "outlining" performs best with both server and client VMs.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> outOfBoundsMsg</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "Index: "</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">index</span><span style="color:#56B6C2">+</span><span style="color:#98C379">", Size: "</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> checkElementIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isElementIndex</span><span style="color:#E06C75">(index))</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">outOfBoundsMsg</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> checkPositionIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isPositionIndex</span><span style="color:#E06C75">(index))</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">outOfBoundsMsg</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#查找操作"><span></span></a><a href="#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C">#</a> 查找操作</h3>
<p>查找操作的本质是查找元素的下标:</p>
<p>查找第一次出现的index, 如果找不到返回-1；</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the first occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the lowest index {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to search for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the index of the first occurrence of the specified element in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         this list, or -1 if this list does not contain the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> indexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找最后一次出现的index, 如果找不到返回-1；</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the last occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the highest index {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to search for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the index of the last occurrence of the specified element in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         this list, or -1 if this list does not contain the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> lastIndexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#queue-方法"><span></span></a><a href="#queue-%E6%96%B9%E6%B3%95">#</a> Queue 方法</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list, or {@code null} if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peek</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> element</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getFirst</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list, or {@code null} if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> poll</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> removeFirst</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Adds the specified element as the tail (last element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to add</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Queue#offer})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#deque-方法"><span></span></a><a href="#deque-%E6%96%B9%E6%B3%95">#</a> Deque 方法</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the front of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to insert</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Deque#offerFirst})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offerFirst</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        addFirst</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to insert</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Deque#offerLast})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offerLast</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        addLast</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the first element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element of this list, or {@code null}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peekFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the last element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element of this list, or {@code null}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peekLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the first element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element of this list, or {@code null} if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *     this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> pollFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the last element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element of this list, or {@code null} if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *     this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> pollLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> unlinkLast</span><span style="color:#E06C75">(l)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pushes an element onto the stack represented by this list.  In other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * words, inserts the element at the front of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;p&gt;This method is equivalent to {@link #addFirst}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to push</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> push</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        addFirst</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pops an element from the stack represented by this list.  In other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * words, removes and returns the first element of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;p&gt;This method is equivalent to {</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#7F848E;font-style:italic"> #</span><span style="color:#E06C75;font-style:italic">removeFirst()</span><span style="color:#7F848E;font-style:italic">}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element at the front of this list (which is the top</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         of the stack represented by this list)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> pop</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> removeFirst</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the first occurrence of the specified element in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list (when traversing the list from head to tail).  If the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * does not contain the element, it is unchanged.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if the list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeFirstOccurrence</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(o)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the last occurrence of the specified element in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list (when traversing the list from head to tail).  If the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * does not contain the element, it is unchanged.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if the list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeLastOccurrence</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png" type="image/png"/>
    </item>
    <item>
      <title>PriorityQueue 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/PriorityQueue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/PriorityQueue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">PriorityQueue 源码解析</source>
      <description>本文主要对PriorityQueue进行源码解析。 PriorityQueue 源码解析 概述 方法剖析 add()和offer() element()和peek() remove()和poll() remove(Object o) 参考 # 概述 前面以Java ArrayDeque为例讲解了Stack和Queue，其实还有一种特殊的队列叫做Prio...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对PriorityQueue进行源码解析。</p>
</blockquote>
<ul>
<li>PriorityQueue 源码解析
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li>方法剖析
<ul>
<li><a href="#add%E5%92%8Coffer">add()和offer()</a></li>
<li><a href="#element%E5%92%8Cpeek">element()和peek()</a></li>
<li><a href="#remove%E5%92%8Cpoll">remove()和poll()</a></li>
<li><a href="#removeobject-o">remove(Object o)</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h2>
<p>前面以Java <em>ArrayDeque</em>为例讲解了<em>Stack</em>和<em>Queue</em>，其实还有一种特殊的队列叫做<em>PriorityQueue</em>，即优先队列。<strong>优先队列的作用是能保证每次取出的元素都是队列中权值最小的</strong>(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，<strong>元素大小的评判可以通过元素本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器</strong>(<em>Comparator</em>，类似于C++的仿函数)。</p>
<p>Java中<em>PriorityQueue</em>实现了<em>Queue</em>接口，不允许放入<code>null</code>元素；其通过堆实现，具体说是通过完全二叉树(<em>complete binary tree</em>)实现的<strong>小顶堆</strong>(任意一个非叶子节点的权值，都不大于其左右子节点的权值)，也就意味着可以通过数组来作为<em>PriorityQueue</em>的底层实现。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_base.png" alt="PriorityQueue_base.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_base.png</figcaption></figure>
<p>上图中我们给每个元素按照层序遍历的方式进行了编号，如果你足够细心，会发现父节点和子节点的编号是有联系的，更确切的说父子节点的编号之间有如下关系:</p>
<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span>leftNo = parentNo*2+1</span></span>
<span class="line"><span>rightNo = parentNo*2+2</span></span>
<span class="line"><span>parentNo = (nodeNo-1)/2</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述三个公式，可以轻易计算出某个节点的父节点以及子节点的下标。这也就是为什么可以直接用数组来存储堆的原因。</p>
<p><em>PriorityQueue</em>的<code>peek()</code>和<code>element</code>操作是常数时间，<code>add()</code>, <code>offer()</code>, 无参数的<code>remove()</code>以及<code>poll()</code>方法的时间复杂度都是<em>log(N)</em>。</p>
<h2><a class="header-anchor" href="#方法剖析"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">#</a> 方法剖析</h2>
<h3><a class="header-anchor" href="#add-和offer"><span></span></a><a href="#add-%E5%92%8Coffer">#</a> add()和offer()</h3>
<p><code>add(E e)</code>和<code>offer(E e)</code>的语义相同，都是向优先队列中插入元素，只是<code>Queue</code>接口规定二者对插入失败时的处理不同，前者在插入失败时抛出异常，后则则会返回<code>false</code>。对于<em>PriorityQueue</em>这两个方法其实没什么差别。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_offer.png" alt="PriorityQueue_offer.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_offer.png</figcaption></figure>
<p>新加入的元素可能会破坏小顶堆的性质，因此需要进行必要的调整。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//offer(E e)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//不允许放入null元素</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> queue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        grow</span><span style="color:#E06C75">(i </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//自动扩容</span></span>
<span class="line"><span style="color:#E06C75">    size </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//队列原来为空，这是插入的第一个元素</span></span>
<span class="line"><span style="color:#E06C75">        queue[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#61AFEF">        siftUp</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//调整</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，扩容函数<code>grow()</code>类似于<code>ArrayList</code>里的<code>grow()</code>函数，就是再申请一个更大的数组，并将原数组的元素复制过去，这里不再赘述。需要注意的是<code>siftUp(int k, E x)</code>方法，该方法用于插入元素<code>x</code>并维持堆的特性。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//siftUp()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> siftUp</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> parent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//parentNo = (nodeNo-1)/2</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> queue[parent]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compare</span><span style="color:#ABB2BF">(x, (E) e)</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//调用比较器的比较方法</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新加入的元素<code>x</code>可能会破坏小顶堆的性质，因此需要进行调整。调整的过程为** : 从<code>k</code>指定的位置开始，将<code>x</code>逐层与当前点的<code>parent</code>进行比较并交换，直到满足<code>x &gt;= queue[parent]</code>为止**。注意这里的比较可以是元素的自然顺序，也可以是依靠比较器的顺序。</p>
<h3><a class="header-anchor" href="#element-和peek"><span></span></a><a href="#element-%E5%92%8Cpeek">#</a> element()和peek()</h3>
<p><code>element()</code>和<code>peek()</code>的语义完全相同，都是获取但不删除队首元素，也就是队列中权值最小的那个元素，二者唯一的区别是当方法失败时前者抛出异常，后者返回<code>null</code>。根据小顶堆的性质，堆顶那个元素就是全局最小的那个；由于堆用数组表示，根据下标关系，<code>0</code>下标处的那个元素既是堆顶元素。所以<strong>直接返回数组<code>0</code>下标处的那个元素即可</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_peek.png" alt="PriorityQueue_peek.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_peek.png</figcaption></figure>
<p>代码也就非常简洁:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//peek()</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peek</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (E) queue[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//0下标处的那个元素就是最小的那个</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove-和poll"><span></span></a><a href="#remove-%E5%92%8Cpoll">#</a> remove()和poll()</h3>
<p><code>remove()</code>和<code>poll()</code>方法的语义也完全相同，都是获取并删除队首元素，区别是当方法失败时前者抛出异常，后者返回<code>null</code>。由于删除操作会改变队列的结构，为维护小顶堆的性质，需要进行必要的调整。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_poll.png" alt="PriorityQueue_poll.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_poll.png</figcaption></figure>
<p>代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> poll</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) queue[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//0下标处的那个元素就是最小的那个</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) queue[s]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    queue[s] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        siftDown</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//调整</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码首先记录<code>0</code>下标处的元素，并用最后一个元素替换<code>0</code>下标位置的元素，之后调用<code>siftDown()</code>方法对堆进行调整，最后返回原来<code>0</code>下标处的那个元素(也就是最小的那个元素)。重点是<code>siftDown(int k, E x)</code>方法，该方法的作用是<strong>从<code>k</code>指定的位置开始，将<code>x</code>逐层向下与当前点的左右孩子中较小的那个交换，直到<code>x</code>小于或等于左右孩子中的任何一个为止</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//siftDown()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> siftDown</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> half </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> half) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    	//首先找到左右孩子中较小的那个，记录到c里，并用child记录其下标</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> child </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//leftNo = parentNo*2+1</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> queue[child]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> right </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> child </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (right </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">            comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compare</span><span style="color:#ABB2BF">((E) c, (E) queue[right])</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> queue[child </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> right]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compare</span><span style="color:#ABB2BF">(x, (E) c)</span><span style="color:#56B6C2"> &lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//然后用c取代原来的值</span></span>
<span class="line"><span style="color:#E06C75">        k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> child</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove-object-o"><span></span></a><a href="#remove-object-o">#</a> remove(Object o)</h3>
<p><code>remove(Object o)</code>方法用于删除队列中跟<code>o</code>相等的某一个元素(如果有多个相等，只删除一个)，该方法不是<em>Queue</em>接口内的方法，而是<em>Collection</em>接口的方法。由于删除操作会改变队列结构，所以要进行调整；又由于删除元素的位置可能是任意的，所以调整过程比其它函数稍加繁琐。具体来说，<code>remove(Object o)</code>可以分为2种情况: 1. 删除的是最后一个元素。直接删除即可，不需要调整。2. 删除的不是最后一个元素，从删除点开始以最后一个元素为参照调用一次<code>siftDown()</code>即可。此处不再赘述。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_remove2.png" alt="PriorityQueue_remove2.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_remove2.png</figcaption></figure>
<p>具体代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//remove(Object o)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	//通过遍历数组的方式找到第一个满足o.equals(queue[i])元素的下标</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> indexOf</span><span style="color:#E06C75">(o)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> i) </span><span style="color:#7F848E;font-style:italic">//情况1</span></span>
<span class="line"><span style="color:#E06C75">        queue[i] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> moved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) queue[s]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        queue[s] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        siftDown</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> moved)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//情况2</span></span>
<span class="line"><span style="color:#ABB2BF">        ......</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_base.png" type="image/png"/>
    </item>
    <item>
      <title>Stack &amp; Queue 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/Stack%20_%20Queue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/Stack%20_%20Queue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">Stack &amp; Queue 源码解析</source>
      <description>本文主要对Stack &amp; Queue进行源码解析。 Stack &amp; Queue 源码解析 Stack &amp; Queue概述 Queue Deque 方法剖析 addFirst() addLast() pollFirst() pollLast() peekFirst() peekLast() # Stack &amp; Queue概述 Java里有一个叫做Stac...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对Stack &amp; Queue进行源码解析。</p>
</blockquote>
<ul>
<li>Stack &amp; Queue 源码解析
<ul>
<li><a href="#stack--queue%E6%A6%82%E8%BF%B0">Stack &amp; Queue概述</a></li>
<li><a href="#queue">Queue</a></li>
<li><a href="#deque">Deque</a></li>
<li>方法剖析
<ul>
<li><a href="#addfirst">addFirst()</a></li>
<li><a href="#addlast">addLast()</a></li>
<li><a href="#pollfirst">pollFirst()</a></li>
<li><a href="#polllast">pollLast()</a></li>
<li><a href="#peekfirst">peekFirst()</a></li>
<li><a href="#peeklast">peekLast()</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#stack-queue概述"><span></span></a><a href="#stack-queue%E6%A6%82%E8%BF%B0">#</a> Stack &amp; Queue概述</h2>
<p>Java里有一个叫做<em>Stack</em>的类，却没有叫做<em>Queue</em>的类(它是个接口名字)。当需要使用栈时，Java已不推荐使用<em>Stack</em>，而是推荐使用更高效的<em>ArrayDeque</em>；既然<em>Queue</em>只是一个接口，当需要使用队列时也就首选<em>ArrayDeque</em>了(次选是<em>LinkedList</em>)。</p>
<h2><a class="header-anchor" href="#queue"><span></span></a><a href="#queue">#</a> Queue</h2>
<p><em>Queue</em>接口继承自Collection接口，除了最基本的Collection的方法之外，它还支持额外的<em>insertion</em>, <em>extraction</em>和<em>inspection</em>操作。这里有两组格式，共6个方法，一组是抛出异常的实现；另外一组是返回值的实现(没有则返回null)。</p>
<p>|         | Throws exception | Returns special value |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayDeque_base.png" type="image/png"/>
    </item>
    <item>
      <title>TreeSet &amp; TreeMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/TreeSet%20_%20TreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/TreeSet%20_%20TreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">TreeSet &amp; TreeMap 源码解析</source>
      <description>本文主要对Map - TreeSet &amp; TreeMap 源码解析。 Java 7 - TreeSet &amp; TreeMap 总体介绍 预备知识 方法剖析 TreeSet # Java 7 - TreeSet &amp; TreeMap # 总体介绍 之所以把TreeSet和TreeMap放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对Map - TreeSet &amp; TreeMap 源码解析。</p>
</blockquote>
<ul>
<li>Java 7 - TreeSet &amp; TreeMap
<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">总体介绍</a></li>
<li><a href="#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86">预备知识</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">方法剖析</a></li>
<li><a href="#treeset">TreeSet</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-7-treeset-treemap"><span></span></a><a href="#java-7-treeset-treemap">#</a> Java 7 - TreeSet &amp; TreeMap</h2>
<h3><a class="header-anchor" href="#总体介绍"><span></span></a><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">#</a> 总体介绍</h3>
<p>之所以把<em>TreeSet</em>和<em>TreeMap</em>放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<strong><em>TreeSet*里面有一个*TreeMap</em>(适配器模式)</strong>。因此本文将重点分析<em>TreeMap</em>。</p>
<p>Java <em>TreeMap</em>实现了<em>SortedMap</em>接口，也就是说会按照<code>key</code>的大小顺序对<em>Map</em>中的元素进行排序，<code>key</code>大小的评判可以通过其本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器(Comparator)。</p>
<p><strong>TreeMap底层通过红黑树(Red-Black tree)实现</strong>，也就意味着<code>containsKey()</code>, <code>get()</code>, <code>put()</code>, <code>remove()</code>都有着<code>log(n)</code>的时间复杂度。其具体算法实现参照了《算法导论》。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_base.png" alt="TreeMap_base.png" tabindex="0" loading="lazy"><figcaption>TreeMap_base.png</figcaption></figure>
<p>出于性能原因，<em>TreeMap</em>是非同步的(not synchronized)，如果需要在多线程环境使用，需要程序员手动同步；或者通过如下方式将<em>TreeMap</em>包装成(wrapped)同步的:</p>
<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span>SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>红黑树是一种近似平衡的二叉查找树，它能够确保任何一个节点的左右子树的高度差不会超过二者中较低那个的一倍</strong>。具体来说，红黑树是满足如下条件的二叉查找树(binary search tree):</p>
<ol>
<li>每个节点要么是红色，要么是黑色。</li>
<li>根节点必须是黑色</li>
<li>红色节点不能连续(也即是，红色节点的孩子和父亲都不能是红色)。</li>
<li>对于每个节点，从该点至<code>null</code>(树尾端)的任何路径，都含有相同个数的黑色节点。</li>
</ol>
<p>在树的结构发生改变时(插入或者删除操作)，往往会破坏上述条件3或条件4，需要通过调整使得查找树重新满足红黑树的约束条件。</p>
<h3><a class="header-anchor" href="#预备知识"><span></span></a><a href="#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86">#</a> 预备知识</h3>
<p>前文说到当查找树的结构发生改变时，红黑树的约束条件可能被破坏，需要通过调整使得查找树重新满足红黑树的约束条件。调整可以分为两类: 一类是颜色调整，即改变某个节点的颜色；另一类是结构调整，即改变检索树的结构关系。结构调整过程包含两个基本操作 : <strong>左旋(Rotate Left)，右旋(RotateRight)</strong>。</p>
<h4><a class="header-anchor" href="#左旋"><span></span></a><a href="#%E5%B7%A6%E6%97%8B">#</a> 左旋</h4>
<p>左旋的过程是将<code>x</code>的右子树绕<code>x</code>逆时针旋转，使得<code>x</code>的右子树成为<code>x</code>的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_rotateLeft.png" alt="TreeMap_rotateLeft.png" tabindex="0" loading="lazy"><figcaption>TreeMap_rotateLeft.png</figcaption></figure>
<p><em>TreeMap</em>中左旋代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//Rotate Left</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            root </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> p)</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#右旋"><span></span></a><a href="#%E5%8F%B3%E6%97%8B">#</a> 右旋</h4>
<p>右旋的过程是将<code>x</code>的左子树绕<code>x</code>顺时针旋转，使得<code>x</code>的左子树成为<code>x</code>的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_rotateRight.png" alt="TreeMap_rotateRight.png" tabindex="0" loading="lazy"><figcaption>TreeMap_rotateRight.png</figcaption></figure>
<p><em>TreeMap</em>中右旋代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//Rotate Right</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> rotateRight</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            root </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> p)</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#寻找节点后继"><span></span></a><a href="#%E5%AF%BB%E6%89%BE%E8%8A%82%E7%82%B9%E5%90%8E%E7%BB%A7">#</a> 寻找节点后继</h4>
<p>对于一棵二叉查找树，给定节点t，其后继(树中比大于t的最小的那个元素)可以通过如下方式找到:</p>
<blockquote>
<ol>
<li>t的右子树不空，则t的后继是其右子树中最小的那个元素。</li>
<li>t的右孩子为空，则t的后继是其第一个向左走的祖先。</li>
</ol>
</blockquote>
<p>后继节点在红黑树的删除操作中将会用到。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_successor.png" alt="TreeMap_successor.png" tabindex="0" loading="lazy"><figcaption>TreeMap_successor.png</figcaption></figure>
<p><em>TreeMap</em>中寻找节点后继的代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 寻找节点后继函数successor()</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> TreeMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> successor</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> t) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 1. t的右子树不空，则t的后继是其右子树中最小的那个元素</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">// 2. t的右孩子为空，则t的后继是其第一个向左走的祖先</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> ch </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> ch </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            ch </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#方法剖析"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">#</a> 方法剖析</h3>
<h4><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h4>
<p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>，该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.value</code>。因此<code>getEntry()</code>是算法的核心。算法思想是根据<code>key</code>的自然顺序(或者比较器顺序)对二叉查找树进行查找，直到找到满足<code>k.compareTo(p.key) == 0</code>的<code>entry</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_getEntry.png" alt="TreeMap_getEntry.png" tabindex="0" loading="lazy"><figcaption>TreeMap_getEntry.png</figcaption></figure>
<p>具体代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//getEntry()方法</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//不允许key值为null</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Comparable</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> K</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> K</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) key</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//使用元素的自然顺序</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> cmp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//向左找</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//向右找</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#put"><span></span></a><a href="#put">#</a> put()</h4>
<p><code>put(K key, V value)</code>方法是将指定的<code>key</code>, <code>value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>getEntry()</code>方法；如果没有找到则会在红黑树中插入新的<code>entry</code>，如果插入之后破坏了红黑树的约束条件，还需要进行调整(旋转，改变某些节点的颜色)。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> cmp</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Comparable</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> K</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> K</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) key</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//使用元素的自然顺序</span></span>
<span class="line"><span style="color:#C678DD">    do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        parent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        cmp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//向左找</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//向右找</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> return</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(value);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Entry</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> parent)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//创建并插入新的entry</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E5C07B"> parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    fixAfterInsertion</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//调整</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的插入部分并不难理解: 首先在红黑树上找到合适的位置，然后创建新的<code>entry</code>并插入(当然，新插入的节点一定是树的叶子)。难点是调整函数<code>fixAfterInsertion()</code>，前面已经说过，调整往往需要1.改变某些节点的颜色，2.对某些节点进行旋转。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_put.png" alt="TreeMap_put.png" tabindex="0" loading="lazy"><figcaption>TreeMap_put.png</figcaption></figure>
<p>调整函数<code>fixAfterInsertion()</code>的具体代码如下，其中用到了上文中提到的<code>rotateLeft()</code>和<code>rotateRight()</code>函数。通过代码我们能够看到，情况2其实是落在情况3内的。情况4～情况6跟前三种情况是对称的，因此图解中并没有画出后三种情况，读者可以参考代码自行理解。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//红黑树调整函数fixAfterInsertion()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fixAfterInsertion</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#E5C07B">    x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> RED</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> root </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x) </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))) {</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> y </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(y) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(y</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况1</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况1</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))) {</span></span>
<span class="line"><span style="color:#E06C75">                    x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                       // 情况2</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateLeft</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                         // 情况2</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                rotateRight</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 情况3</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> y </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(y) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(y</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况4</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况4</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))) {</span></span>
<span class="line"><span style="color:#E06C75">                    x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                       // 情况5</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateRight</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况5</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况6</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况6</span></span>
<span class="line"><span style="color:#61AFEF">                rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         // 情况6</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    root</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> BLACK</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h4>
<p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法首先通过上文中提到的<code>getEntry(Object key)</code>方法找到<code>key</code>值对应的<code>entry</code>，然后调用<code>deleteEntry(Entry&lt;K,V&gt; entry)</code>删除对应的<code>entry</code>。由于删除操作会改变红黑树的结构，有可能破坏红黑树的约束条件，因此有可能要进行调整。</p>
<p><code>getEntry()</code>函数前面已经讲解过，这里重点放<code>deleteEntry()</code>上，该函数删除指定的<code>entry</code>并在红黑树的约束被破坏时进行调用<code>fixAfterDeletion(Entry&lt;K,V&gt; x)</code>进行调整。</p>
<p><strong>由于红黑树是一棵增强版的二叉查找树，红黑树的删除操作跟普通二叉查找树的删除操作也就非常相似，唯一的区别是红黑树在节点删除之后可能需要进行调整</strong>。现在考虑一棵普通二叉查找树的删除过程，可以简单分为两种情况:</p>
<blockquote>
<ol>
<li>删除点p的左右子树都为空，或者只有一棵子树非空。</li>
<li>删除点p的左右子树都非空。</li>
</ol>
</blockquote>
<p>对于上述情况1，处理起来比较简单，直接将p删除(左右子树都为空时)，或者用非空子树替代p(只有一棵子树非空时)；对于情况2，可以用p的后继s(树中大于x的最小的那个元素)代替p，然后使用情况1删除s(此时s一定满足情况1.可以画画看)。</p>
<p>基于以上逻辑，红黑树的节点删除函数<code>deleteEntry()</code>代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 红黑树entry删除函数deleteEntry()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> deleteEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 2. 删除点p的左右子树都非空。</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> successor</span><span style="color:#E06C75">(p)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 后继</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> replacement </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (replacement </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 1. 删除点p只有一棵子树非空。</span></span>
<span class="line"><span style="color:#E5C07B">        replacement</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            root </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> replacement</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2">  =</span><span style="color:#E06C75"> replacement</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> replacement</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> BLACK)</span></span>
<span class="line"><span style="color:#61AFEF">            fixAfterDeletion</span><span style="color:#E06C75">(replacement)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 调整</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">        root </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 1. 删除点p的左右子树都为空</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> BLACK)</span></span>
<span class="line"><span style="color:#61AFEF">            fixAfterDeletion</span><span style="color:#E06C75">(p)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 调整</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中占据大量代码行的，是用来修改父子节点间引用关系的代码，其逻辑并不难理解。下面着重讲解删除后调整函数<code>fixAfterDeletion()</code>。首先请思考一下，删除了哪些点才会导致调整？<strong>只有删除点是BLACK的时候，才会触发调整函数</strong>，因为删除RED节点不会破坏红黑树的任何约束，而删除BLACK节点会破坏规则4。</p>
<p>跟上文中讲过的<code>fixAfterInsertion()</code>函数一样，这里也要分成若干种情况。记住，<strong>无论有多少情况，具体的调整操作只有两种: 1.改变某些节点的颜色，2.对某些节点进行旋转。</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_fixAfterDeletion.png" alt="TreeMap_fixAfterDeletion.png" tabindex="0" loading="lazy"><figcaption>TreeMap_fixAfterDeletion.png</figcaption></figure>
<p>上述图解的总体思想是: 将情况1首先转换成情况2，或者转换成情况3和情况4。当然，该图解并不意味着调整过程一定是从情况1开始。通过后续代码我们还会发现几个有趣的规则: a).如果是由情况1之后紧接着进入的情况2，那么情况2之后一定会退出循环(因为x为红色)；b).一旦进入情况3和情况4，一定会退出循环(因为x为root)。</p>
<p>删除后调整函数<code>fixAfterDeletion()</code>的具体代码如下，其中用到了上文中提到的<code>rotateLeft()</code>和<code>rotateRight()</code>函数。通过代码我们能够看到，情况3其实是落在情况4内的。情况5～情况8跟前四种情况是对称的，因此图解中并没有画出后四种情况，读者可以参考代码自行理解。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fixAfterDeletion</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> root </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> colorOf</span><span style="color:#E06C75">(x) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))) {</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(sib) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                // 情况1</span></span>
<span class="line"><span style="color:#E06C75">                sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 情况1</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib))  </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF">                colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                     // 情况2</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况2</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateRight</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 情况3</span></span>
<span class="line"><span style="color:#E06C75">                    sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         // 情况3</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">          // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                // 情况4</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                               // 情况4</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 跟前四种情况对称</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(sib) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 情况5</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 情况5</span></span>
<span class="line"><span style="color:#61AFEF">                rotateRight</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // 情况5</span></span>
<span class="line"><span style="color:#E06C75">                sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况5</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF">                colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                     // 情况6</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况6</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况7</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况7</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateLeft</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                    // 情况7</span></span>
<span class="line"><span style="color:#E06C75">                    sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">          // 情况7</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // 情况8</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // 情况8</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // 情况8</span></span>
<span class="line"><span style="color:#61AFEF">                rotateRight</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // 情况8</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                               // 情况8</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#61AFEF">    setColor</span><span style="color:#E06C75">(x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#treeset"><span></span></a><a href="#treeset">#</a> TreeSet</h3>
<p>前面已经说过<code>TreeSet</code>是对<code>TreeMap</code>的简单包装，对<code>TreeSet</code>的函数调用都会转换成合适的<code>TreeMap</code>方法，因此<code>TreeSet</code>的实现非常简单。这里不再赘述。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// TreeSet是对TreeMap的简单包装</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TreeSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> NavigableSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Cloneable</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> NavigableMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Dummy value to associate with an Object in the backing Map</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> PRESENT </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> TreeSet</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">m</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;();</span><span style="color:#7F848E;font-style:italic">// TreeSet里面有一个TreeMap</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, PRESENT)</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_base.png" type="image/png"/>
    </item>
    <item>
      <title>WeakHashMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/WeakHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/WeakHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">WeakHashMap 源码解析</source>
      <description>本文主要对 WeakHashMap源码解析 源码解析。 WeakHashMap 源码解析 Java 7- WeakHashMap 总体介绍 具体实现 Weak HashSet? 参考文章 # Java 7- WeakHashMap # 总体介绍 在Java集合框架系列文章的最后，笔者打算介绍一个特殊的成员: WeakHashMap，从名字可以看出它是某...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对 WeakHashMap源码解析 源码解析。</p>
</blockquote>
<ul>
<li>WeakHashMap 源码解析
<ul>
<li>Java 7- WeakHashMap
<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">总体介绍</a></li>
<li><a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">具体实现</a></li>
<li><a href="#weak-hashset">Weak HashSet?</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-7-weakhashmap"><span></span></a><a href="#java-7-weakhashmap">#</a> Java 7- WeakHashMap</h2>
<h3><a class="header-anchor" href="#总体介绍"><span></span></a><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">#</a> 总体介绍</h3>
<p>在Java集合框架系列文章的最后，笔者打算介绍一个特殊的成员: <em>WeakHashMap</em>，从名字可以看出它是某种 <em>Map</em>。它的特殊之处在于 <em>WeakHashMap</em> 里的<code>entry</code>可能会被GC自动删除，即使程序员没有调用<code>remove()</code>或者<code>clear()</code>方法。</p>
<p>更直观的说，当使用 <em>WeakHashMap</em> 时，即使没有显示的添加或删除任何元素，也可能发生如下情况:</p>
<blockquote>
<ul>
<li>调用两次<code>size()</code>方法返回不同的值；</li>
<li>两次调用<code>isEmpty()</code>方法，第一次返回<code>false</code>，第二次返回<code>true</code>；</li>
<li>两次调用<code>containsKey()</code>方法，第一次返回<code>true</code>，第二次返回<code>false</code>，尽管两次使用的是同一个<code>key</code>；</li>
<li>两次调用<code>get()</code>方法，第一次返回一个<code>value</code>，第二次返回<code>null</code>，尽管两次使用的是同一个对象。</li>
</ul>
</blockquote>
<p>遇到这么奇葩的现象，你是不是觉得使用者一定会疯掉? 其实不然，<strong>WeakHashMap 的这个特点特别适用于需要缓存的场景</strong>。在缓存场景下，由于内存是有限的，不能缓存所有对象；对象缓存命中可以提高系统效率，但缓存MISS也不会造成错误，因为可以通过计算重新得到。</p>
<p>要明白 <em>WeakHashMap</em> 的工作原理，还需要引入一个概念 : <strong>弱引用(WeakReference)</strong>。我们都知道Java中内存是通过GC自动管理的，GC会在程序运行过程中自动判断哪些对象是可以被回收的，并在合适的时机进行内存释放。GC判断某个对象是否可被回收的依据是，<strong>是否有有效的引用指向该对象</strong>。如果没有有效引用指向该对象(基本意味着不存在访问该对象的方式)，那么该对象就是可回收的。这里的<strong>有效引用</strong> 并不包括<strong>弱引用</strong>。也就是说，<strong>虽然弱引用可以用来访问对象，但进行垃圾回收时弱引用并不会被考虑在内，仅有弱引用指向的对象仍然会被GC回收</strong>。</p>
<p><em>WeakHashMap</em> 内部是通过弱引用来管理<code>entry</code>的，弱引用的特性对应到 <em>WeakHashMap</em> 上意味着什么呢？<strong>将一对<code>key, value</code>放入到 *WeakHashMap* 里并不能避免该<code>key</code>值被GC回收，除非在 *WeakHashMap* 之外还有对该<code>key</code>的强引用</strong>。</p>
<p>关于强引用，弱引用等概念以后再具体讲解，这里只需要知道Java中引用也是分种类的，并且不同种类的引用对GC的影响不同就够了。</p>
<h3><a class="header-anchor" href="#具体实现"><span></span></a><a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">#</a> 具体实现</h3>
<p>WeakHashMap的存储结构类似于<a href="">Map - HashSet &amp; HashMap 源码解析</a>，这里不再赘述。</p>
<p>关于强弱引用的管理方式，博主将会另开专题单独讲解。</p>
<h3><a class="header-anchor" href="#weak-hashset"><span></span></a><a href="#weak-hashset">#</a> Weak HashSet?</h3>
<p>如果你看过前几篇关于 <em>Map</em> 和 <em>Set</em> 的讲解，一定会问: 既然有 <em>WeakHashMap</em>，是否有 <em>WeekHashSet</em> 呢? 答案是没有:( 。不过Java <em>Collections</em>工具类给出了解决方案，<code>Collections.newSetFromMap(Map&lt;E,Boolean&gt; map)</code>方法可以将任何 <em>Map</em>包装成一个<em>Set</em>。通过如下方式可以快速得到一个 <em>Weak HashSet</em>:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 将WeakHashMap包装成一个Set</span></span>
<span class="line"><span style="color:#E5C07B">Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> weakHashSet </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newSetFromMap</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> WeakHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt;());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不出你所料，<code>newSetFromMap()</code>方法只是对传入的 <em>Map</em>做了简单包装:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Collections.newSetFromMap()用于将任何Map包装成一个Set</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> newSetFromMap</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Map</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> Boolean</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> map) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> SetFromMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(map)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SetFromMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Serializable</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Boolean</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // The backing map</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // Its keySet</span></span>
<span class="line"><span style="color:#61AFEF">    SetFromMap</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">map</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isEmpty</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Map is non-empty"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        m </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> map;</span></span>
<span class="line"><span style="color:#ABB2BF">        s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">keySet</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> clear</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">               {        </span><span style="color:#E5C07B">m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> size</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">                 { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isEmpty</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">          { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isEmpty</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">containsKey</span><span style="color:#ABB2BF">(o); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(o) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUE</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> iterator</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">     { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF">[] toArray</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">         { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF">[] toArray</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">     { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">(a); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">          { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hashCode</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">             { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hashCode</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   { </span><span style="color:#C678DD">return</span><span style="color:#ABB2BF"> o </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> this</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(o); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> containsAll</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">c</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">containsAll</span><span style="color:#ABB2BF">(c);}</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeAll</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">c</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   {</span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">removeAll</span><span style="color:#ABB2BF">(c);}</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> retainAll</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">c</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   {</span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">retainAll</span><span style="color:#ABB2BF">(c);}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // addAll is the only inherited implementation</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 基础之SPI机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8BSPI%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8BSPI%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之SPI机制</source>
      <description>Java 基础之SPI机制 SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。 Java常用机制 - SPI机制 什么是SPI机制 SPI机制的简单示例 SPI机制的广泛应用 SPI机制 - JDBC DriverManager JDBC接口...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。</p>
</blockquote>
<ul>
<li>Java常用机制 - SPI机制
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFspi%E6%9C%BA%E5%88%B6">什么是SPI机制</a></li>
<li><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B">SPI机制的简单示例</a></li>
<li>SPI机制的广泛应用
<ul>
<li>SPI机制 - JDBC DriverManager
<ul>
<li><a href="#jdbc%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89">JDBC接口定义</a></li>
<li><a href="#mysql%E5%AE%9E%E7%8E%B0">mysql实现</a></li>
<li><a href="#postgresql%E5%AE%9E%E7%8E%B0">postgresql实现</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法</a></li>
<li><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">源码实现</a></li>
</ul>
</li>
<li>[SPI机制 - Common-Logging](#spi机制</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-8.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Java 基础之反射机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之反射机制</source>
      <description>Java 基础之反射机制 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。本文综合多篇文章后，总结了Java 反射的相关知识，希望可以提升你对...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。本文综合多篇文章后，总结了Java 反射的相关知识，希望可以提升你对Java中反射的认知效率。</p>
</blockquote>
<ul>
<li>Java 基础 - 反射机制详解
<ul>
<li>反射基础
<ul>
<li><a href="#class%E7%B1%BB">Class类</a></li>
<li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD">类加载</a></li>
</ul>
</li>
<li>反射的使用
<ul>
<li><a href="#class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%8E%B7%E5%8F%96">Class类对象的获取</a></li>
<li><a href="#constructor%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95">Constructor类及其用法</a></li>
<li><a href="#field%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95">Field类及其用法</a></li>
<li><a href="#method%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95">Method类及其用法</a></li>
</ul>
</li>
<li>反射机制执行的流程
<ul>
<li><a href="#%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%AE%9E%E4%BE%8B">反射获取类实例</a></li>
<li><a href="#%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95">反射获取方法</a></li>
<li><a href="#%E8%B0%83%E7%94%A8-methodinvoke-%E6%96%B9%E6%B3%95">调用 method.invoke() 方法</a></li>
<li><a href="#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%B0%8F%E7%BB%93">反射调用流程小结</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#反射基础"><span></span></a><a href="#%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80">#</a> 反射基础</h2>
<p>RTTI（Run-Time Type Identification）运行时类型识别。在《Thinking in Java》一书第十四章中有提到，其作用是在运行时识别一个对象的类型和类的信息。主要有两种方式：一种是“传统的”RTTI，它假定我们在编译时已经知道了所有的类型；另一种是“反射”机制，它允许我们在运行时发现和使用类的信息。</p>
<p>反射就是把java类中的各种成分映射成一个个的Java对象</p>
<p>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。</p>
<blockquote>
<p>这里我们首先需要理解 Class类，以及类的加载机制； 然后基于此我们如何通过反射获取Class类以及类中的成员变量、方法、构造方法等。</p>
</blockquote>
<h3><a class="header-anchor" href="#class类"><span></span></a><a href="#class%E7%B1%BB">#</a> Class类</h3>
<p>Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)（每个java类运行时都在JVM里表现为一个class对象，可通过类名.class、类型.getClass()、Class.forName("类名")等方法获取class对象）。数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 class 对象。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                              GenericDeclaration</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                              Type</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                              AnnotatedElement</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> ANNOTATION</span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00002000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> ENUM      </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00004000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SYNTHETIC </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00001000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> registerNatives</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">        registerNatives</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有JVM才能调用创建Class对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * This constructor is not used and prevents the default constructor being</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * generated.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#61AFEF"> Class</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#E06C75;font-style:italic"> loader</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Initialize final field for classLoader.  The initialization value of non-null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // prevents future JIT optimizations from assuming this final field is null.</span></span>
<span class="line"><span style="color:#ABB2BF">        classLoader </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> loader;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这我们也就可以得出以下几点信息：</p>
<ul>
<li>Class类也是类的一种，与class关键字是不一样的。</li>
<li>手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在同名.class的文件中(字节码文件)</li>
<li>每个通过关键字class标识的类，在内存中有且只有一个与之对应的Class对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个Class对象。</li>
<li>Class类只存私有构造函数，因此对应Class对象只能有JVM创建和加载</li>
<li>Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要(关于反射稍后分析)。</li>
</ul>
<h3><a class="header-anchor" href="#类加载"><span></span></a><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD">#</a> 类加载</h3>
<p>类加载机制和类字节码技术可以参考如下两篇文章：</p>
<ul>
<li>JVM基础 - 类字节码详解
<ul>
<li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li>
</ul>
</li>
<li>JVM基础 - Java 类加载机制
<ul>
<li>这篇文章将带你深入理解Java 类加载机制</li>
</ul>
</li>
</ul>
<p>其中，这里我们需要回顾的是：</p>
<ol>
<li>类加载机制流程</li>
</ol>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ol>
<li>类的加载</li>
</ol>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-reflection-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#反射的使用"><span></span></a><a href="#%E5%8F%8D%E5%B0%84%E7%9A%84%E4%BD%BF%E7%94%A8">#</a> 反射的使用</h2>
<p>提示</p>
<p>基于此我们如何通过反射获取Class类对象以及类中的成员变量、方法、构造方法等</p>
<p>在Java中，Class类与java.lang.reflect类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)、Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)，下面将对这几个重要类进行分别说明。</p>
<h3><a class="header-anchor" href="#class类对象的获取"><span></span></a><a href="#class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%8E%B7%E5%8F%96">#</a> Class类对象的获取</h3>
<p>在类加载的时候，jvm会创建一个class对象</p>
<p>class对象是可以说是反射中最常用的，获取class对象的方式的主要有三种</p>
<ul>
<li>根据类名：类名.class</li>
<li>根据对象：对象.getClass()</li>
<li>根据全限定类名：Class.forName(全限定类名)</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> classTest</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取Class对象的三种方式</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"根据类名:  </span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"根据对象:  </span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"根据全限定类名:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"com.test.User"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 常用的方法</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"获取全限定类名:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> userClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"获取类名:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> userClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSimpleName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"实例化:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> userClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#C678DD">    package</span><span style="color:#C678DD"> com.test</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "init"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> age</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> age</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            super</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">age</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getName</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAge</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setAge</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> age</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">age</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#98C379"> "User [name="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> name </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", age="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> age </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "]"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">根据类名</span><span style="color:#C678DD">:</span><span style="color:#C678DD">  	class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.test.User</span></span>
<span class="line"><span style="color:#E06C75">根据对象:  	</span><span style="color:#C678DD">class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.test.User</span></span>
<span class="line"><span style="color:#E06C75">根据全限定类名:	</span><span style="color:#C678DD">class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.test.User</span></span>
<span class="line"><span style="color:#E06C75">获取全限定类名:	com.test.User</span></span>
<span class="line"><span style="color:#E06C75">获取类名:	User</span></span>
<span class="line"><span style="color:#E06C75">实例化:	User [name=init, age=0]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>再来看看 <strong>Class类的方法</strong></li>
</ul>
<p>| 方法名                                              | 说明                                                         |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" type="image/png"/>
    </item>
    <item>
      <title>Java 基础之图谱</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之图谱</source>
      <description>本文主要对Java基础知识体系小结，同时结合一些Q&amp;A进行理解。 Java 基础之图谱 参考文档 知识体系 Q&amp;A Java 中应该使用什么数据类型来代表价格? 怎么将 byte 转换为 String? Java 中怎样将 bytes 转换为 long 类型? 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对Java基础知识体系小结，同时结合一些Q&amp;A进行理解。</p>
</blockquote>
<ul>
<li>Java 基础之图谱
<ul>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li>Q&amp;A
<ul>
<li><a href="#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC">Java 中应该使用什么数据类型来代表价格?</a></li>
<li><a href="#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string">怎么将 byte 转换为 String?</a></li>
<li><a href="#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B">Java 中怎样将 bytes 转换为 long 类型?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1">我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</a></li>
<li><a href="#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BBb-%E7%BB%A7%E6%89%BF-ac-%E7%BB%A7%E6%89%BF-b%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c--c-b">存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</a></li>
<li><a href="#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object">哪个类包含 clone 方法? 是 Cloneable 还是 Object?</a></li>
<li><a href="#java-%E4%B8%AD--%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97">Java 中 ++ 操作符是线程安全的吗?</a></li>
<li><a href="#a--a--b-%E4%B8%8E-a--b-%E7%9A%84%E5%8C%BA%E5%88%AB">a = a + b 与 a += b 的区别</a></li>
<li><a href="#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97">我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</a></li>
<li><a href="#301--03-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false">3*0.1 == 0.3 将会返回什么? true 还是 false?</a></li>
<li><a href="#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98">int 和 Integer 哪个会占用更多的内存?</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84immutable">为什么 Java 中的 String 是不可变的(Immutable)?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97">我们能在 Switch 中使用 String 吗?</a></li>
<li><a href="#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88">Java 中的构造器链是什么?</a></li>
<li><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">枚举类</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97">我们能创建一个包含可变对象的不可变对象吗?</a></li>
<li><a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode">有没有可能两个不相等的对象有相同的 hashcode?</a></li>
<li><a href="#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97">两个相同的对象会有不同的 hash code 吗?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97">我们可以在 hashcode() 中使用随机数字吗?</a></li>
<li><a href="#java-%E4%B8%ADcomparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">Java 中，Comparator 与 Comparable 有什么不同?</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95">为什么在重写 equals 方法的时候需要重写 hashCode 方法?</a></li>
<li><a href="#ab%E5%92%8Caequalsb%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">“a==b”和”a.equals(b)”有什么区别?</a></li>
<li><a href="#ahashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-aequalsb-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</a></li>
<li><a href="#finalfinalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">final、finalize 和 finally 的不同之处?</a></li>
<li><a href="#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9">Java 中的编译期常量是什么? 使用它又什么风险?</a></li>
<li><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">静态内部类与顶级类有什么区别?</a></li>
<li><a href="#java-%E4%B8%ADserializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB">Java 中，Serializable 与 Externalizable 的区别?</a></li>
<li><a href="#%E8%AF%B4%E5%87%BA-jdk-17-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7">说出 JDK 1.7 中的三个新特性?</a></li>
<li><a href="#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-18-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">说出 5 个 JDK 1.8 引入的新特性?</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB">接口是什么? 为什么要使用接口而不是直接使用具体类?</a></li>
<li><a href="#java-%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">Java 中，抽象类与接口之间有什么不同?</a></li>
<li><a href="#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95">Object有哪些公用方法?</a></li>
<li><a href="#equals%E4%B8%8E%E7%9A%84%E5%8C%BA%E5%88%AB">equals与==的区别</a></li>
<li><a href="#stringstringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">String、StringBuffer与StringBuilder的区别</a></li>
<li><a href="#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0">switch能否用String做参数</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">接口与抽象类</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB">抽象类和最终类</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li>
<li><a href="#%E5%85%B3%E4%BA%8Efinally">关于finally</a></li>
<li><a href="#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">受检查异常和运行时异常</a></li>
<li><a href="#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F">super出现在父类的子类中。有三种存在方式</a></li>
<li><a href="#this--super%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB">this() &amp; super()在构造方法中的区别</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1">构造内部类和静态内部类对象</a></li>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">序列化</a></li>
<li><a href="#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">Java移位运算符</a></li>
<li><a href="#%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82">形参&amp;实参</a></li>
<li><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96">局部变量为什么要初始化</a></li>
<li><a href="#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7">Java语言的鲁棒性</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#参考文档"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">#</a> 参考文档</h2>
<ul>
<li>Thinking in Java (Java 编程思想) Gitbook中文文档 https://java.quanke.name/</li>
<li>Thinking in Java (Java 编程思想) Github https://github.com/quanke/think-in-java</li>
<li>Thinking in Java (Java 编程思想) Gitbook2 https://www.gitbook.com/book/wizardforcel/thinking-in-java/details</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#q-a"><span></span></a><a href="#q-a">#</a> Q&amp;A</h2>
<h3><a class="header-anchor" href="#java-中应该使用什么数据类型来代表价格"><span></span></a><a href="#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC">#</a> Java 中应该使用什么数据类型来代表价格?</h3>
<p>如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。</p>
<h3><a class="header-anchor" href="#怎么将-byte-转换为-string"><span></span></a><a href="#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string">#</a> 怎么将 byte 转换为 String?</h3>
<p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p>
<h3><a class="header-anchor" href="#java-中怎样将-bytes-转换为-long-类型"><span></span></a><a href="#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B">#</a> Java 中怎样将 bytes 转换为 long 类型?</h3>
<p>String接收bytes的构造器转成String，再Long.parseLong</p>
<h3><a class="header-anchor" href="#我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4-%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1">#</a> 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</h3>
<p>是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。</p>
<h3><a class="header-anchor" href="#存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b"><span></span></a><a href="#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BB-b-%E7%BB%A7%E6%89%BF-a-c-%E7%BB%A7%E6%89%BF-b-%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c-c-b">#</a> 存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</h3>
<p>可以，向下转型。但是不建议使用，容易出现类型转型异常.</p>
<h3><a class="header-anchor" href="#哪个类包含-clone-方法-是-cloneable-还是-object"><span></span></a><a href="#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object">#</a> 哪个类包含 clone 方法? 是 Cloneable 还是 Object?</h3>
<p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p>
<h3><a class="header-anchor" href="#java-中-操作符是线程安全的吗"><span></span></a><a href="#java-%E4%B8%AD-%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97">#</a> Java 中 ++ 操作符是线程安全的吗?</h3>
<p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。还会存在竞态条件(读取-修改-写入)。</p>
<h3><a class="header-anchor" href="#a-a-b-与-a-b-的区别"><span></span></a><a href="#a-a-b-%E4%B8%8E-a-b-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> a = a + b 与 a += b 的区别</h3>
<p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 127</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 127</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">b </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // error : cannot convert from int to byte</span></span>
<span class="line"><span style="color:#E06C75">b </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // ok</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p>
<h3><a class="header-anchor" href="#我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗"><span></span></a><a href="#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97">#</a> 我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</h3>
<p>不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。</p>
<h3><a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false"><span></span></a><a href="#_3-0-1-0-3-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false">#</a> 3*0.1 == 0.3 将会返回什么? true 还是 false?</h3>
<p>false，因为有些浮点数不能完全精确的表示出来。</p>
<h3><a class="header-anchor" href="#int-和-integer-哪个会占用更多的内存"><span></span></a><a href="#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98">#</a> int 和 Integer 哪个会占用更多的内存?</h3>
<p>Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p>
<h3><a class="header-anchor" href="#为什么-java-中的-string-是不可变的-immutable"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84-immutable">#</a> 为什么 Java 中的 String 是不可变的(Immutable)?</h3>
<p>Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。更详细的内容参见答案。</p>
<h3><a class="header-anchor" href="#我们能在-switch-中使用-string-吗"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97">#</a> 我们能在 Switch 中使用 String 吗?</h3>
<p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p>
<h3><a class="header-anchor" href="#java-中的构造器链是什么"><span></span></a><a href="#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88">#</a> Java 中的构造器链是什么?</h3>
<p>当你从一个构造器中调用另一个构造器，就是Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。</p>
<h3><a class="header-anchor" href="#枚举类"><span></span></a><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">#</a> 枚举类</h3>
<p>JDK1.5出现 每个枚举值都需要调用一次构造函数</p>
<h3><a class="header-anchor" href="#什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1-immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">#</a> 什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</h3>
<p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。</p>
<p>如何在Java中写出Immutable的类?</p>
<p>要写出这样的类，需要遵循以下几个原则:</p>
<p>1)immutable对象的状态在创建之后就不能发生改变，任何对它的改变都应该产生一个新的对象。</p>
<p>2)Immutable类的所有的属性都应该是final的。</p>
<p>3)对象必须被正确的创建，比如: 对象引用在对象创建过程中不能泄露(leak)。</p>
<p>4)对象应该是final的，以此来限制子类继承父类，以避免子类改变了父类的immutable特性。</p>
<p>5)如果类中包含mutable类对象，那么返回给客户端的时候，返回该对象的一个拷贝，而不是该对象本身(该条可以归为第一条中的一个特例)</p>
<h3><a class="header-anchor" href="#我们能创建一个包含可变对象的不可变对象吗"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97">#</a> 我们能创建一个包含可变对象的不可变对象吗?</h3>
<p>是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。</p>
<h3><a class="header-anchor" href="#有没有可能两个不相等的对象有相同的-hashcode"><span></span></a><a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode">#</a> 有没有可能两个不相等的对象有相同的 hashcode?</h3>
<p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。</p>
<h3><a class="header-anchor" href="#两个相同的对象会有不同的-hash-code-吗"><span></span></a><a href="#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97">#</a> 两个相同的对象会有不同的 hash code 吗?</h3>
<p>不能，根据 hash code 的规定，这是不可能的。</p>
<h3><a class="header-anchor" href="#我们可以在-hashcode-中使用随机数字吗"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97">#</a> 我们可以在 hashcode() 中使用随机数字吗?</h3>
<p>不行，因为对象的 hashcode 值必须是相同的。</p>
<h3><a class="header-anchor" href="#java-中-comparator-与-comparable-有什么不同"><span></span></a><a href="#java-%E4%B8%AD-comparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">#</a> Java 中，Comparator 与 Comparable 有什么不同?</h3>
<p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p>
<h3><a class="header-anchor" href="#为什么在重写-equals-方法的时候需要重写-hashcode-方法"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95">#</a> 为什么在重写 equals 方法的时候需要重写 hashCode 方法?</h3>
<p>因为有强制的规范指定需要同时重写 hashcode 与 equals 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p>
<h3><a class="header-anchor" href="#a-b-和-a-equals-b-有什么区别"><span></span></a><a href="#a-b-%E5%92%8C-a-equals-b-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a> “a==b”和”a.equals(b)”有什么区别?</h3>
<p>如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p>
<h3><a class="header-anchor" href="#a-hashcode-有什么用-与-a-equals-b-有什么关系"><span></span></a><a href="#a-hashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-a-equals-b-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">#</a> a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</h3>
<p>简介: hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equals() 方法来判断相等的对象，必须具有相同的 hash code。</p>
<p>1、hashcode的作用</p>
<p>List和Set，如何保证Set不重复呢? 通过迭代使用equals方法来判断，数据量小还可以接受，数据量大怎么解决? 引入hashcode，实际上hashcode扮演的角色就是寻址，大大减少查询匹配次数。</p>
<p>2、hashcode重要吗</p>
<p>对于数组、List集合就是一个累赘。而对于hashmap, hashset, hashtable就异常重要了。</p>
<p>3、equals方法遵循的原则</p>
<ul>
<li>对称性 若x.equals(y)true，则y.equals(x)true</li>
<li>自反性 x.equals(x)必须true</li>
<li>传递性 若x.equals(y)true,y.equals(z)true,则x.equals(z)必为true</li>
<li>一致性 只要x,y内容不变，无论调用多少次结果不变</li>
<li>其他 x.equals(null) 永远false，x.equals(和x数据类型不同)始终false</li>
</ul>
<h3><a class="header-anchor" href="#final、finalize-和-finally-的不同之处"><span></span></a><a href="#final%E3%80%81finalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">#</a> final、finalize 和 finally 的不同之处?</h3>
<ul>
<li>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。</li>
<li>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</li>
<li>finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li>
</ul>
<h3><a class="header-anchor" href="#java-中的编译期常量是什么-使用它又什么风险"><span></span></a><a href="#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9">#</a> Java 中的编译期常量是什么? 使用它又什么风险?</h3>
<p>变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p>
<h3><a class="header-anchor" href="#静态内部类与顶级类有什么区别"><span></span></a><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a> 静态内部类与顶级类有什么区别?</h3>
<p>一个公共的顶级类的源文件名称与类名相同，而嵌套静态类没有这个要求。一个嵌套类位于顶级类内部，需要使用顶级类的名称来引用嵌套静态类，如 HashMap.Entry 是一个嵌套静态类，HashMap 是一个顶级类，Entry是一个嵌套静态类。</p>
<h3><a class="header-anchor" href="#java-中-serializable-与-externalizable-的区别"><span></span></a><a href="#java-%E4%B8%AD-serializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Java 中，Serializable 与 Externalizable 的区别?</h3>
<p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p>
<h3><a class="header-anchor" href="#说出-jdk-1-7-中的三个新特性"><span></span></a><a href="#%E8%AF%B4%E5%87%BA-jdk-1-7-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7">#</a> 说出 JDK 1.7 中的三个新特性?</h3>
<p>虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(&lt;&gt;)用于泛型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。</p>
<h3><a class="header-anchor" href="#说出-5-个-jdk-1-8-引入的新特性"><span></span></a><a href="#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-1-8-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">#</a> 说出 5 个 JDK 1.8 引入的新特性?</h3>
<p>Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性: Lambda 表达式，允许像对象一样传递匿名函数 Stream API，充分利用现代多核 CPU，可以写出很简洁的代码 Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用 扩展方法，现在，接口中可以有静态、默认方法。 重复注解，现在你可以将相同的注解在同一类型上使用多次。</p>
<p>下述包含 Java 面试过程中关于 SOLID 的设计原则，OOP 基础，如类，对象，接口，继承，多态，封装，抽象以及更高级的一些概念，如组合、聚合及关联。也包含了 GOF 设计模式的问题。</p>
<h3><a class="header-anchor" href="#接口是什么-为什么要使用接口而不是直接使用具体类"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB">#</a> 接口是什么? 为什么要使用接口而不是直接使用具体类?</h3>
<p>接口用于定义 API。它定义了类必须得遵循的规则。同时，它提供了一种抽象，因为客户端只使用接口，这样可以有多重实现，如 List 接口，你可以使用可随机访问的 ArrayList，也可以使用方便插入和删除的 LinkedList。接口中不允许普通方法，以此来保证抽象，但是 Java 8 中你可以在接口声明静态方法和默认普通方法。</p>
<h3><a class="header-anchor" href="#java-中-抽象类与接口之间有什么不同"><span></span></a><a href="#java-%E4%B8%AD-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">#</a> Java 中，抽象类与接口之间有什么不同?</h3>
<p>Java 中，抽象类和接口有很多不同之处，但是最重要的一个是 Java 中限制一个类只能继承一个类，但是可以实现多个接口。抽象类可以很好的定义一个家族类的默认行为，而接口能更好的定义类型，有助于后面实现多态机制 参见第六条。</p>
<h3><a class="header-anchor" href="#object有哪些公用方法"><span></span></a><a href="#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95">#</a> Object有哪些公用方法?</h3>
<p>clone equals hashcode wait notify notifyall finalize toString getClass 除了clone和finalize其他均为公共方法。</p>
<p>11个方法，wait被重载了两次</p>
<h3><a class="header-anchor" href="#equals与-的区别"><span></span></a><a href="#equals%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> equals与==的区别</h3>
<p>区别1. ==是一个运算符 equals是Object类的方法</p>
<p>区别2. 比较时的区别</p>
<ul>
<li>用于基本类型的变量比较时: ==用于比较值是否相等，equals不能直接用于基本数据类型的比较，需要转换为其对应的包装类型。</li>
<li>用于引用类型的比较时。==和equals都是比较栈内存中的地址是否相等 。相等为true 否则为false。但是通常会重写equals方法去实现对象内容的比较。</li>
</ul>
<h3><a class="header-anchor" href="#string、stringbuffer与stringbuilder的区别"><span></span></a><a href="#string%E3%80%81stringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> String、StringBuffer与StringBuilder的区别</h3>
<p>第一点: 可变和适用范围。String对象是不可变的，而StringBuffer和StringBuilder是可变字符序列。每次对String的操作相当于生成一个新的String对象，而对StringBuffer和StringBuilder的操作是对对象本身的操作，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用String，因为频繁的生成对象将会对系统性能产生影响。</p>
<p>第二点: 线程安全。String由于有final修饰，是immutable的，安全性是简单而纯粹的。StringBuilder和StringBuffer的区别在于StringBuilder不保证同步，也就是说如果需要线程安全需要使用StringBuffer，不需要同步的StringBuilder效率更高。</p>
<h3><a class="header-anchor" href="#switch能否用string做参数"><span></span></a><a href="#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0">#</a> switch能否用String做参数</h3>
<p>Java1.7开始支持，但实际这是一颗Java语法糖。除此之外，byte，short，int，枚举均可用于switch，而boolean和浮点型不可以。</p>
<h3><a class="header-anchor" href="#接口与抽象类"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> 接口与抽象类</h3>
<ul>
<li>一个子类只能继承一个抽象类, 但能实现多个接口</li>
<li>抽象类可以有构造方法, 接口没有构造方法</li>
<li>抽象类可以有普通成员变量, 接口没有普通成员变量</li>
<li>抽象类和接口都可有静态成员变量, 抽象类中静态成员变量访问类型任意，接口只能public static final(默认)</li>
<li>抽象类可以没有抽象方法, 抽象类可以有普通方法；接口在JDK8之前都是抽象方法，在JDK8可以有default方法，在JDK9中允许有私有普通方法</li>
<li>抽象类可以有静态方法；接口在JDK8之前不能有静态方法，在JDK8中可以有静态方法，且只能被接口类直接调用（不能被实现类的对象调用）</li>
<li>抽象类中的方法可以是public、protected; 接口方法在JDK8之前只有public abstract，在JDK8可以有default方法，在JDK9中允许有private方法</li>
</ul>
<h3><a class="header-anchor" href="#抽象类和最终类"><span></span></a><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB">#</a> 抽象类和最终类</h3>
<p>抽象类可以没有抽象方法, 最终类可以没有最终方法</p>
<p>最终类不能被继承, 最终方法不能被重写(可以重载)</p>
<h3><a class="header-anchor" href="#异常"><span></span></a><a href="#%E5%BC%82%E5%B8%B8">#</a> 异常</h3>
<p>相关的关键字 throw、throws、try...catch、finally</p>
<ul>
<li>throws 用在方法签名上, 以便抛出的异常可以被调用者处理</li>
<li>throw 方法内部通过throw抛出异常</li>
<li>try 用于检测包住的语句块, 若有异常, catch子句捕获并执行catch块</li>
</ul>
<h3><a class="header-anchor" href="#关于finally"><span></span></a><a href="#%E5%85%B3%E4%BA%8Efinally">#</a> 关于finally</h3>
<ul>
<li>finally不管有没有异常都要处理</li>
<li>当try和catch中有return时，finally仍然会执行，finally比return先执行</li>
<li>不管有木有异常抛出, finally在return返回前执行</li>
<li>finally是在return后面的表达式运算后执行的(此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值)，所以函数返回值是在finally执行前确定的</li>
</ul>
<p>注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值</p>
<p>finally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电</p>
<h3><a class="header-anchor" href="#受检查异常和运行时异常"><span></span></a><a href="#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">#</a> 受检查异常和运行时异常</h3>
<ul>
<li>受检查的异常(checked exceptions),其必须被try...catch语句块所捕获, 或者在方法签名里通过throws子句声明。受检查的异常必须在编译时被捕捉处理,命名为Checked Exception是因为Java编译器要进行检查, Java虚拟机也要进行检查, 以确保这个规则得到遵守。</li>
</ul>
<p>常见的checked exception: ClassNotFoundException IOException FileNotFoundException EOFException</p>
<ul>
<li>运行时异常(runtime exceptions), 需要程序员自己分析代码决定是否捕获和处理,比如空指针,被0除...</li>
</ul>
<p>常见的runtime exception: NullPointerException ArithmeticException ClassCastException IllegalArgumentException IllegalStateException IndexOutOfBoundsException NoSuchElementException</p>
<ul>
<li>Error的，则属于严重错误，如系统崩溃、虚拟机错误、动态链接失败等，这些错误无法恢复或者不可能捕捉，将导致应用程序中断，Error不需要捕获。</li>
</ul>
<h3><a class="header-anchor" href="#super出现在父类的子类中。有三种存在方式"><span></span></a><a href="#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E3%80%82%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F">#</a> super出现在父类的子类中。有三种存在方式</h3>
<ul>
<li>super.xxx(xxx为变量名或对象名)意思是获取父类中xxx的变量或引用</li>
<li>super.xxx(); (xxx为方法名)意思是直接访问并调用父类中的方法</li>
<li>super() 调用父类构造</li>
</ul>
<p>注: super只能指代其直接父类</p>
<h3><a class="header-anchor" href="#this-super-在构造方法中的区别"><span></span></a><a href="#this-super-%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> this() &amp; super()在构造方法中的区别</h3>
<ul>
<li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li>
<li>super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行</li>
<li>尽管可以用this调用一个构造器, 却不能调用2个</li>
<li>this和super不能出现在同一个构造器中, 否则编译不通过</li>
<li>this()、super()都指的对象,不可以在static环境中使用</li>
<li>本质this指向本对象的指针。super是一个关键字</li>
</ul>
<h3><a class="header-anchor" href="#构造内部类和静态内部类对象"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1">#</a> 构造内部类和静态内部类对象</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Enclosingone</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Insideone</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Insideone</span><span style="color:#ABB2BF">{}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 构造内部类对象需要外部类的引用</span></span>
<span class="line"><span style="color:#E5C07B">	Enclosingone</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Insideone</span><span style="color:#E06C75"> obj1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Enclosingone</span><span style="color:#ABB2BF">().</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Insideone</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 构造静态内部类的对象</span></span>
<span class="line"><span style="color:#E5C07B">	Enclosingone</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Insideone</span><span style="color:#E06C75"> obj2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#ABB2BF"> Enclosingone.</span><span style="color:#61AFEF">Insideone</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态内部类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。非静态内部类能够访问外部类的静态和非静态成员。静态内部类不能访问外部类的非静态成员，只能访问外部类的静态成员。</p>
<h3><a class="header-anchor" href="#序列化"><span></span></a><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">#</a> 序列化</h3>
<p>声明为static和transient类型的数据不能被序列化， 反序列化需要一个无参构造函数</p>
<h3><a class="header-anchor" href="#java移位运算符"><span></span></a><a href="#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">#</a> Java移位运算符</h3>
<p>java中有三种移位运算符</p>
<ul>
<li><code>&lt;&lt;</code> :左移运算符,<code>x &lt;&lt; 1</code>,相当于x乘以2(不溢出的情况下),低位补0</li>
<li><code>&gt;&gt;</code> :带符号右移,<code>x &gt;&gt; 1</code>,相当于x除以2,正数高位补0,负数高位补1</li>
<li><code>&gt;&gt;&gt;</code> :无符号右移,忽略符号位,空位都以0补齐</li>
</ul>
<h3><a class="header-anchor" href="#形参-实参"><span></span></a><a href="#%E5%BD%A2%E5%8F%82-%E5%AE%9E%E5%8F%82">#</a> 形参&amp;实参</h3>
<p>形式参数可被视为local variable.形参和局部变量一样都不能离开方法。只有在方法中使用，不会在方法外可见。 形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误。但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改。不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下，那就是: 方法内部类。一个方法内的内部类如果使用了这个方法的参数或者局部变量的话，这个参数或局部变量应该是final。 形参的值在调用时根据调用者更改，实参则用自身的值更改形参的值(指针、引用皆在此列)，也就是说真正被传递的是实参。</p>
<h3><a class="header-anchor" href="#局部变量为什么要初始化"><span></span></a><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 局部变量为什么要初始化</h3>
<p>局部变量是指类方法中的变量，必须初始化。局部变量运行时被分配在栈中，量大，生命周期短，如果虚拟机给每个局部变量都初始化一下，是一笔很大的开销，但变量不初始化为默认值就使用是不安全的。出于速度和安全性两个方面的综合考虑，解决方案就是虚拟机不初始化，但要求编写者一定要在使用前给变量赋值。</p>
<h3><a class="header-anchor" href="#java语言的鲁棒性"><span></span></a><a href="#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7">#</a> Java语言的鲁棒性</h3>
<p>Java在编译和运行程序时，都要对可能出现的问题进行检查，以消除错误的产生。它提供自动垃圾收集来进行内存管理，防止程序员在管理内存时容易产生的错误。通过集成的面向对象的例外处理机制，在编译时，Java揭示出可能出现但未被处理的异常，帮助程序员正确地进行选择以防止系统的崩溃。另外，Java在编译时还可捕获类型声明中的许多常见错误，防止动态运行时不匹配问题的出现。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png" type="image/png"/>
    </item>
    <item>
      <title>Java 基础之常见知识点</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之常见知识点</source>
      <description>[Java 基础之常见知识点](#Java 基础之常见知识点) 数据类型 包装类型 缓存池 String 概览 不可变的好处 String, StringBuffer and StringBuilder String.intern() 运算 参数传递 float 与 double 隐式类型转换 switch 继承 访问权限 抽象类与接口 super 重...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 17:49:59 GMT</pubDate>
      <content:encoded><![CDATA[<p>[Java 基础之常见知识点](#Java 基础之常见知识点)</p>
<ul>
<li>数据类型
<ul>
<li><a href="#%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B">包装类型</a></li>
<li><a href="#%E7%BC%93%E5%AD%98%E6%B1%A0">缓存池</a></li>
</ul>
</li>
<li>String
<ul>
<li><a href="#%E6%A6%82%E8%A7%88">概览</a></li>
<li><a href="#%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E5%A5%BD%E5%A4%84">不可变的好处</a></li>
<li><a href="#string-stringbuffer-and-stringbuilder">String, StringBuffer and StringBuilder</a></li>
<li><a href="#stringintern">String.intern()</a></li>
</ul>
</li>
<li>运算
<ul>
<li><a href="#%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">参数传递</a></li>
<li><a href="#float-%E4%B8%8E-double">float 与 double</a></li>
<li><a href="#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">隐式类型转换</a></li>
<li><a href="#switch">switch</a></li>
</ul>
</li>
<li>继承
<ul>
<li><a href="#%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90">访问权限</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3">抽象类与接口</a></li>
<li><a href="#super">super</a></li>
<li><a href="#%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD">重写与重载</a></li>
</ul>
</li>
<li>Object 通用方法
<ul>
<li><a href="#%E6%A6%82%E8%A7%88-1">概览</a></li>
<li><a href="#equals">equals()</a></li>
<li><a href="#hashcode">hashCode()</a></li>
<li><a href="#tostring">toString()</a></li>
<li><a href="#clone">clone()</a></li>
</ul>
</li>
<li>关键字
<ul>
<li><a href="#final">final</a></li>
<li><a href="#static">static</a></li>
</ul>
</li>
<li><a href="#%E5%8F%8D%E5%B0%84">反射</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B">泛型</a></li>
<li><a href="#%E6%B3%A8%E8%A7%A3">注解</a></li>
<li>特性
<ul>
<li><a href="#java-%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">Java 各版本的新特性</a></li>
<li><a href="#java-%E4%B8%8E-c-%E7%9A%84%E5%8C%BA%E5%88%AB">Java 与 C++ 的区别</a></li>
<li><a href="#jre-or-jdk">JRE or JDK</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/f76067a5-7d5f-4135-9549-8199c77d8f1c.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Java 基础之异常机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之异常机制</source>
      <description>Java异常是Java提供的一种识别及响应错误的一致性机制，java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。本文综合多篇文章后，总结了Java 异常的相关知识，希望可以提升你对Java中异常的认知效率。@pdai Java 基础之异常机制 异常的层次结构 Throwable Error（错误） Exc...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java异常是Java提供的一种识别及响应错误的一致性机制，java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。本文综合多篇文章后，总结了Java 异常的相关知识，希望可以提升你对Java中异常的认知效率。@pdai</p>
</blockquote>
<ul>
<li>Java 基础之异常机制
<ul>
<li>异常的层次结构
<ul>
<li><a href="#throwable">Throwable</a></li>
<li><a href="#error%E9%94%99%E8%AF%AF">Error（错误）</a></li>
<li><a href="#exception%E5%BC%82%E5%B8%B8">Exception（异常）</a></li>
<li><a href="#%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8checked-exceptions%E5%92%8C%E4%B8%8D%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8unchecked-exceptions">可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）</a></li>
</ul>
</li>
<li>异常基础
<ul>
<li><a href="#%E5%BC%82%E5%B8%B8%E5%85%B3%E9%94%AE%E5%AD%97">异常关键字</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E7%94%B3%E6%98%8Ethrows">异常的申明(throws)</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8A%9B%E5%87%BAthrow">异常的抛出(throw)</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89">异常的自定义</a></li>
<li>异常的捕获
<ul>
<li><a href="#try-catch">try-catch</a></li>
<li><a href="#try-catch-finally">try-catch-finally</a></li>
<li><a href="#try-finally">try-finally</a></li>
<li><a href="#try-with-resource">try-with-resource</a></li>
</ul>
</li>
<li><a href="#%E5%BC%82%E5%B8%B8%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93">异常基础总结</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%82%E5%B8%B8">常用的异常</a></li>
</ul>
</li>
<li>异常实践
<ul>
<li><a href="#%E5%8F%AA%E9%92%88%E5%AF%B9%E4%B8%8D%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E6%89%8D%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8">只针对不正常的情况才使用异常</a></li>
<li><a href="#%E5%9C%A8-finally-%E5%9D%97%E4%B8%AD%E6%B8%85%E7%90%86%E8%B5%84%E6%BA%90%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8-try-with-resource-%E8%AF%AD%E5%8F%A5">在 finally 块中清理资源或者使用 try-with-resource 语句</a></li>
<li><a href="#%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E7%9A%84%E5%BC%82%E5%B8%B8">尽量使用标准的异常</a></li>
<li><a href="#%E5%AF%B9%E5%BC%82%E5%B8%B8%E8%BF%9B%E8%A1%8C%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E">对异常进行文档说明</a></li>
<li><a href="#%E4%BC%98%E5%85%88%E6%8D%95%E8%8E%B7%E6%9C%80%E5%85%B7%E4%BD%93%E7%9A%84%E5%BC%82%E5%B8%B8">优先捕获最具体的异常</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E6%8D%95%E8%8E%B7-throwable-%E7%B1%BB">不要捕获 Throwable 类</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E5%BF%BD%E7%95%A5%E5%BC%82%E5%B8%B8">不要忽略异常</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E8%AE%B0%E5%BD%95%E5%B9%B6%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">不要记录并抛出异常</a></li>
<li><a href="#%E5%8C%85%E8%A3%85%E5%BC%82%E5%B8%B8%E6%97%B6%E4%B8%8D%E8%A6%81%E6%8A%9B%E5%BC%83%E5%8E%9F%E5%A7%8B%E7%9A%84%E5%BC%82%E5%B8%B8">包装异常时不要抛弃原始的异常</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E7%A8%8B">不要使用异常控制程序的流程</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E5%9C%A8finally%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8return">不要在finally块中使用return。</a></li>
</ul>
</li>
<li>深入理解异常
<ul>
<li><a href="#jvm%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%E6%9C%BA%E5%88%B6">JVM处理异常的机制？</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E6%98%AF%E5%90%A6%E8%80%97%E6%97%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%80%97%E6%97%B6">异常是否耗时？为什么会耗时？</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#异常的层次结构"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84">#</a> 异常的层次结构</h2>
<p>异常指不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通 过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例，描述了出现在一段编码中的 错误条件。当条件生成时，错误将引发异常。</p>
<p>Java异常类层次结构图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-exception-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#throwable"><span></span></a><a href="#throwable">#</a> Throwable</h3>
<p>Throwable 是 Java 语言中所有错误与异常的超类。</p>
<p>Throwable 包含两个子类：Error（错误）和 Exception（异常），它们通常用于指示发生了异常情况。</p>
<p>Throwable 包含了其线程创建时线程执行堆栈的快照，它提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。</p>
<h3><a class="header-anchor" href="#error-错误"><span></span></a><a href="#error-%E9%94%99%E8%AF%AF">#</a> Error（错误）</h3>
<p>Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。</p>
<p>此类错误一般表示代码运行时 JVM 出现问题。通常有 Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如 OutOfMemoryError：内存不足错误；StackOverflowError：栈溢出错误。此类错误发生时，JVM 将终止线程。</p>
<p>这些错误是不受检异常，非代码性错误。因此，当此类错误发生时，应用程序不应该去处理此类错误。按照Java惯例，我们是不应该实现任何新的Error子类的！</p>
<h3><a class="header-anchor" href="#exception-异常"><span></span></a><a href="#exception-%E5%BC%82%E5%B8%B8">#</a> Exception（异常）</h3>
<p>程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。</p>
<ul>
<li><strong>运行时异常</strong></li>
</ul>
<p>都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p>
<p>运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。</p>
<ul>
<li><strong>非运行时异常</strong> （编译异常）</li>
</ul>
<p>是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p>
<h3><a class="header-anchor" href="#可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions"><span></span></a><a href="#%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8-checked-exceptions-%E5%92%8C%E4%B8%8D%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8-unchecked-exceptions">#</a> 可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）</h3>
<ul>
<li><strong>可查异常</strong>（编译器要求必须处置的异常）：</li>
</ul>
<p>正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。</p>
<p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。</p>
<ul>
<li><strong>不可查异常</strong>(编译器不要求强制处置的异常)</li>
</ul>
<p>包括运行时异常（RuntimeException与其子类）和错误（Error）。</p>
<h2><a class="header-anchor" href="#异常基础"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%9F%BA%E7%A1%80">#</a> 异常基础</h2>
<p>提示</p>
<p>接下来我们看下异常使用的基础。</p>
<h3><a class="header-anchor" href="#异常关键字"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%85%B3%E9%94%AE%E5%AD%97">#</a> 异常关键字</h3>
<ul>
<li><strong>try</strong> – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。</li>
<li><strong>catch</strong> – 用于捕获异常。catch用来捕获try语句块中发生的异常。</li>
<li><strong>finally</strong> – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。</li>
<li><strong>throw</strong> – 用于抛出异常。</li>
<li><strong>throws</strong> – 用在方法签名中，用于声明该方法可能抛出的异常。</li>
</ul>
<h3><a class="header-anchor" href="#异常的申明-throws"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E7%94%B3%E6%98%8E-throws">#</a> 异常的申明(throws)</h3>
<p>在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#E06C75">() throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> FileNotFoundException{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //something statements</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：若是父类的方法没有声明异常，则子类继承方法后，也不能声明异常。</p>
<p>通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。传递异常可以在方法签名处使用 throws 关键字声明可能会抛出的异常。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws IOException {</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileReader</span><span style="color:#E06C75">(file))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">((result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#56B6C2">!=</span><span style="color:#D19A66">null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Throws抛出异常的规则：</p>
<ul>
<li>如果是不可查异常（unchecked exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。</li>
<li>必须声明方法可抛出的任何可查异常（checked exception）。即如果一个方法可能出现受可查异常，要么用try-catch语句捕获，要么用throws子句声明将它抛出，否则会导致编译错误</li>
<li>仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li>
<li>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</li>
</ul>
<h3><a class="header-anchor" href="#异常的抛出-throw"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8A%9B%E5%87%BA-throw">#</a> 异常的抛出(throw)</h3>
<p>如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> method</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75">(value </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArithmeticException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"参数不能为0"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //抛出一个运行时异常</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> 5.0</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大部分情况下都不需要手动抛出异常，因为Java的大部分方法要么已经处理异常，要么已声明异常。所以一般都是捕获异常或者再往上抛。</p>
<p>有时我们会从 catch 中抛出一个异常，目的是为了改变异常的类型。多用于在多系统集成时，当某个子系统故障，异常类型可能有多种，可以用统一的异常类型向外暴露，不需暴露太多内部异常细节。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws MyException {    </span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        MyException</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"read file failed."</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">initCause</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#异常的自定义"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89">#</a> 异常的自定义</h3>
<p>习惯上，定义一个异常类应包含两个构造函数，一个无参构造函数和一个带有详细描述信息的构造函数（Throwable 的 toString 方法会打印这些详细信息，调试时很有用）, 比如上面用到的自定义MyException：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyException</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyException</span><span style="color:#ABB2BF">(){ }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyException</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> msg</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(msg);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#异常的捕获"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7">#</a> 异常的捕获</h3>
<p>异常捕获处理的方法通常有：</p>
<ul>
<li>try-catch</li>
<li>try-catch-finally</li>
<li>try-finally</li>
<li>try-with-resource</li>
</ul>
<h4><a class="header-anchor" href="#try-catch"><span></span></a><a href="#try-catch">#</a> try-catch</h4>
<p>在一个 try-catch 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle FileNotFoundException</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle IOException</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同一个 catch 也可以捕获多种类型异常，用 | 隔开</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75"> | </span><span style="color:#E5C07B">UnknownHostException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle FileNotFoundException or UnknownHostException</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle IOException</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#try-catch-finally"><span></span></a><a href="#try-catch-finally">#</a> try-catch-finally</h4>
<ul>
<li>常规语法</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {                        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //执行程序代码，可能会出现异常                 </span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //捕获异常并处理   </span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //必执行的代码</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>执行的顺序
<ul>
<li>当try没有捕获到异常时：try语句块中的语句逐一被执行，程序将跳过catch语句块，执行finally语句块和其后的语句；</li>
<li>当try捕获到异常，catch语句块里没有处理此异常的情况：当try语句块里的某条语句出现异常时，而没有处理此异常的catch语句块时，此异常将会抛给JVM处理，finally语句块里的语句还是会被执行，但finally语句块后的语句不会被执行；</li>
<li>当try捕获到异常，catch语句块里有处理此异常的情况：在try语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到catch语句块，并与catch语句块逐一匹配，找到与之对应的处理程序，其他的catch语句块将不会被执行，而try语句块中，出现异常之后的语句也不会被执行，catch语句块执行完后，执行finally语句块里的语句，最后执行finally语句块后的语句；</li>
</ul>
</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-exception-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>一个完整的例子</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws MyException {</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        reader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileReader</span><span style="color:#E06C75">(file))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75">((result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#56B6C2">!=</span><span style="color:#D19A66">null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"readFile method catch block."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        MyException</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"read file failed."</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">initCause</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"readFile method finally block."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> reader) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#try-finally"><span></span></a><a href="#try-finally">#</a> try-finally</h4>
<blockquote>
<p>可以直接用try-finally吗？ 可以。</p>
</blockquote>
<p>try块中引起异常，异常代码之后的语句不再执行，直接执行finally语句。 try块没有引发异常，则执行完try块就执行finally语句。</p>
<p>try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//以Lock加锁为例，演示try-finally</span></span>
<span class="line"><span style="color:#E5C07B">ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //需要加锁的代码</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> //保证锁一定被释放</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>finally遇见如下情况不会执行</p>
<ul>
<li>在前面的代码中用了System.exit()退出程序。</li>
<li>finally语句块中发生了异常。</li>
<li>程序所在的线程死亡。</li>
<li>关闭CPU。</li>
</ul>
<h4><a class="header-anchor" href="#try-with-resource"><span></span></a><a href="#try-with-resource">#</a> try-with-resource</h4>
<blockquote>
<p>try-with-resource是Java 7中引入的，很容易被忽略。</p>
</blockquote>
<p>上面例子中，finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。</p>
<ul>
<li>代码实现</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD">  static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> tryWithResourceTest</span><span style="color:#E06C75">(){</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Scanner</span><span style="color:#E06C75"> scanner </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Scanner</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(</span><span style="color:#98C379">"c:/abc"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"UTF-8"</span><span style="color:#E06C75">)){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle exception</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>看下Scanner</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Scanner</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Closeable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> Closeable</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AutoCloseable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。</p>
<h3><a class="header-anchor" href="#异常基础总结"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93">#</a> 异常基础总结</h3>
<ul>
<li>try、catch和finally都不能单独使用，只能是try-catch、try-finally或者try-catch-finally。</li>
<li>try语句块监控代码，出现异常就停止执行下面的代码，然后将异常移交给catch语句块来处理。</li>
<li>finally语句块中的代码一定会被执行，常用于回收资源 。</li>
<li>throws：声明一个异常，告知方法调用者。</li>
<li>throw ：抛出一个异常，至于该异常被捕获还是继续抛出都与它无关。</li>
</ul>
<p>Java编程思想一书中，对异常的总结。</p>
<ul>
<li>在恰当的级别处理问题。（在知道该如何处理的情况下了捕获异常。）</li>
<li>解决问题并且重新调用产生异常的方法。</li>
<li>进行少许修补，然后绕过异常发生的地方继续执行。</li>
<li>用别的数据进行计算，以代替方法预计会返回的值。</li>
<li>把当前运行环境下能做的事尽量做完，然后把相同的异常重抛到更高层。</li>
<li>把当前运行环境下能做的事尽量做完，然后把不同的异常抛到更高层。</li>
<li>终止程序。</li>
<li>进行简化（如果你的异常模式使问题变得太复杂，那么用起来会非常痛苦）。</li>
<li>让类库和程序更安全。</li>
</ul>
<h3><a class="header-anchor" href="#常用的异常"><span></span></a><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%82%E5%B8%B8">#</a> 常用的异常</h3>
<p>在Java中提供了一些异常用来描述经常发生的错误，对于这些异常，有的需要程序员进行捕获处理或声明抛出，有的是由Java虚拟机自动进行捕获处理。Java中常见的异常类:</p>
<ul>
<li><strong>RuntimeException</strong>
<ul>
<li>java.lang.ArrayIndexOutOfBoundsException 数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。</li>
<li>java.lang.ArithmeticException 算术条件异常。譬如：整数除零等。</li>
<li>java.lang.NullPointerException 空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</li>
<li>java.lang.ClassNotFoundException 找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。</li>
<li>java.lang.NegativeArraySizeException 数组长度为负异常</li>
<li>java.lang.ArrayStoreException 数组中包含不兼容的值抛出的异常</li>
<li>java.lang.SecurityException 安全性异常</li>
<li>java.lang.IllegalArgumentException 非法参数异常</li>
</ul>
</li>
<li><strong>IOException</strong>
<ul>
<li>IOException：操作输入流和输出流时可能出现的异常。</li>
<li>EOFException 文件已结束异常</li>
<li>FileNotFoundException 文件未找到异常</li>
</ul>
</li>
<li><strong>其他</strong>
<ul>
<li>ClassCastException 类型转换异常类</li>
<li>ArrayStoreException 数组中包含不兼容的值抛出的异常</li>
<li>SQLException 操作数据库异常类</li>
<li>NoSuchFieldException 字段未找到异常</li>
<li>NoSuchMethodException 方法未找到抛出的异常</li>
<li>NumberFormatException 字符串转换为数字抛出的异常</li>
<li>StringIndexOutOfBoundsException 字符串索引超出范围抛出的异常</li>
<li>IllegalAccessException 不允许访问某类异常</li>
<li>InstantiationException 当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#异常实践"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%AE%9E%E8%B7%B5">#</a> 异常实践</h2>
<p>提示</p>
<p>在 Java 中处理异常并不是一个简单的事情。不仅仅初学者很难理解，即使一些有经验的开发者也需要花费很多时间来思考如何处理异常，包括需要处理哪些异常，怎样处理等等。这也是绝大多数开发团队都会制定一些规则来规范进行异常处理的原因。</p>
<p>当你抛出或捕获异常的时候，有很多不同的情况需要考虑，而且大部分事情都是为了改善代码的可读性或者 API 的可用性。</p>
<p>异常不仅仅是一个错误控制机制，也是一个通信媒介。因此，为了和同事更好的合作，一个团队必须要制定出一个最佳实践和规则，只有这样，团队成员才能理解这些通用概念，同时在工作中使用它。</p>
<p>这里给出几个被很多团队使用的异常处理最佳实践。</p>
<h3><a class="header-anchor" href="#只针对不正常的情况才使用异常"><span></span></a><a href="#%E5%8F%AA%E9%92%88%E5%AF%B9%E4%B8%8D%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E6%89%8D%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8">#</a> 只针对不正常的情况才使用异常</h3>
<blockquote>
<p>异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。《阿里手册》中：【强制】Java 类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。</p>
</blockquote>
<p>比如，在解析字符串形式的数字时，可能存在数字格式错误，不得通过catch Exception来实现</p>
<ul>
<li>代码1</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">if</span><span style="color:#E06C75"> (obj </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>代码2</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> { </span></span>
<span class="line"><span style="color:#E5C07B">  obj</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">method</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NullPointerException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要原因有三点：</p>
<ul>
<li>异常机制的设计初衷是用于不正常的情况，所以很少会会JVM实现试图对它们的性能进行优化。所以，创建、抛出和捕获异常的开销是很昂贵的。</li>
<li>把代码放在try-catch中返回阻止了JVM实现本来可能要执行的某些特定的优化。</li>
<li>对数组进行遍历的标准模式并不会导致冗余的检查，有些现代的JVM实现会将它们优化掉。</li>
</ul>
<h3><a class="header-anchor" href="#在-finally-块中清理资源或者使用-try-with-resource-语句"><span></span></a><a href="#%E5%9C%A8-finally-%E5%9D%97%E4%B8%AD%E6%B8%85%E7%90%86%E8%B5%84%E6%BA%90%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8-try-with-resource-%E8%AF%AD%E5%8F%A5">#</a> 在 finally 块中清理资源或者使用 try-with-resource 语句</h3>
<p>当使用类似InputStream这种需要使用后关闭的资源时，一个常见的错误就是在try块的最后关闭资源。</p>
<ul>
<li>错误示例</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doNotCloseResourceInTry</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> inputStream </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(</span><span style="color:#98C379">"./tmp.txt"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        inputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // use the inputStream to read a file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // do NOT do this</span></span>
<span class="line"><span style="color:#E5C07B">        inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题就是，只有没有异常抛出的时候，这段代码才可以正常工作。try 代码块内代码会正常执行，并且资源可以正常关闭。但是，使用 try 代码块是有原因的，一般调用一个或多个可能抛出异常的方法，而且，你自己也可能会抛出一个异常，这意味着代码可能不会执行到 try 代码块的最后部分。结果就是，你并没有关闭资源。</p>
<p>所以，你应该把清理工作的代码放到 finally 里去，或者使用 try-with-resource 特性。</p>
<ul>
<li>方法一：使用 finally 代码块</li>
</ul>
<p>与前面几行 try 代码块不同，finally 代码块总是会被执行。不管 try 代码块成功执行之后还是你在 catch 代码块中处理完异常后都会执行。因此，你可以确保你清理了所有打开的资源。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> closeResourceInFinally</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> inputStream </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(</span><span style="color:#98C379">"./tmp.txt"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        inputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // use the inputStream to read a file</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (inputStream </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方法二：Java 7 的 try-with-resource 语法</li>
</ul>
<p>如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> automaticallyCloseResource</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(</span><span style="color:#98C379">"./tmp.txt"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileInputStream</span><span style="color:#E06C75"> inputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // use the inputStream to read a file</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#尽量使用标准的异常"><span></span></a><a href="#%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E7%9A%84%E5%BC%82%E5%B8%B8">#</a> 尽量使用标准的异常</h3>
<blockquote>
<p>代码重用是值得提倡的，这是一条通用规则，异常也不例外。</p>
</blockquote>
<p>重用现有的异常有几个好处：</p>
<ul>
<li>它使得你的API更加易于学习和使用，因为它与程序员原来已经熟悉的习惯用法是一致的。</li>
<li>对于用到这些API的程序而言，它们的可读性更好，因为它们不会充斥着程序员不熟悉的异常。</li>
<li>异常类越少，意味着内存占用越小，并且转载这些类的时间开销也越小。</li>
</ul>
<p>Java标准异常中有几个是经常被使用的异常。如下表格：</p>
<p>| 异常                            | 使用场合                                   |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-exception-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java 基础之泛型机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之泛型机制</source>
      <description>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。本文综合多篇文章后，总结了Java 泛型的...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“<strong>伪泛型</strong>”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“<strong>类型擦除</strong>”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。本文综合多篇文章后，总结了Java 泛型的相关知识，希望可以提升你对Java中泛型的认知效率。</p>
</blockquote>
<ul>
<li>Java 基础之泛型机制
<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BC%95%E5%85%A5%E6%B3%9B%E5%9E%8B">为什么会引入泛型</a></li>
<li>泛型的基本使用
<ul>
<li><a href="#%E6%B3%9B%E5%9E%8B%E7%B1%BB">泛型类</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3">泛型接口</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95">泛型方法</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E9%99%90">泛型的上下限</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84">泛型数组</a></li>
</ul>
</li>
<li>深入理解泛型
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%98%AF%E4%BC%AA%E6%B3%9B%E5%9E%8B%E6%B3%9B%E5%9E%8B%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">如何理解Java中的泛型是伪泛型？泛型中类型擦除</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4%E5%91%A2">如何证明类型的擦除呢？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E5%90%8E%E4%BF%9D%E7%95%99%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B">如何理解类型擦除后保留的原始类型?</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%A3%80%E6%9F%A5">如何理解泛型的编译期检查？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%A4%9A%E6%80%81%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%96%B9%E6%B3%95">如何理解泛型的多态？泛型的桥接方法</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B">如何理解基本类型不能作为泛型类型？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E5%AE%9E%E4%BE%8B%E5%8C%96">如何理解泛型类型不能实例化？</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E8%83%BD%E4%B8%8D%E8%83%BD%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96">泛型数组：能不能采用具体的泛型类型进行初始化？</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B">泛型数组：如何正确的初始化泛型数组实例？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F">如何理解泛型类中的静态方法和静态变量？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%BC%82%E5%B8%B8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B">如何理解异常中使用泛型？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B">如何获取泛型的参数类型？</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#为什么会引入泛型"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BC%95%E5%85%A5%E6%B3%9B%E5%9E%8B">#</a> 为什么会引入泛型</h2>
<blockquote>
<p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>
</blockquote>
<p>引入泛型的意义在于：</p>
<ul>
<li><strong>适用于多种数据类型执行相同的代码</strong>（代码复用）</li>
</ul>
<p>我们通过一个例子来阐述，先看下下面的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (a </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> b));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> float</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">float</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> float</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (a </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> b));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (a </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> b));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Number</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>泛型中的类型在使用时指定，不需要强制类型转换（<strong>类型安全</strong>，编译器会<strong>检查类型</strong>）</li>
</ul>
<p>看下这个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"xxString"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100d</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用上述list中，list中的元素都是Object类型（无法约束其中的类型），所以在取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现<code>java.lang.ClassCastException</code>异常。</p>
<p>引入泛型，它将提供类型的约束，提供编译前的检查：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// list中只能放String, 不能放其它类型的元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#泛型的基本使用"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">#</a> 泛型的基本使用</h2>
<p>提示</p>
<p>我们通过一些例子来学习泛型的使用；泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法。一些例子可以参考《李兴华 - Java实战经典》。</p>
<h3><a class="header-anchor" href="#泛型类"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%B1%BB">#</a> 泛型类</h3>
<ul>
<li>从一个简单的泛型类看起：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">         // 此处可以随便写标识符号，T是type的简称  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // var的类型由T指定，即：由外部指定  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){  </span><span style="color:#7F848E;font-style:italic">// 返回值的类型由外部决定  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> var ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){  </span><span style="color:#7F848E;font-style:italic">// 设置的类型也由外部决定  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo06</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Point</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">p</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;() ;     </span><span style="color:#7F848E;font-style:italic">// 里面的var类型为String类型  </span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"it"</span><span style="color:#ABB2BF">) ;                            </span><span style="color:#7F848E;font-style:italic">// 设置字符串  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getVar</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()) ;   </span><span style="color:#7F848E;font-style:italic">// 取得字符串的长度  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>多元泛型</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Notepad</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">       // 此处指定了两个泛型类型  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // 此变量的类型由外部决定  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">   // 此变量的类型由外部决定  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> K</span><span style="color:#61AFEF"> getKey</span><span style="color:#ABB2BF">(){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF"> ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">(){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF"> ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setKey</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75;font-style:italic"> key</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> key ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">V</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo09</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Notepad</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">t</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF"> ;        </span><span style="color:#7F848E;font-style:italic">// 定义两个泛型类型的对象  </span></span>
<span class="line"><span style="color:#ABB2BF">        t </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Notepad</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;() ;       </span><span style="color:#7F848E;font-style:italic">// 里面的key为String，value为Integer  </span></span>
<span class="line"><span style="color:#E5C07B">        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setKey</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"汤姆"</span><span style="color:#ABB2BF">) ;        </span><span style="color:#7F848E;font-style:italic">// 设置第一个内容  </span></span>
<span class="line"><span style="color:#E5C07B">        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">) ;            </span><span style="color:#7F848E;font-style:italic">// 设置第二个内容  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"姓名；"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getKey</span><span style="color:#ABB2BF">()) ;      </span><span style="color:#7F848E;font-style:italic">// 取得信息  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"，年龄；"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">()) ;       </span><span style="color:#7F848E;font-style:italic">// 取得信息  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型接口"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3">#</a> 泛型接口</h3>
<ul>
<li>简单的泛型接口</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">        // 在接口上定义泛型  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> ;</span><span style="color:#7F848E;font-style:italic"> // 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> InfoImpl</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">   // 定义泛型接口的子类  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 定义属性  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> InfoImpl</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){     </span><span style="color:#7F848E;font-style:italic">// 通过构造方法设置属性内容  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(var) ;    </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF"> ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo24</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> arsg</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;        </span><span style="color:#7F848E;font-style:italic">// 声明接口对象  </span></span>
<span class="line"><span style="color:#ABB2BF">        i </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> InfoImpl</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;(</span><span style="color:#98C379">"汤姆"</span><span style="color:#ABB2BF">) ;  </span><span style="color:#7F848E;font-style:italic">// 通过子类实例化对象  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"内容："</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> i</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getVar</span><span style="color:#ABB2BF">()) ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型方法"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95">#</a> 泛型方法</h3>
<p>泛型方法，是在调用方法的时候指明泛型的具体类型。重点看下泛型的方法（图参考自：https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html）</p>
<ul>
<li>定义泛型方法语法格式</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>调用泛型方法语法格式</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>说明一下，定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型T作为方法的返回值。</p>
<p><code>Class&lt;T&gt;</code>的作用就是指明泛型的具体类型，而<code>Class&lt;T&gt;</code>类型的变量c，可以用来创建泛型类的对象。</p>
<p>为什么要用变量c来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。</p>
<p>泛型方法要求的参数是<code>Class&lt;T&gt;</code>类型，而<code>Class.forName()</code>方法的返回值也是<code>Class&lt;T&gt;</code>，因此可以用<code>Class.forName()</code>作为参数。其中，<code>forName()</code>方法中的参数是何种类型，返回的<code>Class&lt;T&gt;</code>就是何种类型。在本例中，<code>forName()</code>方法中传入的是User类的完整路径，因此返回的是<code>Class&lt;User&gt;</code>类型的对象，因此调用泛型方法时，变量c的类型就是<code>Class&lt;User&gt;</code>，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。</p>
<p>当然，泛型方法不是仅仅可以有一个参数<code>Class&lt;T&gt;</code>，可以根据需要添加其他参数。</p>
<p><strong>为什么要使用泛型方法呢</strong>？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p>
<h3><a class="header-anchor" href="#泛型的上下限"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E9%99%90">#</a> 泛型的上下限</h3>
<ul>
<li><strong>先看下如下的代码，很明显是会报错的</strong> （具体错误原因请参考后文）。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF">{}</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> B</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 如下两个方法不会报错</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funA</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">A</span><span style="color:#E06C75"> a) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...          </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funB</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">B</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#61AFEF">    funA</span><span style="color:#E06C75">(b)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...             </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 如下funD方法会报错</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funC</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listA) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...          </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funD</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">B</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listB) {</span></span>
<span class="line"><span style="color:#61AFEF">    funC</span><span style="color:#E06C75">(listB)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Unresolved compilation problem: The method doPrint(List&lt;A&gt;) in the type test is not applicable for the arguments (List&lt;B&gt;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...             </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如何解决呢？</p>
<p>为了解决泛型中隐含的转换问题，Java泛型加入了类型参数的上下边界机制。<code>&lt;? extends A&gt;</code>表示该类型参数可以是A(上边界)或者A的子类类型。编译时擦除到类型A，即用A类型代替类型参数。这种方法可以解决开始遇到的问题，编译器知道类型参数的范围，如果传入的实例类型B是在这个范围内的话允许转换，这时只要一次类型转换就可以了，运行时会把对象当做A的实例看待。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funC</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listA) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...          </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funD</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">B</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listB) {</span></span>
<span class="line"><span style="color:#61AFEF">    funC</span><span style="color:#E06C75">(listB)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // OK</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...             </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>泛型上下限的引入</strong></li>
</ul>
<p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p>
<p>上限</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Number</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">    // 此处泛型只能是数字类型</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 定义泛型变量</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(){    </span><span style="color:#7F848E;font-style:italic">// 直接打印</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">() ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> demo1</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){</span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;() ;        </span><span style="color:#7F848E;font-style:italic">// 声明Integer的泛型对象</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下限</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 定义泛型变量</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(){    </span><span style="color:#7F848E;font-style:italic">// 直接打印</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">() ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo21</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){</span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;() ;        </span><span style="color:#7F848E;font-style:italic">// 声明String的泛型对象</span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;() ;        </span><span style="color:#7F848E;font-style:italic">// 声明Object的泛型对象</span></span>
<span class="line"><span style="color:#E5C07B">        i1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"hello"</span><span style="color:#ABB2BF">) ;</span></span>
<span class="line"><span style="color:#E5C07B">        i2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">()) ;</span></span>
<span class="line"><span style="color:#61AFEF">        fun</span><span style="color:#ABB2BF">(i1) ;</span></span>
<span class="line"><span style="color:#61AFEF">        fun</span><span style="color:#ABB2BF">(i2) ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fun</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">temp</span><span style="color:#ABB2BF">){    </span><span style="color:#7F848E;font-style:italic">// 只能接收String或Object类型的泛型，String类的父类只有Object类</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(temp </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", "</span><span style="color:#ABB2BF">) ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小结</strong></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> 无限制通配符</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 使用原则《Effictive Java》</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</span></span>
<span class="line"><span style="color:#D19A66">1.</span><span style="color:#E06C75"> 如果参数化类型表示一个 T 的生产者，使用 </span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD"> ?</span><span style="color:#E06C75"> extends T</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#D19A66">2.</span><span style="color:#E06C75"> 如果它表示一个 T 的消费者，就使用 </span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">；</span></span>
<span class="line"><span style="color:#D19A66">3.</span><span style="color:#E06C75"> 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>再看一个实际例子，<strong>加深印象</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#56B6C2">  &lt;</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> extends </span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> E</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> max</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> e1) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (e1 </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //迭代器返回的元素属于 E 的某个子类型</span></span>
<span class="line"><span style="color:#E5C07B">    Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> iterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(result)</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#E06C75">            result </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的类型参数 E 的范围是<code>&lt;E extends Comparable&lt;? super E&gt;&gt;</code>，我们可以分步查看：</p>
<ul>
<li>要进行比较，所以 E 需要是可比较的类，因此需要 <code>extends Comparable&lt;…&gt;</code>（注意这里不要和继承的 <code>extends</code> 搞混了，不一样）</li>
<li><code>Comparable&lt; ? super E&gt;</code> 要对 E 进行比较，即 E 的消费者，所以需要用 super</li>
<li>而参数 <code>List&lt; ? extends E&gt;</code> 表示要操作的数据是 E 的子类的列表，指定上限，这样容器才够大</li>
<li><strong>多个限制</strong></li>
</ul>
<p>使用&amp;符号</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Client</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //工资低于2500元的上斑族并且站立的乘客车票打8折</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Staff</span><span style="color:#61AFEF"> &amp; </span><span style="color:#E5C07B">Passenger</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> discount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> t</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">2500</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isStanding</span><span style="color:#ABB2BF">()){</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"恭喜你！您的车票打八折！"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        discount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Me</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型数组"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84">#</a> 泛型数组</h3>
<blockquote>
<p>具体可以参考下文中关于泛型数组的理解。</p>
</blockquote>
<p>首先，我们泛型数组相关的申明：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list11 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list12 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，需要强转类型 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list13 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">String</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[]) </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list14 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list15 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list6 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么通常我们如何用呢？</p>
<ul>
<li>讨巧的使用场景</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo30</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Integer</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">[] </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> fun1</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">6</span><span style="color:#ABB2BF">) ;   </span><span style="color:#7F848E;font-style:italic">// 返回泛型数组  </span></span>
<span class="line"><span style="color:#61AFEF">        fun2</span><span style="color:#ABB2BF">(i) ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF">[] fun1</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">...</span><span style="color:#E06C75;font-style:italic">arg</span><span style="color:#ABB2BF">){  </span><span style="color:#7F848E;font-style:italic">// 接收可变参数  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> arg ;            </span><span style="color:#7F848E;font-style:italic">// 返回泛型数组  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fun2</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> param</span><span style="color:#ABB2BF">[]){   </span><span style="color:#7F848E;font-style:italic">// 输出  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"接收泛型数组："</span><span style="color:#ABB2BF">) ;  </span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> t</span><span style="color:#C678DD">:</span><span style="color:#ABB2BF">param){  </span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(t </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "、"</span><span style="color:#ABB2BF">) ;  </span></span>
<span class="line"><span style="color:#ABB2BF">        }  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>合理使用</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ArrayWithTypeToken</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> type</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size) {</span></span>
<span class="line"><span style="color:#E06C75">    array </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">T</span><span style="color:#E06C75">[]) </span><span style="color:#E5C07B">Array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(type, size);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体可以查看后文解释。</p>
<h2><a class="header-anchor" href="#深入理解泛型"><span></span></a><a href="#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">#</a> 深入理解泛型</h2>
<p>提示</p>
<p>我们通过泛型背后的类型擦除以及相关的问题来进一步理解泛型。</p>
<h3><a class="header-anchor" href="#如何理解java中的泛型是伪泛型-泛型中类型擦除"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%98%AF%E4%BC%AA%E6%B3%9B%E5%9E%8B-%E6%B3%9B%E5%9E%8B%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">#</a> 如何理解Java中的泛型是伪泛型？泛型中类型擦除</h3>
<blockquote>
<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“<strong>伪泛型</strong>”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“<strong>类型擦除</strong>”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。理解类型擦除对于用好泛型是很有帮助的，尤其是一些看起来“疑难杂症”的问题，弄明白了类型擦除也就迎刃而解了。</p>
</blockquote>
<p><strong>泛型的类型擦除原则</strong>是：</p>
<ul>
<li>消除类型参数声明，即删除<code>&lt;&gt;</code>及其包围的部分。</li>
<li>根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。</li>
<li>为了保证类型安全，必要时插入强制类型转换代码。</li>
<li>自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。</li>
</ul>
<p><strong>那么如何进行擦除的呢</strong>？</p>
<p>参考自：http://softlab.sdut.edu.cn/blog/subaochen/2017/01/generics-type-erasure/</p>
<ul>
<li>擦除类定义中的类型参数 - 无限制类型擦除</li>
</ul>
<p>当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<code>&lt;T&gt;</code>和<code>&lt;?&gt;</code>的类型参数都被替换为Object。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>擦除类定义中的类型参数 - 有限制类型擦除</li>
</ul>
<p>当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<code>&lt;T extends Number&gt;</code>和<code>&lt;? extends Number&gt;</code>的类型参数被替换为<code>Number</code>，<code>&lt;? super Number&gt;</code>被替换为Object。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>擦除方法定义中的类型参数</li>
</ul>
<p>擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的，这里仅以擦除方法定义中的有限制类型参数为例。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#如何证明类型的擦除呢"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4%E5%91%A2">#</a> 如何证明类型的擦除呢？</h3>
<blockquote>
<p>我们通过两个例子证明Java类型的类型擦除</p>
</blockquote>
<ul>
<li>原始类型相等</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">        list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"abc"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">        list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">123</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">// true</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了两个ArrayList数组，不过一个是<code>ArrayList&lt;String&gt;</code>泛型类型的，只能存储字符串；一个是<code>ArrayList&lt;Integer&gt;</code>泛型类型的，只能存储整数，最后，我们通过list1对象和list2对象的<code>getClass()</code>方法获取他们的类的信息，最后发现结果为true。说明泛型类型String和Integer都被擦除掉了，只剩下原始类型。</p>
<ul>
<li>通过反射添加其它类型元素</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);  </span><span style="color:#7F848E;font-style:italic">//这样调用 add 方法只能存储整形，因为泛型类型的实例为 Integer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"add"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(list, </span><span style="color:#98C379">"asd"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); i++) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(i));</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序中定义了一个<code>ArrayList</code>泛型类型实例化为<code>Integer</code>对象，如果直接调用<code>add()</code>方法，那么只能存储整数数据，不过当我们利用反射调用<code>add()</code>方法的时候，却可以存储字符串，这说明了<code>Integer</code>泛型实例在编译之后被擦除掉了，只保留了原始类型。</p>
<h3><a class="header-anchor" href="#如何理解类型擦除后保留的原始类型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E5%90%8E%E4%BF%9D%E7%95%99%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B">#</a> 如何理解类型擦除后保留的原始类型?</h3>
<blockquote>
<p>在上面，两次提到了原始类型，什么是原始类型？</p>
</blockquote>
<p><strong>原始类型</strong> 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用Object）替换。</p>
<ul>
<li>原始类型Object</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic">  value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pair的原始类型为:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic">  value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在<code>Pair&lt;T&gt;</code>中，<code>T</code> 是一个无限定的类型变量，所以用Object替换，其结果就是一个普通的类，如同泛型加入Java语言之前的已经实现的样子。在程序中可以包含不同类型的Pair，如<code>Pair&lt;String&gt;</code>或<code>Pair&lt;Integer&gt;</code>，但是擦除类型后他们的就成为原始的Pair类型了，原始类型都是Object。</p>
<p>从上面章节，我们也可以明白ArrayList被擦除类型后，原始类型也变为Object，所以通过反射我们就可以存储字符串了。</p>
<p>如果类型变量有限定，那么原始类型就用第一个边界的类型变量类替换。</p>
<p>比如: Pair这样声明的话</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Comparable</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么原始类型就是Comparable。</p>
<p>要区分原始类型和泛型变量的类型。</p>
<p>在调用泛型方法时，可以指定泛型，也可以不指定泛型:</p>
<ul>
<li>在不指定泛型的情况下，泛型变量的类型为该方法中的几种类型的同一父类的最小级，直到Object</li>
<li>在指定泛型的情况下，该方法的几种类型必须是该泛型的实例的类型或者其子类</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /**不指定泛型的时候*/</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//这两个参数都是Integer，所以T为Integer类型  </span></span>
<span class="line"><span style="color:#E5C07B">        Number</span><span style="color:#E06C75"> f</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1.2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//这两个参数一个是Integer，一个是Float，所以取同一父类的最小级，为Number  </span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> o</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"asd"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//这两个参数一个是Integer，一个是String，所以取同一父类的最小级，为Object  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /**指定泛型的时候*/</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> Test.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Integer</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//指定了Integer，所以只能为Integer类型或者其子类  </span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> Test.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Integer</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2.2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译错误，指定了Integer，不能为Float  </span></span>
<span class="line"><span style="color:#E5C07B">        Number</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> Test.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Number</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2.2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//指定为Number，所以可以为Integer和Float  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //这是一个简单的泛型方法  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> y;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型为Object，就比如ArrayList中，如果不指定泛型，那么这个ArrayList可以存储任意的对象。</p>
<ul>
<li>Object泛型</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {  </span></span>
<span class="line"><span style="color:#E5C07B">    ArrayList</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"121"</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#如何理解泛型的编译期检查"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%A3%80%E6%9F%A5">#</a> 如何理解泛型的编译期检查？</h3>
<blockquote>
<p>既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量String会在编译的时候变为Object类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</p>
</blockquote>
<p>Java编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。</p>
<p>例如：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD">  void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"123"</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">123</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//编译错误  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的程序中，使用add方法添加一个整型，在IDE中，直接会报错，说明这就是在编译之前的检查，因为如果是在编译之后检查，类型擦除后，原始类型为Object，是应该允许任意引用类型添加的。可实际上却不是这样的，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</p>
<p>那么，<strong>这个类型检查是针对谁的呢</strong>？我们先看看参数化类型和原始类型的兼容。</p>
<p>以 ArrayList举例子，以前的写法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在的写法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //第一种 情况</span></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //第二种 情况</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样是没有错误的，不过会有个编译时警告。</p>
<p>不过在第一种情况，可以实现与完全使用泛型参数一样的效果，第二种则没有效果。</p>
<p>因为类型检查就是编译时完成的，new ArrayList()只是在内存中开辟了一个存储空间，可以存储任何类型对象，而真正涉及类型检查的是它的引用，因为我们是使用它引用list1来调用它的方法，比如说调用add方法，所以list1引用能完成泛型类型的检查。而引用list2没有使用泛型，所以不行。</p>
<p>举例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#E5C07B">        list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#E5C07B">        list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译错误  </span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> str1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//返回类型就是String  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#E06C75"> list2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;();  </span></span>
<span class="line"><span style="color:#E5C07B">        list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#E5C07B">        list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> object</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//返回类型就是Object  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"11"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">22</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译错误  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> str2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//返回类型就是String  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的例子，我们可以明白，<strong>类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象</strong>。</p>
<p><strong>泛型中参数话类型为什么不考虑继承关系</strong>？</p>
<p>在Java中，像下面形式的引用传递是不允许的:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误  </span></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>我们先看第一种情况，将第一种情况拓展成下面的形式：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> list1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，在第4行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用list2引用用get()方法取值的时候，返回的都是String类型的对象（上面提到了，类型检测是根据引用来决定的），可是它里面实际上已经被我们存放了Object类型的对象，这样就会有<code>ClassCastException</code>了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。（这也是泛型出现的原因，就是为了解决类型转换的问题，我们不能违背它的初衷）。</p>
<ul>
<li>再看第二种情况，将第二种情况拓展成下面的形式：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> list1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，这样的情况比第一种情况好的多，最起码，在我们用list2取值的时候不会出现ClassCastException，因为是从String转换为Object。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。</p>
<p>我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。再说，你如果又用list2往里面add()新的对象，那么到时候取得时候，我怎么知道我取出来的到底是String类型的，还是Object类型的呢？</p>
<p>所以，要格外注意，泛型中的引用传递的问题。</p>
<h3><a class="header-anchor" href="#如何理解泛型的多态-泛型的桥接方法"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%A4%9A%E6%80%81-%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%96%B9%E6%B3%95">#</a> 如何理解泛型的多态？泛型的桥接方法</h3>
<blockquote>
<p>类型擦除会造成多态的冲突，而JVM解决方法就是桥接方法。</p>
</blockquote>
<p>现在有这样一个泛型类：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们想要一个子类继承它。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> DateInter</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Date</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(value);  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个子类中，我们设定父类的泛型类型为<code>Pair&lt;Date&gt;</code>，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：将父类的泛型类型限定为Date，那么父类里面的两个方法的参数都为Date类型。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75"> value) {  </span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的<code>@Override</code>标签中也可以看到，一点问题也没有，实际上是这样的吗？</p>
<p>分析：实际上，类型擦除后，父类的的泛型类型全部变为了原始类型Object，所以父类编译之后会变成下面的样子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic">  value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看子类的两个重写的方法的类型：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75"> value) {  </span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(value);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来分析setValue方法，父类的类型是Object，而子类的类型是Date，参数类型不一样，这如果实在普通的继承关系中，根本就不会是重写，而是重载。 我们在一个main方法测试一下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws ClassNotFoundException {  </span></span>
<span class="line"><span style="color:#E5C07B">        DateInter</span><span style="color:#E06C75"> dateInter </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DateInter</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">        dateInter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">                  </span></span>
<span class="line"><span style="color:#E5C07B">        dateInter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic"> //编译错误  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是重载，那么子类中两个setValue方法，一个是参数Object类型，一个是Date类型，可是我们发现，根本就没有这样的一个子类继承自父类的Object类型参数的方法。所以说，却是是重写了，而不是重载了。</p>
<p><strong>为什么会这样呢</strong>？</p>
<p>原因是这样的，我们传入父类的泛型类型是Date，<code>Pair&lt;Date&gt;</code>，我们的本意是将泛型类变为如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Date</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再子类中重写参数类型为Date的那两个方法，实现继承中的多态。</p>
<p>可是由于种种原因，虚拟机并不能将泛型类型变为Date，只能将类型擦除掉，变为原始类型Object。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM知道你的本意吗？知道！！！可是它能直接实现吗，不能！！！如果真的不能的话，那我们怎么去重写我们想要的Date类型参数的方法啊。</p>
<blockquote>
<p>于是JVM采用了一个特殊的方法，来完成这项功能，那就是桥方法。</p>
</blockquote>
<p>首先，我们用javap -c className的方式反编译下DateInter子类的字节码，结果如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.tao.test.DateInter </span><span style="color:#C678DD">extends</span><span style="color:#E06C75"> com.tao.test.</span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Date</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#61AFEF">  com.tao.test.DateInter</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokespecial #</span><span style="color:#D19A66">8</span><span style="color:#7F848E;font-style:italic">                  // Method com/tao/test/Pair."&lt;init&gt;":()V  </span></span>
<span class="line"><span style="color:#D19A66">       4</span><span style="color:#C678DD">:</span><span style="color:#C678DD"> return</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">java</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">util</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">Date</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  //我们重写的setValue方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_1  </span></span>
<span class="line"><span style="color:#D19A66">       2</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokespecial #</span><span style="color:#D19A66">16</span><span style="color:#7F848E;font-style:italic">                 // Method com/tao/test/Pair.setValue:(Ljava/lang/Object;)V  </span></span>
<span class="line"><span style="color:#D19A66">       5</span><span style="color:#C678DD">:</span><span style="color:#C678DD"> return</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">    //我们重写的getValue方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokespecial #</span><span style="color:#D19A66">23</span><span style="color:#7F848E;font-style:italic">                 // Method com/tao/test/Pair.getValue:()Ljava/lang/Object;  </span></span>
<span class="line"><span style="color:#D19A66">       4</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> checkcast     #</span><span style="color:#D19A66">26</span><span style="color:#7F848E;font-style:italic">                 // class java/util/Date  </span></span>
<span class="line"><span style="color:#D19A66">       7</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> areturn  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">     //编译时由编译器生成的桥方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokevirtual #</span><span style="color:#D19A66">28</span><span style="color:#7F848E;font-style:italic">                 // Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法;  </span></span>
<span class="line"><span style="color:#D19A66">       4</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> areturn  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">java</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">Object</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   //编译时由编译器生成的桥方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_1  </span></span>
<span class="line"><span style="color:#D19A66">       2</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> checkcast     #</span><span style="color:#D19A66">26</span><span style="color:#7F848E;font-style:italic">                 // class java/util/Date  </span></span>
<span class="line"><span style="color:#D19A66">       5</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokevirtual #</span><span style="color:#D19A66">30</span><span style="color:#7F848E;font-style:italic">                 // Method setValue:(Ljava/util/Date; 去调用我们重写的setValue方法)V  </span></span>
<span class="line"><span style="color:#D19A66">       8</span><span style="color:#C678DD">:</span><span style="color:#C678DD"> return</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从编译的结果来看，我们本意重写setValue和getValue方法的子类，竟然有4个方法，其实不用惊奇，最后的两个方法，就是编译器自己生成的桥方法。可以看到桥方法的参数类型都是Object，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的setvalue和getValue方法上面的@Oveerride只不过是假象。而桥方法的内部实现，就只是去调用我们自己重写的那两个方法。</p>
<p>所以，虚拟机巧妙的使用了桥方法，来解决了类型擦除和多态的冲突。</p>
<p>不过，要提到一点，这里面的setValue和getValue这两个桥方法的意义又有不同。</p>
<p>setValue方法是为了解决类型擦除与多态之间的冲突。</p>
<p>而getValue却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：</p>
<p>那么父类的getValue方法如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而子类重写的方法是：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这在普通的类继承中也是普遍存在的重写，这就是协变。</p>
<p>并且，还有一点也许会有疑问，子类中的桥方法<code>Object getValue()</code>和<code>Date getValue()</code>是同时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写Java代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。</p>
<h3><a class="header-anchor" href="#如何理解基本类型不能作为泛型类型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B">#</a> 如何理解基本类型不能作为泛型类型？</h3>
<blockquote>
<p>比如，我们没有<code>ArrayList&lt;int&gt;</code>，只有<code>ArrayList&lt;Integer&gt;</code>, 为何？</p>
</blockquote>
<p>因为当类型擦除后，ArrayList的原始类型变为Object，但是Object类型不能存储int值，只能引用Integer的值。</p>
<p>另外需要注意，我们能够使用<code>list.add(1)</code>是因为Java基础类型的自动装箱拆箱操作。</p>
<h3><a class="header-anchor" href="#如何理解泛型类型不能实例化"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E5%AE%9E%E4%BE%8B%E5%8C%96">#</a> 如何理解泛型类型不能实例化？</h3>
<blockquote>
<p>不能实例化泛型类型, 这本质上是由于类型擦除决定的：</p>
</blockquote>
<p>我们可以看到如下代码会在编译器中报错：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">T</span><span style="color:#E06C75"> test </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> T</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // ERROR</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件，所以自然就不行了，此外由于<code>T</code> 被擦除为 <code>Object</code>，如果可以 <code>new T()</code> 则就变成了 <code>new Object()</code>，失去了本意。   如果我们确实需要实例化一个泛型，应该如何做呢？可以通过反射实现：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> newTclass</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75"> T </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> clazz) throws InstantiationException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IllegalAccessException {</span></span>
<span class="line"><span style="color:#E5C07B">    T</span><span style="color:#E06C75"> obj </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> clazz</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> obj</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型数组-能不能采用具体的泛型类型进行初始化"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84-%E8%83%BD%E4%B8%8D%E8%83%BD%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 泛型数组：能不能采用具体的泛型类型进行初始化？</h3>
<p>我们先来看下Oracle官网提供的一个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] lsa </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Not really allowed.</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lsa</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[] oa </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[]) o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> li </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">li</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">oa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> li</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Unsound, but passes run time store check</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lsa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // Run-time error ClassCastException.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 JVM 泛型的擦除机制，所以上面代码可以给 <code>oa[1]</code> 赋值为 ArrayList 也不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现 <code>ClassCastException</code>，如果可以进行泛型数组的声明则上面说的这种情况在编译期不会出现任何警告和错误，只有在运行时才会出错，但是泛型的出现就是为了消灭 <code>ClassCastException</code>，所以如果 Java 支持泛型数组初始化操作就是搬起石头砸自己的脚。</p>
<p>而对于下面的代码来说是成立的：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] lsa </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // OK, array of unbounded wildcard type.</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lsa</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[] oa </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[]) o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> li </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">li</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">oa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> li</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Correct.</span></span>
<span class="line"><span style="color:#E5C07B">Integer</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Integer) lsa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // OK</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以说采用通配符的方式初始化泛型数组是允许的，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。综述就是说Java 的泛型数组初始化时数组类型不能是具体的泛型类型，只能是通配符的形式，因为具体类型会导致可存入任意类型对象，在取出时会发生类型转换异常，会与泛型的设计思想冲突，而通配符形式本来就需要自己强转，符合预期。</p>
<p>Oracle 官方文档：<a href="https://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html在新窗口打开</a></p>
<p>更进一步的，我们看看如下的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list11 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list12 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，需要强转类型 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list13 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">String</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[]) </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list14 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list15 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list6 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在 Java 中是不能创建一个确切的泛型类型的数组的，除非是采用通配符的方式且要做显式类型转换才可以。</p>
<h3><a class="header-anchor" href="#泛型数组-如何正确的初始化泛型数组实例"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B">#</a> 泛型数组：如何正确的初始化泛型数组实例？</h3>
<blockquote>
<p>这个无论我们通过<code>new ArrayList[10]</code> 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，因此那些方式初始化泛型数组都不是最优雅的方式。</p>
</blockquote>
<p>我们在使用到泛型数组的场景下应该尽量使用列表集合替换，此外也可以通过使用 <code>java.lang.reflect.Array.newInstance(Class&lt;T&gt; componentType, int length)</code> 方法来创建一个具有指定类型和维度的数组，如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ArrayWithTypeToken</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75">[] array</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayWithTypeToken</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">type</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        array </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">[]) </span><span style="color:#E5C07B">Array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(type, size);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> put</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> item</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        array[index] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> item;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> get</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> array[index];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF">[] create</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> array;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">ArrayWithTypeToken</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> arrayToken </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayWithTypeToken</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 100</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Integer</span><span style="color:#E06C75">[] array </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> arrayToken</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以使用反射来初始化泛型数组算是优雅实现，因为泛型类型 <code>T</code>在运行时才能被确定下来，我们能创建泛型数组也必然是在 Java 运行时想办法，而运行时能起作用的技术最好的就是反射了。</p>
<h3><a class="header-anchor" href="#如何理解泛型类中的静态方法和静态变量"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F">#</a> 如何理解泛型类中的静态方法和静态变量？</h3>
<blockquote>
<p>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数</p>
</blockquote>
<p>举例说明：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test2</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> one</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">   //编译错误    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B">  T</span><span style="color:#61AFEF"> show</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> one</span><span style="color:#ABB2BF">){ </span><span style="color:#7F848E;font-style:italic">//编译错误    </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;    </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</p>
<p>但是要注意区分下面的一种情况：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test2</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF"> &gt;</span><span style="color:#E5C07B">T</span><span style="color:#61AFEF"> show</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> one</span><span style="color:#ABB2BF">){ </span><span style="color:#7F848E;font-style:italic">//这是正确的    </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;    </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的 T，而不是泛型类中的T。</p>
<h3><a class="header-anchor" href="#如何理解异常中使用泛型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%BC%82%E5%B8%B8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B">#</a> 如何理解异常中使用泛型？</h3>
<ul>
<li><strong>不能抛出也不能捕获泛型类的对象</strong>。事实上，泛型类扩展Throwable都不合法。例如：下面的定义将不会通过编译：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Problem</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么不能扩展Throwable，因为异常都是在运行时捕获和抛出的，而在编译的时候，泛型信息全都会被擦除掉，那么，假设上面的编译可行，那么，在看下面的定义：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Integer</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e1</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Number</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e2</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型信息被擦除后，那么两个地方的catch都变为原始类型Object，那么也就是说，这两个地方的catch变的一模一样,就相当于下面的这样</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Object</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e1</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Object</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e2</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个当然就是不行的。</p>
<ul>
<li><strong>不能再catch子句中使用泛型变量</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> t) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">//编译错误</span></span>
<span class="line"><span style="color:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为泛型信息在编译的时候已经变为原始类型，也就是说上面的T会变为原始类型Throwable，那么如果可以再catch子句中使用泛型变量，那么，下面的定义呢：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> t){</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">//编译错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">IndexOutOfBounds</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }                         </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据异常捕获的原则，一定是子类在前面，父类在后面，那么上面就违背了这个原则。即使你在使用该静态方法的使用T是<code>ArrayIndexOutofBounds</code>，在编译之后还是会变成Throwable，<code>ArrayIndexOutofBounds</code>是IndexOutofBounds的子类，违背了异常捕获的原则。所以java为了避免这样的情况，禁止在catch子句中使用泛型变量。</p>
<ul>
<li>但是在异常声明中可以使用类型变量。下面方法是合法的。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> t) throws T {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75">{</span></span>
<span class="line"><span style="color:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> realCause</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">initCause</span><span style="color:#ABB2BF">(realCause);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的这样使用是没问题的。</p>
<h3><a class="header-anchor" href="#如何获取泛型的参数类型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B">#</a> 如何获取泛型的参数类型？</h3>
<blockquote>
<p>既然类型被擦除了，那么如何获取泛型的参数类型呢？可以通过反射（<code>java.lang.reflect.Type</code>）获取泛型</p>
</blockquote>
<p><code>java.lang.reflect.Type</code>是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 以上这些类型都实现Type接口。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericType</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> data</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getData</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> data;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setData</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> data</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">data</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> data;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        GenericType</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">genericType</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> GenericType</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;() {};</span></span>
<span class="line"><span style="color:#E5C07B">        Type</span><span style="color:#E06C75"> superclass</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> genericType</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getGenericSuperclass</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //getActualTypeArguments 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span></span>
<span class="line"><span style="color:#E5C07B">        Type</span><span style="color:#E06C75"> type</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> ((ParameterizedType) superclass).</span><span style="color:#61AFEF">getActualTypeArguments</span><span style="color:#ABB2BF">()[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]; </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(type);</span><span style="color:#7F848E;font-style:italic">//class java.lang.String</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>ParameterizedType</code>:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> ParameterizedType</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Type</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span></span>
<span class="line"><span style="color:#E5C07B">    Type</span><span style="color:#61AFEF">[] getActualTypeArguments</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //返回当前class或interface声明的类型, 如List&lt;?&gt;返回List</span></span>
<span class="line"><span style="color:#E5C07B">    Type</span><span style="color:#61AFEF"> getRawType</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //返回所属类型. 如,当前类型为O&lt;T&gt;.I&lt;S&gt;, 则返回O&lt;T&gt;. 顶级类型将返回null </span></span>
<span class="line"><span style="color:#E5C07B">    Type</span><span style="color:#61AFEF"> getOwnerType</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-4.png" type="image/png"/>
    </item>
    <item>
      <title>Java 基础之注解机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之注解机制</source>
      <description>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。 Java 基础之注解机制 注解基础 Java内置注解 内置注解 - @Override 内置注解 - @Deprecated 内置注解 - @SuppressWarnings 元注解 元注解 - @...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p>
</blockquote>
<ul>
<li>Java 基础之注解机制
<ul>
<li>注解基础
<ul>
<li>Java内置注解
<ul>
<li>[内置注解 - @Override](#内置注解</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java 基础之面向对象</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之面向对象</source>
      <description>Java 基础之面向对象 本文主要介绍Java OOP 面向对象基础和相关类图。 Java 基础 - 面向对象 三大特性 封装 继承 多态 类图 泛化关系 (Generalization) 实现关系 (Realization) 聚合关系 (Aggregation) 组合关系 (Composition) 关联关系 (Association) 依赖关系 (...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 17:46:59 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>本文主要介绍Java OOP 面向对象基础和相关类图。</p>
</blockquote>
<ul>
<li>Java 基础 - 面向对象
<ul>
<li>三大特性
<ul>
<li><a href="#%E5%B0%81%E8%A3%85">封装</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
<li><a href="#%E5%A4%9A%E6%80%81">多态</a></li>
</ul>
</li>
<li>类图
<ul>
<li><a href="#%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB-generalization">泛化关系 (Generalization)</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB-realization">实现关系 (Realization)</a></li>
<li><a href="#%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB-aggregation">聚合关系 (Aggregation)</a></li>
<li><a href="#%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB-composition">组合关系 (Composition)</a></li>
<li><a href="#%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB-association">关联关系 (Association)</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-dependency">依赖关系 (Dependency)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 中的CAS, Unsafe和原子类解析</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E4%B8%AD%E7%9A%84CAS_%20Unsafe%E5%92%8C%E5%8E%9F%E5%AD%90%E7%B1%BB%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E4%B8%AD%E7%9A%84CAS_%20Unsafe%E5%92%8C%E5%8E%9F%E5%AD%90%E7%B1%BB%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 中的CAS, Unsafe和原子类解析</source>
      <description>JUC中多数类是通过volatile和CAS来实现的，CAS本质上提供的是一种无锁方案，而Synchronized和Lock是互斥锁方案; java原子类本质上使用的是CAS，而CAS底层是通过Unsafe类实现的。所以本章将对CAS, Unsafe和原子类详解。 JUC 中的CAS, Unsafe和原子类解析 带着BAT大厂的面试问题去理解 CAS ...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>JUC中多数类是通过volatile和CAS来实现的，CAS本质上提供的是一种无锁方案，而Synchronized和Lock是互斥锁方案; java原子类本质上使用的是CAS，而CAS底层是通过Unsafe类实现的。所以本章将对CAS, Unsafe和原子类详解。</p>
</blockquote>
<ul>
<li>JUC 中的CAS, Unsafe和原子类解析
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>CAS
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFcas">什么是CAS</a></li>
<li><a href="#cas%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">CAS使用示例</a></li>
<li>CAS 问题
<ul>
<li><a href="#aba%E9%97%AE%E9%A2%98">ABA问题</a></li>
<li><a href="#%E5%BE%AA%E7%8E%AF%E6%97%B6%E9%97%B4%E9%95%BF%E5%BC%80%E9%94%80%E5%A4%A7">循环时间长开销大</a></li>
<li><a href="#%E5%8F%AA%E8%83%BD%E4%BF%9D%E8%AF%81%E4%B8%80%E4%B8%AA%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C">只能保证一个共享变量的原子操作</a></li>
</ul>
</li>
</ul>
</li>
<li>UnSafe类详解
<ul>
<li><a href="#unsafe%E4%B8%8Ecas">Unsafe与CAS</a></li>
<li><a href="#unsafe%E5%BA%95%E5%B1%82">Unsafe底层</a></li>
<li><a href="#unsafe%E5%85%B6%E5%AE%83%E5%8A%9F%E8%83%BD">Unsafe其它功能</a></li>
</ul>
</li>
<li>AtomicInteger
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B">使用举例</a></li>
<li><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">源码解析</a></li>
</ul>
</li>
<li>延伸到所有原子类：共13个
<ul>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">原子更新基本类型</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84">原子更新数组</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">原子更新引用类型</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E7%B1%BB">原子更新字段类</a></li>
</ul>
</li>
<li>再讲讲AtomicStampedReference解决CAS的ABA问题
<ul>
<li><a href="#atomicstampedreference%E8%A7%A3%E5%86%B3aba%E9%97%AE%E9%A2%98">AtomicStampedReference解决ABA问题</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B-1">使用举例</a></li>
<li><a href="#java%E4%B8%AD%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3aba%E7%9A%84%E9%97%AE%E9%A2%98">java中还有哪些类可以解决ABA的问题? </a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>线程安全的实现方法有哪些?</li>
<li>什么是CAS?</li>
<li>CAS使用示例，结合AtomicInteger给出示例?</li>
<li>CAS会有哪些问题?</li>
<li>针对这这些问题，Java提供了哪几个解决的?</li>
<li>AtomicInteger底层实现? CAS+volatile</li>
<li>请阐述你对Unsafe类的理解?</li>
<li>说说你对Java原子类的理解? 包含13个，4组分类，说说作用和使用场景。</li>
<li>AtomicStampedReference是什么?</li>
<li>AtomicStampedReference是怎么解决ABA的? 内部使用Pair来存储元素值及其版本号</li>
<li>java中还有哪些类可以解决ABA的问题? AtomicMarkableReference</li>
</ul>
<h2><a class="header-anchor" href="#cas"><span></span></a><a href="#cas">#</a> CAS</h2>
<p>前面我们说到，线程安全的实现方法包含:</p>
<ul>
<li>互斥同步: synchronized 和 ReentrantLock</li>
<li>非阻塞同步: CAS, AtomicXXXX</li>
<li>无同步方案: 栈封闭，Thread Local，可重入代码</li>
</ul>
<p>具体可以参看：<a href="">线程安全的实现方法</a>，这里我们将对CAS重点阐释。</p>
<h3><a class="header-anchor" href="#什么是cas"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AFcas">#</a> 什么是CAS</h3>
<p>CAS的全称为Compare-And-Swap，直译就是对比交换。是一条CPU的原子指令，其作用是让CPU先进行比较两个值是否相等，然后原子地更新某个位置的值，经过调查发现，其实现方式是基于硬件平台的汇编指令，就是说CAS是靠硬件实现的，JVM只是封装了汇编调用，那些AtomicInteger类便是使用了这些封装后的接口。   简单解释：CAS操作需要输入两个数值，一个旧值(期望操作前的值)和一个新值，在操作期间先比较下在旧值有没有发生变化，如果没有发生变化，才交换成新值，发生了变化则不交换。</p>
<p>CAS操作是原子性的，所以多线程并发使用CAS更新数据时，可以不使用锁。JDK中大量使用了CAS来更新数据而防止加锁(synchronized 重量级锁)来保持原子更新。</p>
<p>相信sql大家都熟悉，类似sql中的条件更新一样：update set id=3 from table where id=2。因为单条sql执行具有原子性，如果有多个线程同时执行此sql语句，只有一条能更新成功。</p>
<h3><a class="header-anchor" href="#cas使用示例"><span></span></a><a href="#cas%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">#</a> CAS使用示例</h3>
<p>如果不使用CAS，在高并发下，多线程同时修改一个变量的值我们需要synchronized加锁(可能有人说可以用Lock加锁，Lock底层的AQS也是基于CAS进行获取锁的)。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> i++;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java中为我们提供了AtomicInteger 原子类(底层基于CAS进行更新数据的)，不需要加锁就在多线程并发场景下实现数据的一致性。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B">  AtomicInteger</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicInteger</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> i</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAndGet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#cas-问题"><span></span></a><a href="#cas-%E9%97%AE%E9%A2%98">#</a> CAS 问题</h3>
<p>CAS 方式为乐观锁，synchronized 为悲观锁。因此使用 CAS 解决并发问题通常情况下性能更优。</p>
<p>但使用 CAS 方式也会有几个问题：</p>
<h4><a class="header-anchor" href="#aba问题"><span></span></a><a href="#aba%E9%97%AE%E9%A2%98">#</a> ABA问题</h4>
<p>因为CAS需要在操作值的时候，检查值有没有发生变化，比如没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了。</p>
<p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;A就会变成1A-&gt;2B-&gt;3A。</p>
<p>从Java 1.5开始，JDK的Atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>
<h4><a class="header-anchor" href="#循环时间长开销大"><span></span></a><a href="#%E5%BE%AA%E7%8E%AF%E6%97%B6%E9%97%B4%E9%95%BF%E5%BC%80%E9%94%80%E5%A4%A7">#</a> 循环时间长开销大</h4>
<p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause指令有两个作用：第一，它可以延迟流水线执行命令(de-pipeline)，使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突(Memory Order Violation)而引起CPU流水线被清空(CPU Pipeline Flush)，从而提高CPU的执行效率。</p>
<h4><a class="header-anchor" href="#只能保证一个共享变量的原子操作"><span></span></a><a href="#%E5%8F%AA%E8%83%BD%E4%BF%9D%E8%AF%81%E4%B8%80%E4%B8%AA%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C">#</a> 只能保证一个共享变量的原子操作</h4>
<p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p>
<p>还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如，有两个共享变量i = 2，j = a，合并一下ij = 2a，然后用CAS来操作ij。</p>
<p>从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p>
<h2><a class="header-anchor" href="#unsafe类详解"><span></span></a><a href="#unsafe%E7%B1%BB%E8%AF%A6%E8%A7%A3">#</a> UnSafe类详解</h2>
<blockquote>
<p>上文我们了解到Java原子类是通过UnSafe类实现的，这节主要分析下UnSafe类。UnSafe类在J.U.C中CAS操作有很广泛的应用。</p>
</blockquote>
<p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p>
<p>这个类尽管里面的方法都是 public 的，但是并没有办法使用它们，JDK API 文档也没有提供任何关于这个类的方法的解释。总而言之，对于 Unsafe 类的使用都是受限制的，只有授信的代码才能获得该类的实例，当然 JDK 库里面的类是可以随意使用的。</p>
<p>先来看下这张图，对UnSafe类总体功能：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-atomicinteger-unsafe.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类，下面将对其相关方法和应用场景进行详细介绍。</p>
<h3><a class="header-anchor" href="#unsafe与cas"><span></span></a><a href="#unsafe%E4%B8%8Ecas">#</a> Unsafe与CAS</h3>
<p>反编译出来的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAddInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getIntVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> paramInt))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> getAndAddLong</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      l </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getLongVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> paramLong2))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndSetInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getIntVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramInt))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> getAndSetLong</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      l </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getLongVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong2))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getAndSetObject</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> paramObject2)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#E5C07B">    Object</span><span style="color:#E06C75"> localObject</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      localObject </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getObjectVolatile</span><span style="color:#E06C75">(paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#E06C75">(paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> localObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramObject2))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> localObject</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中发现，内部使用自旋的方式进行CAS更新(while循环进行CAS更新，如果更新失败，则循环再次重试)。</p>
<p>又从Unsafe类中发现，原子操作其实只支持下面三个方法。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSwapObject</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> paramObject2</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> paramObject3)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSwapInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt2)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSwapLong</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong3)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现Unsafe只提供了3种CAS方法：compareAndSwapObject、compareAndSwapInt和compareAndSwapLong。都是native方法。</p>
<h3><a class="header-anchor" href="#unsafe底层"><span></span></a><a href="#unsafe%E5%BA%95%E5%B1%82">#</a> Unsafe底层</h3>
<p>不妨再看看Unsafe的compareAndSwap*方法来实现CAS操作，它是一个本地方法，实现位于unsafe.cpp中。</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">UNSAFE_ENTRY</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">jboolean</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> Unsafe_CompareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">JNIEnv </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">env</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">unsafe</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">obj</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">offset</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">e</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">x</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#61AFEF">  UnsafeWrapper</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Unsafe_CompareAndSwapInt"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  oop p </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> JNIHandles::</span><span style="color:#61AFEF">resolve</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">obj</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  jint</span><span style="color:#C678DD">*</span><span style="color:#ABB2BF"> addr </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (jint </span><span style="color:#C678DD">*</span><span style="color:#ABB2BF">) </span><span style="color:#61AFEF">index_oop_from_field_offset_long</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">p</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> offset</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> (jint)(Atomic::</span><span style="color:#61AFEF">cmpxchg</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">)) </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> e;</span></span>
<span class="line"><span style="color:#ABB2BF">UNSAFE_END</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到它通过 <code>Atomic::cmpxchg</code> 来实现比较和替换操作。其中参数x是即将更新的值，参数e是原内存的值。</p>
<p>如果是Linux的x86，<code>Atomic::cmpxchg</code>方法的实现如下：</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">inline</span><span style="color:#ABB2BF"> jint Atomic::</span><span style="color:#61AFEF">cmpxchg</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">jint </span><span style="color:#E06C75;font-style:italic">exchange_value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> volatile</span><span style="color:#E06C75"> jint</span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic"> dest</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">compare_value</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">  int</span><span style="color:#ABB2BF"> mp </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> os::is_MP</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">  __asm__</span><span style="color:#C678DD"> volatile</span><span style="color:#ABB2BF"> (LOCK_IF_MP(</span><span style="color:#C678DD">%</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">) </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">cmpxchgl %1,(%3)</span><span style="color:#98C379">"</span></span>
<span class="line"><span style="color:#ABB2BF">                    : </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">=a</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (exchange_value)</span></span>
<span class="line"><span style="color:#ABB2BF">                    : </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">r</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (exchange_value), </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">a</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (compare_value), </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">r</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (dest), </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">r</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (mp)</span></span>
<span class="line"><span style="color:#ABB2BF">                    : </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">cc</span><span style="color:#98C379">"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">memory</span><span style="color:#98C379">"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> exchange_value;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而windows的x86的实现如下：</p>
<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">inline</span><span style="color:#ABB2BF"> jint Atomic::</span><span style="color:#61AFEF">cmpxchg</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">jint </span><span style="color:#E06C75;font-style:italic">exchange_value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> volatile</span><span style="color:#E06C75"> jint</span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic"> dest</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">compare_value</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#ABB2BF"> mp </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> os::isMP</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> //判断是否是多处理器</span></span>
<span class="line"><span style="color:#ABB2BF">    _asm {</span></span>
<span class="line"><span style="color:#ABB2BF">        mov edx, dest</span></span>
<span class="line"><span style="color:#ABB2BF">        mov ecx, exchange_value</span></span>
<span class="line"><span style="color:#ABB2BF">        mov eax, compare_value</span></span>
<span class="line"><span style="color:#61AFEF">        LOCK_IF_MP</span><span style="color:#ABB2BF">(mp)</span></span>
<span class="line"><span style="color:#ABB2BF">        cmpxchg dword ptr [edx], ecx</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Adding a lock prefix to an instruction on MP machine</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// VC++ doesn't like the lock prefix to be on a single line</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// so we can't insert a label after the lock prefix.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// By emitting a lock prefix, we can define a label after it.</span></span>
<span class="line"><span style="color:#C678DD">#define</span><span style="color:#61AFEF"> LOCK_IF_MP</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">mp</span><span style="color:#ABB2BF">) __asm cmp mp, </span><span style="color:#D19A66">0</span><span style="color:#56B6C2">  \</span></span>
<span class="line"><span style="color:#ABB2BF">                       __asm je L0      </span><span style="color:#56B6C2">\</span></span>
<span class="line"><span style="color:#ABB2BF">                       __asm _emit </span><span style="color:#E06C75">0x</span><span style="color:#D19A66">F0</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#ABB2BF">                       __asm L0:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是多处理器，为cmpxchg指令添加lock前缀。反之，就省略lock前缀(单处理器会不需要lock前缀提供的内存屏障效果)。这里的lock前缀就是使用了处理器的总线锁(最新的处理器都使用缓存锁代替总线锁来提高性能)。</p>
<blockquote>
<p>cmpxchg(void* ptr, int old, int new)，如果ptr和old的值一样，则把new写到ptr内存，否则返回ptr的值，整个操作是原子的。在Intel平台下，会用lock cmpxchg来实现，使用lock触发缓存锁，这样另一个线程想访问ptr的内存，就会被block住。</p>
</blockquote>
<h3><a class="header-anchor" href="#unsafe其它功能"><span></span></a><a href="#unsafe%E5%85%B6%E5%AE%83%E5%8A%9F%E8%83%BD">#</a> Unsafe其它功能</h3>
<p>Unsafe 提供了硬件级别的操作，比如说获取某个属性在内存中的位置，比如说修改对象的字段值，即使它是私有的。不过 Java 本身就是为了屏蔽底层的差异，对于一般的开发而言也很少会有这样的需求。</p>
<p>举两个例子，比方说：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> staticFieldOffset</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Field</span><span style="color:#E06C75"> paramField)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法可以用来获取给定的 paramField 的内存地址偏移量，这个值对于给定的 field 是唯一的且是固定不变的。</p>
<p>再比如说：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> arrayBaseOffset</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#E06C75"> paramClass)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> arrayIndexScale</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#E06C75"> paramClass)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>前一个方法是用来获取数组第一个元素的偏移地址，后一个方法是用来获取数组的转换因子即数组中元素的增量地址的。</p>
<p>最后看三个方法：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> allocateMemory</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> reallocateMemory</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> freeMemory</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别用来分配内存，扩充内存和释放内存的。</p>
<blockquote>
<p>更多相关功能，推荐你看下这篇文章：来自美团技术团队：<a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html" target="_blank" rel="noopener noreferrer">Java魔法类：Unsafe应用解析在新窗口打开</a></p>
</blockquote>
<h2><a class="header-anchor" href="#atomicinteger"><span></span></a><a href="#atomicinteger">#</a> AtomicInteger</h2>
<h3><a class="header-anchor" href="#使用举例"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B">#</a> 使用举例</h3>
<p>以 AtomicInteger 为例，常用 API：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">()：获取当前的值</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndSet</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> newValue)：获取当前的值，并设置新的值</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndIncrement</span><span style="color:#E06C75">()：获取当前的值，并自增</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndDecrement</span><span style="color:#E06C75">()：获取当前的值，并自减</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAdd</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> delta)：获取当前的值，并加上预期的值</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> lazySet</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> newValue)</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> 最终会设置成newValue</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比 Integer 的优势，多线程中让变量自增：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 若要线程安全执行执行 count++，需要加锁</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> increment</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">    count</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getCount</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 AtomicInteger 后：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> AtomicInteger</span><span style="color:#E06C75"> count </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicInteger</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> increment</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    count</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">incrementAndGet</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 使用 AtomicInteger 后，不需要加锁，也可以实现线程安全</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getCount</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> count</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#源码解析"><span></span></a><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">#</a> 源码解析</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicInteger</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Number</span><span style="color:#C678DD"> implements</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#E06C75"> unsafe </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> valueOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //用于获取value字段相对当前对象的“起始地址”的偏移量</span></span>
<span class="line"><span style="color:#E06C75">            valueOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">objectFieldOffset</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AtomicInteger</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) { </span><span style="color:#C678DD">throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#E06C75">(ex)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //返回当前值</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> get</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //递增加detla</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAdd</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> delta</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //三个参数，1、当前的实例 2、value实例变量的偏移量 3、当前value要加上的数(value+delta)。</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAddInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, valueOffset, delta);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //递增加1</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> incrementAndGet</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAddInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, valueOffset, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到 AtomicInteger 底层用的是volatile的变量和CAS来进行更改数据的。</p>
<ul>
<li>volatile保证线程的可见性，多线程并发时，一个线程修改数据，可以保证其它线程立马看到修改后的值</li>
<li>CAS 保证数据更新的原子性。</li>
</ul>
<h2><a class="header-anchor" href="#延伸到所有原子类-共12个"><span></span></a><a href="#%E5%BB%B6%E4%BC%B8%E5%88%B0%E6%89%80%E6%9C%89%E5%8E%9F%E5%AD%90%E7%B1%BB-%E5%85%B112%E4%B8%AA">#</a> 延伸到所有原子类：共12个</h2>
<blockquote>
<p>JDK中提供了12个原子操作类。</p>
</blockquote>
<h3><a class="header-anchor" href="#原子更新基本类型"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">#</a> 原子更新基本类型</h3>
<p>使用原子的方式更新基本类型，Atomic包提供了以下3个类。</p>
<ul>
<li>AtomicBoolean: 原子更新布尔类型。</li>
<li>AtomicInteger: 原子更新整型。</li>
<li>AtomicLong: 原子更新长整型。</li>
</ul>
<p>以上3个类提供的方法几乎一模一样，可以参考上面AtomicInteger中的相关方法。</p>
<h3><a class="header-anchor" href="#原子更新数组"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84">#</a> 原子更新数组</h3>
<p>通过原子的方式更新数组里的某个元素，Atomic包提供了以下的3个类：</p>
<ul>
<li>AtomicIntegerArray: 原子更新整型数组里的元素。</li>
<li>AtomicLongArray: 原子更新长整型数组里的元素。</li>
<li>AtomicReferenceArray: 原子更新引用类型数组里的元素。</li>
</ul>
<p>这三个类的最常用的方法是如下两个方法：</p>
<ul>
<li>get(int index)：获取索引为index的元素值。</li>
<li>compareAndSet(int i,E expect,E update): 如果当前值等于预期值，则以原子方式将数组位置i的元素设置为update值。</li>
</ul>
<p>举个AtomicIntegerArray例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.atomic.AtomicIntegerArray</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Demo5</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        AtomicIntegerArray</span><span style="color:#E06C75"> array</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicIntegerArray</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#C678DD"> int</span><span style="color:#ABB2BF">[] { </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF"> });</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(array);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAdd</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(array);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#D19A66">0</span></span>
<span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#原子更新引用类型"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">#</a> 原子更新引用类型</h3>
<p>Atomic包提供了以下三个类：</p>
<ul>
<li>AtomicReference: 原子更新引用类型。</li>
<li>AtomicStampedReference: 原子更新引用类型, 内部使用Pair来存储元素值及其版本号。</li>
<li>AtomicMarkableReferce: 原子更新带有标记位的引用类型。</li>
</ul>
<p>这三个类提供的方法都差不多，首先构造一个引用对象，然后把引用对象set进Atomic类，然后调用compareAndSet等一些方法去进行原子操作，原理都是基于Unsafe实现，但AtomicReferenceFieldUpdater略有不同，更新的字段必须用volatile修饰。</p>
<p>举个AtomicReference例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.atomic.AtomicReference</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicReferenceTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建两个Person对象，它们的id分别是101和102。</span></span>
<span class="line"><span style="color:#E5C07B">        Person</span><span style="color:#E06C75"> p1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">101</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Person</span><span style="color:#E06C75"> p2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">102</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 新建AtomicReference对象，初始化它的值为p1对象</span></span>
<span class="line"><span style="color:#E5C07B">        AtomicReference</span><span style="color:#E06C75"> ar</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicReference</span><span style="color:#ABB2BF">(p1);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 通过CAS设置ar。如果ar的值为p1的话，则将其设置为p2。</span></span>
<span class="line"><span style="color:#E5C07B">        ar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(p1, p2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Person</span><span style="color:#E06C75"> p3</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Person)</span><span style="color:#E5C07B">ar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p3 is "</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">p3);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p3.equals(p1)="</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">p3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(p1));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Person</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    volatile</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> id</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">id</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> id;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "id:"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">id;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果输出：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">p3 is id</span><span style="color:#C678DD">:</span><span style="color:#D19A66">102</span></span>
<span class="line"><span style="color:#E5C07B">p3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(p1)</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果说明：</p>
<ul>
<li>新建AtomicReference对象ar时，将它初始化为p1。</li>
<li>紧接着，通过CAS函数对它进行设置。如果ar的值为p1的话，则将其设置为p2。</li>
<li>最后，获取ar对应的对象，并打印结果。p3.equals(p1)的结果为false，这是因为Person并没有覆盖equals()方法，而是采用继承自Object.java的equals()方法；而Object.java中的equals()实际上是调用"=="去比较两个对象，即比较两个对象的地址是否相等。</li>
</ul>
<h3><a class="header-anchor" href="#原子更新字段类"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E7%B1%BB">#</a> 原子更新字段类</h3>
<p>Atomic包提供了四个类进行原子字段更新：</p>
<ul>
<li>AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器。</li>
<li>AtomicLongFieldUpdater: 原子更新长整型字段的更新器。</li>
<li>AtomicReferenceFieldUpdater: 上面已经说过此处不在赘述。</li>
</ul>
<p>这四个类的使用方式都差不多，是基于反射的原子更新字段的值。要想原子地更新字段类需要两步:</p>
<ul>
<li>第一步，因为原子更新字段类都是抽象类，每次使用的时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。</li>
<li>第二步，更新类的字段必须使用public volatile修饰。</li>
</ul>
<p>举个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestAtomicIntegerFieldUpdater</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        TestAtomicIntegerFieldUpdater</span><span style="color:#E06C75"> tIA</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> TestAtomicIntegerFieldUpdater</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        tIA</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doIt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> AtomicIntegerFieldUpdater</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">DataDemo</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> updater</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> AtomicIntegerFieldUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newUpdater</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DataDemo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doIt</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">        DataDemo</span><span style="color:#E06C75"> data</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DataDemo</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"publicVar = "</span><span style="color:#56B6C2">+</span><span style="color:#61AFEF">updater</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"publicVar"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getAndAdd</span><span style="color:#ABB2BF">(data, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * 由于在DataDemo类中属性value2/value3,在TestAtomicIntegerFieldUpdater中不能访问</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("protectedVar = "+updater("protectedVar").getAndAdd(data,2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("privateVar = "+updater("privateVar").getAndAdd(data,2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("staticVar = "+updater("staticVar").getAndIncrement(data));//报java.lang.IllegalArgumentException</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * 下面报异常：must be integer</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("integerVar = "+updater("integerVar").getAndIncrement(data));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("longVar = "+updater("longVar").getAndIncrement(data));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> DataDemo</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> publicVar</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> protectedVar</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD">  int</span><span style="color:#E06C75"> privateVar</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> staticVar </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //public  final int finalVar = 11;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Integer</span><span style="color:#E06C75"> integerVar </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 19</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75"> longVar </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 18L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再说下对于AtomicIntegerFieldUpdater 的使用稍微有一些限制和约束，约束如下：</p>
<ul>
<li>字段必须是volatile类型的，在线程之间共享变量时保证立即可见.eg:volatile int value = 3</li>
<li>字段的描述类型(修饰符public/protected/default/private)是与调用者与操作对象字段的关系一致。也就是说调用者能够直接操作对象字段，那么就可以反射进行原子操作。但是对于父类的字段，子类是不能直接操作的，尽管子类可以访问父类的字段。</li>
<li>只能是实例变量，不能是类变量，也就是说不能加static关键字。</li>
<li>只能是可修改变量，不能使final变量，因为final的语义就是不可修改。实际上final的语义和volatile是有冲突的，这两个关键字不能同时存在。</li>
<li>对于AtomicIntegerFieldUpdater和AtomicLongFieldUpdater只能修改int/long类型的字段，不能修改其包装类型(Integer/Long)。如果要修改包装类型就需要使用AtomicReferenceFieldUpdater。</li>
</ul>
<h2><a class="header-anchor" href="#再讲讲atomicstampedreference解决cas的aba问题"><span></span></a><a href="#%E5%86%8D%E8%AE%B2%E8%AE%B2atomicstampedreference%E8%A7%A3%E5%86%B3cas%E7%9A%84aba%E9%97%AE%E9%A2%98">#</a> 再讲讲AtomicStampedReference解决CAS的ABA问题</h2>
<h3><a class="header-anchor" href="#atomicstampedreference解决aba问题"><span></span></a><a href="#atomicstampedreference%E8%A7%A3%E5%86%B3aba%E9%97%AE%E9%A2%98">#</a> AtomicStampedReference解决ABA问题</h3>
<p>AtomicStampedReference主要维护包含一个对象引用以及一个可以自动更新的整数"stamp"的pair对象来解决ABA问题。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicStampedReference</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> reference</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //维护对象引用</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> stamp</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //用于标志版本</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#61AFEF"> Pair</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> reference</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> stamp</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reference</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> reference;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stamp</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> stamp;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> reference</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> stamp</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;(reference, stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> pair</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    ....</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * expectedReference ：更新之前的原始值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * newReference : 将要更新的新值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * expectedStamp : 期待更新的标志版本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * newStamp : 将要更新的标志版本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">V</span><span style="color:#E06C75;font-style:italic">   expectedReference</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                             V</span><span style="color:#E06C75;font-style:italic">   newReference</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                             int</span><span style="color:#E06C75;font-style:italic"> expectedStamp</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                             int</span><span style="color:#E06C75;font-style:italic"> newStamp</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取当前的(元素值，版本号)对</span></span>
<span class="line"><span style="color:#E5C07B">        Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">current</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> pair;</span></span>
<span class="line"><span style="color:#C678DD">        return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 引用没变</span></span>
<span class="line"><span style="color:#ABB2BF">            expectedReference </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reference</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 版本号没变</span></span>
<span class="line"><span style="color:#ABB2BF">            expectedStamp </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stamp</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 新引用等于旧引用</span></span>
<span class="line"><span style="color:#ABB2BF">            ((newReference </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reference</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 新版本号等于旧版本号</span></span>
<span class="line"><span style="color:#ABB2BF">            newStamp </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stamp</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 构造新的Pair对象并CAS更新</span></span>
<span class="line"><span style="color:#61AFEF">            casPair</span><span style="color:#ABB2BF">(current, </span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(newReference, newStamp)));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> casPair</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">cmp</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">val</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用Unsafe的compareAndSwapObject()方法CAS更新pair的引用为新引用</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, pairOffset, cmp, val);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>如果元素值和版本号都没有变化，并且和新的也相同，返回true；</li>
<li>如果元素值和版本号都没有变化，并且和新的不完全相同，就构造一个新的Pair对象并执行CAS更新pair。</li>
</ul>
<p>可以看到，java中的实现跟我们上面讲的ABA的解决方法是一致的。</p>
<ul>
<li>首先，使用版本号控制；</li>
<li>其次，不重复使用节点(Pair)的引用，每次都新建一个新的Pair来作为CAS比较的对象，而不是复用旧的；</li>
<li>最后，外部传入元素值及版本号，而不是节点(Pair)的引用。</li>
</ul>
<h3><a class="header-anchor" href="#使用举例-1"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B-1">#</a> 使用举例</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicTester</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> AtomicStampedReference</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> atomicStampedRef </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#E5C07B"> AtomicStampedReference</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#61AFEF">        first</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        second</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Thread</span><span style="color:#61AFEF"> first</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",初始值 a = "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getReference</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获取当前标识别</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//等待1秒 ，以便让干扰线程执行</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            boolean</span><span style="color:#E06C75"> isCASSuccess</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,stamp,stamp </span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);  </span><span style="color:#7F848E;font-style:italic">//此时expectedReference未发生改变，但是stamp已经被修改了,所以CAS失败</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",CAS操作结果: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> isCASSuccess);</span></span>
<span class="line"><span style="color:#ABB2BF">        },</span><span style="color:#98C379">"主操作线程"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Thread</span><span style="color:#61AFEF"> second</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">yield</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// 确保thread-first 优先执行</span></span>
<span class="line"><span style="color:#E5C07B">            atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">(),</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",【increment】 ,值 = "</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getReference</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">            atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">(),</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",【decrement】 ,值 = "</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getReference</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        },</span><span style="color:#98C379">"干扰线程"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">操作线程Thread[主操作线程,5,main],初始值</span><span style="color:#98C379"> a</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">操作线程Thread[干扰线程,5,main],【increment】</span><span style="color:#98C379"> ,值</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF">操作线程Thread[干扰线程,5,main],【decrement】</span><span style="color:#98C379"> ,值</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">操作线程Thread[主操作线程,5,main],CAS操作结果:</span><span style="color:#D19A66"> false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#java中还有哪些类可以解决aba的问题"><span></span></a><a href="#java%E4%B8%AD%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3aba%E7%9A%84%E9%97%AE%E9%A2%98">#</a> java中还有哪些类可以解决ABA的问题?</h3>
<p>AtomicMarkableReference，它不是维护一个版本号，而是维护一个boolean类型的标记，标记值有修改，了解一下。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-atomicinteger-unsafe.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 CountDownLatch 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CountDownLatch%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CountDownLatch%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 CountDownLatch 详解</source>
      <description>CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai JUC 工具类之 CountDownLatch 详解 带着BAT大厂的面试问题去理解 CountDownLatch介绍 CountDownLatch源码分析 类的继承关系 类的内部类 类的属性 类的构造函数 核心函数...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai</p>
</blockquote>
<ul>
<li>JUC 工具类之 CountDownLatch 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#countdownlatch%E4%BB%8B%E7%BB%8D">CountDownLatch介绍</a></li>
<li>CountDownLatch源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>[核心函数 - await函数](#核心函数</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 CyclicBarrier 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CyclicBarrier%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CyclicBarrier%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 CyclicBarrier 详解</source>
      <description>CyclicBarrier底层是基于ReentrantLock和AbstractQueuedSynchronizer来实现的, 在理解的时候最好和CountDownLatch放在一起理解(相见本文分析)。 JUC 工具类之 CyclicBarrier 详解 带着BAT大厂的面试问题去理解 CyclicBarrier简介 CyclicBarrier源码分...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>CyclicBarrier底层是基于ReentrantLock和AbstractQueuedSynchronizer来实现的, 在理解的时候最好和CountDownLatch放在一起理解(相见本文分析)。</p>
</blockquote>
<ul>
<li>JUC 工具类之 CyclicBarrier 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#cyclicbarrier%E7%AE%80%E4%BB%8B">CyclicBarrier简介</a></li>
<li>CyclicBarrier源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>[核心函数 - dowait函数](#核心函数</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-cyclicbarrier-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 Exchanger 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Exchanger%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Exchanger%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 Exchanger 详解</source>
      <description>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。 JUC 工具类之 Exchanger 详解 带着BAT大厂的面试问题去理解Exchanger Exchanger简介 Exchanger实现机制 Exchanger源码解析 内部类 - Participant 内部类 - Node 核心属性 构造函数 核心方法 - excha...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。</p>
</blockquote>
<ul>
<li>JUC 工具类之 Exchanger 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3exchanger">带着BAT大厂的面试问题去理解Exchanger</a></li>
<li><a href="#exchanger%E7%AE%80%E4%BB%8B">Exchanger简介</a></li>
<li><a href="#exchanger%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6">Exchanger实现机制</a></li>
<li>Exchanger源码解析
<ul>
<li>[内部类 - Participant](#内部类</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>JUC 工具类之 Phaser 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Phaser%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Phaser%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 Phaser 详解</source>
      <description>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。 JUC 工具类之 Phaser 详解 带着BAT大厂的面试问题去理解Phaser工具 Phaser运行机制 Phaser源码详解 核心参数 函数列表 方法 - reg...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。</p>
</blockquote>
<ul>
<li>JUC 工具类之 Phaser 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3phaser%E5%B7%A5%E5%85%B7">带着BAT大厂的面试问题去理解Phaser工具</a></li>
<li><a href="#phaser%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6">Phaser运行机制</a></li>
<li>Phaser源码详解
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">核心参数</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8">函数列表</a></li>
<li>[方法 - register()](#方法</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-phaser-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 Semaphore 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Semaphore%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Semaphore%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 Semaphore 详解</source>
      <description>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。 JUC 工具类之 Semaphore 详解 带着BAT大厂的面试问题去理解 Semaphore源码分析 类的继承关系...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。</p>
</blockquote>
<ul>
<li>JUC 工具类之 Semaphore 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>Semaphore源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li>[类的内部类 - Sync类](#类的内部类</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 知识汇总指南</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E6%8C%87%E5%8D%97.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E6%8C%87%E5%8D%97.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 知识汇总指南</source>
      <description>本文对J.U.C进行知识体系解读，后续的文章还针对几乎所有的核心的类以及常用的工具类作了详细的解读; 如果没有时间详细阅读相关章节，可以跟着本文站在一定的高度了解JUC下包的设计和实现；同时对重要的章节提供跳转链接，您可以链接过去详读。 JUC 知识汇总指南 带着BAT大厂的面试问题去理解 Overview Lock框架和Tools类 类结构总览 接口...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文对J.U.C进行知识体系解读，后续的文章还针对<strong>几乎所有的核心的类</strong>以及常用的<code>工具类</code>作了详细的解读; <strong>如果没有时间详细阅读相关章节，可以跟着本文站在一定的高度了解JUC下包的设计和实现</strong>；同时对重要的章节提供跳转链接，您可以链接过去详读。</p>
</blockquote>
<ul>
<li>JUC 知识汇总指南
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#overview">Overview</a></li>
<li>Lock框架和Tools类
<ul>
<li><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88">类结构总览</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-condition">接口: Condition</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-lock">接口: Lock</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-readwritelock">接口: ReadWriteLock</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB-abstractownablesynchonizer">抽象类: AbstractOwnableSynchonizer</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BBlong-abstractqueuedlongsynchronizer">抽象类(long): AbstractQueuedLongSynchronizer</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E7%B1%BBint-abstractqueuedsynchronizer">核心抽象类(int): AbstractQueuedSynchronizer</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-locksupport">锁常用类: LockSupport</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantlock">锁常用类: ReentrantLock</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantreadwritelock">锁常用类: ReentrantReadWriteLock</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-stampedlock">锁常用类: StampedLock</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-countdownlatch">工具常用类: CountDownLatch</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-cyclicbarrier">工具常用类: CyclicBarrier</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-phaser">工具常用类: Phaser</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-semaphore">工具常用类: Semaphore</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-exchanger">工具常用类: Exchanger</a></li>
</ul>
</li>
<li>Collections: 并发集合
<ul>
<li><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB">类结构关系</a></li>
<li><a href="#queue-arrayblockingqueue">Queue: ArrayBlockingQueue</a></li>
<li><a href="#queue-linkedblockingqueue">Queue: LinkedBlockingQueue</a></li>
<li><a href="#queue-linkedblockingdeque">Queue: LinkedBlockingDeque</a></li>
<li><a href="#queue-concurrentlinkedqueue">Queue: ConcurrentLinkedQueue</a></li>
<li><a href="#queue-concurrentlinkeddeque">Queue: ConcurrentLinkedDeque</a></li>
<li><a href="#queue-delayqueue">Queue: DelayQueue</a></li>
<li><a href="#queue-priorityblockingqueue">Queue: PriorityBlockingQueue</a></li>
<li><a href="#queue-synchronousqueue">Queue: SynchronousQueue</a></li>
<li><a href="#queue-linkedtransferqueue">Queue: LinkedTransferQueue</a></li>
<li><a href="#list-copyonwritearraylist">List: CopyOnWriteArrayList</a></li>
<li><a href="#set-copyonwritearrayset">Set: CopyOnWriteArraySet</a></li>
<li><a href="#set-concurrentskiplistset">Set: ConcurrentSkipListSet</a></li>
<li><a href="#map-concurrenthashmap">Map: ConcurrentHashMap</a></li>
<li><a href="#map-concurrentskiplistmap">Map: ConcurrentSkipListMap</a></li>
</ul>
</li>
<li>Atomic: 原子类
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8Batomicbooleanatomicintegeratomiclong">基础类型：AtomicBoolean，AtomicInteger，AtomicLong</a></li>
<li><a href="#%E6%95%B0%E7%BB%84atomicintegerarrayatomiclongarraybooleanarray">数组：AtomicIntegerArray，AtomicLongArray，BooleanArray</a></li>
<li><a href="#%E5%BC%95%E7%94%A8atomicreferenceatomicmarkedreferenceatomicstampedreference">引用：AtomicReference，AtomicMarkedReference，AtomicStampedReference</a></li>
<li><a href="#fieldupdateratomiclongfieldupdateratomicintegerfieldupdateratomicreferencefieldupdater">FieldUpdater：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</a></li>
</ul>
</li>
<li>Executors: 线程池
<ul>
<li><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB-1">类结构关系</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-executor">接口: Executor</a></li>
<li><a href="#executorservice">ExecutorService</a></li>
<li><a href="#scheduledexecutorservice">ScheduledExecutorService</a></li>
<li><a href="#abstractexecutorservice">AbstractExecutorService</a></li>
<li><a href="#futuretask">FutureTask</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83-threadpoolexecutor">核心: ThreadPoolExecutor</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83-scheduledthreadexecutor">核心: ScheduledThreadExecutor</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83-forkjoin%E6%A1%86%E6%9E%B6">核心: Fork/Join框架</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%B1%BB-executors">工具类: Executors</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>JUC框架包含几个部分?</li>
<li>每个部分有哪些核心的类?</li>
<li>最最核心的类有哪些?</li>
</ul>
<h2><a class="header-anchor" href="#overview"><span></span></a><a href="#overview">#</a> Overview</h2>
<p>阅读前，推荐你学习下并发相关基础</p>
<ul>
<li><a href="">Java 并发 - 理论基础</a></li>
<li><a href="">Java 并发 - 线程基础</a></li>
<li><a href="">关键字: synchronized详解</a></li>
<li><a href="">关键字: volatile详解</a></li>
<li><a href="">关键字: final详解</a></li>
</ul>
<p>正式学习时先了解五个部分：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-1-u.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>主要包含: (注意: 上图是网上找的图，无法表述一些继承关系，同时少了部分类；但是主体上可以看出其分类关系也够了)</p>
<ul>
<li>Lock框架和Tools类(把图中这两个放到一起理解)</li>
<li>Collections: 并发集合</li>
<li>Atomic: 原子类</li>
<li>Executors: 线程池</li>
</ul>
<h2><a class="header-anchor" href="#lock框架和tools类"><span></span></a><a href="#lock%E6%A1%86%E6%9E%B6%E5%92%8Ctools%E7%B1%BB">#</a> Lock框架和Tools类</h2>
<h3><a class="header-anchor" href="#类结构总览"><span></span></a><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88">#</a> 类结构总览</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-lock.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#接口-condition"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-condition">#</a> 接口: Condition</h3>
<blockquote>
<p>Condition为接口类型，它将 Object 监视器方法(wait、notify 和 notifyAll)分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set (wait-set)。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。可以通过await(),signal()来休眠/唤醒线程。</p>
</blockquote>
<p>在<a href="">JUC锁: AbstractQueuedSynchronizer详解</a>中类的<strong>内部类-conditionobject类</strong>有具体分析。</p>
<h3><a class="header-anchor" href="#接口-lock"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-lock">#</a> 接口: Lock</h3>
<blockquote>
<p>Lock为接口类型，Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的Condition对象。</p>
</blockquote>
<h3><a class="header-anchor" href="#接口-readwritelock"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-readwritelock">#</a> 接口: ReadWriteLock</h3>
<blockquote>
<p>ReadWriteLock为接口类型， 维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。只要没有 writer，读取锁可以由多个 reader 线程同时保持。写入锁是独占的。</p>
</blockquote>
<h3><a class="header-anchor" href="#抽象类-abstractownablesynchonizer"><span></span></a><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB-abstractownablesynchonizer">#</a> 抽象类: AbstractOwnableSynchonizer</h3>
<blockquote>
<p>AbstractOwnableSynchonizer为抽象类，可以由线程以独占方式拥有的同步器。此类为创建锁和相关同步器(伴随着所有权的概念)提供了基础。AbstractOwnableSynchronizer 类本身不管理或使用此信息。但是，子类和工具可以使用适当维护的值帮助控制和监视访问以及提供诊断。</p>
</blockquote>
<h3><a class="header-anchor" href="#抽象类-long-abstractqueuedlongsynchronizer"><span></span></a><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB-long-abstractqueuedlongsynchronizer">#</a> 抽象类(long): AbstractQueuedLongSynchronizer</h3>
<blockquote>
<p>AbstractQueuedLongSynchronizer为抽象类，以 long 形式维护同步状态的一个 AbstractQueuedSynchronizer 版本。此类具有的结构、属性和方法与 AbstractQueuedSynchronizer 完全相同，但所有与状态相关的参数和结果都定义为 long 而不是 int。当创建需要 64 位状态的多级别锁和屏障等同步器时，此类很有用。</p>
</blockquote>
<h3><a class="header-anchor" href="#核心抽象类-int-abstractqueuedsynchronizer"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E7%B1%BB-int-abstractqueuedsynchronizer">#</a> 核心抽象类(int): AbstractQueuedSynchronizer</h3>
<blockquote>
<p>AbstractQueuedSynchronizer为抽象类，其为实现依赖于先进先出 (FIFO) 等待队列的阻塞锁和相关同步器(信号量、事件，等等)提供一个框架。此类的设计目标是成为依靠单个原子 int 值来表示状态的大多数同步器的一个有用基础。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC锁: AbstractQueuedSynchronizer详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-locksupport"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-locksupport">#</a> 锁常用类: LockSupport</h3>
<blockquote>
<p>LockSupport为常用类，用来创建锁和其他同步类的基本线程阻塞原语。LockSupport的功能和"Thread中的 Thread.suspend()和Thread.resume()有点类似"，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC锁: LockSupport详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-reentrantlock"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantlock">#</a> 锁常用类: ReentrantLock</h3>
<blockquote>
<p>ReentrantLock为常用类，它是一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC锁: ReentrantLock详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-reentrantreadwritelock"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantreadwritelock">#</a> 锁常用类: ReentrantReadWriteLock</h3>
<blockquote>
<p>ReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括Lock子类ReadLock和WriteLock。ReadLock是共享锁，WriteLock是独占锁。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: ReentrantReadWriteLock详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-stampedlock"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-stampedlock">#</a> 锁常用类: StampedLock</h3>
<blockquote>
<p>它是java8在java.util.concurrent.locks新增的一个API。StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p>
</blockquote>
<p>详细分析请看: <a href="">Java 8 - StampedLock详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-countdownlatch"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-countdownlatch">#</a> 工具常用类: CountDownLatch</h3>
<blockquote>
<p>CountDownLatch为常用类，它是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: CountDownLatch详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-cyclicbarrier"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-cyclicbarrier">#</a> 工具常用类: CyclicBarrier</h3>
<blockquote>
<p>CyclicBarrier为常用类，其是一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: CyclicBarrier详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-phaser"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-phaser">#</a> 工具常用类: Phaser</h3>
<blockquote>
<p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: Phaser详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-semaphore"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-semaphore">#</a> 工具常用类: Semaphore</h3>
<blockquote>
<p>Semaphore为常用类，其是一个计数信号量，从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 acquire()，然后再获取该许可。每个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore 只对可用许可的号码进行计数，并采取相应的行动。通常用于限制可以访问某些资源(物理或逻辑的)的线程数目。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: Semaphore详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-exchanger"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-exchanger">#</a> 工具常用类: Exchanger</h3>
<blockquote>
<p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange()方法交换数据，当一个线程先执行exchange()方法后，它会一直等待第二个线程也执行exchange()方法，当这两个线程到达同步点时，这两个线程就可以交换数据了。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: Exchanger详解</a></p>
<h2><a class="header-anchor" href="#collections-并发集合"><span></span></a><a href="#collections-%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88">#</a> Collections: 并发集合</h2>
<h3><a class="header-anchor" href="#类结构关系"><span></span></a><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB">#</a> 类结构关系</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-2.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#queue-arrayblockingqueue"><span></span></a><a href="#queue-arrayblockingqueue">#</a> Queue: ArrayBlockingQueue</h3>
<blockquote>
<p>一个由数组支持的有界阻塞队列。此队列按 FIFO(先进先出)原则对元素进行排序。队列的头部 是在队列中存在时间最长的元素。队列的尾部 是在队列中存在时间最短的元素。新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: BlockingQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-linkedblockingqueue"><span></span></a><a href="#queue-linkedblockingqueue">#</a> Queue: LinkedBlockingQueue</h3>
<blockquote>
<p>一个基于已链接节点的、范围任意的 blocking queue。此队列按 FIFO(先进先出)排序元素。队列的头部 是在队列中时间最长的元素。队列的尾部 是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列获取操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: BlockingQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-linkedblockingdeque"><span></span></a><a href="#queue-linkedblockingdeque">#</a> Queue: LinkedBlockingDeque</h3>
<blockquote>
<p>一个基于已链接节点的、任选范围的阻塞双端队列。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: BlockingQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-concurrentlinkedqueue"><span></span></a><a href="#queue-concurrentlinkedqueue">#</a> Queue: ConcurrentLinkedQueue</h3>
<blockquote>
<p>一个基于链接节点的无界线程安全队列。此队列按照 FIFO(先进先出)原则对元素进行排序。队列的头部 是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue 是一个恰当的选择。此队列不允许使用 null 元素。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: ConcurrentLinkedQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-concurrentlinkeddeque"><span></span></a><a href="#queue-concurrentlinkeddeque">#</a> Queue: ConcurrentLinkedDeque</h3>
<blockquote>
<p>是双向链表实现的无界队列，该队列同时支持FIFO和FILO两种操作方式。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-delayqueue"><span></span></a><a href="#queue-delayqueue">#</a> Queue: DelayQueue</h3>
<blockquote>
<p>延时无界阻塞队列，使用Lock机制实现并发访问。队列里只允许放可以“延期”的元素，队列中的head是最先“到期”的元素。如果队里中没有元素到“到期”，那么就算队列中有元素也不能获取到。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-priorityblockingqueue"><span></span></a><a href="#queue-priorityblockingqueue">#</a> Queue: PriorityBlockingQueue</h3>
<blockquote>
<p>无界优先级阻塞队列，使用Lock机制实现并发访问。priorityQueue的线程安全版，不允许存放null值，依赖于comparable的排序，不允许存放不可比较的对象类型。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-synchronousqueue"><span></span></a><a href="#queue-synchronousqueue">#</a> Queue: SynchronousQueue</h3>
<blockquote>
<p>没有容量的同步队列，通过CAS实现并发访问，支持FIFO和FILO。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-linkedtransferqueue"><span></span></a><a href="#queue-linkedtransferqueue">#</a> Queue: LinkedTransferQueue</h3>
<blockquote>
<p>JDK 7新增，单向链表实现的无界阻塞队列，通过CAS实现并发访问，队列元素使用 FIFO(先进先出)方式。LinkedTransferQueue可以说是ConcurrentLinkedQueue、SynchronousQueue(公平模式)和LinkedBlockingQueue的超集, 它不仅仅综合了这几个类的功能，同时也提供了更高效的实现。</p>
</blockquote>
<h3><a class="header-anchor" href="#list-copyonwritearraylist"><span></span></a><a href="#list-copyonwritearraylist">#</a> List: CopyOnWriteArrayList</h3>
<blockquote>
<p>ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的复制来实现的。这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: CopyOnWriteArrayList详解</a></p>
<h3><a class="header-anchor" href="#set-copyonwritearrayset"><span></span></a><a href="#set-copyonwritearrayset">#</a> Set: CopyOnWriteArraySet</h3>
<blockquote>
<p>对其所有操作使用内部CopyOnWriteArrayList的Set。即将所有操作转发至CopyOnWriteArayList来进行操作，能够保证线程安全。在add时，会调用addIfAbsent，由于每次add时都要进行数组遍历，因此性能会略低于CopyOnWriteArrayList。</p>
</blockquote>
<h3><a class="header-anchor" href="#set-concurrentskiplistset"><span></span></a><a href="#set-concurrentskiplistset">#</a> Set: ConcurrentSkipListSet</h3>
<blockquote>
<p>一个基于ConcurrentSkipListMap 的可缩放并发 NavigableSet 实现。set 的元素可以根据它们的自然顺序进行排序，也可以根据创建 set 时所提供的 Comparator 进行排序，具体取决于使用的构造方法。</p>
</blockquote>
<h3><a class="header-anchor" href="#map-concurrenthashmap"><span></span></a><a href="#map-concurrenthashmap">#</a> Map: ConcurrentHashMap</h3>
<blockquote>
<p>是线程安全HashMap的。ConcurrentHashMap在JDK 7之前是通过Lock和segment(分段锁)实现，JDK 8 之后改为CAS+synchronized来保证并发安全。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: ConcurrentHashMap详解</a>, 包含了对JDK 7和JDK 8版本的源码分析。</p>
<h3><a class="header-anchor" href="#map-concurrentskiplistmap"><span></span></a><a href="#map-concurrentskiplistmap">#</a> Map: ConcurrentSkipListMap</h3>
<blockquote>
<p>线程安全的有序的哈希表(相当于线程安全的TreeMap);映射可以根据键的自然顺序进行排序，也可以根据创建映射时所提供的 Comparator 进行排序，具体取决于使用的构造方法。</p>
</blockquote>
<h2><a class="header-anchor" href="#atomic-原子类"><span></span></a><a href="#atomic-%E5%8E%9F%E5%AD%90%E7%B1%BB">#</a> Atomic: 原子类</h2>
<p>其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由JVM从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。实际上是借助硬件的相关指令来实现的，不会阻塞线程(或者说只是在硬件级别上阻塞了)。</p>
<p>对CAS，Unsafe类，以及13个原子类详解请参考：详细分析请看: <a href="">JUC原子类: CAS, Unsafe和原子类详解</a></p>
<h3><a class="header-anchor" href="#基础类型-atomicboolean-atomicinteger-atomiclong"><span></span></a><a href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B-atomicboolean-atomicinteger-atomiclong">#</a> 基础类型：AtomicBoolean，AtomicInteger，AtomicLong</h3>
<blockquote>
<p>AtomicBoolean，AtomicInteger，AtomicLong是类似的，分别针对bool，interger，long的原子类。</p>
</blockquote>
<h3><a class="header-anchor" href="#数组-atomicintegerarray-atomiclongarray-booleanarray"><span></span></a><a href="#%E6%95%B0%E7%BB%84-atomicintegerarray-atomiclongarray-booleanarray">#</a> 数组：AtomicIntegerArray，AtomicLongArray，BooleanArray</h3>
<blockquote>
<p>AtomicIntegerArray，AtomicLongArray，AtomicBooleanArray是数组原子类。</p>
</blockquote>
<h3><a class="header-anchor" href="#引用-atomicreference-atomicmarkedreference-atomicstampedreference"><span></span></a><a href="#%E5%BC%95%E7%94%A8-atomicreference-atomicmarkedreference-atomicstampedreference">#</a> 引用：AtomicReference，AtomicMarkedReference，AtomicStampedReference</h3>
<blockquote>
<p>AtomicReference，AtomicMarkedReference，AtomicStampedReference是引用相关的原子类。</p>
</blockquote>
<h3><a class="header-anchor" href="#fieldupdater-atomiclongfieldupdater-atomicintegerfieldupdater-atomicreferencefieldupdater"><span></span></a><a href="#fieldupdater-atomiclongfieldupdater-atomicintegerfieldupdater-atomicreferencefieldupdater">#</a> FieldUpdater：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</h3>
<blockquote>
<p>AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater是FieldUpdater原子类。</p>
</blockquote>
<h2><a class="header-anchor" href="#executors-线程池"><span></span></a><a href="#executors-%E7%BA%BF%E7%A8%8B%E6%B1%A0">#</a> Executors: 线程池</h2>
<h3><a class="header-anchor" href="#类结构关系-1"><span></span></a><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB-1">#</a> 类结构关系</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-executors-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#接口-executor"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-executor">#</a> 接口: Executor</h3>
<blockquote>
<p>Executor接口提供一种将任务提交与每个任务将如何运行的机制(包括线程使用的细节、调度等)分离开来的方法。通常使用 Executor 而不是显式地创建线程。</p>
</blockquote>
<h3><a class="header-anchor" href="#executorservice"><span></span></a><a href="#executorservice">#</a> ExecutorService</h3>
<blockquote>
<p>ExecutorService继承自Executor接口，ExecutorService提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。 可以关闭 ExecutorService，这将导致其停止接受新任务。关闭后，执行程序将最后终止，这时没有任务在执行，也没有任务在等待执行，并且无法提交新任务。</p>
</blockquote>
<h3><a class="header-anchor" href="#scheduledexecutorservice"><span></span></a><a href="#scheduledexecutorservice">#</a> ScheduledExecutorService</h3>
<blockquote>
<p>ScheduledExecutorService继承自ExecutorService接口，可安排在给定的延迟后运行或定期执行的命令。</p>
</blockquote>
<h3><a class="header-anchor" href="#abstractexecutorservice"><span></span></a><a href="#abstractexecutorservice">#</a> AbstractExecutorService</h3>
<blockquote>
<p>AbstractExecutorService继承自ExecutorService接口，其提供 ExecutorService 执行方法的默认实现。此类使用 newTaskFor 返回的 RunnableFuture 实现 submit、invokeAny 和 invokeAll 方法，默认情况下，RunnableFuture 是此包中提供的 FutureTask 类。</p>
</blockquote>
<h3><a class="header-anchor" href="#futuretask"><span></span></a><a href="#futuretask">#</a> FutureTask</h3>
<blockquote>
<p>FutureTask 为 Future 提供了基础实现，如获取任务执行结果(get)和取消任务(cancel)等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消(除非使用runAndReset执行计算)。FutureTask 常用来封装 Callable 和 Runnable，也可以作为一个任务提交到线程池中执行。除了作为一个独立的类之外，此类也提供了一些功能性函数供我们创建自定义 task 类使用。FutureTask 的线程安全由CAS来保证。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: FutureTask详解</a></p>
<h3><a class="header-anchor" href="#核心-threadpoolexecutor"><span></span></a><a href="#%E6%A0%B8%E5%BF%83-threadpoolexecutor">#</a> 核心: ThreadPoolExecutor</h3>
<blockquote>
<p>ThreadPoolExecutor实现了AbstractExecutorService接口，也是一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。 线程池可以解决两个不同问题: 由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源(包括执行任务集时使用的线程)的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: ThreadPoolExecutor详解</a></p>
<h3><a class="header-anchor" href="#核心-scheduledthreadexecutor"><span></span></a><a href="#%E6%A0%B8%E5%BF%83-scheduledthreadexecutor">#</a> 核心: ScheduledThreadExecutor</h3>
<blockquote>
<p>ScheduledThreadPoolExecutor实现ScheduledExecutorService接口，可安排在给定的延迟后运行命令，或者定期执行命令。需要多个辅助线程时，或者要求 ThreadPoolExecutor 具有额外的灵活性或功能时，此类要优于 Timer。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: ScheduledThreadExecutor详解</a></p>
<h3><a class="header-anchor" href="#核心-fork-join框架"><span></span></a><a href="#%E6%A0%B8%E5%BF%83-fork-join%E6%A1%86%E6%9E%B6">#</a> 核心: Fork/Join框架</h3>
<blockquote>
<p>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: Fork/Join框架详解</a></p>
<h3><a class="header-anchor" href="#工具类-executors"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E7%B1%BB-executors">#</a> 工具类: Executors</h3>
<blockquote>
<p>Executors是一个工具类，用其可以创建ExecutorService、ScheduledExecutorService、ThreadFactory、Callable等对象。它的使用融入到了ThreadPoolExecutor, ScheduledThreadExecutor和ForkJoinPool中。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-1-u.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 线程池之 Fork-Join 框架详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20Fork-Join%20%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20Fork-Join%20%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 线程池之 Fork-Join 框架详解</source>
      <description>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。 JUC 线程池之 Fork-Join 框架详解 带着BAT大厂的面...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。</p>
</blockquote>
<ul>
<li>JUC 线程池之 Fork-Join 框架详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3forkjoin%E6%A1%86%E6%9E%B6">带着BAT大厂的面试问题去理解Fork/Join框架</a></li>
<li>Fork/Join框架简介
<ul>
<li><a href="#%E4%B8%89%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%85%B3%E7%B3%BB">三个模块及关系</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95divide-and-conquer">核心思想: 分治算法(Divide-and-Conquer)</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-work-stealing%E5%B7%A5%E4%BD%9C%E7%AA%83%E5%8F%96%E7%AE%97%E6%B3%95">核心思想: work-stealing(工作窃取)算法</a></li>
<li><a href="#forkjoin-%E6%A1%86%E6%9E%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">Fork/Join 框架的执行流程</a></li>
</ul>
</li>
<li>Fork/Join类关系
<ul>
<li><a href="#forkjoinpool%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">ForkJoinPool继承关系</a></li>
<li><a href="#forkjointask%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">ForkJoinTask继承关系</a></li>
</ul>
</li>
<li>Fork/Join框架源码解析
<ul>
<li>ForkJoinPool
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">核心参数</a></li>
<li><a href="#forkjoinpoolworkqueue-%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7">ForkJoinPool.WorkQueue 中的相关属性</a></li>
</ul>
</li>
<li>ForkJoinTask
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0-1">核心参数</a></li>
</ul>
</li>
</ul>
</li>
<li>Fork/Join框架源码解析
<ul>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li>执行流程 - 外部任务(external/submissions task)提交
<ul>
<li><a href="#externalpushforkjointask-task">externalPush(ForkJoinTask task)</a></li>
<li><a href="#externalsubmitforkjointask-task">externalSubmit(ForkJoinTask task)</a></li>
<li><a href="https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ForkJoinPool.html#signalworkworkqueue-ws-workqueue-q" target="_blank" rel="noopener noreferrer">signalWork(WorkQueue[] ws, WorkQueue q)</a></li>
<li><a href="#tryaddworkerlong-c">tryAddWorker(long c)</a></li>
<li><a href="#createworker">createWorker()</a></li>
<li><a href="#registerworker">registerWorker()</a></li>
<li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li>
</ul>
</li>
<li>执行流程: 子任务(Worker task)提交
<ul>
<li><a href="#forkjointaskfork">ForkJoinTask.fork()</a></li>
<li><a href="#forkjoinpoolworkqueuepush">ForkJoinPool.WorkQueue.push()</a></li>
<li><a href="#%E5%B0%8F%E7%BB%93-1">小结</a></li>
</ul>
</li>
<li>执行流程: 任务执行
<ul>
<li><a href="#forkjoinworkerthreadrun">ForkJoinWorkerThread.run()</a></li>
<li><a href="#forkjoinpoolrunworkerworkqueue-w">ForkJoinPool.runWorker(WorkQueue w)</a></li>
<li><a href="#forkjoinpoolscanworkqueue-w-int-r">ForkJoinPool.scan(WorkQueue w, int r)</a></li>
<li><a href="#forkjoinpoolawaitworkworkqueue-w-int-r">ForkJoinPool.awaitWork(WorkQueue w, int r)</a></li>
<li><a href="#workqueueruntask">WorkQueue.runTask()</a></li>
<li><a href="#forkjoinpoolderegisterworkerforkjoinworkerthread-wt-throwable-ex">ForkJoinPool.deregisterWorker(ForkJoinWorkerThread wt, Throwable ex)</a></li>
<li><a href="#%E5%B0%8F%E7%BB%93-2">小结</a></li>
</ul>
</li>
<li>获取任务结果 - ForkJoinTask.join() / ForkJoinTask.invoke()
<ul>
<li><a href="#forkjointaskexternalawaitdone">ForkJoinTask.externalAwaitDone()</a></li>
<li><a href="#forkjoinpoolawaitjoin">ForkJoinPool.awaitJoin()</a></li>
<li><a href="#workqueuetryremoveandexecforkjointask-task">WorkQueue.tryRemoveAndExec(ForkJoinTask task)</a></li>
<li><a href="#forkjoinpoolhelpstealerworkqueue-w-forkjointask-task">ForkJoinPool.helpStealer(WorkQueue w, ForkJoinTask task)</a></li>
<li><a href="#forkjoinpooltrycompensateworkqueue-w">ForkJoinPool.tryCompensate(WorkQueue w)</a></li>
</ul>
</li>
</ul>
</li>
<li>Fork/Join的陷阱与注意事项
<ul>
<li><a href="#%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84fork">避免不必要的fork()</a></li>
<li><a href="#%E6%B3%A8%E6%84%8Fforkcomputejoin%E7%9A%84%E9%A1%BA%E5%BA%8F">注意fork()、compute()、join()的顺序</a></li>
<li><a href="#%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%AD%90%E4%BB%BB%E5%8A%A1%E7%B2%92%E5%BA%A6">选择合适的子任务粒度</a></li>
<li><a href="#%E9%81%BF%E5%85%8D%E9%87%8D%E9%87%8F%E7%BA%A7%E4%BB%BB%E5%8A%A1%E5%88%92%E5%88%86%E4%B8%8E%E7%BB%93%E6%9E%9C%E5%90%88%E5%B9%B6">避免重量级任务划分与结果合并</a></li>
</ul>
</li>
<li>再深入理解
<ul>
<li><a href="#%E6%9C%89%E5%93%AA%E4%BA%9Bjdk%E6%BA%90%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%86forkjoin%E6%80%9D%E6%83%B3">有哪些JDK源码中使用了Fork/Join思想?</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8executors%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%88%9B%E5%BB%BAforkjoinpool">使用Executors工具类创建ForkJoinPool</a></li>
<li><a href="#%E5%85%B3%E4%BA%8Eforkjoin%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">关于Fork/Join异常处理</a></li>
</ul>
</li>
<li>一些Fork/Join例子
<ul>
<li><a href="#%E9%87%87%E7%94%A8forkjoin%E6%9D%A5%E5%BC%82%E6%AD%A5%E8%AE%A1%E7%AE%9712310000%E7%9A%84%E7%BB%93%E6%9E%9C">采用Fork/Join来异步计算1+2+3+…+10000的结果</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">实现斐波那契数列</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解fork-join框架"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3fork-join%E6%A1%86%E6%9E%B6">#</a> 带着BAT大厂的面试问题去理解Fork/Join框架</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解Fork/Join框架。@pdai</p>
<ul>
<li>Fork/Join主要用来解决什么样的问题?</li>
<li>Fork/Join框架是在哪个JDK版本中引入的?</li>
<li>Fork/Join框架主要包含哪三个模块? 模块之间的关系是怎么样的?</li>
<li>ForkJoinPool类继承关系?</li>
<li>ForkJoinTask抽象类继承关系? 在实际运用中，我们一般都会继承 RecursiveTask 、RecursiveAction 或 CountedCompleter 来实现我们的业务需求，而不会直接继承 ForkJoinTask 类。</li>
<li>整个Fork/Join 框架的执行流程/运行机制是怎么样的?</li>
<li>具体阐述Fork/Join的分治思想和work-stealing 实现方式?</li>
<li>有哪些JDK源码中使用了Fork/Join思想?</li>
<li>如何使用Executors工具类创建ForkJoinPool?</li>
<li>写一个例子: 用ForkJoin方式实现1+2+3+...+100000?</li>
<li>Fork/Join在使用时有哪些注意事项? 结合JDK中的斐波那契数列实例具体说明。</li>
</ul>
<h2><a class="header-anchor" href="#fork-join框架简介"><span></span></a><a href="#fork-join%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B">#</a> Fork/Join框架简介</h2>
<p>Fork/Join框架是Java并发工具包中的一种可以将一个大任务拆分为很多小任务来异步执行的工具，自JDK1.7引入。</p>
<h3><a class="header-anchor" href="#三个模块及关系"><span></span></a><a href="#%E4%B8%89%E4%B8%AA%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%85%B3%E7%B3%BB">#</a> 三个模块及关系</h3>
<p>Fork/Join框架主要包含三个模块:</p>
<ul>
<li>任务对象: <code>ForkJoinTask</code> (包括<code>RecursiveTask</code>、<code>RecursiveAction</code> 和 <code>CountedCompleter</code>)</li>
<li>执行Fork/Join任务的线程: <code>ForkJoinWorkerThread</code></li>
<li>线程池: <code>ForkJoinPool</code></li>
</ul>
<p>这三者的关系是: ForkJoinPool可以通过池中的ForkJoinWorkerThread来处理ForkJoinTask任务。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// from 《A Java Fork/Join Framework》Dong Lea</span></span>
<span class="line"><span style="color:#E5C07B">Result</span><span style="color:#61AFEF"> solve</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75"> problem) {</span></span>
<span class="line"><span style="color:#C678DD">	if</span><span style="color:#E06C75"> (problem is small)</span></span>
<span class="line"><span style="color:#E06C75"> 		directly solve problem</span></span>
<span class="line"><span style="color:#C678DD"> 	else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75"> 		split problem into independent parts</span></span>
<span class="line"><span style="color:#E06C75"> 		fork </span><span style="color:#C678DD">new</span><span style="color:#E06C75"> subtasks to solve each part</span></span>
<span class="line"><span style="color:#E06C75"> 		join all subtasks</span></span>
<span class="line"><span style="color:#E06C75"> 		compose result from subresults</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ForkJoinPool 只接收 ForkJoinTask 任务(在实际使用中，也可以接收 Runnable/Callable 任务，但在真正运行时，也会把这些任务封装成 ForkJoinTask 类型的任务)，RecursiveTask 是 ForkJoinTask 的子类，是一个可以递归执行的 ForkJoinTask，RecursiveAction 是一个无返回值的 RecursiveTask，CountedCompleter 在任务完成执行后会触发执行一个自定义的钩子函数。</p>
<p>在实际运用中，我们一般都会继承 <code>RecursiveTask</code> 、<code>RecursiveAction</code> 或 <code>CountedCompleter</code> 来实现我们的业务需求，而不会直接继承 ForkJoinTask 类。</p>
<h3><a class="header-anchor" href="#核心思想-分治算法-divide-and-conquer"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95-divide-and-conquer">#</a> 核心思想: 分治算法(Divide-and-Conquer)</h3>
<p>分治算法(Divide-and-Conquer)把任务递归的拆分为各个子任务，这样可以更好的利用系统资源，尽可能的使用所有可用的计算能力来提升应用性能。首先看一下 Fork/Join 框架的任务运行机制:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>这里也可以一并看下: <a href="">算法思想 - 分治算法</a></li>
</ul>
<h3><a class="header-anchor" href="#核心思想-work-stealing-工作窃取-算法"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3-work-stealing-%E5%B7%A5%E4%BD%9C%E7%AA%83%E5%8F%96-%E7%AE%97%E6%B3%95">#</a> 核心思想: work-stealing(工作窃取)算法</h3>
<p>work-stealing(工作窃取)算法: 线程池内的所有工作线程都尝试找到并执行已经提交的任务，或者是被其他活动任务创建的子任务(如果不存在就阻塞等待)。这种特性使得 ForkJoinPool 在运行多个可以产生子任务的任务，或者是提交的许多小任务时效率更高。尤其是构建异步模型的 ForkJoinPool 时，对不需要合并(join)的事件类型任务也非常适用。</p>
<p>在 ForkJoinPool 中，线程池中每个工作线程(ForkJoinWorkerThread)都对应一个任务队列(WorkQueue)，工作线程优先处理来自自身队列的任务(LIFO或FIFO顺序，参数 mode 决定)，然后以FIFO的顺序随机窃取其他队列中的任务。</p>
<p>具体思路如下:</p>
<ul>
<li>每个线程都有自己的一个WorkQueue，该工作队列是一个双端队列。</li>
<li>队列支持三个功能push、pop、poll</li>
<li>push/pop只能被队列的所有者线程调用，而poll可以被其他线程调用。</li>
<li>划分的子任务调用fork时，都会被push到自己的队列中。</li>
<li>默认情况下，工作线程从自己的双端队列获出任务并执行。</li>
<li>当自己的队列为空时，线程随机从另一个线程的队列末尾调用poll方法窃取任务。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#fork-join-框架的执行流程"><span></span></a><a href="#fork-join-%E6%A1%86%E6%9E%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">#</a> Fork/Join 框架的执行流程</h3>
<p>上图可以看出ForkJoinPool 中的任务执行分两种:</p>
<ul>
<li>直接通过 FJP 提交的外部任务(external/submissions task)，存放在 workQueues 的偶数槽位；</li>
<li>通过内部 fork 分割的子任务(Worker task)，存放在 workQueues 的奇数槽位。</li>
</ul>
<p>那Fork/Join 框架的执行流程是什么样的?</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>后续的源码解析将围绕上图进行。</p>
</blockquote>
<h2><a class="header-anchor" href="#fork-join类关系"><span></span></a><a href="#fork-join%E7%B1%BB%E5%85%B3%E7%B3%BB">#</a> Fork/Join类关系</h2>
<h3><a class="header-anchor" href="#forkjoinpool继承关系"><span></span></a><a href="#forkjoinpool%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> ForkJoinPool继承关系</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>内部类介绍:</p>
<ul>
<li>ForkJoinWorkerThreadFactory: 内部线程工厂接口，用于创建工作线程ForkJoinWorkerThread</li>
<li>DefaultForkJoinWorkerThreadFactory: ForkJoinWorkerThreadFactory 的默认实现类</li>
<li>InnocuousForkJoinWorkerThreadFactory: 实现了 ForkJoinWorkerThreadFactory，无许可线程工厂，当系统变量中有系统安全管理相关属性时，默认使用这个工厂创建工作线程。</li>
<li>EmptyTask: 内部占位类，用于替换队列中 join 的任务。</li>
<li>ManagedBlocker: 为 ForkJoinPool 中的任务提供扩展管理并行数的接口，一般用在可能会阻塞的任务(如在 Phaser 中用于等待 phase 到下一个generation)。</li>
<li>WorkQueue: ForkJoinPool 的核心数据结构，本质上是work-stealing 模式的双端任务队列，内部存放 ForkJoinTask 对象任务，使用 @Contented 注解修饰防止伪共享。
<ul>
<li>工作线程在运行中产生新的任务(通常是因为调用了 fork())时，此时可以把 WorkQueue 的数据结构视为一个栈，新的任务会放入栈顶(top 位)；工作线程在处理自己工作队列的任务时，按照 LIFO 的顺序。</li>
<li>工作线程在处理自己的工作队列同时，会尝试窃取一个任务(可能是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的队列任务)，此时可以把 WorkQueue 的数据结构视为一个 FIFO 的队列，窃取的任务位于其他线程的工作队列的队首(base位)。</li>
</ul>
</li>
<li>伪共享状态: 缓存系统中是以缓存行(cache line)为单位存储的。缓存行是2的整数幂个连续字节，一般为32-256个字节。最常见的缓存行大小是64个字节。当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。</li>
</ul>
<h3><a class="header-anchor" href="#forkjointask继承关系"><span></span></a><a href="#forkjointask%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> ForkJoinTask继承关系</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>ForkJoinTask 实现了 Future 接口，说明它也是一个可取消的异步运算任务，实际上ForkJoinTask 是 Future 的轻量级实现，主要用在纯粹是计算的函数式任务或者操作完全独立的对象计算任务。fork 是主运行方法，用于异步执行；而 join 方法在任务结果计算完毕之后才会运行，用来合并或返回计算结果。 其内部类都比较简单，ExceptionNode 是用于存储任务执行期间的异常信息的单向链表；其余四个类是为 Runnable/Callable 任务提供的适配器类，用于把 Runnable/Callable 转化为 ForkJoinTask 类型的任务(因为 ForkJoinPool 只可以运行 ForkJoinTask 类型的任务)。</p>
<h2><a class="header-anchor" href="#fork-join框架源码解析"><span></span></a><a href="#fork-join%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">#</a> Fork/Join框架源码解析</h2>
<blockquote>
<p>分析思路: 在对类层次结构有了解以后，我们先看下内部核心参数，然后分析上述流程图。会分4个部分:</p>
</blockquote>
<ul>
<li>首先介绍任务的提交流程 - 外部任务(external/submissions task)提交</li>
<li>然后介绍任务的提交流程 - 子任务(Worker task)提交</li>
<li>再分析任务的执行过程(ForkJoinWorkerThread.run()到ForkJoinTask.doExec()这一部分)；</li>
<li>最后介绍任务的结果获取(ForkJoinTask.join()和ForkJoinTask.invoke())</li>
</ul>
<h3><a class="header-anchor" href="#forkjoinpool"><span></span></a><a href="#forkjoinpool">#</a> ForkJoinPool</h3>
<h4><a class="header-anchor" href="#核心参数"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">#</a> 核心参数</h4>
<p>在后面的源码解析中，我们会看到大量的位运算，这些位运算都是通过我们接下来介绍的一些常量参数来计算的。</p>
<p>例如，如果要更新活跃线程数，使用公式(UC_MASK &amp; (c + AC_UNIT)) | (SP_MASK &amp; c)；c 代表当前 ctl，UC_MASK 和 SP_MASK 分别是高位和低位掩码，AC_UNIT 为活跃线程的增量数，使用(UC_MASK &amp; (c + AC_UNIT))就可以计算出高32位，然后再加上低32位(SP_MASK &amp; c)，就拼接成了一个新的ctl。</p>
<p>这些运算的可读性很差，看起来有些复杂。在后面源码解析中有位运算的地方我都会加上注释，大家只需要了解它们的作用即可。</p>
<p>ForkJoinPool 与 内部类 WorkQueue 共享的一些常量:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Constants shared across ForkJoinPool and WorkQueue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 限定参数</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SMASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xffff</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        //  低位掩码，也是最大索引位</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_CAP </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x7fff</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        //  工作线程最大容量</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> EVENMASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xfffe</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        //  偶数低位掩码</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SQMASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x007e</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        //  workQueues 数组最多64个槽位</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// ctl 子域和 WorkQueue.scanState 的掩码和标志位</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SCANNING </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 标记是否正在运行任务</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> INACTIVE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 31</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // 失活状态  负数</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SS_SEQ </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 16</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // 版本戳，防止ABA问题</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// ForkJoinPool.config 和 WorkQueue.config 的配置信息标记</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MODE_MASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xffff</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 16</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 模式掩码</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> LIFO_QUEUE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //LIFO队列</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> FIFO_QUEUE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 16</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//FIFO队列</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SHARED_QUEUE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 31</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // 共享模式队列，负数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ForkJoinPool 中的相关常量和实例字段:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//  低位和高位掩码</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> SP_MASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xffffffffL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> UC_MASK </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">SP_MASK</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 活跃线程数</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> AC_SHIFT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 48</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> AC_UNIT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x0001L</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#E06C75"> AC_SHIFT</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //活跃线程数增量</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> AC_MASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xffffL</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#E06C75"> AC_SHIFT</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //活跃线程数掩码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 工作线程数</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> TC_SHIFT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 32</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> TC_UNIT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x0001L</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#E06C75"> TC_SHIFT</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //工作线程数增量</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> TC_MASK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xffffL</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#E06C75"> TC_SHIFT</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //掩码</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> ADD_WORKER </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x0001L</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#E06C75"> (TC_SHIFT </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 15</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 创建工作线程标志</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 池状态</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> RSLOCK </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> RSIGNAL </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> STARTED </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> STOP </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 29</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> TERMINATED </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 30</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SHUTDOWN </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 31</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 实例字段</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> ctl</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 主控制参数</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> runState</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // 运行状态锁</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> config</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                    // 并行度|模式</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> indexSeed</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                       // 用于生成工作线程索引</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#E5C07B"> WorkQueue</span><span style="color:#E06C75">[] workQueues</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // 主对象注册信息，workQueue</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> ForkJoinWorkerThreadFactory</span><span style="color:#E06C75"> factory</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 线程工厂</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> UncaughtExceptionHandler</span><span style="color:#E06C75"> ueh</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 每个工作线程的异常信息</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> workerNamePrefix</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // 用于创建工作线程的名称</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#E5C07B"> AtomicLong</span><span style="color:#E06C75"> stealCounter</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // 偷取任务总数，也可作为同步监视器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/** 静态初始化字段 */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//线程工厂</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ForkJoinWorkerThreadFactory</span><span style="color:#E06C75"> defaultForkJoinWorkerThreadFactory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//启动或杀死线程的方法调用者的权限</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> RuntimePermission</span><span style="color:#E06C75"> modifyThreadPermission</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 公共静态pool</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ForkJoinPool</span><span style="color:#E06C75"> common</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//并行度，对应内部common池</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> commonParallelism</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//备用线程数，在tryCompensate中使用</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> commonMaxSpares</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//创建workerNamePrefix(工作线程名称前缀)时的序号</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> poolNumberSequence</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//线程阻塞等待新的任务的超时值(以纳秒为单位)，默认2秒</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> IDLE_TIMEOUT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2000L</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1000L</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1000L</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 2sec</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//空闲超时时间，防止timer未命中</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> TIMEOUT_SLOP </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 20L</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1000L</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1000L</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 20ms</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//默认备用线程数</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> DEFAULT_COMMON_MAX_SPARES </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 256</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//阻塞前自旋的次数，用在在awaitRunStateLock和awaitWork中</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SPINS  </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//indexSeed的增量</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SEED_INCREMENT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x9e3779b9</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: ForkJoinPool 的内部状态都是通过一个64位的 long 型 变量ctl来存储，它由四个16位的子域组成:</p>
<ul>
<li>AC: 正在运行工作线程数减去目标并行度，高16位</li>
<li>TC: 总工作线程数减去目标并行度，中高16位</li>
<li>SS: 栈顶等待线程的版本计数和状态，中低16位</li>
<li>ID: 栈顶 WorkQueue 在池中的索引(poolIndex)，低16位</li>
</ul>
<p>在后面的源码解析中，某些地方也提取了ctl的低32位(sp=(int)ctl)来检查工作线程状态，例如，当sp不为0时说明当前还有空闲工作线程。</p>
<h4><a class="header-anchor" href="#forkjoinpool-workqueue-中的相关属性"><span></span></a><a href="#forkjoinpool-workqueue-%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7">#</a> ForkJoinPool.WorkQueue 中的相关属性:</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//初始队列容量，2的幂</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> INITIAL_QUEUE_CAPACITY </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 13</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//最大队列容量</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAXIMUM_QUEUE_CAPACITY </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 26</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 64M</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 实例字段</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> scanState</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // Woker状态, &lt;0: inactive; odd:scanning</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> stackPred</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 记录前一个栈顶的ctl</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> nsteals</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // 偷取任务数</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> hint</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                  // 记录偷取者索引，初始为随机索引</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> config</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                // 池索引和模式</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> qlock</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 1: locked, &lt; 0: terminate; else 0</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> base</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         //下一个poll操作的索引(栈底/队列头)</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> top</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   //  下一个push操作的索引(栈顶/队列尾)</span></span>
<span class="line"><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] array</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">   // 任务数组</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> ForkJoinPool</span><span style="color:#E06C75"> pool</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">   // the containing pool (may be null)</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> ForkJoinWorkerThread</span><span style="color:#E06C75"> owner</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 当前工作队列的工作线程，共享模式下为null</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#E5C07B"> Thread</span><span style="color:#E06C75"> parker</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // 调用park阻塞期间为owner，其他情况为null</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> currentJoin</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 记录被join过来的任务</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> currentSteal</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 记录从其他工作队列偷取过来的任务</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#forkjointask"><span></span></a><a href="#forkjointask">#</a> ForkJoinTask</h3>
<h4><a class="header-anchor" href="#核心参数-1"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0-1">#</a> 核心参数</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/** 任务运行状态 */</span></span>
<span class="line"><span style="color:#C678DD">volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> status</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 任务运行状态</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> DONE_MASK   </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xf0000000</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 任务完成状态标志位</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> NORMAL      </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xf0000000</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // must be negative</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> CANCELLED   </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0xc0000000</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // must be &lt; NORMAL</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> EXCEPTIONAL </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x80000000</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // must be &lt; CANCELLED</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SIGNAL      </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00010000</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // must be &gt;= 1 &lt;&lt; 16 等待信号</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SMASK       </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x0000ffff</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //  低位掩码</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#fork-join框架源码解析-1"><span></span></a><a href="#fork-join%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1">#</a> Fork/Join框架源码解析</h2>
<h3><a class="header-anchor" href="#构造函数"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ForkJoinPool</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> parallelism</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                    ForkJoinWorkerThreadFactory</span><span style="color:#E06C75"> factory</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                    UncaughtExceptionHandler</span><span style="color:#E06C75"> handler</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                    boolean</span><span style="color:#E06C75"> asyncMode) {</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">checkParallelism</span><span style="color:#E06C75">(parallelism)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#61AFEF">            checkFactory</span><span style="color:#E06C75">(factory)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">            handler</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">            asyncMode </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> FIFO_QUEUE </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> LIFO_QUEUE</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">            "ForkJoinPool-"</span><span style="color:#56B6C2"> +</span><span style="color:#61AFEF"> nextPoolId</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "-worker-"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    checkPermission</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 在 ForkJoinPool 中我们可以自定义四个参数:</p>
<ul>
<li>parallelism: 并行度，默认为CPU数，最小为1</li>
<li>factory: 工作线程工厂；</li>
<li>handler: 处理工作线程运行任务时的异常情况类，默认为null；</li>
<li>asyncMode: 是否为异步模式，默认为 false。如果为true，表示子任务的执行遵循 FIFO 顺序并且任务不能被合并(join)，这种模式适用于工作线程只运行事件类型的异步任务。</li>
</ul>
<p>在多数场景使用时，如果没有太强的业务需求，我们一般直接使用 ForkJoinPool 中的common池，在JDK1.8之后提供了ForkJoinPool.commonPool()方法可以直接使用common池，来看一下它的构造:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ForkJoinPool</span><span style="color:#61AFEF"> makeCommonPool</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> parallelism </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinWorkerThreadFactory</span><span style="color:#E06C75"> factory </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    UncaughtExceptionHandler</span><span style="color:#E06C75"> handler </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {  </span><span style="color:#7F848E;font-style:italic">// ignore exceptions in accessing/parsing</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> pp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getProperty</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#98C379">"java.util.concurrent.ForkJoinPool.common.parallelism"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//并行度</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> fp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getProperty</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#98C379">"java.util.concurrent.ForkJoinPool.common.threadFactory"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//线程工厂</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> hp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getProperty</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#98C379">"java.util.concurrent.ForkJoinPool.common.exceptionHandler"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//异常处理类</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (pp </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            parallelism </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(pp);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (fp </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            factory </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((ForkJoinWorkerThreadFactory) ClassLoader</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#61AFEF">                    getSystemClassLoader</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(fp).</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (hp </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            handler </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((UncaughtExceptionHandler) ClassLoader</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#61AFEF">                    getSystemClassLoader</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(hp).</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> ignore</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (factory </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSecurityManager</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            factory </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> defaultForkJoinWorkerThreadFactory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#7F848E;font-style:italic"> // use security-managed default</span></span>
<span class="line"><span style="color:#E06C75">            factory </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InnocuousForkJoinWorkerThreadFactory</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (parallelism </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic"> // default 1 less than #cores</span></span>
<span class="line"><span style="color:#E06C75">            (parallelism </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Runtime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getRuntime</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">availableProcessors</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">        parallelism </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//默认并行度为1</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (parallelism </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAX_CAP)</span></span>
<span class="line"><span style="color:#E06C75">        parallelism </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> MAX_CAP</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ForkJoinPool</span><span style="color:#E06C75">(parallelism</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> factory</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> handler</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> LIFO_QUEUE</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">            "ForkJoinPool.commonPool-worker-"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用common pool的优点就是我们可以通过指定系统参数的方式定义“并行度、线程工厂和异常处理类”；并且它使用的是同步模式，也就是说可以支持任务合并(join)。</p>
<h3><a class="header-anchor" href="#执行流程-外部任务-external-submissions-task-提交"><span></span></a><a href="#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-%E5%A4%96%E9%83%A8%E4%BB%BB%E5%8A%A1-external-submissions-task-%E6%8F%90%E4%BA%A4">#</a> 执行流程 - 外部任务(external/submissions task)提交</h3>
<p>向 ForkJoinPool 提交任务有三种方式:</p>
<ul>
<li>invoke()会等待任务计算完毕并返回计算结果；</li>
<li>execute()是直接向池提交一个任务来异步执行，无返回结果；</li>
<li>submit()也是异步执行，但是会返回提交的任务，在适当的时候可通过task.get()获取执行结果。</li>
</ul>
<p>这三种提交方式都都是调用externalPush()方法来完成，所以接下来我们将从externalPush()方法开始逐步分析外部任务的执行过程。</p>
<h4><a class="header-anchor" href="#externalpush-forkjointask-task"><span></span></a><a href="#externalpush-forkjointask-task">#</a> externalPush(ForkJoinTask&lt;?&gt; task)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//添加给定任务到submission队列中</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> externalPush</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ThreadLocalRandom</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProbe</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//探针值，用于计算WorkQueue槽位索引</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> runState</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            (q </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[m </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SQMASK]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic"> //获取随机偶数槽位的workQueue</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(q, QLOCK, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//锁定workQueue</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> am</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                (am </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((am </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> s) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算任务索引位置</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(a, j, task);</span><span style="color:#7F848E;font-style:italic">//任务入列</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(q, QTOP, s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//更新push slot</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putIntVolatile</span><span style="color:#ABB2BF">(q, QLOCK, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//解除锁定</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">                signalWork</span><span style="color:#E06C75">(ws</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> q)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//任务数小于1时尝试创建或激活一个工作线程</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(q, QLOCK, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//解除锁定</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#61AFEF">    externalSubmit</span><span style="color:#E06C75">(task)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//初始化workQueues及相关属性</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先说明一下externalPush和externalSubmit两个方法的联系: 它们的作用都是把任务放到队列中等待执行。不同的是，externalSubmit可以说是完整版的externalPush，在任务首次提交时，需要初始化workQueues及其他相关属性，这个初始化操作就是externalSubmit来完成的；而后再向池中提交的任务都是通过简化版的externalSubmit-externalPush来完成。</p>
<p>externalPush的执行流程很简单: 首先找到一个随机偶数槽位的 workQueue，然后把任务放入这个 workQueue 的任务数组中，并更新top位。如果队列的剩余任务数小于1，则尝试创建或激活一个工作线程来运行任务(防止在externalSubmit初始化时发生异常导致工作线程创建失败)。</p>
<h4><a class="header-anchor" href="#externalsubmit-forkjointask-task"><span></span></a><a href="#externalsubmit-forkjointask-task">#</a> externalSubmit(ForkJoinTask&lt;?&gt; task)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//任务提交</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> externalSubmit</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //初始化调用线程的探针值，用于计算WorkQueue索引</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                                    // initialize caller's probe</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ThreadLocalRandom</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProbe</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocalRandom</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">localInit</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ThreadLocalRandom</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProbe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#E5C07B">        WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        WorkQueue</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        boolean</span><span style="color:#E06C75"> move </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((rs </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> runState) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 池已关闭</span></span>
<span class="line"><span style="color:#61AFEF">            tryTerminate</span><span style="color:#E06C75">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // help terminate</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RejectedExecutionException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //初始化workQueues</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> STARTED) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#7F848E;font-style:italic">     // initialize</span></span>
<span class="line"><span style="color:#E06C75">                ((ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> ns </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lockRunState</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//锁定runState</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //初始化</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> STARTED) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //初始化stealCounter</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, STEALCOUNTER, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                            new</span><span style="color:#61AFEF"> AtomicLong</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //创建workQueues，容量为2的幂次方</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // create workQueues array with size a power of two</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> config </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SMASK</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // ensure at least 2 slots</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#C678DD"> :</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    n </span><span style="color:#56B6C2">|=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    n </span><span style="color:#56B6C2">|=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    n </span><span style="color:#56B6C2">|=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    n </span><span style="color:#56B6C2">|=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    n </span><span style="color:#56B6C2">|=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 16</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    workQueues </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> WorkQueue</span><span style="color:#E06C75">[n]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    ns </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> STARTED</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">                unlockRunState</span><span style="color:#E06C75">(rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">RSLOCK) </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> ns)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//解锁并更新runState</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((q </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SQMASK]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//获取随机偶数槽位的workQueue</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">qlock</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(q, QLOCK, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//锁定 workQueue</span></span>
<span class="line"><span style="color:#E5C07B">                ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//当前workQueue的全部任务</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                boolean</span><span style="color:#E06C75"> submitted </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // initial submission or resizing</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> {                      </span><span style="color:#7F848E;font-style:italic">// locked version of push</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> ((a </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E06C75">                            (a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">growArray</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//扩容</span></span>
<span class="line"><span style="color:#C678DD">                        int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (((</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> s) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(a, j, task);</span><span style="color:#7F848E;font-style:italic">//放入给定任务</span></span>
<span class="line"><span style="color:#E5C07B">                        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(q, QTOP, s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//修改push slot</span></span>
<span class="line"><span style="color:#E06C75">                        submitted </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(q, QLOCK, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//解除锁定</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (submitted) {</span><span style="color:#7F848E;font-style:italic">//任务提交成功，创建或激活工作线程</span></span>
<span class="line"><span style="color:#61AFEF">                    signalWork</span><span style="color:#E06C75">(ws</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> q)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//创建或激活一个工作线程来运行任务</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">            move </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // move on failure 操作失败，重新获取探针值</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (((rs </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> runState) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> RSLOCK) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// create new queue</span></span>
<span class="line"><span style="color:#E06C75">            q </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> WorkQueue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hint</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">config</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> SHARED_QUEUE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> INACTIVE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lockRunState</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // publish index</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (rs </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                    k </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> ws[k] </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                ws[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 更新索引k位值的workQueue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //else terminated</span></span>
<span class="line"><span style="color:#61AFEF">            unlockRunState</span><span style="color:#E06C75">(rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">RSLOCK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span></span>
<span class="line"><span style="color:#E06C75">            move </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // move if busy</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (move)</span></span>
<span class="line"><span style="color:#E06C75">            r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ThreadLocalRandom</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">advanceProbe</span><span style="color:#ABB2BF">(r);</span><span style="color:#7F848E;font-style:italic">//重新获取线程探针值</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: externalSubmit是externalPush的完整版本，主要用于第一次提交任务时初始化workQueues及相关属性，并且提交给定任务到队列中。具体执行步骤如下:</p>
<ul>
<li>如果池为终止状态(runState&lt;0)，调用tryTerminate来终止线程池，并抛出任务拒绝异常；</li>
<li>如果尚未初始化，就为 FJP 执行初始化操作: 初始化stealCounter、创建workerQueues，然后继续自旋；</li>
<li>初始化完成后，执行在externalPush中相同的操作: 获取 workQueue，放入指定任务。任务提交成功后调用signalWork方法创建或激活线程；</li>
<li>如果在步骤3中获取到的 workQueue 为null，会在这一步中创建一个 workQueue，创建成功继续自旋执行第三步操作；</li>
<li>如果非上述情况，或者有线程争用资源导致获取锁失败，就重新获取线程探针值继续自旋。</li>
</ul>
<h4><a class="header-anchor" href="#signalwork-workqueue-ws-workqueue-q"><span></span></a><a href="#signalwork-workqueue-ws-workqueue-q">#</a> signalWork(WorkQueue[] ws, WorkQueue q)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> signalWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WorkQueue</span><span style="color:#E06C75"> q) {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> sp</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">) {                       </span><span style="color:#7F848E;font-style:italic">// too few active</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((sp </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) c) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {                  </span><span style="color:#7F848E;font-style:italic">// no idle workers</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((c </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> ADD_WORKER) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">)            </span><span style="color:#7F848E;font-style:italic">// too few workers</span></span>
<span class="line"><span style="color:#61AFEF">                tryAddWorker</span><span style="color:#E06C75">(c)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//工作线程太少，添加新的工作线程</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (ws </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)                            </span><span style="color:#7F848E;font-style:italic">// unstarted/terminated</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &lt;=</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> sp </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SMASK))         </span><span style="color:#7F848E;font-style:italic">// terminated</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((v </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[i]) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)                   </span><span style="color:#7F848E;font-style:italic">// terminating</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //计算ctl，加上版本戳SS_SEQ避免ABA问题</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> vs </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (sp </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> SS_SEQ) </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">INACTIVE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // next scanState</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> d </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> sp </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                  // screen CAS</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //计算活跃线程数(高32位)并更新为下一个栈顶的scanState(低32位)</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> nc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (UC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> AC_UNIT)) </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> (SP_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stackPred</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (d </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, nc)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> vs</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                      // activate v</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parker</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unpark</span><span style="color:#ABB2BF">(p);</span><span style="color:#7F848E;font-style:italic">//唤醒阻塞线程</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (q </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> ==</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#E06C75">)          </span><span style="color:#7F848E;font-style:italic">// no more work</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 新建或唤醒一个工作线程，在externalPush、externalSubmit、workQueue.push、scan中调用。如果还有空闲线程，则尝试唤醒索引到的 WorkQueue 的parker线程；如果工作线程过少((ctl &amp; ADD_WORKER) != 0L)，则调用tryAddWorker添加一个新的工作线程。</p>
<h4><a class="header-anchor" href="#tryaddworker-long-c"><span></span></a><a href="#tryaddworker-long-c">#</a> tryAddWorker(long c)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> tryAddWorker</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> add </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> nc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((AC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> AC_UNIT)) </span><span style="color:#56B6C2">|</span></span>
<span class="line"><span style="color:#E06C75">                   (TC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> TC_UNIT)))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (ctl </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> stop</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // check if terminating</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((stop </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lockRunState</span><span style="color:#E06C75">()) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> STOP) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                add </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, nc);</span></span>
<span class="line"><span style="color:#61AFEF">            unlockRunState</span><span style="color:#E06C75">(rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">RSLOCK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//释放锁</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (stop </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (add) {</span></span>
<span class="line"><span style="color:#61AFEF">                createWorker</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//创建工作线程</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (((c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> ADD_WORKER) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)c </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 尝试添加一个新的工作线程，首先更新ctl中的工作线程数，然后调用createWorker()创建工作线程。</p>
<h4><a class="header-anchor" href="#createworker"><span></span></a><a href="#createworker">#</a> createWorker()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> createWorker</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinWorkerThreadFactory</span><span style="color:#E06C75"> fac </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> factory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Throwable</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinWorkerThread</span><span style="color:#E06C75"> wt </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (fac </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (wt </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fac</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            wt</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> rex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">        ex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> rex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#61AFEF">    deregisterWorker</span><span style="color:#E06C75">(wt</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ex)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//线程创建失败处理</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: createWorker首先通过线程工厂创一个新的ForkJoinWorkerThread，然后启动这个工作线程(wt.start())。如果期间发生异常，调用deregisterWorker处理线程创建失败的逻辑(deregisterWorker在后面再详细说明)。</p>
<p>ForkJoinWorkerThread 的构造函数如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">protected</span><span style="color:#61AFEF"> ForkJoinWorkerThread</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinPool</span><span style="color:#E06C75"> pool) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Use a placeholder until a useful name can be set in registerWorker</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(</span><span style="color:#98C379">"aForkJoinWorkerThread"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pool</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> pool</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">workQueue</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> pool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">registerWorker</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 ForkJoinWorkerThread 在构造时首先调用父类 Thread 的方法，然后为工作线程注册pool和workQueue，而workQueue的注册任务由ForkJoinPool.registerWorker来完成。</p>
<h4><a class="header-anchor" href="#registerworker"><span></span></a><a href="#registerworker">#</a> registerWorker()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> WorkQueue</span><span style="color:#61AFEF"> registerWorker</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinWorkerThread</span><span style="color:#E06C75"> wt) {</span></span>
<span class="line"><span style="color:#E5C07B">    UncaughtExceptionHandler</span><span style="color:#E06C75"> handler</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //设置为守护线程</span></span>
<span class="line"><span style="color:#E5C07B">    wt</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setDaemon</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">                           // configure thread</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((handler </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ueh) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        wt</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setUncaughtExceptionHandler</span><span style="color:#ABB2BF">(handler);</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75"> w </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> WorkQueue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> wt)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//构造新的WorkQueue</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                                    // assign a pool index</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> mode </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> config </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> MODE_MASK</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lockRunState</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                    // skip if no array</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //生成新建WorkQueue的索引</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> indexSeed </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> SEED_INCREMENT</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // unlikely to collide</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> m </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">|</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // Worker任务放在奇数索引位 odd-numbered indices</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (ws[i] </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {                  </span><span style="color:#7F848E;font-style:italic">// collision 已存在，重新计算索引位</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> probes </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // step by approx half n</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> step </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 4</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 2</span><span style="color:#C678DD"> :</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> EVENMASK) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //查找可用的索引位</span></span>
<span class="line"><span style="color:#C678DD">                while</span><span style="color:#E06C75"> (ws[i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> step) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m] </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">probes </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> n) {</span><span style="color:#7F848E;font-style:italic">//所有索引位都被占用，对workQueues进行扩容</span></span>
<span class="line"><span style="color:#E06C75">                        workQueues </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(ws, n </span><span style="color:#56B6C2">&lt;&lt;=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//workQueues 扩容</span></span>
<span class="line"><span style="color:#E06C75">                        m </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        probes </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E5C07B">            w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hint</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                           // use as random seed</span></span>
<span class="line"><span style="color:#E5C07B">            w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">config</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> mode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                      // publication fence</span></span>
<span class="line"><span style="color:#E06C75">            ws[i] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">        unlockRunState</span><span style="color:#E06C75">(rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">RSLOCK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    wt</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">workerNamePrefix</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">concat</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">(i </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">)));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: registerWorker是 ForkJoinWorkerThread 构造器的回调函数，用于创建和记录工作线程的 WorkQueue。比较简单，就不多赘述了。注意在此为工作线程创建的 WorkQueue 是放在奇数索引的(代码行: i = ((s &lt;&lt; 1) | 1) &amp; m;)</p>
<h4><a class="header-anchor" href="#小结"><span></span></a><a href="#%E5%B0%8F%E7%BB%93">#</a> 小结</h4>
<p>OK，外部任务的提交流程就先讲到这里。在createWorker()中启动工作线程后(wt.start())，当为线程分配到CPU执行时间片之后会运行 ForkJoinWorkerThread 的run方法开启线程来执行任务。工作线程执行任务的流程我们在讲完内部任务提交之后会统一讲解。</p>
<h3><a class="header-anchor" href="#执行流程-子任务-worker-task-提交"><span></span></a><a href="#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-%E5%AD%90%E4%BB%BB%E5%8A%A1-worker-task-%E6%8F%90%E4%BA%A4">#</a> 执行流程: 子任务(Worker task)提交</h3>
<p>子任务的提交相对比较简单，由任务的fork()方法完成。通过上面的流程图可以看到任务被分割(fork)之后调用了ForkJoinPool.WorkQueue.push()方法直接把任务放到队列中等待被执行。</p>
<h4><a class="header-anchor" href="#forkjointask-fork"><span></span></a><a href="#forkjointask-fork">#</a> ForkJoinTask.fork()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> fork</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> ForkJoinWorkerThread)</span></span>
<span class="line"><span style="color:#E06C75">        ((ForkJoinWorkerThread)t)</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">workQueue</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">push</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinPool</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">common</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">externalPush</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 如果当前线程是 Worker 线程，说明当前任务是fork分割的子任务，通过ForkJoinPool.workQueue.push()方法直接把任务放到自己的等待队列中；否则调用ForkJoinPool.externalPush()提交到一个随机的等待队列中(外部任务)。</p>
<h4><a class="header-anchor" href="#forkjoinpool-workqueue-push"><span></span></a><a href="#forkjoinpool-workqueue-push">#</a> ForkJoinPool.WorkQueue.push()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> push</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinPool</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> top</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((a </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> array) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {    </span><span style="color:#7F848E;font-style:italic">// ignore if queue removed</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // fenced write for task visibility</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(a, ((m </span><span style="color:#56B6C2">&amp;</span><span style="color:#ABB2BF"> s) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#ABB2BF"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> ABASE, task);</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, QTOP, s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> b) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//首次提交，创建或唤醒一个工作线程</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> pool) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">signalWork</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">workQueues</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> m)</span></span>
<span class="line"><span style="color:#61AFEF">            growArray</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 首先把任务放入等待队列并更新top位；如果当前 WorkQueue 为新建的等待队列(top-base&lt;=1)，则调用signalWork方法为当前 WorkQueue 新建或唤醒一个工作线程；如果 WorkQueue 中的任务数组容量过小，则调用growArray()方法对其进行两倍扩容，growArray()方法源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">growArray</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] oldA </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> array</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//获取内部任务列表</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldA </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> oldA</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#C678DD"> :</span><span style="color:#E06C75"> INITIAL_QUEUE_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAXIMUM_QUEUE_CAPACITY)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RejectedExecutionException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Queue capacity exceeded"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldMask</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //新建一个两倍容量的任务数组</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> array </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[size]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (oldA </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (oldMask </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> oldA</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            (t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> top) </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> mask </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //从老数组中拿出数据，放到新的数组中</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// emulate poll from old array, push to new array</span></span>
<span class="line"><span style="color:#E5C07B">            ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> oldj </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((b </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> oldMask) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((b </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> mask) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(oldA, oldj);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(oldA, oldj, x, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putObjectVolatile</span><span style="color:#ABB2BF">(a, j, x);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">b </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#小结-1"><span></span></a><a href="#%E5%B0%8F%E7%BB%93-1">#</a> 小结</h4>
<p>到此，两种任务的提交流程都已经解析完毕，下一节我们来一起看看任务提交之后是如何被运行的。</p>
<h3><a class="header-anchor" href="#执行流程-任务执行"><span></span></a><a href="#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C">#</a> 执行流程: 任务执行</h3>
<p>回到我们开始时的流程图，在ForkJoinPool .createWorker()方法中创建工作线程后，会启动工作线程，系统为工作线程分配到CPU执行时间片之后会执行 ForkJoinWorkerThread 的run()方法正式开始执行任务。</p>
<h4><a class="header-anchor" href="#forkjoinworkerthread-run"><span></span></a><a href="#forkjoinworkerthread-run">#</a> ForkJoinWorkerThread.run()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">workQueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// only run once</span></span>
<span class="line"><span style="color:#E5C07B">        Throwable</span><span style="color:#E06C75"> exception </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">            onStart</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//钩子方法，可自定义扩展</span></span>
<span class="line"><span style="color:#E5C07B">            pool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">runWorker</span><span style="color:#ABB2BF">(workQueue);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            exception </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">                onTermination</span><span style="color:#E06C75">(exception)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//钩子方法，可自定义扩展</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (exception </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                    exception </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                pool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">deregisterWorker</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, exception);</span><span style="color:#7F848E;font-style:italic">//处理异常</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 方法很简单，在工作线程运行前后会调用自定义钩子函数(onStart和onTermination)，任务的运行则是调用了ForkJoinPool.runWorker()。如果全部任务执行完毕或者期间遭遇异常，则通过ForkJoinPool.deregisterWorker关闭工作线程并处理异常信息(deregisterWorker方法我们后面会详细讲解)。</p>
<h4><a class="header-anchor" href="#forkjoinpool-runworker-workqueue-w"><span></span></a><a href="#forkjoinpool-runworker-workqueue-w">#</a> ForkJoinPool.runWorker(WorkQueue w)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> runWorker</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w) {</span></span>
<span class="line"><span style="color:#E5C07B">    w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">growArray</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">                   // allocate queue</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> seed </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hint</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // initially holds randomization hint</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (seed </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 1</span><span style="color:#C678DD"> :</span><span style="color:#E06C75"> seed</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // avoid 0 for xorShift</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((t </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> scan</span><span style="color:#E06C75">(w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> r)) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//扫描任务执行</span></span>
<span class="line"><span style="color:#E5C07B">            w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">runTask</span><span style="color:#ABB2BF">(t);</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">awaitWork</span><span style="color:#E06C75">(w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> r))</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 13</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 17</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 5</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // xorshift</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: runWorker是 ForkJoinWorkerThread 的主运行方法，用来依次执行当前工作线程中的任务。函数流程很简单: 调用scan方法依次获取任务，然后调用WorkQueue .runTask运行任务；如果未扫描到任务，则调用awaitWork等待，直到工作线程/线程池终止或等待超时。</p>
<h4><a class="header-anchor" href="#forkjoinpool-scan-workqueue-w-int-r"><span></span></a><a href="#forkjoinpool-scan-workqueue-w-int-r">#</a> ForkJoinPool.scan(WorkQueue w, int r)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> scan</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> r) {</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> w </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> ss </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                     // initially non-negative</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //初始扫描起点，自旋扫描</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> origin </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> origin</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> oldSum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> checkSum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#E5C07B">            WorkQueue</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((q </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[k]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//获取workQueue</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                        (a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {      </span><span style="color:#7F848E;font-style:italic">// non-empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //计算偏移量</span></span>
<span class="line"><span style="color:#C678DD">                    long</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (((</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> b) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> ((t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(a, i)</span><span style="color:#E06C75">)) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic"> //取base位置任务</span></span>
<span class="line"><span style="color:#E5C07B">                            q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> b) {</span><span style="color:#7F848E;font-style:italic">//stable</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> (ss </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {  </span><span style="color:#7F848E;font-style:italic">//scanning</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(a, i, t, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//</span></span>
<span class="line"><span style="color:#E5C07B">                                q</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//更新base位</span></span>
<span class="line"><span style="color:#C678DD">                                if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&lt;</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)       </span><span style="color:#7F848E;font-style:italic">// signal others</span></span>
<span class="line"><span style="color:#61AFEF">                                    signalWork</span><span style="color:#E06C75">(ws</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> q)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//创建或唤醒工作线程来运行任务</span></span>
<span class="line"><span style="color:#C678DD">                                return</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            }</span></span>
<span class="line"><span style="color:#E06C75">                        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (oldSum </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic">   // try to activate 尝试激活工作线程</span></span>
<span class="line"><span style="color:#E5C07B">                                w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">                            tryRelease</span><span style="color:#E06C75">(c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ws[m </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) c]</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> AC_UNIT)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//唤醒栈顶工作线程</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //base位置任务为空或base位置偏移，随机移位重新扫描</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (ss </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)                   </span><span style="color:#7F848E;font-style:italic">// refresh</span></span>
<span class="line"><span style="color:#E06C75">                        ss </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    origin </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // move and rescan</span></span>
<span class="line"><span style="color:#E06C75">                    oldSum </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> checkSum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    continue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">                checkSum </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//队列任务为空，记录base位</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //更新索引k 继续向后查找</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> origin) {    </span><span style="color:#7F848E;font-style:italic">// continue until stable</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //运行到这里说明已经扫描了全部的 workQueues，但并未扫描到任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((ss </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (ss </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> (ss </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#E06C75">))) </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                        oldSum </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> (oldSum </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> checkSum)) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (ss </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">qlock</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)    </span><span style="color:#7F848E;font-style:italic">// already inactive</span></span>
<span class="line"><span style="color:#C678DD">                        break</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 已经被灭活或终止,跳出循环</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //对当前WorkQueue进行灭活操作</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> ns </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ss </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> INACTIVE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // try to inactivate</span></span>
<span class="line"><span style="color:#C678DD">                    long</span><span style="color:#E06C75"> nc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((SP_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> ns) </span><span style="color:#56B6C2">|</span></span>
<span class="line"><span style="color:#E06C75">                            (UC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> ((c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl) </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> AC_UNIT)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算ctl为INACTIVE状态并减少活跃线程数</span></span>
<span class="line"><span style="color:#E5C07B">                    w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stackPred</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) c</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         // hold prev stack top</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putInt</span><span style="color:#ABB2BF">(w, QSCANSTATE, ns);</span><span style="color:#7F848E;font-style:italic">//修改scanState为inactive状态</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, nc)</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//更新scanState为灭活状态</span></span>
<span class="line"><span style="color:#E06C75">                        ss </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ns</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    else</span></span>
<span class="line"><span style="color:#E5C07B">                        w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> ss</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         // back out</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">                checkSum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//重置checkSum，继续循环</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 扫描并尝试偷取一个任务。使用w.hint进行随机索引 WorkQueue，也就是说并不一定会执行当前 WorkQueue 中的任务，而是偷取别的Worker的任务来执行。</p>
<p>函数的大概执行流程如下:</p>
<ul>
<li>
<p>取随机位置的一个 WorkQueue；</p>
</li>
<li>
<p>获取base位的 ForkJoinTask，成功取到后更新base位并返回任务；如果取到的 WorkQueue 中任务数大于1，则调用signalWork创建或唤醒其他工作线程；</p>
</li>
<li>
<p>如果当前工作线程处于不活跃状态(INACTIVE)，则调用tryRelease尝试唤醒栈顶工作线程来执行。</p>
<p>tryRelease源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryRelease</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WorkQueue</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> inc) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> sp </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) c</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> vs </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (sp </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> SS_SEQ) </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">INACTIVE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //ctl低32位等于scanState，说明可以唤醒parker线程</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (v </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> sp) {          </span><span style="color:#7F848E;font-style:italic">// v is at top of stack</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //计算活跃线程数(高32位)并更新为下一个栈顶的scanState(低32位)</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> nc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (UC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> inc)) </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> (SP_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stackPred</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, nc)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> vs</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parker</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unpark</span><span style="color:#ABB2BF">(p);</span><span style="color:#7F848E;font-style:italic">//唤醒线程</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>如果base位任务为空或发生偏移，则对索引位进行随机移位，然后重新扫描；</p>
</li>
<li>
<p>如果扫描整个workQueues之后没有获取到任务，则设置当前工作线程为INACTIVE状态；然后重置checkSum，再次扫描一圈之后如果还没有任务则跳出循环返回null。</p>
</li>
</ul>
<h4><a class="header-anchor" href="#forkjoinpool-awaitwork-workqueue-w-int-r"><span></span></a><a href="#forkjoinpool-awaitwork-workqueue-w-int-r">#</a> ForkJoinPool.awaitWork(WorkQueue w, int r)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> awaitWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> r) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (w </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">qlock</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)                 </span><span style="color:#7F848E;font-style:italic">// w is terminating</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> pred </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stackPred</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> spins </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> SPINS</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ss</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((ss </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//正在扫描，跳出循环</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (spins </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 21</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            r </span><span style="color:#56B6C2">^=</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 7</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (r </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75">spins </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {         </span><span style="color:#7F848E;font-style:italic">// randomize spins</span></span>
<span class="line"><span style="color:#E5C07B">                WorkQueue</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> j</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                AtomicLong</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (pred </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                        (j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> pred </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SMASK) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                        (v </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[j]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic">        // see if pred parking</span></span>
<span class="line"><span style="color:#E06C75">                        (</span><span style="color:#E5C07B">v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parker</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">))</span></span>
<span class="line"><span style="color:#E06C75">                    spins </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> SPINS</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                // continue spinning</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">qlock</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)                     </span><span style="color:#7F848E;font-style:italic">// 当前workQueue已经终止，返回false recheck after spins</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">interrupted</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//判断线程是否被中断，并清除中断状态</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> prevctl</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> parkTime</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> deadline</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> ac </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) ((c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl) </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E06C75"> AC_SHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> (config </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SMASK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//活跃线程数</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((ac </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#61AFEF"> tryTerminate</span><span style="color:#E06C75">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)) </span><span style="color:#56B6C2">||</span><span style="color:#7F848E;font-style:italic"> //无active线程，尝试终止</span></span>
<span class="line"><span style="color:#E06C75">                    (runState </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> STOP) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)           </span><span style="color:#7F848E;font-style:italic">// pool terminating</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (ac </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> ss </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) c) {        </span><span style="color:#7F848E;font-style:italic">// is last waiter</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //计算活跃线程数(高32位)并更新为下一个栈顶的scanState(低32位)</span></span>
<span class="line"><span style="color:#E06C75">                prevctl </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (UC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> AC_UNIT)) </span><span style="color:#56B6C2">|</span><span style="color:#E06C75"> (SP_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> pred)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">short</span><span style="color:#E06C75">) (c </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#E06C75"> TC_SHIFT)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // shrink excess spares</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 2</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, prevctl)</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//总线程过量</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // else use timed wait</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //计算空闲超时时间</span></span>
<span class="line"><span style="color:#E06C75">                parkTime </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> IDLE_TIMEOUT </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> ((t </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 1</span><span style="color:#C678DD"> :</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75"> t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                deadline </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> parkTime </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> TIMEOUT_SLOP</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span></span>
<span class="line"><span style="color:#E06C75">                prevctl </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> parkTime </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> deadline </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#E06C75"> wt </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putObject</span><span style="color:#ABB2BF">(wt, PARKBLOCKER, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   // emulate LockSupport</span></span>
<span class="line"><span style="color:#E5C07B">            w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parker</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> wt</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//设置parker，准备阻塞</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> ctl </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> c)      </span><span style="color:#7F848E;font-style:italic">// recheck before park</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">, parkTime);</span><span style="color:#7F848E;font-style:italic">//阻塞指定的时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(w, QPARKER, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putObject</span><span style="color:#ABB2BF">(wt, PARKBLOCKER, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//正在扫描，说明等到任务，跳出循环</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (parkTime </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> ctl </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                    deadline </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &lt;=</span><span style="color:#D19A66"> 0L</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, prevctl)</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//未等到任务，更新ctl，返回false</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                     // shrink pool</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 回到runWorker方法，如果scan方法未扫描到任务，会调用awaitWork等待获取任务。函数的具体执行流程大家看源码，这里简单说一下:</p>
<ul>
<li>在等待获取任务期间，如果工作线程或线程池已经终止则直接返回false。如果当前无 active 线程，尝试终止线程池并返回false，如果终止失败并且当前是最后一个等待的 Worker，就阻塞指定的时间(IDLE_TIMEOUT)；等到届期或被唤醒后如果发现自己是scanning(scanState &gt;= 0)状态，说明已经等到任务，跳出等待返回true继续 scan，否则的更新ctl并返回false。</li>
</ul>
<h4><a class="header-anchor" href="#workqueue-runtask"><span></span></a><a href="#workqueue-runtask">#</a> WorkQueue.runTask()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> runTask</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (task </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">        scanState </span><span style="color:#56B6C2">&amp;=</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">SCANNING</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // mark as busy</span></span>
<span class="line"><span style="color:#E06C75">        (currentSteal </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> task)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doExec</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//更新currentSteal并执行任务</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, QCURRENTSTEAL, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // release for GC</span></span>
<span class="line"><span style="color:#61AFEF">        execLocalTasks</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//依次执行本地任务</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinWorkerThread</span><span style="color:#E06C75"> thread </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> owner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">nsteals </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)      </span><span style="color:#7F848E;font-style:italic">// collect on overflow</span></span>
<span class="line"><span style="color:#61AFEF">            transferStealCount</span><span style="color:#E06C75">(pool)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//增加偷取任务数</span></span>
<span class="line"><span style="color:#E06C75">        scanState </span><span style="color:#56B6C2">|=</span><span style="color:#E06C75"> SCANNING</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (thread </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">afterTopLevelExec</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//执行钩子函数</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 在scan方法扫描到任务之后，调用WorkQueue.runTask()来执行获取到的任务，大概流程如下:</p>
<ul>
<li>
<p>标记scanState为正在执行状态；</p>
</li>
<li>
<p>更新currentSteal为当前获取到的任务并执行它，任务的执行调用了ForkJoinTask.doExec()方法，源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//ForkJoinTask.doExec()</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> doExec</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> completed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> status) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            completed </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> exec</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//执行我们定义的任务</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> rex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#61AFEF"> setExceptionalCompletion</span><span style="color:#E06C75">(rex)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (completed)</span></span>
<span class="line"><span style="color:#E06C75">            s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> setCompletion</span><span style="color:#E06C75">(NORMAL)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>调用execLocalTasks依次执行当前WorkerQueue中的任务，源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//执行并移除所有本地任务</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> execLocalTasks</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> array</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> top </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((config </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> FIFO_QUEUE) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//FIFO模式</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getAndSetObject</span></span>
<span class="line"><span style="color:#E06C75">                        (a</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ((m </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> s) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//FIFO执行，取top任务</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, QTOP, s);</span></span>
<span class="line"><span style="color:#E5C07B">                t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doExec</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//执行</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (base </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> top </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span></span>
<span class="line"><span style="color:#61AFEF">            pollAndExecAll</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//LIFO模式执行，取base任务</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>更新偷取任务数；</p>
</li>
<li>
<p>还原scanState并执行钩子函数。</p>
</li>
</ul>
<h4><a class="header-anchor" href="#forkjoinpool-deregisterworker-forkjoinworkerthread-wt-throwable-ex"><span></span></a><a href="#forkjoinpool-deregisterworker-forkjoinworkerthread-wt-throwable-ex">#</a> ForkJoinPool.deregisterWorker(ForkJoinWorkerThread wt, Throwable ex)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> deregisterWorker</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinWorkerThread</span><span style="color:#E06C75"> wt</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Throwable</span><span style="color:#E06C75"> ex) {</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75"> w </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //1.移除workQueue</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (wt </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (w </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> wt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">workQueue</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//获取ForkJoinWorkerThread的等待队列</span></span>
<span class="line"><span style="color:#E5C07B">        WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                           // remove index from array</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> idx </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">config</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> SMASK</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算workQueue索引</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lockRunState</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//获取runState锁和当前池运行状态</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;</span><span style="color:#E06C75"> idx </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> ws[idx] </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> w)</span></span>
<span class="line"><span style="color:#E06C75">            ws[idx] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//移除workQueue</span></span>
<span class="line"><span style="color:#61AFEF">        unlockRunState</span><span style="color:#E06C75">(rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">RSLOCK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//解除runState锁</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //2.减少CTL数</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                                       // decrement counts</span></span>
<span class="line"><span style="color:#C678DD">    do</span><span style="color:#E06C75"> {} </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">compareAndSwapLong</span></span>
<span class="line"><span style="color:#E06C75">                 (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> CTL</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ((AC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> AC_UNIT)) </span><span style="color:#56B6C2">|</span></span>
<span class="line"><span style="color:#E06C75">                                       (TC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> TC_UNIT)) </span><span style="color:#56B6C2">|</span></span>
<span class="line"><span style="color:#E06C75">                                       (SP_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> c))))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //3.处理被移除workQueue内部相关参数</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (w </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">qlock</span><span style="color:#56B6C2"> =</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                             // ensure set</span></span>
<span class="line"><span style="color:#E5C07B">        w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferStealCount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancelAll</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">                            // cancel remaining tasks</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //4.如果线程未终止，替换被移除的workQueue并唤醒内部线程</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {                                    </span><span style="color:#7F848E;font-style:italic">// possibly replace</span></span>
<span class="line"><span style="color:#E5C07B">        WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> sp</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //尝试终止线程池</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">tryTerminate</span><span style="color:#E06C75">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> w </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E06C75">            (runState </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> STOP) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E06C75">            (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)              </span><span style="color:#7F848E;font-style:italic">// already terminating</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //唤醒被替换的线程，依赖于下一步</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((sp </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl)) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {         </span><span style="color:#7F848E;font-style:italic">// wake up replacement</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">tryRelease</span><span style="color:#E06C75">(c</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ws[sp </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m]</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> AC_UNIT))</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //创建工作线程替换</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (ex </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> ADD_WORKER) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">            tryAddWorker</span><span style="color:#E06C75">(c)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                      // create replacement</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#7F848E;font-style:italic">                                      // don't need replacement</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //5.处理异常</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (ex </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)                               </span><span style="color:#7F848E;font-style:italic">// help clean on way out</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinTask</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">helpExpungeStaleExceptions</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#7F848E;font-style:italic">                                          // rethrow</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinTask</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">rethrow</span><span style="color:#ABB2BF">(ex);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: deregisterWorker方法用于工作线程运行完毕之后终止线程或处理工作线程异常，主要就是清除已关闭的工作线程或回滚创建线程之前的操作，并把传入的异常抛给 ForkJoinTask 来处理。具体步骤见源码注释。</p>
<h4><a class="header-anchor" href="#小结-2"><span></span></a><a href="#%E5%B0%8F%E7%BB%93-2">#</a> 小结</h4>
<p>本节我们对任务的执行流程进行了说明，后面我们将继续介绍任务的结果获取(join/invoke)。</p>
<h3><a class="header-anchor" href="#获取任务结果-forkjointask-join-forkjointask-invoke"><span></span></a><a href="#%E8%8E%B7%E5%8F%96%E4%BB%BB%E5%8A%A1%E7%BB%93%E6%9E%9C-forkjointask-join-forkjointask-invoke">#</a> 获取任务结果 - ForkJoinTask.join() / ForkJoinTask.invoke()</h3>
<ul>
<li>join() :</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//合并任务结果</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> join</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> doJoin</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> DONE_MASK) </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NORMAL)</span></span>
<span class="line"><span style="color:#61AFEF">        reportException</span><span style="color:#E06C75">(s)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> getRawResult</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//join, get, quietlyJoin的主实现方法</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> doJoin</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Thread</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> ForkJoinWorkerThread</span><span style="color:#E06C75"> wt</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> ForkJoinPool</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> status) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> ?</span><span style="color:#E06C75"> s </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">        ((t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> ForkJoinWorkerThread) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">        (w </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (wt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (ForkJoinWorkerThread)t)</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">workQueue</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#61AFEF">        tryUnpush</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> doExec</span><span style="color:#E06C75">()) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> ?</span><span style="color:#E06C75"> s </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E5C07B">        wt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">awaitJoin</span><span style="color:#ABB2BF">(w, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0L</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#61AFEF">        externalAwaitDone</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>invoke() :</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//执行任务，并等待任务完成并返回结果</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> invoke</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> doInvoke</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> DONE_MASK) </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NORMAL)</span></span>
<span class="line"><span style="color:#61AFEF">        reportException</span><span style="color:#E06C75">(s)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> getRawResult</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//invoke, quietlyInvoke的主实现方法</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> doInvoke</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Thread</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> ForkJoinWorkerThread</span><span style="color:#E06C75"> wt</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> doExec</span><span style="color:#E06C75">()) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> ?</span><span style="color:#E06C75"> s </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">        ((t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> ForkJoinWorkerThread) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">        (wt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (ForkJoinWorkerThread)t)</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pool</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#61AFEF">        awaitJoin</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">wt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">workQueue</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">) </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#61AFEF">        externalAwaitDone</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: join()方法一把是在任务fork()之后调用，用来获取(或者叫“合并”)任务的执行结果。</p>
<p>ForkJoinTask的join()和invoke()方法都可以用来获取任务的执行结果(另外还有get方法也是调用了doJoin来获取任务结果，但是会响应运行时异常)，它们对外部提交任务的执行方式一致，都是通过externalAwaitDone方法等待执行结果。不同的是invoke()方法会直接执行当前任务；而join()方法则是在当前任务在队列 top 位时(通过tryUnpush方法判断)才能执行，如果当前任务不在 top 位或者任务执行失败调用ForkJoinPool.awaitJoin方法帮助执行或阻塞当前 join 任务。(所以在官方文档中建议了我们对ForkJoinTask任务的调用顺序，一对 fork-join操作一般按照如下顺序调用: a.fork(); b.fork(); b.join(); a.join();。因为任务 b 是后面进入队列，也就是说它是在栈顶的(top 位)，在它fork()之后直接调用join()就可以直接执行而不会调用ForkJoinPool.awaitJoin方法去等待。)</p>
<p>在这些方法中，join()相对比较全面，所以之后的讲解我们将从join()开始逐步向下分析，首先看一下join()的执行流程:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>后面的源码分析中，我们首先讲解比较简单的外部 join 任务(externalAwaitDone)，然后再讲解内部 join 任务(从ForkJoinPool.awaitJoin()开始)。</p>
<h4><a class="header-anchor" href="#forkjointask-externalawaitdone"><span></span></a><a href="#forkjointask-externalawaitdone">#</a> ForkJoinTask.externalAwaitDone()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> externalAwaitDone</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //执行任务</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">this</span><span style="color:#C678DD"> instanceof</span><span style="color:#E06C75"> CountedCompleter) </span><span style="color:#C678DD">?</span><span style="color:#7F848E;font-style:italic"> // try helping</span></span>
<span class="line"><span style="color:#E5C07B">             ForkJoinPool</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">common</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">externalHelpComplete</span><span style="color:#ABB2BF">(  </span><span style="color:#7F848E;font-style:italic">// CountedCompleter任务</span></span>
<span class="line"><span style="color:#ABB2BF">                 (</span><span style="color:#E5C07B">CountedCompleter</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#E5C07B">             ForkJoinPool</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">common</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryExternalUnpush</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> ?</span><span style="color:#61AFEF"> doExec</span><span style="color:#E06C75">() </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // ForkJoinTask任务</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> status) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//执行失败，进入等待</span></span>
<span class="line"><span style="color:#C678DD">        boolean</span><span style="color:#E06C75"> interrupted </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, STATUS, s, s </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> SIGNAL)</span><span style="color:#E06C75">) {  </span><span style="color:#7F848E;font-style:italic">//更新state</span></span>
<span class="line"><span style="color:#C678DD">                synchronized</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (status </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//SIGNAL 等待信号</span></span>
<span class="line"><span style="color:#C678DD">                        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">                            wait</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0L</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> ie</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                            interrupted </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    else</span></span>
<span class="line"><span style="color:#61AFEF">                        notifyAll</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> status) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (interrupted)</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">interrupt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 如果当前join为外部调用，则调用此方法执行任务，如果任务执行失败就进入等待。方法本身是很简单的，需要注意的是对不同的任务类型分两种情况:</p>
<ul>
<li>
<p>如果我们的任务为 CountedCompleter 类型的任务，则调用externalHelpComplete方法来执行任务。</p>
</li>
<li>
<p>其他类型的 ForkJoinTask 任务调用tryExternalUnpush来执行，源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//为外部提交者提供 tryUnpush 功能(给定任务在top位时弹出任务)</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryExternalUnpush</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ThreadLocalRandom</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProbe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            (w </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[m </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SQMASK]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            (a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (((</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //取top位任务</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(w, QLOCK, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {  </span><span style="color:#7F848E;font-style:italic">//加锁</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObject</span><span style="color:#ABB2BF">(a, j)</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> task </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">                    U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(a, j, task, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {  </span><span style="color:#7F848E;font-style:italic">//符合条件，弹出</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(w, QTOP, s </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  //更新top</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(w, QLOCK, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> //解锁，返回true</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E5C07B">            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(w, QLOCK, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  //当前任务不在top位，解锁返回false</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tryExternalUnpush的作用就是判断当前任务是否在top位，如果是则弹出任务，然后在externalAwaitDone中调用doExec()执行任务。</p>
</li>
</ul>
<h4><a class="header-anchor" href="#forkjoinpool-awaitjoin"><span></span></a><a href="#forkjoinpool-awaitjoin">#</a> ForkJoinPool.awaitJoin()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> awaitJoin</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> deadline) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (task </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> w </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prevJoin </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">currentJoin</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //获取给定Worker的join任务</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(w, QCURRENTJOIN, task);</span><span style="color:#7F848E;font-style:italic">  //把currentJoin替换为给定任务</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //判断是否为CountedCompleter类型的任务</span></span>
<span class="line"><span style="color:#E5C07B">        CountedCompleter</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> cc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (task </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> CountedCompleter) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">CountedCompleter</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) task </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> task</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)  </span><span style="color:#7F848E;font-style:italic">//已经完成|取消|异常 跳出循环</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (cc </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//CountedCompleter任务由helpComplete来完成join</span></span>
<span class="line"><span style="color:#61AFEF">                helpComplete</span><span style="color:#E06C75">(w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cc</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> ==</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryRemoveAndExec</span><span style="color:#ABB2BF">(task)</span><span style="color:#E06C75">)  </span><span style="color:#7F848E;font-style:italic">//尝试执行</span></span>
<span class="line"><span style="color:#61AFEF">                helpStealer</span><span style="color:#E06C75">(w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> task)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //队列为空或执行失败，任务可能被偷，帮助偷取者执行该任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> task</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">//已经完成|取消|异常，跳出循环</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //计算任务等待时间</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> ms</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ns</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (deadline </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                ms </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((ns </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> deadline </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((ms </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> TimeUnit</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">NANOSECONDS</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toMillis</span><span style="color:#ABB2BF">(ns)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                ms </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">tryCompensate</span><span style="color:#E06C75">(w)) {</span><span style="color:#7F848E;font-style:italic">//执行补偿操作</span></span>
<span class="line"><span style="color:#E5C07B">                task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">internalWait</span><span style="color:#ABB2BF">(ms);</span><span style="color:#7F848E;font-style:italic">//补偿执行成功，任务等待指定时间</span></span>
<span class="line"><span style="color:#E5C07B">                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAddLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, AC_UNIT);</span><span style="color:#7F848E;font-style:italic">//更新活跃线程数</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(w, QCURRENTJOIN, prevJoin);</span><span style="color:#7F848E;font-style:italic">//循环结束，替换为原来的join任务</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 如果当前 join 任务不在Worker等待队列的top位，或者任务执行失败，调用此方法来帮助执行或阻塞当前 join 的任务。函数执行流程如下:</p>
<ul>
<li>
<p>由于每次调用awaitJoin都会优先执行当前join的任务，所以首先会更新currentJoin为当前join任务；</p>
</li>
<li>
<p>进入自旋:</p>
<ul>
<li>首先检查任务是否已经完成(通过task.status &lt; 0判断)，如果给定任务执行完毕|取消|异常 则跳出循环返回执行状态s；</li>
<li>如果是 CountedCompleter 任务类型，调用helpComplete方法来完成join操作(后面笔者会开新篇来专门讲解CountedCompleter，本篇暂时不做详细解析)；</li>
<li>非 CountedCompleter 任务类型调用WorkQueue.tryRemoveAndExec尝试执行任务；</li>
<li>如果给定 WorkQueue 的等待队列为空或任务执行失败，说明任务可能被偷，调用helpStealer帮助偷取者执行任务(也就是说，偷取者帮我执行任务，我去帮偷取者执行它的任务)；</li>
<li>再次判断任务是否执行完毕(task.status &lt; 0)，如果任务执行失败，计算一个等待时间准备进行补偿操作；</li>
<li>调用tryCompensate方法为给定 WorkQueue 尝试执行补偿操作。在执行补偿期间，如果发现 资源争用|池处于unstable状态|当前Worker已终止，则调用ForkJoinTask.internalWait()方法等待指定的时间，任务唤醒之后继续自旋，ForkJoinTask.internalWait()源码如下:</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> internalWait</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> timeout) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> status) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic"> // force completer to issue notify</span></span>
<span class="line"><span style="color:#E5C07B">        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, STATUS, s, s </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> SIGNAL)</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//更新任务状态为SIGNAL(等待唤醒)</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (status </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> { </span><span style="color:#61AFEF">wait</span><span style="color:#E06C75">(timeout)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> ie</span><span style="color:#E06C75">) { }</span></span>
<span class="line"><span style="color:#C678DD">            else</span></span>
<span class="line"><span style="color:#61AFEF">                notifyAll</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
<p>在awaitJoin中，我们总共调用了三个比较复杂的方法: tryRemoveAndExec、helpStealer和tryCompensate，下面我们依次讲解。</p>
<h4><a class="header-anchor" href="#workqueue-tryremoveandexec-forkjointask-task"><span></span></a><a href="#workqueue-tryremoveandexec-forkjointask-task">#</a> WorkQueue.tryRemoveAndExec(ForkJoinTask&lt;?&gt; task)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryRemoveAndExec</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((a </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> array) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            task </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> top) </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base)) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //从top往下自旋查找</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {      </span><span style="color:#7F848E;font-style:italic">// traverse from s to b</span></span>
<span class="line"><span style="color:#C678DD">                long</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">s </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算任务索引</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObject</span><span style="color:#ABB2BF">(a, j)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">//获取索引到的任务</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> top</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // shorter than expected</span></span>
<span class="line"><span style="color:#C678DD">                else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> task) { </span><span style="color:#7F848E;font-style:italic">//给定任务为索引任务</span></span>
<span class="line"><span style="color:#C678DD">                    boolean</span><span style="color:#E06C75"> removed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> top) {      </span><span style="color:#7F848E;font-style:italic">// pop</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(a, j, task, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">//弹出任务</span></span>
<span class="line"><span style="color:#E5C07B">                            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, QTOP, s);</span><span style="color:#7F848E;font-style:italic"> //更新top</span></span>
<span class="line"><span style="color:#E06C75">                            removed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (base </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> b)      </span><span style="color:#7F848E;font-style:italic">// replace with proxy</span></span>
<span class="line"><span style="color:#E06C75">                        removed </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#ABB2BF">                                a, j, task, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> EmptyTask</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic"> //join任务已经被移除，替换为一个占位任务</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (removed)</span></span>
<span class="line"><span style="color:#E5C07B">                        task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doExec</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> //执行</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> top) { </span><span style="color:#7F848E;font-style:italic">//给定任务不是top任务</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(a, j, t, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">//弹出任务</span></span>
<span class="line"><span style="color:#E5C07B">                        U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, QTOP, s);</span><span style="color:#7F848E;font-style:italic">//更新top</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                  // was cancelled</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">n </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">//遍历结束</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">//任务执行完毕</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 从top位开始自旋向下找到给定任务，如果找到把它从当前 Worker 的任务队列中移除并执行它。注意返回的参数: 如果任务队列为空或者任务未执行完毕返回true；任务执行完毕返回false。</p>
<h4><a class="header-anchor" href="#forkjoinpool-helpstealer-workqueue-w-forkjointask-task"><span></span></a><a href="#forkjoinpool-helpstealer-workqueue-w-forkjointask-task">#</a> ForkJoinPool.helpStealer(WorkQueue w, ForkJoinTask&lt;?&gt; task)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> helpStealer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75">[] ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldSum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> checkSum</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (ws </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> w </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            task </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#E06C75"> {                                       </span><span style="color:#7F848E;font-style:italic">// restart point</span></span>
<span class="line"><span style="color:#E06C75">            checkSum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                          // for stability check</span></span>
<span class="line"><span style="color:#E5C07B">            ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> subtask</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            WorkQueue</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                    // v is subtask stealer</span></span>
<span class="line"><span style="color:#E06C75">            descent</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (subtask </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> task</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> subtask</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //1. 找到给定WorkQueue的偷取者v</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> j</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hint</span><span style="color:#56B6C2"> |</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">+=</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//跳两个索引，因为Worker在奇数索引位</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> m)                     </span><span style="color:#7F848E;font-style:italic">// can't find stealer</span></span>
<span class="line"><span style="color:#C678DD">                        break</span><span style="color:#E06C75"> descent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> ((v </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (h </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> k) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">currentSteal</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> subtask) {</span><span style="color:#7F848E;font-style:italic">//定位到偷取者</span></span>
<span class="line"><span style="color:#E5C07B">                            j</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hint</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//更新stealer索引</span></span>
<span class="line"><span style="color:#C678DD">                            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                        checkSum </span><span style="color:#56B6C2">+=</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //2. 帮助偷取者v执行任务</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#E06C75"> ) {                         </span><span style="color:#7F848E;font-style:italic">// help v or descend</span></span>
<span class="line"><span style="color:#E5C07B">                    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] a</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">            //偷取者内部的任务</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    checkSum </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">currentJoin</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//获取偷取者的join任务</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">subtask</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> j</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">currentJoin</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> subtask </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E5C07B">                            v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">currentSteal</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> subtask) </span><span style="color:#7F848E;font-style:italic">// stale</span></span>
<span class="line"><span style="color:#C678DD">                        break</span><span style="color:#E06C75"> descent</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // stale，跳出descent循环重来</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">array</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> ((subtask </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)   </span><span style="color:#7F848E;font-style:italic">//偷取者的join任务为null，跳出descent循环</span></span>
<span class="line"><span style="color:#C678DD">                            break</span><span style="color:#E06C75"> descent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        break</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //偷取者内部任务为空，可能任务也被偷走了；跳出本次循环，查找偷取者的偷取者</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (((</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> b) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> ASHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ABASE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//获取base偏移地址</span></span>
<span class="line"><span style="color:#E5C07B">                    ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(a, i)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//获取偷取者的base任务</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)             </span><span style="color:#7F848E;font-style:italic">// stale</span></span>
<span class="line"><span style="color:#C678DD">                            break</span><span style="color:#E06C75"> descent</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // stale，跳出descent循环重来</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(a, i, t, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//弹出任务</span></span>
<span class="line"><span style="color:#E5C07B">                            v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         //更新偷取者的base位</span></span>
<span class="line"><span style="color:#E5C07B">                            ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">currentSteal</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//获取调用者偷来的任务</span></span>
<span class="line"><span style="color:#C678DD">                            int</span><span style="color:#E06C75"> top </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            //首先更新给定workQueue的currentSteal为偷取者的base任务，然后执行该任务</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            //然后通过检查top来判断给定workQueue是否有自己的任务，如果有，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            // 则依次弹出任务(LIFO)-&gt;更新currentSteal-&gt;执行该任务(注意这里是自己偷自己的任务执行)</span></span>
<span class="line"><span style="color:#C678DD">                            do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                                U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(w, QCURRENTSTEAL, t);</span></span>
<span class="line"><span style="color:#E5C07B">                                t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doExec</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">        // clear local tasks too</span></span>
<span class="line"><span style="color:#E06C75">                            } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">                                    w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> top </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#7F848E;font-style:italic"> //内部有自己的任务，依次弹出执行</span></span>
<span class="line"><span style="color:#E06C75">                                    (t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">pop</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                            U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(w, QCURRENTSTEAL, ps);</span><span style="color:#7F848E;font-style:italic">//还原给定workQueue的currentSteal</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">base</span><span style="color:#56B6C2"> !=</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">top</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//给定workQueue有自己的任务了，帮助结束，返回</span></span>
<span class="line"><span style="color:#C678DD">                                return</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">            // can't further help</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">status</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> oldSum </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> (oldSum </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> checkSum))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 如果队列为空或任务执行失败，说明任务可能被偷，调用此方法来帮助偷取者执行任务。基本思想是: 偷取者帮助我执行任务，我去帮助偷取者执行它的任务。 函数执行流程如下:</p>
<p>循环定位偷取者，由于Worker是在奇数索引位，所以每次会跳两个索引位。定位到偷取者之后，更新调用者 WorkQueue 的hint为偷取者的索引，方便下次定位； 定位到偷取者后，开始帮助偷取者执行任务。从偷取者的base索引开始，每次偷取一个任务执行。在帮助偷取者执行任务后，如果调用者发现本身已经有任务(w.top != top)，则依次弹出自己的任务(LIFO顺序)并执行(也就是说自己偷自己的任务执行)。</p>
<h4><a class="header-anchor" href="#forkjoinpool-trycompensate-workqueue-w"><span></span></a><a href="#forkjoinpool-trycompensate-workqueue-w">#</a> ForkJoinPool.tryCompensate(WorkQueue w)</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//执行补偿操作: 尝试缩减活动线程量，可能释放或创建一个补偿线程来准备阻塞</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryCompensate</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">WorkQueue</span><span style="color:#E06C75"> w) {</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> canBlock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    WorkQueue</span><span style="color:#E06C75">[] ws</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> pc</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> sp</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (w </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">qlock</span><span style="color:#56B6C2"> &lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#7F848E;font-style:italic">           // caller terminating</span></span>
<span class="line"><span style="color:#E06C75">            (ws </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> workQueues) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (m </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ws</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E06C75">            (pc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> config </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> SMASK) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)           </span><span style="color:#7F848E;font-style:italic">// parallelism disabled</span></span>
<span class="line"><span style="color:#E06C75">        canBlock </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //调用者已终止</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((sp </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) (c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ctl)) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)      </span><span style="color:#7F848E;font-style:italic">// release idle worker</span></span>
<span class="line"><span style="color:#E06C75">        canBlock </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> tryRelease</span><span style="color:#E06C75">(c</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ws[sp </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m]</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0L</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//唤醒等待的工作线程</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">//没有空闲线程</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> ac </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">) (c </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E06C75"> AC_SHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> pc</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //活跃线程数</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> tc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">short</span><span style="color:#E06C75">) (c </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E06C75"> TC_SHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> pc</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//总线程数</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> nbusy </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // validate saturation</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">i) {        </span><span style="color:#7F848E;font-style:italic">// two passes of odd indices</span></span>
<span class="line"><span style="color:#E5C07B">            WorkQueue</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((v </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ws[((i </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">|</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> m]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//取奇数索引位</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">v</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">scanState</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> SCANNING) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//没有正在运行任务，跳出</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                ++</span><span style="color:#E06C75">nbusy</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//正在运行任务，添加标记</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (nbusy </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> (tc </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> ctl </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> c)</span></span>
<span class="line"><span style="color:#E06C75">            canBlock </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // unstable or stale</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (tc </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> pc </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> ac </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> w</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isEmpty</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//总线程数大于并行度 &amp;&amp; 活动线程数大于1 &amp;&amp; 调用者任务队列为空，不需要补偿</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> nc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((AC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> AC_UNIT)) </span><span style="color:#56B6C2">|</span></span>
<span class="line"><span style="color:#E06C75">                    (</span><span style="color:#56B6C2">~</span><span style="color:#E06C75">AC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> c))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // uncompensated</span></span>
<span class="line"><span style="color:#E06C75">            canBlock </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, nc);</span><span style="color:#7F848E;font-style:italic">//更新活跃线程数</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (tc </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> MAX_CAP </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">this</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> common </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> tc </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> pc </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> commonMaxSpares))</span><span style="color:#7F848E;font-style:italic">//超出最大线程数</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RejectedExecutionException</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#98C379">                    "Thread limit exceeded replacing blocked worker"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> {                                </span><span style="color:#7F848E;font-style:italic">// similar to tryAddWorker</span></span>
<span class="line"><span style="color:#C678DD">            boolean</span><span style="color:#E06C75"> add </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> rs</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // CAS within lock</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> nc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((AC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> c) </span><span style="color:#56B6C2">|</span></span>
<span class="line"><span style="color:#E06C75">                    (TC_MASK </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> TC_UNIT)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算总线程数</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (((rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lockRunState</span><span style="color:#E06C75">()) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> STOP) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                add </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, CTL, c, nc);</span><span style="color:#7F848E;font-style:italic">//更新总线程数</span></span>
<span class="line"><span style="color:#61AFEF">            unlockRunState</span><span style="color:#E06C75">(rs</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">&amp;</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">RSLOCK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //运行到这里说明活跃工作线程数不足，需要创建一个新的工作线程来补偿</span></span>
<span class="line"><span style="color:#E06C75">            canBlock </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> add </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> createWorker</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // throws on exception</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> canBlock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 具体的执行看源码及注释，这里我们简单总结一下需要和不需要补偿的几种情况:</p>
<p><strong>需要补偿</strong> :</p>
<ul>
<li>调用者队列不为空，并且有空闲工作线程，这种情况会唤醒空闲线程(调用tryRelease方法)</li>
<li>池尚未停止，活跃线程数不足，这时会新建一个工作线程(调用createWorker方法)</li>
</ul>
<p><strong>不需要补偿</strong> :</p>
<ul>
<li>调用者已终止或池处于不稳定状态</li>
<li>总线程数大于并行度 &amp;&amp; 活动线程数大于1 &amp;&amp; 调用者任务队列为空</li>
</ul>
<h2><a class="header-anchor" href="#fork-join的陷阱与注意事项"><span></span></a><a href="#fork-join%E7%9A%84%E9%99%B7%E9%98%B1%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">#</a> Fork/Join的陷阱与注意事项</h2>
<p>使用Fork/Join框架时，需要注意一些陷阱, 在下面 <code>斐波那契数列</code>例子中你将看到示例:</p>
<h3><a class="header-anchor" href="#避免不必要的fork"><span></span></a><a href="#%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84fork">#</a> 避免不必要的fork()</h3>
<p>划分成两个子任务后，不要同时调用两个子任务的fork()方法。</p>
<p>表面上看上去两个子任务都fork()，然后join()两次似乎更自然。但事实证明，直接调用compute()效率更高。因为直接调用子任务的compute()方法实际上就是在当前的工作线程进行了计算(线程重用)，这比“将子任务提交到工作队列，线程又从工作队列中拿任务”快得多。</p>
<blockquote>
<p>当一个大任务被划分成两个以上的子任务时，尽可能使用前面说到的三个衍生的invokeAll方法，因为使用它们能避免不必要的fork()。</p>
</blockquote>
<h3><a class="header-anchor" href="#注意fork-、compute-、join-的顺序"><span></span></a><a href="#%E6%B3%A8%E6%84%8Ffork-%E3%80%81compute-%E3%80%81join-%E7%9A%84%E9%A1%BA%E5%BA%8F">#</a> 注意fork()、compute()、join()的顺序</h3>
<p>为了两个任务并行，三个方法的调用顺序需要万分注意。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 计算右边的任务</span></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> leftAns </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compute</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 计算左边的任务(同时右边任务也在计算)</span></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> rightAns </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> right</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 等待右边的结果</span></span>
<span class="line"><span style="color:#C678DD">return</span><span style="color:#E06C75"> leftAns </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> rightAns</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们写成:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 计算完左边的任务</span></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> leftAns </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 等待左边的计算结果</span></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> rightAns </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> right</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compute</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 再计算右边的任务</span></span>
<span class="line"><span style="color:#C678DD">return</span><span style="color:#E06C75"> leftAns </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> rightAns</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> rightAns </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> right</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compute</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 计算完右边的任务</span></span>
<span class="line"><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 再计算左边的任务</span></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> leftAns </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 等待左边的计算结果</span></span>
<span class="line"><span style="color:#C678DD">return</span><span style="color:#E06C75"> leftAns </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> rightAns</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种实际上都没有并行。</p>
<h3><a class="header-anchor" href="#选择合适的子任务粒度"><span></span></a><a href="#%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%AD%90%E4%BB%BB%E5%8A%A1%E7%B2%92%E5%BA%A6">#</a> 选择合适的子任务粒度</h3>
<p>选择划分子任务的粒度(顺序执行的阈值)很重要，因为使用Fork/Join框架并不一定比顺序执行任务的效率高: 如果任务太大，则无法提高并行的吞吐量；如果任务太小，子任务的调度开销可能会大于并行计算的性能提升，我们还要考虑创建子任务、fork()子任务、线程调度以及合并子任务处理结果的耗时以及相应的内存消耗。</p>
<p>官方文档给出的粗略经验是: 任务应该执行<code>100~10000</code>个基本的计算步骤。决定子任务的粒度的最好办法是实践，通过实际测试结果来确定这个阈值才是“上上策”。</p>
<blockquote>
<p>和其他Java代码一样，Fork/Join框架测试时需要“预热”或者说执行几遍才会被JIT(Just-in-time)编译器优化，所以测试性能之前跑几遍程序很重要。</p>
</blockquote>
<h3><a class="header-anchor" href="#避免重量级任务划分与结果合并"><span></span></a><a href="#%E9%81%BF%E5%85%8D%E9%87%8D%E9%87%8F%E7%BA%A7%E4%BB%BB%E5%8A%A1%E5%88%92%E5%88%86%E4%B8%8E%E7%BB%93%E6%9E%9C%E5%90%88%E5%B9%B6">#</a> 避免重量级任务划分与结果合并</h3>
<p>Fork/Join的很多使用场景都用到数组或者List等数据结构，子任务在某个分区中运行，最典型的例子如并行排序和并行查找。拆分子任务以及合并处理结果的时候，应该尽量避免System.arraycopy这样耗时耗空间的操作，从而最小化任务的处理开销。</p>
<h2><a class="header-anchor" href="#再深入理解"><span></span></a><a href="#%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 再深入理解</h2>
<h3><a class="header-anchor" href="#有哪些jdk源码中使用了fork-join思想"><span></span></a><a href="#%E6%9C%89%E5%93%AA%E4%BA%9Bjdk%E6%BA%90%E7%A0%81%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BA%86fork-join%E6%80%9D%E6%83%B3">#</a> 有哪些JDK源码中使用了Fork/Join思想?</h3>
<p>我们常用的数组工具类 Arrays 在JDK 8之后新增的并行排序方法(parallelSort)就运用了 ForkJoinPool 的特性，还有 ConcurrentHashMap 在JDK 8之后添加的函数式方法(如forEach等)也有运用。</p>
<h3><a class="header-anchor" href="#使用executors工具类创建forkjoinpool"><span></span></a><a href="#%E4%BD%BF%E7%94%A8executors%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%88%9B%E5%BB%BAforkjoinpool">#</a> 使用Executors工具类创建ForkJoinPool</h3>
<p>Java8在Executors工具类中新增了两个工厂方法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// parallelism定义并行级别</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ExecutorService</span><span style="color:#61AFEF"> newWorkStealingPool</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> parallelism)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 默认并行级别为JVM可用的处理器个数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Runtime.getRuntime().availableProcessors()</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ExecutorService</span><span style="color:#61AFEF"> newWorkStealingPool</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#关于fork-join异常处理"><span></span></a><a href="#%E5%85%B3%E4%BA%8Efork-join%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">#</a> 关于Fork/Join异常处理</h3>
<p>Java的受检异常机制一直饱受诟病，所以在ForkJoinTask的invoke()、join()方法及其衍生方法中都没有像get()方法那样抛出个ExecutionException的受检异常。</p>
<p>所以你可以在ForkJoinTask中看到内部把受检异常转换成了运行时异常。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> rethrow</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75"> ex) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (ex </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">        ForkJoinTask</span><span style="color:#ABB2BF">.</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">RuntimeException</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">uncheckedThrow</span><span style="color:#E06C75">(ex)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> uncheckedThrow</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75"> t) throws T {</span></span>
<span class="line"><span style="color:#C678DD">    throw</span><span style="color:#E06C75"> (T)t</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // rely on vacuous cast</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Java你不知道的10件事中已经指出，JVM实际并不关心这个异常是受检异常还是运行时异常，受检异常这东西完全是给Java编译器用的: 用于警告程序员这里有个异常没有处理。</p>
<p>但不可否认的是invoke、join()仍可能会抛出运行时异常，所以ForkJoinTask还提供了两个不提取结果和异常的方法quietlyInvoke()、quietlyJoin()，这两个方法允许你在所有任务完成后对结果和异常进行处理。</p>
<p>使用quitelyInvoke()和quietlyJoin()时可以配合isCompletedAbnormally()和isCompletedNormally()方法使用。</p>
<h2><a class="header-anchor" href="#一些fork-join例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9Bfork-join%E4%BE%8B%E5%AD%90">#</a> 一些Fork/Join例子</h2>
<h3><a class="header-anchor" href="#采用fork-join来异步计算1-2-3-10000的结果"><span></span></a><a href="#%E9%87%87%E7%94%A8fork-join%E6%9D%A5%E5%BC%82%E6%AD%A5%E8%AE%A1%E7%AE%971-2-3-10000%E7%9A%84%E7%BB%93%E6%9E%9C">#</a> 采用Fork/Join来异步计算1+2+3+…+10000的结果</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">	static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SumTask</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> RecursiveTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">		private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		</span></span>
<span class="line"><span style="color:#C678DD">		final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> start</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //开始计算的数</span></span>
<span class="line"><span style="color:#C678DD">		final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> end</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //最后计算的数</span></span>
<span class="line"><span style="color:#E06C75">		</span></span>
<span class="line"><span style="color:#61AFEF">		SumTask</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> start</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> end</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">start</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> start;</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">end</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> end;</span></span>
<span class="line"><span style="color:#ABB2BF">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">		@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">		protected</span><span style="color:#E5C07B"> Integer</span><span style="color:#61AFEF"> compute</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			//如果计算量小于1000，那么分配一个线程执行if中的代码块，并返回执行结果</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#ABB2BF">(end </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> start </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 1000</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">				System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " 开始执行: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> start </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "-"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> end);</span></span>
<span class="line"><span style="color:#C678DD">				int</span><span style="color:#E06C75"> sum</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">				for</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> start; i </span><span style="color:#56B6C2">&lt;=</span><span style="color:#ABB2BF"> end; i++)</span></span>
<span class="line"><span style="color:#ABB2BF">					sum </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> i;</span></span>
<span class="line"><span style="color:#C678DD">				return</span><span style="color:#ABB2BF"> sum;</span></span>
<span class="line"><span style="color:#ABB2BF">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			//如果计算量大于1000，那么拆分为两个任务</span></span>
<span class="line"><span style="color:#E5C07B">			SumTask</span><span style="color:#E06C75"> task1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SumTask</span><span style="color:#ABB2BF">(start, (start </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> end) </span><span style="color:#56B6C2">/</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">			SumTask</span><span style="color:#E06C75"> task2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SumTask</span><span style="color:#ABB2BF">((start </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> end) </span><span style="color:#56B6C2">/</span><span style="color:#D19A66"> 2</span><span style="color:#56B6C2"> +</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">, end);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			//执行任务</span></span>
<span class="line"><span style="color:#E5C07B">			task1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">			task2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			//获取任务执行的结果</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#E5C07B"> task1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> task2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">		}</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#E06C75">	</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ExecutionException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">		ForkJoinPool</span><span style="color:#E06C75"> pool</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ForkJoinPool</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">task</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SumTask</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">		pool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">submit</span><span style="color:#ABB2BF">(task);</span></span>
<span class="line"><span style="color:#E5C07B">		System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>执行结果</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">625</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">7</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 6251</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">6875</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 5626</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">6250</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">10</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 3751</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">4375</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">13</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 2501</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">3125</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">8</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 626</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1250</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">11</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 5001</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5625</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">3</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 7501</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">8125</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">14</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 1251</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1875</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">4</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 9376</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">10000</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">8</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 8126</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">8750</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">0</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 1876</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">2500</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">12</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 4376</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5000</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 8751</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9375</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">7</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 6876</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">7500</span></span>
<span class="line"><span style="color:#E06C75">ForkJoinPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">worker</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75"> 开始执行</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 3126</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">3750</span></span>
<span class="line"><span style="color:#D19A66">50005000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#实现斐波那契数列"><span></span></a><a href="#%E5%AE%9E%E7%8E%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">#</a> 实现斐波那契数列</h3>
<blockquote>
<p>斐波那契数列: 1、1、2、3、5、8、13、21、34、…… 公式 : F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)(n&gt;=3，n∈N*)</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">    ForkJoinPool</span><span style="color:#E06C75"> forkJoinPool </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ForkJoinPool</span><span style="color:#E06C75">(</span><span style="color:#D19A66">4</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 最大并发数4</span></span>
<span class="line"><span style="color:#E5C07B">    Fibonacci</span><span style="color:#E06C75"> fibonacci </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Fibonacci</span><span style="color:#E06C75">(</span><span style="color:#D19A66">20</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> startTime </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    Integer</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> forkJoinPool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(fibonacci);</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> endTime </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Fork/join sum: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> result </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " in "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (endTime </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> startTime) </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " ms."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//以下为官方API文档示例</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD">  class</span><span style="color:#E5C07B"> Fibonacci</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> RecursiveTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    Fibonacci</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">n</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#E5C07B"> Integer</span><span style="color:#61AFEF"> compute</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        Fibonacci</span><span style="color:#E06C75"> f1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Fibonacci</span><span style="color:#ABB2BF">(n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        f1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">(); </span></span>
<span class="line"><span style="color:#E5C07B">        Fibonacci</span><span style="color:#E06C75"> f2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Fibonacci</span><span style="color:#ABB2BF">(n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> f2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compute</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> f1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(); </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然你也可以两个任务都fork，要注意的是两个任务都fork的情况，必须按照f1.fork()，f2.fork()， f2.join()，f1.join()这样的顺序，不然有性能问题，详见上面注意事项中的说明。</p>
<p>官方API文档是这样写到的，所以平日用invokeAll就好了。invokeAll会把传入的任务的第一个交给当前线程来执行，其他的任务都fork加入工作队列，这样等于利用当前线程也执行任务了。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#E5C07B">    Fibonacci</span><span style="color:#E06C75"> f1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Fibonacci</span><span style="color:#E06C75">(n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Fibonacci</span><span style="color:#E06C75"> f2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Fibonacci</span><span style="color:#E06C75">(n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    invokeAll</span><span style="color:#E06C75">(f1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">f2)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> f2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> f1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> invokeAll</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ForkJoinTask</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">...</span><span style="color:#E5C07B"> tasks</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    Throwable</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> last </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tasks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75">i) {</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tasks[i]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (ex </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                ex </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)   </span><span style="color:#7F848E;font-style:italic">//除了第一个都fork</span></span>
<span class="line"><span style="color:#E5C07B">            t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fork</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doInvoke</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75"> NORMAL </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)  </span><span style="color:#7F848E;font-style:italic">//留一个自己执行</span></span>
<span class="line"><span style="color:#E06C75">            ex </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">i) {</span></span>
<span class="line"><span style="color:#E5C07B">        ForkJoinTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tasks[i]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (ex </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancel</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doJoin</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75"> NORMAL)</span></span>
<span class="line"><span style="color:#E06C75">                ex </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (ex </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        rethrow</span><span style="color:#E06C75">(ex)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-forkjoin-2.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 线程池之 FutureTask 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20FutureTask%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20FutureTask%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 线程池之 FutureTask 详解</source>
      <description>Future 表示了一个任务的生命周期，是一个可取消的异步运算，可以把它看作是一个异步操作的结果的占位符，它将在未来的某个时刻完成，并提供对其结果的访问。在并发包中许多异步任务类都继承自Future，其中最典型的就是 FutureTask。 JUC 线程池之 FutureTask 详解 带着BAT大厂的面试问题去理解FutureTask FutureT...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Future 表示了一个任务的生命周期，是一个可取消的异步运算，可以把它看作是一个异步操作的结果的占位符，它将在未来的某个时刻完成，并提供对其结果的访问。在并发包中许多异步任务类都继承自Future，其中最典型的就是 FutureTask。</p>
</blockquote>
<ul>
<li>JUC 线程池之 FutureTask 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3futuretask">带着BAT大厂的面试问题去理解FutureTask</a></li>
<li><a href="#futuretask%E7%AE%80%E4%BB%8B">FutureTask简介</a></li>
<li><a href="#futuretask%E7%B1%BB%E5%85%B3%E7%B3%BB">FutureTask类关系</a></li>
<li>FutureTask源码解析
<ul>
<li><a href="#callable%E6%8E%A5%E5%8F%A3">Callable接口</a></li>
<li><a href="#future%E6%8E%A5%E5%8F%A3">Future接口</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">核心属性</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li>[核心方法 - run()](#核心方法</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-futuretask-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 线程池之 ScheduledThreadPoolExecutor 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ScheduledThreadPoolExecutor%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ScheduledThreadPoolExecutor%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 线程池之 ScheduledThreadPoolExecutor 详解</source>
      <description>在很多业务场景中，我们可能需要周期性的运行某项任务来获取结果，比如周期数据统计，定时发送数据等。在并发包出现之前，Java 早在1.3就提供了 Timer 类(只需要了解，目前已渐渐被 ScheduledThreadPoolExecutor 代替)来适应这些业务场景。随着业务量的不断增大，我们可能需要多个工作线程运行任务来尽可能的增加产品性能，或者是需...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>在很多业务场景中，我们可能需要周期性的运行某项任务来获取结果，比如周期数据统计，定时发送数据等。在并发包出现之前，Java 早在1.3就提供了 Timer 类(只需要了解，目前已渐渐被 ScheduledThreadPoolExecutor 代替)来适应这些业务场景。随着业务量的不断增大，我们可能需要多个工作线程运行任务来尽可能的增加产品性能，或者是需要更高的灵活性来控制和监控这些周期业务。这些都是 ScheduledThreadPoolExecutor 诞生的必然性。</p>
</blockquote>
<ul>
<li>JUC 线程池之 ScheduledThreadPoolExecutor 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3scheduledthreadpoolexecutor">带着BAT大厂的面试问题去理解ScheduledThreadPoolExecutor</a></li>
<li><a href="#scheduledthreadpoolexecutor%E7%AE%80%E4%BB%8B">ScheduledThreadPoolExecutor简介</a></li>
<li><a href="#scheduledthreadpoolexecutor%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">ScheduledThreadPoolExecutor数据结构</a></li>
<li>ScheduledThreadPoolExecutor源码解析
<ul>
<li>内部类ScheduledFutureTask
<ul>
<li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95run">核心方法run()</a></li>
<li><a href="#cancel%E6%96%B9%E6%B3%95">cancel方法</a></li>
</ul>
</li>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">核心属性</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95schedule">核心方法:Schedule</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95scheduleatfixedrate-%E5%92%8C-schedulewithfixeddelay">核心方法:scheduleAtFixedRate 和 scheduleWithFixedDelay</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95shutdown">核心方法:shutdown()</a></li>
</ul>
</li>
<li><a href="#%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">再深入理解</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解scheduledthreadpoolexecutor"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3scheduledthreadpoolexecutor">#</a> 带着BAT大厂的面试问题去理解ScheduledThreadPoolExecutor</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解ScheduledThreadPoolExecutor。@pdai</p>
<ul>
<li>ScheduledThreadPoolExecutor要解决什么样的问题?</li>
<li>ScheduledThreadPoolExecutor相比ThreadPoolExecutor有哪些特性?</li>
<li>ScheduledThreadPoolExecutor有什么样的数据结构，核心内部类和抽象类?</li>
<li>ScheduledThreadPoolExecutor有哪两个关闭策略? 区别是什么?</li>
<li>ScheduledThreadPoolExecutor中scheduleAtFixedRate 和 scheduleWithFixedDelay区别是什么?</li>
<li>为什么ThreadPoolExecutor 的调整策略却不适用于 ScheduledThreadPoolExecutor?</li>
<li>Executors 提供了几种方法来构造 ScheduledThreadPoolExecutor?</li>
</ul>
<h2><a class="header-anchor" href="#scheduledthreadpoolexecutor简介"><span></span></a><a href="#scheduledthreadpoolexecutor%E7%AE%80%E4%BB%8B">#</a> ScheduledThreadPoolExecutor简介</h2>
<p>ScheduledThreadPoolExecutor继承自 ThreadPoolExecutor，为任务提供延迟或周期执行，属于线程池的一种。和 ThreadPoolExecutor 相比，它还具有以下几种特性:</p>
<ul>
<li>使用专门的任务类型—ScheduledFutureTask 来执行周期任务，也可以接收不需要时间调度的任务(这些任务通过 ExecutorService 来执行)。</li>
<li>使用专门的存储队列—DelayedWorkQueue 来存储任务，DelayedWorkQueue 是无界延迟队列DelayQueue 的一种。相比ThreadPoolExecutor也简化了执行机制(delayedExecute方法，后面单独分析)。</li>
<li>支持可选的run-after-shutdown参数，在池被关闭(shutdown)之后支持可选的逻辑来决定是否继续运行周期或延迟任务。并且当任务(重新)提交操作与 shutdown 操作重叠时，复查逻辑也不相同。</li>
</ul>
<h2><a class="header-anchor" href="#scheduledthreadpoolexecutor数据结构"><span></span></a><a href="#scheduledthreadpoolexecutor%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> ScheduledThreadPoolExecutor数据结构</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-stpe-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>ScheduledThreadPoolExecutor继承自 <code>ThreadPoolExecutor</code>:</p>
<ul>
<li>详情请参考: <a href="">JUC线程池: ThreadPoolExecutor详解</a></li>
</ul>
<p>ScheduledThreadPoolExecutor 内部构造了两个内部类 <code>ScheduledFutureTask</code> 和 <code>DelayedWorkQueue</code>:</p>
<ul>
<li><code>ScheduledFutureTask</code>: 继承了FutureTask，说明是一个异步运算任务；最上层分别实现了Runnable、Future、Delayed接口，说明它是一个可以延迟执行的异步运算任务。</li>
<li><code>DelayedWorkQueue</code>: 这是 ScheduledThreadPoolExecutor 为存储周期或延迟任务专门定义的一个延迟队列，继承了 AbstractQueue，为了契合 ThreadPoolExecutor 也实现了 BlockingQueue 接口。它内部只允许存储 RunnableScheduledFuture 类型的任务。与 DelayQueue 的不同之处就是它只允许存放 RunnableScheduledFuture 对象，并且自己实现了二叉堆(DelayQueue 是利用了 PriorityQueue 的二叉堆结构)。</li>
</ul>
<h2><a class="header-anchor" href="#scheduledthreadpoolexecutor源码解析"><span></span></a><a href="#scheduledthreadpoolexecutor%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">#</a> ScheduledThreadPoolExecutor源码解析</h2>
<blockquote>
<p>以下源码的解析是基于你已经理解了FutureTask。</p>
</blockquote>
<h3><a class="header-anchor" href="#内部类scheduledfuturetask"><span></span></a><a href="#%E5%86%85%E9%83%A8%E7%B1%BBscheduledfuturetask">#</a> 内部类ScheduledFutureTask</h3>
<h4><a class="header-anchor" href="#属性"><span></span></a><a href="#%E5%B1%9E%E6%80%A7">#</a> 属性</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//为相同延时任务提供的顺序编号</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> sequenceNumber</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//任务可以执行的时间，纳秒级</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> time</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//重复任务的执行周期时间，纳秒级。</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> period</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//重新入队的任务</span></span>
<span class="line"><span style="color:#E5C07B">RunnableScheduledFuture</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> outerTask </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//延迟队列的索引，以支持更快的取消操作</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> heapIndex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>sequenceNumber</code>: 当两个任务有相同的延迟时间时，按照 FIFO 的顺序入队。sequenceNumber 就是为相同延时任务提供的顺序编号。</li>
<li><code>time</code>: 任务可以执行时的时间，纳秒级，通过triggerTime方法计算得出。</li>
<li><code>period</code>: 任务的执行周期时间，纳秒级。正数表示固定速率执行(为scheduleAtFixedRate提供服务)，负数表示固定延迟执行(为scheduleWithFixedDelay提供服务)，0表示不重复任务。</li>
<li><code>outerTask</code>: 重新入队的任务，通过reExecutePeriodic方法入队重新排序。</li>
</ul>
<h4><a class="header-anchor" href="#核心方法run"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95run">#</a> 核心方法run()</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> periodic </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> isPeriodic</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//是否为周期任务</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">canRunInCurrentRunState</span><span style="color:#E06C75">(periodic))</span><span style="color:#7F848E;font-style:italic">//当前状态是否可以执行</span></span>
<span class="line"><span style="color:#61AFEF">        cancel</span><span style="color:#E06C75">(</span><span style="color:#D19A66">false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">periodic)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //不是周期任务，直接执行</span></span>
<span class="line"><span style="color:#E5C07B">        ScheduledFutureTask</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ScheduledFutureTask</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">runAndReset</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">        setNextRunTime</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//设置下一次运行时间</span></span>
<span class="line"><span style="color:#61AFEF">        reExecutePeriodic</span><span style="color:#E06C75">(outerTask)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//重排序一个周期任务</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: ScheduledFutureTask 的run方法重写了 FutureTask 的版本，以便执行周期任务时重置/重排序任务。任务的执行通过父类 FutureTask 的run实现。内部有两个针对周期任务的方法:</p>
<ul>
<li>setNextRunTime(): 用来设置下一次运行的时间，源码如下:</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//设置下一次执行任务的时间</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setNextRunTime</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> period</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)  </span><span style="color:#7F848E;font-style:italic">//固定速率执行，scheduleAtFixedRate</span></span>
<span class="line"><span style="color:#E06C75">        time </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#E06C75">        time </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> triggerTime</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">p)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //固定延迟执行，scheduleWithFixedDelay</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//计算固定延迟任务的执行时间</span></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#61AFEF"> triggerTime</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> delay) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> now</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">+</span></span>
<span class="line"><span style="color:#E06C75">        ((delay </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> &gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> delay </span><span style="color:#C678DD">:</span><span style="color:#61AFEF"> overflowFree</span><span style="color:#E06C75">(delay))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>reExecutePeriodic(): 周期任务重新入队等待下一次执行，源码如下:</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//重排序一个周期任务</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> reExecutePeriodic</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">canRunInCurrentRunState</span><span style="color:#E06C75">(</span><span style="color:#D19A66">true</span><span style="color:#E06C75">)) {</span><span style="color:#7F848E;font-style:italic">//池关闭后可继续执行</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getQueue</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(task);</span><span style="color:#7F848E;font-style:italic">//任务入列</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //重新检查run-after-shutdown参数，如果不能继续运行就移除队列任务，并取消任务的执行</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">canRunInCurrentRunState</span><span style="color:#E06C75">(</span><span style="color:#D19A66">true</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(task))</span></span>
<span class="line"><span style="color:#E5C07B">            task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancel</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#61AFEF">            ensurePrestart</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//启动一个新的线程等待任务</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reExecutePeriodic与delayedExecute的执行策略一致，只不过reExecutePeriodic不会执行拒绝策略而是直接丢掉任务。</p>
<h4><a class="header-anchor" href="#cancel方法"><span></span></a><a href="#cancel%E6%96%B9%E6%B3%95">#</a> cancel方法</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> cancel</span><span style="color:#E06C75">(</span><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> mayInterruptIfRunning) {</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> cancelled </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancel</span><span style="color:#ABB2BF">(mayInterruptIfRunning);</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (cancelled </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> removeOnCancel </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> heapIndex </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> cancelled</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ScheduledFutureTask.cancel本质上由其父类 FutureTask.cancel 实现。取消任务成功后会根据removeOnCancel参数决定是否从队列中移除此任务。</p>
<h3><a class="header-anchor" href="#核心属性"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">#</a> 核心属性</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//关闭后继续执行已经存在的周期任务 </span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> continueExistingPeriodicTasksAfterShutdown</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//关闭后继续执行已经存在的延时任务 </span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> executeExistingDelayedTasksAfterShutdown </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//取消任务后移除 </span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> removeOnCancel </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//为相同延时的任务提供的顺序编号，保证任务之间的FIFO顺序</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> AtomicLong</span><span style="color:#E06C75"> sequencer </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicLong</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>continueExistingPeriodicTasksAfterShutdown</code>和<code>executeExistingDelayedTasksAfterShutdown</code>是 ScheduledThreadPoolExecutor 定义的 <code>run-after-shutdown</code> 参数，用来控制池关闭之后的任务执行逻辑。</li>
<li><code>removeOnCancel</code>用来控制任务取消后是否从队列中移除。当一个已经提交的周期或延迟任务在运行之前被取消，那么它之后将不会运行。默认配置下，这种已经取消的任务在届期之前不会被移除。 通过这种机制，可以方便检查和监控线程池状态，但也可能导致已经取消的任务无限滞留。为了避免这种情况的发生，我们可以通过<code>setRemoveOnCancelPolicy</code>方法设置移除策略，把参数<code>removeOnCancel</code>设为true可以在任务取消后立即从队列中移除。</li>
<li><code>sequencer</code>是为相同延时的任务提供的顺序编号，保证任务之间的 FIFO 顺序。与 ScheduledFutureTask 内部的sequenceNumber参数作用一致。</li>
</ul>
<h3><a class="header-anchor" href="#构造函数"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</h3>
<p>首先看下构造函数，ScheduledThreadPoolExecutor 内部有四个构造函数，这里我们只看这个最大构造灵活度的:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ScheduledThreadPoolExecutor</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> corePoolSize</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                   ThreadFactory</span><span style="color:#E06C75"> threadFactory</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                   RejectedExecutionHandler</span><span style="color:#E06C75"> handler) {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(corePoolSize</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> NANOSECONDS</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">          new</span><span style="color:#61AFEF"> DelayedWorkQueue</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> threadFactory</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> handler)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数都是通过super调用了ThreadPoolExecutor的构造，并且使用特定等待队列DelayedWorkQueue。</p>
<h3><a class="header-anchor" href="#核心方法-schedule"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-schedule">#</a> 核心方法:Schedule</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> ScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> schedule</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Callable</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> callable</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                                       long</span><span style="color:#E06C75"> delay</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                       TimeUnit</span><span style="color:#E06C75"> unit) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (callable </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> unit </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    RunnableScheduledFuture</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> decorateTask</span><span style="color:#E06C75">(callable</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ScheduledFutureTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(callable</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> triggerTime</span><span style="color:#E06C75">(delay</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> unit)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//构造ScheduledFutureTask任务</span></span>
<span class="line"><span style="color:#61AFEF">    delayedExecute</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//任务执行主方法</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: schedule主要用于执行一次性(延迟)任务。函数执行逻辑分两步:</p>
<ul>
<li><code>封装 Callable/Runnable</code>: 首先通过triggerTime计算任务的延迟执行时间，然后通过 ScheduledFutureTask 的构造函数把 Runnable/Callable 任务构造为ScheduledThreadPoolExecutor可以执行的任务类型，最后调用decorateTask方法执行用户自定义的逻辑；decorateTask是一个用户可自定义扩展的方法，默认实现下直接返回封装的RunnableScheduledFuture任务，源码如下:</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">protected</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> decorateTask</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#E5C07B">    Runnable</span><span style="color:#E06C75"> runnable</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> task</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>执行任务</code>: 通过delayedExecute实现。下面我们来详细分析。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> delayedExecute</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> task) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">isShutdown</span><span style="color:#E06C75">())</span></span>
<span class="line"><span style="color:#61AFEF">        reject</span><span style="color:#E06C75">(task)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//池已关闭，执行拒绝策略</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getQueue</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(task);</span><span style="color:#7F848E;font-style:italic">//任务入队</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">isShutdown</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2">            !</span><span style="color:#61AFEF">canRunInCurrentRunState</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPeriodic</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#7F848E;font-style:italic">//判断run-after-shutdown参数</span></span>
<span class="line"><span style="color:#61AFEF">            remove</span><span style="color:#E06C75">(task))</span><span style="color:#7F848E;font-style:italic">//移除任务</span></span>
<span class="line"><span style="color:#E5C07B">            task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancel</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#61AFEF">            ensurePrestart</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//启动一个新的线程等待任务</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: delayedExecute是执行任务的主方法，方法执行逻辑如下:</p>
<ul>
<li>如果池已关闭(ctl &gt;= SHUTDOWN)，执行任务拒绝策略；</li>
<li>池正在运行，首先把任务入队排序；然后重新检查池的关闭状态，执行如下逻辑:</li>
</ul>
<p><code>A</code>: 如果池正在运行，或者 run-after-shutdown 参数值为true，则调用父类方法ensurePrestart启动一个新的线程等待执行任务。ensurePrestart源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> ensurePrestart</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> wc </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> workerCountOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ctl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (wc </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> corePoolSize)</span></span>
<span class="line"><span style="color:#61AFEF">        addWorker</span><span style="color:#E06C75">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> true</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (wc </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        addWorker</span><span style="color:#E06C75">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ensurePrestart是父类 ThreadPoolExecutor 的方法，用于启动一个新的工作线程等待执行任务，即使corePoolSize为0也会安排一个新线程。</p>
<p><code>B</code>: 如果池已经关闭，并且 run-after-shutdown 参数值为false，则执行父类(ThreadPoolExecutor)方法remove移除队列中的指定任务，成功移除后调用ScheduledFutureTask.cancel取消任务</p>
<h3><a class="header-anchor" href="#核心方法-scheduleatfixedrate-和-schedulewithfixeddelay"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-scheduleatfixedrate-%E5%92%8C-schedulewithfixeddelay">#</a> 核心方法:scheduleAtFixedRate 和 scheduleWithFixedDelay</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 创建一个周期执行的任务，第一次执行延期时间为initialDelay，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 之后每隔period执行一次，不等待第一次执行完成就开始计时</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> ScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> scheduleAtFixedRate</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Runnable</span><span style="color:#E06C75"> command</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                                              long</span><span style="color:#E06C75"> initialDelay</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                                              long</span><span style="color:#E06C75"> period</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                              TimeUnit</span><span style="color:#E06C75"> unit) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (command </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> unit </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (period </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //构建RunnableScheduledFuture任务类型</span></span>
<span class="line"><span style="color:#E5C07B">    ScheduledFutureTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> sft </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ScheduledFutureTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(command</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">                                      null</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#61AFEF">                                      triggerTime</span><span style="color:#E06C75">(initialDelay</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> unit)</span><span style="color:#ABB2BF">,</span><span style="color:#7F848E;font-style:italic">//计算任务的延迟时间</span></span>
<span class="line"><span style="color:#E5C07B">                                      unit</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toNanos</span><span style="color:#ABB2BF">(period)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算任务的执行周期</span></span>
<span class="line"><span style="color:#E5C07B">    RunnableScheduledFuture</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> decorateTask</span><span style="color:#E06C75">(command</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> sft)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//执行用户自定义逻辑</span></span>
<span class="line"><span style="color:#E5C07B">    sft</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">outerTask</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//赋值给outerTask，准备重新入队等待下一次执行</span></span>
<span class="line"><span style="color:#61AFEF">    delayedExecute</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//执行任务</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 创建一个周期执行的任务，第一次执行延期时间为initialDelay，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 在第一次执行完之后延迟delay后开始下一次执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> ScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> scheduleWithFixedDelay</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Runnable</span><span style="color:#E06C75"> command</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                                                 long</span><span style="color:#E06C75"> initialDelay</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                                                 long</span><span style="color:#E06C75"> delay</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                                 TimeUnit</span><span style="color:#E06C75"> unit) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (command </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> unit </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (delay </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //构建RunnableScheduledFuture任务类型</span></span>
<span class="line"><span style="color:#E5C07B">    ScheduledFutureTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> sft </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ScheduledFutureTask</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(command</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">                                      null</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#61AFEF">                                      triggerTime</span><span style="color:#E06C75">(initialDelay</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> unit)</span><span style="color:#ABB2BF">,</span><span style="color:#7F848E;font-style:italic">//计算任务的延迟时间</span></span>
<span class="line"><span style="color:#E5C07B">                                      unit</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toNanos</span><span style="color:#ABB2BF">(</span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF">delay)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//计算任务的执行周期</span></span>
<span class="line"><span style="color:#E5C07B">    RunnableScheduledFuture</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> decorateTask</span><span style="color:#E06C75">(command</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> sft)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//执行用户自定义逻辑</span></span>
<span class="line"><span style="color:#E5C07B">    sft</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">outerTask</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//赋值给outerTask，准备重新入队等待下一次执行</span></span>
<span class="line"><span style="color:#61AFEF">    delayedExecute</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//执行任务</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: scheduleAtFixedRate和scheduleWithFixedDelay方法的逻辑与schedule类似。</p>
<p><strong>注意scheduleAtFixedRate和scheduleWithFixedDelay的区别</strong>: 乍一看两个方法一模一样，其实，在unit.toNanos这一行代码中还是有区别的。没错，scheduleAtFixedRate传的是正值，而scheduleWithFixedDelay传的则是负值，这个值就是 ScheduledFutureTask 的period属性。</p>
<h3><a class="header-anchor" href="#核心方法-shutdown"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-shutdown">#</a> 核心方法:shutdown()</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> shutdown</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">shutdown</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//取消并清除由于关闭策略不应该运行的所有任务</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> onShutdown</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    BlockingQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Runnable</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> q </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getQueue</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //获取run-after-shutdown参数</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> keepDelayed </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#61AFEF">        getExecuteExistingDelayedTasksAfterShutdownPolicy</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> keepPeriodic </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#61AFEF">        getContinueExistingPeriodicTasksAfterShutdownPolicy</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">keepDelayed </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#56B6C2"> !</span><span style="color:#E06C75">keepPeriodic) {</span><span style="color:#7F848E;font-style:italic">//池关闭后不保留任务</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //依次取消任务</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> e </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (e </span><span style="color:#C678DD">instanceof</span><span style="color:#E5C07B"> RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                ((</span><span style="color:#E5C07B">RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) e)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancel</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        q</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//清除等待队列</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">//池关闭后保留任务</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Traverse snapshot to avoid iterator exceptions</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //遍历快照以避免迭代器异常</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> e </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> q</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (e </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> RunnableScheduledFuture) {</span></span>
<span class="line"><span style="color:#E5C07B">                RunnableScheduledFuture</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">                    (</span><span style="color:#E5C07B">RunnableScheduledFuture</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPeriodic</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> ?</span><span style="color:#56B6C2"> !</span><span style="color:#E06C75">keepPeriodic </span><span style="color:#C678DD">:</span><span style="color:#56B6C2"> !</span><span style="color:#E06C75">keepDelayed) </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E5C07B">                    t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isCancelled</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// also remove if already cancelled</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //如果任务已经取消，移除队列中的任务</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">q</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(t)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cancel</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#61AFEF">    tryTerminate</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //终止线程池</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 池关闭方法调用了父类ThreadPoolExecutor的shutdown，具体分析见 ThreadPoolExecutor 篇。这里主要介绍以下在shutdown方法中调用的关闭钩子onShutdown方法，它的主要作用是在关闭线程池后取消并清除由于关闭策略不应该运行的所有任务，这里主要是根据 run-after-shutdown 参数(continueExistingPeriodicTasksAfterShutdown和executeExistingDelayedTasksAfterShutdown)来决定线程池关闭后是否关闭已经存在的任务。</p>
<h2><a class="header-anchor" href="#再深入理解"><span></span></a><a href="#%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 再深入理解</h2>
<ul>
<li><strong>为什么ThreadPoolExecutor 的调整策略却不适用于 ScheduledThreadPoolExecutor？</strong></li>
</ul>
<p>例如: 由于 ScheduledThreadPoolExecutor 是一个固定核心线程数大小的线程池，并且使用了一个无界队列，所以调整maximumPoolSize对其没有任何影响(所以 ScheduledThreadPoolExecutor 没有提供可以调整最大线程数的构造函数，默认最大线程数固定为Integer.MAX_VALUE)。此外，设置corePoolSize为0或者设置核心线程空闲后清除(allowCoreThreadTimeOut)同样也不是一个好的策略，因为一旦周期任务到达某一次运行周期时，可能导致线程池内没有线程去处理这些任务。</p>
<ul>
<li>Executors 提供了哪几种方法来构造 ScheduledThreadPoolExecutor？
<ul>
<li>newScheduledThreadPool: 可指定核心线程数的线程池。</li>
<li>newSingleThreadScheduledExecutor: 只有一个工作线程的线程池。如果内部工作线程由于执行周期任务异常而被终止，则会新建一个线程替代它的位置。</li>
</ul>
</li>
</ul>
<p>注意: newScheduledThreadPool(1, threadFactory) 不等价于newSingleThreadScheduledExecutor。newSingleThreadScheduledExecutor创建的线程池保证内部只有一个线程执行任务，并且线程数不可扩展；而通过newScheduledThreadPool(1, threadFactory)创建的线程池可以通过setCorePoolSize方法来修改核心线程数。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-stpe-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 线程池之 ThreadPoolExecutor 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ThreadPoolExecutor%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20ThreadPoolExecutor%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 线程池之 ThreadPoolExecutor 详解</source>
      <description>本文主要对ThreadPoolExecutor详解。 JUC 线程池之 ThreadPoolExecutor 详解 带着BAT大厂的面试问题去理解 为什么要有线程池 ThreadPoolExecutor例子 ThreadPoolExecutor使用详解 Execute原理 参数 三种类型 newFixedThreadPool newSingleThre...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对ThreadPoolExecutor详解。</p>
</blockquote>
<ul>
<li>JUC 线程池之 ThreadPoolExecutor 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E7%BA%BF%E7%A8%8B%E6%B1%A0">为什么要有线程池</a></li>
<li><a href="#threadpoolexecutor%E4%BE%8B%E5%AD%90">ThreadPoolExecutor例子</a></li>
<li>ThreadPoolExecutor使用详解
<ul>
<li><a href="#execute%E5%8E%9F%E7%90%86">Execute原理</a></li>
<li><a href="#%E5%8F%82%E6%95%B0">参数</a></li>
<li>三种类型
<ul>
<li><a href="#newfixedthreadpool">newFixedThreadPool</a></li>
<li><a href="#newsinglethreadexecutor">newSingleThreadExecutor</a></li>
<li><a href="#newcachedthreadpool">newCachedThreadPool</a></li>
</ul>
</li>
<li>关闭线程池
<ul>
<li>[关闭方式 - shutdown](#关闭方式</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-executors-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 锁之 LockSupport 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20LockSupport%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20LockSupport%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 锁之 LockSupport 详解</source>
      <description>LockSupport是锁中的基础，是一个提供锁机制的工具类，所以先对其进行分析。 JUC 锁之 LockSupport 详解 带着BAT大厂的面试问题去理解 LockSupport简介 LockSupport源码分析 类的属性 类的构造函数 核心函数分析 park函数 parkNanos函数 parkUntil函数 unpark函数 LockSupp...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>LockSupport是锁中的基础，是一个提供锁机制的工具类，所以先对其进行分析。</p>
</blockquote>
<ul>
<li>JUC 锁之 LockSupport 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#locksupport%E7%AE%80%E4%BB%8B">LockSupport简介</a></li>
<li>LockSupport源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>核心函数分析
<ul>
<li><a href="#park%E5%87%BD%E6%95%B0">park函数</a></li>
<li><a href="#parknanos%E5%87%BD%E6%95%B0">parkNanos函数</a></li>
<li><a href="#parkuntil%E5%87%BD%E6%95%B0">parkUntil函数</a></li>
<li><a href="#unpark%E5%87%BD%E6%95%B0">unpark函数</a></li>
</ul>
</li>
</ul>
</li>
<li>LockSupport示例说明
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8waitnotify%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5">使用wait/notify实现线程同步</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8parkunpark%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5">使用park/unpark实现线程同步</a></li>
<li><a href="#%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94">中断响应</a></li>
</ul>
</li>
<li>更深入的理解
<ul>
<li><a href="#threadsleep%E5%92%8Cobjectwait%E7%9A%84%E5%8C%BA%E5%88%AB">Thread.sleep()和Object.wait()的区别</a></li>
<li><a href="#objectwait%E5%92%8Cconditionawait%E7%9A%84%E5%8C%BA%E5%88%AB">Object.wait()和Condition.await()的区别</a></li>
<li><a href="#threadsleep%E5%92%8Clocksupportpark%E7%9A%84%E5%8C%BA%E5%88%AB">Thread.sleep()和LockSupport.park()的区别</a></li>
<li>Object.wait()和LockSupport.park()的区别
<ul>
<li><a href="#%E5%A6%82%E6%9E%9C%E5%9C%A8wait%E4%B9%8B%E5%89%8D%E6%89%A7%E8%A1%8C%E4%BA%86notify%E4%BC%9A%E6%80%8E%E6%A0%B7">如果在wait()之前执行了notify()会怎样?</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E5%9C%A8park%E4%B9%8B%E5%89%8D%E6%89%A7%E8%A1%8C%E4%BA%86unpark%E4%BC%9A%E6%80%8E%E6%A0%B7">如果在park()之前执行了unpark()会怎样?</a></li>
</ul>
</li>
<li><a href="#locksupportpark%E4%BC%9A%E9%87%8A%E6%94%BE%E9%94%81%E8%B5%84%E6%BA%90%E5%90%97">LockSupport.park()会释放锁资源吗?</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>为什么LockSupport也是核心基础类? AQS框架借助于两个类：Unsafe(提供CAS操作)和LockSupport(提供park/unpark操作)</li>
<li>写出分别通过wait/notify和LockSupport的park/unpark实现同步?</li>
<li>LockSupport.park()会释放锁资源吗? 那么Condition.await()呢?</li>
<li>Thread.sleep()、Object.wait()、Condition.await()、LockSupport.park()的区别? 重点</li>
<li>如果在wait()之前执行了notify()会怎样?</li>
<li>如果在park()之前执行了unpark()会怎样?</li>
</ul>
<h2><a class="header-anchor" href="#locksupport简介"><span></span></a><a href="#locksupport%E7%AE%80%E4%BB%8B">#</a> LockSupport简介</h2>
<p>LockSupport用来创建锁和其他同步类的基本线程阻塞原语。简而言之，当调用LockSupport.park时，表示当前线程将会等待，直至获得许可，当调用LockSupport.unpark时，必须把等待获得许可的线程作为参数进行传递，好让此线程继续运行。</p>
<h2><a class="header-anchor" href="#locksupport源码分析"><span></span></a><a href="#locksupport%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> LockSupport源码分析</h2>
<h3><a class="header-anchor" href="#类的属性"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> LockSupport</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Hotspot implementation via intrinsics API</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#E06C75"> UNSAFE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 表示内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> parkBlockerOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 表示内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> SEED</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 表示内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> PROBE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 表示内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> SECONDARY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 获取Unsafe实例</span></span>
<span class="line"><span style="color:#E06C75">            UNSAFE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 线程类类型</span></span>
<span class="line"><span style="color:#E5C07B">            Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> tk </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 获取Thread的parkBlocker字段的内存偏移地址</span></span>
<span class="line"><span style="color:#E06C75">            parkBlockerOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">tk</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"parkBlocker"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 获取Thread的threadLocalRandomSeed字段的内存偏移地址</span></span>
<span class="line"><span style="color:#E06C75">            SEED </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">tk</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"threadLocalRandomSeed"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 获取Thread的threadLocalRandomProbe字段的内存偏移地址</span></span>
<span class="line"><span style="color:#E06C75">            PROBE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">tk</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"threadLocalRandomProbe"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 获取Thread的threadLocalRandomSecondarySeed字段的内存偏移地址</span></span>
<span class="line"><span style="color:#E06C75">            SECONDARY </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">tk</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"threadLocalRandomSecondarySeed"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) { </span><span style="color:#C678DD">throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#E06C75">(ex)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: UNSAFE字段表示sun.misc.Unsafe类，查看其源码，点击在这里，一般程序中不允许直接调用，而long型的表示实例对象相应字段在内存中的偏移地址，可以通过该偏移地址获取或者设置该字段的值。</p>
<h3><a class="header-anchor" href="#类的构造函数"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 私有构造函数，无法被实例化</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#61AFEF"> LockSupport</span><span style="color:#E06C75">() {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: LockSupport只有一个私有构造函数，无法被实例化。</p>
<h3><a class="header-anchor" href="#核心函数分析"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 核心函数分析</h3>
<p>在分析LockSupport函数之前，先引入sun.misc.Unsafe类中的park和unpark函数，因为LockSupport的核心函数都是基于Unsafe类中定义的park和unpark函数，下面给出两个函数的定义:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> park</span><span style="color:#E06C75">(</span><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> isAbsolute</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> time)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> unpark</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Thread</span><span style="color:#E06C75"> thread)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 对两个函数的说明如下:</p>
<ul>
<li>park函数，阻塞线程，并且该线程在下列情况发生之前都会被阻塞: ① 调用unpark函数，释放该线程的许可。② 该线程被中断。③ 设置的时间到了。并且，当time为绝对时间时，isAbsolute为true，否则，isAbsolute为false。当time为0时，表示无限等待，直到unpark发生。</li>
<li>unpark函数，释放线程的许可，即激活调用park后阻塞的线程。这个函数不是安全的，调用这个函数时要确保线程依旧存活。</li>
</ul>
<h4><a class="header-anchor" href="#park函数"><span></span></a><a href="#park%E5%87%BD%E6%95%B0">#</a> park函数</h4>
<p>park函数有两个重载版本，方法摘要如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> park</span><span style="color:#E06C75">()；</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> park</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> blocker)；</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 两个函数的区别在于park()函数没有没有blocker，即没有设置线程的parkBlocker字段。park(Object)型函数如下。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> park</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> blocker) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取当前线程</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 设置Blocker</span></span>
<span class="line"><span style="color:#61AFEF">    setBlocker</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> blocker)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取许可</span></span>
<span class="line"><span style="color:#E5C07B">    UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0L</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重新可运行后再此设置Blocker</span></span>
<span class="line"><span style="color:#61AFEF">    setBlocker</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 调用park函数时，首先获取当前线程，然后设置当前线程的parkBlocker字段，即调用setBlocker函数，之后调用Unsafe类的park函数，之后再调用setBlocker函数。那么问题来了，为什么要在此park函数中要调用两次setBlocker函数呢? 原因其实很简单，调用park函数时，当前线程首先设置好parkBlocker字段，然后再调用Unsafe的park函数，此后，当前线程就已经阻塞了，等待该线程的unpark函数被调用，所以后面的一个setBlocker函数无法运行，unpark函数被调用，该线程获得许可后，就可以继续运行了，也就运行第二个setBlocker，把该线程的parkBlocker字段设置为null，这样就完成了整个park函数的逻辑。如果没有第二个setBlocker，那么之后没有调用park(Object blocker)，而直接调用getBlocker函数，得到的还是前一个park(Object blocker)设置的blocker，显然是不符合逻辑的。总之，必须要保证在park(Object blocker)整个函数执行完后，该线程的parkBlocker字段又恢复为null。所以，park(Object)型函数里必须要调用setBlocker函数两次。setBlocker方法如下。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setBlocker</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Thread</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> arg) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 设置线程t的parkBlocker字段的值为arg</span></span>
<span class="line"><span style="color:#E5C07B">    UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putObject</span><span style="color:#ABB2BF">(t, parkBlockerOffset, arg);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此方法用于设置线程t的parkBlocker字段的值为arg。</p>
<p>另外一个无参重载版本，park()函数如下。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> park</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取许可，设置时间为无限长，直到可以获取许可</span></span>
<span class="line"><span style="color:#E5C07B">    UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0L</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 调用了park函数后，会禁用当前线程，除非许可可用。在以下三种情况之一发生之前，当前线程都将处于休眠状态，即下列情况发生时，当前线程会获取许可，可以继续运行。</p>
<ul>
<li>其他某个线程将当前线程作为目标调用 unpark。</li>
<li>其他某个线程中断当前线程。</li>
<li>该调用不合逻辑地(即毫无理由地)返回。</li>
</ul>
<h4><a class="header-anchor" href="#parknanos函数"><span></span></a><a href="#parknanos%E5%87%BD%E6%95%B0">#</a> parkNanos函数</h4>
<p>此函数表示在许可可用前禁用当前线程，并最多等待指定的等待时间。具体函数如下。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> parkNanos</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> blocker</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> nanos) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (nanos </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 时间大于0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取当前线程</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置Blocker</span></span>
<span class="line"><span style="color:#61AFEF">        setBlocker</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> blocker)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取许可，并设置了时间</span></span>
<span class="line"><span style="color:#E5C07B">        UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">, nanos);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置许可</span></span>
<span class="line"><span style="color:#61AFEF">        setBlocker</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该函数也是调用了两次setBlocker函数，nanos参数表示相对时间，表示等待多长时间。</p>
<h4><a class="header-anchor" href="#parkuntil函数"><span></span></a><a href="#parkuntil%E5%87%BD%E6%95%B0">#</a> parkUntil函数</h4>
<p>此函数表示在指定的时限前禁用当前线程，除非许可可用, 具体函数如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> parkUntil</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> blocker</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> deadline) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取当前线程</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 设置Blocker</span></span>
<span class="line"><span style="color:#61AFEF">    setBlocker</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> blocker)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">, deadline);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 设置Blocker为null</span></span>
<span class="line"><span style="color:#61AFEF">    setBlocker</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该函数也调用了两次setBlocker函数，deadline参数表示绝对时间，表示指定的时间。</p>
<h4><a class="header-anchor" href="#unpark函数"><span></span></a><a href="#unpark%E5%87%BD%E6%95%B0">#</a> unpark函数</h4>
<p>此函数表示如果给定线程的许可尚不可用，则使其可用。如果线程在 park 上受阻塞，则它将解除其阻塞状态。否则，保证下一次调用 park 不会受阻塞。如果给定线程尚未启动，则无法保证此操作有任何效果。具体函数如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> unpark</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Thread</span><span style="color:#E06C75"> thread) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (thread </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 线程为不空</span></span>
<span class="line"><span style="color:#E5C07B">        UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unpark</span><span style="color:#ABB2BF">(thread);</span><span style="color:#7F848E;font-style:italic"> // 释放该线程许可</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 释放许可，指定线程可以继续运行。</p>
<h2><a class="header-anchor" href="#locksupport示例说明"><span></span></a><a href="#locksupport%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E">#</a> LockSupport示例说明</h2>
<h3><a class="header-anchor" href="#使用wait-notify实现线程同步"><span></span></a><a href="#%E4%BD%BF%E7%94%A8wait-notify%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5">#</a> 使用wait/notify实现线程同步</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before notify"</span><span style="color:#ABB2BF">);            </span></span>
<span class="line"><span style="color:#61AFEF">            notify</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after notify"</span><span style="color:#ABB2BF">);    </span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> WaitAndNotifyDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> myThread</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">();            </span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (myThread) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {        </span></span>
<span class="line"><span style="color:#E5C07B">                myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 主线程睡眠3s</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before wait"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 阻塞主线程</span></span>
<span class="line"><span style="color:#E5C07B">                myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after wait"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }            </span></span>
<span class="line"><span style="color:#ABB2BF">        }        </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">before wait</span></span>
<span class="line"><span style="color:#ABB2BF">before notify</span></span>
<span class="line"><span style="color:#ABB2BF">after notify</span></span>
<span class="line"><span style="color:#ABB2BF">after wait</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 具体的流程图如下</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-locksupport-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>使用wait/notify实现同步时，必须先调用wait，后调用notify，如果先调用notify，再调用wait，将起不了作用。具体代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before notify"</span><span style="color:#ABB2BF">);            </span></span>
<span class="line"><span style="color:#61AFEF">            notify</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after notify"</span><span style="color:#ABB2BF">);    </span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> WaitAndNotifyDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> myThread</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">();        </span></span>
<span class="line"><span style="color:#E5C07B">        myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 主线程睡眠3s</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (myThread) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {        </span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before wait"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 阻塞主线程</span></span>
<span class="line"><span style="color:#E5C07B">                myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after wait"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }            </span></span>
<span class="line"><span style="color:#ABB2BF">        }        </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">before notify</span></span>
<span class="line"><span style="color:#ABB2BF">after notify</span></span>
<span class="line"><span style="color:#ABB2BF">before wait</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 由于先调用了notify，再调用的wait，此时主线程还是会一直阻塞。</p>
<h3><a class="header-anchor" href="#使用park-unpark实现线程同步"><span></span></a><a href="#%E4%BD%BF%E7%94%A8park-unpark%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5">#</a> 使用park/unpark实现线程同步</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.LockSupport</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> object</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> object</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">object</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> object;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before unpark"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取blocker</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Blocker info "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBlocker</span><span style="color:#ABB2BF">((Thread) object));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放许可</span></span>
<span class="line"><span style="color:#E5C07B">        LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unpark</span><span style="color:#ABB2BF">((Thread) object);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 休眠500ms，保证先执行park中的setBlocker(t, null);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">500</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 再次获取blocker</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Blocker info "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBlocker</span><span style="color:#ABB2BF">((Thread) object));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after unpark"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> myThread</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before park"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取许可</span></span>
<span class="line"><span style="color:#E5C07B">        LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ParkAndUnparkDemo"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after park"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">before park</span></span>
<span class="line"><span style="color:#ABB2BF">before unpark</span></span>
<span class="line"><span style="color:#ABB2BF">Blocker info ParkAndUnparkDemo</span></span>
<span class="line"><span style="color:#ABB2BF">after park</span></span>
<span class="line"><span style="color:#ABB2BF">Blocker info null</span></span>
<span class="line"><span style="color:#ABB2BF">after unpark</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 本程序先执行park，然后在执行unpark，进行同步，并且在unpark的前后都调用了getBlocker，可以看到两次的结果不一样，并且第二次调用的结果为null，这是因为在调用unpark之后，执行了Lock.park(Object blocker)函数中的setBlocker(t, null)函数，所以第二次调用getBlocker时为null。</p>
<p>上例是先调用park，然后调用unpark，现在修改程序，先调用unpark，然后调用park，看能不能正确同步。具体代码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.LockSupport</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> object</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> object</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">object</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> object;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before unpark"</span><span style="color:#ABB2BF">);        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放许可</span></span>
<span class="line"><span style="color:#E5C07B">        LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unpark</span><span style="color:#ABB2BF">((Thread) object);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after unpark"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ParkAndUnparkDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> myThread</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 主线程睡眠3s</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before park"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取许可</span></span>
<span class="line"><span style="color:#E5C07B">        LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ParkAndUnparkDemo"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after park"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">before unpark</span></span>
<span class="line"><span style="color:#ABB2BF">after unpark</span></span>
<span class="line"><span style="color:#ABB2BF">before park</span></span>
<span class="line"><span style="color:#ABB2BF">after park</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 可以看到，在先调用unpark，再调用park时，仍能够正确实现同步，不会造成由wait/notify调用顺序不当所引起的阻塞。因此park/unpark相比wait/notify更加的灵活。</p>
<h3><a class="header-anchor" href="#中断响应"><span></span></a><a href="#%E4%B8%AD%E6%96%AD%E5%93%8D%E5%BA%94">#</a> 中断响应</h3>
<p>看下面示例</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.LockSupport</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> object</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> object</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">object</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> object;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before interrupt"</span><span style="color:#ABB2BF">);        </span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 休眠3s</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }    </span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> thread</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Thread) object;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 中断线程</span></span>
<span class="line"><span style="color:#E5C07B">        thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">interrupt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after interrupt"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> InterruptDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> myThread</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        myThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"before park"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取许可</span></span>
<span class="line"><span style="color:#E5C07B">        LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ParkAndUnparkDemo"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"after park"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果:</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">before park</span></span>
<span class="line"><span style="color:#ABB2BF">before interrupt</span></span>
<span class="line"><span style="color:#ABB2BF">after interrupt</span></span>
<span class="line"><span style="color:#ABB2BF">after park</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 可以看到，在主线程调用park阻塞后，在myThread线程中发出了中断信号，此时主线程会继续运行，也就是说明此时interrupt起到的作用与unpark一样。</p>
<h2><a class="header-anchor" href="#更深入的理解"><span></span></a><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%9A%84%E7%90%86%E8%A7%A3">#</a> 更深入的理解</h2>
<h3><a class="header-anchor" href="#thread-sleep-和object-wait-的区别"><span></span></a><a href="#thread-sleep-%E5%92%8Cobject-wait-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Thread.sleep()和Object.wait()的区别</h3>
<p>首先，我们先来看看Thread.sleep()和Object.wait()的区别，这是一个烂大街的题目了，大家应该都能说上来两点。</p>
<ul>
<li>Thread.sleep()不会释放占有的锁，Object.wait()会释放占有的锁；</li>
<li>Thread.sleep()必须传入时间，Object.wait()可传可不传，不传表示一直阻塞下去；</li>
<li>Thread.sleep()到时间了会自动唤醒，然后继续执行；</li>
<li>Object.wait()不带时间的，需要另一个线程使用Object.notify()唤醒；</li>
<li>Object.wait()带时间的，假如没有被notify，到时间了会自动唤醒，这时又分好两种情况，一是立即获取到了锁，线程自然会继续执行；二是没有立即获取锁，线程进入同步队列等待获取锁；</li>
</ul>
<p>其实，他们俩最大的区别就是Thread.sleep()不会释放锁资源，Object.wait()会释放锁资源。</p>
<h3><a class="header-anchor" href="#object-wait-和condition-await-的区别"><span></span></a><a href="#object-wait-%E5%92%8Ccondition-await-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Object.wait()和Condition.await()的区别</h3>
<p>Object.wait()和Condition.await()的原理是基本一致的，不同的是Condition.await()底层是调用LockSupport.park()来实现阻塞当前线程的。</p>
<p>实际上，它在阻塞当前线程之前还干了两件事，一是把当前线程添加到条件队列中，二是“完全”释放锁，也就是让state状态变量变为0，然后才是调用LockSupport.park()阻塞当前线程。</p>
<h3><a class="header-anchor" href="#thread-sleep-和locksupport-park-的区别"><span></span></a><a href="#thread-sleep-%E5%92%8Clocksupport-park-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Thread.sleep()和LockSupport.park()的区别</h3>
<p>LockSupport.park()还有几个兄弟方法——parkNanos()、parkUtil()等，我们这里说的park()方法统称这一类方法。</p>
<ul>
<li>从功能上来说，Thread.sleep()和LockSupport.park()方法类似，都是阻塞当前线程的执行，且都不会释放当前线程占有的锁资源；</li>
<li>Thread.sleep()没法从外部唤醒，只能自己醒过来；</li>
<li>LockSupport.park()方法可以被另一个线程调用LockSupport.unpark()方法唤醒；</li>
<li>Thread.sleep()方法声明上抛出了InterruptedException中断异常，所以调用者需要捕获这个异常或者再抛出；</li>
<li>LockSupport.park()方法不需要捕获中断异常；</li>
<li>Thread.sleep()本身就是一个native方法；</li>
<li>LockSupport.park()底层是调用的Unsafe的native方法；</li>
</ul>
<h3><a class="header-anchor" href="#object-wait-和locksupport-park-的区别"><span></span></a><a href="#object-wait-%E5%92%8Clocksupport-park-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Object.wait()和LockSupport.park()的区别</h3>
<p>二者都会阻塞当前线程的运行，他们有什么区别呢? 经过上面的分析相信你一定很清楚了，真的吗? 往下看！</p>
<ul>
<li>Object.wait()方法需要在synchronized块中执行；</li>
<li>LockSupport.park()可以在任意地方执行；</li>
<li>Object.wait()方法声明抛出了中断异常，调用者需要捕获或者再抛出；</li>
<li>LockSupport.park()不需要捕获中断异常；</li>
<li>Object.wait()不带超时的，需要另一个线程执行notify()来唤醒，但不一定继续执行后续内容；</li>
<li>LockSupport.park()不带超时的，需要另一个线程执行unpark()来唤醒，一定会继续执行后续内容；</li>
</ul>
<p>park()/unpark()底层的原理是“二元信号量”，你可以把它相像成只有一个许可证的Semaphore，只不过这个信号量在重复执行unpark()的时候也不会再增加许可证，最多只有一个许可证。</p>
<h4><a class="header-anchor" href="#如果在wait-之前执行了notify-会怎样"><span></span></a><a href="#%E5%A6%82%E6%9E%9C%E5%9C%A8wait-%E4%B9%8B%E5%89%8D%E6%89%A7%E8%A1%8C%E4%BA%86notify-%E4%BC%9A%E6%80%8E%E6%A0%B7">#</a> 如果在wait()之前执行了notify()会怎样?</h4>
<p>如果当前的线程不是此对象锁的所有者，却调用该对象的notify()或wait()方法时抛出IllegalMonitorStateException异常；</p>
<p>如果当前线程是此对象锁的所有者，wait()将一直阻塞，因为后续将没有其它notify()唤醒它。</p>
<h4><a class="header-anchor" href="#如果在park-之前执行了unpark-会怎样"><span></span></a><a href="#%E5%A6%82%E6%9E%9C%E5%9C%A8park-%E4%B9%8B%E5%89%8D%E6%89%A7%E8%A1%8C%E4%BA%86unpark-%E4%BC%9A%E6%80%8E%E6%A0%B7">#</a> 如果在park()之前执行了unpark()会怎样?</h4>
<p>线程不会被阻塞，直接跳过park()，继续执行后续内容</p>
<h3><a class="header-anchor" href="#locksupport-park-会释放锁资源吗"><span></span></a><a href="#locksupport-park-%E4%BC%9A%E9%87%8A%E6%94%BE%E9%94%81%E8%B5%84%E6%BA%90%E5%90%97">#</a> LockSupport.park()会释放锁资源吗?</h3>
<p>不会，它只负责阻塞当前线程，释放锁资源实际上是在Condition的await()方法中实现的。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-locksupport-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 锁之 ReentrantLock 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20ReentrantLock%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20ReentrantLock%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 锁之 ReentrantLock 详解</source>
      <description>可重入锁ReentrantLock的底层是通过AbstractQueuedSynchronizer实现，所以先要学习上一章节AbstractQueuedSynchronizer详解。 JUC 锁之 ReentrantLock 详解 带着BAT大厂的面试问题去理解 ReentrantLock源码分析 类的继承关系 类的内部类 类的属性 类的构造函数 核心...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>可重入锁ReentrantLock的底层是通过AbstractQueuedSynchronizer实现，所以先要学习上一章节AbstractQueuedSynchronizer详解。</p>
</blockquote>
<ul>
<li>JUC 锁之 ReentrantLock 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>ReentrantLock源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">核心函数分析</a></li>
</ul>
</li>
<li>示例分析
<ul>
<li><a href="#%E5%85%AC%E5%B9%B3%E9%94%81">公平锁</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>什么是可重入，什么是可重入锁? 它用来解决什么问题?</li>
<li>ReentrantLock的核心是AQS，那么它怎么来实现的，继承吗? 说说其类内部结构关系。</li>
<li>ReentrantLock是如何实现公平锁的?</li>
<li>ReentrantLock是如何实现非公平锁的?</li>
<li>ReentrantLock默认实现的是公平还是非公平锁?</li>
<li>使用ReentrantLock实现公平和非公平锁的示例?</li>
<li>ReentrantLock和Synchronized的对比?</li>
</ul>
<h2><a class="header-anchor" href="#reentrantlock源码分析"><span></span></a><a href="#reentrantlock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> ReentrantLock源码分析</h2>
<h3><a class="header-anchor" href="#类的继承关系"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</h3>
<p>ReentrantLock实现了Lock接口，Lock接口中定义了lock与unlock相关操作，并且还存在newCondition方法，表示生成一个条件。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Lock</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#类的内部类"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</h3>
<p>ReentrantLock总共有三个内部类，并且三个内部类是紧密相关的，下面先看三个类的关系。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-1.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: ReentrantLock类内部总共存在Sync、NonfairSync、FairSync三个类，NonfairSync与FairSync类继承自Sync类，Sync类继承自AbstractQueuedSynchronizer抽象类。下面逐个进行分析。</p>
<ul>
<li>Sync类</li>
</ul>
<p>Sync类的源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">abstract</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Sync</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractQueuedSynchronizer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 序列号</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">5179523762034025860L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取锁</span></span>
<span class="line"><span style="color:#C678DD">    abstract</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 非公平方式获取</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> nonfairTryAcquire</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> acquires</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 当前线程</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Thread</span><span style="color:#E06C75"> current</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取状态</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getState</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">// 表示没有线程正在竞争该锁</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (</span><span style="color:#61AFEF">compareAndSetState</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, acquires)) { </span><span style="color:#7F848E;font-style:italic">// 比较并设置状态成功，状态0表示锁没有被占用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 设置当前线程独占</span></span>
<span class="line"><span style="color:#61AFEF">                setExclusiveOwnerThread</span><span style="color:#ABB2BF">(current); </span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 成功</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (current </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> getExclusiveOwnerThread</span><span style="color:#ABB2BF">()) { </span><span style="color:#7F848E;font-style:italic">// 当前线程拥有该锁</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nextc</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> c </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> acquires; </span><span style="color:#7F848E;font-style:italic">// 增加重入次数</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nextc </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// overflow</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Maximum lock count exceeded"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 设置状态</span></span>
<span class="line"><span style="color:#61AFEF">            setState</span><span style="color:#ABB2BF">(nextc); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 成功</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">; </span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 失败</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 试图在共享模式下获取对象状态，此方法应该查询是否允许它在共享模式下获取对象状态，如果允许，则获取它</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryRelease</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> releases</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getState</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> releases;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">!=</span><span style="color:#61AFEF"> getExclusiveOwnerThread</span><span style="color:#ABB2BF">()) </span><span style="color:#7F848E;font-style:italic">// 当前线程不为独占线程</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalMonitorStateException</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// 抛出异常</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放标识</span></span>
<span class="line"><span style="color:#C678DD">        boolean</span><span style="color:#E06C75"> free</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">; </span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            free </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 已经释放，清空独占</span></span>
<span class="line"><span style="color:#61AFEF">            setExclusiveOwnerThread</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">); </span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置标识</span></span>
<span class="line"><span style="color:#61AFEF">        setState</span><span style="color:#ABB2BF">(c); </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> free; </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 判断资源是否被当前线程占有</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isHeldExclusively</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // While we must in general read state before owner,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // we don't need to do so to check if current thread is owner</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getExclusiveOwnerThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 新生一个条件</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> ConditionObject</span><span style="color:#61AFEF"> newCondition</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ConditionObject</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Methods relayed from outer class</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回资源的占用线程</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> Thread</span><span style="color:#61AFEF"> getOwner</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {        </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getState</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> ?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> getExclusiveOwnerThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回状态</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getHoldCount</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {            </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> isHeldExclusively</span><span style="color:#ABB2BF">() </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> getState</span><span style="color:#ABB2BF">() </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 资源是否被占用</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isLocked</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {        </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getState</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Reconstitutes the instance from a stream (that is, deserializes it).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 自定义反序列化逻辑</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ObjectInputStream</span><span style="color:#E06C75;font-style:italic"> s</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        throws</span><span style="color:#E5C07B"> java.io.IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ClassNotFoundException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">defaultReadObject</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        setState</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// reset to unlocked state</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">　　</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sync类存在如下方法和作用如下。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-2.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<ul>
<li>NonfairSync类</li>
</ul>
<p>NonfairSync类继承了Sync类，表示采用非公平策略获取锁，其实现了Sync类中抽象的lock方法，源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 非公平锁</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NonfairSync</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Sync</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 7316153563782823691L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获得锁</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> lock</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#61AFEF">compareAndSetState</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)) </span><span style="color:#7F848E;font-style:italic">// 比较并设置状态成功，状态0表示锁没有被占用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 把当前线程设置独占了锁</span></span>
<span class="line"><span style="color:#61AFEF">            setExclusiveOwnerThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#7F848E;font-style:italic"> // 锁已经被占用，或者set失败</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 以独占模式获取对象，忽略中断</span></span>
<span class="line"><span style="color:#61AFEF">            acquire</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">); </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryAcquire</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> acquires</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> nonfairTryAcquire</span><span style="color:#ABB2BF">(acquires);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 从lock方法的源码可知，每一次都尝试获取锁，而并不会按照公平等待的原则进行等待，让等待时间最久的线程获得锁。</p>
<ul>
<li>FairSyn类</li>
</ul>
<p>FairSync类也继承了Sync类，表示采用公平策略获取锁，其实现了Sync类中的抽象lock方法，源码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 公平锁</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FairSync</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Sync</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 版本序列化</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">3000897897090466540L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> lock</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 以独占模式获取对象，忽略中断</span></span>
<span class="line"><span style="color:#61AFEF">        acquire</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Fair version of tryAcquire.  Don't grant access unless</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * recursive call or no waiters or is first.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 尝试公平获取锁</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> tryAcquire</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> acquires</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取当前线程</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Thread</span><span style="color:#E06C75"> current</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取状态</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getState</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">// 状态为0</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">hasQueuedPredecessors</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF">                compareAndSetState</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, acquires)) { </span><span style="color:#7F848E;font-style:italic">// 不存在已经等待更久的线程并且比较并且设置状态成功</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 设置当前线程独占</span></span>
<span class="line"><span style="color:#61AFEF">                setExclusiveOwnerThread</span><span style="color:#ABB2BF">(current);</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (current </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> getExclusiveOwnerThread</span><span style="color:#ABB2BF">()) { </span><span style="color:#7F848E;font-style:italic">// 状态不为0，即资源已经被线程占据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 下一个状态</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nextc</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> c </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> acquires;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nextc </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 超过了int的表示范围</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Maximum lock count exceeded"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 设置状态</span></span>
<span class="line"><span style="color:#61AFEF">            setState</span><span style="color:#ABB2BF">(nextc);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 跟踪lock方法的源码可知，当资源空闲时，它总是会先判断sync队列(AbstractQueuedSynchronizer中的数据结构)是否有等待时间更长的线程，如果存在，则将该线程加入到等待队列的尾部，实现了公平获取原则。其中，FairSync类的lock的方法调用如下，只给出了主要的方法。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-3.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 可以看出只要资源被其他线程占用，该线程就会添加到sync queue中的尾部，而不会先尝试获取资源。这也是和Nonfair最大的区别，Nonfair每一次都会尝试去获取资源，如果此时该资源恰好被释放，则会被当前线程获取，这就造成了不公平的现象，当获取不成功，再加入队列尾部。</p>
<h3><a class="header-anchor" href="#类的属性"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</h3>
<p>ReentrantLock类的sync非常重要，对ReentrantLock类的操作大部分都直接转化为对Sync和AbstractQueuedSynchronizer类的操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Lock</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 序列号</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 7373984872572414699L</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 同步队列</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Sync</span><span style="color:#E06C75"> sync</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#类的构造函数"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</h3>
<ul>
<li>ReentrantLock()型构造函数</li>
</ul>
<p>默认是采用的非公平策略获取锁</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 默认非公平策略</span></span>
<span class="line"><span style="color:#E06C75">    sync </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NonfairSync</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>ReentrantLock(boolean)型构造函数</li>
</ul>
<p>可以传递参数确定采用公平策略或者是非公平策略，参数为true表示公平策略，否则，采用非公平策略:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#E06C75">(</span><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> fair) {</span></span>
<span class="line"><span style="color:#E06C75">    sync </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> fair </span><span style="color:#C678DD">?</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FairSync</span><span style="color:#E06C75">() </span><span style="color:#C678DD">:</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NonfairSync</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#核心函数分析"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 核心函数分析</h3>
<p>通过分析ReentrantLock的源码，可知对其操作都转化为对Sync对象的操作，由于Sync继承了AQS，所以基本上都可以转化为对AQS的操作。如将ReentrantLock的lock函数转化为对Sync的lock函数的调用，而具体会根据采用的策略(如公平策略或者非公平策略)的不同而调用到Sync的不同子类。</p>
<p>所以可知，在ReentrantLock的背后，是AQS对其服务提供了支持，由于之前我们分析AQS的核心源码，遂不再累赘。下面还是通过例子来更进一步分析源码。</p>
<h2><a class="header-anchor" href="#示例分析"><span></span></a><a href="#%E7%A4%BA%E4%BE%8B%E5%88%86%E6%9E%90">#</a> 示例分析</h2>
<h3><a class="header-anchor" href="#公平锁"><span></span></a><a href="#%E5%85%AC%E5%B9%B3%E9%94%81">#</a> 公平锁</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.Lock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.ReentrantLock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Lock</span><span style="color:#E06C75"> lock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Lock</span><span style="color:#E06C75;font-style:italic"> lock</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(name);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lock</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> lock;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF"> ()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " running"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">500</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AbstractQueuedSynchronizerDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Lock</span><span style="color:#E06C75"> lock</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"t1"</span><span style="color:#ABB2BF">, lock);        </span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"t2"</span><span style="color:#ABB2BF">, lock);</span></span>
<span class="line"><span style="color:#E5C07B">        MyThread</span><span style="color:#E06C75"> t3</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyThread</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"t3"</span><span style="color:#ABB2BF">, lock);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();    </span></span>
<span class="line"><span style="color:#E5C07B">        t3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次):</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">Thread[t1,5,main] running</span></span>
<span class="line"><span style="color:#ABB2BF">Thread[t2,5,main] running</span></span>
<span class="line"><span style="color:#ABB2BF">Thread[t3,5,main] running</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该示例使用的是公平策略，由结果可知，可能会存在如下一种时序。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-4.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 首先，t1线程的lock操作 -&gt; t2线程的lock操作 -&gt; t3线程的lock操作 -&gt; t1线程的unlock操作 -&gt; t2线程的unlock操作 -&gt; t3线程的unlock操作。根据这个时序图来进一步分析源码的工作流程。</p>
<ul>
<li>t1线程执行lock.lock，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-5.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 由调用流程可知，t1线程成功获取了资源，可以继续执行。</p>
<ul>
<li>t2线程执行lock.lock，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-6.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 由上图可知，最后的结果是t2线程会被禁止，因为调用了LockSupport.park。</p>
<ul>
<li>t3线程执行lock.lock，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-7.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 由上图可知，最后的结果是t3线程会被禁止，因为调用了LockSupport.park。</p>
<ul>
<li>t1线程调用了lock.unlock，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-8.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 如上图所示，最后，head的状态会变为0，t2线程会被unpark，即t2线程可以继续运行。此时t3线程还是被禁止。</p>
<ul>
<li>t2获得cpu资源，继续运行，由于t2之前被park了，现在需要恢复之前的状态，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-9.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 在setHead函数中会将head设置为之前head的下一个结点，并且将pre域与thread域都设置为null，在acquireQueued返回之前，sync queue就只有两个结点了。</p>
<ul>
<li>t2执行lock.unlock，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-10.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 由上图可知，最终unpark t3线程，让t3线程可以继续运行。</p>
<ul>
<li>t3线程获取cpu资源，恢复之前的状态，继续运行。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-11.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 最终达到的状态是sync queue中只剩下了一个结点，并且该节点除了状态为0外，其余均为null。</p>
<ul>
<li>t3执行lock.unlock，下图给出了方法调用中的主要方法。</li>
</ul>
<figure><img src="https://pdai.tech/images/thread/java-thread-x-juc-reentrantlock-12.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>说明: 最后的状态和之前的状态是一样的，队列中有一个空节点，头节点为尾节点均指向它。</p>
<p>使用公平策略和Condition的情况可以参考上一篇关于AQS的源码示例分析部分，不再累赘。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-reentrantlock-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 锁之 ReentrantReadWriteLock 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20ReentrantReadWriteLock%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20ReentrantReadWriteLock%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 锁之 ReentrantReadWriteLock 详解</source>
      <description>ReentrantReadWriteLock表示可重入读写锁，ReentrantReadWriteLock中包含了两种锁，读锁ReadLock和写锁WriteLock，可以通过这两种锁实现线程间的同步。 JUC 锁之 ReentrantReadWriteLock 详解 带着BAT大厂的面试问题去理解 ReentrantReadWriteLock数据结构...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>ReentrantReadWriteLock表示可重入读写锁，ReentrantReadWriteLock中包含了两种锁，读锁ReadLock和写锁WriteLock，可以通过这两种锁实现线程间的同步。</p>
</blockquote>
<ul>
<li>JUC 锁之 ReentrantReadWriteLock 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#reentrantreadwritelock%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">ReentrantReadWriteLock数据结构</a></li>
<li>ReentrantReadWriteLock源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li>[内部类 - Sync类](#内部类</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 锁之核心类 AQS 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%B1%BB%20AQS%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%B1%BB%20AQS%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 锁之核心类 AQS 详解</source>
      <description>AbstractQueuedSynchronizer抽象类是核心，需要重点掌握。它提供了一个基于FIFO队列，可以用于构建锁或者其他相关同步装置的基础框架。 JUC 锁之核心类 AQS 详解 带着BAT大厂的面试问题去理解 AbstractQueuedSynchronizer简介 AQS 核心思想 AQS 对资源的共享方式 AQS底层使用了模板方法模式...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>AbstractQueuedSynchronizer抽象类是核心，需要重点掌握。它提供了一个基于FIFO队列，可以用于构建锁或者其他相关同步装置的基础框架。</p>
</blockquote>
<ul>
<li>JUC 锁之核心类 AQS 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>AbstractQueuedSynchronizer简介
<ul>
<li><a href="#aqs-%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3">AQS 核心思想</a></li>
<li><a href="#aqs-%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%B9%E5%BC%8F">AQS 对资源的共享方式</a></li>
<li><a href="#aqs%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">AQS底层使用了模板方法模式</a></li>
</ul>
</li>
<li><a href="#abstractqueuedsynchronizer%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">AbstractQueuedSynchronizer数据结构</a></li>
<li>AbstractQueuedSynchronizer源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li>[类的内部类 - Node类](#类的内部类</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 集合之 BlockingQueue 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20BlockingQueue%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20BlockingQueue%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 集合之 BlockingQueue 详解</source>
      <description>JUC里的 BlockingQueue 接口表示一个线程安放入和提取实例的队列。本文将给你演示如何使用这个 BlockingQueue，不会讨论如何在 Java 中实现一个你自己的 BlockingQueue。 JUC 集合之 BlockingQueue 详解 带着BAT大厂的面试问题去理解 BlockingQueue和BlockingDeque Bl...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>JUC里的 BlockingQueue 接口表示一个线程安放入和提取实例的队列。本文将给你演示如何使用这个 BlockingQueue，不会讨论如何在 Java 中实现一个你自己的 BlockingQueue。</p>
</blockquote>
<ul>
<li>JUC 集合之 BlockingQueue 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>BlockingQueue和BlockingDeque
<ul>
<li><a href="#blockingqueue">BlockingQueue</a></li>
<li><a href="#blockingqueue-%E7%9A%84%E6%96%B9%E6%B3%95">BlockingQueue 的方法</a></li>
<li><a href="#blockingdeque">BlockingDeque</a></li>
<li><a href="#blockingdeque-%E7%9A%84%E6%96%B9%E6%B3%95">BlockingDeque 的方法</a></li>
<li><a href="#blockingdeque-%E4%B8%8Eblockingqueue%E5%85%B3%E7%B3%BB">BlockingDeque 与BlockingQueue关系</a></li>
</ul>
</li>
<li>BlockingQueue 的例子
<ul>
<li><a href="#%E6%95%B0%E7%BB%84%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-arrayblockingqueue">数组阻塞队列 ArrayBlockingQueue</a></li>
<li><a href="#%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97-delayqueue">延迟队列 DelayQueue</a></li>
<li><a href="#%E9%93%BE%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-linkedblockingqueue">链阻塞队列 LinkedBlockingQueue</a></li>
<li><a href="#%E5%85%B7%E6%9C%89%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-priorityblockingqueue">具有优先级的阻塞队列 PriorityBlockingQueue</a></li>
<li><a href="#%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97-synchronousqueue">同步队列 SynchronousQueue</a></li>
</ul>
</li>
<li>BlockingDeque 的例子
<ul>
<li><a href="#%E9%93%BE%E9%98%BB%E5%A1%9E%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97-linkedblockingdeque">链阻塞双端队列 LinkedBlockingDeque</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>什么是BlockingDeque?</li>
<li>BlockingQueue大家族有哪些? ArrayBlockingQueue, DelayQueue, LinkedBlockingQueue, SynchronousQueue...</li>
<li>BlockingQueue适合用在什么样的场景?</li>
<li>BlockingQueue常用的方法?</li>
<li>BlockingQueue插入方法有哪些? 这些方法(<code>add(o)</code>,<code>offer(o)</code>,<code>put(o)</code>,<code>offer(o, timeout, timeunit)</code>)的区别是什么?</li>
<li>BlockingDeque 与BlockingQueue有何关系，请对比下它们的方法?</li>
<li>BlockingDeque适合用在什么样的场景?</li>
<li>BlockingDeque大家族有哪些?</li>
<li>BlockingDeque 与BlockingQueue实现例子?</li>
</ul>
<h2><a class="header-anchor" href="#blockingqueue和blockingdeque"><span></span></a><a href="#blockingqueue%E5%92%8Cblockingdeque">#</a> BlockingQueue和BlockingDeque</h2>
<h3><a class="header-anchor" href="#blockingqueue"><span></span></a><a href="#blockingqueue">#</a> BlockingQueue</h3>
<p>BlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-blocking-queue-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>一个线程往里边放，另外一个线程从里边取的一个 BlockingQueue。</p>
<p>一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。 负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。</p>
<h3><a class="header-anchor" href="#blockingqueue-的方法"><span></span></a><a href="#blockingqueue-%E7%9A%84%E6%96%B9%E6%B3%95">#</a> BlockingQueue 的方法</h3>
<p>BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下:</p>
<p>|      | 抛异常    | 特定值   | 阻塞   | 超时                        |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-blocking-queue-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 集合之 ConcurrentHashMap 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20ConcurrentHashMap%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20ConcurrentHashMap%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 集合之 ConcurrentHashMap 详解</source>
      <description>DK1.7之前的ConcurrentHashMap使用分段锁机制实现，JDK1.8则使用数组+链表+红黑树数据结构和CAS原子操作实现ConcurrentHashMap；本文将分别介绍这两种方式的实现方案及其区别。 JUC 集合之 ConcurrentHashMap 详解 带着BAT大厂的面试问题去理解 为什么HashTable慢 Concurrent...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>DK1.7之前的ConcurrentHashMap使用分段锁机制实现，JDK1.8则使用数组+链表+红黑树数据结构和CAS原子操作实现ConcurrentHashMap；本文将分别介绍这两种方式的实现方案及其区别。</p>
</blockquote>
<ul>
<li>JUC 集合之 ConcurrentHashMap 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88hashtable%E6%85%A2">为什么HashTable慢</a></li>
<li>ConcurrentHashMap - JDK 1.7
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a></li>
<li><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">put 过程分析</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A7%BD-ensuresegment">初始化槽: ensureSegment</a></li>
<li><a href="#%E8%8E%B7%E5%8F%96%E5%86%99%E5%85%A5%E9%94%81-scanandlockforput">获取写入锁: scanAndLockForPut</a></li>
<li><a href="#%E6%89%A9%E5%AE%B9-rehash">扩容: rehash</a></li>
<li><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">get 过程分析</a></li>
<li><a href="#%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90">并发问题分析</a></li>
</ul>
</li>
<li>ConcurrentHashMap - JDK 1.8
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1">数据结构</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96-1">初始化</a></li>
<li><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90-1">put 过程分析</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84-inittable">初始化数组: initTable</a></li>
<li><a href="#%E9%93%BE%E8%A1%A8%E8%BD%AC%E7%BA%A2%E9%BB%91%E6%A0%91-treeifybin">链表转红黑树: treeifyBin</a></li>
<li><a href="#%E6%89%A9%E5%AE%B9-trypresize">扩容: tryPresize</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB-transfer">数据迁移: transfer</a></li>
<li><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90-1">get 过程分析</a></li>
</ul>
</li>
<li><a href="#%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93">对比总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么?</li>
<li>ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题</li>
<li>ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制</li>
<li>ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS</li>
<li>ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容?</li>
<li>ConcurrentHashMap JDK1.7说说其put的机制?</li>
<li>ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容)</li>
<li>ConcurrentHashMap JDK1.8是如何扩容的? tryPresize</li>
<li>ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8?</li>
<li>ConcurrentHashMap JDK1.8是如何进行数据迁移的? transfer</li>
</ul>
<h2><a class="header-anchor" href="#为什么hashtable慢"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88hashtable%E6%85%A2">#</a> 为什么HashTable慢</h2>
<p>Hashtable之所以效率低下主要是因为其实现使用了synchronized关键字对put等操作进行加锁，而synchronized关键字加锁是对整个对象进行加锁，也就是说在进行put等修改Hash表的操作时，锁住了整个Hash表，从而使得其表现的效率低下。</p>
<h2><a class="header-anchor" href="#concurrenthashmap-jdk-1-7"><span></span></a><a href="#concurrenthashmap-jdk-1-7">#</a> ConcurrentHashMap - JDK 1.7</h2>
<p>在JDK1.5~1.7版本，Java使用了分段锁机制实现ConcurrentHashMap.</p>
<p>简而言之，ConcurrentHashMap在对象中保存了一个Segment数组，即将整个Hash表划分为多个分段；而每个Segment元素，即每个分段则类似于一个Hashtable；这样，在执行put操作时首先根据hash算法定位到元素属于哪个Segment，然后对该Segment加锁即可。因此，ConcurrentHashMap在多线程并发编程中可是实现多线程put操作。接下来分析JDK1.7版本中ConcurrentHashMap的实现原理。</p>
<h3><a class="header-anchor" href="#数据结构"><span></span></a><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 数据结构</h3>
<p>整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个 segment。</p>
<p>简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承 ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-concurrent-hashmap-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><code>concurrencyLevel</code>: 并行级别、并发数、Segment 数，怎么翻译不重要，理解它。默认是 16，也就是说 ConcurrentHashMap 有 16 个 Segments，所以理论上，这个时候，最多可以同时支持 16 个线程并发写，只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时候设置为其他值，但是一旦初始化以后，它是不可以扩容的。</p>
<p>再具体到每个 Segment 内部，其实每个 Segment 很像之前介绍的 HashMap，不过它要保证线程安全，所以处理起来要麻烦些。</p>
<h3><a class="header-anchor" href="#初始化"><span></span></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 初始化</h3>
<ul>
<li>initialCapacity: 初始容量，这个值指的是整个 ConcurrentHashMap 的初始容量，实际操作的时候需要平均分给每个 Segment。</li>
<li>loadFactor: 负载因子，之前我们说了，Segment 数组不可以扩容，所以这个负载因子是给每个 Segment 内部使用的。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ConcurrentHashMap</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> initialCapacity</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                         float</span><span style="color:#E06C75"> loadFactor</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> concurrencyLevel) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">(loadFactor </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> initialCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> concurrencyLevel </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (concurrencyLevel </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAX_SEGMENTS)</span></span>
<span class="line"><span style="color:#E06C75">        concurrencyLevel </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> MAX_SEGMENTS</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Find power-of-two sizes best matching arguments</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> sshift </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> ssize </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 计算并行级别 ssize，因为要保持并行级别是 2 的 n 次方</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (ssize </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> concurrencyLevel) {</span></span>
<span class="line"><span style="color:#ABB2BF">        ++</span><span style="color:#E06C75">sshift</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        ssize </span><span style="color:#56B6C2">&lt;&lt;=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 我们这里先不要那么烧脑，用默认值，concurrencyLevel 为 16，sshift 为 4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 那么计算出 segmentShift 为 28，segmentMask 为 15，后面会用到这两个值</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">segmentShift</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 32</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75"> sshift</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">segmentMask</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> ssize </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAXIMUM_CAPACITY)</span></span>
<span class="line"><span style="color:#E06C75">        initialCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> MAXIMUM_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // initialCapacity 是设置整个 map 初始的大小，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 这里根据 initialCapacity 计算 Segment 数组中每个位置可以分到的大小</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 如 initialCapacity 为 64，那么每个 Segment 或称之为"槽"可以分到 4 个</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> initialCapacity </span><span style="color:#56B6C2">/</span><span style="color:#E06C75"> ssize</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> ssize </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> initialCapacity)</span></span>
<span class="line"><span style="color:#ABB2BF">        ++</span><span style="color:#E06C75">c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 默认 MIN_SEGMENT_TABLE_CAPACITY 是 2，这个值也是有讲究的，因为这样的话，对于具体的槽上，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 插入一个元素不至于扩容，插入第二个的时候才会扩容</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> cap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> MIN_SEGMENT_TABLE_CAPACITY</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (cap </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> c)</span></span>
<span class="line"><span style="color:#E06C75">        cap </span><span style="color:#56B6C2">&lt;&lt;=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 创建 Segment 数组，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 并创建数组的第一个元素 segment[0]</span></span>
<span class="line"><span style="color:#E5C07B">    Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s0 </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(loadFactor</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(cap </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> loadFactor)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                         (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#E06C75">[cap])</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] ss </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Segment</span><span style="color:#E06C75">[ssize]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 往数组写入 segment[0]</span></span>
<span class="line"><span style="color:#E5C07B">    UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(ss, SBASE, s0);</span><span style="color:#7F848E;font-style:italic"> // ordered write of segments[0]</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">segments</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> ss</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化完成，我们得到了一个 Segment 数组。</p>
<p>我们就当是用 new ConcurrentHashMap() 无参构造函数进行初始化的，那么初始化完成后:</p>
<ul>
<li>Segment 数组长度为 16，不可以扩容</li>
<li>Segment[i] 的默认大小为 2，负载因子是 0.75，得出初始阈值为 1.5，也就是以后插入第一个元素不会触发扩容，插入第二个会进行第一次扩容</li>
<li>这里初始化了 segment[0]，其他位置还是 null，至于为什么要初始化 segment[0]，后面的代码会介绍</li>
<li>当前 segmentShift 的值为 32 - 4 = 28，segmentMask 为 16 - 1 = 15，姑且把它们简单翻译为移位数和掩码，这两个值马上就会用到</li>
</ul>
<h3><a class="header-anchor" href="#put-过程分析"><span></span></a><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> put 过程分析</h3>
<p>我们先看 put 的主流程，对于其中的一些关键细节操作，后面会进行详细介绍。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#E5C07B">    Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (value </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 1. 计算 key 的 hash 值</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 2. 根据 hash 值找到 Segment 数组中的位置 j</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //    hash 是 32 位，无符号右移 segmentShift(28) 位，剩下高 4 位，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //    然后和 segmentMask(15) 做一次与操作，也就是说 j 是 hash 值的高 4 位，也就是槽的数组下标</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (hash </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#E06C75"> segmentShift) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> segmentMask</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 刚刚说了，初始化的时候初始化了 segment[0]，但是其他位置还是 null，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ensureSegment(j) 对 segment[j] 进行初始化</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getObject</span><span style="color:#7F848E;font-style:italic">          // nonvolatile; recheck</span></span>
<span class="line"><span style="color:#E06C75">         (segments</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (j </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> SSHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> SBASE)) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">//  in ensureSegment</span></span>
<span class="line"><span style="color:#E06C75">        s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> ensureSegment</span><span style="color:#E06C75">(j)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 3. 插入新值到 槽 s 中</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(key, hash, value, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一层皮很简单，根据 hash 值很快就能找到相应的 Segment，之后就是 Segment 内部的 put 操作了。</p>
<p>Segment 内部是由 <code>数组+链表</code> 组成的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> onlyIfAbsent) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在往该 segment 写入前，需要先获取该 segment 的独占锁</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //    先看主流程，后面还会具体介绍这部分内容</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> node </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> tryLock</span><span style="color:#E06C75">() </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#61AFEF">        scanAndLockForPut</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    V</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这个是 segment 内部的数组</span></span>
<span class="line"><span style="color:#E5C07B">        HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 再利用 hash 值，求应该放置的数组下标</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // first 是数组该位置处的链表的表头</span></span>
<span class="line"><span style="color:#E5C07B">        HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> first </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> entryAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 下面这串 for 循环虽然很长，不过也很好理解，想想该位置没有任何元素和已经存在一个链表这两种情况</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                K</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E06C75">                    (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E06C75">                    oldValue </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">onlyIfAbsent) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 覆盖旧值</span></span>
<span class="line"><span style="color:#E5C07B">                        e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                        ++</span><span style="color:#E06C75">modCount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 继续顺着链表走</span></span>
<span class="line"><span style="color:#E06C75">                e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // node 到底是不是 null，这个要看获取锁的过程，不过和这里都没有关系。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果不为 null，那就直接将它设置为链表表头；如果是null，初始化并设置为链表表头。</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (node </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                    node</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setNext</span><span style="color:#ABB2BF">(first);</span></span>
<span class="line"><span style="color:#C678DD">                else</span></span>
<span class="line"><span style="color:#E06C75">                    node </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> first)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> count </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果超过了该 segment 的阈值，这个 segment 需要扩容</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> threshold </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75"> MAXIMUM_CAPACITY)</span></span>
<span class="line"><span style="color:#61AFEF">                    rehash</span><span style="color:#E06C75">(node)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 扩容后面也会具体分析</span></span>
<span class="line"><span style="color:#C678DD">                else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 没有达到阈值，将 node 放到数组 tab 的 index 位置，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 其实就是将新的节点设置成原链表的表头</span></span>
<span class="line"><span style="color:#61AFEF">                    setEntryAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> node)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                ++</span><span style="color:#E06C75">modCount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                count </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                oldValue </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 解锁</span></span>
<span class="line"><span style="color:#61AFEF">        unlock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整体流程还是比较简单的，由于有独占锁的保护，所以 segment 内部的操作并不复杂。至于这里面的并发问题，我们稍后再进行介绍。</p>
<p>到这里 put 操作就结束了，接下来，我们说一说其中几步关键的操作。</p>
<h3><a class="header-anchor" href="#初始化槽-ensuresegment"><span></span></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A7%BD-ensuresegment">#</a> 初始化槽: ensureSegment</h3>
<p>ConcurrentHashMap 初始化的时候会初始化第一个槽 segment[0]，对于其他槽来说，在插入第一个值的时候进行初始化。</p>
<p>这里需要考虑并发，因为很可能会有多个线程同时进来初始化同一个槽 segment[k]，不过只要有一个成功了就可以。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> ensureSegment</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> k) {</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] ss </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">segments</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> u </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> SSHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> SBASE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // raw offset</span></span>
<span class="line"><span style="color:#E5C07B">    Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> seg</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((seg </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(ss, u)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这里看到为什么之前要初始化 segment[0] 了，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 使用当前 segment[0] 处的数组长度和负载因子来初始化 segment[k]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 为什么要用“当前”，因为 segment[0] 可能早就扩容过了</span></span>
<span class="line"><span style="color:#E5C07B">        Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> proto </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ss[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> cap </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> proto</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        float</span><span style="color:#E06C75"> lf </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> proto</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">loadFactor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> threshold </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(cap </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> lf)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 初始化 segment[k] 内部的数组</span></span>
<span class="line"><span style="color:#E5C07B">        HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#E06C75">[cap]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((seg </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(ss, u)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#56B6C2">            ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 再次检查一遍该槽是否被其他线程初始化了。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(lf</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> threshold</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> tab)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 使用 while 循环，内部用 CAS，当前线程成功设值或其他线程成功设值后，退出</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#E06C75"> ((seg </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(ss, u)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#56B6C2">                   ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(ss, u, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">, seg </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> s)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> seg</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，ensureSegment(int k) 比较简单，对于并发操作使用 CAS 进行控制。</p>
<h3><a class="header-anchor" href="#获取写入锁-scanandlockforput"><span></span></a><a href="#%E8%8E%B7%E5%8F%96%E5%86%99%E5%85%A5%E9%94%81-scanandlockforput">#</a> 获取写入锁: scanAndLockForPut</h3>
<p>前面我们看到，在往某个 segment 中 put 的时候，首先会调用 node = tryLock() ? null : scanAndLockForPut(key, hash, value)，也就是说先进行一次 tryLock() 快速获取该 segment 的独占锁，如果失败，那么进入到 scanAndLockForPut 这个方法来获取锁。</p>
<p>下面我们来具体分析这个方法中是怎么控制加锁的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> scanAndLockForPut</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> first </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> entryForHash</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hash)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> node </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> retries </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // negative while locating node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 循环获取锁</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">tryLock</span><span style="color:#E06C75">()) {</span></span>
<span class="line"><span style="color:#E5C07B">        HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // to recheck first below</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (retries </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (node </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// speculatively create node</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 进到这里说明数组该位置的链表是空的，没有任何元素</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 当然，进到这里的另一个原因是 tryLock() 失败，所以该槽存在并发，不一定是该位置</span></span>
<span class="line"><span style="color:#E06C75">                    node </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                retries </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                retries </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 顺着链表往下走</span></span>
<span class="line"><span style="color:#E06C75">                e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 重试次数如果超过 MAX_SCAN_RETRIES(单核1多核64)，那么不抢了，进入到阻塞队列等待锁</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //    lock() 是阻塞方法，直到获取锁后返回</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">retries </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAX_SCAN_RETRIES) {</span></span>
<span class="line"><span style="color:#61AFEF">            lock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((retries </span><span style="color:#56B6C2">&amp;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                 // 这个时候是有大问题了，那就是有新的元素进到了链表，成为了新的表头</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                 //     所以这边的策略是，相当于重新走一遍这个 scanAndLockForPut 方法</span></span>
<span class="line"><span style="color:#E06C75">                 (f </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> entryForHash</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hash)) </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> first) {</span></span>
<span class="line"><span style="color:#E06C75">            e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // re-traverse if entry changed</span></span>
<span class="line"><span style="color:#E06C75">            retries </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> node</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法有两个出口，一个是 tryLock() 成功了，循环终止，另一个就是重试次数超过了 MAX_SCAN_RETRIES，进到 lock() 方法，此方法会阻塞等待，直到成功拿到独占锁。</p>
<p>这个方法就是看似复杂，但是其实就是做了一件事，那就是获取该 segment 的独占锁，如果需要的话顺便实例化了一下 node。</p>
<h3><a class="header-anchor" href="#扩容-rehash"><span></span></a><a href="#%E6%89%A9%E5%AE%B9-rehash">#</a> 扩容: rehash</h3>
<p>重复一下，segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容，扩容后，容量为原来的 2 倍。</p>
<p>首先，我们要回顾一下触发扩容的地方，put 的时候，如果判断该值的插入会导致该 segment 的元素个数超过阈值，那么先进行扩容，再插值，读者这个时候可以回去 put 方法看一眼。</p>
<p>该方法不需要考虑并发，因为到这里的时候，是持有该 segment 的独占锁的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 方法参数上的 node 是这次扩容后，需要添加到新的数组中的数据。</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> rehash</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HashEntry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> node) {</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] oldTable </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> oldTable</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 2 倍</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    threshold </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(newCapacity </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> loadFactor)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 创建新数组</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] newTable </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">        (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[]) </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#E06C75">[newCapacity]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 新的掩码，如从 16 扩容到 32，那么 sizeMask 为 31，对应二进制 ‘000...00011111’</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> sizeMask </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 遍历原数组，老套路，将原数组位置 i 处的链表拆分到 新数组位置 i 和 i+oldCap 两个位置</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // e 是链表的第一个元素</span></span>
<span class="line"><span style="color:#E5C07B">        HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldTable[i]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 计算应该放置在新数组中的位置，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 假设原数组长度为 16，e 在 oldTable[3] 处，那么 idx 只可能是 3 或者是 3 + 16 = 19</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> idx </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> sizeMask</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (next </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)   </span><span style="color:#7F848E;font-style:italic">// 该位置处只有一个元素，那比较好办</span></span>
<span class="line"><span style="color:#E06C75">                newTable[idx] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// Reuse consecutive sequence at same slot</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // e 是链表表头</span></span>
<span class="line"><span style="color:#E5C07B">                HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lastRun </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // idx 是当前链表的头节点 e 的新位置</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> lastIdx </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> idx</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 下面这个 for 循环会找到一个 lastRun 节点，这个节点之后的所有元素是将要放到一起的</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                     last </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                     last </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> last</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> last</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> sizeMask</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> lastIdx) {</span></span>
<span class="line"><span style="color:#E06C75">                        lastIdx </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        lastRun </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 将 lastRun 及其之后的所有节点组成的这个链表放到 lastIdx 这个位置</span></span>
<span class="line"><span style="color:#E06C75">                newTable[lastIdx] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lastRun</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 下面的操作是处理 lastRun 之前的节点，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //    这些节点可能分配在另一个链表中，也可能分配到上面的那个链表中</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> lastRun</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                    V</span><span style="color:#E06C75"> v </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> sizeMask</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newTable[k]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    newTable[k] </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(h</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> v</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> n)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将新来的 node 放到新数组中刚刚的 两个链表之一 的 头部</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> nodeIndex </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> node</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> sizeMask</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // add the new node</span></span>
<span class="line"><span style="color:#E5C07B">    node</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setNext</span><span style="color:#ABB2BF">(newTable[nodeIndex]);</span></span>
<span class="line"><span style="color:#E06C75">    newTable[nodeIndex] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> node</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newTable</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的扩容比之前的 HashMap 要复杂一些，代码难懂一点。上面有两个挨着的 for 循环，第一个 for 有什么用呢?</p>
<p>仔细一看发现，如果没有第一个 for 循环，也是可以工作的，但是，这个 for 循环下来，如果 lastRun 的后面还有比较多的节点，那么这次就是值得的。因为我们只需要克隆 lastRun 前面的节点，后面的一串节点跟着 lastRun 走就是了，不需要做任何操作。</p>
<p>我觉得 Doug Lea 的这个想法也是挺有意思的，不过比较坏的情况就是每次 lastRun 都是链表的最后一个元素或者很靠后的元素，那么这次遍历就有点浪费了。不过 Doug Lea 也说了，根据统计，如果使用默认的阈值，大约只有 1/6 的节点需要克隆。</p>
<h3><a class="header-anchor" href="#get-过程分析"><span></span></a><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> get 过程分析</h3>
<p>相对于 put 来说，get 就很简单了。</p>
<ul>
<li>计算 hash 值，找到 segment 数组中的具体位置，或我们前面用的“槽”</li>
<li>槽中也是一个数组，根据 hash 找到数组中具体的位置</li>
<li>到这里是链表了，顺着链表进行查找即可</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Segment</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // manually integrate access methods to reduce overhead</span></span>
<span class="line"><span style="color:#E5C07B">    HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 1. hash 值</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> u </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (((h </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#E06C75"> segmentShift) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> segmentMask) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> SSHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> SBASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 2. 根据 hash 找到对应的 segment</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Segment</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getObjectVolatile</span><span style="color:#ABB2BF">(segments, u)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">        (tab </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">table</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 3. 找到segment 内部数组相应位置的链表，遍历</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HashEntry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getObjectVolatile</span></span>
<span class="line"><span style="color:#E06C75">                 (tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ((</span><span style="color:#C678DD">long</span><span style="color:#E06C75">)(((</span><span style="color:#E5C07B">tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> h)) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> TSHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> TBASE)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">             e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            K</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">))</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#并发问题分析"><span></span></a><a href="#%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90">#</a> 并发问题分析</h3>
<p>现在我们已经说完了 put 过程和 get 过程，我们可以看到 get 过程中是没有加锁的，那自然我们就需要去考虑并发问题。</p>
<p>添加节点的操作 put 和删除节点的操作 remove 都是要加 segment 上的独占锁的，所以它们之间自然不会有问题，我们需要考虑的问题就是 get 的时候在同一个 segment 中发生了 put 或 remove 操作。</p>
<ul>
<li>put 操作的线程安全性。
<ul>
<li>初始化槽，这个我们之前就说过了，使用了 CAS 来初始化 Segment 中的数组。</li>
<li>添加节点到链表的操作是插入到表头的，所以，如果这个时候 get 操作在链表遍历的过程已经到了中间，是不会影响的。当然，另一个并发问题就是 get 操作在 put 之后，需要保证刚刚插入表头的节点被读取，这个依赖于 setEntryAt 方法中使用的 UNSAFE.putOrderedObject。</li>
<li>扩容。扩容是新创建了数组，然后进行迁移数据，最后面将 newTable 设置给属性 table。所以，如果 get 操作此时也在进行，那么也没关系，如果 get 先行，那么就是在旧的 table 上做查询操作；而 put 先行，那么 put 操作的可见性保证就是 table 使用了 volatile 关键字。</li>
</ul>
</li>
<li>remove 操作的线程安全性。
<ul>
<li>remove 操作我们没有分析源码，所以这里说的读者感兴趣的话还是需要到源码中去求实一下的。</li>
<li>get 操作需要遍历链表，但是 remove 操作会"破坏"链表。</li>
<li>如果 remove 破坏的节点 get 操作已经过去了，那么这里不存在任何问题。</li>
<li>如果 remove 先破坏了一个节点，分两种情况考虑。 1、如果此节点是头节点，那么需要将头节点的 next 设置为数组该位置的元素，table 虽然使用了 volatile 修饰，但是 volatile 并不能提供数组内部操作的可见性保证，所以源码中使用了 UNSAFE 来操作数组，请看方法 setEntryAt。2、如果要删除的节点不是头节点，它会将要删除节点的后继节点接到前驱节点中，这里的并发保证就是 next 属性是 volatile 的。</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#concurrenthashmap-jdk-1-8"><span></span></a><a href="#concurrenthashmap-jdk-1-8">#</a> ConcurrentHashMap - JDK 1.8</h2>
<p>在JDK1.7之前，ConcurrentHashMap是通过分段锁机制来实现的，所以其最大并发度受Segment的个数限制。因此，在JDK1.8中，ConcurrentHashMap的实现原理摒弃了这种设计，而是选择了与HashMap类似的数组+链表+红黑树的方式实现，而加锁则采用CAS和synchronized实现。</p>
<h3><a class="header-anchor" href="#数据结构-1"><span></span></a><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1">#</a> 数据结构</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-concurrent-hashmap-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>结构上和 Java8 的 HashMap 基本上一样，不过它要保证线程安全性，所以在源码上确实要复杂一些。</p>
<h3><a class="header-anchor" href="#初始化-1"><span></span></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96-1">#</a> 初始化</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 这构造函数里，什么都不干</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ConcurrentHashMap</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ConcurrentHashMap</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> initialCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> cap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((initialCapacity </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> (MAXIMUM_CAPACITY </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">               MAXIMUM_CAPACITY </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#61AFEF">               tableSizeFor</span><span style="color:#E06C75">(initialCapacity </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">sizeCtl</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个初始化方法有点意思，通过提供初始容量，计算了 sizeCtl，sizeCtl = 【 (1.5 * initialCapacity + 1)，然后向上取最近的 2 的 n 次方】。如 initialCapacity 为 10，那么得到 sizeCtl 为 16，如果 initialCapacity 为 11，得到 sizeCtl 为 32。</p>
<p>sizeCtl 这个属性使用的场景很多，不过只要跟着文章的思路来，就不会被它搞晕了。</p>
<h3><a class="header-anchor" href="#put-过程分析-1"><span></span></a><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90-1">#</a> put 过程分析</h3>
<p>仔细地一行一行代码看下去:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> putVal</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> putVal</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> onlyIfAbsent) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> value </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 得到 hash 值</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> spread</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hashCode</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 用于记录相应链表的长度</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> binCount </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fh</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果数组"空"，进行数组初始化</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (tab </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 初始化数组，后面会详细介绍</span></span>
<span class="line"><span style="color:#E06C75">            tab </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> initTable</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 找该 hash 值对应的数组下标，得到第一个节点 f</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((f </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> hash)) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果数组该位置为空，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //    用一次 CAS 操作将这个新值放入其中即可，这个 put 操作差不多就结束了，可以拉到最后面了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //          如果 CAS 失败，那就是有并发操作，进到下一个循环就好了</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">casTabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                         new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // no lock when adding to empty bin</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // hash 居然可以等于 MOVED，这个需要到后面才能看明白，不过从名字上也能猜到，肯定是因为在扩容</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((fh </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> MOVED)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 帮助数据迁移，这个等到看完数据迁移部分的介绍后，再理解这个就很简单了</span></span>
<span class="line"><span style="color:#E06C75">            tab </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> helpTransfer</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 到这里就是说，f 是该位置的头节点，而且不为空</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            V</span><span style="color:#E06C75"> oldVal </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 获取数组该位置的头节点的监视器锁</span></span>
<span class="line"><span style="color:#C678DD">            synchronized</span><span style="color:#E06C75"> (f) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> f) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (fh </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 头节点的 hash 值大于 0，说明是链表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 用于累加，记录链表的长度</span></span>
<span class="line"><span style="color:#E06C75">                        binCount </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 遍历链表</span></span>
<span class="line"><span style="color:#C678DD">                        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">binCount) {</span></span>
<span class="line"><span style="color:#E5C07B">                            K</span><span style="color:#E06C75"> ek</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            // 如果发现了"相等"的 key，判断是否要进行值覆盖，然后也就可以 break 了</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                                ((ek </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E06C75">                                 (ek </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(ek)</span><span style="color:#E06C75">))) {</span></span>
<span class="line"><span style="color:#E06C75">                                oldVal </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                                if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#E5C07B">                                    e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            // 到了链表的最末端，将这个新值放到链表的最后面</span></span>
<span class="line"><span style="color:#E5C07B">                            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> pred </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                                pred</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                                          value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            }</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (f </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeBin) { </span><span style="color:#7F848E;font-style:italic">// 红黑树</span></span>
<span class="line"><span style="color:#E5C07B">                        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        binCount </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 调用红黑树的插值方法插入新节点</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> ((p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">TreeBin</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)f)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putTreeVal</span><span style="color:#ABB2BF">(hash, key,</span></span>
<span class="line"><span style="color:#ABB2BF">                                                       value)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                            oldVal </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#E5C07B">                                p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (binCount </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 判断是否要将链表转换为红黑树，临界值和 HashMap 一样，也是 8</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (binCount </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> TREEIFY_THRESHOLD)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 这个方法和 HashMap 中稍微有一点点不同，那就是它不是一定会进行红黑树转换，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 如果当前数组的长度小于 64，那么会选择进行数组扩容，而不是转换为红黑树</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //    具体源码我们就不看了，扩容部分后面说</span></span>
<span class="line"><span style="color:#61AFEF">                    treeifyBin</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (oldVal </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> oldVal</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // </span></span>
<span class="line"><span style="color:#61AFEF">    addCount</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> binCount)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#初始化数组-inittable"><span></span></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84-inittable">#</a> 初始化数组: initTable</h3>
<p>这个比较简单，主要就是初始化一个合适大小的数组，然后会设置 sizeCtl。</p>
<p>初始化方法中的并发问题是通过对 sizeCtl 进行一个 CAS 操作来控制的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">initTable</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 初始化的"功劳"被其他线程"抢去"了</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((sc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> sizeCtl) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">yield</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // lost initialization race; just spin</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // CAS 一下，将 sizeCtl 设置为 -1，代表抢到了锁</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, SIZECTL, sc, </span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // DEFAULT_CAPACITY 默认初始容量是 16</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (sc </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> sc </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> DEFAULT_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 初始化数组，长度为 16 或初始化时提供的长度</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] nt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[n]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 将这个数组赋值给 table，table 是 volatile 的</span></span>
<span class="line"><span style="color:#E06C75">                    table </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nt</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 如果 n 为 16 的话，那么这里 sc = 12</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 其实就是 0.75 * n</span></span>
<span class="line"><span style="color:#E06C75">                    sc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 设置 sizeCtl 为 sc，我们就当是 12 吧</span></span>
<span class="line"><span style="color:#E06C75">                sizeCtl </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> tab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#链表转红黑树-treeifybin"><span></span></a><a href="#%E9%93%BE%E8%A1%A8%E8%BD%AC%E7%BA%A2%E9%BB%91%E6%A0%91-treeifybin">#</a> 链表转红黑树: treeifyBin</h3>
<p>前面我们在 put 源码分析也说过，treeifyBin 不一定就会进行红黑树转换，也可能是仅仅做数组扩容。我们还是进行源码分析吧。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> treeifyBin</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (tab </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // MIN_TREEIFY_CAPACITY 为 64</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 所以，如果数组长度小于 64 的时候，其实也就是 32 或者 16 或者更小的时候，会进行数组扩容</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> MIN_TREEIFY_CAPACITY)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 后面我们再详细分析这个方法</span></span>
<span class="line"><span style="color:#61AFEF">            tryPresize</span><span style="color:#E06C75">(n </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // b 是头节点</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((b </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index)) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 加锁</span></span>
<span class="line"><span style="color:#C678DD">            synchronized</span><span style="color:#E06C75"> (b) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 下面就是遍历链表，建立一颗红黑树</span></span>
<span class="line"><span style="color:#E5C07B">                    TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> hd </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> tl </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#C678DD">                            new</span><span style="color:#E5C07B"> TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">                                              null</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> tl) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                            hd </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        else</span></span>
<span class="line"><span style="color:#E5C07B">                            tl</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        tl </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 将红黑树设置到数组相应位置中</span></span>
<span class="line"><span style="color:#61AFEF">                    setTabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeBin</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(hd))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#扩容-trypresize"><span></span></a><a href="#%E6%89%A9%E5%AE%B9-trypresize">#</a> 扩容: tryPresize</h3>
<p>如果说 Java8 ConcurrentHashMap 的源码不简单，那么说的就是扩容操作和迁移操作。</p>
<p>这个方法要完完全全看懂还需要看之后的 transfer 方法，读者应该提前知道这点。</p>
<p>这里的扩容也是做翻倍扩容的，扩容后数组容量为原来的 2 倍。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 首先要说明的是，方法参数 size 传进来的时候就已经翻了倍了</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> tryPresize</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> size) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // c: size 的 1.5 倍，再加 1，再往上取最近的 2 的 n 次方。</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> (MAXIMUM_CAPACITY </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> MAXIMUM_CAPACITY </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#61AFEF">        tableSizeFor</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((sc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> sizeCtl) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这个 if 分支和之前说的初始化数组的代码基本上是一样的，在这里，我们可以不用管这块代码</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (tab </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (sc </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> sc </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, SIZECTL, sc, </span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (table </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> tab) {</span></span>
<span class="line"><span style="color:#ABB2BF">                        @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] nt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[n]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        table </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nt</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        sc </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 0.75 * n</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">                    sizeCtl </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> sc </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> MAXIMUM_CAPACITY)</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (tab </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> table) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 我没看懂 rs 的真正含义是什么，不过也关系不大</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> resizeStamp</span><span style="color:#E06C75">(n)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (sc </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] nt</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((sc </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#E06C75"> RESIZE_STAMP_SHIFT) </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> sc </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E06C75">                    sc </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> rs </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> MAX_RESIZERS </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (nt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nextTable) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E06C75">                    transferIndex </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 2. 用 CAS 将 sizeCtl 加 1，然后执行 transfer 方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //    此时 nextTab 不为 null</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, SIZECTL, sc, sc </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">                    transfer</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> nt)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 1. 将 sizeCtl 设置为 (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //     我是没看懂这个值真正的意义是什么? 不过可以计算出来的是，结果是一个比较大的负数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //  调用 transfer 方法，此时 nextTab 参数为 null</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, SIZECTL, sc,</span></span>
<span class="line"><span style="color:#ABB2BF">                                         (rs </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#ABB2BF"> RESIZE_STAMP_SHIFT) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">                transfer</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的核心在于 sizeCtl 值的操作，首先将其设置为一个负数，然后执行 transfer(tab, null)，再下一个循环将 sizeCtl 加 1，并执行 transfer(tab, nt)，之后可能是继续 sizeCtl 加 1，并执行 transfer(tab, nt)。</p>
<p>所以，可能的操作就是执行 1 次 transfer(tab, null) + 多次 transfer(tab, nt)，这里怎么结束循环的需要看完 transfer 源码才清楚。</p>
<h3><a class="header-anchor" href="#数据迁移-transfer"><span></span></a><a href="#%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB-transfer">#</a> 数据迁移: transfer</h3>
<p>下面这个方法有点长，将原来的 tab 数组的元素迁移到新的 nextTab 数组中。</p>
<p>虽然我们之前说的 tryPresize 方法中多次调用 transfer 不涉及多线程，但是这个 transfer 方法可以在其他地方被调用，典型地，我们之前在说 put 方法的时候就说过了，请往上看 put 方法，是不是有个地方调用了 helpTransfer 方法，helpTransfer 方法会调用 transfer 方法的。</p>
<p>此方法支持多线程执行，外围调用此方法的时候，会保证第一个发起数据迁移的线程，nextTab 参数为 null，之后再调用此方法的时候，nextTab 不会为 null。</p>
<p>阅读源码之前，先要理解并发操作的机制。原数组长度为 n，所以我们有 n 个迁移任务，让每个线程每次负责一个小任务是最简单的，每做完一个任务再检测是否有其他没做完的任务，帮助迁移就可以了，而 Doug Lea 使用了一个 stride，简单理解就是步长，每个线程每次负责迁移其中的一部分，如每次迁移 16 个小任务。所以，我们就需要一个全局的调度者来安排哪个线程执行哪几个任务，这个就是属性 transferIndex 的作用。</p>
<p>第一个发起数据迁移的线程会将 transferIndex 指向原数组最后的位置，然后从后往前的 stride 个任务属于第一个线程，然后将 transferIndex 指向新的位置，再往前的 stride 个任务属于第二个线程，依此类推。当然，这里说的第二个线程不是真的一定指代了第二个线程，也可以是同一个线程，这个读者应该能理解吧。其实就是将一个大的迁移任务分为了一个个任务包。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> transfer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] nextTab) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> stride</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // stride 在单核下直接等于 n，多核模式下为 (n&gt;&gt;&gt;3)/NCPU，最小值是 16</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // stride 可以理解为”步长“，有 n 个位置是需要进行迁移的，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //   将这 n 个任务分为多个任务包，每个任务包有 stride 个任务</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((stride </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (NCPU </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 3</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">/</span><span style="color:#E06C75"> NCPU </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> n) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> MIN_TRANSFER_STRIDE)</span></span>
<span class="line"><span style="color:#E06C75">        stride </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> MIN_TRANSFER_STRIDE</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // subdivide range</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 如果 nextTab 为 null，先进行一次初始化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //    前面我们说了，外围会保证第一个发起迁移的线程调用此方法时，参数 nextTab 为 null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //       之后参与迁移的线程调用此方法时，nextTab 不会为 null</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (nextTab </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 容量翻倍</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] nt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[n </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            nextTab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nt</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {      </span><span style="color:#7F848E;font-style:italic">// try to cope with OOME</span></span>
<span class="line"><span style="color:#E06C75">            sizeCtl </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // nextTable 是 ConcurrentHashMap 中的属性</span></span>
<span class="line"><span style="color:#E06C75">        nextTable </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nextTab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // transferIndex 也是 ConcurrentHashMap 的属性，用于控制迁移的位置</span></span>
<span class="line"><span style="color:#E06C75">        transferIndex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> nextn </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> nextTab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ForwardingNode 翻译过来就是正在被迁移的 Node</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 这个构造方法会生成一个Node，key、value 和 next 都为 null，关键是 hash 为 MOVED</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 后面我们会看到，原数组中位置 i 处的节点完成迁移工作后，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //    就会将位置 i 处设置为这个 ForwardingNode，用来告诉其他线程该位置已经处理过了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //    所以它其实相当于是一个标志。</span></span>
<span class="line"><span style="color:#E5C07B">    ForwardingNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> fwd </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ForwardingNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(nextTab)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // advance 指的是做完了一个位置的迁移工作，可以准备做下一个位置的了</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> finishing </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // to ensure sweep before committing nextTab</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 下面这个 for 循环，最难理解的在前面，而要看懂它们，应该先看懂后面的，然后再倒回来看</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // i 是位置索引，bound 是边界，注意是从后往前</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> bound </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> fh</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 下面这个 while 真的是不好理解</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // advance 为 true 表示可以进行下一个位置的迁移了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //   简单理解结局: i 指向了 transferIndex，bound 指向了 transferIndex-stride</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> (advance) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nextIndex</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> nextBound</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> bound </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> finishing)</span></span>
<span class="line"><span style="color:#E06C75">                advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 将 transferIndex 值赋给 nextIndex</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 这里 transferIndex 一旦小于等于 0，说明原数组的所有位置都有相应的线程去处理了</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((nextIndex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> transferIndex) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                i </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">compareAndSwapInt</span></span>
<span class="line"><span style="color:#E06C75">                     (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> TRANSFERINDEX</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> nextIndex</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                      nextBound </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (nextIndex </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> stride </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">                                   nextIndex </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> stride </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">))) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 看括号中的代码，nextBound 是这次迁移任务的边界，注意，是从后往前</span></span>
<span class="line"><span style="color:#E06C75">                bound </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nextBound</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nextIndex </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> nextn) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> sc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (finishing) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 所有的迁移操作已经完成</span></span>
<span class="line"><span style="color:#E06C75">                nextTable </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 将新的 nextTab 赋值给 table 属性，完成迁移</span></span>
<span class="line"><span style="color:#E06C75">                table </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> nextTab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 重新计算 sizeCtl: n 是原数组长度，所以 sizeCtl 得出的值将是新数组长度的 0.75 倍</span></span>
<span class="line"><span style="color:#E06C75">                sizeCtl </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 之前我们说过，sizeCtl 在迁移前会设置为 (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 然后，每有一个线程参与迁移就会将 sizeCtl 加 1，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 这里使用 CAS 操作对 sizeCtl 进行减 1，代表做完了属于自己的任务</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">U</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, SIZECTL, sc </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> sizeCtl, sc </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 任务结束，方法退出</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((sc </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#61AFEF"> resizeStamp</span><span style="color:#E06C75">(n) </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#E06C75"> RESIZE_STAMP_SHIFT)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 到这里，说明 (sc - 2) == resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 也就是说，所有的迁移任务都做完了，也就会进入到上面的 if(finishing){} 分支了</span></span>
<span class="line"><span style="color:#E06C75">                finishing </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // recheck before commit</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果位置 i 处是空的，没有任何节点，那么放入刚刚初始化的 ForwardingNode ”空节点“</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((f </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i)) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            advance </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> casTabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fwd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 该位置处是一个 ForwardingNode，代表该位置已经迁移过了</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((fh </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> MOVED)</span></span>
<span class="line"><span style="color:#E06C75">            advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // already processed</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 对数组该位置处的结点加锁，开始处理数组该位置处的迁移工作</span></span>
<span class="line"><span style="color:#C678DD">            synchronized</span><span style="color:#E06C75"> (f) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> f) {</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> ln</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hn</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 头节点的 hash 大于 0，说明是链表的 Node 节点</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (fh </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 下面这一块和 Java7 中的 ConcurrentHashMap 迁移是差不多的，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 需要将链表一分为二，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        //   找到原链表中的 lastRun，然后 lastRun 及其之后的节点是一起进行迁移的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        //   lastRun 之前的节点需要进行克隆，然后分到两个链表中</span></span>
<span class="line"><span style="color:#C678DD">                        int</span><span style="color:#E06C75"> runBit </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> fh </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lastRun </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                            int</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (b </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> runBit) {</span></span>
<span class="line"><span style="color:#E06C75">                                runBit </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                                lastRun </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            }</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> (runBit </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                            ln </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lastRun</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            hn </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#C678DD">                        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">                            hn </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lastRun</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            ln </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#C678DD">                        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> f</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> lastRun</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                            int</span><span style="color:#E06C75"> ph </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> pk </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> pv </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> ((ph </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> n) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                ln </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(ph</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> pk</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> pv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ln)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            else</span></span>
<span class="line"><span style="color:#E06C75">                                hn </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(ph</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> pk</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> pv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hn)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 其中的一个链表放在新数组的位置 i</span></span>
<span class="line"><span style="color:#61AFEF">                        setTabAt</span><span style="color:#E06C75">(nextTab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ln)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 另一个链表放在新数组的位置 i+n</span></span>
<span class="line"><span style="color:#61AFEF">                        setTabAt</span><span style="color:#E06C75">(nextTab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hn)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 将原数组该位置处设置为 fwd，代表该位置已经处理完毕，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        //    其他线程一旦看到该位置的 hash 值为 MOVED，就不会进行迁移了</span></span>
<span class="line"><span style="color:#61AFEF">                        setTabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fwd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // advance 设置为 true，代表该位置已经迁移完毕</span></span>
<span class="line"><span style="color:#E06C75">                        advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (f </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeBin) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 红黑树的迁移</span></span>
<span class="line"><span style="color:#E5C07B">                        TreeBin</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">TreeBin</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)f</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                        TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lo </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> loTail </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                        TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> hi </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hiTail </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        int</span><span style="color:#E06C75"> lc </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hc </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                            int</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                            TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeNode</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#E06C75">                                (h</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> ((h </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> n) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                                if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> loTail) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                    lo </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                                else</span></span>
<span class="line"><span style="color:#E5C07B">                                    loTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                                loTail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                                ++</span><span style="color:#E06C75">lc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            }</span></span>
<span class="line"><span style="color:#C678DD">                            else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                                if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> hiTail) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                    hi </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                                else</span></span>
<span class="line"><span style="color:#E5C07B">                                    hiTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                                hiTail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                                ++</span><span style="color:#E06C75">hc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            }</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 如果一分为二后，节点数小于等于6，那么将红黑树转换回链表</span></span>
<span class="line"><span style="color:#E06C75">                        ln </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (lc </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> UNTREEIFY_THRESHOLD) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> untreeify</span><span style="color:#E06C75">(lo) </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">                            (hc </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeBin</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(lo) </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        hn </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (hc </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> UNTREEIFY_THRESHOLD) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> untreeify</span><span style="color:#E06C75">(hi) </span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">                            (lc </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeBin</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(hi) </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 将 ln 放置在新数组的位置 i</span></span>
<span class="line"><span style="color:#61AFEF">                        setTabAt</span><span style="color:#E06C75">(nextTab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ln)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 将 hn 放置在新数组的位置 i+n</span></span>
<span class="line"><span style="color:#61AFEF">                        setTabAt</span><span style="color:#E06C75">(nextTab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hn)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 将原数组该位置处设置为 fwd，代表该位置已经处理完毕，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        //    其他线程一旦看到该位置的 hash 值为 MOVED，就不会进行迁移了</span></span>
<span class="line"><span style="color:#61AFEF">                        setTabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fwd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // advance 设置为 true，代表该位置已经迁移完毕</span></span>
<span class="line"><span style="color:#E06C75">                        advance </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说到底，transfer 这个方法并没有实现所有的迁移任务，每次调用这个方法只实现了 transferIndex 往前 stride 个位置的迁移工作，其他的需要由外围来控制。</p>
<p>这个时候，再回去仔细看 tryPresize 方法可能就会更加清晰一些了。</p>
<h3><a class="header-anchor" href="#get-过程分析-1"><span></span></a><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90-1">#</a> get 过程分析</h3>
<p>get 方法从来都是最简单的，这里也不例外:</p>
<ul>
<li>计算 hash 值</li>
<li>根据 hash 值找到数组对应位置: (n - 1) &amp; h</li>
<li>根据该位置处结点性质进行相应查找
<ul>
<li>如果该位置为 null，那么直接返回 null 就可以了</li>
<li>如果该位置处的节点刚好就是我们需要的，返回该节点的值即可</li>
<li>如果该位置节点的 hash 值小于 0，说明正在扩容，或者是红黑树，后面我们再介绍 find 方法</li>
<li>如果以上 3 条都不满足，那就是链表，进行遍历比对即可</li>
</ul>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> eh</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> ek</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> spread</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hashCode</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">        (e </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> tabAt</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> h)) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 判断头节点是否就是我们需要的节点</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((eh </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> h) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((ek </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (ek </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(ek)</span><span style="color:#E06C75">))</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果头节点的 hash 小于 0，说明 正在扩容，或者该位置是红黑树</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (eh </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 参考 ForwardingNode.find(int h, Object k) 和 TreeBin.find(int h, Object k)</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">find</span><span style="color:#ABB2BF">(h, key)</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#C678DD"> :</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 遍历链表</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                ((ek </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (ek </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(ek)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">val</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单说一句，此方法的大部分内容都很简单，只有正好碰到扩容的情况，ForwardingNode.find(int h, Object k) 稍微复杂一些，不过在了解了数据迁移的过程后，这个也就不难了，所以限于篇幅这里也不展开说了。</p>
<h2><a class="header-anchor" href="#对比总结"><span></span></a><a href="#%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93">#</a> 对比总结</h2>
<ul>
<li><code>HashTable</code> : 使用了synchronized关键字对put等操作进行加锁;</li>
<li><code>ConcurrentHashMap JDK1.7</code>: 使用分段锁机制实现;</li>
<li><code>ConcurrentHashMap JDK1.8</code>: 则使用数组+链表+红黑树数据结构和CAS原子操作实现;</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-concurrent-hashmap-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 集合之 ConcurrentLinkedQueue 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20ConcurrentLinkedQueue%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20ConcurrentLinkedQueue%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 集合之 ConcurrentLinkedQueue 详解</source>
      <description>ConcurerntLinkedQueue一个基于链接节点的无界线程安全队列。此队列按照 FIFO(先进先出)原则对元素进行排序。队列的头部是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>ConcurerntLinkedQueue一个基于链接节点的无界线程安全队列。此队列按照 FIFO(先进先出)原则对元素进行排序。队列的头部是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue是一个恰当的选择。此队列不允许使用null元素。</p>
</blockquote>
<ul>
<li>JUC 集合之 ConcurrentLinkedQueue 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#concurrentlinkedqueue%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">ConcurrentLinkedQueue数据结构</a></li>
<li>ConcurrentLinkedQueue源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>核心函数分析
<ul>
<li><a href="#offer%E5%87%BD%E6%95%B0">offer函数</a></li>
<li><a href="#poll%E5%87%BD%E6%95%B0">poll函数</a></li>
<li><a href="#remove%E5%87%BD%E6%95%B0">remove函数</a></li>
<li><a href="#size%E5%87%BD%E6%95%B0">size函数</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#concurrentlinkedqueue%E7%A4%BA%E4%BE%8B">ConcurrentLinkedQueue示例</a></li>
<li>再深入理解
<ul>
<li><a href="#hops%E5%BB%B6%E8%BF%9F%E6%9B%B4%E6%96%B0%E7%9A%84%E7%AD%96%E7%95%A5%E7%9A%84%E8%AE%BE%E8%AE%A1">HOPS(延迟更新的策略)的设计</a></li>
<li><a href="#concurrentlinkedqueue%E9%80%82%E5%90%88%E7%9A%84%E5%9C%BA%E6%99%AF">ConcurrentLinkedQueue适合的场景</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>要想用线程安全的队列有哪些选择? Vector，<code>Collections.synchronizedList(List&lt;T&gt; list)</code>, ConcurrentLinkedQueue等</li>
<li>ConcurrentLinkedQueue实现的数据结构?</li>
<li>ConcurrentLinkedQueue底层原理? 全程无锁(CAS)</li>
<li>ConcurrentLinkedQueue的核心方法有哪些? offer()，poll()，peek()，isEmpty()等队列常用方法</li>
<li>说说ConcurrentLinkedQueue的HOPS(延迟更新的策略)的设计?</li>
<li>ConcurrentLinkedQueue适合什么样的使用场景?</li>
</ul>
<h2><a class="header-anchor" href="#concurrentlinkedqueue数据结构"><span></span></a><a href="#concurrentlinkedqueue%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> ConcurrentLinkedQueue数据结构</h2>
<p>通过源码分析可知，ConcurrentLinkedQueue的数据结构与LinkedBlockingQueue的数据结构相同，都是使用的链表结构。ConcurrentLinkedQueue的数据结构如下:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>说明: ConcurrentLinkedQueue采用的链表结构，并且包含有一个头节点和一个尾结点。</p>
<h2><a class="header-anchor" href="#concurrentlinkedqueue源码分析"><span></span></a><a href="#concurrentlinkedqueue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> ConcurrentLinkedQueue源码分析</h2>
<h3><a class="header-anchor" href="#类的继承关系"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">        implements</span><span style="color:#E5C07B"> Queue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: ConcurrentLinkedQueue继承了抽象类AbstractQueue，AbstractQueue定义了对队列的基本操作；同时实现了Queue接口，Queue定义了对队列的基本操作，同时，还实现了Serializable接口，表示可以被序列化。</p>
<h3><a class="header-anchor" href="#类的内部类"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 元素</span></span>
<span class="line"><span style="color:#C678DD">    volatile</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // next域</span></span>
<span class="line"><span style="color:#C678DD">    volatile</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Constructs a new node.  Uses relaxed write because item can</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * only be seen after publication via casNext.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数</span></span>
<span class="line"><span style="color:#61AFEF">    Node</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> item</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置item的值</span></span>
<span class="line"><span style="color:#E5C07B">        UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, itemOffset, item);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 比较并替换item值</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#61AFEF"> casItem</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> cmp</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> val</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, itemOffset, cmp, val);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> lazySetNext</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">val</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置next域的值，并不会保证修改对其他线程立即可见</span></span>
<span class="line"><span style="color:#E5C07B">        UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putOrderedObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, nextOffset, val);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 比较并替换next域的值</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#61AFEF"> casNext</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">cmp</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">val</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, nextOffset, cmp, val);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Unsafe mechanics</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 反射机制</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#E06C75"> UNSAFE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // item域的偏移量</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> itemOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // next域的偏移量</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> nextOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            UNSAFE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            itemOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"item"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            nextOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"next"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: Node类表示链表结点，用于存放元素，包含item域和next域，item域表示元素，next域表示下一个结点，其利用反射机制和CAS机制来更新item域和next域，保证原子性。</p>
<h3><a class="header-anchor" href="#类的属性"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">        implements</span><span style="color:#E5C07B"> Queue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 版本序列号        </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 196745693267521676L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 反射机制</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#E06C75"> UNSAFE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // head域的偏移量</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> headOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // tail域的偏移量</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> tailOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            UNSAFE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ConcurrentLinkedQueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            headOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"head"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            tailOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"tail"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 头节点</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> head</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 尾结点</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> tail</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 属性中包含了head域和tail域，表示链表的头节点和尾结点，同时，ConcurrentLinkedQueue也使用了反射机制和CAS机制来更新头节点和尾结点，保证原子性。</p>
<h3><a class="header-anchor" href="#类的构造函数"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</h3>
<ul>
<li><code>ConcurrentLinkedQueue()</code>型构造函数</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ConcurrentLinkedQueue</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化头节点与尾结点</span></span>
<span class="line"><span style="color:#E06C75">    head </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tail </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该构造函数用于创建一个最初为空的 ConcurrentLinkedQueue，头节点与尾结点指向同一个结点，该结点的item域为null，next域也为null。</p>
<ul>
<li><code>ConcurrentLinkedQueue(Collection&lt;? extends E&gt;)</code>型构造函数</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ConcurrentLinkedQueue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> c) { </span><span style="color:#7F848E;font-style:italic">// 遍历c集合</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 保证元素不为空</span></span>
<span class="line"><span style="color:#61AFEF">        checkNotNull</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 新生一个结点</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> newNode </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (h </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 头节点为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 赋值头节点与尾结点</span></span>
<span class="line"><span style="color:#E06C75">            h </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 直接头节点的next域</span></span>
<span class="line"><span style="color:#E5C07B">            t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lazySetNext</span><span style="color:#ABB2BF">(newNode);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 重新赋值头节点</span></span>
<span class="line"><span style="color:#E06C75">            t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (h </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 头节点为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 新生头节点与尾结点</span></span>
<span class="line"><span style="color:#E06C75">        h </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 赋值头节点</span></span>
<span class="line"><span style="color:#E06C75">    head </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> h</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 赋值尾结点</span></span>
<span class="line"><span style="color:#E06C75">    tail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该构造函数用于创建一个最初包含给定 collection 元素的 ConcurrentLinkedQueue，按照此 collection 迭代器的遍历顺序来添加元素。</p>
<h3><a class="header-anchor" href="#核心函数分析"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 核心函数分析</h3>
<h4><a class="header-anchor" href="#offer函数"><span></span></a><a href="#offer%E5%87%BD%E6%95%B0">#</a> offer函数</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 元素不为null</span></span>
<span class="line"><span style="color:#61AFEF">    checkNotNull</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 新生一个结点</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> newNode </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tail</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // q为p结点的下一个结点</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> q </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (q </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// q结点为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // p is last node</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">casNext</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">, newNode)</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 比较并进行替换p结点的next域</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // Successful CAS is the linearization point</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // for e to become an element of this queue,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // and for newNode to become "live".</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> t) </span><span style="color:#7F848E;font-style:italic">// p不等于t结点，不一致    // hop two nodes at a time</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 比较并替换尾结点</span></span>
<span class="line"><span style="color:#61AFEF">                    casTail</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> newNode)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Failure is OK.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 返回</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Lost CAS race to another thread; re-read next</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> q) </span><span style="color:#7F848E;font-style:italic">// p结点等于q结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // We have fallen off list.  If tail is unchanged, it</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // will also be off-list, in which case we need to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // jump to head, from which all live nodes are always</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // reachable.  Else the new tail is a better bet.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 原来的尾结点与现在的尾结点是否相等，若相等，则p赋值为head，否则，赋值为现在的尾结点</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tail)) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> t </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> head</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Check for tail updates after two hops.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 重新赋值p结点</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tail)) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> t </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: offer函数用于将指定元素插入此队列的尾部。下面模拟offer函数的操作，队列状态的变化(假设单线程添加元素，连续添加10、20两个元素)。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>若ConcurrentLinkedQueue的初始状态如上图所示，即队列为空。单线程添加元素，此时，添加元素10，则状态如下所示</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图所示，添加元素10后，tail没有变化，还是指向之前的结点，继续添加元素20，则状态如下所示</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图所示，添加元素20后，tail指向了最新添加的结点。</li>
</ul>
<h4><a class="header-anchor" href="#poll函数"><span></span></a><a href="#poll%E5%87%BD%E6%95%B0">#</a> poll函数</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> poll</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">    restartFromHead</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 无限循环</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> head</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> h</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 保存头节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // item项</span></span>
<span class="line"><span style="color:#E5C07B">            E</span><span style="color:#E06C75"> item </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (item </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">casItem</span><span style="color:#ABB2BF">(item, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// item不为null并且比较并替换item成功</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // Successful CAS is the linearization point</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // for item to be removed from this queue.</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> h) </span><span style="color:#7F848E;font-style:italic">// p不等于h    // hop two nodes at a time</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 更新头节点</span></span>
<span class="line"><span style="color:#61AFEF">                    updateHead</span><span style="color:#E06C75">(h</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ((q </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> q </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> p)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 返回item</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E06C75"> item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((q </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// q结点为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 更新头节点</span></span>
<span class="line"><span style="color:#61AFEF">                updateHead</span><span style="color:#E06C75">(h</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> p)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> q) </span><span style="color:#7F848E;font-style:italic">// p等于q</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 继续循环</span></span>
<span class="line"><span style="color:#C678DD">                continue</span><span style="color:#E06C75"> restartFromHead</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // p赋值为q</span></span>
<span class="line"><span style="color:#E06C75">                p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数用于获取并移除此队列的头，如果此队列为空，则返回null。下面模拟poll函数的操作，队列状态的变化(假设单线程操作，状态为之前offer10、20后的状态，poll两次)。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>队列初始状态如上图所示，在poll操作后，队列的状态如下图所示</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图可知，poll操作后，head改变了，并且head所指向的结点的item变为了null。再进行一次poll操作，队列的状态如下图所示。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图可知，poll操作后，head结点没有变化，只是指示的结点的item域变成了null。</li>
</ul>
<h4><a class="header-anchor" href="#remove函数"><span></span></a><a href="#remove%E5%87%BD%E6%95%B0">#</a> remove函数</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 元素为null，返回</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> pred </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> first</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> succ</span><span style="color:#E06C75">(p)) { </span><span style="color:#7F848E;font-style:italic">// 获取第一个存活的结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 第一个存活结点的item值</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> item </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (item </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">            o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(item)</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">casItem</span><span style="color:#ABB2BF">(item, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 找到item相等的结点，并且将该结点的item设置为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // p的后继结点</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> succ</span><span style="color:#E06C75">(p)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (pred </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// pred不为null并且next不为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 比较并替换next域</span></span>
<span class="line"><span style="color:#E5C07B">                pred</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">casNext</span><span style="color:#ABB2BF">(p, next);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // pred赋值为p</span></span>
<span class="line"><span style="color:#E06C75">        pred </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数用于从队列中移除指定元素的单个实例(如果存在)。其中，会调用到first函数和succ函数，first函数的源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> first</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">    restartFromHead</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 无限循环，确保成功</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> head</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> h</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // p结点的item域是否为null</span></span>
<span class="line"><span style="color:#C678DD">            boolean</span><span style="color:#E06C75"> hasItem </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (hasItem </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (q </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// item不为null或者next域为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 更新头节点</span></span>
<span class="line"><span style="color:#61AFEF">                updateHead</span><span style="color:#E06C75">(h</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> p)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 返回结点</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E06C75"> hasItem </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> p </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> q) </span><span style="color:#7F848E;font-style:italic">// p等于q</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 继续从头节点开始</span></span>
<span class="line"><span style="color:#C678DD">                continue</span><span style="color:#E06C75"> restartFromHead</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // p赋值为q</span></span>
<span class="line"><span style="color:#E06C75">                p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> q</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: first函数用于找到链表中第一个存活的结点。succ函数源码如下</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> succ</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // p结点的next域</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 如果next域为自身，则返回头节点，否则，返回next</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> next) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> head </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: succ用于获取结点的下一个结点。如果结点的next域指向自身，则返回head头节点，否则，返回next结点。下面模拟remove函数的操作，队列状态的变化(假设单线程操作，状态为之前offer10、20后的状态，执行remove(10)、remove(20)操作)。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图所示，为ConcurrentLinkedQueue的初始状态，remove(10)后的状态如下图所示</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图所示，当执行remove(10)后，head指向了head结点之前指向的结点的下一个结点，并且head结点的item域置为null。继续执行remove(20)，状态如下图所示</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>如上图所示，执行remove(20)后，head与tail指向同一个结点，item域为null。</li>
</ul>
<h4><a class="header-anchor" href="#size函数"><span></span></a><a href="#size%E5%87%BD%E6%95%B0">#</a> size函数</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> size</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 计数</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> first</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> succ</span><span style="color:#E06C75">(p)) </span><span style="color:#7F848E;font-style:italic">// 从第一个存活的结点开始往后遍历</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 结点的item域不为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Collection.size() spec says to max out</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">count </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 增加计数，若达到最大值，则跳出循环</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回大小</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数用于返回ConcurrenLinkedQueue的大小，从第一个存活的结点(first)开始，往后遍历链表，当结点的item域不为null时，增加计数，之后返回大小。</p>
<h2><a class="header-anchor" href="#concurrentlinkedqueue示例"><span></span></a><a href="#concurrentlinkedqueue%E7%A4%BA%E4%BE%8B">#</a> ConcurrentLinkedQueue示例</h2>
<p>下面通过一个示例来了解ConcurrentLinkedQueue的使用</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.ConcurrentLinkedQueue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> PutThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> clq</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> PutThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">clq</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">clq</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> clq;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">; i++) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"add "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> i);</span></span>
<span class="line"><span style="color:#E5C07B">                clq</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> GetThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> clq</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> GetThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">clq</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">clq</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> clq;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">; i++) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"poll "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> clq</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">poll</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ConcurrentLinkedQueueDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">clq</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ConcurrentLinkedQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">        PutThread</span><span style="color:#E06C75"> p1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> PutThread</span><span style="color:#ABB2BF">(clq);</span></span>
<span class="line"><span style="color:#E5C07B">        GetThread</span><span style="color:#E06C75"> g1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> GetThread</span><span style="color:#ABB2BF">(clq);</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#E5C07B">        p1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        g1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次):</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">add 0</span></span>
<span class="line"><span style="color:#ABB2BF">poll null</span></span>
<span class="line"><span style="color:#ABB2BF">add 1</span></span>
<span class="line"><span style="color:#ABB2BF">poll 0</span></span>
<span class="line"><span style="color:#ABB2BF">add 2</span></span>
<span class="line"><span style="color:#ABB2BF">poll 1</span></span>
<span class="line"><span style="color:#ABB2BF">add 3</span></span>
<span class="line"><span style="color:#ABB2BF">poll 2</span></span>
<span class="line"><span style="color:#ABB2BF">add 4</span></span>
<span class="line"><span style="color:#ABB2BF">poll 3</span></span>
<span class="line"><span style="color:#ABB2BF">add 5</span></span>
<span class="line"><span style="color:#ABB2BF">poll 4</span></span>
<span class="line"><span style="color:#ABB2BF">poll 5</span></span>
<span class="line"><span style="color:#ABB2BF">add 6</span></span>
<span class="line"><span style="color:#ABB2BF">add 7</span></span>
<span class="line"><span style="color:#ABB2BF">poll 6</span></span>
<span class="line"><span style="color:#ABB2BF">poll 7</span></span>
<span class="line"><span style="color:#ABB2BF">add 8</span></span>
<span class="line"><span style="color:#ABB2BF">add 9</span></span>
<span class="line"><span style="color:#ABB2BF">poll 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: GetThread线程不会因为ConcurrentLinkedQueue队列为空而等待，而是直接返回null，所以当实现队列不空时，等待时，则需要用户自己实现等待逻辑。</p>
<h2><a class="header-anchor" href="#再深入理解"><span></span></a><a href="#%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 再深入理解</h2>
<h3><a class="header-anchor" href="#hops-延迟更新的策略-的设计"><span></span></a><a href="#hops-%E5%BB%B6%E8%BF%9F%E6%9B%B4%E6%96%B0%E7%9A%84%E7%AD%96%E7%95%A5-%E7%9A%84%E8%AE%BE%E8%AE%A1">#</a> HOPS(延迟更新的策略)的设计</h3>
<p>通过上面对offer和poll方法的分析，我们发现tail和head是延迟更新的，两者更新触发时机为：</p>
<ul>
<li><code>tail更新触发时机</code>：当tail指向的节点的下一个节点不为null的时候，会执行定位队列真正的队尾节点的操作，找到队尾节点后完成插入之后才会通过casTail进行tail更新；当tail指向的节点的下一个节点为null的时候，只插入节点不更新tail。</li>
<li><code>head更新触发时机</code>：当head指向的节点的item域为null的时候，会执行定位队列真正的队头节点的操作，找到队头节点后完成删除之后才会通过updateHead进行head更新；当head指向的节点的item域不为null的时候，只删除节点不更新head。</li>
</ul>
<p>并且在更新操作时，源码中会有注释为：<code>hop two nodes at a time</code>。所以这种延迟更新的策略就被叫做HOPS的大概原因是这个(猜的 😃)，从上面更新时的状态图可以看出，head和tail的更新是“跳着的”即中间总是间隔了一个。那么这样设计的意图是什么呢?</p>
<p>如果让tail永远作为队列的队尾节点，实现的代码量会更少，而且逻辑更易懂。但是，这样做有一个缺点，如果大量的入队操作，每次都要执行CAS进行tail的更新，汇总起来对性能也会是大大的损耗。如果能减少CAS更新的操作，无疑可以大大提升入队的操作效率，所以doug lea大师每间隔1次(tail和队尾节点的距离为1)进行才利用CAS更新tail。对head的更新也是同样的道理，虽然，这样设计会多出在循环中定位队尾节点，但总体来说读的操作效率要远远高于写的性能，因此，多出来的在循环中定位尾节点的操作的性能损耗相对而言是很小的。</p>
<h3><a class="header-anchor" href="#concurrentlinkedqueue适合的场景"><span></span></a><a href="#concurrentlinkedqueue%E9%80%82%E5%90%88%E7%9A%84%E5%9C%BA%E6%99%AF">#</a> ConcurrentLinkedQueue适合的场景</h3>
<p>ConcurrentLinkedQueue通过无锁来做到了更高的并发量，是个高性能的队列，但是使用场景相对不如阻塞队列常见，毕竟取数据也要不停的去循环，不如阻塞的逻辑好设计，但是在并发量特别大的情况下，是个不错的选择，性能上好很多，而且这个队列的设计也是特别费力，尤其的使用的改良算法和对哨兵的处理。整体的思路都是比较严谨的，这个也是使用了无锁造成的，我们自己使用无锁的条件的话，这个队列是个不错的参考。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-concurrentlinkedqueue-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 集合之 CopyOnWriteArrayList 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20CopyOnWriteArrayList%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20CopyOnWriteArrayList%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 集合之 CopyOnWriteArrayList 详解</source>
      <description>CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。 JUC 集合之 CopyOnWriteArrayList 详解 带着BAT大厂的面试问题去理解 CopyOnWriteArrayList源码分析 类的继承关系 类的内...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。</p>
</blockquote>
<ul>
<li>JUC 集合之 CopyOnWriteArrayList 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>CopyOnWriteArrayList源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>核心函数分析
<ul>
<li><a href="#copyof%E5%87%BD%E6%95%B0">copyOf函数</a></li>
<li><a href="#add%E5%87%BD%E6%95%B0">add函数</a></li>
<li><a href="#addifabsent%E6%96%B9%E6%B3%95">addIfAbsent方法</a></li>
<li><a href="#set%E5%87%BD%E6%95%B0">set函数</a></li>
<li><a href="#remove%E5%87%BD%E6%95%B0">remove函数</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#copyonwritearraylist%E7%A4%BA%E4%BE%8B">CopyOnWriteArrayList示例</a></li>
<li>更深入理解
<ul>
<li><a href="#copyonwritearraylist%E7%9A%84%E7%BC%BA%E9%99%B7%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">CopyOnWriteArrayList的缺陷和使用场景</a></li>
<li><a href="#copyonwritearraylist%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B8%94%E6%80%A7%E8%83%BD%E6%AF%94vector%E5%A5%BD">CopyOnWriteArrayList为什么并发安全且性能比Vector好? </a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>请先说说非并发集合中Fail-fast机制?</li>
<li>再为什么说ArrayList查询快而增删慢?</li>
<li>对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝</li>
<li>再说下弱一致性的迭代器原理是怎么样的? <code>COWIterator&lt;E&gt;</code></li>
<li>CopyOnWriteArrayList为什么并发安全且性能比Vector好?</li>
<li>CopyOnWriteArrayList有何缺陷，说说其应用场景?</li>
</ul>
<h2><a class="header-anchor" href="#copyonwritearraylist源码分析"><span></span></a><a href="#copyonwritearraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> CopyOnWriteArrayList源码分析</h2>
<h3><a class="header-anchor" href="#类的继承关系"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</h3>
<p>CopyOnWriteArrayList实现了List接口，List接口定义了对列表的基本操作；同时实现了RandomAccess接口，表示可以随机访问(数组具有随机访问的特性)；同时实现了Cloneable接口，表示可克隆；同时也实现了Serializable接口，表示可被序列化。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CopyOnWriteArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> RandomAccess</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Cloneable</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#类的内部类"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</h3>
<ul>
<li>COWIterator类</li>
</ul>
<p>COWIterator表示迭代器，其也有一个Object类型的数组作为CopyOnWriteArrayList数组的快照，这种快照风格的迭代器方法在创建迭代器时使用了对当时数组状态的引用。此数组在迭代器的生存期内不会更改，因此不可能发生冲突，并且迭代器保证不会抛出 ConcurrentModificationException。创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。在迭代器上进行的元素更改操作(remove、set 和 add)不受支持。这些方法将抛出 UnsupportedOperationException。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> COWIterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> ListIterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** Snapshot of the array */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 快照</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] snapshot</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** Index of element to be returned by subsequent call to next.  */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 游标</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> cursor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#61AFEF"> COWIterator</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">elements</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> initialCursor</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        cursor </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> initialCursor;</span></span>
<span class="line"><span style="color:#ABB2BF">        snapshot </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> elements;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 是否还有下一项</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cursor </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> snapshot</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 是否有上一项</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> hasPrevious</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cursor </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // next项</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> next</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF"> hasNext</span><span style="color:#ABB2BF">()) </span><span style="color:#7F848E;font-style:italic">// 不存在下一项，抛出异常</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 返回下一项</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> (E) snapshot[cursor++];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> previous</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF"> hasPrevious</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> (E) snapshot[--cursor];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 下一项索引</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> nextIndex</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cursor;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 上一项索引</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> previousIndex</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cursor</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Not supported. Always throws UnsupportedOperationException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> UnsupportedOperationException</span><span style="color:#7F848E;font-style:italic"> always; {@code remove}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *         is not supported by this iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 不支持remove操作</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> remove</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UnsupportedOperationException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Not supported. Always throws UnsupportedOperationException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> UnsupportedOperationException</span><span style="color:#7F848E;font-style:italic"> always; {@code set}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *         is not supported by this iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 不支持set操作</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> set</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UnsupportedOperationException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Not supported. Always throws UnsupportedOperationException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> UnsupportedOperationException</span><span style="color:#7F848E;font-style:italic"> always; {@code add}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *         is not supported by this iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 不支持add操作</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UnsupportedOperationException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> forEachRemaining</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Consumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">action</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">requireNonNull</span><span style="color:#ABB2BF">(action);</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">elements</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> snapshot;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> elements</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> cursor; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> size; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#ABB2BF">) </span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (E) elements[i];</span></span>
<span class="line"><span style="color:#E5C07B">            action</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        cursor </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> size;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#类的属性"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</h3>
<p>属性中有一个可重入锁，用来保证线程安全访问，还有一个Object类型的数组，用来存放具体的元素。当然，也使用到了反射机制和CAS来保证原子性的修改lock域。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CopyOnWriteArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> RandomAccess</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Cloneable</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 版本序列号</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 8673264195747942595L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 对象数组，用于存放元素</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] array</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 反射机制</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#E06C75"> UNSAFE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // lock域的内存偏移量</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> lockOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            UNSAFE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CopyOnWriteArrayList</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            lockOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75">                (</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"lock"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#类的构造函数"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</h3>
<ul>
<li>默认构造函数</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> CopyOnWriteArrayList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF">    setArray</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">])</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>CopyOnWriteArrayList(Collection&lt;? extends E&gt;)</code>型构造函数　 该构造函数用于创建一个按 collection 的迭代器返回元素的顺序包含指定 collection 元素的列表。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> CopyOnWriteArrayList</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E5C07B">    Object</span><span style="color:#E06C75">[] elements</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#E5C07B"> CopyOnWriteArrayList</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 类型相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取c集合的数组</span></span>
<span class="line"><span style="color:#E06C75">        elements </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">CopyOnWriteArrayList</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)c)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 类型不相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 将c集合转化为数组并赋值给elements</span></span>
<span class="line"><span style="color:#E06C75">        elements </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">elements</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> !=</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[]</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// elements类型不为Object[]类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 将elements数组转化为Object[]类型的数组</span></span>
<span class="line"><span style="color:#E06C75">            elements </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elements, </span><span style="color:#E5C07B">elements</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">[].</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF">    setArray</span><span style="color:#E06C75">(elements)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该构造函数的处理流程如下</p>
<ul>
<li>
<p>判断传入的集合c的类型是否为CopyOnWriteArrayList类型，若是，则获取该集合类型的底层数组(Object[])，并且设置当前CopyOnWriteArrayList的数组(Object[]数组)，进入步骤③；否则，进入步骤②</p>
</li>
<li>
<p>将传入的集合转化为数组elements，判断elements的类型是否为Object[]类型(toArray方法可能不会返回Object类型的数组)，若不是，则将elements转化为Object类型的数组。进入步骤③</p>
</li>
<li>
<p>设置当前CopyOnWriteArrayList的Object[]为elements。</p>
</li>
<li>
<p><code>CopyOnWriteArrayList(E[])</code>型构造函数</p>
</li>
</ul>
<p>该构造函数用于创建一个保存给定数组的副本的列表。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> CopyOnWriteArrayList</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75">[] toCopyIn) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将toCopyIn转化为Object[]类型数组，然后设置当前数组</span></span>
<span class="line"><span style="color:#61AFEF">    setArray</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(toCopyIn, </span><span style="color:#E5C07B">toCopyIn</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">[].</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#核心函数分析"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 核心函数分析</h3>
<p>对于CopyOnWriteArrayList的函数分析，主要明白Arrays.copyOf方法即可理解CopyOnWriteArrayList其他函数的意义。</p>
<h4><a class="header-anchor" href="#copyof函数"><span></span></a><a href="#copyof%E5%87%BD%E6%95%B0">#</a> copyOf函数</h4>
<p>该函数用于复制指定的数组，截取或用 null 填充(如有必要)，以使副本具有指定的长度。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">U</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">copyOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">U</span><span style="color:#E06C75">[] original</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> newLength</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends </span><span style="color:#E5C07B">T</span><span style="color:#E06C75">[]</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> newType) {</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 确定copy的类型(将newType转化为Object类型，将Object[].class转化为Object类型，判断两者是否相等，若相等，则生成指定长度的Object数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 否则,生成指定长度的新类型的数组)</span></span>
<span class="line"><span style="color:#E5C07B">    T</span><span style="color:#E06C75">[] copy </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((Object)newType </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> (Object)</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[]</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        ?</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">T</span><span style="color:#E06C75">[]) </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[newLength]</span></span>
<span class="line"><span style="color:#C678DD">        :</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">T</span><span style="color:#E06C75">[]) </span><span style="color:#E5C07B">Array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">newType</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getComponentType</span><span style="color:#ABB2BF">(), newLength);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将original数组从下标0开始，复制长度为(original.length和newLength的较小者),复制到copy数组中(也从下标0开始)</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(original, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, copy, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                        Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">original</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">, newLength));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> copy</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#add函数"><span></span></a><a href="#add%E5%87%BD%E6%95%B0">#</a> add函数</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B">    lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 元素数组</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] elements </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getArray</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 数组长度</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elements</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 复制数组</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] newElements </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elements, len </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 存放元素e</span></span>
<span class="line"><span style="color:#E06C75">        newElements[len] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF">        setArray</span><span style="color:#E06C75">(newElements)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B">        lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数用于将指定元素添加到此列表的尾部，处理流程如下</p>
<ul>
<li>获取锁(保证多线程的安全访问)，获取当前的Object数组，获取Object数组的长度为length，进入步骤②。</li>
<li>根据Object数组复制一个长度为length+1的Object数组为newElements(此时，newElements[length]为null)，进入下一步骤。</li>
<li>将下标为length的数组元素newElements[length]设置为元素e，再设置当前Object[]为newElements，释放锁，返回。这样就完成了元素的添加。</li>
</ul>
<h4><a class="header-anchor" href="#addifabsent方法"><span></span></a><a href="#addifabsent%E6%96%B9%E6%B3%95">#</a> addIfAbsent方法</h4>
<p>该函数用于添加元素(如果数组中不存在，则添加；否则，不添加，直接返回)，可以保证多线程环境下不会重复添加元素。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addIfAbsent</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] snapshot) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重入锁</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B">    lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取数组</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] current </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getArray</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 数组长度</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (snapshot </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> current) { </span><span style="color:#7F848E;font-style:italic">// 快照不等于当前数组，对数组进行了修改</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Optimize for lost race to another addXXX operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 取较小者</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> common </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">snapshot</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">, len);</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> common</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 遍历</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (current[i] </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> snapshot[i] </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> eq</span><span style="color:#E06C75">(e</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> current[i])) </span><span style="color:#7F848E;font-style:italic">// 当前数组的元素与快照的元素不相等并且e与当前元素相等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 表示在snapshot与current之间修改了数组，并且设置了数组某一元素为e，已经存在</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 返回</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">indexOf</span><span style="color:#E06C75">(e</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> current</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> common</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> len) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 在当前数组中找到e元素</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 返回</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 复制数组</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] newElements </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(current, len </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 对数组len索引的元素赋值为e</span></span>
<span class="line"><span style="color:#E06C75">        newElements[len] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF">        setArray</span><span style="color:#E06C75">(newElements)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B">        lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的流程如下:</p>
<p>① 获取锁，获取当前数组为current，current长度为len，判断数组之前的快照snapshot是否等于当前数组current，若不相等，则进入步骤②；否则，进入步骤④</p>
<p>② 不相等，表示在snapshot与current之间，对数组进行了修改(如进行了add、set、remove等操作)，获取长度(snapshot与current之间的较小者)，对current进行遍历操作，若遍历过程发现snapshot与current的元素不相等并且current的元素与指定元素相等(可能进行了set操作)，进入步骤⑤，否则，进入步骤③</p>
<p>③ 在当前数组中索引指定元素，若能够找到，进入步骤⑤，否则，进入步骤④</p>
<p>④ 复制当前数组current为newElements，长度为len+1，此时newElements[len]为null。再设置newElements[len]为指定元素e，再设置数组，进入步骤⑤</p>
<p>⑤ 释放锁，返回。</p>
<h4><a class="header-anchor" href="#set函数"><span></span></a><a href="#set%E5%87%BD%E6%95%B0">#</a> set函数</h4>
<p>此函数用于用指定的元素替代此列表指定位置上的元素，也是基于数组的复制来实现的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B">    lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取数组</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] elements </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getArray</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取index索引的元素</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(elements</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (oldValue </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> element) { </span><span style="color:#7F848E;font-style:italic">// 旧值等于element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 数组长度</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elements</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 复制数组</span></span>
<span class="line"><span style="color:#E5C07B">            Object</span><span style="color:#E06C75">[] newElements </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elements, len);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 重新赋值index索引的值</span></span>
<span class="line"><span style="color:#E06C75">            newElements[index] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF">            setArray</span><span style="color:#E06C75">(newElements)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Not quite a no-op; ensures volatile write semantics</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF">            setArray</span><span style="color:#E06C75">(elements)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 返回旧值</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B">        lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#remove函数"><span></span></a><a href="#remove%E5%87%BD%E6%95%B0">#</a> remove函数</h4>
<p>此函数用于移除此列表指定位置上的元素。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lock</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B">    lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取数组</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] elements </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getArray</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 数组长度</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elements</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取旧值</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(elements</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 需要移动的元素个数</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numMoved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (numMoved </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 移动个数为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 复制后设置数组</span></span>
<span class="line"><span style="color:#61AFEF">            setArray</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elements, len </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 移动个数不为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 新生数组</span></span>
<span class="line"><span style="color:#E5C07B">            Object</span><span style="color:#E06C75">[] newElements </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[len </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 复制index索引之前的元素</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elements, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, newElements, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, index);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 复制index索引之后的元素</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elements, index </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">, newElements, index,</span></span>
<span class="line"><span style="color:#ABB2BF">                                numMoved);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 设置索引</span></span>
<span class="line"><span style="color:#61AFEF">            setArray</span><span style="color:#E06C75">(newElements)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 返回旧值</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B">        lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理流程如下</p>
<p>① 获取锁，获取数组elements，数组长度为length，获取索引的值elements[index]，计算需要移动的元素个数(length - index - 1),若个数为0，则表示移除的是数组的最后一个元素，复制elements数组，复制长度为length-1，然后设置数组，进入步骤③；否则，进入步骤②</p>
<p>② 先复制index索引前的元素，再复制index索引后的元素，然后设置数组。</p>
<p>③ 释放锁，返回旧值。</p>
<h2><a class="header-anchor" href="#copyonwritearraylist示例"><span></span></a><a href="#copyonwritearraylist%E7%A4%BA%E4%BE%8B">#</a> CopyOnWriteArrayList示例</h2>
<p>下面通过一个示例来了解CopyOnWriteArrayList的使用: 在程序中，有一个PutThread线程会每隔50ms就向CopyOnWriteArrayList中添加一个元素，并且两次使用了迭代器，迭代器输出的内容都是生成迭代器时，CopyOnWriteArrayList的Object数组的快照的内容，在迭代的过程中，往CopyOnWriteArrayList中添加元素也不会抛出异常。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.Iterator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.CopyOnWriteArrayList</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> PutThread</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> CopyOnWriteArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> cowal</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> PutThread</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">CopyOnWriteArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">cowal</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cowal</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> cowal;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 100</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 110</span><span style="color:#ABB2BF">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B">                cowal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">50</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CopyOnWriteArrayListDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        CopyOnWriteArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">cowal</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> CopyOnWriteArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B">            cowal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        PutThread</span><span style="color:#E06C75"> p1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> PutThread</span><span style="color:#ABB2BF">(cowal);</span></span>
<span class="line"><span style="color:#E5C07B">        p1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">iterator</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cowal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">200</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#ABB2BF">        iterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> cowal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次)</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">0 1 2 3 4 5 6 7 8 9 100 </span></span>
<span class="line"><span style="color:#ABB2BF">0 1 2 3 4 5 6 7 8 9 100 101 102 103 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#更深入理解"><span></span></a><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 更深入理解</h2>
<h3><a class="header-anchor" href="#copyonwritearraylist的缺陷和使用场景"><span></span></a><a href="#copyonwritearraylist%E7%9A%84%E7%BC%BA%E9%99%B7%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> CopyOnWriteArrayList的缺陷和使用场景</h3>
<p>CopyOnWriteArrayList 有几个缺点：</p>
<ul>
<li>由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致young gc或者full gc</li>
<li>不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；</li>
</ul>
<p><strong>CopyOnWriteArrayList 合适读多写少的场景，不过这类慎用</strong></p>
<p>因为谁也没法保证CopyOnWriteArrayList 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。</p>
<h3><a class="header-anchor" href="#copyonwritearraylist为什么并发安全且性能比vector好"><span></span></a><a href="#copyonwritearraylist%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B8%94%E6%80%A7%E8%83%BD%E6%AF%94vector%E5%A5%BD">#</a> CopyOnWriteArrayList为什么并发安全且性能比Vector好?</h3>
<p>Vector对单独的add，remove等方法都是在方法上加了synchronized; 并且如果一个线程A调用size时，另一个线程B 执行了remove，然后size的值就不是最新的，然后线程A调用remove就会越界(这时就需要再加一个Synchronized)。这样就导致有了双重锁，效率大大降低，何必呢。于是vector废弃了，要用就用CopyOnWriteArrayList 吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 并发之 ThreadLocal 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%20ThreadLocal%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%20ThreadLocal%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 并发之 ThreadLocal 详解</source>
      <description>ThreadLocal是通过线程隔离的方式防止任务在共享资源上产生冲突, 线程本地存储是一种自动化机制，可以为使用相同变量的每个不同线程都创建不同的存储。 Java 并发之 ThreadLocal 详解 带着BAT大厂的面试问题去理解 ThreadLocal简介 ThreadLocal理解 ThreadLocal原理 如何实现线程隔离 ThreadLo...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>ThreadLocal是通过线程隔离的方式防止任务在共享资源上产生冲突, 线程本地存储是一种自动化机制，可以为使用相同变量的每个不同线程都创建不同的存储。</p>
</blockquote>
<ul>
<li>Java 并发之 ThreadLocal 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#threadlocal%E7%AE%80%E4%BB%8B">ThreadLocal简介</a></li>
<li><a href="#threadlocal%E7%90%86%E8%A7%A3">ThreadLocal理解</a></li>
<li>ThreadLocal原理
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB">如何实现线程隔离</a></li>
<li><a href="#threadlocalmap%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88">ThreadLocalMap对象是什么</a></li>
</ul>
</li>
<li><a href="#threadlocal%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E9%97%AE%E9%A2%98">ThreadLocal造成内存泄露的问题</a></li>
<li>再看ThreadLocal应用场景
<ul>
<li><a href="#%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%B4%E6%8A%A4%E4%BA%86%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%E5%8F%B7">每个线程维护了一个“序列号”</a></li>
<li><a href="#session%E7%9A%84%E7%AE%A1%E7%90%86">Session的管理</a></li>
<li><a href="#%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%86%85%E9%83%A8%E5%88%9B%E5%BB%BAthreadlocal">在线程内部创建ThreadLocal</a></li>
<li><a href="#java-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E4%B8%AD%E6%8E%A8%E8%8D%90%E7%9A%84-threadlocal">java 开发手册中推荐的 ThreadLocal</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>什么是ThreadLocal? 用来解决什么问题的?</li>
<li>说说你对ThreadLocal的理解</li>
<li>ThreadLocal是如何实现线程隔离的?</li>
<li>为什么ThreadLocal会造成内存泄露? 如何解决</li>
<li>还有哪些使用ThreadLocal的应用场景?</li>
</ul>
<h2><a class="header-anchor" href="#threadlocal简介"><span></span></a><a href="#threadlocal%E7%AE%80%E4%BB%8B">#</a> ThreadLocal简介</h2>
<p>我们在<a href="">Java 并发 - 并发理论基础</a>总结过线程安全(是指广义上的共享资源访问安全性，因为线程隔离是通过副本保证本线程访问资源安全性，它不保证线程之间还存在共享关系的狭义上的安全性)的解决思路：</p>
<ul>
<li>互斥同步: synchronized 和 ReentrantLock</li>
<li>非阻塞同步: CAS, AtomicXXXX</li>
<li>无同步方案: 栈封闭，本地存储(Thread Local)，可重入代码</li>
</ul>
<p>这个章节将详细的讲讲 本地存储(Thread Local)。官网的解释是这样的：</p>
<blockquote>
<p>This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its {@code get} or {@code set} method) has its own, independently initialized copy of the variable. {@code ThreadLocal} instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID) 该类提供了线程局部 (thread-local) 变量。这些变量不同于它们的普通对应物，因为访问某个变量(通过其 get 或 set 方法)的每个线程都有自己的局部变量，它独立于变量的初始化副本。ThreadLocal 实例通常是类中的 private static 字段，它们希望将状态与某一个线程(例如，用户 ID 或事务 ID)相关联。</p>
</blockquote>
<p>总结而言：ThreadLocal是一个将在多线程中为每一个线程创建单独的变量副本的类; 当使用ThreadLocal来维护变量时, ThreadLocal会为每个线程创建单独的变量副本, 避免因多线程操作共享变量而导致的数据不一致的情况。</p>
<h2><a class="header-anchor" href="#threadlocal理解"><span></span></a><a href="#threadlocal%E7%90%86%E8%A7%A3">#</a> ThreadLocal理解</h2>
<blockquote>
<p>提到ThreadLocal被提到应用最多的是session管理和数据库链接管理，这里以数据访问为例帮助你理解ThreadLocal：</p>
</blockquote>
<ul>
<li>如下数据库管理类在单线程使用是没有任何问题的</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> ConnectionManager</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Connection</span><span style="color:#E06C75"> connect </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Connection</span><span style="color:#61AFEF"> openConnection</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (connect </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            connect </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> DriverManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getConnection</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> connect;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> closeConnection</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (connect </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E5C07B">            connect</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，在多线程中使用会存在线程安全问题：第一，这里面的2个方法都没有进行同步，很可能在openConnection方法中会多次创建connect；第二，由于connect是共享变量，那么必然在调用connect的地方需要使用到同步来保障线程安全，因为很可能一个线程在使用connect进行数据库操作，而另外一个线程调用closeConnection关闭链接。</p>
<ul>
<li>为了解决上述线程安全的问题，第一考虑：互斥同步</li>
</ul>
<p>你可能会说，将这段代码的两个方法进行同步处理，并且在调用connect的地方需要进行同步处理，比如用Synchronized或者ReentrantLock互斥锁。</p>
<ul>
<li>这里再抛出一个问题：这地方到底需不需要将connect变量进行共享?</li>
</ul>
<p>事实上，是不需要的。假如每个线程中都有一个connect变量，各个线程之间对connect变量的访问实际上是没有依赖关系的，即一个线程不需要关心其他线程是否对这个connect进行了修改的。即改后的代码可以这样：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> ConnectionManager</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Connection</span><span style="color:#E06C75"> connect </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Connection</span><span style="color:#61AFEF"> openConnection</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (connect </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            connect </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> DriverManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getConnection</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> connect;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> closeConnection</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (connect </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E5C07B">            connect</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Dao</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> insert</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ConnectionManager</span><span style="color:#E06C75"> connectionManager</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ConnectionManager</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        Connection</span><span style="color:#E06C75"> connection</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> connectionManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">openConnection</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 使用connection进行操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        connectionManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">closeConnection</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样处理确实也没有任何问题，由于每次都是在方法内部创建的连接，那么线程之间自然不存在线程安全问题。但是这样会有一个致命的影响：导致服务器压力非常大，并且严重影响程序执行性能。由于在方法中需要频繁地开启和关闭数据库连接，这样不仅严重影响程序执行效率，还可能导致服务器压力巨大。</p>
<ul>
<li>这时候ThreadLocal登场了</li>
</ul>
<p>那么这种情况下使用ThreadLocal是再适合不过的了，因为ThreadLocal在每个线程中对该变量会创建一个副本，即每个线程内部都会有一个该变量，且在线程内部任何地方都可以使用，线程之间互不影响，这样一来就不存在线程安全问题，也不会严重影响程序执行性能。下面就是网上出现最多的例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.sql.Connection</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.sql.DriverManager</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.sql.SQLException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ConnectionManager</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Connection</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> dbConnectionLocal </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Connection</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        protected</span><span style="color:#E5C07B"> Connection</span><span style="color:#61AFEF"> initialValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E5C07B"> DriverManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getConnection</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">""</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">""</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">SQLException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Connection</span><span style="color:#61AFEF"> getConnection</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> dbConnectionLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>再注意下ThreadLocal的修饰符</li>
</ul>
<p>ThreaLocal的JDK文档中说明：ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread。如果我们希望通过某个类将状态(例如用户ID、事务ID)与线程关联起来，那么通常在这个类中定义private static类型的ThreadLocal 实例。</p>
<blockquote>
<p>但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。</p>
</blockquote>
<h2><a class="header-anchor" href="#threadlocal原理"><span></span></a><a href="#threadlocal%E5%8E%9F%E7%90%86">#</a> ThreadLocal原理</h2>
<h3><a class="header-anchor" href="#如何实现线程隔离"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E9%9A%94%E7%A6%BB">#</a> 如何实现线程隔离</h3>
<p>主要是用到了Thread对象中的一个ThreadLocalMap类型的变量threadLocals, 负责存储当前线程的关于Connection的对象, dbConnectionLocal(以上述例子中为例) 这个变量为Key, 以新建的Connection对象为Value; 这样的话, 线程第一次读取的时候如果不存在就会调用ThreadLocal的initialValue方法创建一个Connection对象并且返回;</p>
<p>具体关于为线程分配变量副本的代码如下:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    ThreadLocalMap</span><span style="color:#E06C75"> threadLocals </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getMap</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (threadLocals </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocalMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> threadLocals</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEntry</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            T</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (T)</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> setInitialValue</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>首先获取当前线程对象t, 然后从线程t中获取到ThreadLocalMap的成员属性threadLocals</li>
<li>如果当前线程的threadLocals已经初始化(即不为null) 并且存在以当前ThreadLocal对象为Key的值, 则直接返回当前线程要获取的对象(本例中为Connection);</li>
<li>如果当前线程的threadLocals已经初始化(即不为null)但是不存在以当前ThreadLocal对象为Key的的对象, 那么重新创建一个Connection对象, 并且添加到当前线程的threadLocals Map中,并返回</li>
<li>如果当前线程的threadLocals属性还没有被初始化, 则重新创建一个ThreadLocalMap对象, 并且创建一个Connection对象并添加到ThreadLocalMap对象中并返回。</li>
</ul>
<p>如果存在则直接返回很好理解, 那么对于如何初始化的代码又是怎样的呢?</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> setInitialValue</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    T</span><span style="color:#E06C75"> value </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> initialValue</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    ThreadLocalMap</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getMap</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (map </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, value);</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#61AFEF">        createMap</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>首先调用我们上面写的重载过后的initialValue方法, 产生一个Connection对象</li>
<li>继续查看当前线程的threadLocals是不是空的, 如果ThreadLocalMap已被初始化, 那么直接将产生的对象添加到ThreadLocalMap中, 如果没有初始化, 则创建并添加对象到其中;</li>
</ul>
<p>同时, ThreadLocal还提供了直接操作Thread对象中的threadLocals的方法</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    ThreadLocalMap</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getMap</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (map </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, value);</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#61AFEF">        createMap</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们也可以不实现initialValue, 将初始化工作放到DBConnectionFactory的getConnection方法中:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Connection</span><span style="color:#61AFEF"> getConnection</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Connection</span><span style="color:#E06C75"> connection </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> dbConnectionLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (connection </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            connection </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> DriverManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getConnection</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">""</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">""</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            dbConnectionLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(connection);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">SQLException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> connection</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们看过代码之后就很清晰的知道了为什么ThreadLocal能够实现变量的多线程隔离了; 其实就是用了Map的数据结构给当前线程缓存了, 要使用的时候就从本线程的threadLocals对象中获取就可以了, key就是当前线程;</p>
<p>当然了在当前线程下获取当前线程里面的Map里面的对象并操作肯定没有线程并发问题了, 当然能做到变量的线程间隔离了;</p>
<p>现在我们知道了ThreadLocal到底是什么了, 又知道了如何使用ThreadLocal以及其基本实现原理了是不是就可以结束了呢? 其实还有一个问题就是ThreadLocalMap是个什么对象, 为什么要用这个对象呢?</p>
<h3><a class="header-anchor" href="#threadlocalmap对象是什么"><span></span></a><a href="#threadlocalmap%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%BB%80%E4%B9%88">#</a> ThreadLocalMap对象是什么</h3>
<p>本质上来讲, 它就是一个Map, 但是这个ThreadLocalMap与我们平时见到的Map有点不一样</p>
<ul>
<li>它没有实现Map接口;</li>
<li>它没有public的方法, 最多有一个default的构造方法, 因为这个ThreadLocalMap的方法仅仅在ThreadLocal类中调用, 属于静态内部类</li>
<li>ThreadLocalMap的Entry实现继承了WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</li>
<li>该方法仅仅用了一个Entry数组来存储Key, Value; Entry并不是链表形式, 而是每个bucket里面仅仅放一个Entry;</li>
</ul>
<p>要了解ThreadLocalMap的实现, 我们先从入口开始, 就是往该Map中添加一个值:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ThreadLocal</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // We don't use a fast path as with get() because it is at</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // least as common to use set() to create new entries as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // it is to replace existing ones, in which case, a fast</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // path would fail more often than not.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#E06C75">[] tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">threadLocalHashCode</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> (len</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Entry</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[i]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">         e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">         e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> nextIndex</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> len)]) {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">            replaceStaleEntry</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    tab[i] </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Entry</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> sz </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">cleanSomeSlots</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> sz) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> sz </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> threshold)</span></span>
<span class="line"><span style="color:#61AFEF">        rehash</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先进行简单的分析, 对该代码表层意思进行解读:</p>
<ul>
<li>看下当前threadLocal的在数组中的索引位置 比如: <code>i = 2</code>, 看 <code>i = 2</code> 位置上面的元素(Entry)的<code>Key</code>是否等于threadLocal 这个 Key, 如果等于就很好说了, 直接将该位置上面的Entry的Value替换成最新的就可以了;</li>
<li>如果当前位置上面的 Entry 的 Key为空, 说明ThreadLocal对象已经被回收了, 那么就调用replaceStaleEntry</li>
<li>如果清理完无用条目(ThreadLocal被回收的条目)、并且数组中的数据大小 &gt; 阈值的时候对当前的Table进行重新哈希 所以, 该HashMap是处理冲突检测的机制是向后移位, 清除过期条目 最终找到合适的位置;</li>
</ul>
<p>了解完Set方法, 后面就是Get方法了:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> Entry</span><span style="color:#61AFEF"> getEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ThreadLocal</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">threadLocalHashCode</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[i]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> key)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getEntryAfterMiss</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先找到ThreadLocal的索引位置, 如果索引位置处的entry不为空并且键与threadLocal是同一个对象, 则直接返回; 否则去后面的索引位置继续查找。</p>
<h2><a class="header-anchor" href="#threadlocal造成内存泄露的问题"><span></span></a><a href="#threadlocal%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E9%97%AE%E9%A2%98">#</a> ThreadLocal造成内存泄露的问题</h2>
<p>网上有这样一个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.LinkedBlockingQueue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.ThreadPoolExecutor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.TimeUnit</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ThreadLocalDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> LocalVariable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75">[</span><span style="color:#D19A66">1024</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1024</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // (1)</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ThreadPoolExecutor</span><span style="color:#E06C75"> poolExecutor </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadPoolExecutor</span><span style="color:#E06C75">(</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> TimeUnit</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MINUTES</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#E5C07B"> LinkedBlockingQueue</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // (2)</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">LocalVariable</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> localVariable </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">LocalVariable</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // (3)</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">5000</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 50</span><span style="color:#ABB2BF">; ++i) {</span></span>
<span class="line"><span style="color:#E5C07B">            poolExecutor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#C678DD">                public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // (4)</span></span>
<span class="line"><span style="color:#E5C07B">                    localVariable</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> LocalVariable</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // (5)</span></span>
<span class="line"><span style="color:#E5C07B">                    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"use local varaible"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> localVariable</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">                    localVariable</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // (6)</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pool execute over"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用线程池来操作ThreadLocal 对象确实会造成内存泄露, 因为对于线程池里面不会销毁的线程, 里面总会存在着<code>&lt;ThreadLocal, LocalVariable&gt;</code>的强引用, 因为final static 修饰的 ThreadLocal 并不会释放, 而ThreadLocalMap 对于 Key 虽然是弱引用, 但是强引用不会释放, 弱引用当然也会一直有值, 同时创建的LocalVariable对象也不会释放, 就造成了内存泄露; 如果LocalVariable对象不是一个大对象的话, 其实泄露的并不严重, <code>泄露的内存 = 核心线程数 * LocalVariable</code>对象的大小;</p>
<p>所以, 为了避免出现内存泄露的情况, ThreadLocal提供了一个清除线程中对象的方法, 即 remove, 其实内部实现就是调用 ThreadLocalMap 的remove方法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ThreadLocal</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#E06C75">[] tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">threadLocalHashCode</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> (len</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Entry</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[i]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">         e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">         e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> nextIndex</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> len)]) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">            expungeStaleEntry</span><span style="color:#E06C75">(i)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到Key对应的Entry, 并且清除Entry的Key(ThreadLocal)置空, 随后清除过期的Entry即可避免内存泄露。</p>
<h2><a class="header-anchor" href="#再看threadlocal应用场景"><span></span></a><a href="#%E5%86%8D%E7%9C%8Bthreadlocal%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 再看ThreadLocal应用场景</h2>
<p>除了上述的数据库管理类的例子，我们再看看其它一些应用：</p>
<h3><a class="header-anchor" href="#每个线程维护了一个-序列号"><span></span></a><a href="#%E6%AF%8F%E4%B8%AA%E7%BA%BF%E7%A8%8B%E7%BB%B4%E6%8A%A4%E4%BA%86%E4%B8%80%E4%B8%AA-%E5%BA%8F%E5%88%97%E5%8F%B7">#</a> 每个线程维护了一个“序列号”</h3>
<blockquote>
<p>再回想上文说的，如果我们希望通过某个类将状态(例如用户ID、事务ID)与线程关联起来，那么通常在这个类中定义private static类型的ThreadLocal 实例。</p>
</blockquote>
<p>每个线程维护了一个“序列号”</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SerialNum</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // The next serial number to be assigned</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> nextSerialNum </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#E06C75"> serialNum </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadLocal</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        protected</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> initialValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(nextSerialNum++);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> get</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> ((Integer) (</span><span style="color:#E5C07B">serialNum</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">())).</span><span style="color:#61AFEF">intValue</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#session的管理"><span></span></a><a href="#session%E7%9A%84%E7%AE%A1%E7%90%86">#</a> Session的管理</h3>
<p>经典的另外一个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#E06C75"> threadSession </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadLocal</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Session</span><span style="color:#61AFEF"> getSession</span><span style="color:#E06C75">() throws InfrastructureException {  </span></span>
<span class="line"><span style="color:#E5C07B">    Session</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Session) </span><span style="color:#E5C07B">threadSession</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {  </span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {  </span></span>
<span class="line"><span style="color:#E06C75">            s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getSessionFactory</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">openSession</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">            threadSession</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(s);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">        }  </span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">HibernateException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {  </span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InfrastructureException</span><span style="color:#E06C75">(ex)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">    }  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#在线程内部创建threadlocal"><span></span></a><a href="#%E5%9C%A8%E7%BA%BF%E7%A8%8B%E5%86%85%E9%83%A8%E5%88%9B%E5%BB%BAthreadlocal">#</a> 在线程内部创建ThreadLocal</h3>
<p>还有一种用法是在线程类内部创建ThreadLocal，基本步骤如下：</p>
<ul>
<li>在多线程的类(如ThreadDemo类)中，创建一个ThreadLocal对象threadXxx，用来保存线程间需要隔离处理的对象xxx。</li>
<li>在ThreadDemo类中，创建一个获取要隔离访问的数据的方法getXxx()，在方法中判断，若ThreadLocal对象为null时候，应该new()一个隔离访问类型的对象，并强制转换为要应用的类型。</li>
<li>在ThreadDemo类的run()方法中，通过调用getXxx()方法获取要操作的数据，这样可以保证每个线程对应一个数据对象，在任何时刻都操作的是这个对象。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ThreadLocalTest</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#E5C07B">    ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Student</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> StudentThreadLocal </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Student</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> currentThreadName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(currentThreadName </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " is running..."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Random</span><span style="color:#E06C75"> random</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> age</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nextInt</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(currentThreadName </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " is set age: "</span><span style="color:#56B6C2">  +</span><span style="color:#ABB2BF"> age);</span></span>
<span class="line"><span style="color:#E5C07B">        Student</span><span style="color:#E06C75"> Student</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getStudentt</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//通过这个方法，为每个线程都独立的new一个Studentt对象，每个线程的的Studentt对象都可以设置不同的值</span></span>
<span class="line"><span style="color:#E5C07B">        Student</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAge</span><span style="color:#ABB2BF">(age);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(currentThreadName </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " is first get age: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Student</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAge</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">500</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">( currentThreadName </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " is second get age: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Student</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAge</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Student</span><span style="color:#61AFEF"> getStudentt</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Student</span><span style="color:#E06C75"> Student</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> StudentThreadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> ==</span><span style="color:#ABB2BF"> Student) {</span></span>
<span class="line"><span style="color:#ABB2BF">            Student </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Student</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            StudentThreadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(Student);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> Student;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocalTest</span><span style="color:#E06C75"> t</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadLocalTest</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(t,</span><span style="color:#98C379">"Thread A"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(t,</span><span style="color:#98C379">"Thread B"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Student</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> age</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAge</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setAge</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> age</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">age</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#java-开发手册中推荐的-threadlocal"><span></span></a><a href="#java-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%E4%B8%AD%E6%8E%A8%E8%8D%90%E7%9A%84-threadlocal">#</a> java 开发手册中推荐的 ThreadLocal</h3>
<p>看看阿里巴巴 java 开发手册中推荐的 ThreadLocal 的用法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.text.DateFormat</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.text.SimpleDateFormat</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> DateUtils</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">DateFormat</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> df </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ThreadLocal</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">DateFormat</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(){</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        protected</span><span style="color:#E5C07B"> DateFormat</span><span style="color:#61AFEF"> initialValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SimpleDateFormat</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"yyyy-MM-dd"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们再要用到 DateFormat 对象的地方，这样调用：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">DateUtils</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">df</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 并发之Java中的锁</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8BJava%E4%B8%AD%E7%9A%84%E9%94%81.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8BJava%E4%B8%AD%E7%9A%84%E9%94%81.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 并发之Java中的锁</source>
      <description>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。 Java 并发之Java中的锁 前言 1. 乐观锁 VS 悲观锁 2. 自旋锁 VS 适应性自旋锁 3. 无锁 VS ...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p>
</blockquote>
<ul>
<li>Java 并发之Java中的锁
<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#1-%E4%B9%90%E8%A7%82%E9%94%81-vs-%E6%82%B2%E8%A7%82%E9%94%81">1. 乐观锁 VS 悲观锁</a></li>
<li><a href="#2-%E8%87%AA%E6%97%8B%E9%94%81-vs-%E9%80%82%E5%BA%94%E6%80%A7%E8%87%AA%E6%97%8B%E9%94%81">2. 自旋锁 VS 适应性自旋锁</a></li>
<li><a href="#3-%E6%97%A0%E9%94%81-vs-%E5%81%8F%E5%90%91%E9%94%81-vs-%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81-vs-%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81">3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</a></li>
<li><a href="#4-%E5%85%AC%E5%B9%B3%E9%94%81-vs-%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81">4. 公平锁 VS 非公平锁</a></li>
<li><a href="#5-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81-vs-%E9%9D%9E%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81">5. 可重入锁 VS 非可重入锁</a></li>
<li><a href="#6-%E7%8B%AC%E4%BA%AB%E9%94%81%E6%8E%92%E4%BB%96%E9%94%81-vs-%E5%85%B1%E4%BA%AB%E9%94%81">6. 独享锁(排他锁) VS 共享锁</a></li>
<li><a href="#%E7%BB%93%E8%AF%AD">结语</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
<li><a href="#%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B">作者简介</a></li>
<li><a href="#%E6%96%87%E7%AB%A0%E6%9D%A5%E6%BA%90">文章来源</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#前言"><span></span></a><a href="#%E5%89%8D%E8%A8%80">#</a> 前言</h2>
<p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p>
<p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-lock-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#_1-乐观锁-vs-悲观锁"><span></span></a><a href="#_1-%E4%B9%90%E8%A7%82%E9%94%81-vs-%E6%82%B2%E8%A7%82%E9%94%81">#</a> 1. 乐观锁 VS 悲观锁</h2>
<blockquote>
<p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p>
</blockquote>
<p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-lock-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>根据从上面的概念描述我们可以发现：</p>
<ul>
<li><strong>悲观锁适合写操作多的场景</strong>，先加锁可以保证写操作时数据正确。</li>
<li><strong>乐观锁适合读操作多的场景</strong>，不加锁的特点能够使其读操作的性能大幅提升。</li>
</ul>
<p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// </span></span></code></pre><div class="line-numbers" aria-hidden="true"></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-lock-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java 并发之基础理论知识点</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 并发之基础理论知识点</source>
      <description>本文从理论的角度引入并发安全问题以及JMM应对并发问题的原理。 Java 并发之基础理论知识点 带着BAT大厂的面试问题去理解 为什么需要多线程 线程不安全示例 并发出现问题的根源: 并发三要素 可见性: CPU缓存引起 原子性: 分时复用引起 有序性: 重排序引起 JAVA是怎么解决并发问题的: JMM(Java内存模型) 关键字: volatile...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文从理论的角度引入并发安全问题以及JMM应对并发问题的原理。</p>
</blockquote>
<ul>
<li>Java 并发之基础理论知识点
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%A4%9A%E7%BA%BF%E7%A8%8B">为什么需要多线程</a></li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%A4%BA%E4%BE%8B">线程不安全示例</a></li>
<li>并发出现问题的根源: 并发三要素
<ul>
<li><a href="#%E5%8F%AF%E8%A7%81%E6%80%A7-cpu%E7%BC%93%E5%AD%98%E5%BC%95%E8%B5%B7">可见性: CPU缓存引起</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%88%86%E6%97%B6%E5%A4%8D%E7%94%A8%E5%BC%95%E8%B5%B7">原子性: 分时复用引起</a></li>
<li><a href="#%E6%9C%89%E5%BA%8F%E6%80%A7-%E9%87%8D%E6%8E%92%E5%BA%8F%E5%BC%95%E8%B5%B7">有序性: 重排序引起</a></li>
</ul>
</li>
<li>JAVA是怎么解决并发问题的: JMM(Java内存模型)
<ul>
<li><a href="#%E5%85%B3%E9%94%AE%E5%AD%97-volatilesynchronized-%E5%92%8C-final">关键字: volatile、synchronized 和 final</a></li>
<li>Happens-Before 规则
<ul>
<li><a href="#1-%E5%8D%95%E4%B8%80%E7%BA%BF%E7%A8%8B%E5%8E%9F%E5%88%99">1. 单一线程原则</a></li>
<li><a href="#2-%E7%AE%A1%E7%A8%8B%E9%94%81%E5%AE%9A%E8%A7%84%E5%88%99">2. 管程锁定规则</a></li>
<li><a href="#3-volatile-%E5%8F%98%E9%87%8F%E8%A7%84%E5%88%99">3. volatile 变量规则</a></li>
<li><a href="#4-%E7%BA%BF%E7%A8%8B%E5%90%AF%E5%8A%A8%E8%A7%84%E5%88%99">4. 线程启动规则</a></li>
<li><a href="#5-%E7%BA%BF%E7%A8%8B%E5%8A%A0%E5%85%A5%E8%A7%84%E5%88%99">5. 线程加入规则</a></li>
<li><a href="#6-%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E8%A7%84%E5%88%99">6. 线程中断规则</a></li>
<li><a href="#7-%E5%AF%B9%E8%B1%A1%E7%BB%88%E7%BB%93%E8%A7%84%E5%88%99">7. 对象终结规则</a></li>
<li><a href="#8-%E4%BC%A0%E9%80%92%E6%80%A7">8. 传递性</a></li>
</ul>
</li>
</ul>
</li>
<li>线程安全: 不是一个非真即假的命题
<ul>
<li><a href="#1-%E4%B8%8D%E5%8F%AF%E5%8F%98">1. 不可变</a></li>
<li><a href="#2-%E7%BB%9D%E5%AF%B9%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">2. 绝对线程安全</a></li>
<li><a href="#3-%E7%9B%B8%E5%AF%B9%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">3. 相对线程安全</a></li>
<li><a href="#4-%E7%BA%BF%E7%A8%8B%E5%85%BC%E5%AE%B9">4. 线程兼容</a></li>
<li><a href="#5-%E7%BA%BF%E7%A8%8B%E5%AF%B9%E7%AB%8B">5. 线程对立</a></li>
</ul>
</li>
<li>线程安全的实现方法
<ul>
<li><a href="#1-%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5">1. 互斥同步</a></li>
<li><a href="#2-%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5">2. 非阻塞同步</a></li>
<li><a href="#3-%E6%97%A0%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88">3. 无同步方案</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解并发理论基础。@pdai</p>
<ul>
<li>多线程的出现是要解决什么问题的?</li>
<li>线程不安全是指什么? 举例说明</li>
<li>并发出现线程不安全的本质什么? 可见性，原子性和有序性。</li>
<li>Java是怎么解决并发问题的? 3个关键字，JMM和8个Happens-Before</li>
<li>线程安全是不是非真即假? 不是</li>
<li>线程安全有哪些实现思路?</li>
<li>如何理解并发和并行的区别?</li>
</ul>
<h2><a class="header-anchor" href="#为什么需要多线程"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%A4%9A%E7%BA%BF%E7%A8%8B">#</a> 为什么需要多线程</h2>
<p>众所周知，CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:</p>
<ul>
<li>CPU 增加了缓存，以均衡与内存的速度差异；// 导致 <code>可见性</code>问题</li>
<li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致 <code>原子性</code>问题</li>
<li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致 <code>有序性</code>问题</li>
</ul>
<h2><a class="header-anchor" href="#线程不安全示例"><span></span></a><a href="#%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%A4%BA%E4%BE%8B">#</a> 线程不安全示例</h2>
<p>如果多个线程对同一个共享数据进行访问而不采取同步操作的话，那么操作的结果是不一致的。</p>
<p>以下代码演示了 1000 个线程同时对 cnt 执行自增操作，操作结束之后它的值有可能小于 1000。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ThreadUnsafeExample</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> cnt </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        cnt++;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> get</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cnt;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> threadSize </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ThreadUnsafeExample</span><span style="color:#E06C75"> example </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadUnsafeExample</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#E5C07B"> CountDownLatch</span><span style="color:#E06C75"> countDownLatch </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> CountDownLatch</span><span style="color:#E06C75">(threadSize)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ExecutorService</span><span style="color:#E06C75"> executorService </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> threadSize</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            example</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            countDownLatch</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">countDown</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    countDownLatch</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">await</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">shutdown</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">example</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#D19A66">997</span><span style="color:#7F848E;font-style:italic"> // 结果总是小于1000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#并发出现问题的根源-并发三要素"><span></span></a><a href="#%E5%B9%B6%E5%8F%91%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E6%A0%B9%E6%BA%90-%E5%B9%B6%E5%8F%91%E4%B8%89%E8%A6%81%E7%B4%A0">#</a> 并发出现问题的根源: 并发三要素</h2>
<p>上述代码输出为什么不是1000? 并发出现问题的根源是什么?</p>
<h3><a class="header-anchor" href="#可见性-cpu缓存引起"><span></span></a><a href="#%E5%8F%AF%E8%A7%81%E6%80%A7-cpu%E7%BC%93%E5%AD%98%E5%BC%95%E8%B5%B7">#</a> 可见性: CPU缓存引起</h3>
<p>可见性：一个线程对共享变量的修改，另外一个线程能够立刻看到。</p>
<p>举个简单的例子，看下面这段代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//线程1执行的代码</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//线程2执行的代码</span></span>
<span class="line"><span style="color:#E06C75">j </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p>
<p>此时线程2执行 j = i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</p>
<p>这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</p>
<h3><a class="header-anchor" href="#原子性-分时复用引起"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%88%86%E6%97%B6%E5%A4%8D%E7%94%A8%E5%BC%95%E8%B5%B7">#</a> 原子性: 分时复用引起</h3>
<p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p>
<p>举个简单的例子，看下面这段代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 线程1执行</span></span>
<span class="line"><span style="color:#E06C75">i </span><span style="color:#56B6C2">+=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 线程2执行</span></span>
<span class="line"><span style="color:#E06C75">i </span><span style="color:#56B6C2">+=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是：<code>i += 1</code>需要三条 CPU 指令</p>
<ol>
<li>将变量 i 从内存读取到 CPU寄存器；</li>
<li>在CPU寄存器中执行 i + 1 操作；</li>
<li>将最后的结果i写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。</li>
</ol>
<p>由于CPU分时复用（线程切换）的存在，线程1执行了第一条指令后，就切换到线程2执行，假如线程2执行了这三条指令后，再切换会线程1执行后续两条指令，将造成最后写到内存中的i值是2而不是3。</p>
<h3><a class="header-anchor" href="#有序性-重排序引起"><span></span></a><a href="#%E6%9C%89%E5%BA%8F%E6%80%A7-%E9%87%8D%E6%8E%92%E5%BA%8F%E5%BC%95%E8%B5%B7">#</a> 有序性: 重排序引起</h3>
<p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">              </span></span>
<span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> flag </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                //语句1  </span></span>
<span class="line"><span style="color:#E06C75">flag </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">          //语句2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗? 不一定，为什么呢? 这里可能会发生指令重排序（Instruction Reorder）。</p>
<p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p>
<ul>
<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>
<li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>
<li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>
</ul>
<p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p>
<p>具体可以参看：<a href="">Java 内存模型详解</a>的重排序章节。</p>
<h2><a class="header-anchor" href="#java是怎么解决并发问题的-jmm-java内存模型"><span></span></a><a href="#java%E6%98%AF%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E7%9A%84-jmm-java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">#</a> JAVA是怎么解决并发问题的: JMM(Java内存模型)</h2>
<p>Java 内存模型是个很复杂的规范，强烈推荐你看后续（应该是网上能找到最好的材料之一了）：<a href="">Java 内存模型详解</a>。</p>
<p><strong>理解的第一个维度：核心知识点</strong></p>
<p>JMM本质上可以理解为，Java 内存模型规范了 JVM 如何提供按需禁用缓存和编译优化的方法。具体来说，这些方法包括：</p>
<ul>
<li>volatile、synchronized 和 final 三个关键字</li>
<li>Happens-Before 规则</li>
</ul>
<p><strong>理解的第二个维度：可见性，有序性，原子性</strong></p>
<ul>
<li>原子性</li>
</ul>
<p>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。 请分析以下哪些操作是原子性操作：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">x </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        //语句1: 直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中</span></span>
<span class="line"><span style="color:#E06C75">y </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         //语句2: 包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</span></span>
<span class="line"><span style="color:#E06C75">x</span><span style="color:#ABB2BF">++;</span><span style="color:#7F848E;font-style:italic">           //语句3： x++包括3个操作：读取x的值，进行加1操作，写入新的值。</span></span>
<span class="line"><span style="color:#E06C75">x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     //语句4： 同语句3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面4个语句只有语句1的操作具备原子性。</p>
<p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p>
<blockquote>
<p>从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p>
</blockquote>
<ul>
<li>可见性</li>
</ul>
<p>Java提供了volatile关键字来保证可见性。</p>
<p>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p>
<p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>
<blockquote>
<p>另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>
</blockquote>
<ul>
<li>有序性</li>
</ul>
<p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。当然JMM是通过Happens-Before 规则来保证有序性的。</p>
<h3><a class="header-anchor" href="#关键字-volatile、synchronized-和-final"><span></span></a><a href="#%E5%85%B3%E9%94%AE%E5%AD%97-volatile%E3%80%81synchronized-%E5%92%8C-final">#</a> 关键字: volatile、synchronized 和 final</h3>
<p>以下三篇文章详细分析了这三个关键字：</p>
<ul>
<li><a href="">关键字: synchronized详解</a></li>
<li><a href="">关键字: volatile详解</a></li>
<li><a href="">关键字: final详解</a></li>
</ul>
<h3><a class="header-anchor" href="#happens-before-规则"><span></span></a><a href="#happens-before-%E8%A7%84%E5%88%99">#</a> Happens-Before 规则</h3>
<p>上面提到了可以用 volatile 和 synchronized 来保证有序性。除此之外，JVM 还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p>
<h4><a class="header-anchor" href="#_1-单一线程原则"><span></span></a><a href="#_1-%E5%8D%95%E4%B8%80%E7%BA%BF%E7%A8%8B%E5%8E%9F%E5%88%99">#</a> 1. 单一线程原则</h4>
<blockquote>
<p>Single Thread rule</p>
</blockquote>
<p>在一个线程内，在程序前面的操作先行发生于后面的操作。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/single-thread-rule.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#_2-管程锁定规则"><span></span></a><a href="#_2-%E7%AE%A1%E7%A8%8B%E9%94%81%E5%AE%9A%E8%A7%84%E5%88%99">#</a> 2. 管程锁定规则</h4>
<blockquote>
<p>Monitor Lock Rule</p>
</blockquote>
<p>一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/monitor-lock-rule.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#_3-volatile-变量规则"><span></span></a><a href="#_3-volatile-%E5%8F%98%E9%87%8F%E8%A7%84%E5%88%99">#</a> 3. volatile 变量规则</h4>
<blockquote>
<p>Volatile Variable Rule</p>
</blockquote>
<p>对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/volatile-variable-rule.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#_4-线程启动规则"><span></span></a><a href="#_4-%E7%BA%BF%E7%A8%8B%E5%90%AF%E5%8A%A8%E8%A7%84%E5%88%99">#</a> 4. 线程启动规则</h4>
<blockquote>
<p>Thread Start Rule</p>
</blockquote>
<p>Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/thread-start-rule.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#_5-线程加入规则"><span></span></a><a href="#_5-%E7%BA%BF%E7%A8%8B%E5%8A%A0%E5%85%A5%E8%A7%84%E5%88%99">#</a> 5. 线程加入规则</h4>
<blockquote>
<p>Thread Join Rule</p>
</blockquote>
<p>Thread 对象的结束先行发生于 join() 方法返回。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/thread-join-rule.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#_6-线程中断规则"><span></span></a><a href="#_6-%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E8%A7%84%E5%88%99">#</a> 6. 线程中断规则</h4>
<blockquote>
<p>Thread Interruption Rule</p>
</blockquote>
<p>对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</p>
<h4><a class="header-anchor" href="#_7-对象终结规则"><span></span></a><a href="#_7-%E5%AF%B9%E8%B1%A1%E7%BB%88%E7%BB%93%E8%A7%84%E5%88%99">#</a> 7. 对象终结规则</h4>
<blockquote>
<p>Finalizer Rule</p>
</blockquote>
<p>一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始。</p>
<h4><a class="header-anchor" href="#_8-传递性"><span></span></a><a href="#_8-%E4%BC%A0%E9%80%92%E6%80%A7">#</a> 8. 传递性</h4>
<blockquote>
<p>Transitivity</p>
</blockquote>
<p>如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</p>
<h2><a class="header-anchor" href="#线程安全-不是一个非真即假的命题"><span></span></a><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9D%9E%E7%9C%9F%E5%8D%B3%E5%81%87%E7%9A%84%E5%91%BD%E9%A2%98">#</a> 线程安全: 不是一个非真即假的命题</h2>
<p>一个类在可以被多个线程安全调用时就是线程安全的。</p>
<p>线程安全不是一个非真即假的命题，可以将共享数据按照安全程度的强弱顺序分成以下五类: 不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p>
<h3><a class="header-anchor" href="#_1-不可变"><span></span></a><a href="#_1-%E4%B8%8D%E5%8F%AF%E5%8F%98">#</a> 1. 不可变</h3>
<p>不可变(Immutable)的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。</p>
<p>多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p>
<p>不可变的类型:</p>
<ul>
<li>final 关键字修饰的基本数据类型</li>
<li>String</li>
<li>枚举类型</li>
<li>Number 部分子类，如 Long 和 Double 等数值包装类型，BigInteger 和 BigDecimal 等大数据类型。但同为 Number 的原子类 AtomicInteger 和 AtomicLong 则是可变的。</li>
</ul>
<p>对于集合类型，可以使用 Collections.unmodifiableXXX() 方法来获取一个不可变的集合。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ImmutableExample</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">map</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">        Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">unmodifiableMap</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unmodifiableMap</span><span style="color:#ABB2BF">(map);</span></span>
<span class="line"><span style="color:#E5C07B">        unmodifiableMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#E5C07B">Exception</span><span style="color:#E06C75"> in thread </span><span style="color:#98C379">"main"</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UnsupportedOperationException</span></span>
<span class="line"><span style="color:#E06C75">    at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Collections$UnmodifiableMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collections</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1457</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E06C75">    at </span><span style="color:#E5C07B">ImmutableExample</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ImmutableExample</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Collections.unmodifiableXXX() 先对原始的集合进行拷贝，需要对集合进行修改的方法都直接抛出异常。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#C678DD">    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UnsupportedOperationException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_2-绝对线程安全"><span></span></a><a href="#_2-%E7%BB%9D%E5%AF%B9%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">#</a> 2. 绝对线程安全</h3>
<p>不管运行时环境如何，调用者都不需要任何额外的同步措施。</p>
<h3><a class="header-anchor" href="#_3-相对线程安全"><span></span></a><a href="#_3-%E7%9B%B8%E5%AF%B9%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">#</a> 3. 相对线程安全</h3>
<p>相对线程安全需要保证对这个对象单独的操作是线程安全的，在调用的时候不需要做额外的保障措施。但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p>
<p>在 Java 语言中，大部分的线程安全类都属于这种类型，例如 Vector、HashTable、Collections 的 synchronizedCollection() 方法包装的集合等。</p>
<p>对于下面的代码，如果删除元素的线程删除了 Vector 的一个元素，而获取元素的线程试图访问一个已经被删除的元素，那么就会抛出 ArrayIndexOutOfBoundsException。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> VectorUnsafeExample</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Vector</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> vector </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Vector</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 100</span><span style="color:#ABB2BF">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B">                vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            ExecutorService</span><span style="color:#E06C75"> executorService</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); i++) {</span></span>
<span class="line"><span style="color:#E5C07B">                    vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#E5C07B">            executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); i++) {</span></span>
<span class="line"><span style="color:#E5C07B">                    vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#E5C07B">            executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">shutdown</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#E5C07B">Exception</span><span style="color:#E06C75"> in thread </span><span style="color:#98C379">"Thread-159738"</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ArrayIndexOutOfBoundsException</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> Array</span><span style="color:#E06C75"> index out of range</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 3</span></span>
<span class="line"><span style="color:#E06C75">    at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Vector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">831</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E06C75">    at </span><span style="color:#E5C07B">VectorUnsafeExample</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lambda$main$0</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">VectorUnsafeExample</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">14</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E06C75">    at </span><span style="color:#E5C07B">VectorUnsafeExample</span><span style="color:#E06C75">$$</span><span style="color:#E5C07B">Lambda</span><span style="color:#E06C75">$1</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">713338599</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Unknown</span><span style="color:#ABB2BF"> Source)</span></span>
<span class="line"><span style="color:#E06C75">    at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">745</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要保证上面的代码能正确执行下去，就需要对删除元素和获取元素的代码进行同步。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    synchronized</span><span style="color:#ABB2BF"> (vector) {</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); i++) {</span></span>
<span class="line"><span style="color:#E5C07B">            vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span>
<span class="line"><span style="color:#E5C07B">executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    synchronized</span><span style="color:#ABB2BF"> (vector) {</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); i++) {</span></span>
<span class="line"><span style="color:#E5C07B">            vector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_4-线程兼容"><span></span></a><a href="#_4-%E7%BA%BF%E7%A8%8B%E5%85%BC%E5%AE%B9">#</a> 4. 线程兼容</h3>
<p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API 中大部分的类都是属于线程兼容的，如与前面的 Vector 和 HashTable 相对应的集合类 ArrayList 和 HashMap 等。</p>
<h3><a class="header-anchor" href="#_5-线程对立"><span></span></a><a href="#_5-%E7%BA%BF%E7%A8%8B%E5%AF%B9%E7%AB%8B">#</a> 5. 线程对立</h3>
<p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于 Java 语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。</p>
<h2><a class="header-anchor" href="#线程安全的实现方法"><span></span></a><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95">#</a> 线程安全的实现方法</h2>
<h3><a class="header-anchor" href="#_1-互斥同步"><span></span></a><a href="#_1-%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5">#</a> 1. 互斥同步</h3>
<p>synchronized 和 ReentrantLock。</p>
<p>初步了解你可以看：</p>
<ul>
<li><a href="">Java 并发 - 线程基础：线程互斥同步</a></li>
</ul>
<p>详细分析请看：</p>
<ul>
<li><a href="">关键字: Synchronized详解</a></li>
<li><a href="">JUC锁: ReentrantLock详解</a></li>
</ul>
<h3><a class="header-anchor" href="#_2-非阻塞同步"><span></span></a><a href="#_2-%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5">#</a> 2. 非阻塞同步</h3>
<p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。</p>
<p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁(这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁)、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p>
<p><strong>(一)CAS</strong></p>
<p>随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略: 先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施(不断地重试，直到成功为止)。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p>
<p>乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是: 比较并交换(Compare-and-Swap，CAS)。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。</p>
<p><strong>(二)AtomicInteger</strong></p>
<p>J.U.C 包里面的整数原子类 AtomicInteger，其中的 compareAndSet() 和 getAndIncrement() 等方法都使用了 Unsafe 类的 CAS 操作。</p>
<p>以下代码使用了 AtomicInteger 执行了自增的操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> AtomicInteger</span><span style="color:#E06C75"> cnt </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicInteger</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    cnt</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">incrementAndGet</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下代码是 incrementAndGet() 的源码，它调用了 unsafe 的 getAndAddInt() 。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> incrementAndGet</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAddInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, valueOffset, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> +</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下代码是 getAndAddInt() 源码，var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 指示操作需要加的数值，这里为 1。通过 getIntVolatile(var1, var2) 得到旧的预期值，通过调用 compareAndSwapInt() 来进行 CAS 比较，如果该字段内存地址中的值等于 var5，那么就更新内存地址为 var1+var2 的变量为 var5+var4。</p>
<p>可以看到 getAndAddInt() 在一个循环中进行，发生冲突的做法是不断的进行重试。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAddInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> var1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> var2</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> var4) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> var5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        var5 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getIntVolatile</span><span style="color:#ABB2BF">(var1, var2);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">while</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#ABB2BF">(var1, var2, var5, var5 </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> var4)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> var5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(三)ABA</strong></p>
<p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</p>
<p>J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p>
<p>CAS, Unsafe和原子类详细分析请看：</p>
<ul>
<li><a href="">JUC原子类: CAS, Unsafe和原子类详解</a></li>
</ul>
<h3><a class="header-anchor" href="#_3-无同步方案"><span></span></a><a href="#_3-%E6%97%A0%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88">#</a> 3. 无同步方案</h3>
<p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p>
<p><strong>(一)栈封闭</strong></p>
<p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.ExecutorService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.Executors</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> StackClosedExample</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add100</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> cnt</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 100</span><span style="color:#ABB2BF">; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF">            cnt++;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(cnt);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">    StackClosedExample</span><span style="color:#E06C75"> example </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StackClosedExample</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ExecutorService</span><span style="color:#E06C75"> executorService </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> example</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add100</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">    executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> example</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add100</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">    executorService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">shutdown</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#D19A66">100</span></span>
<span class="line"><span style="color:#D19A66">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更详细的分析请看J.U.C中线程池相关内容详解：</p>
<ul>
<li><a href="">JUC线程池: FutureTask详解</a></li>
<li><a href="">JUC线程池: ThreadPoolExecutor详解</a></li>
<li><a href="">JUC线程池: ScheduledThreadPool详解</a></li>
<li><a href="">JUC线程池: Fork/Join框架详解</a></li>
</ul>
<p><strong>(二)线程本地存储(Thread Local Storage)</strong></p>
<p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。</p>
<p>符合这种特点的应用并不少见，大部分使用消费队列的架构模式(如“生产者-消费者”模式)都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”(Thread-per-Request)的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。</p>
<p>可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p>
<p>对于以下代码，thread1 中设置 threadLocal 为 1，而 thread2 设置 threadLocal 为 2。过了一段时间之后，thread1 读取 threadLocal 依然是 1，不受 thread2 的影响。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ThreadLocalExample</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocal</span><span style="color:#E06C75"> threadLocal</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadLocal</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> thread1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">threadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> thread2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E5C07B">        thread1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        thread2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了理解 ThreadLocal，先看以下代码:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ThreadLocalExample1</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocal</span><span style="color:#E06C75"> threadLocal1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadLocal</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocal</span><span style="color:#E06C75"> threadLocal2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ThreadLocal</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> thread1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> thread2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            threadLocal2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E5C07B">        thread1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        thread2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它所对应的底层结构图为:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/3646544a-cb57-451d-9e03-d3c4f5e4434a.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>每个 Thread 都有一个 ThreadLocal.ThreadLocalMap 对象，Thread 类中就定义了 ThreadLocal.ThreadLocalMap 成员。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * by the ThreadLocal class. */</span></span>
<span class="line"><span style="color:#E5C07B">ThreadLocal</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ThreadLocalMap</span><span style="color:#E06C75"> threadLocals </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用一个 ThreadLocal 的 set(T value) 方法时，先得到当前线程的 ThreadLocalMap 对象，然后将 ThreadLocal-&gt;value 键值对插入到该 Map 中。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    ThreadLocalMap</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getMap</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (map </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, value);</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#61AFEF">        createMap</span><span style="color:#E06C75">(t</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>get() 方法类似。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Thread</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    ThreadLocalMap</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getMap</span><span style="color:#E06C75">(t)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (map </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        ThreadLocalMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEntry</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            T</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (T)</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> setInitialValue</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ThreadLocal 从理论上讲并不是用来解决多线程并发问题的，因为根本不存在多线程竞争。</p>
<p>在一些场景 (尤其是使用线程池) 下，由于 ThreadLocal.ThreadLocalMap 的底层数据结构导致 ThreadLocal 有内存泄漏的情况，应该尽可能在每次使用 ThreadLocal 后手动调用 remove()，以避免出现 ThreadLocal 经典的内存泄漏甚至是造成自身业务混乱的风险。</p>
<p>更详细的分析看：<a href="">Java 并发 - ThreadLocal详解</a></p>
<p><strong>(三)可重入代码(Reentrant Code)</strong></p>
<p>这种代码也叫做纯代码(Pure Code)，可以在代码执行的任何时刻中断它，转而去执行另外一段代码(包括递归调用它本身)，而在控制权返回后，原来的程序不会出现任何错误。</p>
<p>可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-3.png" type="image/png"/>
    </item>
    <item>
      <title>Java 并发之线程基础</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 并发之线程基础</source>
      <description>本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。 Java 并发之线程基础 线程状态转换 新建(New) 可运行(Runnable) 阻塞(Blocking) 无限期等待(Waiting) 限期等待(Timed Waiting) 死亡(Terminated) 线程使用方式 实现 Runnable 接口 实现 Callab...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:16:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。</p>
</blockquote>
<ul>
<li>Java 并发之线程基础
<ul>
<li>线程状态转换
<ul>
<li><a href="#%E6%96%B0%E5%BB%BAnew">新建(New)</a></li>
<li><a href="#%E5%8F%AF%E8%BF%90%E8%A1%8Crunnable">可运行(Runnable)</a></li>
<li><a href="#%E9%98%BB%E5%A1%9Eblocking">阻塞(Blocking)</a></li>
<li><a href="#%E6%97%A0%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85waiting">无限期等待(Waiting)</a></li>
<li><a href="#%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85timed-waiting">限期等待(Timed Waiting)</a></li>
<li><a href="#%E6%AD%BB%E4%BA%A1terminated">死亡(Terminated)</a></li>
</ul>
</li>
<li>线程使用方式
<ul>
<li><a href="#%E5%AE%9E%E7%8E%B0-runnable-%E6%8E%A5%E5%8F%A3">实现 Runnable 接口</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0-callable-%E6%8E%A5%E5%8F%A3">实现 Callable 接口</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF-thread-%E7%B1%BB">继承 Thread 类</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3-vs-%E7%BB%A7%E6%89%BF-thread">实现接口 VS 继承 Thread</a></li>
</ul>
</li>
<li>基础线程机制
<ul>
<li><a href="#executor">Executor</a></li>
<li><a href="#daemon">Daemon</a></li>
<li><a href="#sleep">sleep()</a></li>
<li><a href="#yield">yield()</a></li>
</ul>
</li>
<li>线程中断
<ul>
<li><a href="#interruptedexception">InterruptedException</a></li>
<li><a href="#interrupted">interrupted()</a></li>
<li><a href="#executor-%E7%9A%84%E4%B8%AD%E6%96%AD%E6%93%8D%E4%BD%9C">Executor 的中断操作</a></li>
</ul>
</li>
<li>线程互斥同步
<ul>
<li><a href="#synchronized">synchronized</a></li>
<li><a href="#reentrantlock">ReentrantLock</a></li>
<li><a href="#%E6%AF%94%E8%BE%83">比较</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9">使用选择</a></li>
</ul>
</li>
<li>线程之间的协作
<ul>
<li><a href="#join">join()</a></li>
<li><a href="#wait-notify-notifyall">wait() notify() notifyAll()</a></li>
<li><a href="#await-signal-signalall">await() signal() signalAll()</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解线程基础。@pdai</p>
<ul>
<li>线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?</li>
<li>通常线程有哪几种使用方式?</li>
<li>基础线程机制有哪些?</li>
<li>线程的中断方式有哪些?</li>
<li>线程的互斥同步方式有哪些? 如何比较和选择?</li>
<li>线程之间有哪些协作方式?</li>
</ul>
<h2><a class="header-anchor" href="#线程状态转换"><span></span></a><a href="#%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2">#</a> 线程状态转换</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ace830df-9919-48ca-91b5-60b193f593d2.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#新建-new"><span></span></a><a href="#%E6%96%B0%E5%BB%BA-new">#</a> 新建(New)</h3>
<p>创建后尚未启动。</p>
<h3><a class="header-anchor" href="#可运行-runnable"><span></span></a><a href="#%E5%8F%AF%E8%BF%90%E8%A1%8C-runnable">#</a> 可运行(Runnable)</h3>
<p>可能正在运行，也可能正在等待 CPU 时间片。</p>
<p>包含了操作系统线程状态中的 Running 和 Ready。</p>
<h3><a class="header-anchor" href="#阻塞-blocking"><span></span></a><a href="#%E9%98%BB%E5%A1%9E-blocking">#</a> 阻塞(Blocking)</h3>
<p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p>
<h3><a class="header-anchor" href="#无限期等待-waiting"><span></span></a><a href="#%E6%97%A0%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85-waiting">#</a> 无限期等待(Waiting)</h3>
<p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。</p>
<p>| 进入方法                                   | 退出方法                             |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ace830df-9919-48ca-91b5-60b193f593d2.png" type="image/png"/>
    </item>
    <item>
      <title>Java 并发知识体系</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 并发知识体系</source>
      <description>Java 并发相关知识体系详解，包含理论基础，线程基础，synchronized，volatile，final关键字, JUC框架等内容。 Java 并发知识体系 知识体系 相关文章 参考文档 # 知识体系 imgimg # 相关文章 A. Java进阶 - Java 并发之基础：首先全局的了解并发的知识体系，同时了解并发理论基础和线程基础，并发关键字...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java 并发相关知识体系详解，包含理论基础，线程基础，synchronized，volatile，final关键字, JUC框架等内容。</p>
</blockquote>
<ul>
<li>Java 并发知识体系
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">相关文章</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-concurrent-overview-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#相关文章"><span></span></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">#</a> 相关文章</h2>
<blockquote>
<p><strong>A. Java进阶 - Java 并发之基础</strong>：首先全局的了解并发的知识体系，同时了解并发理论基础和线程基础，并发关键字等，这些是你理解Java并发框架的基础。</p>
</blockquote>
<ul>
<li>Java 并发 - 理论基础
<ul>
<li>多线程的出现是要解决什么问题的?</li>
<li>线程不安全是指什么? 举例说明</li>
<li>并发出现线程不安全的本质什么? 可见性，原子性和有序性。</li>
<li>Java是怎么解决并发问题的? 3个关键字，JMM和8个Happens-Before</li>
<li>线程安全是不是非真即假? 不是</li>
<li>线程安全有哪些实现思路?</li>
<li>如何理解并发和并行的区别?</li>
</ul>
</li>
<li>Java 并发 - 线程基础
<ul>
<li>线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?</li>
<li>通常线程有哪几种使用方式?</li>
<li>基础线程机制有哪些?</li>
<li>线程的中断方式有哪些?</li>
<li>线程的互斥同步方式有哪些? 如何比较和选择?</li>
<li>线程之间有哪些协作方式?</li>
</ul>
</li>
<li>Java并发 - Java中所有的锁
<ul>
<li>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</li>
</ul>
</li>
<li>关键字: synchronized详解
<ul>
<li>Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例。</li>
<li>Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理。</li>
<li>Synchronized由什么样的缺陷? Java Lock是怎么弥补这些缺陷的。</li>
<li>Synchronized和Lock的对比，和选择?</li>
<li>Synchronized在使用时有何注意事项?</li>
<li>Synchronized修饰的方法在抛出异常时,会释放锁吗?</li>
<li>多个线程等待同一个Synchronized锁的时候，JVM如何选择下一个获取锁的线程?</li>
<li>Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法?</li>
<li>我想更加灵活地控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办?</li>
<li>什么是锁的升级和降级? 什么是JVM里的偏斜锁、轻量级锁、重量级锁?</li>
<li>不同的JDK中对Synchronized有何优化?</li>
</ul>
</li>
<li>关键字: volatile详解
<ul>
<li>volatile关键字的作用是什么?</li>
<li>volatile能保证原子性吗?</li>
<li>之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?</li>
<li>i++为什么不能保证原子性?</li>
<li>volatile是如何实现可见性的? 内存屏障。</li>
<li>volatile是如何实现有序性的? happens-before等</li>
<li>说下volatile的应用场景?</li>
</ul>
</li>
<li>关键字: final详解
<ul>
<li>所有的final修饰的字段都是编译期常量吗?</li>
<li>如何理解private所修饰的方法是隐式的final?</li>
<li>说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做?</li>
<li>final方法可以被重载吗? 可以</li>
<li>父类的final方法能不能够被子类重写? 不可以</li>
<li>说说final域重排序规则?</li>
<li>说说final的原理?</li>
<li>使用 final 的限制条件和局限性?</li>
<li>看本文最后的一个思考题</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B. Java进阶 - Java 并发之J.U.C框架</strong>：然后需要对J.U.C框架五大类详细解读，包括：Lock框架，并发集合, 原子类, 线程池和工具类。</p>
</blockquote>
<ul>
<li>JUC - 类汇总和学习指南
<ul>
<li>JUC框架包含几个部分?</li>
<li>每个部分有哪些核心的类?</li>
<li>最最核心的类有哪些?</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B.1 Java进阶 - Java 并发之J.U.C框架【1/5】：CAS及原子类</strong>：从最核心的CAS, Unsafe和原子类开始分析。</p>
</blockquote>
<ul>
<li>JUC原子类: CAS, Unsafe和原子类详解
<ul>
<li>线程安全的实现方法有哪些?</li>
<li>什么是CAS?</li>
<li>CAS使用示例，结合AtomicInteger给出示例?</li>
<li>CAS会有哪些问题?</li>
<li>针对这这些问题，Java提供了哪几个解决的?</li>
<li>AtomicInteger底层实现? CAS+volatile</li>
<li>请阐述你对Unsafe类的理解?</li>
<li>说说你对Java原子类的理解? 包含13个，4组分类，说说作用和使用场景。</li>
<li>AtomicStampedReference是什么?</li>
<li>AtomicStampedReference是怎么解决ABA的? 内部使用Pair来存储元素值及其版本号</li>
<li>java中还有哪些类可以解决ABA的问题? AtomicMarkableReference</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B.2 Java进阶 - Java 并发之J.U.C框架【2/5】：锁</strong>：然后分析JUC中锁。</p>
</blockquote>
<ul>
<li>JUC锁: LockSupport详解
<ul>
<li>为什么LockSupport也是核心基础类? AQS框架借助于两个类：Unsafe(提供CAS操作)和LockSupport(提供park/unpark操作)</li>
<li>写出分别通过wait/notify和LockSupport的park/unpark实现同步?</li>
<li>LockSupport.park()会释放锁资源吗? 那么Condition.await()呢?</li>
<li>Thread.sleep()、Object.wait()、Condition.await()、LockSupport.park()的区别? 重点</li>
<li>如果在wait()之前执行了notify()会怎样?</li>
<li>如果在park()之前执行了unpark()会怎样?</li>
</ul>
</li>
<li>JUC锁: 锁核心类AQS详解
<ul>
<li>什么是AQS? 为什么它是核心?</li>
<li>AQS的核心思想是什么? 它是怎么实现的? 底层数据结构等</li>
<li>AQS有哪些核心的方法?</li>
<li>AQS定义什么样的资源获取方式? AQS定义了两种资源获取方式：<code>独占</code>(只有一个线程能访问执行，又根据是否按队列的顺序分为<code>公平锁</code>和<code>非公平锁</code>，如<code>ReentrantLock</code>) 和<code>共享</code>(多个线程可同时访问执行，如<code>Semaphore</code>、<code>CountDownLatch</code>、 <code>CyclicBarrier</code> )。<code>ReentrantReadWriteLock</code>可以看成是组合式，允许多个线程同时对某一资源进行读。</li>
<li>AQS底层使用了什么样的设计模式? 模板</li>
<li>AQS的应用示例?</li>
</ul>
</li>
<li>JUC锁: ReentrantLock详解
<ul>
<li>什么是可重入，什么是可重入锁? 它用来解决什么问题?</li>
<li>ReentrantLock的核心是AQS，那么它怎么来实现的，继承吗? 说说其类内部结构关系。</li>
<li>ReentrantLock是如何实现公平锁的?</li>
<li>ReentrantLock是如何实现非公平锁的?</li>
<li>ReentrantLock默认实现的是公平还是非公平锁?</li>
<li>使用ReentrantLock实现公平和非公平锁的示例?</li>
<li>ReentrantLock和Synchronized的对比?</li>
</ul>
</li>
<li>JUC锁: ReentrantReadWriteLock详解
<ul>
<li>为了有了ReentrantLock还需要ReentrantReadWriteLock?</li>
<li>ReentrantReadWriteLock底层实现原理?</li>
<li>ReentrantReadWriteLock底层读写状态如何设计的? 高16位为读锁，低16位为写锁</li>
<li>读锁和写锁的最大数量是多少?</li>
<li>本地线程计数器ThreadLocalHoldCounter是用来做什么的?</li>
<li>缓存计数器HoldCounter是用来做什么的?</li>
<li>写锁的获取与释放是怎么实现的?</li>
<li>读锁的获取与释放是怎么实现的?</li>
<li>RentrantReadWriteLock为什么不支持锁升级?</li>
<li>什么是锁的升降级? RentrantReadWriteLock为什么不支持锁升级?</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B.3 Java进阶 - Java 并发之J.U.C框架【3/5】：集合</strong>：再理解JUC中重要的支持并发的集合。</p>
</blockquote>
<ul>
<li>JUC集合: ConcurrentHashMap详解
<ul>
<li>为什么HashTable慢? 它的并发度是什么? 那么ConcurrentHashMap并发度是什么?</li>
<li>ConcurrentHashMap在JDK1.7和JDK1.8中实现有什么差别? JDK1.8解決了JDK1.7中什么问题</li>
<li>ConcurrentHashMap JDK1.7实现的原理是什么? 分段锁机制</li>
<li>ConcurrentHashMap JDK1.8实现的原理是什么? 数组+链表+红黑树，CAS</li>
<li>ConcurrentHashMap JDK1.7中Segment数(concurrencyLevel)默认值是多少? 为何一旦初始化就不可再扩容?</li>
<li>ConcurrentHashMap JDK1.7说说其put的机制?</li>
<li>ConcurrentHashMap JDK1.7是如何扩容的? rehash(注：segment 数组不能扩容，扩容是 segment 数组某个位置内部的数组 HashEntry&lt;K,V&gt;[] 进行扩容)</li>
<li>ConcurrentHashMap JDK1.8是如何扩容的? tryPresize</li>
<li>ConcurrentHashMap JDK1.8链表转红黑树的时机是什么? 临界值为什么是8?</li>
<li>ConcurrentHashMap JDK1.8是如何进行数据迁移的? transfer</li>
</ul>
</li>
<li>JUC集合: CopyOnWriteArrayList详解
<ul>
<li>请先说说非并发集合中Fail-fast机制?</li>
<li>再为什么说ArrayList查询快而增删慢?</li>
<li>对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝</li>
<li>再说下弱一致性的迭代器原理是怎么样的? <code>COWIterator&lt;E&gt;</code></li>
<li>CopyOnWriteArrayList为什么并发安全且性能比Vector好?</li>
<li>CopyOnWriteArrayList有何缺陷，说说其应用场景?</li>
</ul>
</li>
<li>JUC集合: ConcurrentLinkedQueue详解
<ul>
<li>要想用线程安全的队列有哪些选择? Vector，<code>Collections.synchronizedList( List&lt;T&gt; list)</code>, ConcurrentLinkedQueue等</li>
<li>ConcurrentLinkedQueue实现的数据结构?</li>
<li>ConcurrentLinkedQueue底层原理? 全程无锁(CAS)</li>
<li>ConcurrentLinkedQueue的核心方法有哪些? offer()，poll()，peek()，isEmpty()等队列常用方法</li>
<li>说说ConcurrentLinkedQueue的HOPS(延迟更新的策略)的设计?</li>
<li>ConcurrentLinkedQueue适合什么样的使用场景?</li>
</ul>
</li>
<li>JUC集合: BlockingQueue详解
<ul>
<li>什么是BlockingDeque?</li>
<li>BlockingQueue大家族有哪些? ArrayBlockingQueue, DelayQueue, LinkedBlockingQueue, SynchronousQueue...</li>
<li>BlockingQueue适合用在什么样的场景?</li>
<li>BlockingQueue常用的方法?</li>
<li>BlockingQueue插入方法有哪些? 这些方法(<code>add(o)</code>,<code>offer(o)</code>,<code>put(o)</code>,<code>offer(o, timeout, timeunit)</code>)的区别是什么?</li>
<li>BlockingDeque 与BlockingQueue有何关系，请对比下它们的方法?</li>
<li>BlockingDeque适合用在什么样的场景?</li>
<li>BlockingDeque大家族有哪些?</li>
<li>BlockingDeque 与BlockingQueue实现例子?</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B.4 Java进阶 - Java 并发之J.U.C框架【4/5】：线程池</strong>：再者分析JUC中非常常用的线程池等。</p>
</blockquote>
<ul>
<li>JUC线程池: FutureTask详解
<ul>
<li>FutureTask用来解决什么问题的? 为什么会出现?</li>
<li>FutureTask类结构关系怎么样的?</li>
<li>FutureTask的线程安全是由什么保证的?</li>
<li>FutureTask结果返回机制?</li>
<li>FutureTask内部运行状态的转变?</li>
<li>FutureTask通常会怎么用? 举例说明。</li>
</ul>
</li>
<li>JUC线程池: ThreadPoolExecutor详解
<ul>
<li>为什么要有线程池?</li>
<li>Java是实现和管理线程池有哪些方式? 请简单举例如何使用。</li>
<li>为什么很多公司不允许使用Executors去创建线程池? 那么推荐怎么使用呢?</li>
<li>ThreadPoolExecutor有哪些核心的配置参数? 请简要说明</li>
<li>ThreadPoolExecutor可以创建哪是哪三种线程池呢?</li>
<li>当队列满了并且worker的数量达到maxSize的时候，会怎么样?</li>
<li>说说ThreadPoolExecutor有哪些RejectedExecutionHandler策略? 默认是什么策略?</li>
<li>简要说下线程池的任务执行机制? execute –&gt; addWorker –&gt;runworker (getTask)</li>
<li>线程池中任务是如何提交的?</li>
<li>线程池中任务是如何关闭的?</li>
<li>在配置线程池的时候需要考虑哪些配置因素?</li>
<li>如何监控线程池的状态?</li>
</ul>
</li>
<li>JUC线程池: ScheduledThreadPool详解
<ul>
<li>ScheduledThreadPoolExecutor要解决什么样的问题?</li>
<li>ScheduledThreadPoolExecutor相比ThreadPoolExecutor有哪些特性?</li>
<li>ScheduledThreadPoolExecutor有什么样的数据结构，核心内部类和抽象类?</li>
<li>ScheduledThreadPoolExecutor有哪两个关闭策略? 区别是什么?</li>
<li>ScheduledThreadPoolExecutor中scheduleAtFixedRate 和 scheduleWithFixedDelay区别是什么?</li>
<li>为什么ThreadPoolExecutor 的调整策略却不适用于 ScheduledThreadPoolExecutor?</li>
<li>Executors 提供了几种方法来构造 ScheduledThreadPoolExecutor?</li>
</ul>
</li>
<li>JUC线程池: Fork/Join框架详解
<ul>
<li>Fork/Join主要用来解决什么样的问题?</li>
<li>Fork/Join框架是在哪个JDK版本中引入的?</li>
<li>Fork/Join框架主要包含哪三个模块? 模块之间的关系是怎么样的?</li>
<li>ForkJoinPool类继承关系?</li>
<li>ForkJoinTask抽象类继承关系? 在实际运用中，我们一般都会继承 RecursiveTask 、RecursiveAction 或 CountedCompleter 来实现我们的业务需求，而不会直接继承 ForkJoinTask 类。</li>
<li>整个Fork/Join 框架的执行流程/运行机制是怎么样的?</li>
<li>具体阐述Fork/Join的分治思想和work-stealing 实现方式?</li>
<li>有哪些JDK源码中使用了Fork/Join思想?</li>
<li>如何使用Executors工具类创建ForkJoinPool?</li>
<li>写一个例子: 用ForkJoin方式实现1+2+3+...+100000?</li>
<li>Fork/Join在使用时有哪些注意事项? 结合JDK中的斐波那契数列实例具体说明。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B.5 Java进阶 - Java 并发之J.U.C框架【5/5】：工具类</strong>：最后来看下JUC中有哪些工具类，以及线程隔离术ThreadLocal。</p>
</blockquote>
<ul>
<li>JUC工具类: CountDownLatch详解
<ul>
<li>什么是CountDownLatch?</li>
<li>CountDownLatch底层实现原理?</li>
<li>CountDownLatch一次可以唤醒几个任务? 多个</li>
<li>CountDownLatch有哪些主要方法? await(),countDown()</li>
<li>CountDownLatch适用于什么场景?</li>
<li>写道题：实现一个容器，提供两个方法，add，size 写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束? 使用CountDownLatch 代替wait notify 好处。</li>
</ul>
</li>
<li>JUC工具类: CyclicBarrier详解
<ul>
<li>什么是CyclicBarrier?</li>
<li>CyclicBarrier底层实现原理?</li>
<li>CountDownLatch和CyclicBarrier对比?</li>
<li>CyclicBarrier的核心函数有哪些?</li>
<li>CyclicBarrier适用于什么场景?</li>
</ul>
</li>
<li>JUC工具类: Semaphore详解
<ul>
<li>什么是Semaphore?</li>
<li>Semaphore内部原理?</li>
<li>Semaphore常用方法有哪些? 如何实现线程同步和互斥的?</li>
<li>Semaphore适合用在什么场景?</li>
<li>单独使用Semaphore是不会使用到AQS的条件队列?</li>
<li>Semaphore中申请令牌(acquire)、释放令牌(release)的实现?</li>
<li>Semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</li>
<li>Semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</li>
<li>Semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</li>
<li>Semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</li>
</ul>
</li>
<li>JUC工具类: Phaser详解
<ul>
<li>Phaser主要用来解决什么问题?</li>
<li>Phaser与CyclicBarrier和CountDownLatch的区别是什么?</li>
<li>如果用CountDownLatch来实现Phaser的功能应该怎么实现?</li>
<li>Phaser运行机制是什么样的?</li>
<li>给一个Phaser使用的示例?</li>
</ul>
</li>
<li>JUC工具类: Exchanger详解
<ul>
<li>Exchanger主要解决什么问题?</li>
<li>对比SynchronousQueue，为什么说Exchanger可被视为 SynchronousQueue 的双向形式?</li>
<li>Exchanger在不同的JDK版本中实现有什么差别?</li>
<li>Exchanger实现机制?</li>
<li>Exchanger已经有了slot单节点，为什么会加入arena node数组? 什么时候会用到数组?</li>
<li>arena可以确保不同的slot在arena中是不会相冲突的，那么是怎么保证的呢?</li>
<li>什么是伪共享，Exchanger中如何体现的?</li>
<li>Exchanger实现举例</li>
</ul>
</li>
<li>Java 并发 - ThreadLocal详解
<ul>
<li>什么是ThreadLocal? 用来解决什么问题的?</li>
<li>说说你对ThreadLocal的理解</li>
<li>ThreadLocal是如何实现线程隔离的?</li>
<li>为什么ThreadLocal会造成内存泄露? 如何解决</li>
<li>还有哪些使用ThreadLocal的应用场景?</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>C. Java进阶 - Java 并发之 本质与模式</strong>：最后站在更高的角度看其本质(协作，分工和互斥)，同时总结上述知识点所使用的模式。</p>
</blockquote>
<ul>
<li><a href="">Java 并发 - 并发的本质：协作,分工和互斥</a></li>
<li><a href="">Java 并发 - 并发的模式梳理</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-concurrent-overview-1.png" type="image/png"/>
    </item>
    <item>
      <title>关键字 final 解析</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20final%20%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20final%20%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">关键字 final 解析</source>
      <description>final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。 关键字 final 解析 带着BAT大厂的面试问题去理解final final基础使用 修饰类 修饰方法 private final final方法是可以被重载的 修饰参数 修饰变量 所有的final修饰的字...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。</p>
</blockquote>
<ul>
<li>关键字 final 解析
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3final">带着BAT大厂的面试问题去理解final</a></li>
<li>final基础使用
<ul>
<li><a href="#%E4%BF%AE%E9%A5%B0%E7%B1%BB">修饰类</a></li>
<li>修饰方法
<ul>
<li><a href="#private-final">private final</a></li>
<li><a href="#final%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E8%BD%BD%E7%9A%84">final方法是可以被重载的</a></li>
</ul>
</li>
<li><a href="#%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0">修饰参数</a></li>
<li>修饰变量
<ul>
<li><a href="#%E6%89%80%E6%9C%89%E7%9A%84final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%97%E6%AE%B5%E9%83%BD%E6%98%AF%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E5%90%97">所有的final修饰的字段都是编译期常量吗?</a></li>
<li><a href="#static-final">static final</a></li>
<li><a href="#blank-final">blank final</a></li>
</ul>
</li>
</ul>
</li>
<li>final域重排序规则
<ul>
<li>final域为基本类型
<ul>
<li><a href="#%E5%86%99final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">写final域重排序规则</a></li>
<li><a href="#%E8%AF%BBfinal%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">读final域重排序规则</a></li>
</ul>
</li>
<li>final域为引用类型
<ul>
<li><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E5%86%99%E6%93%8D%E4%BD%9C">对final修饰的对象的成员域写操作</a></li>
<li><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E8%AF%BB%E6%93%8D%E4%BD%9C">对final修饰的对象的成员域读操作</a></li>
</ul>
</li>
<li><a href="#%E5%85%B3%E4%BA%8Efinal%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%BB%E7%BB%93">关于final重排序的总结</a></li>
</ul>
</li>
<li>final再深入理解
<ul>
<li><a href="#final%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">final的实现原理</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88final%E5%BC%95%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BB%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E6%BA%A2%E5%87%BA">为什么final引用不能从构造函数中“溢出”</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-final-%E7%9A%84%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B1%80%E9%99%90%E6%80%A7">使用 final 的限制条件和局限性</a></li>
<li><a href="#%E5%86%8D%E6%80%9D%E8%80%83%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%8E%B0%E8%B1%A1">再思考一个有趣的现象：</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解final"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3final">#</a> 带着BAT大厂的面试问题去理解final</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解final。@pdai</p>
<ul>
<li>所有的final修饰的字段都是编译期常量吗?</li>
<li>如何理解private所修饰的方法是隐式的final?</li>
<li>说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做?</li>
<li>final方法可以被重载吗? 可以</li>
<li>父类的final方法能不能够被子类重写? 不可以</li>
<li>说说final域重排序规则?</li>
<li>说说final的原理?</li>
<li>使用 final 的限制条件和局限性?</li>
<li>看本文最后的一个思考题</li>
</ul>
<h2><a class="header-anchor" href="#final基础使用"><span></span></a><a href="#final%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">#</a> final基础使用</h2>
<h3><a class="header-anchor" href="#修饰类"><span></span></a><a href="#%E4%BF%AE%E9%A5%B0%E7%B1%BB">#</a> 修饰类</h3>
<p>当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。</p>
<p>注意：final类中的所有方法都隐式为final，因为无法覆盖他们，所以在final类中给任何方法添加final关键字是没有任何意义的。</p>
<blockquote>
<p>这里顺道说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做? @pdai</p>
</blockquote>
<p>设计模式中最重要的两种关系，一种是继承/实现；另外一种是组合关系。所以当遇到不能用继承的(final修饰的类),应该考虑用组合, 如下代码大概写个组合实现的意思：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">* @pdai</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">*/</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> MyString</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> innerString</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...init &amp; other methods</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 支持老的方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> length</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> innerString</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// 通过innerString调用老的方法</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 添加新方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toMyString</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //...</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#修饰方法"><span></span></a><a href="#%E4%BF%AE%E9%A5%B0%E6%96%B9%E6%B3%95">#</a> 修饰方法</h3>
<blockquote>
<p>常规的使用就不说了，这里说下:</p>
</blockquote>
<ul>
<li>private 方法是隐式的final</li>
<li>final方法是可以被重载的</li>
</ul>
<h4><a class="header-anchor" href="#private-final"><span></span></a><a href="#private-final">#</a> private final</h4>
<p>类中所有private方法都隐式地指定为final的，由于无法取用private方法，所以也就不能覆盖它。可以对private方法增添final关键字，但这样做并没有什么好处。看下下面的例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Base</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Son</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Base</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Son</span><span style="color:#E06C75"> son</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Son</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        Base</span><span style="color:#E06C75"> father</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> son;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //father.test();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Base和Son都有方法test(),但是这并不是一种覆盖，因为private所修饰的方法是隐式的final，也就是无法被继承，所以更不用说是覆盖了，在Son中的test()方法不过是属于Son的新成员罢了，Son进行向上转型得到father，但是father.test()是不可执行的，因为Base中的test方法是private的，无法被访问到。</p>
<h4><a class="header-anchor" href="#final方法是可以被重载的"><span></span></a><a href="#final%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E8%BD%BD%E7%9A%84">#</a> final方法是可以被重载的</h4>
<p>我们知道父类的final方法是不能够被子类重写的，那么final方法可以被重载吗? 答案是可以的，下面代码是正确的。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FinalExampleParent</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> str</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#修饰参数"><span></span></a><a href="#%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0">#</a> 修饰参数</h3>
<p>Java允许在参数列表中以声明的方式将参数指明为final，这意味这你无法在方法中更改参数引用所指向的对象。这个特性主要用来向匿名内部类传递数据。</p>
<h3><a class="header-anchor" href="#修饰变量"><span></span></a><a href="#%E4%BF%AE%E9%A5%B0%E5%8F%98%E9%87%8F">#</a> 修饰变量</h3>
<blockquote>
<p>常规的用法比较简单，这里通过下面三个问题进一步说明。</p>
</blockquote>
<h4><a class="header-anchor" href="#所有的final修饰的字段都是编译期常量吗"><span></span></a><a href="#%E6%89%80%E6%9C%89%E7%9A%84final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%97%E6%AE%B5%E9%83%BD%E6%98%AF%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E5%90%97">#</a> 所有的final修饰的字段都是编译期常量吗?</h4>
<p>现在来看编译期常量和非编译期常量, 如：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //编译期常量</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> J </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> {</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">4</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //非编译期常量</span></span>
<span class="line"><span style="color:#E5C07B">    Random</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> r</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nextInt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>k的值由随机数对象决定，所以不是所有的final修饰的字段都是编译期常量，只是k的值在被初始化后无法被更改。</p>
<h4><a class="header-anchor" href="#static-final"><span></span></a><a href="#static-final">#</a> static final</h4>
<p>一个既是static又是final 的字段只占据一段不能改变的存储空间，它必须在定义的时候进行赋值，否则编译器将不予通过。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.Random</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> Random</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> r</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nextInt</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> k2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> r</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nextInt</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Test</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Test</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"k="</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">t1</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">k</span><span style="color:#56B6C2">+</span><span style="color:#98C379">" k2="</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">t1</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">k2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Test</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Test</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"k="</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">t2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">k</span><span style="color:#56B6C2">+</span><span style="color:#98C379">" k2="</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">t2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">k2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码某次输出结果：</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">k=2 k2=7</span></span>
<span class="line"><span style="color:#ABB2BF">k=8 k2=7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以发现对于不同的对象k的值是不同的，但是k2的值却是相同的，这是为什么呢? 因为static关键字所修饰的字段并不属于一个对象，而是属于这个类的。也可简单的理解为static final所修饰的字段仅占据内存的一个一份空间，一旦被初始化之后便不会被更改。</p>
<h4><a class="header-anchor" href="#blank-final"><span></span></a><a href="#blank-final">#</a> blank final</h4>
<p>Java允许生成空白final，也就是说被声明为final但又没有给出定值的字段,但是必须在该字段被使用之前被赋值，这给予我们两种选择：</p>
<ul>
<li>在定义处进行赋值(这不叫空白final)</li>
<li>在构造器中进行赋值，保证了该值在被使用前赋值。</li>
</ul>
<p>这增强了final的灵活性。</p>
<p>看下面代码:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> i1 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> i2</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//空白final</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> Test</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        i2 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> Test</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">i2</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到i2的赋值更为灵活。但是请注意，如果字段由static和final修饰，仅能在声明时赋值或声明后在静态代码块中赋值，因为该字段不属于对象，属于这个类。</p>
<h2><a class="header-anchor" href="#final域重排序规则"><span></span></a><a href="#final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">#</a> final域重排序规则</h2>
<p>上面我们聊的final使用，应该属于Java基础层面的，当理解这些后我们就真的算是掌握了final吗? 有考虑过final在多线程并发的情况吗? 在java内存模型中我们知道java内存模型为了能让处理器和编译器底层发挥他们的最大优势，对底层的约束就很少，也就是说针对底层来说java内存模型就是一弱内存数据模型。同时，处理器和编译为了性能优化会对指令序列有编译器和处理器重排序。那么，在多线程情况下,final会进行怎样的重排序? 会导致线程安全的问题吗? 下面，就来看看final的重排序。</p>
<h3><a class="header-anchor" href="#final域为基本类型"><span></span></a><a href="#final%E5%9F%9F%E4%B8%BA%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">#</a> final域为基本类型</h3>
<p>先看一段示例性的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FinalDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //普通域</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //final域</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> FinalDemo</span><span style="color:#E06C75"> finalDemo</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FinalDemo</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 1. 写普通域</span></span>
<span class="line"><span style="color:#ABB2BF">        b </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 2. 写final域</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        finalDemo </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FinalDemo</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reader</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        FinalDemo</span><span style="color:#E06C75"> demo</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> finalDemo; </span><span style="color:#7F848E;font-style:italic">// 3.读对象引用</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> demo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">;    </span><span style="color:#7F848E;font-style:italic">//4.读普通域</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> demo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">;    </span><span style="color:#7F848E;font-style:italic">//5.读final域</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设线程A在执行writer()方法，线程B执行reader()方法。</p>
<h4><a class="header-anchor" href="#写final域重排序规则"><span></span></a><a href="#%E5%86%99final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">#</a> 写final域重排序规则</h4>
<p>写final域的重排序规则禁止对final域的写重排序到构造函数之外，这个规则的实现主要包含了两个方面：</p>
<ul>
<li>JMM禁止编译器把final域的写重排序到构造函数之外；</li>
<li>编译器会在final域写之后，构造函数return之前，插入一个storestore屏障。这个屏障可以禁止处理器把final域的写重排序到构造函数之外。</li>
</ul>
<p>我们再来分析writer方法，虽然只有一行代码，但实际上做了两件事情：</p>
<ul>
<li>构造了一个FinalDemo对象；</li>
<li>把这个对象赋值给成员变量finalDemo。</li>
</ul>
<p>我们来画下存在的一种可能执行时序图，如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>由于a,b之间没有数据依赖性，普通域(普通变量)a可能会被重排序到构造函数之外，线程B就有可能读到的是普通变量a初始化之前的值(零值)，这样就可能出现错误。而final域变量b，根据重排序规则，会禁止final修饰的变量b重排序到构造函数之外，从而b能够正确赋值，线程B就能够读到final变量初始化后的值。</p>
<p>因此，写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域就不具有这个保障。比如在上例，线程B有可能就是一个未正确初始化的对象finalDemo。</p>
<h4><a class="header-anchor" href="#读final域重排序规则"><span></span></a><a href="#%E8%AF%BBfinal%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">#</a> 读final域重排序规则</h4>
<p>读final域重排序规则为：在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM会禁止这两个操作的重排序。(注意，这个规则仅仅是针对处理器)，处理器会在读final域操作的前面插入一个LoadLoad屏障。实际上，读对象的引用和读该对象的final域存在间接依赖性，一般处理器不会重排序这两个操作。但是有一些处理器会重排序，因此，这条禁止重排序规则就是针对这些处理器而设定的。</p>
<p>read()方法主要包含了三个操作：</p>
<ul>
<li>初次读引用变量finalDemo;</li>
<li>初次读引用变量finalDemo的普通域a;</li>
<li>初次读引用变量finalDemo的final域b;</li>
</ul>
<p>假设线程A写过程没有重排序，那么线程A和线程B有一种的可能执行时序为下图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>读对象的普通域被重排序到了读对象引用的前面就会出现线程B还未读到对象引用就在读取该对象的普通域变量，这显然是错误的操作。而final域的读操作就“限定”了在读final域变量前已经读到了该对象的引用，从而就可以避免这种情况。</p>
<p>读final域的重排序规则可以确保：在读一个对象的final域之前，一定会先读这个包含这个final域的对象的引用。</p>
<h3><a class="header-anchor" href="#final域为引用类型"><span></span></a><a href="#final%E5%9F%9F%E4%B8%BA%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">#</a> final域为引用类型</h3>
<p>我们已经知道了final域是基本数据类型的时候重排序规则是怎么的了? 如果是引用数据类型了? 我们接着继续来探讨。</p>
<h4><a class="header-anchor" href="#对final修饰的对象的成员域写操作"><span></span></a><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E5%86%99%E6%93%8D%E4%BD%9C">#</a> 对final修饰的对象的成员域写操作</h4>
<p>针对引用数据类型，final域写针对编译器和处理器重排序增加了这样的约束：在构造函数内对一个final修饰的对象的成员域的写入，与随后在构造函数之外把这个被构造的对象的引用赋给一个引用变量，这两个操作是不能被重排序的。注意这里的是“增加”也就说前面对final基本数据类型的重排序规则在这里还是使用。这句话是比较拗口的，下面结合实例来看。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FinalReferenceDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75">[] arrays</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> FinalReferenceDemo</span><span style="color:#E06C75"> finalReferenceDemo</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FinalReferenceDemo</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        arrays </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> int</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">];  </span><span style="color:#7F848E;font-style:italic">//1</span></span>
<span class="line"><span style="color:#ABB2BF">        arrays[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;        </span><span style="color:#7F848E;font-style:italic">//2</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writerOne</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        finalReferenceDemo </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FinalReferenceDemo</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//3</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writerTwo</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        arrays[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;  </span><span style="color:#7F848E;font-style:italic">//4</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reader</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (finalReferenceDemo </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {  </span><span style="color:#7F848E;font-style:italic">//5</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> temp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> finalReferenceDemo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">arrays</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];  </span><span style="color:#7F848E;font-style:italic">//6</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面的实例程序，线程线程A执行wirterOne方法，执行完后线程B执行writerTwo方法，然后线程C执行reader方法。下图就以这种执行时序出现的一种情况来讨论(耐心看完才有收获)。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>由于对final域的写禁止重排序到构造方法外，因此1和3不能被重排序。由于一个final域的引用对象的成员域写入不能与随后将这个被构造出来的对象赋给引用变量重排序，因此2和3不能重排序。</p>
<h4><a class="header-anchor" href="#对final修饰的对象的成员域读操作"><span></span></a><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E8%AF%BB%E6%93%8D%E4%BD%9C">#</a> 对final修饰的对象的成员域读操作</h4>
<p>JMM可以确保线程C至少能看到写线程A对final引用的对象的成员域的写入，即能看下arrays[0] = 1，而写线程B对数组元素的写入可能看到可能看不到。JMM不保证线程B的写入对线程C可见，线程B和线程C之间存在数据竞争，此时的结果是不可预知的。如果可见的，可使用锁或者volatile。</p>
<h3><a class="header-anchor" href="#关于final重排序的总结"><span></span></a><a href="#%E5%85%B3%E4%BA%8Efinal%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%BB%E7%BB%93">#</a> 关于final重排序的总结</h3>
<p>按照final修饰的数据类型分类：</p>
<ul>
<li>基本数据类型:
<ul>
<li><code>final域写</code>：禁止final域写与构造方法重排序，即禁止final域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的final域全部已经初始化过。</li>
<li><code>final域读</code>：禁止初次读对象的引用与读该对象包含的final域的重排序。</li>
</ul>
</li>
<li>引用数据类型：
<ul>
<li><code>额外增加约束</code>：禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#final再深入理解"><span></span></a><a href="#final%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> final再深入理解</h2>
<h3><a class="header-anchor" href="#final的实现原理"><span></span></a><a href="#final%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> final的实现原理</h3>
<p>上面我们提到过，写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。</p>
<p>很有意思的是，如果以X86处理为例，X86不会对写-写重排序，所以StoreStore屏障可以省略。由于不会对有间接依赖性的操作重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，以X86为例的话，对final域的读/写的内存屏障都会被省略！具体是否插入还是得看是什么处理器</p>
<h3><a class="header-anchor" href="#为什么final引用不能从构造函数中-溢出"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88final%E5%BC%95%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BB%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD-%E6%BA%A2%E5%87%BA">#</a> 为什么final引用不能从构造函数中“溢出”</h3>
<p>这里还有一个比较有意思的问题：上面对final域写重排序规则可以确保我们在使用一个对象引用的时候该对象的final域已经在构造函数被初始化过了。但是这里其实是有一个前提条件的，也就是：在构造函数，不能让这个被构造的对象被其他线程可见，也就是说该对象引用不能在构造函数中“溢出”。以下面的例子来说：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FinalReferenceEscapeDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> FinalReferenceEscapeDemo</span><span style="color:#E06C75"> referenceDemo</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FinalReferenceEscapeDemo</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;  </span><span style="color:#7F848E;font-style:italic">//1</span></span>
<span class="line"><span style="color:#ABB2BF">        referenceDemo </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">//2</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> FinalReferenceEscapeDemo</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reader</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (referenceDemo </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {  </span><span style="color:#7F848E;font-style:italic">//3</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> temp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> referenceDemo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">//4</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能的执行时序如图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>假设一个线程A执行writer方法另一个线程执行reader方法。因为构造函数中操作1和2之间没有数据依赖性，1和2可以重排序，先执行了2，这个时候引用对象referenceDemo是个没有完全初始化的对象，而当线程B去读取该对象时就会出错。尽管依然满足了final域写重排序规则：在引用对象对所有线程可见时，其final域已经完全初始化成功。但是，引用对象“this”逸出，该代码依然存在线程安全的问题。</p>
<h3><a class="header-anchor" href="#使用-final-的限制条件和局限性"><span></span></a><a href="#%E4%BD%BF%E7%94%A8-final-%E7%9A%84%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B1%80%E9%99%90%E6%80%A7">#</a> 使用 final 的限制条件和局限性</h3>
<p>当声明一个 final 成员时，必须在构造函数退出前设置它的值。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyClass</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> myField </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> MyClass</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    ...</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyClass</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> myField</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> MyClass</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    ...</span></span>
<span class="line"><span style="color:#ABB2BF">    myField </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    ...</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将指向对象的成员声明为 final 只能将该引用设为不可变的，而非所指的对象。</p>
<p>下面的方法仍然可以修改该 list。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> List</span><span style="color:#E06C75"> myList </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">myList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Hello"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>声明为 final 可以保证如下操作不合法</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">myList </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">myList </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> someOtherList</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个对象将会在多个线程中访问并且你并没有将其成员声明为 final，则必须提供其他方式保证线程安全。</p>
<p>" 其他方式 " 可以包括声明成员为 volatile，使用 synchronized 或者显式 Lock 控制所有该成员的访问。</p>
<h3><a class="header-anchor" href="#再思考一个有趣的现象"><span></span></a><a href="#%E5%86%8D%E6%80%9D%E8%80%83%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%8E%B0%E8%B1%A1">#</a> 再思考一个有趣的现象：</h3>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b1</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b2</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b3</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">b1</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">b2</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//当程序执行到这一行的时候会出错，因为b1、b2可以自动转换成int类型的变量，运算时java虚拟机对它进行了转换，结果导致把一个int赋值给byte</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-1.png" type="image/png"/>
    </item>
    <item>
      <title>关键字 synchronized 解析</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20synchronized%20%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20synchronized%20%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">关键字 synchronized 解析</source>
      <description>在C程序代码中我们可以利用操作系统提供的互斥锁来实现同步块的互斥访问及线程的阻塞及唤醒等工作。在Java中除了提供Lock API外还在语法层面上提供了synchronized关键字来实现互斥同步原语, 本文将对synchronized关键字详细分析。 关键字 synchronized 解析 带着BAT大厂的面试问题去理解Synchronized Sy...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>在C程序代码中我们可以利用操作系统提供的互斥锁来实现同步块的互斥访问及线程的阻塞及唤醒等工作。在Java中除了提供Lock API外还在语法层面上提供了synchronized关键字来实现互斥同步原语, 本文将对synchronized关键字详细分析。</p>
</blockquote>
<ul>
<li>关键字 synchronized 解析
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3synchronized">带着BAT大厂的面试问题去理解Synchronized</a></li>
<li>Synchronized的使用
<ul>
<li>对象锁
<ul>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97%E5%BD%A2%E5%BC%8F%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E9%94%81%E5%AE%9A%E5%AF%B9%E8%B1%A1%E4%B9%9F%E5%8F%AF%E6%98%AF%E6%98%AFthis%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%94%81">代码块形式：手动指定锁定对象，也可是是this,也可以是自定义的锁</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E9%94%81%E5%BD%A2%E5%BC%8Fsynchronized%E4%BF%AE%E9%A5%B0%E6%99%AE%E9%80%9A%E6%96%B9%E6%B3%95%E9%94%81%E5%AF%B9%E8%B1%A1%E9%BB%98%E8%AE%A4%E4%B8%BAthis">方法锁形式：synchronized修饰普通方法，锁对象默认为this</a></li>
</ul>
</li>
<li>类锁
<ul>
<li><a href="#synchronize%E4%BF%AE%E9%A5%B0%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">synchronize修饰静态方法</a></li>
<li><a href="#synchronized%E6%8C%87%E5%AE%9A%E9%94%81%E5%AF%B9%E8%B1%A1%E4%B8%BAclass%E5%AF%B9%E8%B1%A1">synchronized指定锁对象为Class对象</a></li>
</ul>
</li>
</ul>
</li>
<li>Synchronized原理分析
<ul>
<li><a href="#%E5%8A%A0%E9%94%81%E5%92%8C%E9%87%8A%E6%94%BE%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86">加锁和释放锁的原理</a></li>
<li><a href="#%E5%8F%AF%E9%87%8D%E5%85%A5%E5%8E%9F%E7%90%86%E5%8A%A0%E9%94%81%E6%AC%A1%E6%95%B0%E8%AE%A1%E6%95%B0%E5%99%A8">可重入原理：加锁次数计数器</a></li>
<li><a href="#%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7%E7%9A%84%E5%8E%9F%E7%90%86%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8Chappens-before%E8%A7%84%E5%88%99">保证可见性的原理：内存模型和happens-before规则</a></li>
</ul>
</li>
<li>JVM中锁的优化
<ul>
<li><a href="#%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B">锁的类型</a></li>
<li>自旋锁与自适应自旋锁
<ul>
<li><a href="#%E8%87%AA%E6%97%8B%E9%94%81">自旋锁</a></li>
<li><a href="#%E8%87%AA%E9%80%82%E5%BA%94%E8%87%AA%E6%97%8B%E9%94%81">自适应自旋锁</a></li>
</ul>
</li>
<li><a href="#%E9%94%81%E6%B6%88%E9%99%A4">锁消除</a></li>
<li><a href="#%E9%94%81%E7%B2%97%E5%8C%96">锁粗化</a></li>
<li>轻量级锁
<ul>
<li><a href="#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E5%8A%A0%E9%94%81">轻量级锁加锁</a></li>
</ul>
</li>
<li>偏向锁
<ul>
<li><a href="#%E5%81%8F%E5%90%91%E9%94%81%E7%9A%84%E6%92%A4%E9%94%80">偏向锁的撤销</a></li>
</ul>
</li>
<li><a href="#%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94">锁的优缺点对比</a></li>
</ul>
</li>
<li>Synchronized与Lock
<ul>
<li><a href="#synchronized%E7%9A%84%E7%BC%BA%E9%99%B7">synchronized的缺陷</a></li>
<li><a href="#lock%E8%A7%A3%E5%86%B3%E7%9B%B8%E5%BA%94%E9%97%AE%E9%A2%98">Lock解决相应问题</a></li>
</ul>
</li>
<li><a href="#%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">再深入理解</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解synchronized"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3synchronized">#</a> 带着BAT大厂的面试问题去理解Synchronized</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解synchronized。@pdai</p>
<ul>
<li>Synchronized可以作用在哪里? 分别通过对象锁和类锁进行举例。</li>
<li>Synchronized本质上是通过什么保证线程安全的? 分三个方面回答：加锁和释放锁的原理，可重入原理，保证可见性原理。</li>
<li>Synchronized由什么样的缺陷? Java Lock是怎么弥补这些缺陷的。</li>
<li>Synchronized和Lock的对比，和选择?</li>
<li>Synchronized在使用时有何注意事项?</li>
<li>Synchronized修饰的方法在抛出异常时,会释放锁吗?</li>
<li>多个线程等待同一个Synchronized锁的时候，JVM如何选择下一个获取锁的线程?</li>
<li>Synchronized使得同时只有一个线程可以执行，性能比较差，有什么提升的方法?</li>
<li>我想更加灵活的控制锁的释放和获取(现在释放锁和获取锁的时机都被规定死了)，怎么办?</li>
<li>什么是锁的升级和降级? 什么是JVM里的偏斜锁、轻量级锁、重量级锁?</li>
<li>不同的JDK中对Synchronized有何优化?</li>
</ul>
<h2><a class="header-anchor" href="#synchronized的使用"><span></span></a><a href="#synchronized%E7%9A%84%E4%BD%BF%E7%94%A8">#</a> Synchronized的使用</h2>
<p>在应用Sychronized关键字时需要把握如下注意点：</p>
<ul>
<li>一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；</li>
<li>每个实例都对应有自己的一把锁(this),不同实例之间互不影响；例外：锁对象是*.class以及synchronized修饰的是static方法的时候，所有对象公用同一把锁</li>
<li>synchronized修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁</li>
</ul>
<h3><a class="header-anchor" href="#对象锁"><span></span></a><a href="#%E5%AF%B9%E8%B1%A1%E9%94%81">#</a> 对象锁</h3>
<p>包括方法锁(默认锁对象为this,当前实例对象)和同步代码块锁(自己指定锁对象)</p>
<h4><a class="header-anchor" href="#代码块形式-手动指定锁定对象-也可是是this-也可以是自定义的锁"><span></span></a><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97%E5%BD%A2%E5%BC%8F-%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E9%94%81%E5%AE%9A%E5%AF%B9%E8%B1%A1-%E4%B9%9F%E5%8F%AF%E6%98%AF%E6%98%AFthis-%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%94%81">#</a> 代码块形式：手动指定锁定对象，也可是是this,也可以是自定义的锁</h4>
<ul>
<li>示例1</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 同步代码块形式——锁为this,两个线程使用的锁是一样的,线程1必须要等到线程0释放了该锁后，才能执行</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">我是线程Thread</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">0</span></span>
<span class="line"><span style="color:#E06C75">Thread</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">0结束</span></span>
<span class="line"><span style="color:#E06C75">我是线程Thread</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span></span>
<span class="line"><span style="color:#E06C75">Thread</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">1结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>示例2</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 创建2把锁</span></span>
<span class="line"><span style="color:#E5C07B">    Object</span><span style="color:#E06C75"> block1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Object</span><span style="color:#E06C75"> block2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这个代码块使用的是第一把锁，当他释放后，后面的代码块由于使用的是第二把锁，因此可以马上执行</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (block1) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"block1锁,我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"block1锁,"</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (block2) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"block2锁,我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"block2锁,"</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">block1锁,我是线程Thread-0</span></span>
<span class="line"><span style="color:#ABB2BF">block1锁,Thread-0结束</span></span>
<span class="line"><span style="color:#ABB2BF">block2锁,我是线程Thread-0　　// 可以看到当第一个线程在执行完第一段同步代码块之后，第二个同步代码块可以马上得到执行，因为他们使用的锁不是同一把</span></span>
<span class="line"><span style="color:#ABB2BF">block1锁,我是线程Thread-1</span></span>
<span class="line"><span style="color:#ABB2BF">block2锁,Thread-0结束</span></span>
<span class="line"><span style="color:#ABB2BF">block1锁,Thread-1结束</span></span>
<span class="line"><span style="color:#ABB2BF">block2锁,我是线程Thread-1</span></span>
<span class="line"><span style="color:#ABB2BF">block2锁,Thread-1结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#方法锁形式-synchronized修饰普通方法-锁对象默认为this"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E9%94%81%E5%BD%A2%E5%BC%8F-synchronized%E4%BF%AE%E9%A5%B0%E6%99%AE%E9%80%9A%E6%96%B9%E6%B3%95-%E9%94%81%E5%AF%B9%E8%B1%A1%E9%BB%98%E8%AE%A4%E4%B8%BAthis">#</a> 方法锁形式：synchronized修饰普通方法，锁对象默认为this</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        method</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">我是线程Thread-0</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-0结束</span></span>
<span class="line"><span style="color:#ABB2BF">我是线程Thread-1</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-1结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#类锁"><span></span></a><a href="#%E7%B1%BB%E9%94%81">#</a> 类锁</h3>
<p>指synchronize修饰静态的方法或指定锁对象为Class对象</p>
<h4><a class="header-anchor" href="#synchronize修饰静态方法"><span></span></a><a href="#synchronize%E4%BF%AE%E9%A5%B0%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">#</a> synchronize修饰静态方法</h4>
<ul>
<li>示例1</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        method</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // synchronized用在普通方法上，默认的锁就是this，当前实例</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // t1和t2对应的this是两个不同的实例，所以代码不会串行</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance1);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance2);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">我是线程Thread-0</span></span>
<span class="line"><span style="color:#ABB2BF">我是线程Thread-1</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-1结束</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-0结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>示例2</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        method</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // synchronized用在静态方法上，默认的锁就是当前所在的Class类，所以无论是哪个线程访问它，需要的锁都只有一把</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance1);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance2);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">我是线程Thread-0</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-0结束</span></span>
<span class="line"><span style="color:#ABB2BF">我是线程Thread-1</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-1结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#synchronized指定锁对象为class对象"><span></span></a><a href="#synchronized%E6%8C%87%E5%AE%9A%E9%94%81%E5%AF%B9%E8%B1%A1%E4%B8%BAclass%E5%AF%B9%E8%B1%A1">#</a> synchronized指定锁对象为Class对象</h4>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E5C07B"> SynchronizedObjectLock</span><span style="color:#E06C75"> instance2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SynchronizedObjectLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 所有线程需要的锁都是同一把</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SynchronizedObjectLock</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"我是线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "结束"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance1);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#E06C75"> t2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(instance2);</span></span>
<span class="line"><span style="color:#E5C07B">        t1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        t2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">我是线程Thread-0</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-0结束</span></span>
<span class="line"><span style="color:#ABB2BF">我是线程Thread-1</span></span>
<span class="line"><span style="color:#ABB2BF">Thread-1结束</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#synchronized原理分析"><span></span></a><a href="#synchronized%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90">#</a> Synchronized原理分析</h2>
<h3><a class="header-anchor" href="#加锁和释放锁的原理"><span></span></a><a href="#%E5%8A%A0%E9%94%81%E5%92%8C%E9%87%8A%E6%94%BE%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86">#</a> 加锁和释放锁的原理</h3>
<blockquote>
<p>现象、时机(内置锁this)、深入JVM看字节码(反编译看monitor指令)</p>
</blockquote>
<p>深入JVM看字节码，创建如下的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedDemo2</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    Object</span><span style="color:#E06C75"> object </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method1</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (object) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#61AFEF">        method2</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method2</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用javac命令进行编译生成.class文件</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">&gt;javac SynchronizedDemo2.java</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用javap命令反编译查看.class文件的信息</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">&gt;javap -verbose SynchronizedDemo2.class</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到如下的信息：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-x1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>关注红色方框里的<code>monitorenter</code>和<code>monitorexit</code>即可。</p>
<p><code>Monitorenter</code>和<code>Monitorexit</code>指令，会让对象在执行，使其锁计数器加1或者减1。每一个对象在同一时间只与一个monitor(锁)相关联，而一个monitor在同一时间只能被一个线程获得，一个对象在尝试获得与这个对象相关联的Monitor锁的所有权的时候，monitorenter指令会发生如下3中情况之一：</p>
<ul>
<li>monitor计数器为0，意味着目前还没有被获得，那这个线程就会立刻获得然后把锁计数器+1，一旦+1，别的线程再想获取，就需要等待</li>
<li>如果这个monitor已经拿到了这个锁的所有权，又重入了这把锁，那锁计数器就会累加，变成2，并且随着重入的次数，会一直累加</li>
<li>这把锁已经被别的线程获取了，等待锁释放</li>
</ul>
<p><code>monitorexit指令</code>：释放对于monitor的所有权，释放过程很简单，就是讲monitor的计数器减1，如果减完以后，计数器不是0，则代表刚才是重入进来的，当前线程还继续持有这把锁的所有权，如果计数器变成0，则代表当前线程不再拥有该monitor的所有权，即释放锁。</p>
<p>下图表现了对象，对象监视器，同步队列以及执行线程状态之间的关系：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>该图可以看出，任意线程对Object的访问，首先要获得Object的监视器，如果获取失败，该线程就进入同步状态，线程状态变为BLOCKED，当Object的监视器占有者释放后，在同步队列中得线程就会有机会重新获取该监视器。</p>
<h3><a class="header-anchor" href="#可重入原理-加锁次数计数器"><span></span></a><a href="#%E5%8F%AF%E9%87%8D%E5%85%A5%E5%8E%9F%E7%90%86-%E5%8A%A0%E9%94%81%E6%AC%A1%E6%95%B0%E8%AE%A1%E6%95%B0%E5%99%A8">#</a> 可重入原理：加锁次数计数器</h3>
<ul>
<li><strong>什么是可重入？可重入锁</strong>？</li>
</ul>
<p><strong>可重入</strong>：（来源于维基百科）若一个程序或子程序可以“在任意时刻被中断然后操作系统调度执行另外一段代码，这段代码又调用了该子程序不会出错”，则称其为可重入（reentrant或re-entrant）的。即当该子程序正在运行时，执行线程可以再次进入并执行它，仍然获得符合设计时预期的结果。与多线程并发执行的线程安全不同，可重入强调对单个线程执行时重新进入同一个子程序仍然是安全的。</p>
<p><strong>可重入锁</strong>：又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。</p>
<ul>
<li><strong>看如下的例子</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SynchronizedDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SynchronizedDemo</span><span style="color:#E06C75"> demo</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD">  new</span><span style="color:#61AFEF"> SynchronizedDemo</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        demo</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">method1</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method1</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ": method1()"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        method2</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method2</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ": method2()"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        method3</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method3</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ": method3()"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合前文中加锁和释放锁的原理，不难理解：</p>
<ul>
<li>执行monitorenter获取锁
<ul>
<li>（monitor计数器=0，可获取锁）</li>
<li>执行method1()方法，monitor计数器+1 -&gt; 1 （获取到锁）</li>
<li>执行method2()方法，monitor计数器+1 -&gt; 2</li>
<li>执行method3()方法，monitor计数器+1 -&gt; 3</li>
</ul>
</li>
<li>执行monitorexit命令
<ul>
<li>method3()方法执行完，monitor计数器-1 -&gt; 2</li>
<li>method2()方法执行完，monitor计数器-1 -&gt; 1</li>
<li>method2()方法执行完，monitor计数器-1 -&gt; 0 （释放了锁）</li>
<li>（monitor计数器=0，锁被释放了）</li>
</ul>
</li>
</ul>
<p>这就是Synchronized的重入性，即在<strong>同一锁程</strong>中，每个对象拥有一个monitor计数器，当线程获取该对象锁后，monitor计数器就会加一，释放锁后就会将monitor计数器减一，线程不需要再次获取同一把锁。</p>
<h3><a class="header-anchor" href="#保证可见性的原理-内存模型和happens-before规则"><span></span></a><a href="#%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7%E7%9A%84%E5%8E%9F%E7%90%86-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8Chappens-before%E8%A7%84%E5%88%99">#</a> 保证可见性的原理：内存模型和happens-before规则</h3>
<p>Synchronized的happens-before规则，即监视器锁规则：对同一个监视器的解锁，happens-before于对该监视器的加锁。继续来看代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MonitorDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {     </span><span style="color:#7F848E;font-style:italic">// 1</span></span>
<span class="line"><span style="color:#ABB2BF">        a++;                                </span><span style="color:#7F848E;font-style:italic">// 2</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#7F848E;font-style:italic">                                       // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reader</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {    </span><span style="color:#7F848E;font-style:italic">// 4</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> a;                         </span><span style="color:#7F848E;font-style:italic">// 5</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#7F848E;font-style:italic">                                      // 6</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码的happens-before关系如图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>在图中每一个箭头连接的两个节点就代表之间的happens-before关系，黑色的是通过程序顺序规则推导出来，红色的为监视器锁规则推导而出：线程A释放锁happens-before线程B加锁，蓝色的则是通过程序顺序规则和监视器锁规则推测出来happens-befor关系，通过传递性规则进一步推导的happens-before关系。现在我们来重点关注2 happens-before 5，通过这个关系我们可以得出什么?</p>
<p>根据happens-before的定义中的一条:如果A happens-before B，则A的执行结果对B可见，并且A的执行顺序先于B。线程A先对共享变量A进行加一，由2 happens-before 5关系可知线程A的执行结果对线程B可见即线程B所读取到的a的值为1。</p>
<h2><a class="header-anchor" href="#jvm中锁的优化"><span></span></a><a href="#jvm%E4%B8%AD%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96">#</a> JVM中锁的优化</h2>
<p>简单来说在JVM中monitorenter和monitorexit字节码依赖于底层的操作系统的Mutex Lock来实现的，但是由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价是非常昂贵的；然而在现实中的大部分情况下，同步方法是运行在单线程环境(无锁竞争环境)如果每次都调用Mutex Lock那么将严重的影响程序的性能。<strong>不过在jdk1.6中对锁的实现引入了大量的优化，如锁粗化(Lock Coarsening)、锁消除(Lock Elimination)、轻量级锁(Lightweight Locking)、偏向锁(Biased Locking)、适应性自旋(Adaptive Spinning)等技术来减少锁操作的开销</strong>。</p>
<ul>
<li><code>锁粗化(Lock Coarsening)</code>：也就是减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁扩展成一个范围更大的锁。</li>
<li><code>锁消除(Lock Elimination)</code>：通过运行时JIT编译器的逃逸分析来消除一些没有在当前同步块以外被其他线程共享的数据的锁保护，通过逃逸分析也可以在线程本的Stack上进行对象空间的分配(同时还可以减少Heap上的垃圾收集开销)。</li>
<li><code>轻量级锁(Lightweight Locking)</code>：这种锁实现的背后基于这样一种假设，即在真实的情况下我们程序中的大部分同步代码一般都处于无锁竞争状态(即单线程执行环境)，在无锁竞争的情况下完全可以避免调用操作系统层面的重量级互斥锁，取而代之的是在monitorenter和monitorexit中只需要依靠一条CAS原子指令就可以完成锁的获取及释放。当存在锁竞争的情况下，执行CAS指令失败的线程将调用操作系统互斥锁进入到阻塞状态，当锁被释放的时候被唤醒(具体处理步骤下面详细讨论)。</li>
<li><code>偏向锁(Biased Locking)</code>：是为了在无锁竞争的情况下避免在锁获取过程中执行不必要的CAS原子指令，因为CAS原子指令虽然相对于重量级锁来说开销比较小但还是存在非常可观的本地延迟。</li>
<li><code>适应性自旋(Adaptive Spinning)</code>：当线程在获取轻量级锁的过程中执行CAS操作失败时，在进入与monitor相关联的操作系统重量级锁(mutex semaphore)前会进入忙等待(Spinning)然后再次尝试，当尝试一定的次数后如果仍然没有成功则调用与该monitor关联的semaphore(即互斥锁)进入到阻塞状态。</li>
</ul>
<blockquote>
<p>下面来详细讲解下，先从Synchronied同步锁开始讲起：</p>
</blockquote>
<h3><a class="header-anchor" href="#锁的类型"><span></span></a><a href="#%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B">#</a> 锁的类型</h3>
<p>在Java SE 1.6里Synchronied同步锁，一共有四种状态：<code>无锁</code>、<code>偏向锁</code>、<code>轻量级锁</code>、<code>重量级锁</code>，它会随着竞争情况逐渐升级。锁可以升级但是不可以降级，目的是为了提供获取锁和释放锁的效率。</p>
<blockquote>
<p>锁膨胀方向： 无锁 → 偏向锁 → 轻量级锁 → 重量级锁 (此过程是不可逆的)</p>
</blockquote>
<h3><a class="header-anchor" href="#自旋锁与自适应自旋锁"><span></span></a><a href="#%E8%87%AA%E6%97%8B%E9%94%81%E4%B8%8E%E8%87%AA%E9%80%82%E5%BA%94%E8%87%AA%E6%97%8B%E9%94%81">#</a> 自旋锁与自适应自旋锁</h3>
<h4><a class="header-anchor" href="#自旋锁"><span></span></a><a href="#%E8%87%AA%E6%97%8B%E9%94%81">#</a> 自旋锁</h4>
<blockquote>
<p>引入背景：大家都知道，在没有加入锁优化时，Synchronized是一个非常“胖大”的家伙。在多线程竞争锁时，当一个线程获取锁时，它会阻塞所有正在竞争的线程，这样对性能带来了极大的影响。在挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作对系统的并发性能带来了很大的压力。同时HotSpot团队注意到在很多情况下，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和回复阻塞线程并不值得。在如今多处理器环境下，完全可以让另一个没有获取到锁的线程在门外等待一会(自旋)，但不放弃CPU的执行时间。等待持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需要让线程执行一个忙循环(自旋)，这便是自旋锁由来的原因。</p>
</blockquote>
<p>自旋锁早在JDK1.4 中就引入了，只是当时默认时关闭的。在JDK 1.6后默认为开启状态。自旋锁本质上与阻塞并不相同，先不考虑其对多处理器的要求，如果锁占用的时间非常的短，那么自旋锁的性能会非常的好，相反，其会带来更多的性能开销(因为在线程自旋时，始终会占用CPU的时间片，如果锁占用的时间太长，那么自旋的线程会白白消耗掉CPU资源)。因此自旋等待的时间必须要有一定的限度，如果自旋超过了限定的次数仍然没有成功获取到锁，就应该使用传统的方式去挂起线程了，在JDK定义中，自旋锁默认的自旋次数为10次，用户可以使用参数<code>-XX:PreBlockSpin</code>来更改。</p>
<p>可是现在又出现了一个问题：如果线程锁在线程自旋刚结束就释放掉了锁，那么是不是有点得不偿失。所以这时候我们需要更加聪明的锁来实现更加灵活的自旋。来提高并发的性能。(这里则需要自适应自旋锁！)</p>
<h4><a class="header-anchor" href="#自适应自旋锁"><span></span></a><a href="#%E8%87%AA%E9%80%82%E5%BA%94%E8%87%AA%E6%97%8B%E9%94%81">#</a> 自适应自旋锁</h4>
<p>在JDK 1.6中引入了自适应自旋锁。这就意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋 时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。比如增加到100此循环。相反，如果对于某个锁，自旋很少成功获取锁。那再以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，JVM对程序的锁的状态预测会越来越准确，JVM也会越来越聪明。</p>
<h3><a class="header-anchor" href="#锁消除"><span></span></a><a href="#%E9%94%81%E6%B6%88%E9%99%A4">#</a> 锁消除</h3>
<p>锁消除是指虚拟机即时编译器再运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持。意思就是：JVM会判断再一段程序中的同步明显不会逃逸出去从而被其他线程访问到，那JVM就把它们当作栈上数据对待，认为这些数据是线程独有的，不需要加同步。此时就会进行锁消除。</p>
<p>当然在实际开发中，我们很清楚的知道哪些是线程独有的，不需要加同步锁，但是在Java API中有很多方法都是加了同步的，那么此时JVM会判断这段代码是否需要加锁。如果数据并不会逃逸，则会进行锁消除。比如如下操作：在操作String类型数据时，由于String是一个不可变类，对字符串的连接操作总是通过生成的新的String对象来进行的。因此Javac编译器会对String连接做自动优化。在JDK 1.5之前会使用StringBuffer对象的连续append()操作，在JDK 1.5及以后的版本中，会转化为StringBuidler对象的连续append()操作。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> test03</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> s1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> s2</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> s3) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> s1 </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> s2 </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> s3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码使用javap 编译结果</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>众所周知，StringBuilder不是安全同步的，但是在上述代码中，JVM判断该段代码并不会逃逸，则将该代码带默认为线程独有的资源，并不需要同步，所以执行了锁消除操作。(还有Vector中的各种操作也可实现锁消除。在没有逃逸出数据安全防卫内)</p>
<h3><a class="header-anchor" href="#锁粗化"><span></span></a><a href="#%E9%94%81%E7%B2%97%E5%8C%96">#</a> 锁粗化</h3>
<p>原则上，我们都知道在加同步锁时，尽可能的将同步块的作用范围限制到尽量小的范围(只在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数量尽可能变小。在存在锁同步竞争中，也可以使得等待锁的线程尽早的拿到锁)。</p>
<p>大部分上述情况是完美正确的，但是如果存在连串的一系列操作都对同一个对象反复加锁和解锁，甚至加锁操作时出现在循环体中的，那即使没有线程竞争，频繁的进行互斥同步操作也会导致不必要的性能操作。</p>
<p>这里贴上根据上述Javap 编译的情况编写的实例java类</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> test04</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> s1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> s2</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> s3) {</span></span>
<span class="line"><span style="color:#E5C07B">    StringBuffer</span><span style="color:#E06C75"> sb </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuffer</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(s1);</span></span>
<span class="line"><span style="color:#E5C07B">    sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(s2);</span></span>
<span class="line"><span style="color:#E5C07B">    sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(s3);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述的连续append()操作中就属于这类情况。JVM会检测到这样一连串的操作都是对同一个对象加锁，那么JVM会将加锁同步的范围扩展(粗化)到整个一系列操作的 外部，使整个一连串的append()操作只需要加锁一次就可以了。</p>
<h3><a class="header-anchor" href="#轻量级锁"><span></span></a><a href="#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81">#</a> 轻量级锁</h3>
<p>在JDK 1.6之后引入的轻量级锁，需要注意的是轻量级锁并不是替代重量级锁的，而是对在大多数情况下同步块并不会有竞争出现提出的一种优化。它可以减少重量级锁对线程的阻塞带来的线程开销。从而提高并发性能。</p>
<p>如果要理解轻量级锁，那么必须先要了解HotSpot虚拟机中对象头的内存布局。上面介绍Java对象头也详细介绍过。在对象头中(<code>Object Header</code>)存在两部分。第一部分用于存储对象自身的运行时数据，<code>HashCode</code>、<code>GC Age</code>、<code>锁标记位</code>、<code>是否为偏向锁</code>。等。一般为32位或者64位(视操作系统位数定)。官方称之为<code>Mark Word</code>，它是实现轻量级锁和偏向锁的关键。 另外一部分存储的是指向方法区对象类型数据的指针(<code>Klass Point</code>)，如果对象是数组的话，还会有一个额外的部分用于存储数据的长度。</p>
<h4><a class="header-anchor" href="#轻量级锁加锁"><span></span></a><a href="#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E5%8A%A0%E9%94%81">#</a> 轻量级锁加锁</h4>
<p>在线程执行同步块之前，JVM会先在当前线程的栈帧中创建一个名为锁记录(<code>Lock Record</code>)的空间，用于存储锁对象目前的<code>Mark Word</code>的拷贝(JVM会将对象头中的<code>Mark Word</code>拷贝到锁记录中，官方称为<code>Displaced Mark Ward</code>)这个时候线程堆栈与对象头的状态如图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示：如果当前对象没有被锁定，那么锁标志位为01状态，JVM在执行当前线程时，首先会在当前线程栈帧中创建锁记录<code>Lock Record</code>的空间用于存储锁对象目前的<code>Mark Word</code>的拷贝。</p>
<p>然后，虚拟机使用CAS操作将标记字段Mark Word拷贝到锁记录中，并且将<code>Mark Word</code>更新为指向<code>Lock Record</code>的指针。如果更新成功了，那么这个线程就拥用了该对象的锁，并且对象Mark Word的锁标志位更新为(<code>Mark Word</code>中最后的2bit)00，即表示此对象处于轻量级锁定状态，如图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如果这个更新操作失败，JVM会检查当前的<code>Mark Word</code>中是否存在指向当前线程的栈帧的指针，如果有，说明该锁已经被获取，可以直接调用。如果没有，则说明该锁被其他线程抢占了，如果有两条以上的线程竞争同一个锁，那轻量级锁就不再有效，直接膨胀为重量级锁，没有获得锁的线程会被阻塞。此时，锁的标志位为<code>10.Mark Word</code>中存储的指向重量级锁的指针。</p>
<p>轻量级解锁时，会使用原子的CAS操作将<code>Displaced Mark Word</code>替换回到对象头中，如果成功，则表示没有发生竞争关系。如果失败，表示当前锁存在竞争关系。锁就会膨胀成重量级锁。两个线程同时争夺锁，导致锁膨胀的流程图如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#偏向锁"><span></span></a><a href="#%E5%81%8F%E5%90%91%E9%94%81">#</a> 偏向锁</h3>
<blockquote>
<p>引入背景：在大多实际环境下，锁不仅不存在多线程竞争，而且总是由同一个线程多次获取，那么在同一个线程反复获取所释放锁中，其中并还没有锁的竞争，那么这样看上去，多次的获取锁和释放锁带来了很多不必要的性能开销和上下文切换。</p>
</blockquote>
<p>为了解决这一问题，HotSpot的作者在Java SE 1.6 中对Synchronized进行了优化，引入了偏向锁。当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁。只需要简单的测试一下对象头的<code>Mark Word</code>里是否存储着指向当前线程的偏向锁。如果成功，表示线程已经获取到了锁。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#偏向锁的撤销"><span></span></a><a href="#%E5%81%8F%E5%90%91%E9%94%81%E7%9A%84%E6%92%A4%E9%94%80">#</a> 偏向锁的撤销</h4>
<p>偏向锁使用了一种等待竞争出现才会释放锁的机制。所以当其他线程尝试获取偏向锁时，持有偏向锁的线程才会释放锁。但是偏向锁的撤销需要等到全局安全点(就是当前线程没有正在执行的字节码)。它会首先暂停拥有偏向锁的线程，让你后检查持有偏向锁的线程是否活着。如果线程不处于活动状态，直接将对象头设置为无锁状态。如果线程活着，JVM会遍历栈帧中的锁记录，栈帧中的锁记录和对象头要么偏向于其他线程，要么恢复到无锁状态或者标记对象不适合作为偏向锁。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#锁的优缺点对比"><span></span></a><a href="#%E9%94%81%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E5%AF%B9%E6%AF%94">#</a> 锁的优缺点对比</h3>
<p>| 锁       | 优点                                                         | 缺点                                                         | 使用场景                           |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-schronized-x1.png" type="image/png"/>
    </item>
    <item>
      <title>关键字 volatile 解析</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20volatile%20%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20volatile%20%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">关键字 volatile 解析</source>
      <description>相比Sychronized(重量级锁，对系统性能影响较大)，volatile提供了另一种解决可见性和有序性问题的方案。@pdai 关键字 volatile 解析 带着BAT大厂的面试问题去理解volatile volatile的作用详解 防重排序 实现可见性 保证原子性:单次读/写 问题1： i++为什么不能保证原子性? 问题2： 共享的long和do...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>相比Sychronized(重量级锁，对系统性能影响较大)，volatile提供了另一种解决可见性和有序性问题的方案。@pdai</p>
</blockquote>
<ul>
<li>关键字 volatile 解析
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3volatile">带着BAT大厂的面试问题去理解volatile</a></li>
<li>volatile的作用详解
<ul>
<li><a href="#%E9%98%B2%E9%87%8D%E6%8E%92%E5%BA%8F">防重排序</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%81%E6%80%A7">实现可见性</a></li>
<li>保证原子性:单次读/写
<ul>
<li><a href="#%E9%97%AE%E9%A2%981-i%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7">问题1： i++为什么不能保证原子性?</a></li>
<li><a href="#%E9%97%AE%E9%A2%982-%E5%85%B1%E4%BA%AB%E7%9A%84long%E5%92%8Cdouble%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8volatile">问题2： 共享的long和double变量的为什么要用volatile?</a></li>
</ul>
</li>
</ul>
</li>
<li>volatile 的实现原理
<ul>
<li>volatile 可见性实现
<ul>
<li><a href="#lock-%E6%8C%87%E4%BB%A4">lock 指令</a></li>
<li><a href="#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7">缓存一致性</a></li>
</ul>
</li>
<li>volatile 有序性实现
<ul>
<li><a href="#volatile-%E7%9A%84-happens-before-%E5%85%B3%E7%B3%BB">volatile 的 happens-before 关系</a></li>
<li><a href="#volatile-%E7%A6%81%E6%AD%A2%E9%87%8D%E6%8E%92%E5%BA%8F">volatile 禁止重排序</a></li>
</ul>
</li>
</ul>
</li>
<li>volatile 的应用场景
<ul>
<li><a href="#%E6%A8%A1%E5%BC%8F1%E7%8A%B6%E6%80%81%E6%A0%87%E5%BF%97">模式1：状态标志</a></li>
<li><a href="#%E6%A8%A1%E5%BC%8F2%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83one-time-safe-publication">模式2：一次性安全发布(one-time safe publication)</a></li>
<li><a href="#%E6%A8%A1%E5%BC%8F3%E7%8B%AC%E7%AB%8B%E8%A7%82%E5%AF%9Findependent-observation">模式3：独立观察(independent observation)</a></li>
<li><a href="#%E6%A8%A1%E5%BC%8F4volatile-bean-%E6%A8%A1%E5%BC%8F">模式4：volatile bean 模式</a></li>
<li><a href="#%E6%A8%A1%E5%BC%8F5%E5%BC%80%E9%94%80%E8%BE%83%E4%BD%8E%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81%E7%AD%96%E7%95%A5">模式5：开销较低的读－写锁策略</a></li>
<li><a href="#%E6%A8%A1%E5%BC%8F6%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5double-checked">模式6：双重检查(double-checked)</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解volatile"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3volatile">#</a> 带着BAT大厂的面试问题去理解volatile</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解volatile。@pdai</p>
<ul>
<li>volatile关键字的作用是什么?</li>
<li>volatile能保证原子性吗?</li>
<li>之前32位机器上共享的long和double变量的为什么要用volatile? 现在64位机器上是否也要设置呢?</li>
<li>i++为什么不能保证原子性?</li>
<li>volatile是如何实现可见性的? 内存屏障。</li>
<li>volatile是如何实现有序性的? happens-before等</li>
<li>说下volatile的应用场景?</li>
</ul>
<h2><a class="header-anchor" href="#volatile的作用详解"><span></span></a><a href="#volatile%E7%9A%84%E4%BD%9C%E7%94%A8%E8%AF%A6%E8%A7%A3">#</a> volatile的作用详解</h2>
<h3><a class="header-anchor" href="#防重排序"><span></span></a><a href="#%E9%98%B2%E9%87%8D%E6%8E%92%E5%BA%8F">#</a> 防重排序</h3>
<p>我们从一个最经典的例子来分析重排序问题。大家应该都很熟悉单例模式的实现，而在并发环境下的单例实现方式，我们通常可以采用双重检查加锁(DCL)的方式来实现。其源码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Singleton</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Singleton</span><span style="color:#E06C75"> singleton</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 构造函数私有，禁止外部实例化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#61AFEF"> Singleton</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {};</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Singleton</span><span style="color:#61AFEF"> getInstance</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (singleton </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            synchronized</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">singleton</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (singleton </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                    singleton </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Singleton</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> singleton;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们分析一下为什么要在变量singleton之间加上volatile关键字。要理解这个问题，先要了解对象的构造过程，实例化一个对象其实可以分为三个步骤：</p>
<ul>
<li>分配内存空间。</li>
<li>初始化对象。</li>
<li>将内存空间的地址赋值给对应的引用。</li>
</ul>
<p>但是由于操作系统可以<code>对指令进行重排序</code>，所以上面的过程也可能会变成如下过程：</p>
<ul>
<li>分配内存空间。</li>
<li>将内存空间的地址赋值给对应的引用。</li>
<li>初始化对象</li>
</ul>
<p>如果是这个流程，多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。</p>
<h3><a class="header-anchor" href="#实现可见性"><span></span></a><a href="#%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%81%E6%80%A7">#</a> 实现可见性</h3>
<p>可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。volatile关键字能有效的解决这个问题，我们看下下面的例子，就可以知道其作用：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestVolatile</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> stop </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Thread-A</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Thread A"</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                while</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#ABB2BF">stop) {</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " stopped"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Thread-main</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            TimeUnit</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SECONDS</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " after 1 seconds"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        stop </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行输出如下</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">Thread[main,5,main]</span><span style="color:#98C379"> after</span><span style="color:#D19A66"> 1</span><span style="color:#98C379"> seconds</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">//</span><span style="color:#98C379"> Thread</span><span style="color:#98C379"> A一直在loop,</span><span style="color:#98C379"> 因为Thread</span><span style="color:#98C379"> A</span><span style="color:#98C379"> 由于可见性原因看不到Thread</span><span style="color:#98C379"> Main</span><span style="color:#98C379"> 已经修改stop的值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Thread-main 休眠1秒之后，设置 stop = ture，但是Thread A根本没停下来，这就是可见性问题。如果通过在stop变量前面加上volatile关键字则会真正stop:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">Thread[main,5,main]</span><span style="color:#98C379"> after</span><span style="color:#D19A66"> 1</span><span style="color:#98C379"> seconds</span></span>
<span class="line"><span style="color:#61AFEF">Thread[Thread</span><span style="color:#98C379"> A,5,main]</span><span style="color:#98C379"> stopped</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">Process</span><span style="color:#98C379"> finished</span><span style="color:#98C379"> with</span><span style="color:#98C379"> exit</span><span style="color:#98C379"> code</span><span style="color:#D19A66"> 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#保证原子性-单次读-写"><span></span></a><a href="#%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7-%E5%8D%95%E6%AC%A1%E8%AF%BB-%E5%86%99">#</a> 保证原子性:单次读/写</h3>
<p>volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性。先从如下两个问题来理解（后文再从内存屏障的角度理解）：</p>
<h4><a class="header-anchor" href="#问题1-i-为什么不能保证原子性"><span></span></a><a href="#%E9%97%AE%E9%A2%981-i-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7">#</a> 问题1： i++为什么不能保证原子性?</h4>
<p>对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。</p>
<p>现在我们就通过下列程序来演示一下这个问题：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> VolatileTest01</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> addI</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#ABB2BF">        i++;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B">  VolatileTest01</span><span style="color:#E06C75"> test01</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> VolatileTest01</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; n </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 1000</span><span style="color:#ABB2BF">; n++) {</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#ABB2BF">                @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">                public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                    try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                    } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#E5C07B">                    test01</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addI</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10000</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//等待10秒，保证上面程序执行完成</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">test01</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">i</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家可能会误认为对变量i加上关键字volatile后，这段程序就是线程安全的。大家可以尝试运行上面的程序。下面是我本地运行的结果：981 可能每个人运行的结果不相同。不过应该能看出，volatile是无法保证原子性的(否则结果应该是1000)。原因也很简单，i++其实是一个复合操作，包括三步骤：</p>
<ul>
<li>读取i的值。</li>
<li>对i加1。</li>
<li>将i的值写回内存。 volatile是无法保证这三个操作是具有原子性的，我们可以通过AtomicInteger或者Synchronized来保证+1操作的原子性。 注：上面几段代码中多处执行了Thread.sleep()方法，目的是为了增加并发问题的产生几率，无其他作用。</li>
</ul>
<h4><a class="header-anchor" href="#问题2-共享的long和double变量的为什么要用volatile"><span></span></a><a href="#%E9%97%AE%E9%A2%982-%E5%85%B1%E4%BA%AB%E7%9A%84long%E5%92%8Cdouble%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8volatile">#</a> 问题2： 共享的long和double变量的为什么要用volatile?</h4>
<p>因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</p>
<p>如下是JLS中的解释：</p>
<blockquote>
<p>17.7 Non-Atomic Treatment of double and long</p>
</blockquote>
<ul>
<li>For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write.</li>
<li>Writes and reads of volatile long and double values are always atomic.</li>
<li>Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values.</li>
<li>Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32-bit values. For efficiency’s sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to long and double values atomically or in two parts.</li>
<li>Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications.</li>
</ul>
<p>目前各种平台下的商用虚拟机都选择把 64 位数据的读写操作作为原子操作来对待，因此我们在编写代码时一般不把long 和 double 变量专门声明为 volatile多数情况下也是不会错的。</p>
<h2><a class="header-anchor" href="#volatile-的实现原理"><span></span></a><a href="#volatile-%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> volatile 的实现原理</h2>
<h3><a class="header-anchor" href="#volatile-可见性实现"><span></span></a><a href="#volatile-%E5%8F%AF%E8%A7%81%E6%80%A7%E5%AE%9E%E7%8E%B0">#</a> volatile 可见性实现</h3>
<blockquote>
<p>volatile 变量的内存可见性是基于内存屏障(Memory Barrier)实现:</p>
</blockquote>
<ul>
<li>内存屏障，又称内存栅栏，是一个 CPU 指令。</li>
<li>在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JMM 为了保证在不同的编译器和 CPU 上有相同的结果，通过插入特定类型的内存屏障来禁止+ 特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和 CPU：不管什么指令都不能和这条 Memory Barrier 指令重排序。</li>
</ul>
<p>写一段简单的 Java 代码，声明一个 volatile 变量，并赋值。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> update</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Test</span><span style="color:#E06C75"> test</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Test</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">update</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 hsdis 和 jitwatch 工具可以得到编译后的汇编代码:</p>
<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2">......</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951563:</span><span style="color:#98C379"> and</span><span style="color:#E06C75">    $0xffffffffffffff87</span><span style="color:#98C379">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951567:</span><span style="color:#98C379"> je</span><span style="color:#D19A66">     0x00000000029515f8</span></span>
<span class="line"><span style="color:#61AFEF">  0x000000000295156d:</span><span style="color:#98C379"> test</span><span style="color:#E06C75">   $0x7</span><span style="color:#98C379">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951574:</span><span style="color:#98C379"> jne</span><span style="color:#D19A66">    0x00000000029515bd</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951576:</span><span style="color:#98C379"> test</span><span style="color:#E06C75">   $0x300</span><span style="color:#98C379">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x000000000295157d:</span><span style="color:#98C379"> jne</span><span style="color:#D19A66">    0x000000000295159c</span></span>
<span class="line"><span style="color:#61AFEF">  0x000000000295157f:</span><span style="color:#98C379"> and</span><span style="color:#E06C75">    $0x37f</span><span style="color:#98C379">,%rax</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951586:</span><span style="color:#98C379"> mov</span><span style="color:#98C379">    %rax,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951589:</span><span style="color:#98C379"> or</span><span style="color:#98C379">     %r15,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x000000000295158c:</span><span style="color:#98C379"> lock</span><span style="color:#98C379"> cmpxchg</span><span style="color:#98C379"> %rdi,</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">%rdx</span><span style="color:#ABB2BF">)  </span><span style="color:#98C379">//在</span><span style="color:#98C379"> volatile</span><span style="color:#98C379"> 修饰的共享变量进行写操作的时候会多出</span><span style="color:#98C379"> lock</span><span style="color:#98C379"> 前缀的指令</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951591:</span><span style="color:#98C379"> jne</span><span style="color:#D19A66">    0x0000000002951a15</span></span>
<span class="line"><span style="color:#61AFEF">  0x0000000002951597:</span><span style="color:#98C379"> jmpq</span><span style="color:#D19A66">   0x00000000029515f8</span></span>
<span class="line"><span style="color:#61AFEF">  0x000000000295159c:</span><span style="color:#98C379"> mov</span><span style="color:#D19A66">    0x8</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">%rdx</span><span style="color:#ABB2BF">)</span><span style="color:#98C379">,%edi</span></span>
<span class="line"><span style="color:#61AFEF">  0x000000000295159f:</span><span style="color:#98C379"> shl</span><span style="color:#E06C75">    $0x3</span><span style="color:#98C379">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x00000000029515a3:</span><span style="color:#98C379"> mov</span><span style="color:#D19A66">    0xa8</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">%rdi</span><span style="color:#ABB2BF">)</span><span style="color:#98C379">,%rdi</span></span>
<span class="line"><span style="color:#61AFEF">  0x00000000029515aa:</span><span style="color:#98C379"> or</span><span style="color:#98C379">     %r15,%rdi</span></span>
<span class="line"><span style="color:#56B6C2">......</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lock 前缀的指令在多核处理器下会引发两件事情:</p>
<ul>
<li>将当前处理器缓存行的数据写回到系统内存。</li>
<li>写回内存的操作会使在其他 CPU 里缓存了该内存地址的数据无效。</li>
</ul>
<p>为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存(L1，L2 或其他)后再进行操作，但操作完不知道何时会写到内存。</p>
<p>如果对声明了 volatile 的变量进行写操作，JVM 就会向处理器发送一条 lock 前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</p>
<p>为了保证各个处理器的缓存是一致的，实现了缓存一致性协议(MESI)，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p>
<p>所有多核处理器下还会完成：当处理器发现本地缓存失效后，就会从内存中重读该变量数据，即可以获取当前最新值。</p>
<p>volatile 变量通过这样的机制就使得每个线程都能获得该变量的最新值。</p>
<h4><a class="header-anchor" href="#lock-指令"><span></span></a><a href="#lock-%E6%8C%87%E4%BB%A4">#</a> lock 指令</h4>
<p>在 Pentium 和早期的 IA-32 处理器中，lock 前缀会使处理器执行当前指令时产生一个 LOCK# 信号，会对总线进行锁定，其它 CPU 对内存的读写请求都会被阻塞，直到锁释放。 后来的处理器，加锁操作是由高速缓存锁代替总线锁来处理。 因为锁总线的开销比较大，锁总线期间其他 CPU 没法访问内存。 这种场景多缓存的数据一致通过缓存一致性协议(MESI)来保证。</p>
<h4><a class="header-anchor" href="#缓存一致性"><span></span></a><a href="#%E7%BC%93%E5%AD%98%E4%B8%80%E8%87%B4%E6%80%A7">#</a> 缓存一致性</h4>
<p>缓存是分段(line)的，一个段对应一块存储空间，称之为缓存行，它是 CPU 缓存中可分配的最小存储单元，大小 32 字节、64 字节、128 字节不等，这与 CPU 架构有关，通常来说是 64 字节。 LOCK# 因为锁总线效率太低，因此使用了多组缓存。 为了使其行为看起来如同一组缓存那样。因而设计了 缓存一致性协议。 缓存一致性协议有多种，但是日常处理的大多数计算机设备都属于 " 嗅探(snooping)" 协议。 所有内存的传输都发生在一条共享的总线上，而所有的处理器都能看到这条总线。 缓存本身是独立的，但是内存是共享资源，所有的内存访问都要经过仲裁(同一个指令周期中，只有一个 CPU 缓存可以读写内存)。 CPU 缓存不仅仅在做内存传输的时候才与总线打交道，而是不停在嗅探总线上发生的数据交换，跟踪其他缓存在做什么。 当一个缓存代表它所属的处理器去读写内存时，其它处理器都会得到通知，它们以此来使自己的缓存保持同步。 只要某个处理器写内存，其它处理器马上知道这块内存在它们的缓存段中已经失效。</p>
<h3><a class="header-anchor" href="#volatile-有序性实现"><span></span></a><a href="#volatile-%E6%9C%89%E5%BA%8F%E6%80%A7%E5%AE%9E%E7%8E%B0">#</a> volatile 有序性实现</h3>
<h4><a class="header-anchor" href="#volatile-的-happens-before-关系"><span></span></a><a href="#volatile-%E7%9A%84-happens-before-%E5%85%B3%E7%B3%BB">#</a> volatile 的 happens-before 关系</h4>
<p>happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//假设线程A执行writer方法，线程B执行reader方法</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> VolatileExample</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> flag </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;              </span><span style="color:#7F848E;font-style:italic">// 1 线程A修改共享变量</span></span>
<span class="line"><span style="color:#ABB2BF">        flag </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;        </span><span style="color:#7F848E;font-style:italic">// 2 线程A写volatile变量</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reader</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (flag) {         </span><span style="color:#7F848E;font-style:italic">// 3 线程B读同一个volatile变量</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> a;          </span><span style="color:#7F848E;font-style:italic">// 4 线程B读共享变量</span></span>
<span class="line"><span style="color:#ABB2BF">        ……</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 happens-before 规则，上面过程会建立 3 类 happens-before 关系。</p>
<ul>
<li>根据程序次序规则：1 happens-before 2 且 3 happens-before 4。</li>
<li>根据 volatile 规则：2 happens-before 3。</li>
<li>根据 happens-before 的传递性规则：1 happens-before 4。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>因为以上规则，当线程 A 将 volatile 变量 flag 更改为 true 后，线程 B 能够迅速感知。</p>
<h4><a class="header-anchor" href="#volatile-禁止重排序"><span></span></a><a href="#volatile-%E7%A6%81%E6%AD%A2%E9%87%8D%E6%8E%92%E5%BA%8F">#</a> volatile 禁止重排序</h4>
<p>为了性能优化，JMM 在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序。JMM 提供了内存屏障阻止这种重排序。</p>
<p>Java 编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。</p>
<p>JMM 会针对编译器制定 volatile 重排序规则表。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>" NO " 表示禁止重排序。</p>
<p>为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p>
<p>对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。</p>
<ul>
<li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li>
<li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li>
<li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li>
<li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li>
</ul>
<p>volatile 写是在前面和后面分别插入内存屏障，而 volatile 读操作是在后面插入两个内存屏障。</p>
<p>| 内存屏障        | 说明                                                        |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-volatile-1.png" type="image/png"/>
    </item>
    <item>
      <title>Intro Page</title>
      <link>https://cactusli.net/intro.html</link>
      <guid>https://cactusli.net/intro.html</guid>
      <source url="https://cactusli.net/rss.xml">Intro Page</source>
      <description>Intro Page Place your introduction and profile here.</description>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Place your introduction and profile here.</p>
]]></content:encoded>
      <enclosure url="https://cactusli.net/assets/images/cover3.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://cactusli.net/demo/</link>
      <guid>https://cactusli.net/demo/</guid>
      <source url="https://cactusli.net/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
    </item>
    <item>
      <title>布局与功能禁用</title>
      <link>https://cactusli.net/demo/disable.html</link>
      <guid>https://cactusli.net/demo/disable.html</guid>
      <source url="https://cactusli.net/rss.xml">布局与功能禁用</source>
      <description>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。 本页面就是一个示例，禁用了如下功能: 导航栏 侧边栏 路径导航 页面信息 贡献者 编辑此页链接 更新时间 上一篇/下一篇 链接 评论 页脚 返回顶部按钮</description>
      <category>使用指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>
<!-- more -->
<p>本页面就是一个示例，禁用了如下功能:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>布局</title>
      <link>https://cactusli.net/demo/layout.html</link>
      <guid>https://cactusli.net/demo/layout.html</guid>
      <source url="https://cactusli.net/rss.xml">布局</source>
      <description>布局包括: 导航栏 侧边栏 页脚 同时每个页面包含: 路径导航 标题和页面信息 TOC (文章标题列表) 贡献者、更新时间等页面元信息 评论 主题也带有以下元素: 夜间模式按钮 返回顶部按钮 打印按钮 你可以在主题选项和页面的 frontmatter 中自定义它们。</description>
      <category>指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>布局包括:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>
</ul>
<p>同时每个页面包含:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/breadcrumb.html" target="_blank" rel="noopener noreferrer">路径导航</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/feature/page-info.html" target="_blank" rel="noopener noreferrer">标题和页面信息</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/page.html#%E6%A0%87%E9%A2%98%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">TOC (文章标题列表)</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/feature/meta.html" target="_blank" rel="noopener noreferrer">贡献者、更新时间等页面元信息</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/feature/comment.html" target="_blank" rel="noopener noreferrer">评论</a></li>
</ul>
<p>主题也带有以下元素:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/interface/darkmode.html" target="_blank" rel="noopener noreferrer">夜间模式按钮</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/interface/others.html#%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE" target="_blank" rel="noopener noreferrer">返回顶部按钮</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/interface/others.html#%E6%89%93%E5%8D%B0%E6%8C%89%E9%92%AE" target="_blank" rel="noopener noreferrer">打印按钮</a></li>
</ul>
<p>你可以在主题选项和页面的 frontmatter 中自定义它们。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 展示</title>
      <link>https://cactusli.net/demo/markdown.html</link>
      <guid>https://cactusli.net/demo/markdown.html</guid>
      <source url="https://cactusli.net/rss.xml">Markdown 展示</source>
      <description>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。 你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。 Markdown 介绍 如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。 Mark...</description>
      <category>使用指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>
<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>
<!-- more -->
<h2>Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<h2>Markdown 配置</h2>
<p>VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2>Markdown 扩展</h2>
<p>VuePress 会使用 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">语法扩展</a> 。</p>
<h3>VuePress 扩展</h3>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h3>主题扩展</h3>
<p>通过 <a href="https://plugin-md-enhance.vuejs.press/zh/" target="_blank" rel="noopener noreferrer"><code>vuepress-plugin-md-enhance</code></a>，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。</p>
<h4>提示容器</h4>
<div v-pre="">
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 <a href="#%E6%8F%90%E7%A4%BA%E5%AE%B9%E5%99%A8">链接</a>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> a</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>
<div class="hint-container tip">
<p class="hint-container-title">自定义标题</p>
<p>提示容器</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">自定义标题</p>
<p>警告容器</p>
</div>
<div class="hint-container caution">
<p class="hint-container-title">自定义标题</p>
<p>危险容器</p>
</div>
<details class="hint-container details"><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/hint.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>代码块</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/code-tabs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>上下角标</h4>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>自定义对齐</h4>
<div style="text-align:center">
<p>我是居中的</p>
</div>
<div style="text-align:right">
<p>我在右对齐</p>
</div>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>Attrs</h4>
<p>一个拥有 ID 的 <strong id="word">单词</strong>。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/attrs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>脚注</h4>
<p>此文字有脚注<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8%E5%86%85%E5%AE%B9">^first</a>.</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>标记</h4>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>任务列表</h4>
<ul>
<li>
<p>[x] 计划 1</p>
</li>
<li>
<p>[ ] 计划 2</p>
</li>
<li>
<p><a href="https://theme-hope.vuejs.press/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3>图片增强</h3>
<p>支持为图片设置颜色模式和大小</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>组件</h4>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://cactusli.net/demo/page.html</link>
      <guid>https://cactusli.net/demo/page.html</guid>
      <source url="https://cactusli.net/rss.xml">页面配置</source>
      <description>more 注释之前的内容被视为文章摘要。 页面标题 The first H1 title in Markdown will be regarded as page title. Markdown 中的第一个 H1 标题会被视为页面标题。 你可以在 Markdown 的 Frontmatter 中设置页面标题。 页面信息 你可以在 Markdown 的 ...</description>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>more</code> 注释之前的内容被视为文章摘要。</p>
<!-- more -->
<h2>页面标题</h2>
<p>The first H1 title in Markdown will be regarded as page title.</p>
<p>Markdown 中的第一个 H1 标题会被视为页面标题。</p>
<p>你可以在 Markdown 的 Frontmatter 中设置页面标题。</p>
<div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"></div></div>]]></content:encoded>
      <enclosure url="https://cactusli.net/assets/images/cover1.jpg" type="image/jpeg"/>
    </item>
  </channel>
</rss>