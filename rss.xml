<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://cactusli.net/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://cactusli.net/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Cactus&amp;apos;s Blog</title>
    <link>https://cactusli.net/</link>
    <description>仙人球的博客</description>
    <language>zh-CN</language>
    <pubDate>Thu, 07 Mar 2024 06:59:55 GMT</pubDate>
    <lastBuildDate>Thu, 07 Mar 2024 06:59:55 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>使用指南</category>
    <category>指南</category>
    <category>Java</category>
    <item>
      <title>Intro Page</title>
      <link>https://cactusli.net/intro.html</link>
      <guid>https://cactusli.net/intro.html</guid>
      <source url="https://cactusli.net/rss.xml">Intro Page</source>
      <description>Intro Page Place your introduction and profile here.</description>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[
<p>Place your introduction and profile here.</p>
]]></content:encoded>
      <enclosure url="https://cactusli.net/assets/images/cover3.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://cactusli.net/demo/</link>
      <guid>https://cactusli.net/demo/</guid>
      <source url="https://cactusli.net/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
    </item>
    <item>
      <title>布局与功能禁用</title>
      <link>https://cactusli.net/demo/disable.html</link>
      <guid>https://cactusli.net/demo/disable.html</guid>
      <source url="https://cactusli.net/rss.xml">布局与功能禁用</source>
      <description>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。 本页面就是一个示例，禁用了如下功能: 导航栏 侧边栏 路径导航 页面信息 贡献者 编辑此页链接 更新时间 上一篇/下一篇 链接 评论 页脚 返回顶部按钮</description>
      <category>使用指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>
<!-- more -->
<p>本页面就是一个示例，禁用了如下功能:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>布局</title>
      <link>https://cactusli.net/demo/layout.html</link>
      <guid>https://cactusli.net/demo/layout.html</guid>
      <source url="https://cactusli.net/rss.xml">布局</source>
      <description>布局包括: 导航栏 侧边栏 页脚 同时每个页面包含: 路径导航 标题和页面信息 TOC (文章标题列表) 贡献者、更新时间等页面元信息 评论 主题也带有以下元素: 夜间模式按钮 返回顶部按钮 打印按钮 你可以在主题选项和页面的 frontmatter 中自定义它们。</description>
      <category>指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>布局包括:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>
</ul>
<p>同时每个页面包含:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/breadcrumb.html" target="_blank" rel="noopener noreferrer">路径导航</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/feature/page-info.html" target="_blank" rel="noopener noreferrer">标题和页面信息</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/page.html#%E6%A0%87%E9%A2%98%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">TOC (文章标题列表)</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/feature/meta.html" target="_blank" rel="noopener noreferrer">贡献者、更新时间等页面元信息</a></li>
<li><a href="https://theme-hope.vuejs.press/zh/guide/feature/comment.html" target="_blank" rel="noopener noreferrer">评论</a></li>
</ul>
<p>主题也带有以下元素:</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/interface/darkmode.html" target="_blank" rel="noopener noreferrer">夜间模式按钮</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/interface/others.html#%E8%BF%94%E5%9B%9E%E9%A1%B6%E9%83%A8%E6%8C%89%E9%92%AE" target="_blank" rel="noopener noreferrer">返回顶部按钮</a></li>
<li><a href="https://theme-hope.vuejs.press/guide/interface/others.html#%E6%89%93%E5%8D%B0%E6%8C%89%E9%92%AE" target="_blank" rel="noopener noreferrer">打印按钮</a></li>
</ul>
<p>你可以在主题选项和页面的 frontmatter 中自定义它们。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 展示</title>
      <link>https://cactusli.net/demo/markdown.html</link>
      <guid>https://cactusli.net/demo/markdown.html</guid>
      <source url="https://cactusli.net/rss.xml">Markdown 展示</source>
      <description>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。 你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。 Markdown 介绍 如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。 Mark...</description>
      <category>使用指南</category>
      <pubDate>Wed, 06 Mar 2024 07:41:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>
<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>
<!-- more -->
<h2>Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://theme-hope.vuejs.press/zh/cookbook/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<h2>Markdown 配置</h2>
<p>VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2>Markdown 扩展</h2>
<p>VuePress 会使用 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">语法扩展</a> 。</p>
<h3>VuePress 扩展</h3>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://theme-hope.vuejs.press/zh/cookbook/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h3>主题扩展</h3>
<p>通过 <a href="https://plugin-md-enhance.vuejs.press/zh/" target="_blank" rel="noopener noreferrer"><code>vuepress-plugin-md-enhance</code></a>，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。</p>
<h4>提示容器</h4>
<div v-pre="">
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 <a href="#%E6%8F%90%E7%A4%BA%E5%AE%B9%E5%99%A8">链接</a>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> a</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>
<div class="hint-container tip">
<p class="hint-container-title">自定义标题</p>
<p>提示容器</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">自定义标题</p>
<p>警告容器</p>
</div>
<div class="hint-container caution">
<p class="hint-container-title">自定义标题</p>
<p>危险容器</p>
</div>
<details class="hint-container details"><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/hint.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>代码块</h4>

<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/code-tabs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>上下角标</h4>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>自定义对齐</h4>
<div style="text-align:center">
<p>我是居中的</p>
</div>
<div style="text-align:right">
<p>我在右对齐</p>
</div>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>Attrs</h4>
<p>一个拥有 ID 的 <strong id="word">单词</strong>。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/attrs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>脚注</h4>
<p>此文字有脚注<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8%E5%86%85%E5%AE%B9">^first</a>.</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>标记</h4>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>任务列表</h4>
<ul>
<li>
<p>[x] 计划 1</p>
</li>
<li>
<p>[ ] 计划 2</p>
</li>
<li>
<p><a href="https://theme-hope.vuejs.press/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3>图片增强</h3>
<p>支持为图片设置颜色模式和大小</p>
<ul>
<li><a href="https://theme-hope.vuejs.press/zh/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4>组件</h4>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://cactusli.net/demo/page.html</link>
      <guid>https://cactusli.net/demo/page.html</guid>
      <source url="https://cactusli.net/rss.xml">页面配置</source>
      <description>more 注释之前的内容被视为文章摘要。 页面标题 The first H1 title in Markdown will be regarded as page title. Markdown 中的第一个 H1 标题会被视为页面标题。 你可以在 Markdown 的 Frontmatter 中设置页面标题。 页面信息 你可以在 Markdown 的 ...</description>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>more</code> 注释之前的内容被视为文章摘要。</p>
<!-- more -->
<h2>页面标题</h2>
<p>The first H1 title in Markdown will be regarded as page title.</p>
<p>Markdown 中的第一个 H1 标题会被视为页面标题。</p>
<p>你可以在 Markdown 的 Frontmatter 中设置页面标题。</p>
<div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"></div></div>]]></content:encoded>
      <enclosure url="https://cactusli.net/assets/images/cover1.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>1.Collection 类关系图</title>
      <link>https://cactusli.net/posts/Java/Collection/1.Collection%20%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/1.Collection%20%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.html</guid>
      <source url="https://cactusli.net/rss.xml">1.Collection 类关系图</source>
      <description>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。 Collection 类关系图 知识体系结构 介绍 Collection Set TreeSet HashSet LinkedHashSet List ArrayList Vector LinkedList Queue LinkedList Priorit...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:10:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。</p>
</blockquote>
<ul>
<li>Collection 类关系图
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">知识体系结构</a></li>
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li>Collection
<ul>
<li>Set
<ul>
<li><a href="#treeset">TreeSet</a></li>
<li><a href="#hashset">HashSet</a></li>
<li><a href="#linkedhashset">LinkedHashSet</a></li>
</ul>
</li>
<li>List
<ul>
<li><a href="#arraylist">ArrayList</a></li>
<li><a href="#vector">Vector</a></li>
<li><a href="#linkedlist">LinkedList</a></li>
</ul>
</li>
<li>Queue
<ul>
<li><a href="#linkedlist-1">LinkedList</a></li>
<li><a href="#priorityqueue">PriorityQueue</a></li>
</ul>
</li>
</ul>
</li>
<li>Map
<ul>
<li><a href="#treemap">TreeMap</a></li>
<li><a href="#hashmap">HashMap</a></li>
<li><a href="#hashtable">HashTable</a></li>
<li><a href="#linkedhashmap">LinkedHashMap</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9">参考内容</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系结构"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">#</a> 知识体系结构</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_collections_overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#介绍"><span></span></a><a href="#%E4%BB%8B%E7%BB%8D">#</a> 介绍</h2>
<p>容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p>
<ul>
<li>降低编程难度</li>
<li>提高程序性能</li>
<li>提高API间的互操作性</li>
<li>降低学习难度</li>
<li>降低设计和实现相关API的难度</li>
<li>增加程序的重用性</li>
</ul>
<p>Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</p>
<h2><a class="header-anchor" href="#collection"><span></span></a><a href="#collection">#</a> Collection</h2>
<blockquote>
<p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。</p>
</blockquote>
<h3><a class="header-anchor" href="#set"><span></span></a><a href="#set">#</a> Set</h3>
<h4><a class="header-anchor" href="#treeset"><span></span></a><a href="#treeset">#</a> TreeSet</h4>
<p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p>
<h4><a class="header-anchor" href="#hashset"><span></span></a><a href="#hashset">#</a> HashSet</h4>
<p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p>
<h4><a class="header-anchor" href="#linkedhashset"><span></span></a><a href="#linkedhashset">#</a> LinkedHashSet</h4>
<p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p>
<h3><a class="header-anchor" href="#list"><span></span></a><a href="#list">#</a> List</h3>
<h4><a class="header-anchor" href="#arraylist"><span></span></a><a href="#arraylist">#</a> ArrayList</h4>
<p>基于动态数组实现，支持随机访问。</p>
<h4><a class="header-anchor" href="#vector"><span></span></a><a href="#vector">#</a> Vector</h4>
<p>和 ArrayList 类似，但它是线程安全的。</p>
<h4><a class="header-anchor" href="#linkedlist"><span></span></a><a href="#linkedlist">#</a> LinkedList</h4>
<p>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p>
<h3><a class="header-anchor" href="#queue"><span></span></a><a href="#queue">#</a> Queue</h3>
<h4><a class="header-anchor" href="#linkedlist-1"><span></span></a><a href="#linkedlist-1">#</a> LinkedList</h4>
<p>可以用它来实现双向队列。</p>
<h4><a class="header-anchor" href="#priorityqueue"><span></span></a><a href="#priorityqueue">#</a> PriorityQueue</h4>
<p>基于堆结构实现，可以用它来实现优先队列。</p>
<h2><a class="header-anchor" href="#map"><span></span></a><a href="#map">#</a> Map</h2>
<h3><a class="header-anchor" href="#treemap"><span></span></a><a href="#treemap">#</a> TreeMap</h3>
<p>基于红黑树实现。</p>
<h3><a class="header-anchor" href="#hashmap"><span></span></a><a href="#hashmap">#</a> HashMap</h3>
<p>基于哈希表实现。</p>
<h3><a class="header-anchor" href="#hashtable"><span></span></a><a href="#hashtable">#</a> HashTable</h3>
<p>和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p>
<h3><a class="header-anchor" href="#linkedhashmap"><span></span></a><a href="#linkedhashmap">#</a> LinkedHashMap</h3>
<p>使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_collections_overview.png" type="image/png"/>
    </item>
    <item>
      <title>2.ArrayList 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/2.ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/2.ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">2.ArrayList 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>3.LinkedList 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/3.LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/3.LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">3.LinkedList 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>4.Stack &amp; Queue 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/4.Stack%20_%20Queue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/4.Stack%20_%20Queue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">4.Stack &amp; Queue 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>5.PriorityQueue 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/5.PriorityQueue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/5.PriorityQueue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">5.PriorityQueue 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>6.HashSet &amp; HashMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/6.HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/6.HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">6.HashSet &amp; HashMap 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>7.LinkedHashSet&amp;Map 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/7.LinkedHashSet_Map%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/7.LinkedHashSet_Map%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">7.LinkedHashSet&amp;Map 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>8.TreeSet &amp; TreeMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/8.TreeSet%20_%20TreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/8.TreeSet%20_%20TreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">8.TreeSet &amp; TreeMap 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>9.WeakHashMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/9.WeakHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/9.WeakHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">9.WeakHashMap 源码解析</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
    <item>
      <title>1.Java 基础之面向对象</title>
      <link>https://cactusli.net/posts/Java/Foundation/1.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/1.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</guid>
      <source url="https://cactusli.net/rss.xml">1.Java 基础之面向对象</source>
      <description>Java 基础之面向对象 本文主要介绍Java OOP 面向对象基础和相关类图。 Java 基础 - 面向对象 三大特性 封装 继承 多态 类图 泛化关系 (Generalization) 实现关系 (Realization) 聚合关系 (Aggregation) 组合关系 (Composition) 关联关系 (Association) 依赖关系 (...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 17:46:59 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>本文主要介绍Java OOP 面向对象基础和相关类图。</p>
</blockquote>
<ul>
<li>Java 基础 - 面向对象
<ul>
<li>三大特性
<ul>
<li><a href="#%E5%B0%81%E8%A3%85">封装</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li>
<li><a href="#%E5%A4%9A%E6%80%81">多态</a></li>
</ul>
</li>
<li>类图
<ul>
<li><a href="#%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB-generalization">泛化关系 (Generalization)</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB-realization">实现关系 (Realization)</a></li>
<li><a href="#%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB-aggregation">聚合关系 (Aggregation)</a></li>
<li><a href="#%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB-composition">组合关系 (Composition)</a></li>
<li><a href="#%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB-association">关联关系 (Association)</a></li>
<li><a href="#%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-dependency">依赖关系 (Dependency)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png" type="image/png"/>
    </item>
    <item>
      <title>2.Java 基础之常见知识点</title>
      <link>https://cactusli.net/posts/Java/Foundation/2.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/2.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://cactusli.net/rss.xml">2.Java 基础之常见知识点</source>
      <description>[Java 基础之常见知识点](#Java 基础之常见知识点) 数据类型 包装类型 缓存池 String 概览 不可变的好处 String, StringBuffer and StringBuilder String.intern() 运算 参数传递 float 与 double 隐式类型转换 switch 继承 访问权限 抽象类与接口 super 重...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 17:49:59 GMT</pubDate>
      <content:encoded><![CDATA[<p>[Java 基础之常见知识点](#Java 基础之常见知识点)</p>
<ul>
<li>数据类型
<ul>
<li><a href="#%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B">包装类型</a></li>
<li><a href="#%E7%BC%93%E5%AD%98%E6%B1%A0">缓存池</a></li>
</ul>
</li>
<li>String
<ul>
<li><a href="#%E6%A6%82%E8%A7%88">概览</a></li>
<li><a href="#%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E5%A5%BD%E5%A4%84">不可变的好处</a></li>
<li><a href="#string-stringbuffer-and-stringbuilder">String, StringBuffer and StringBuilder</a></li>
<li><a href="#stringintern">String.intern()</a></li>
</ul>
</li>
<li>运算
<ul>
<li><a href="#%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">参数传递</a></li>
<li><a href="#float-%E4%B8%8E-double">float 与 double</a></li>
<li><a href="#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">隐式类型转换</a></li>
<li><a href="#switch">switch</a></li>
</ul>
</li>
<li>继承
<ul>
<li><a href="#%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90">访问权限</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3">抽象类与接口</a></li>
<li><a href="#super">super</a></li>
<li><a href="#%E9%87%8D%E5%86%99%E4%B8%8E%E9%87%8D%E8%BD%BD">重写与重载</a></li>
</ul>
</li>
<li>Object 通用方法
<ul>
<li><a href="#%E6%A6%82%E8%A7%88-1">概览</a></li>
<li><a href="#equals">equals()</a></li>
<li><a href="#hashcode">hashCode()</a></li>
<li><a href="#tostring">toString()</a></li>
<li><a href="#clone">clone()</a></li>
</ul>
</li>
<li>关键字
<ul>
<li><a href="#final">final</a></li>
<li><a href="#static">static</a></li>
</ul>
</li>
<li><a href="#%E5%8F%8D%E5%B0%84">反射</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B">泛型</a></li>
<li><a href="#%E6%B3%A8%E8%A7%A3">注解</a></li>
<li>特性
<ul>
<li><a href="#java-%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">Java 各版本的新特性</a></li>
<li><a href="#java-%E4%B8%8E-c-%E7%9A%84%E5%8C%BA%E5%88%AB">Java 与 C++ 的区别</a></li>
<li><a href="#jre-or-jdk">JRE or JDK</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/f76067a5-7d5f-4135-9549-8199c77d8f1c.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>3.Java 基础之图谱.md</title>
      <link>https://cactusli.net/posts/Java/Foundation/3.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/3.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html</guid>
      <source url="https://cactusli.net/rss.xml">3.Java 基础之图谱.md</source>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
    </item>
    <item>
      <title>4.Java 基础之泛型机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/4.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/4.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">4.Java 基础之泛型机制</source>
      <description>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。本文综合多篇文章后，总结了Java 泛型的...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“<strong>伪泛型</strong>”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“<strong>类型擦除</strong>”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。本文综合多篇文章后，总结了Java 泛型的相关知识，希望可以提升你对Java中泛型的认知效率。</p>
</blockquote>
<ul>
<li>Java 基础之泛型机制
<ul>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BC%95%E5%85%A5%E6%B3%9B%E5%9E%8B">为什么会引入泛型</a></li>
<li>泛型的基本使用
<ul>
<li><a href="#%E6%B3%9B%E5%9E%8B%E7%B1%BB">泛型类</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3">泛型接口</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95">泛型方法</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E9%99%90">泛型的上下限</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84">泛型数组</a></li>
</ul>
</li>
<li>深入理解泛型
<ul>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%98%AF%E4%BC%AA%E6%B3%9B%E5%9E%8B%E6%B3%9B%E5%9E%8B%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">如何理解Java中的泛型是伪泛型？泛型中类型擦除</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4%E5%91%A2">如何证明类型的擦除呢？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E5%90%8E%E4%BF%9D%E7%95%99%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B">如何理解类型擦除后保留的原始类型?</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%A3%80%E6%9F%A5">如何理解泛型的编译期检查？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%A4%9A%E6%80%81%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%96%B9%E6%B3%95">如何理解泛型的多态？泛型的桥接方法</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B">如何理解基本类型不能作为泛型类型？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E5%AE%9E%E4%BE%8B%E5%8C%96">如何理解泛型类型不能实例化？</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E8%83%BD%E4%B8%8D%E8%83%BD%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96">泛型数组：能不能采用具体的泛型类型进行初始化？</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B">泛型数组：如何正确的初始化泛型数组实例？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F">如何理解泛型类中的静态方法和静态变量？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%BC%82%E5%B8%B8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B">如何理解异常中使用泛型？</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B">如何获取泛型的参数类型？</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#为什么会引入泛型"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%BC%95%E5%85%A5%E6%B3%9B%E5%9E%8B">#</a> 为什么会引入泛型</h2>
<blockquote>
<p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p>
</blockquote>
<p>引入泛型的意义在于：</p>
<ul>
<li><strong>适用于多种数据类型执行相同的代码</strong>（代码复用）</li>
</ul>
<p>我们通过一个例子来阐述，先看下下面的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (a </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> b));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> float</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">float</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> float</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (a </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> b));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (a </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> b));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Number</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "+"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> b </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubleValue</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>泛型中的类型在使用时指定，不需要强制类型转换（<strong>类型安全</strong>，编译器会<strong>检查类型</strong>）</li>
</ul>
<p>看下这个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"xxString"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100d</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用上述list中，list中的元素都是Object类型（无法约束其中的类型），所以在取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现<code>java.lang.ClassCastException</code>异常。</p>
<p>引入泛型，它将提供类型的约束，提供编译前的检查：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// list中只能放String, 不能放其它类型的元素</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#泛型的基本使用"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">#</a> 泛型的基本使用</h2>
<p>提示</p>
<p>我们通过一些例子来学习泛型的使用；泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法。一些例子可以参考《李兴华 - Java实战经典》。</p>
<h3><a class="header-anchor" href="#泛型类"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%B1%BB">#</a> 泛型类</h3>
<ul>
<li>从一个简单的泛型类看起：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">         // 此处可以随便写标识符号，T是type的简称  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // var的类型由T指定，即：由外部指定  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){  </span><span style="color:#7F848E;font-style:italic">// 返回值的类型由外部决定  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> var ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){  </span><span style="color:#7F848E;font-style:italic">// 设置的类型也由外部决定  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo06</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Point</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">p</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;() ;     </span><span style="color:#7F848E;font-style:italic">// 里面的var类型为String类型  </span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"it"</span><span style="color:#ABB2BF">) ;                            </span><span style="color:#7F848E;font-style:italic">// 设置字符串  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getVar</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()) ;   </span><span style="color:#7F848E;font-style:italic">// 取得字符串的长度  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>多元泛型</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Notepad</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">       // 此处指定了两个泛型类型  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">     // 此变量的类型由外部决定  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">   // 此变量的类型由外部决定  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> K</span><span style="color:#61AFEF"> getKey</span><span style="color:#ABB2BF">(){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF"> ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">(){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF"> ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setKey</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75;font-style:italic"> key</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> key ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">V</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo09</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Notepad</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">t</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF"> ;        </span><span style="color:#7F848E;font-style:italic">// 定义两个泛型类型的对象  </span></span>
<span class="line"><span style="color:#ABB2BF">        t </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Notepad</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;() ;       </span><span style="color:#7F848E;font-style:italic">// 里面的key为String，value为Integer  </span></span>
<span class="line"><span style="color:#E5C07B">        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setKey</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"汤姆"</span><span style="color:#ABB2BF">) ;        </span><span style="color:#7F848E;font-style:italic">// 设置第一个内容  </span></span>
<span class="line"><span style="color:#E5C07B">        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">) ;            </span><span style="color:#7F848E;font-style:italic">// 设置第二个内容  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"姓名；"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getKey</span><span style="color:#ABB2BF">()) ;      </span><span style="color:#7F848E;font-style:italic">// 取得信息  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"，年龄；"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">()) ;       </span><span style="color:#7F848E;font-style:italic">// 取得信息  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型接口"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3">#</a> 泛型接口</h3>
<ul>
<li>简单的泛型接口</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">        // 在接口上定义泛型  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> ;</span><span style="color:#7F848E;font-style:italic"> // 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> InfoImpl</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">   // 定义泛型接口的子类  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 定义属性  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> InfoImpl</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){     </span><span style="color:#7F848E;font-style:italic">// 通过构造方法设置属性内容  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(var) ;    </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF"> ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo24</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> arsg</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;        </span><span style="color:#7F848E;font-style:italic">// 声明接口对象  </span></span>
<span class="line"><span style="color:#ABB2BF">        i </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> InfoImpl</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;(</span><span style="color:#98C379">"汤姆"</span><span style="color:#ABB2BF">) ;  </span><span style="color:#7F848E;font-style:italic">// 通过子类实例化对象  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"内容："</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> i</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getVar</span><span style="color:#ABB2BF">()) ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型方法"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95">#</a> 泛型方法</h3>
<p>泛型方法，是在调用方法的时候指明泛型的具体类型。重点看下泛型的方法（图参考自：https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html）</p>
<ul>
<li>定义泛型方法语法格式</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>调用泛型方法语法格式</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>说明一下，定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型T作为方法的返回值。</p>
<p><code>Class&lt;T&gt;</code>的作用就是指明泛型的具体类型，而<code>Class&lt;T&gt;</code>类型的变量c，可以用来创建泛型类的对象。</p>
<p>为什么要用变量c来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。</p>
<p>泛型方法要求的参数是<code>Class&lt;T&gt;</code>类型，而<code>Class.forName()</code>方法的返回值也是<code>Class&lt;T&gt;</code>，因此可以用<code>Class.forName()</code>作为参数。其中，<code>forName()</code>方法中的参数是何种类型，返回的<code>Class&lt;T&gt;</code>就是何种类型。在本例中，<code>forName()</code>方法中传入的是User类的完整路径，因此返回的是<code>Class&lt;User&gt;</code>类型的对象，因此调用泛型方法时，变量c的类型就是<code>Class&lt;User&gt;</code>，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。</p>
<p>当然，泛型方法不是仅仅可以有一个参数<code>Class&lt;T&gt;</code>，可以根据需要添加其他参数。</p>
<p><strong>为什么要使用泛型方法呢</strong>？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p>
<h3><a class="header-anchor" href="#泛型的上下限"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%8A%E4%B8%8B%E9%99%90">#</a> 泛型的上下限</h3>
<ul>
<li><strong>先看下如下的代码，很明显是会报错的</strong> （具体错误原因请参考后文）。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF">{}</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> B</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 如下两个方法不会报错</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funA</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">A</span><span style="color:#E06C75"> a) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...          </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funB</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">B</span><span style="color:#E06C75"> b) {</span></span>
<span class="line"><span style="color:#61AFEF">    funA</span><span style="color:#E06C75">(b)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...             </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 如下funD方法会报错</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funC</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listA) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...          </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funD</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">B</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listB) {</span></span>
<span class="line"><span style="color:#61AFEF">    funC</span><span style="color:#E06C75">(listB)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Unresolved compilation problem: The method doPrint(List&lt;A&gt;) in the type test is not applicable for the arguments (List&lt;B&gt;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...             </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么如何解决呢？</p>
<p>为了解决泛型中隐含的转换问题，Java泛型加入了类型参数的上下边界机制。<code>&lt;? extends A&gt;</code>表示该类型参数可以是A(上边界)或者A的子类类型。编译时擦除到类型A，即用A类型代替类型参数。这种方法可以解决开始遇到的问题，编译器知道类型参数的范围，如果传入的实例类型B是在这个范围内的话允许转换，这时只要一次类型转换就可以了，运行时会把对象当做A的实例看待。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funC</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listA) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...          </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> funD</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">B</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> listB) {</span></span>
<span class="line"><span style="color:#61AFEF">    funC</span><span style="color:#E06C75">(listB)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // OK</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...             </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>泛型上下限的引入</strong></li>
</ul>
<p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p>
<p>上限</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Number</span><span style="color:#ABB2BF">&gt;{</span><span style="color:#7F848E;font-style:italic">    // 此处泛型只能是数字类型</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 定义泛型变量</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(){    </span><span style="color:#7F848E;font-style:italic">// 直接打印</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">() ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> demo1</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){</span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;() ;        </span><span style="color:#7F848E;font-style:italic">// 声明Integer的泛型对象</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下限</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;{</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> var </span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 定义泛型变量</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setVar</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> var</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> var ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getVar</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(){    </span><span style="color:#7F848E;font-style:italic">// 直接打印</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">var</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">() ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo21</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){</span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;() ;        </span><span style="color:#7F848E;font-style:italic">// 声明String的泛型对象</span></span>
<span class="line"><span style="color:#E5C07B">        Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">i2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;() ;        </span><span style="color:#7F848E;font-style:italic">// 声明Object的泛型对象</span></span>
<span class="line"><span style="color:#E5C07B">        i1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"hello"</span><span style="color:#ABB2BF">) ;</span></span>
<span class="line"><span style="color:#E5C07B">        i2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVar</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">()) ;</span></span>
<span class="line"><span style="color:#61AFEF">        fun</span><span style="color:#ABB2BF">(i1) ;</span></span>
<span class="line"><span style="color:#61AFEF">        fun</span><span style="color:#ABB2BF">(i2) ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fun</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Info</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">temp</span><span style="color:#ABB2BF">){    </span><span style="color:#7F848E;font-style:italic">// 只能接收String或Object类型的泛型，String类的父类只有Object类</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(temp </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", "</span><span style="color:#ABB2BF">) ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小结</strong></p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> 无限制通配符</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 使用原则《Effictive Java》</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</span></span>
<span class="line"><span style="color:#D19A66">1.</span><span style="color:#E06C75"> 如果参数化类型表示一个 T 的生产者，使用 </span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD"> ?</span><span style="color:#E06C75"> extends T</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#D19A66">2.</span><span style="color:#E06C75"> 如果它表示一个 T 的消费者，就使用 </span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">；</span></span>
<span class="line"><span style="color:#D19A66">3.</span><span style="color:#E06C75"> 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>再看一个实际例子，<strong>加深印象</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#56B6C2">  &lt;</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> extends </span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> E</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> max</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> e1) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (e1 </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //迭代器返回的元素属于 E 的某个子类型</span></span>
<span class="line"><span style="color:#E5C07B">    Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> iterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> iterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(result)</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#E06C75">            result </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的类型参数 E 的范围是<code>&lt;E extends Comparable&lt;? super E&gt;&gt;</code>，我们可以分步查看：</p>
<ul>
<li>要进行比较，所以 E 需要是可比较的类，因此需要 <code>extends Comparable&lt;…&gt;</code>（注意这里不要和继承的 <code>extends</code> 搞混了，不一样）</li>
<li><code>Comparable&lt; ? super E&gt;</code> 要对 E 进行比较，即 E 的消费者，所以需要用 super</li>
<li>而参数 <code>List&lt; ? extends E&gt;</code> 表示要操作的数据是 E 的子类的列表，指定上限，这样容器才够大</li>
<li><strong>多个限制</strong></li>
</ul>
<p>使用&amp;符号</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Client</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //工资低于2500元的上斑族并且站立的乘客车票打8折</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Staff</span><span style="color:#61AFEF"> &amp; </span><span style="color:#E5C07B">Passenger</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> discount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> t</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">2500</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isStanding</span><span style="color:#ABB2BF">()){</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"恭喜你！您的车票打八折！"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        discount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Me</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型数组"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84">#</a> 泛型数组</h3>
<blockquote>
<p>具体可以参考下文中关于泛型数组的理解。</p>
</blockquote>
<p>首先，我们泛型数组相关的申明：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list11 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list12 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，需要强转类型 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list13 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">String</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[]) </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list14 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list15 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list6 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么通常我们如何用呢？</p>
<ul>
<li>讨巧的使用场景</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericsDemo30</span><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">[]){  </span></span>
<span class="line"><span style="color:#E5C07B">        Integer</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">[] </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> fun1</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">6</span><span style="color:#ABB2BF">) ;   </span><span style="color:#7F848E;font-style:italic">// 返回泛型数组  </span></span>
<span class="line"><span style="color:#61AFEF">        fun2</span><span style="color:#ABB2BF">(i) ;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF">[] fun1</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">...</span><span style="color:#E06C75;font-style:italic">arg</span><span style="color:#ABB2BF">){  </span><span style="color:#7F848E;font-style:italic">// 接收可变参数  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> arg ;            </span><span style="color:#7F848E;font-style:italic">// 返回泛型数组  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fun2</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> param</span><span style="color:#ABB2BF">[]){   </span><span style="color:#7F848E;font-style:italic">// 输出  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"接收泛型数组："</span><span style="color:#ABB2BF">) ;  </span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> t</span><span style="color:#C678DD">:</span><span style="color:#ABB2BF">param){  </span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(t </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "、"</span><span style="color:#ABB2BF">) ;  </span></span>
<span class="line"><span style="color:#ABB2BF">        }  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>合理使用</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> ArrayWithTypeToken</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> type</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size) {</span></span>
<span class="line"><span style="color:#E06C75">    array </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">T</span><span style="color:#E06C75">[]) </span><span style="color:#E5C07B">Array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(type, size);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体可以查看后文解释。</p>
<h2><a class="header-anchor" href="#深入理解泛型"><span></span></a><a href="#%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">#</a> 深入理解泛型</h2>
<p>提示</p>
<p>我们通过泛型背后的类型擦除以及相关的问题来进一步理解泛型。</p>
<h3><a class="header-anchor" href="#如何理解java中的泛型是伪泛型-泛型中类型擦除"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3java%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E6%98%AF%E4%BC%AA%E6%B3%9B%E5%9E%8B-%E6%B3%9B%E5%9E%8B%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">#</a> 如何理解Java中的泛型是伪泛型？泛型中类型擦除</h3>
<blockquote>
<p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“<strong>伪泛型</strong>”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“<strong>类型擦除</strong>”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。理解类型擦除对于用好泛型是很有帮助的，尤其是一些看起来“疑难杂症”的问题，弄明白了类型擦除也就迎刃而解了。</p>
</blockquote>
<p><strong>泛型的类型擦除原则</strong>是：</p>
<ul>
<li>消除类型参数声明，即删除<code>&lt;&gt;</code>及其包围的部分。</li>
<li>根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。</li>
<li>为了保证类型安全，必要时插入强制类型转换代码。</li>
<li>自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。</li>
</ul>
<p><strong>那么如何进行擦除的呢</strong>？</p>
<p>参考自：http://softlab.sdut.edu.cn/blog/subaochen/2017/01/generics-type-erasure/</p>
<ul>
<li>擦除类定义中的类型参数 - 无限制类型擦除</li>
</ul>
<p>当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<code>&lt;T&gt;</code>和<code>&lt;?&gt;</code>的类型参数都被替换为Object。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>擦除类定义中的类型参数 - 有限制类型擦除</li>
</ul>
<p>当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<code>&lt;T extends Number&gt;</code>和<code>&lt;? extends Number&gt;</code>的类型参数被替换为<code>Number</code>，<code>&lt;? super Number&gt;</code>被替换为Object。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>擦除方法定义中的类型参数</li>
</ul>
<p>擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的，这里仅以擦除方法定义中的有限制类型参数为例。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#如何证明类型的擦除呢"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4%E5%91%A2">#</a> 如何证明类型的擦除呢？</h3>
<blockquote>
<p>我们通过两个例子证明Java类型的类型擦除</p>
</blockquote>
<ul>
<li>原始类型相等</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">        list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"abc"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">        list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">123</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">// true</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们定义了两个ArrayList数组，不过一个是<code>ArrayList&lt;String&gt;</code>泛型类型的，只能存储字符串；一个是<code>ArrayList&lt;Integer&gt;</code>泛型类型的，只能存储整数，最后，我们通过list1对象和list2对象的<code>getClass()</code>方法获取他们的类的信息，最后发现结果为true。说明泛型类型String和Integer都被擦除掉了，只剩下原始类型。</p>
<ul>
<li>通过反射添加其它类型元素</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);  </span><span style="color:#7F848E;font-style:italic">//这样调用 add 方法只能存储整形，因为泛型类型的实例为 Integer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"add"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(list, </span><span style="color:#98C379">"asd"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); i++) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(i));</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序中定义了一个<code>ArrayList</code>泛型类型实例化为<code>Integer</code>对象，如果直接调用<code>add()</code>方法，那么只能存储整数数据，不过当我们利用反射调用<code>add()</code>方法的时候，却可以存储字符串，这说明了<code>Integer</code>泛型实例在编译之后被擦除掉了，只保留了原始类型。</p>
<h3><a class="header-anchor" href="#如何理解类型擦除后保留的原始类型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%E5%90%8E%E4%BF%9D%E7%95%99%E7%9A%84%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B">#</a> 如何理解类型擦除后保留的原始类型?</h3>
<blockquote>
<p>在上面，两次提到了原始类型，什么是原始类型？</p>
</blockquote>
<p><strong>原始类型</strong> 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用Object）替换。</p>
<ul>
<li>原始类型Object</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic">  value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pair的原始类型为:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic">  value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在<code>Pair&lt;T&gt;</code>中，<code>T</code> 是一个无限定的类型变量，所以用Object替换，其结果就是一个普通的类，如同泛型加入Java语言之前的已经实现的样子。在程序中可以包含不同类型的Pair，如<code>Pair&lt;String&gt;</code>或<code>Pair&lt;Integer&gt;</code>，但是擦除类型后他们的就成为原始的Pair类型了，原始类型都是Object。</p>
<p>从上面章节，我们也可以明白ArrayList被擦除类型后，原始类型也变为Object，所以通过反射我们就可以存储字符串了。</p>
<p>如果类型变量有限定，那么原始类型就用第一个边界的类型变量类替换。</p>
<p>比如: Pair这样声明的话</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Comparable</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么原始类型就是Comparable。</p>
<p>要区分原始类型和泛型变量的类型。</p>
<p>在调用泛型方法时，可以指定泛型，也可以不指定泛型:</p>
<ul>
<li>在不指定泛型的情况下，泛型变量的类型为该方法中的几种类型的同一父类的最小级，直到Object</li>
<li>在指定泛型的情况下，该方法的几种类型必须是该泛型的实例的类型或者其子类</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /**不指定泛型的时候*/</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//这两个参数都是Integer，所以T为Integer类型  </span></span>
<span class="line"><span style="color:#E5C07B">        Number</span><span style="color:#E06C75"> f</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1.2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//这两个参数一个是Integer，一个是Float，所以取同一父类的最小级，为Number  </span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> o</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"asd"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//这两个参数一个是Integer，一个是String，所以取同一父类的最小级，为Object  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /**指定泛型的时候*/</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> Test.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Integer</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//指定了Integer，所以只能为Integer类型或者其子类  </span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> Test.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Integer</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2.2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译错误，指定了Integer，不能为Float  </span></span>
<span class="line"><span style="color:#E5C07B">        Number</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> Test.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Number</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2.2</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//指定为Number，所以可以为Integer和Float  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //这是一个简单的泛型方法  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#ABB2BF">){  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> y;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型为Object，就比如ArrayList中，如果不指定泛型，那么这个ArrayList可以存储任意的对象。</p>
<ul>
<li>Object泛型</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {  </span></span>
<span class="line"><span style="color:#E5C07B">    ArrayList</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"121"</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#如何理解泛型的编译期检查"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%A3%80%E6%9F%A5">#</a> 如何理解泛型的编译期检查？</h3>
<blockquote>
<p>既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量String会在编译的时候变为Object类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</p>
</blockquote>
<p>Java编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。</p>
<p>例如：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD">  void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"123"</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">    list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">123</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">//编译错误  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的程序中，使用add方法添加一个整型，在IDE中，直接会报错，说明这就是在编译之前的检查，因为如果是在编译之后检查，类型擦除后，原始类型为Object，是应该允许任意引用类型添加的。可实际上却不是这样的，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</p>
<p>那么，<strong>这个类型检查是针对谁的呢</strong>？我们先看看参数化类型和原始类型的兼容。</p>
<p>以 ArrayList举例子，以前的写法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在的写法:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //第一种 情况</span></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //第二种 情况</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样是没有错误的，不过会有个编译时警告。</p>
<p>不过在第一种情况，可以实现与完全使用泛型参数一样的效果，第二种则没有效果。</p>
<p>因为类型检查就是编译时完成的，new ArrayList()只是在内存中开辟了一个存储空间，可以存储任何类型对象，而真正涉及类型检查的是它的引用，因为我们是使用它引用list1来调用它的方法，比如说调用add方法，所以list1引用能完成泛型类型的检查。而引用list2没有使用泛型，所以不行。</p>
<p>举例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">list1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#E5C07B">        list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#E5C07B">        list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译错误  </span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> str1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//返回类型就是String  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ArrayList</span><span style="color:#E06C75"> list2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;();  </span></span>
<span class="line"><span style="color:#E5C07B">        list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#E5C07B">        list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> object</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> list2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//返回类型就是Object  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"11"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译通过  </span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">22</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//编译错误  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> str2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//返回类型就是String  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的例子，我们可以明白，<strong>类型检查就是针对引用的，谁是一个引用，用这个引用调用泛型方法，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象</strong>。</p>
<p><strong>泛型中参数话类型为什么不考虑继承关系</strong>？</p>
<p>在Java中，像下面形式的引用传递是不允许的:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误  </span></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>我们先看第一种情况，将第一种情况拓展成下面的形式：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> list1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，在第4行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用list2引用用get()方法取值的时候，返回的都是String类型的对象（上面提到了，类型检测是根据引用来决定的），可是它里面实际上已经被我们存放了Object类型的对象，这样就会有<code>ClassCastException</code>了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。（这也是泛型出现的原因，就是为了解决类型转换的问题，我们不能违背它的初衷）。</p>
<ul>
<li>再看第二种情况，将第二种情况拓展成下面的形式：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">list1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> list1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，这样的情况比第一种情况好的多，最起码，在我们用list2取值的时候不会出现ClassCastException，因为是从String转换为Object。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。</p>
<p>我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。再说，你如果又用list2往里面add()新的对象，那么到时候取得时候，我怎么知道我取出来的到底是String类型的，还是Object类型的呢？</p>
<p>所以，要格外注意，泛型中的引用传递的问题。</p>
<h3><a class="header-anchor" href="#如何理解泛型的多态-泛型的桥接方法"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%A4%9A%E6%80%81-%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%A1%A5%E6%8E%A5%E6%96%B9%E6%B3%95">#</a> 如何理解泛型的多态？泛型的桥接方法</h3>
<blockquote>
<p>类型擦除会造成多态的冲突，而JVM解决方法就是桥接方法。</p>
</blockquote>
<p>现在有这样一个泛型类：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们想要一个子类继承它。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> DateInter</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Date</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(value);  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个子类中，我们设定父类的泛型类型为<code>Pair&lt;Date&gt;</code>，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：将父类的泛型类型限定为Date，那么父类里面的两个方法的参数都为Date类型。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75"> value) {  </span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的<code>@Override</code>标签中也可以看到，一点问题也没有，实际上是这样的吗？</p>
<p>分析：实际上，类型擦除后，父类的的泛型类型全部变为了原始类型Object，所以父类编译之后会变成下面的样子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic">  value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看子类的两个重写的方法的类型：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75"> value) {  </span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(value);</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}  </span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来分析setValue方法，父类的类型是Object，而子类的类型是Date，参数类型不一样，这如果实在普通的继承关系中，根本就不会是重写，而是重载。 我们在一个main方法测试一下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws ClassNotFoundException {  </span></span>
<span class="line"><span style="color:#E5C07B">        DateInter</span><span style="color:#E06C75"> dateInter </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DateInter</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">        dateInter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">());</span><span style="color:#E06C75">                  </span></span>
<span class="line"><span style="color:#E5C07B">        dateInter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic"> //编译错误  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是重载，那么子类中两个setValue方法，一个是参数Object类型，一个是Date类型，可是我们发现，根本就没有这样的一个子类继承自父类的Object类型参数的方法。所以说，却是是重写了，而不是重载了。</p>
<p><strong>为什么会这样呢</strong>？</p>
<p>原因是这样的，我们传入父类的泛型类型是Date，<code>Pair&lt;Date&gt;</code>，我们的本意是将泛型类变为如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Date</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Date</span><span style="color:#E06C75;font-style:italic"> value</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {  </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> value;  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再子类中重写参数类型为Date的那两个方法，实现继承中的多态。</p>
<p>可是由于种种原因，虚拟机并不能将泛型类型变为Date，只能将类型擦除掉，变为原始类型Object。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM知道你的本意吗？知道！！！可是它能直接实现吗，不能！！！如果真的不能的话，那我们怎么去重写我们想要的Date类型参数的方法啊。</p>
<blockquote>
<p>于是JVM采用了一个特殊的方法，来完成这项功能，那就是桥方法。</p>
</blockquote>
<p>首先，我们用javap -c className的方式反编译下DateInter子类的字节码，结果如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.tao.test.DateInter </span><span style="color:#C678DD">extends</span><span style="color:#E06C75"> com.tao.test.</span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Date</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#61AFEF">  com.tao.test.DateInter</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokespecial #</span><span style="color:#D19A66">8</span><span style="color:#7F848E;font-style:italic">                  // Method com/tao/test/Pair."&lt;init&gt;":()V  </span></span>
<span class="line"><span style="color:#D19A66">       4</span><span style="color:#C678DD">:</span><span style="color:#C678DD"> return</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">java</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">util</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">Date</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  //我们重写的setValue方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_1  </span></span>
<span class="line"><span style="color:#D19A66">       2</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokespecial #</span><span style="color:#D19A66">16</span><span style="color:#7F848E;font-style:italic">                 // Method com/tao/test/Pair.setValue:(Ljava/lang/Object;)V  </span></span>
<span class="line"><span style="color:#D19A66">       5</span><span style="color:#C678DD">:</span><span style="color:#C678DD"> return</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">    //我们重写的getValue方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokespecial #</span><span style="color:#D19A66">23</span><span style="color:#7F848E;font-style:italic">                 // Method com/tao/test/Pair.getValue:()Ljava/lang/Object;  </span></span>
<span class="line"><span style="color:#D19A66">       4</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> checkcast     #</span><span style="color:#D19A66">26</span><span style="color:#7F848E;font-style:italic">                 // class java/util/Date  </span></span>
<span class="line"><span style="color:#D19A66">       7</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> areturn  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">     //编译时由编译器生成的桥方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokevirtual #</span><span style="color:#D19A66">28</span><span style="color:#7F848E;font-style:italic">                 // Method getValue:()Ljava/util/Date 去调用我们重写的getValue方法;  </span></span>
<span class="line"><span style="color:#D19A66">       4</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> areturn  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setValue</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">java</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75;font-style:italic">Object</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   //编译时由编译器生成的桥方法  </span></span>
<span class="line"><span style="color:#E06C75">    Code</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       0</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_0  </span></span>
<span class="line"><span style="color:#D19A66">       1</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> aload_1  </span></span>
<span class="line"><span style="color:#D19A66">       2</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> checkcast     #</span><span style="color:#D19A66">26</span><span style="color:#7F848E;font-style:italic">                 // class java/util/Date  </span></span>
<span class="line"><span style="color:#D19A66">       5</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> invokevirtual #</span><span style="color:#D19A66">30</span><span style="color:#7F848E;font-style:italic">                 // Method setValue:(Ljava/util/Date; 去调用我们重写的setValue方法)V  </span></span>
<span class="line"><span style="color:#D19A66">       8</span><span style="color:#C678DD">:</span><span style="color:#C678DD"> return</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从编译的结果来看，我们本意重写setValue和getValue方法的子类，竟然有4个方法，其实不用惊奇，最后的两个方法，就是编译器自己生成的桥方法。可以看到桥方法的参数类型都是Object，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的setvalue和getValue方法上面的@Oveerride只不过是假象。而桥方法的内部实现，就只是去调用我们自己重写的那两个方法。</p>
<p>所以，虚拟机巧妙的使用了桥方法，来解决了类型擦除和多态的冲突。</p>
<p>不过，要提到一点，这里面的setValue和getValue这两个桥方法的意义又有不同。</p>
<p>setValue方法是为了解决类型擦除与多态之间的冲突。</p>
<p>而getValue却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：</p>
<p>那么父类的getValue方法如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而子类重写的方法是：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> getValue</span><span style="color:#E06C75">() {  </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这在普通的类继承中也是普遍存在的重写，这就是协变。</p>
<p>并且，还有一点也许会有疑问，子类中的桥方法<code>Object getValue()</code>和<code>Date getValue()</code>是同时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写Java代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来“不合法”的事情，然后交给虚拟器去区别。</p>
<h3><a class="header-anchor" href="#如何理解基本类型不能作为泛型类型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B">#</a> 如何理解基本类型不能作为泛型类型？</h3>
<blockquote>
<p>比如，我们没有<code>ArrayList&lt;int&gt;</code>，只有<code>ArrayList&lt;Integer&gt;</code>, 为何？</p>
</blockquote>
<p>因为当类型擦除后，ArrayList的原始类型变为Object，但是Object类型不能存储int值，只能引用Integer的值。</p>
<p>另外需要注意，我们能够使用<code>list.add(1)</code>是因为Java基础类型的自动装箱拆箱操作。</p>
<h3><a class="header-anchor" href="#如何理解泛型类型不能实例化"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E5%AE%9E%E4%BE%8B%E5%8C%96">#</a> 如何理解泛型类型不能实例化？</h3>
<blockquote>
<p>不能实例化泛型类型, 这本质上是由于类型擦除决定的：</p>
</blockquote>
<p>我们可以看到如下代码会在编译器中报错：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">T</span><span style="color:#E06C75"> test </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> T</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // ERROR</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件，所以自然就不行了，此外由于<code>T</code> 被擦除为 <code>Object</code>，如果可以 <code>new T()</code> 则就变成了 <code>new Object()</code>，失去了本意。   如果我们确实需要实例化一个泛型，应该如何做呢？可以通过反射实现：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> newTclass</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75"> T </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> clazz) throws InstantiationException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IllegalAccessException {</span></span>
<span class="line"><span style="color:#E5C07B">    T</span><span style="color:#E06C75"> obj </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> clazz</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> obj</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#泛型数组-能不能采用具体的泛型类型进行初始化"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84-%E8%83%BD%E4%B8%8D%E8%83%BD%E9%87%87%E7%94%A8%E5%85%B7%E4%BD%93%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 泛型数组：能不能采用具体的泛型类型进行初始化？</h3>
<p>我们先来看下Oracle官网提供的一个例子：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] lsa </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Not really allowed.</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lsa</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[] oa </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[]) o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> li </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">li</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">oa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> li</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Unsound, but passes run time store check</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lsa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // Run-time error ClassCastException.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 JVM 泛型的擦除机制，所以上面代码可以给 <code>oa[1]</code> 赋值为 ArrayList 也不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现 <code>ClassCastException</code>，如果可以进行泛型数组的声明则上面说的这种情况在编译期不会出现任何警告和错误，只有在运行时才会出错，但是泛型的出现就是为了消灭 <code>ClassCastException</code>，所以如果 Java 支持泛型数组初始化操作就是搬起石头砸自己的脚。</p>
<p>而对于下面的代码来说是成立的：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] lsa </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // OK, array of unbounded wildcard type.</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> lsa</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[] oa </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">[]) o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> li </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">li</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">oa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> li</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // Correct.</span></span>
<span class="line"><span style="color:#E5C07B">Integer</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Integer) lsa[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // OK</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以说采用通配符的方式初始化泛型数组是允许的，因为对于通配符的方式最后取出数据是要做显式类型转换的，符合预期逻辑。综述就是说Java 的泛型数组初始化时数组类型不能是具体的泛型类型，只能是通配符的形式，因为具体类型会导致可存入任意类型对象，在取出时会发生类型转换异常，会与泛型的设计思想冲突，而通配符形式本来就需要自己强转，符合预期。</p>
<p>Oracle 官方文档：<a href="https://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/tutorial/extra/generics/fineprint.html在新窗口打开</a></p>
<p>更进一步的，我们看看如下的代码：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list11 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list12 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，需要强转类型 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list13 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">String</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[]) </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list14 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //编译错误，非法创建 </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list15 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK </span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] list6 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#E06C75">[</span><span style="color:#D19A66">10</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //OK，但是会有警告</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为在 Java 中是不能创建一个确切的泛型类型的数组的，除非是采用通配符的方式且要做显式类型转换才可以。</p>
<h3><a class="header-anchor" href="#泛型数组-如何正确的初始化泛型数组实例"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B">#</a> 泛型数组：如何正确的初始化泛型数组实例？</h3>
<blockquote>
<p>这个无论我们通过<code>new ArrayList[10]</code> 的形式还是通过泛型通配符的形式初始化泛型数组实例都是存在警告的，也就是说仅仅语法合格，运行时潜在的风险需要我们自己来承担，因此那些方式初始化泛型数组都不是最优雅的方式。</p>
</blockquote>
<p>我们在使用到泛型数组的场景下应该尽量使用列表集合替换，此外也可以通过使用 <code>java.lang.reflect.Array.newInstance(Class&lt;T&gt; componentType, int length)</code> 方法来创建一个具有指定类型和维度的数组，如下：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ArrayWithTypeToken</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75">[] array</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayWithTypeToken</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">type</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        array </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">[]) </span><span style="color:#E5C07B">Array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(type, size);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> put</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> item</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        array[index] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> item;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> get</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> array[index];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF">[] create</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> array;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">ArrayWithTypeToken</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> arrayToken </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayWithTypeToken</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 100</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Integer</span><span style="color:#E06C75">[] array </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> arrayToken</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以使用反射来初始化泛型数组算是优雅实现，因为泛型类型 <code>T</code>在运行时才能被确定下来，我们能创建泛型数组也必然是在 Java 运行时想办法，而运行时能起作用的技术最好的就是反射了。</p>
<h3><a class="header-anchor" href="#如何理解泛型类中的静态方法和静态变量"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F">#</a> 如何理解泛型类中的静态方法和静态变量？</h3>
<blockquote>
<p>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数</p>
</blockquote>
<p>举例说明：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test2</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> one</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">   //编译错误    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B">  T</span><span style="color:#61AFEF"> show</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> one</span><span style="color:#ABB2BF">){ </span><span style="color:#7F848E;font-style:italic">//编译错误    </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;    </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为泛型类中的泛型参数的实例化是在定义对象的时候指定的，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</p>
<p>但是要注意区分下面的一种情况：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test2</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF"> &gt;</span><span style="color:#E5C07B">T</span><span style="color:#61AFEF"> show</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> one</span><span style="color:#ABB2BF">){ </span><span style="color:#7F848E;font-style:italic">//这是正确的    </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;    </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的 T，而不是泛型类中的T。</p>
<h3><a class="header-anchor" href="#如何理解异常中使用泛型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%BC%82%E5%B8%B8%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B">#</a> 如何理解异常中使用泛型？</h3>
<ul>
<li><strong>不能抛出也不能捕获泛型类的对象</strong>。事实上，泛型类扩展Throwable都不合法。例如：下面的定义将不会通过编译：</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Problem</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么不能扩展Throwable，因为异常都是在运行时捕获和抛出的，而在编译的时候，泛型信息全都会被擦除掉，那么，假设上面的编译可行，那么，在看下面的定义：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Integer</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e1</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Number</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e2</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型信息被擦除后，那么两个地方的catch都变为原始类型Object，那么也就是说，这两个地方的catch变的一模一样,就相当于下面的这样</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Object</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e1</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Problem</span><span style="color:#E06C75">&lt;</span><span style="color:#E06C75;font-style:italic">Object</span><span style="color:#E06C75">&gt; </span><span style="color:#E06C75;font-style:italic">e2</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个当然就是不行的。</p>
<ul>
<li><strong>不能再catch子句中使用泛型变量</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> t) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">//编译错误</span></span>
<span class="line"><span style="color:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为泛型信息在编译的时候已经变为原始类型，也就是说上面的T会变为原始类型Throwable，那么如果可以再catch子句中使用泛型变量，那么，下面的定义呢：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> t){</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">//编译错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">IndexOutOfBounds</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }                         </span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据异常捕获的原则，一定是子类在前面，父类在后面，那么上面就违背了这个原则。即使你在使用该静态方法的使用T是<code>ArrayIndexOutofBounds</code>，在编译之后还是会变成Throwable，<code>ArrayIndexOutofBounds</code>是IndexOutofBounds的子类，违背了异常捕获的原则。所以java为了避免这样的情况，禁止在catch子句中使用泛型变量。</p>
<ul>
<li>但是在异常声明中可以使用类型变量。下面方法是合法的。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> extends Throwable</span><span style="color:#56B6C2">&gt;</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doWork</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75"> t) throws T {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75">{</span></span>
<span class="line"><span style="color:#ABB2BF">        ...</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> realCause</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">initCause</span><span style="color:#ABB2BF">(realCause);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的这样使用是没问题的。</p>
<h3><a class="header-anchor" href="#如何获取泛型的参数类型"><span></span></a><a href="#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B">#</a> 如何获取泛型的参数类型？</h3>
<blockquote>
<p>既然类型被擦除了，那么如何获取泛型的参数类型呢？可以通过反射（<code>java.lang.reflect.Type</code>）获取泛型</p>
</blockquote>
<p><code>java.lang.reflect.Type</code>是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 以上这些类型都实现Type接口。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GenericType</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> data</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF"> getData</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> data;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setData</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> data</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">data</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> data;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        GenericType</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">genericType</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> GenericType</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;() {};</span></span>
<span class="line"><span style="color:#E5C07B">        Type</span><span style="color:#E06C75"> superclass</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> genericType</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getGenericSuperclass</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //getActualTypeArguments 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span></span>
<span class="line"><span style="color:#E5C07B">        Type</span><span style="color:#E06C75"> type</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> ((ParameterizedType) superclass).</span><span style="color:#61AFEF">getActualTypeArguments</span><span style="color:#ABB2BF">()[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]; </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(type);</span><span style="color:#7F848E;font-style:italic">//class java.lang.String</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>ParameterizedType</code>:</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> ParameterizedType</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Type</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span></span>
<span class="line"><span style="color:#E5C07B">    Type</span><span style="color:#61AFEF">[] getActualTypeArguments</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //返回当前class或interface声明的类型, 如List&lt;?&gt;返回List</span></span>
<span class="line"><span style="color:#E5C07B">    Type</span><span style="color:#61AFEF"> getRawType</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //返回所属类型. 如,当前类型为O&lt;T&gt;.I&lt;S&gt;, 则返回O&lt;T&gt;. 顶级类型将返回null </span></span>
<span class="line"><span style="color:#E5C07B">    Type</span><span style="color:#61AFEF"> getOwnerType</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-generic-4.png" type="image/png"/>
    </item>
    <item>
      <title>5.Java 基础之注解机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/5.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/5.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%A8%E8%A7%A3%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">5.Java 基础之注解机制</source>
      <description>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。 Java 基础之注解机制 注解基础 Java内置注解 内置注解 - @Override 内置注解 - @Deprecated 内置注解 - @SuppressWarnings 元注解 元注解 - @...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p>
</blockquote>
<ul>
<li>Java 基础之注解机制
<ul>
<li>注解基础
<ul>
<li>Java内置注解
<ul>
<li>[内置注解 - @Override](#内置注解</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>6.Java 基础之异常机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/6.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/6.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">6.Java 基础之异常机制</source>
      <description>Java异常是Java提供的一种识别及响应错误的一致性机制，java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。本文综合多篇文章后，总结了Java 异常的相关知识，希望可以提升你对Java中异常的认知效率。@pdai Java 基础之异常机制 异常的层次结构 Throwable Error（错误） Exc...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java异常是Java提供的一种识别及响应错误的一致性机制，java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。本文综合多篇文章后，总结了Java 异常的相关知识，希望可以提升你对Java中异常的认知效率。@pdai</p>
</blockquote>
<ul>
<li>Java 基础之异常机制
<ul>
<li>异常的层次结构
<ul>
<li><a href="#throwable">Throwable</a></li>
<li><a href="#error%E9%94%99%E8%AF%AF">Error（错误）</a></li>
<li><a href="#exception%E5%BC%82%E5%B8%B8">Exception（异常）</a></li>
<li><a href="#%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8checked-exceptions%E5%92%8C%E4%B8%8D%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8unchecked-exceptions">可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）</a></li>
</ul>
</li>
<li>异常基础
<ul>
<li><a href="#%E5%BC%82%E5%B8%B8%E5%85%B3%E9%94%AE%E5%AD%97">异常关键字</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E7%94%B3%E6%98%8Ethrows">异常的申明(throws)</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8A%9B%E5%87%BAthrow">异常的抛出(throw)</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89">异常的自定义</a></li>
<li>异常的捕获
<ul>
<li><a href="#try-catch">try-catch</a></li>
<li><a href="#try-catch-finally">try-catch-finally</a></li>
<li><a href="#try-finally">try-finally</a></li>
<li><a href="#try-with-resource">try-with-resource</a></li>
</ul>
</li>
<li><a href="#%E5%BC%82%E5%B8%B8%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93">异常基础总结</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%82%E5%B8%B8">常用的异常</a></li>
</ul>
</li>
<li>异常实践
<ul>
<li><a href="#%E5%8F%AA%E9%92%88%E5%AF%B9%E4%B8%8D%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E6%89%8D%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8">只针对不正常的情况才使用异常</a></li>
<li><a href="#%E5%9C%A8-finally-%E5%9D%97%E4%B8%AD%E6%B8%85%E7%90%86%E8%B5%84%E6%BA%90%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8-try-with-resource-%E8%AF%AD%E5%8F%A5">在 finally 块中清理资源或者使用 try-with-resource 语句</a></li>
<li><a href="#%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E7%9A%84%E5%BC%82%E5%B8%B8">尽量使用标准的异常</a></li>
<li><a href="#%E5%AF%B9%E5%BC%82%E5%B8%B8%E8%BF%9B%E8%A1%8C%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E">对异常进行文档说明</a></li>
<li><a href="#%E4%BC%98%E5%85%88%E6%8D%95%E8%8E%B7%E6%9C%80%E5%85%B7%E4%BD%93%E7%9A%84%E5%BC%82%E5%B8%B8">优先捕获最具体的异常</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E6%8D%95%E8%8E%B7-throwable-%E7%B1%BB">不要捕获 Throwable 类</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E5%BF%BD%E7%95%A5%E5%BC%82%E5%B8%B8">不要忽略异常</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E8%AE%B0%E5%BD%95%E5%B9%B6%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8">不要记录并抛出异常</a></li>
<li><a href="#%E5%8C%85%E8%A3%85%E5%BC%82%E5%B8%B8%E6%97%B6%E4%B8%8D%E8%A6%81%E6%8A%9B%E5%BC%83%E5%8E%9F%E5%A7%8B%E7%9A%84%E5%BC%82%E5%B8%B8">包装异常时不要抛弃原始的异常</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E7%A8%8B">不要使用异常控制程序的流程</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E5%9C%A8finally%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8return">不要在finally块中使用return。</a></li>
</ul>
</li>
<li>深入理解异常
<ul>
<li><a href="#jvm%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8%E7%9A%84%E6%9C%BA%E5%88%B6">JVM处理异常的机制？</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8%E6%98%AF%E5%90%A6%E8%80%97%E6%97%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%80%97%E6%97%B6">异常是否耗时？为什么会耗时？</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#异常的层次结构"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84">#</a> 异常的层次结构</h2>
<p>异常指不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。异常是一个事件，它发生在程序运行期间，干扰了正常的指令流程。Java通 过API中Throwable类的众多子类描述各种不同的异常。因而，Java异常都是对象，是Throwable子类的实例，描述了出现在一段编码中的 错误条件。当条件生成时，错误将引发异常。</p>
<p>Java异常类层次结构图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-exception-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#throwable"><span></span></a><a href="#throwable">#</a> Throwable</h3>
<p>Throwable 是 Java 语言中所有错误与异常的超类。</p>
<p>Throwable 包含两个子类：Error（错误）和 Exception（异常），它们通常用于指示发生了异常情况。</p>
<p>Throwable 包含了其线程创建时线程执行堆栈的快照，它提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。</p>
<h3><a class="header-anchor" href="#error-错误"><span></span></a><a href="#error-%E9%94%99%E8%AF%AF">#</a> Error（错误）</h3>
<p>Error 类及其子类：程序中无法处理的错误，表示运行应用程序中出现了严重的错误。</p>
<p>此类错误一般表示代码运行时 JVM 出现问题。通常有 Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如 OutOfMemoryError：内存不足错误；StackOverflowError：栈溢出错误。此类错误发生时，JVM 将终止线程。</p>
<p>这些错误是不受检异常，非代码性错误。因此，当此类错误发生时，应用程序不应该去处理此类错误。按照Java惯例，我们是不应该实现任何新的Error子类的！</p>
<h3><a class="header-anchor" href="#exception-异常"><span></span></a><a href="#exception-%E5%BC%82%E5%B8%B8">#</a> Exception（异常）</h3>
<p>程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。</p>
<ul>
<li><strong>运行时异常</strong></li>
</ul>
<p>都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p>
<p>运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。</p>
<ul>
<li><strong>非运行时异常</strong> （编译异常）</li>
</ul>
<p>是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p>
<h3><a class="header-anchor" href="#可查的异常-checked-exceptions-和不可查的异常-unchecked-exceptions"><span></span></a><a href="#%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8-checked-exceptions-%E5%92%8C%E4%B8%8D%E5%8F%AF%E6%9F%A5%E7%9A%84%E5%BC%82%E5%B8%B8-unchecked-exceptions">#</a> 可查的异常（checked exceptions）和不可查的异常（unchecked exceptions）</h3>
<ul>
<li><strong>可查异常</strong>（编译器要求必须处置的异常）：</li>
</ul>
<p>正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。</p>
<p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。</p>
<ul>
<li><strong>不可查异常</strong>(编译器不要求强制处置的异常)</li>
</ul>
<p>包括运行时异常（RuntimeException与其子类）和错误（Error）。</p>
<h2><a class="header-anchor" href="#异常基础"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%9F%BA%E7%A1%80">#</a> 异常基础</h2>
<p>提示</p>
<p>接下来我们看下异常使用的基础。</p>
<h3><a class="header-anchor" href="#异常关键字"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%85%B3%E9%94%AE%E5%AD%97">#</a> 异常关键字</h3>
<ul>
<li><strong>try</strong> – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。</li>
<li><strong>catch</strong> – 用于捕获异常。catch用来捕获try语句块中发生的异常。</li>
<li><strong>finally</strong> – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。</li>
<li><strong>throw</strong> – 用于抛出异常。</li>
<li><strong>throws</strong> – 用在方法签名中，用于声明该方法可能抛出的异常。</li>
</ul>
<h3><a class="header-anchor" href="#异常的申明-throws"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E7%94%B3%E6%98%8E-throws">#</a> 异常的申明(throws)</h3>
<p>在Java中，当前执行的语句必属于某个方法，Java解释器调用main方法执行开始执行程序。若方法中存在检查异常，如果不对其捕获，那必须在方法头中显式声明该异常，以便于告知方法调用者此方法有异常，需要进行处理。 在方法中声明一个异常，方法头中使用关键字throws，后面接上要声明的异常。若声明多个异常，则使用逗号分割。如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#E06C75">() throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> FileNotFoundException{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //something statements</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：若是父类的方法没有声明异常，则子类继承方法后，也不能声明异常。</p>
<p>通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。传递异常可以在方法签名处使用 throws 关键字声明可能会抛出的异常。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws IOException {</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileReader</span><span style="color:#E06C75">(file))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">((result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#56B6C2">!=</span><span style="color:#D19A66">null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Throws抛出异常的规则：</p>
<ul>
<li>如果是不可查异常（unchecked exception），即Error、RuntimeException或它们的子类，那么可以不使用throws关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。</li>
<li>必须声明方法可抛出的任何可查异常（checked exception）。即如果一个方法可能出现受可查异常，要么用try-catch语句捕获，要么用throws子句声明将它抛出，否则会导致编译错误</li>
<li>仅当抛出了异常，该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出，而不是囫囵吞枣。</li>
<li>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</li>
</ul>
<h3><a class="header-anchor" href="#异常的抛出-throw"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8A%9B%E5%87%BA-throw">#</a> 异常的抛出(throw)</h3>
<p>如果代码可能会引发某种错误，可以创建一个合适的异常类实例并抛出它，这就是抛出异常。如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> method</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75">(value </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ArithmeticException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"参数不能为0"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //抛出一个运行时异常</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> 5.0</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大部分情况下都不需要手动抛出异常，因为Java的大部分方法要么已经处理异常，要么已声明异常。所以一般都是捕获异常或者再往上抛。</p>
<p>有时我们会从 catch 中抛出一个异常，目的是为了改变异常的类型。多用于在多系统集成时，当某个子系统故障，异常类型可能有多种，可以用统一的异常类型向外暴露，不需暴露太多内部异常细节。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws MyException {    </span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        MyException</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"read file failed."</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">initCause</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#异常的自定义"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89">#</a> 异常的自定义</h3>
<p>习惯上，定义一个异常类应包含两个构造函数，一个无参构造函数和一个带有详细描述信息的构造函数（Throwable 的 toString 方法会打印这些详细信息，调试时很有用）, 比如上面用到的自定义MyException：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyException</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyException</span><span style="color:#ABB2BF">(){ }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyException</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> msg</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(msg);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#异常的捕获"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7">#</a> 异常的捕获</h3>
<p>异常捕获处理的方法通常有：</p>
<ul>
<li>try-catch</li>
<li>try-catch-finally</li>
<li>try-finally</li>
<li>try-with-resource</li>
</ul>
<h4><a class="header-anchor" href="#try-catch"><span></span></a><a href="#try-catch">#</a> try-catch</h4>
<p>在一个 try-catch 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle FileNotFoundException</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle IOException</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同一个 catch 也可以捕获多种类型异常，用 | 隔开</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75"> | </span><span style="color:#E5C07B">UnknownHostException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle FileNotFoundException or UnknownHostException</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle IOException</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#try-catch-finally"><span></span></a><a href="#try-catch-finally">#</a> try-catch-finally</h4>
<ul>
<li>常规语法</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {                        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //执行程序代码，可能会出现异常                 </span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //捕获异常并处理   </span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //必执行的代码</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>执行的顺序
<ul>
<li>当try没有捕获到异常时：try语句块中的语句逐一被执行，程序将跳过catch语句块，执行finally语句块和其后的语句；</li>
<li>当try捕获到异常，catch语句块里没有处理此异常的情况：当try语句块里的某条语句出现异常时，而没有处理此异常的catch语句块时，此异常将会抛给JVM处理，finally语句块里的语句还是会被执行，但finally语句块后的语句不会被执行；</li>
<li>当try捕获到异常，catch语句块里有处理此异常的情况：在try语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到catch语句块，并与catch语句块逐一匹配，找到与之对应的处理程序，其他的catch语句块将不会被执行，而try语句块中，出现异常之后的语句也不会被执行，catch语句块执行完后，执行finally语句块里的语句，最后执行finally语句块后的语句；</li>
</ul>
</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-exception-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>一个完整的例子</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws MyException {</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        reader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileReader</span><span style="color:#E06C75">(file))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75">((result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#56B6C2">!=</span><span style="color:#D19A66">null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"readFile method catch block."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        MyException</span><span style="color:#E06C75"> ex </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"read file failed."</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">initCause</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"readFile method finally block."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> reader) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#try-finally"><span></span></a><a href="#try-finally">#</a> try-finally</h4>
<blockquote>
<p>可以直接用try-finally吗？ 可以。</p>
</blockquote>
<p>try块中引起异常，异常代码之后的语句不再执行，直接执行finally语句。 try块没有引发异常，则执行完try块就执行finally语句。</p>
<p>try-finally可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如IO流中执行完相应操作后，关闭相应资源；使用Lock对象保证线程同步，通过finally可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">//以Lock加锁为例，演示try-finally</span></span>
<span class="line"><span style="color:#E5C07B">ReentrantLock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //需要加锁的代码</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> //保证锁一定被释放</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>finally遇见如下情况不会执行</p>
<ul>
<li>在前面的代码中用了System.exit()退出程序。</li>
<li>finally语句块中发生了异常。</li>
<li>程序所在的线程死亡。</li>
<li>关闭CPU。</li>
</ul>
<h4><a class="header-anchor" href="#try-with-resource"><span></span></a><a href="#try-with-resource">#</a> try-with-resource</h4>
<blockquote>
<p>try-with-resource是Java 7中引入的，很容易被忽略。</p>
</blockquote>
<p>上面例子中，finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。</p>
<ul>
<li>代码实现</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD">  static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> tryWithResourceTest</span><span style="color:#E06C75">(){</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Scanner</span><span style="color:#E06C75"> scanner </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Scanner</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(</span><span style="color:#98C379">"c:/abc"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"UTF-8"</span><span style="color:#E06C75">)){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // code</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // handle exception</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>看下Scanner</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Scanner</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Closeable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> Closeable</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AutoCloseable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。</p>
<h3><a class="header-anchor" href="#异常基础总结"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93">#</a> 异常基础总结</h3>
<ul>
<li>try、catch和finally都不能单独使用，只能是try-catch、try-finally或者try-catch-finally。</li>
<li>try语句块监控代码，出现异常就停止执行下面的代码，然后将异常移交给catch语句块来处理。</li>
<li>finally语句块中的代码一定会被执行，常用于回收资源 。</li>
<li>throws：声明一个异常，告知方法调用者。</li>
<li>throw ：抛出一个异常，至于该异常被捕获还是继续抛出都与它无关。</li>
</ul>
<p>Java编程思想一书中，对异常的总结。</p>
<ul>
<li>在恰当的级别处理问题。（在知道该如何处理的情况下了捕获异常。）</li>
<li>解决问题并且重新调用产生异常的方法。</li>
<li>进行少许修补，然后绕过异常发生的地方继续执行。</li>
<li>用别的数据进行计算，以代替方法预计会返回的值。</li>
<li>把当前运行环境下能做的事尽量做完，然后把相同的异常重抛到更高层。</li>
<li>把当前运行环境下能做的事尽量做完，然后把不同的异常抛到更高层。</li>
<li>终止程序。</li>
<li>进行简化（如果你的异常模式使问题变得太复杂，那么用起来会非常痛苦）。</li>
<li>让类库和程序更安全。</li>
</ul>
<h3><a class="header-anchor" href="#常用的异常"><span></span></a><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BC%82%E5%B8%B8">#</a> 常用的异常</h3>
<p>在Java中提供了一些异常用来描述经常发生的错误，对于这些异常，有的需要程序员进行捕获处理或声明抛出，有的是由Java虚拟机自动进行捕获处理。Java中常见的异常类:</p>
<ul>
<li><strong>RuntimeException</strong>
<ul>
<li>java.lang.ArrayIndexOutOfBoundsException 数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。</li>
<li>java.lang.ArithmeticException 算术条件异常。譬如：整数除零等。</li>
<li>java.lang.NullPointerException 空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</li>
<li>java.lang.ClassNotFoundException 找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。</li>
<li>java.lang.NegativeArraySizeException 数组长度为负异常</li>
<li>java.lang.ArrayStoreException 数组中包含不兼容的值抛出的异常</li>
<li>java.lang.SecurityException 安全性异常</li>
<li>java.lang.IllegalArgumentException 非法参数异常</li>
</ul>
</li>
<li><strong>IOException</strong>
<ul>
<li>IOException：操作输入流和输出流时可能出现的异常。</li>
<li>EOFException 文件已结束异常</li>
<li>FileNotFoundException 文件未找到异常</li>
</ul>
</li>
<li><strong>其他</strong>
<ul>
<li>ClassCastException 类型转换异常类</li>
<li>ArrayStoreException 数组中包含不兼容的值抛出的异常</li>
<li>SQLException 操作数据库异常类</li>
<li>NoSuchFieldException 字段未找到异常</li>
<li>NoSuchMethodException 方法未找到抛出的异常</li>
<li>NumberFormatException 字符串转换为数字抛出的异常</li>
<li>StringIndexOutOfBoundsException 字符串索引超出范围抛出的异常</li>
<li>IllegalAccessException 不允许访问某类异常</li>
<li>InstantiationException 当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#异常实践"><span></span></a><a href="#%E5%BC%82%E5%B8%B8%E5%AE%9E%E8%B7%B5">#</a> 异常实践</h2>
<p>提示</p>
<p>在 Java 中处理异常并不是一个简单的事情。不仅仅初学者很难理解，即使一些有经验的开发者也需要花费很多时间来思考如何处理异常，包括需要处理哪些异常，怎样处理等等。这也是绝大多数开发团队都会制定一些规则来规范进行异常处理的原因。</p>
<p>当你抛出或捕获异常的时候，有很多不同的情况需要考虑，而且大部分事情都是为了改善代码的可读性或者 API 的可用性。</p>
<p>异常不仅仅是一个错误控制机制，也是一个通信媒介。因此，为了和同事更好的合作，一个团队必须要制定出一个最佳实践和规则，只有这样，团队成员才能理解这些通用概念，同时在工作中使用它。</p>
<p>这里给出几个被很多团队使用的异常处理最佳实践。</p>
<h3><a class="header-anchor" href="#只针对不正常的情况才使用异常"><span></span></a><a href="#%E5%8F%AA%E9%92%88%E5%AF%B9%E4%B8%8D%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%83%85%E5%86%B5%E6%89%8D%E4%BD%BF%E7%94%A8%E5%BC%82%E5%B8%B8">#</a> 只针对不正常的情况才使用异常</h3>
<blockquote>
<p>异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。《阿里手册》中：【强制】Java 类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。</p>
</blockquote>
<p>比如，在解析字符串形式的数字时，可能存在数字格式错误，不得通过catch Exception来实现</p>
<ul>
<li>代码1</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">if</span><span style="color:#E06C75"> (obj </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>代码2</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> { </span></span>
<span class="line"><span style="color:#E5C07B">  obj</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">method</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NullPointerException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要原因有三点：</p>
<ul>
<li>异常机制的设计初衷是用于不正常的情况，所以很少会会JVM实现试图对它们的性能进行优化。所以，创建、抛出和捕获异常的开销是很昂贵的。</li>
<li>把代码放在try-catch中返回阻止了JVM实现本来可能要执行的某些特定的优化。</li>
<li>对数组进行遍历的标准模式并不会导致冗余的检查，有些现代的JVM实现会将它们优化掉。</li>
</ul>
<h3><a class="header-anchor" href="#在-finally-块中清理资源或者使用-try-with-resource-语句"><span></span></a><a href="#%E5%9C%A8-finally-%E5%9D%97%E4%B8%AD%E6%B8%85%E7%90%86%E8%B5%84%E6%BA%90%E6%88%96%E8%80%85%E4%BD%BF%E7%94%A8-try-with-resource-%E8%AF%AD%E5%8F%A5">#</a> 在 finally 块中清理资源或者使用 try-with-resource 语句</h3>
<p>当使用类似InputStream这种需要使用后关闭的资源时，一个常见的错误就是在try块的最后关闭资源。</p>
<ul>
<li>错误示例</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doNotCloseResourceInTry</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> inputStream </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(</span><span style="color:#98C379">"./tmp.txt"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        inputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // use the inputStream to read a file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // do NOT do this</span></span>
<span class="line"><span style="color:#E5C07B">        inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题就是，只有没有异常抛出的时候，这段代码才可以正常工作。try 代码块内代码会正常执行，并且资源可以正常关闭。但是，使用 try 代码块是有原因的，一般调用一个或多个可能抛出异常的方法，而且，你自己也可能会抛出一个异常，这意味着代码可能不会执行到 try 代码块的最后部分。结果就是，你并没有关闭资源。</p>
<p>所以，你应该把清理工作的代码放到 finally 里去，或者使用 try-with-resource 特性。</p>
<ul>
<li>方法一：使用 finally 代码块</li>
</ul>
<p>与前面几行 try 代码块不同，finally 代码块总是会被执行。不管 try 代码块成功执行之后还是你在 catch 代码块中处理完异常后都会执行。因此，你可以确保你清理了所有打开的资源。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> closeResourceInFinally</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> inputStream </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(</span><span style="color:#98C379">"./tmp.txt"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        inputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // use the inputStream to read a file</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (inputStream </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方法二：Java 7 的 try-with-resource 语法</li>
</ul>
<p>如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> automaticallyCloseResource</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> file </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(</span><span style="color:#98C379">"./tmp.txt"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileInputStream</span><span style="color:#E06C75"> inputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // use the inputStream to read a file</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#尽量使用标准的异常"><span></span></a><a href="#%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E7%9A%84%E5%BC%82%E5%B8%B8">#</a> 尽量使用标准的异常</h3>
<blockquote>
<p>代码重用是值得提倡的，这是一条通用规则，异常也不例外。</p>
</blockquote>
<p>重用现有的异常有几个好处：</p>
<ul>
<li>它使得你的API更加易于学习和使用，因为它与程序员原来已经熟悉的习惯用法是一致的。</li>
<li>对于用到这些API的程序而言，它们的可读性更好，因为它们不会充斥着程序员不熟悉的异常。</li>
<li>异常类越少，意味着内存占用越小，并且转载这些类的时间开销也越小。</li>
</ul>
<p>Java标准异常中有几个是经常被使用的异常。如下表格：</p>
<p>| 异常                            | 使用场合                                   |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-exception-1.png" type="image/png"/>
    </item>
    <item>
      <title>7.Java 基础之反射机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/7.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/7.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">7.Java 基础之反射机制</source>
      <description>Java 基础之反射机制 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。本文综合多篇文章后，总结了Java 反射的相关知识，希望可以提升你对...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。Java反射机制在框架设计中极为广泛，需要深入理解。本文综合多篇文章后，总结了Java 反射的相关知识，希望可以提升你对Java中反射的认知效率。</p>
</blockquote>
<ul>
<li>Java 基础 - 反射机制详解
<ul>
<li>反射基础
<ul>
<li><a href="#class%E7%B1%BB">Class类</a></li>
<li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD">类加载</a></li>
</ul>
</li>
<li>反射的使用
<ul>
<li><a href="#class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%8E%B7%E5%8F%96">Class类对象的获取</a></li>
<li><a href="#constructor%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95">Constructor类及其用法</a></li>
<li><a href="#field%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95">Field类及其用法</a></li>
<li><a href="#method%E7%B1%BB%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95">Method类及其用法</a></li>
</ul>
</li>
<li>反射机制执行的流程
<ul>
<li><a href="#%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E7%B1%BB%E5%AE%9E%E4%BE%8B">反射获取类实例</a></li>
<li><a href="#%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95">反射获取方法</a></li>
<li><a href="#%E8%B0%83%E7%94%A8-methodinvoke-%E6%96%B9%E6%B3%95">调用 method.invoke() 方法</a></li>
<li><a href="#%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%B0%8F%E7%BB%93">反射调用流程小结</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#反射基础"><span></span></a><a href="#%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80">#</a> 反射基础</h2>
<p>RTTI（Run-Time Type Identification）运行时类型识别。在《Thinking in Java》一书第十四章中有提到，其作用是在运行时识别一个对象的类型和类的信息。主要有两种方式：一种是“传统的”RTTI，它假定我们在编译时已经知道了所有的类型；另一种是“反射”机制，它允许我们在运行时发现和使用类的信息。</p>
<p>反射就是把java类中的各种成分映射成一个个的Java对象</p>
<p>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。</p>
<blockquote>
<p>这里我们首先需要理解 Class类，以及类的加载机制； 然后基于此我们如何通过反射获取Class类以及类中的成员变量、方法、构造方法等。</p>
</blockquote>
<h3><a class="header-anchor" href="#class类"><span></span></a><a href="#class%E7%B1%BB">#</a> Class类</h3>
<p>Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)（每个java类运行时都在JVM里表现为一个class对象，可通过类名.class、类型.getClass()、Class.forName("类名")等方法获取class对象）。数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 class 对象。</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                              GenericDeclaration</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                              Type</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                              AnnotatedElement</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> ANNOTATION</span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00002000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> ENUM      </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00004000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> SYNTHETIC </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0x00001000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> registerNatives</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">        registerNatives</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有JVM才能调用创建Class对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * This constructor is not used and prevents the default constructor being</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * generated.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#61AFEF"> Class</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#E06C75;font-style:italic"> loader</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Initialize final field for classLoader.  The initialization value of non-null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // prevents future JIT optimizations from assuming this final field is null.</span></span>
<span class="line"><span style="color:#ABB2BF">        classLoader </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> loader;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这我们也就可以得出以下几点信息：</p>
<ul>
<li>Class类也是类的一种，与class关键字是不一样的。</li>
<li>手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在同名.class的文件中(字节码文件)</li>
<li>每个通过关键字class标识的类，在内存中有且只有一个与之对应的Class对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个Class对象。</li>
<li>Class类只存私有构造函数，因此对应Class对象只能有JVM创建和加载</li>
<li>Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要(关于反射稍后分析)。</li>
</ul>
<h3><a class="header-anchor" href="#类加载"><span></span></a><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD">#</a> 类加载</h3>
<p>类加载机制和类字节码技术可以参考如下两篇文章：</p>
<ul>
<li>JVM基础 - 类字节码详解
<ul>
<li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li>
</ul>
</li>
<li>JVM基础 - Java 类加载机制
<ul>
<li>这篇文章将带你深入理解Java 类加载机制</li>
</ul>
</li>
</ul>
<p>其中，这里我们需要回顾的是：</p>
<ol>
<li>类加载机制流程</li>
</ol>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ol>
<li>类的加载</li>
</ol>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-basic-reflection-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#反射的使用"><span></span></a><a href="#%E5%8F%8D%E5%B0%84%E7%9A%84%E4%BD%BF%E7%94%A8">#</a> 反射的使用</h2>
<p>提示</p>
<p>基于此我们如何通过反射获取Class类对象以及类中的成员变量、方法、构造方法等</p>
<p>在Java中，Class类与java.lang.reflect类库一起对反射技术进行了全力的支持。在反射包中，我们常用的类主要有Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象、Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)、Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)，下面将对这几个重要类进行分别说明。</p>
<h3><a class="header-anchor" href="#class类对象的获取"><span></span></a><a href="#class%E7%B1%BB%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%8E%B7%E5%8F%96">#</a> Class类对象的获取</h3>
<p>在类加载的时候，jvm会创建一个class对象</p>
<p>class对象是可以说是反射中最常用的，获取class对象的方式的主要有三种</p>
<ul>
<li>根据类名：类名.class</li>
<li>根据对象：对象.getClass()</li>
<li>根据全限定类名：Class.forName(全限定类名)</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> classTest</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取Class对象的三种方式</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"根据类名:  </span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"根据对象:  </span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"根据全限定类名:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"com.test.User"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 常用的方法</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"获取全限定类名:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> userClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"获取类名:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> userClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSimpleName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"实例化:</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> userClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#C678DD">    package</span><span style="color:#C678DD"> com.test</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "init"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> age</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> age</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            super</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">age</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getName</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAge</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setAge</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> age</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">age</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> age;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#98C379"> "User [name="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> name </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", age="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> age </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "]"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#E06C75">根据类名</span><span style="color:#C678DD">:</span><span style="color:#C678DD">  	class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.test.User</span></span>
<span class="line"><span style="color:#E06C75">根据对象:  	</span><span style="color:#C678DD">class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.test.User</span></span>
<span class="line"><span style="color:#E06C75">根据全限定类名:	</span><span style="color:#C678DD">class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.test.User</span></span>
<span class="line"><span style="color:#E06C75">获取全限定类名:	com.test.User</span></span>
<span class="line"><span style="color:#E06C75">获取类名:	User</span></span>
<span class="line"><span style="color:#E06C75">实例化:	User [name=init, age=0]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>再来看看 <strong>Class类的方法</strong></li>
</ul>
<p>| 方法名                                              | 说明                                                         |
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" type="image/png"/>
    </item>
    <item>
      <title>8.Java 基础之SPI机制</title>
      <link>https://cactusli.net/posts/Java/Foundation/8.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8BSPI%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/8.Java%20%E5%9F%BA%E7%A1%80%E4%B9%8BSPI%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">8.Java 基础之SPI机制</source>
      <description>Java 基础之SPI机制 SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。 Java常用机制 - SPI机制 什么是SPI机制 SPI机制的简单示例 SPI机制的广泛应用 SPI机制 - JDBC DriverManager JDBC接口...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[
<blockquote>
<p>SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用。</p>
</blockquote>
<ul>
<li>Java常用机制 - SPI机制
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFspi%E6%9C%BA%E5%88%B6">什么是SPI机制</a></li>
<li><a href="#spi%E6%9C%BA%E5%88%B6%E7%9A%84%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B">SPI机制的简单示例</a></li>
<li>SPI机制的广泛应用
<ul>
<li>SPI机制 - JDBC DriverManager
<ul>
<li><a href="#jdbc%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89">JDBC接口定义</a></li>
<li><a href="#mysql%E5%AE%9E%E7%8E%B0">mysql实现</a></li>
<li><a href="#postgresql%E5%AE%9E%E7%8E%B0">postgresql实现</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法</a></li>
<li><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">源码实现</a></li>
</ul>
</li>
<li>[SPI机制 - Common-Logging](#spi机制</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-advanced-spi-8.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>1.Java 并发知识体系</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/1.Java%20%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/1.Java%20%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</guid>
      <source url="https://cactusli.net/rss.xml">1.Java 并发知识体系</source>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
    </item>
  </channel>
</rss>