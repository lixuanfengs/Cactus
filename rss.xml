<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://cactusli.net/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://cactusli.net/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Cactus&amp;apos;s Blog</title>
    <link>https://cactusli.net/</link>
    <description>仙人球的博客</description>
    <language>zh-CN</language>
    <pubDate>Tue, 05 Nov 2024 03:30:29 GMT</pubDate>
    <lastBuildDate>Tue, 05 Nov 2024 03:30:29 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Docker</category>
    <category>Linux</category>
    <category>Git</category>
    <category>Spring</category>
    <category>Ubuntu 挂盘操作</category>
    <category>延时任务</category>
    <category>lambda</category>
    <category>Spring Security</category>
    <category>Fiddler Everywhere</category>
    <category>Nas</category>
    <category>DDD 技术体系</category>
    <category>easyTier</category>
    <category>devops</category>
    <category>OAuth2.0</category>
    <category>cactus-vue-pro</category>
    <category>Maven</category>
    <category>ES6s</category>
    <category>npm</category>
    <category>Java</category>
    <item>
      <title>Docker快速构建fastdfs镜像</title>
      <link>https://cactusli.net/linuxs/Docker/Docker%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAfastdfs%E9%95%9C%E5%83%8F.html</link>
      <guid>https://cactusli.net/linuxs/Docker/Docker%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAfastdfs%E9%95%9C%E5%83%8F.html</guid>
      <source url="https://cactusli.net/rss.xml">Docker快速构建fastdfs镜像</source>
      <description>1. 安装fastdfs所需文件 Linux 中下载文件命令： 2. 提取并修改相关配置文件 2.1 提取文件 解压 fastdfs-6.12.2.tar.gz 源码包，找到http.conf、mime.types、storage_ids.conf, storage_ids.conf文件只是用于构建好的镜像使用时挂载目录到容器内。 image-2024...</description>
      <category>Docker</category>
      <pubDate>Fri, 25 Oct 2024 10:41:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 安装fastdfs所需文件</h2>
<p>| 文件名                                                       | 文件说明                                        | 本次安装版本                                                 |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20241025112101573.png" type="image/png"/>
    </item>
    <item>
      <title>Linux登录失败处理策略</title>
      <link>https://cactusli.net/linuxs/Linux/Linux%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5.html</link>
      <guid>https://cactusli.net/linuxs/Linux/Linux%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5.html</guid>
      <source url="https://cactusli.net/rss.xml">Linux登录失败处理策略</source>
      <description>一、密码设置 1. 基本密码修改 2. 设置密码复杂度策略 编辑 /etc/security/pwquality.conf: 二、登录失败处理策略 1. 服务器终端配置 编辑 /etc/pam.d/system-auth: 参数说明: deny=3: 连续失败3次后锁定 unlock_time=40: 锁定40秒后自动解锁 even_deny_root...</description>
      <category>Linux</category>
      <pubDate>Fri, 25 Oct 2024 15:52:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、密码设置</h2>
<h3>1. 基本密码修改</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> passwd</span><span style="color:#ABB2BF"> [用户名]  </span><span style="color:#7F848E;font-style:italic"># 不带用户名则修改当前用户密码</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>2. 设置密码复杂度策略</h3>
<p>编辑 <code>/etc/security/pwquality.conf</code>:</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">bashCopyminlen</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 8</span><span style="color:#7F848E;font-style:italic">          # 最小长度</span></span>
<span class="line"><span style="color:#61AFEF">minclass</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 3</span><span style="color:#7F848E;font-style:italic">        # 至少包含小写字母、大写字母、数字、特殊字符中的3类</span></span>
<span class="line"><span style="color:#61AFEF">maxrepeat</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 3</span><span style="color:#7F848E;font-style:italic">       # 最多重复3次相同字符</span></span>
<span class="line"><span style="color:#61AFEF">dcredit</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> -1</span><span style="color:#7F848E;font-style:italic">        # 至少1个数字</span></span>
<span class="line"><span style="color:#61AFEF">ucredit</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> -1</span><span style="color:#7F848E;font-style:italic">        # 至少1个大写字母</span></span>
<span class="line"><span style="color:#61AFEF">lcredit</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> -1</span><span style="color:#7F848E;font-style:italic">        # 至少1个小写字母</span></span>
<span class="line"><span style="color:#61AFEF">ocredit</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> -1</span><span style="color:#7F848E;font-style:italic">        # 至少1个特殊字符</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>二、登录失败处理策略</h2>
<h3>1. 服务器终端配置</h3>
<p>编辑 <code>/etc/pam.d/system-auth</code>:</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 添加以下行在首行下</span></span>
<span class="line"><span style="color:#61AFEF">auth</span><span style="color:#98C379"> required</span><span style="color:#98C379"> pam_tally2.so</span><span style="color:#98C379"> onerr=fail</span><span style="color:#98C379"> deny=</span><span style="color:#D19A66">3</span><span style="color:#98C379"> unlock_time=</span><span style="color:#D19A66">40</span><span style="color:#98C379"> even_deny_root</span><span style="color:#98C379"> root_unlock_time=</span><span style="color:#D19A66">30</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">#不限制root用户</span></span>
<span class="line"><span style="color:#61AFEF">auth</span><span style="color:#98C379"> required</span><span style="color:#98C379"> pam_tally2.so</span><span style="color:#98C379"> deny=</span><span style="color:#D19A66">5</span><span style="color:#98C379"> unlock_time=</span><span style="color:#D19A66">40</span><span style="color:#98C379"> no_magic_root</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>参数说明:</p>
<ul>
<li><code>deny=3</code>: 连续失败3次后锁定</li>
<li><code>unlock_time=40</code>: 锁定40秒后自动解锁</li>
<li><code>even_deny_root</code>: 是否限制root账户</li>
<li><code>root_unlock_time=30</code>: root账户锁定时间</li>
</ul>
<h3>2. SSH远程登录配置</h3>
<p>需要同时修改两个文件:</p>
<p>编辑 <code>/etc/pam.d/sshd</code>:</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 添加以下行在首行下</span></span>
<span class="line"><span style="color:#61AFEF">auth</span><span style="color:#98C379"> required</span><span style="color:#98C379"> pam_tally2.so</span><span style="color:#98C379"> deny=</span><span style="color:#D19A66">3</span><span style="color:#98C379"> unlock_time=</span><span style="color:#D19A66">20</span><span style="color:#98C379"> even_deny_root</span><span style="color:#98C379"> root_unlock_time=</span><span style="color:#D19A66">30</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑 <code>/etc/pam.d/login</code>:</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 添加以下行在首行下</span></span>
<span class="line"><span style="color:#61AFEF">auth</span><span style="color:#98C379"> required</span><span style="color:#98C379"> pam_tally2.so</span><span style="color:#98C379"> deny=</span><span style="color:#D19A66">3</span><span style="color:#98C379"> unlock_time=</span><span style="color:#D19A66">20</span><span style="color:#98C379"> even_deny_root</span><span style="color:#98C379"> root_unlock_time=</span><span style="color:#D19A66">30</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>3. 账户锁定管理</h3>
<h4>1. 查看账户失败登录次数</h4>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> pam_tally2</span><span style="color:#D19A66"> --user=用户名</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h4>2. 解锁账户</h4>
<p>方法1: 重置登录失败计数</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> pam_tally2</span><span style="color:#D19A66"> --user=用户名</span><span style="color:#D19A66"> --reset</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>方法2: 解锁用户账户</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> passwd</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> 用户名</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h4>3. 手动锁定账户</h4>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> passwd</span><span style="color:#D19A66"> -l</span><span style="color:#98C379"> 用户名</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>三、安全建议</h2>
<ol>
<li>建议移除 root 账户的登录限制(删除 <code>even_deny_root</code> 和 <code>root_unlock_time</code> 参数)</li>
<li>配置文件修改后立即生效,建议:
<ul>
<li>保持一个 root 会话在线</li>
<li>新开窗口测试配置</li>
<li>确认无误后再关闭原会话</li>
</ul>
</li>
<li>定期检查登录失败日志:</li>
</ol>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># CentOS/RHEL</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> tail</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> /var/log/secure</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># Ubuntu/Debian</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> tail</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> /var/log/auth.log</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>建议同时配置 SSH 密钥登录,提高安全性</li>
</ol>
<blockquote>
<p>这些配置需要 root 权限,修改时要特别小心,建议先在测试环境验证配置的正确性。</p>
</blockquote>
<h2>四、查看用户剩余解锁时间</h2>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 保存为 check_unlock_time.sh</span></span>
<span class="line"><span style="color:#E06C75">USER</span><span style="color:#56B6C2">=</span><span style="color:#E06C75;font-style:italic">$1</span></span>
<span class="line"><span style="color:#E06C75">LOCK_TIME</span><span style="color:#56B6C2">=</span><span style="color:#98C379">40</span><span style="color:#7F848E;font-style:italic">  # 你设置的锁定时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 获取最后失败登录的时间戳和当前时间戳</span></span>
<span class="line"><span style="color:#E06C75">LAST_FAILURE</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">pam_tally2</span><span style="color:#D19A66"> --user=</span><span style="color:#E06C75">$USER</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">tail</span><span style="color:#D19A66"> -n1</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">awk</span><span style="color:#98C379"> '{print $4, $5}'</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E06C75">LAST_TS</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">date</span><span style="color:#D19A66"> -d</span><span style="color:#98C379"> "</span><span style="color:#E06C75">$LAST_FAILURE</span><span style="color:#98C379">"</span><span style="color:#98C379"> +%s</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E06C75">NOW_TS</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">date</span><span style="color:#98C379"> +%s</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 计算经过的时间和剩余时间</span></span>
<span class="line"><span style="color:#E06C75">ELAPSED</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">$((</span><span style="color:#61AFEF">NOW_TS</span><span style="color:#98C379"> -</span><span style="color:#98C379"> LAST_TS</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#E06C75">REMAINING</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">$((</span><span style="color:#61AFEF">LOCK_TIME</span><span style="color:#98C379"> -</span><span style="color:#98C379"> ELAPSED</span><span style="color:#ABB2BF">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 显示状态</span></span>
<span class="line"><span style="color:#56B6C2">echo</span><span style="color:#98C379"> "用户: </span><span style="color:#E06C75">$USER</span><span style="color:#98C379">"</span></span>
<span class="line"><span style="color:#56B6C2">echo</span><span style="color:#98C379"> "最后失败时间: </span><span style="color:#E06C75">$LAST_FAILURE</span><span style="color:#98C379">"</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#ABB2BF"> [ </span><span style="color:#E06C75">$ELAPSED</span><span style="color:#56B6C2"> -lt</span><span style="color:#E06C75"> $LOCK_TIME</span><span style="color:#ABB2BF"> ]; </span><span style="color:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2">    echo</span><span style="color:#98C379"> "距离解锁还剩: </span><span style="color:#E06C75">$REMAINING</span><span style="color:#98C379"> 秒"</span></span>
<span class="line"><span style="color:#C678DD">else</span></span>
<span class="line"><span style="color:#56B6C2">    echo</span><span style="color:#98C379"> "锁定时间已过，可以重新尝试登录"</span></span>
<span class="line"><span style="color:#C678DD">fi</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 添加执行权限</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> chmod</span><span style="color:#98C379"> +x</span><span style="color:#98C379"> check_unlock_time.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 查看指定用户的解锁时间</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> ./check_unlock_time.sh</span><span style="color:#98C379"> anquanyuan</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更简单的方法是直接在命令行计算：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 获取最后失败时间并计算</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> LAST=</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">pam_tally2</span><span style="color:#D19A66"> --user=anquanyuan</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">tail</span><span style="color:#D19A66"> -n1</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">awk</span><span style="color:#98C379"> '{print $4, $5}'</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> ELAPSED=</span><span style="color:#ABB2BF">$(($(</span><span style="color:#61AFEF">date</span><span style="color:#98C379"> +%s</span><span style="color:#ABB2BF">) - $(</span><span style="color:#61AFEF">date</span><span style="color:#D19A66"> -d</span><span style="color:#98C379"> "</span><span style="color:#E06C75">$LAST</span><span style="color:#98C379">"</span><span style="color:#98C379"> +%s</span><span style="color:#ABB2BF">)))</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> echo</span><span style="color:#98C379"> "过去了 </span><span style="color:#E06C75">$ELAPSED</span><span style="color:#98C379"> 秒，还剩 $((</span><span style="color:#61AFEF">40</span><span style="color:#98C379"> - ELAPSED)) 秒解锁"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Git删除某个文件记录</title>
      <link>https://cactusli.net/tutorial/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95.html</link>
      <guid>https://cactusli.net/tutorial/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E8%AE%B0%E5%BD%95.html</guid>
      <source url="https://cactusli.net/rss.xml">Git删除某个文件记录</source>
      <description>Git强制删除文件历史记录 确保已经备份（重要）： 首先，请确保你对当前仓库有备份，git filter-repo 是一个不可逆的操作，执行后所有删除的数据将无法恢复。 运行 git filter-repo 命令： 使用 git filter-repo 来完全删除指定文件的历史，确保文件在所有 commit 中都被清除。 如果路径中有误，请检查并确保路...</description>
      <category>Git</category>
      <pubDate>Wed, 23 Oct 2024 17:33:30 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Git强制删除文件历史记录</h2>
<ol>
<li>
<p><strong>确保已经备份（重要）</strong>： 首先，请确保你对当前仓库有备份，<code>git filter-repo</code> 是一个不可逆的操作，执行后所有删除的数据将无法恢复。</p>
</li>
<li>
<p><strong>运行 <code>git filter-repo</code> 命令</strong>： 使用 <code>git filter-repo</code> 来完全删除指定文件的历史，确保文件在所有 commit 中都被清除。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> filter-repo</span><span style="color:#D19A66"> --path</span><span style="color:#98C379"> '/d/Company_projects/application/cactus-vue-pro/cactus-server/src/main/resources/application.yaml'</span><span style="color:#D19A66"> --invert-paths</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果路径中有误，请检查并确保路径完全正确。如果你想删除所有版本中的 <code>application.yaml</code> 文件，可以使用通配符：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> filter-repo</span><span style="color:#D19A66"> --path-glob</span><span style="color:#98C379"> '*/application.yaml'</span><span style="color:#D19A66"> --invert-paths</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这个命令将删除任何目录下名为 <code>application.yaml</code> 的文件。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> filter-repo</span><span style="color:#D19A66"> --path-glob</span><span style="color:#98C379"> '*/application-dev.yaml'</span><span style="color:#D19A66"> --invert-paths</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> filter-repo</span><span style="color:#D19A66"> --path-glob</span><span style="color:#98C379"> '*/application-local.yaml'</span><span style="color:#D19A66"> --invert-paths</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> filter-repo</span><span style="color:#D19A66"> --path-glob</span><span style="color:#98C379"> '*/logback-spring.xml'</span><span style="color:#D19A66"> --invert-paths</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
</li>
<li>
<p><strong>强制推送到远程仓库</strong>： 如果你正在处理的是一个远程仓库，删除文件历史后，你需要强制推送修改。</p>
<blockquote>
<p><strong>注意：</strong> 这会覆盖远程仓库的历史，其他开发者可能会受到影响，所以建议在推送之前先与团队沟通。</p>
</blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> push</span><span style="color:#98C379"> origin</span><span style="color:#D19A66"> --force</span><span style="color:#D19A66"> --all</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> push</span><span style="color:#98C379"> origin</span><span style="color:#D19A66"> --force</span><span style="color:#D19A66"> --tags</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样会强制将本地的修改（包括历史记录的修改）推送到远程仓库。</p>
</li>
<li>
<p><strong>清理本地及远程缓存</strong>： 执行以下命令以确保远程仓库的垃圾数据也被清理掉：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> gc</span><span style="color:#D19A66"> --prune=now</span><span style="color:#D19A66"> --aggressive</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> repack</span><span style="color:#D19A66"> -ad</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p><strong>验证结果</strong>： 你可以通过以下命令来验证是否已完全删除文件的历史：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> log</span><span style="color:#D19A66"> --all</span><span style="color:#D19A66"> --full-history</span><span style="color:#D19A66"> --</span><span style="color:#98C379"> '**/application.yaml'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果没有任何输出，说明该文件及其历史已完全删除。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Git常用命令</title>
      <link>https://cactusli.net/tutorial/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://cactusli.net/tutorial/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://cactusli.net/rss.xml">Git常用命令</source>
      <description>基础命令 创建存储库 做出改变 全局配置</description>
      <category>Git</category>
      <pubDate>Wed, 23 Oct 2024 12:33:30 GMT</pubDate>
      <content:encoded><![CDATA[<h2>基础命令</h2>
<h3>创建存储库</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 创建一个新的本地存储库</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> init</span><span style="color:#ABB2BF"> [项目名称]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 克隆存储库(代码仓库)</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> clone</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">git_ur</span><span style="color:#ABB2BF">l&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将存储库克隆到指定目录</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> clone</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">git_ur</span><span style="color:#ABB2BF">l&gt; </span><span style="color:#98C379">指定目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将存储库克隆到指定目录，并指定分支</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> clone</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">git_ur</span><span style="color:#ABB2BF">l&gt; </span><span style="color:#D19A66">-b</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">分支名</span><span style="color:#ABB2BF">称&gt; </span><span style="color:#98C379">指定目录</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>做出改变</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 在工作目录中显示修改后的文件，为您的下一次提交暂存</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> status</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 暂存文件，准备提交</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> add</span><span style="color:#ABB2BF"> [file]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 暂存所有更改的文件，准备提交</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将所有暂存文件提交到版本化历史记录</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "commit message"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将所有跟踪的文件提交到版本化历史记录</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -am</span><span style="color:#98C379"> "commit message"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 取消暂存文件，保留文件更改</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> reset</span><span style="color:#ABB2BF"> [file]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将所有内容恢复到最后一次提交</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> reset</span><span style="color:#D19A66"> --hard</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 已更改但未暂存内容的差异</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> diff</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 已 commited 但尚未提交的内容的差异</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> diff</span><span style="color:#D19A66"> --staged</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 在指定分支之前应用当前分支的任何提交</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> rebase</span><span style="color:#ABB2BF"> [branch]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>全局配置</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 设置将附加到您的提交和标签的名称：</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> user.name</span><span style="color:#98C379"> "name"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 设置将附加到您的提交和标签 tags 的电子邮件地址</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> user.email</span><span style="color:#98C379"> "email"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 启用 Git 输出的一些着色</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> color.ui</span><span style="color:#98C379"> auto</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 在文本编辑器中编辑全局配置文件</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#D19A66"> --edit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 显示本地 repo 配置设置</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 删除全局设置</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#D19A66"> --unset</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">entry-nam</span><span style="color:#ABB2BF">e&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Linux优化大文件传输速度</title>
      <link>https://cactusli.net/linuxs/Linux/Linux%E4%BC%98%E5%8C%96%E5%A4%A7%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6.html</link>
      <guid>https://cactusli.net/linuxs/Linux/Linux%E4%BC%98%E5%8C%96%E5%A4%A7%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6.html</guid>
      <source url="https://cactusli.net/rss.xml">Linux优化大文件传输速度</source>
      <description>1. 问题需求 如一台机器上有个 346MB 的 cactus.tar 文件，需要把这个文件通过 rsync 或 scp 传输到另一台机器上，现在网络的速度限制在每秒传输1.1MB ，需要多长时间能传输完成整个文件？ 要计算传输文件的时间，我们可以使用以下公式： 传输时间=带宽速度文件大小​ 关键条件： 文件大小为 346MB 带宽速度为 1.1MB/...</description>
      <category>Linux</category>
      <pubDate>Thu, 26 Sep 2024 17:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 问题需求</h2>
<p>如一台机器上有个 346MB 的 cactus.tar 文件，需要把这个文件通过 rsync 或 scp 传输到另一台机器上，现在网络的速度限制在每秒传输1.1MB ，需要多长时间能传输完成整个文件？</p>
<p>要计算传输文件的时间，我们可以使用以下公式：</p>
<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>传输时间</mtext><mo>=</mo><mfrac><mtext>文件大小</mtext><mtext>带宽速度</mtext></mfrac></mrow><annotation encoding="application/x-tex">
\text{传输时间} = \frac{\text{文件大小}}{\text{带宽速度}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">传输时间</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">带宽速度</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord cjk_fallback">文件大小</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>关键条件：</p>
<ul>
<li>文件大小为 346MB</li>
<li>带宽速度为 1.1MB/秒</li>
</ul>
<p>按照公式，计算传输时间：</p>
<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>传输时间</mtext><mo>=</mo><mfrac><mrow><mn>346</mn><mtext>MB</mtext></mrow><mrow><mn>1.1</mn><mtext>MB/秒</mtext></mrow></mfrac><mo>=</mo><mn>314.55</mn></mrow><annotation encoding="application/x-tex">
\text{传输时间} = \frac{346 \text{MB}}{1.1 \text{MB/秒}} = 314.55
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord cjk_fallback">传输时间</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2963em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1.1</span><span class="mord text"><span class="mord">MB/</span><span class="mord cjk_fallback">秒</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">346</span><span class="mord text"><span class="mord">MB</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">314.55</span></span></span></span></span></p>
<p>将秒数转换为分钟：</p>
<p v-pre="" class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>314.55</mn><mtext>秒</mtext><mo>=</mo><mfrac><mn>314.55</mn><mn>60</mn></mfrac><mo>≈</mo><mn>5.24</mn><mtext>分钟</mtext></mrow><annotation encoding="application/x-tex">
314.55 \text{秒} = \frac{314.55}{60} \approx 5.24 \text{分钟}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">314.55</span><span class="mord text"><span class="mord cjk_fallback">秒</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">60</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">314.55</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">5.24</span><span class="mord text"><span class="mord cjk_fallback">分钟</span></span></span></span></span></span></p>
<p>因此，传输这个 346MB 的文件大约需要 <strong>5.24 分钟</strong>。</p>
<h2>2. 优化文件传输速度</h2>
<p>在网络带宽无法提升的情况下，优化文件传输的方式可以帮助提高传输效率。以下是一些优化传输速度的方式，尽管网络速度固定为1.1MB/s，但通过减少数据量、优化传输机制可以加速整体的传输过程：</p>
<h3>2.1. <strong>压缩文件</strong></h3>
<p>传输前先对文件进行压缩，以减少实际传输的数据量。这可以通过压缩工具如 <code>gzip</code> 或者 <code>tar</code> 的压缩选项实现。虽然 <code>cactus.tar</code> 已经是一个归档文件，但它可能还没有被压缩。你可以通过以下命令进一步压缩：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">tar</span><span style="color:#D19A66"> -czvf</span><span style="color:#98C379"> cactus.tar.gz</span><span style="color:#98C379"> cactus.tar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>然后传输压缩后的文件 <code>cactus.tar.gz</code>。这样可以减少传输的数据量。</p>
<h3>2.2. <strong>使用 rsync 的压缩功能</strong></h3>
<p>如果选择使用 <code>rsync</code>，可以直接在传输过程中启用压缩选项 <code>-z</code>，这会在传输时压缩文件，减小需要传输的数据量：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">rsync</span><span style="color:#D19A66"> -avz</span><span style="color:#98C379"> cactus.tar</span><span style="color:#98C379"> user@remote_host:/path/to/destination/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这个方法在传输过程中自动压缩和解压缩，节省带宽。</p>
<h3>2.3. <strong>分片传输</strong></h3>
<p>如果文件非常大且网络波动较大，可以考虑将文件分割为多个小文件并行传输，优化传输的鲁棒性。可以使用 <code>split</code> 命令将文件分割，例如：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">split</span><span style="color:#D19A66"> -b</span><span style="color:#98C379"> 100M</span><span style="color:#98C379"> cactus.tar</span><span style="color:#98C379"> cactus_part_</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>然后可以通过多个会话同时传输各个文件部分，并在远端重组这些文件。传输完成后，通过 <code>cat</code> 命令在目标机器上合并文件：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">cat</span><span style="color:#98C379"> cactus_part_</span><span style="color:#E5C07B">*</span><span style="color:#ABB2BF"> &gt; </span><span style="color:#98C379">cactus.tar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>2.4. <strong>调整 SCP/RSYNC 的加密算法</strong></h3>
<p>如果 CPU 性能有限，加密的开销可能会降低传输速度。你可以尝试使用一个较轻量的加密算法来减小加密开销。</p>
<p>在 <code>scp</code> 中，可以指定更快速的加密算法（如 <code>arcfour</code> 或 <code>aes128-ctr</code>）：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">scp</span><span style="color:#D19A66"> -c</span><span style="color:#98C379"> arcfour</span><span style="color:#98C379"> cactus.tar</span><span style="color:#98C379"> user@remote_host:/path/to/destination/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>在 <code>rsync</code> 中，也可以通过 <code>ssh</code> 参数指定加密算法：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">rsync</span><span style="color:#D19A66"> -e</span><span style="color:#98C379"> 'ssh -c aes128-ctr'</span><span style="color:#98C379"> cactus.tar</span><span style="color:#98C379"> user@remote_host:/path/to/destination/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>2.5. <strong>利用多线程工具</strong></h3>
<p>你可以使用多线程文件传输工具，如 <code>bbcp</code> 或 <code>mcb</code>, 它们可以利用并行流加快传输速度。示例命令如下：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">bbcp</span><span style="color:#D19A66"> -z</span><span style="color:#D19A66"> -P</span><span style="color:#D19A66"> 5</span><span style="color:#98C379"> cactus.tar</span><span style="color:#98C379"> user@remote_host:/path/to/destination/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>其中 <code>-P 5</code> 指的是开启 5 个并行流来加速传输。</p>
<h3>2.6. <strong>UDP-based 传输工具</strong></h3>
<p>在某些场景中，基于 TCP 的传输可能会受到网络延迟影响。使用基于 UDP 的传输工具，如 <code>UDT</code> 或 <code>tsunami-udp</code>，可以在不可靠的网络条件下提升传输速度。UDP 传输没有 TCP 的流控制机制，但需要更复杂的错误检测与处理。</p>
<h3>2.7. <strong>减少包大小和窗口调整</strong></h3>
<p>使用 <code>rsync</code> 或 <code>scp</code> 时，可以调节网络窗口大小、包大小来优化传输效率。通过配置网络传输参数，可以更好地利用带宽。通过修改 SSH 参数来优化性能：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">scp</span><span style="color:#D19A66"> -o</span><span style="color:#98C379"> "TCPWindowSize=65536"</span><span style="color:#98C379"> cactus.tar</span><span style="color:#98C379"> user@remote_host:/path/to/destination/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>总结来说，如果带宽是固定的，最常用且简单的优化方法是<strong>压缩文件</strong>，结合 <code>rsync</code> 的压缩传输选项。对于更加复杂的场景，可以考虑分片传输、多线程、甚至基于 UDP 的传输方式。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Docker压缩镜像体积</title>
      <link>https://cactusli.net/linuxs/Docker/Docker%E5%8E%8B%E7%BC%A9%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF.html</link>
      <guid>https://cactusli.net/linuxs/Docker/Docker%E5%8E%8B%E7%BC%A9%E9%95%9C%E5%83%8F%E4%BD%93%E7%A7%AF.html</guid>
      <source url="https://cactusli.net/rss.xml">Docker压缩镜像体积</source>
      <description>1. 手动优化镜像体积【推荐】 1.1 新建 Dockerfile 并 build 为镜像 新建 Dockerfile文件，用于制作后端项目的 Docker 镜像。编写内容如下： 文件中 cactus-server.jar 的大小如图： image-20241015105045146image-20241015105045146 执行如下命令，构建名字...</description>
      <category>Docker</category>
      <pubDate>Wed, 25 Sep 2024 11:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 手动优化镜像体积【推荐】</h2>
<h3>1.1 新建 Dockerfile 并 build 为镜像</h3>
<p>新建 Dockerfile文件，用于制作后端项目的 Docker 镜像。编写内容如下：</p>
<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">## AdoptOpenJDK 停止发布 OpenJDK 二进制，而 Eclipse Temurin 是伸，提供更好的稳定性</span></span>
<span class="line"><span style="color:#61AFEF">FROM</span><span style="color:#ABB2BF"> eclipse-temurin:17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">## 创建目录，并使用它作为工作目录</span></span>
<span class="line"><span style="color:#61AFEF">RUN</span><span style="color:#ABB2BF"> mkdir -p /cactus-server</span></span>
<span class="line"><span style="color:#61AFEF">WORKDIR</span><span style="color:#ABB2BF"> /cactus-server</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">## 将后端项目的 Jar 文件，复制到镜像中</span></span>
<span class="line"><span style="color:#61AFEF">COPY</span><span style="color:#ABB2BF"> cactus-server.jar app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">## 设置 TZ 时区</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">## 设置 JAVA_OPTS 环境变量，可通过 docker run -e "JAVA_OPTS=" 进行覆盖</span></span>
<span class="line"><span style="color:#61AFEF">ENV</span><span style="color:#ABB2BF"> TZ=Asia/Shanghai JAVA_OPTS=</span><span style="color:#98C379">"-Xms512m -Xmx512m"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">## 暴露后端项目的 48080 端口</span></span>
<span class="line"><span style="color:#61AFEF">EXPOSE</span><span style="color:#ABB2BF"> 48080</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">## 启动后端项目</span></span>
<span class="line"><span style="color:#61AFEF">ENTRYPOINT</span><span style="color:#ABB2BF"> java ${JAVA_OPTS} -Djava.security.egd=file:/dev/./urandom -jar app.jar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件中 cactus-server.jar 的大小如图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20241015105045146.png" alt="image-20241015105045146" tabindex="0" loading="lazy"><figcaption>image-20241015105045146</figcaption></figure>
<p>执行如下命令，构建名字为 <code>cactus-server-offline-a</code> 的 Docker 镜像。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> build</span><span style="color:#D19A66"> --no-cache</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> cactus-server-offline-a:latest</span><span style="color:#98C379"> .</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>打包镜像完成后使用命令 <code>docker images</code> 来查看镜像的体积：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20241015105446540.png" alt="image-20241015105446540" tabindex="0" loading="lazy"><figcaption>image-20241015105446540</figcaption></figure>
<blockquote>
<p>可以看到此时的镜像体积是593MB。</p>
</blockquote>
<h3>1.2 压缩减小镜像体积</h3>
<p>首先优化镜像体积有以下几个步骤：</p>
<ul>
<li>
<p><strong>使用 Alpine 作为基础镜像</strong>：Alpine Linux 是一个轻量级的 Linux 发行版，可以显著减少镜像体积。</p>
</li>
<li>
<p><strong>多阶段构建</strong>：在第一阶段进行构建和打包，在第二阶段只保留运行时所需的内容。</p>
</li>
<li>
<p><strong>删除无用文件和缓存</strong>：安装软件包后，清理缓存和临时文件。</p>
</li>
<li>
<p><strong>确保字体文件可用</strong>：如果 Java 需要特定字体，明确安装它们。</p>
</li>
</ul>
<p>根据以上步骤，优化好的 Dockerfile 如下：</p>
<div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">FROM</span><span style="color:#ABB2BF"> eclipse-temurin:17-jre-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 安装字体和配置文件（尽量减少包）</span></span>
<span class="line"><span style="color:#61AFEF">RUN</span><span style="color:#ABB2BF"> apk add --no-cache ttf-dejavu fontconfig &amp;&amp; \</span></span>
<span class="line"><span style="color:#ABB2BF">    rm -rf /var/cache/apk/*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 创建工作目录并复制 jar 文件</span></span>
<span class="line"><span style="color:#61AFEF">WORKDIR</span><span style="color:#ABB2BF"> /cactus-server</span></span>
<span class="line"><span style="color:#61AFEF">COPY</span><span style="color:#ABB2BF"> cactus-server.jar app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 设置环境变量</span></span>
<span class="line"><span style="color:#61AFEF">ENV</span><span style="color:#ABB2BF"> TZ=Asia/Shanghai \</span></span>
<span class="line"><span style="color:#ABB2BF">    JAVA_OPTS=</span><span style="color:#98C379">"-Xms512m -Xmx512m"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 暴露端口</span></span>
<span class="line"><span style="color:#61AFEF">EXPOSE</span><span style="color:#ABB2BF"> 48800</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 启动服务</span></span>
<span class="line"><span style="color:#61AFEF">ENTRYPOINT</span><span style="color:#ABB2BF"> java ${JAVA_OPTS} -Dfile.encoding=UTF-8 \</span></span>
<span class="line"><span style="color:#ABB2BF">    -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom \</span></span>
<span class="line"><span style="color:#ABB2BF">    -jar app.jar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行如下命令，构建名字为 <code>cactus-server-offline-a</code> 的 Docker 镜像。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> build</span><span style="color:#D19A66"> --no-cache</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> cactus-server-offline-a:latest</span><span style="color:#98C379"> .</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>此时通过使用命令 <code>docker images</code> 再来查看镜像的体积：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20241015110302796.png" alt="image-20241015110302796" tabindex="0" loading="lazy"><figcaption>image-20241015110302796</figcaption></figure>
<p>如图所示，镜像体积从一开始的593MB成功减少到了346MB。</p>
<h2>2. Docker-Slim压缩镜像体积</h2>
<p>Docker-Slim 不会更改 Docker 容器映像中的任何内容并将其缩小多达 30 倍。 Docker-Slim 将通过使用各种分析技术了解您的应用程序及其需求来优化和保护您的容器。它会丢弃你不需要的东西,减少容器的攻击面。</p>
<p>Github：<a href="https://github.com/slimtoolkit/slim" target="_blank" rel="noopener noreferrer">Docker-Slim</a></p>
<h3>2.1 安装</h3>
<h4>2.1.1 手动安装</h4>
<ol>
<li>下载对应平台的包。
<ul>
<li><a href="https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_mac.zip" target="_blank" rel="noopener noreferrer">Latest Mac binaries</a> (<code>curl -L -o ds.zip https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_mac.zip</code>)</li>
<li><a href="https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_mac_m1.zip" target="_blank" rel="noopener noreferrer">Latest Mac M1 binaries</a> (<code>curl -L -o ds.zip https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_mac_m1.zip)</code>)</li>
<li><a href="https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux.tar.gz" target="_blank" rel="noopener noreferrer">Latest Linux binaries</a> (<code>curl -L -o ds.tar.gz https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux.tar.gz</code>)</li>
<li><a href="https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux_arm.tar.gz" target="_blank" rel="noopener noreferrer">Latest Linux ARM binaries</a> (<code>curl -L -o ds.tar.gz https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux_arm.tar.gz</code>)</li>
<li><a href="https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux_arm64.tar.gz" target="_blank" rel="noopener noreferrer">Latest Linux ARM64 binaries</a> (<code>curl -L -o ds.tar.gz https://github.com/slimtoolkit/slim/releases/download/1.40.11/dist_linux_arm64.tar.gz</code>)</li>
</ul>
</li>
<li>解压缩包，并选择性的将其移动到 bin 目录。</li>
</ol>
<p><strong>Linux：dist_linux</strong></p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">tar</span><span style="color:#D19A66"> -xvf</span><span style="color:#98C379"> dist_linux.tar.gz</span></span>
<span class="line"><span style="color:#61AFEF">mv</span><span style="color:#98C379">  dist_linux/docker-slim</span><span style="color:#98C379"> /usr/local/bin/</span></span>
<span class="line"><span style="color:#61AFEF">mv</span><span style="color:#98C379">  dist_linux/slim-sensor</span><span style="color:#98C379"> /usr/local/bin/</span></span>
<span class="line"><span style="color:#61AFEF">mv</span><span style="color:#98C379">  dist_linux/slim</span><span style="color:#98C379"> /usr/local/bin/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>苹果Mac：</strong></p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">unzip</span><span style="color:#98C379"> ds.zip</span></span>
<span class="line"><span style="color:#61AFEF">mv</span><span style="color:#98C379">  dist_mac/docker-slim</span><span style="color:#98C379"> /usr/local/bin/</span></span>
<span class="line"><span style="color:#61AFEF">mv</span><span style="color:#98C379">  dist_mac/docker-slim-sensor</span><span style="color:#98C379"> /usr/local/bin/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li>将解压缩包的位置添加到 PATH 环境变量中(可选)。</li>
</ol>
<blockquote>
<p>如果提取二进制文件的目录不在 PATH 中，则需要从该目录运行 Slim 应用二进制文件。</p>
</blockquote>
<h4>2.1.2 脚本安装</h4>
<p><strong>脚本</strong></p>
<p>你可以使用此脚本在Linux（x86和ARM）和macOS（x86和Apple Silicon）上安装当前版本的Slim。</p>
<div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" data-title="ruby" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">curl </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF">sL </span><span style="color:#56B6C2">https</span><span style="color:#D19A66">:</span><span style="color:#E06C75">//</span><span style="color:#ABB2BF">raw.githubusercontent.com</span><span style="color:#56B6C2">/</span><span style="color:#ABB2BF">slimtoolkit</span><span style="color:#56B6C2">/</span><span style="color:#ABB2BF">slim</span><span style="color:#56B6C2">/</span><span style="color:#ABB2BF">master</span><span style="color:#56B6C2">/</span><span style="color:#ABB2BF">scripts</span><span style="color:#56B6C2">/</span><span style="color:#ABB2BF">install</span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF">slim.sh | sudo </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF"> bash </span><span style="color:#56B6C2">-</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p><strong>Mac：</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">brew</span><span style="color:#98C379"> install</span><span style="color:#98C379"> docker-slim</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p><strong>Docker:</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> pull</span><span style="color:#98C379"> dslim/slim</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>2.2 如何使用</h3>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> images</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">grep</span><span style="color:#98C379"> offline</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240925111156650.png" alt="image-20240925111156650" tabindex="0" loading="lazy"><figcaption>image-20240925111156650</figcaption></figure>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker-slim</span><span style="color:#98C379"> build</span><span style="color:#D19A66"> -http-probe=false</span><span style="color:#D19A66"> --target</span><span style="color:#98C379"> cactus-server-offline:latest</span><span style="color:#D19A66"> --tag</span><span style="color:#98C379"> cactus-server-offline:slim</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240925111948723.png" alt="image-20240925111948723" tabindex="0" loading="lazy"><figcaption>image-20240925111948723</figcaption></figure>
<blockquote>
<p><em>默认会开启http的探测(--http-probe)。我们build的时候给他关上</em></p>
</blockquote>
<p>我们看到 cactus-server-offline:lates 镜像从 596MB 减少到了 352MB，至此，本次教程就到这里了。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20241015105045146.png" type="image/png"/>
    </item>
    <item>
      <title>Docker命令记录</title>
      <link>https://cactusli.net/linuxs/Docker/Docker%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95.html</link>
      <guid>https://cactusli.net/linuxs/Docker/Docker%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95.html</guid>
      <source url="https://cactusli.net/rss.xml">Docker命令记录</source>
      <description>Docker 入门 安装 官网安装：https://docs.docker.com/engine/install/ 利用脚本进行安装： 后台创建和运行容器 -d 以分离（后台）模式运行容器 -p 80:80 将端口 80 映射到容器中的端口 80，格式：宿主机端口:容器端口 docker/getting-started 要使用的镜像 以交互式命令创建并...</description>
      <category>Docker</category>
      <pubDate>Mon, 30 Sep 2024 15:57:02 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Docker 入门</h2>
<h3>安装</h3>
<p><strong>官网安装：<a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/install/</a></strong></p>
<p><strong>利用脚本进行安装</strong>：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> curl</span><span style="color:#D19A66"> -sSL</span><span style="color:#98C379"> https://get.docker.com/</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">sh</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> chmod</span><span style="color:#D19A66"> 777</span><span style="color:#98C379"> /var/run/docker.sock</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>后台创建和运行容器</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> docker</span><span style="color:#98C379"> run</span><span style="color:#D19A66"> -d</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> 80:80</span><span style="color:#98C379"> docker/getting-started</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><blockquote>
<ul>
<li><code>-d</code> 以分离（后台）模式运行容器</li>
<li><code>-p 80:80</code>  将端口 80 映射到容器中的端口 80，格式：宿主机端口:容器端口</li>
<li><code>docker/getting-started</code> 要使用的镜像</li>
</ul>
</blockquote>
<p><strong>以交互式命令创建并运行容器</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> docker</span><span style="color:#98C379"> run</span><span style="color:#D19A66"> -it</span><span style="color:#D19A66"> --rm</span><span style="color:#D19A66"> -p</span><span style="color:#98C379">  8001:8080</span><span style="color:#D19A66"> --name</span><span style="color:#98C379"> my-nginx</span><span style="color:#98C379"> nginx</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><blockquote>
<p>如果要退出容器但是不关闭容器，按<em>Ctrl+P+Q</em>即可。</p>
<ul>
<li><code>-it</code> 交互式 bash 模式</li>
<li><code>--rm</code> 容器终止运行后自动删除容器文件</li>
<li><code>-p 8001:8080</code> 将 <code>8001</code> 端口映射到容器中的 <code>8080</code> 端口</li>
<li><code>--name my-nginx</code> 指定名称</li>
<li><code>nginx</code> 要使用的镜像</li>
</ul>
</blockquote>
<h3>一般命令</h3>
<p>| 命令                                | 解释                                 |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Linux 常用命令</title>
      <link>https://cactusli.net/linuxs/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://cactusli.net/linuxs/Linux/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://cactusli.net/rss.xml">Linux 常用命令</source>
      <description>命令速查表 系统相关命令 硬件相关命令 用户相关命令 登陆相关命令 文件相关命令 文件传输 目录遍历 文件权限 压缩/打包 进程 安装源(编译) 搜索 磁盘使用情况 装包 网络 文件描述符 输出重定向 前后台 &amp;（终端关闭，程序也关闭） nohup（终端关闭，程序继续运行） screen（创建独立会话）</description>
      <category>Linux</category>
      <pubDate>Thu, 26 Sep 2024 17:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>命令速查表</h2>
<h3>系统相关命令</h3>
<p>| 命令                      | 解释                             |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring EL表达式</title>
      <link>https://cactusli.net/posts/Spring/SpringBase/Spring%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://cactusli.net/posts/Spring/SpringBase/Spring%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://cactusli.net/rss.xml">Spring EL表达式</source>
      <description>Spring EL表达式概述 Spring Expression Language（SpEL）是一种功能强大的表达式语言，广泛应用于Spring框架中。它允许在运行时动态地查询和操作对象图，支持属性访问、方法调用、集合操作、逻辑运算等多种功能。本文将详细介绍SpEL的背景、基本用法、应用场景及其在实际开发中的应用。 SpEL基本用法 表达式解析器 Sp...</description>
      <category>Spring</category>
      <pubDate>Tue, 17 Sep 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Spring EL表达式概述</h2>
<p>Spring Expression Language（SpEL）是一种功能强大的表达式语言，广泛应用于Spring框架中。它允许在运行时动态地查询和操作对象图，支持属性访问、方法调用、集合操作、逻辑运算等多种功能。本文将详细介绍SpEL的背景、基本用法、应用场景及其在实际开发中的应用。</p>
<h2>SpEL基本用法</h2>
<h3>表达式解析器</h3>
<p>SpEL 的核心组件是 <code>SpelExpressionParser</code>，用于解析和评估表达式。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">ExpressionParser</span><span style="color:#E06C75"> parser </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SpelExpressionParser</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>文本表达式</h3>
<p>SpEL 支持多种文本表达式类型，如字符串、数字、布尔值等。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Expression</span><span style="color:#E06C75"> exp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"'Hello World'"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> message </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> exp</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 输出: Hello World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1.024E+3"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // 1024  , 指数形式</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"0xFFFF"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 65535 , 十六进制</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"true"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"null"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>变量定义与访问</h3>
<p>通过 <code>EvaluationContext</code> 可以在表达式中使用变量。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">EvaluationContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StandardEvaluationContext</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">ExpressionParser</span><span style="color:#E06C75"> parser </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SpelExpressionParser</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> greeting </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#greeting"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 输出: Hello, SpEL</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> cactusli </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"new String('cactusli')"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   // 输出: cactusli</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>属性访问</h3>
<p>SpEL 支持通过属性名称访问对象的属性。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> name</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> name; }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getName</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#C678DD">return</span><span style="color:#ABB2BF"> name; }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">User</span><span style="color:#E06C75"> user </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> User</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Alice"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVariable</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"user"</span><span style="color:#ABB2BF">, user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#user.name"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 输出: Alice</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>方法调用和构造函数</h3>
<p>SpEL 支持调用对象的方法和构造函数。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"'Hello'.concat(' World')"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 输出: Hello World</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>集合的对象访问</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">EvaluationContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StandardEvaluationContext</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // 表达式的上下文,</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newArrayList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"b"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Maps</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newHashMap</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"A"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"B"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"2"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVariable</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"person"</span><span style="color:#ABB2BF">, person);</span><span style="color:#7F848E;font-style:italic">                        // 为了让表达式可以访问该对象, 先把对象放到上下文中</span></span>
<span class="line"><span style="color:#E5C07B">context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVariable</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"map"</span><span style="color:#ABB2BF">, map);</span></span>
<span class="line"><span style="color:#E5C07B">context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVariable</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"list"</span><span style="color:#ABB2BF">, list);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 列表</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#list[0]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">)</span><span style="color:#7F848E;font-style:italic">           // a , 下标</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// map</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#map[A]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">           // 1 , key</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 方法</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#person.getAge()"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 18 , 方法访问</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>对类型以及原生类的操作和控制</h3>
<p>T 操作符可以用于获取类型信息，并调用对象的静态方法。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">/</span><span style="color:#E06C75"> 获取类型</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"T(java.util.Date)"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Class</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // class java.util.Date</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 访问静态成员(方法或属性)</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"T(Math).abs(-1)"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 判断类型</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"'asdf' instanceof T(String)"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // true;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>操作符</h3>
<p>Spring EL 支持大多数的数学、逻辑和关系操作符。</p>
<ul>
<li>关系操作符, 包括: eq(==), ne(!=), lt()&lt;, le(&lt;=), gt(&gt;), ge(&gt;=)</li>
<li>逻辑运算符, 包括: and(&amp;&amp;), or(||), not(!)</li>
<li>数学操作符, 包括: 加(+), 减(-), 乘(*), 除(/), 取模(%), 幂指数(^)</li>
<li>其他操作符, 如: 三元操作符, instanceof, 赋值(=), 正则匹配</li>
</ul>
<p>另外三元操作符有个特殊的用法, 一般用于赋默认值, 比如: parseExpression("#name?:'defaultName'"), 如果变量name为空时设置默认值.</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1 &gt; -1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">         // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1 gt -1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">        // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"true or true"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"true || true"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">   // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"2 ^ 3"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">          // 8</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"true ? true : false"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#name ?: 'default'"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // default</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1 instanceof T(Integer)"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"'5.00' matches '^-?</span><span style="color:#56B6C2">\d</span><span style="color:#98C379">+(</span><span style="color:#56B6C2">\.\d</span><span style="color:#98C379">{2})?$'"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // true</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#person.name"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // Tom , 原来的值</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#person.name = 'Jim'"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // Jim , 赋值之后</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#person.name"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // Jim, 赋值起了作用</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>避免空指针</h3>
<p>当访问一个对象的属性或方法时, 若该对象为null, 就会出现空指针异常. 安全导航会判断对象是否为null,如果是的话, 就返回null而不是抛出空指针异常. 使用方式就是在对象后面加个 <strong>?</strong>， 如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">java代码解读复制代码</span><span style="color:#7F848E;font-style:italic">// 使用这种表达式可以避免抛出空指针异常</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#name?.toUpperCase()"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // null</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>this变量</h3>
<p>有个特殊的变量#this来表示当前的对象. 常用于集合的过滤</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//java代码解读复制代码// this 使用示例</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{1, 3, 5, 7}.?[#this &gt; 3]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // [5, 7]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>集合选择</h3>
<p>可以使用选择表达式对集合进行过滤或一些操作，从而生成一个新的符合选择条件的集合, 有如下一些形式:</p>
<ul>
<li><code>?[expression]</code>: 选择符合条件的元素</li>
<li><code>^[expression]</code>: 选择符合条件的第一个元素</li>
<li><code>$[expression]</code>: 选择符合条件的最后一个元素</li>
<li><code>![expression]</code>: 可对集合中的元素挨个进行处理</li>
</ul>
<p>对于集合可以配合#this变量进行过滤, 对于map, 可分别对keySet及valueSet分别使用key和value关键字;</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 集合</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{1, 3, 5, 7}.?[#this &gt; 3]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // [5, 7] , 选择元素</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{1, 3, 5, 7}.^[#this &gt; 3]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 5 , 第一个</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{1, 3, 5, 7}.$[#this &gt; 3]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 7 , 最后一个</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{1, 3, 5, 7}.![#this + 1]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // [2, 4, 6, 8] ,每个元素都加1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// map</span></span>
<span class="line"><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Maps</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newHashMap</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"A"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"B"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"C"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"D"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">EvaluationContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StandardEvaluationContext</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setVariable</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"map"</span><span style="color:#ABB2BF">, map);</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#map.?[key &gt; 3]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context);</span><span style="color:#7F848E;font-style:italic">             // {4=D}</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#map.?[value == 'A']"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context);</span><span style="color:#7F848E;font-style:italic">        // {1=A}</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"#map.?[key &gt; 2 and key &lt; 4]"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context);</span><span style="color:#7F848E;font-style:italic"> // {3=C}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>模板表达式</h3>
<p>模板表达式允许文字和表达式混合使用, 一般选择使用#{}作为一个定界符:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">EvaluationContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StandardEvaluationContext</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //表达式的上下文,</span></span>
<span class="line"><span style="color:#E5C07B">ExpressionParser</span><span style="color:#E06C75"> parser </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SpelExpressionParser</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseExpression</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"他的名字为#{#person.name}"</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> TemplateParserContext</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">getValue</span><span style="color:#ABB2BF">(context);</span><span style="color:#7F848E;font-style:italic"> // 他的名字为Tom</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Ubuntu挂盘操作</title>
      <link>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Ubuntu%E6%8C%82%E7%9B%98%E6%93%8D%E4%BD%9C.html</link>
      <guid>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Ubuntu%E6%8C%82%E7%9B%98%E6%93%8D%E4%BD%9C.html</guid>
      <source url="https://cactusli.net/rss.xml">Ubuntu挂盘操作</source>
      <description>检查硬盘，首先需要查看新硬盘能否被机器识别 image-20240905161439566image-20240905161439566 可以看见我们系统盘里有一个vdb1 的新硬盘500GB 被识别到。 找到新硬盘的设备名称 image-20240905161750214image-20240905161750214 我们可以看到新硬盘名称 /dev...</description>
      <category>Ubuntu 挂盘操作</category>
      <pubDate>Wed, 03 Apr 2024 15:36:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>检查硬盘，首先需要查看新硬盘能否被机器识别</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> lsblk</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905161439566.png" alt="image-20240905161439566" tabindex="0" loading="lazy"><figcaption>image-20240905161439566</figcaption></figure>
<p>可以看见我们系统盘里有一个vdb1 的新硬盘500GB 被识别到。</p>
<h2>找到新硬盘的设备名称</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> fdisk</span><span style="color:#D19A66"> -l</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905161750214.png" alt="image-20240905161750214" tabindex="0" loading="lazy"><figcaption>image-20240905161750214</figcaption></figure>
<p>我们可以看到新硬盘名称 /dev/vdb1 里面是有内容的。</p>
<h2>创建一个挂载点</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> work</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905162926662.png" alt="image-20240905162926662" tabindex="0" loading="lazy"><figcaption>image-20240905162926662</figcaption></figure>
<h2>格式化硬盘</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 注意：此操作将删除分区上的所有数据，请确保数据已备份。</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mkfs.xfs</span><span style="color:#98C379"> /dev/vdb1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>如果需要格式化的盘里有文件运行以下命令</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">mkfs.xfs</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> /dev/vdb1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905163520692.png" alt="image-20240905163520692" tabindex="0" loading="lazy"><figcaption>image-20240905163520692</figcaption></figure>
<h3>验证文件系统格式</h3>
<p>要再次确认 <code>/dev/vdb1</code> 的文件系统格式是否为 <code>XFS</code>，可以使用以下命令：</p>
<ul>
<li>
<p>使用 <code>lsblk -f</code> 检查文件系统类型：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sblk</span><span style="color:#D19A66"> -f</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p>或者使用 <code>file</code> 命令：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">file</span><span style="color:#D19A66"> -s</span><span style="color:#98C379"> /dev/vdb1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
</ul>
<p>输出应该显示 <code>XFS</code> 文件系统。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905162800175.png" alt="image-20240905162800175" tabindex="0" loading="lazy"><figcaption>image-20240905162800175</figcaption></figure>
<h2>挂载分区</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mount</span><span style="color:#98C379"> /dev/vdb1</span><span style="color:#98C379"> /work</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>验证挂载</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> df</span><span style="color:#D19A66"> -h</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905164055935.png" alt="image-20240905164055935" tabindex="0" loading="lazy"><figcaption>image-20240905164055935</figcaption></figure>
<h3>配置开机自动挂载</h3>
<p>获取分区的 UUID：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@kejipingshen-zygx-8new:/work#</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> blkid</span><span style="color:#98C379"> /dev/vdb1</span></span>
<span class="line"><span style="color:#61AFEF">/dev/vdb1:</span><span style="color:#98C379"> UUID="8c420242-b791-49fe-bbe3-614ee08be462"</span><span style="color:#98C379"> TYPE="xfs"</span><span style="color:#98C379"> PARTUUID="f3c842ff-01"</span></span>
<span class="line"><span style="color:#61AFEF">root@kejipingshen-zygx-8new:/work#</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将以下内容添加到 <code>/etc/fstab</code>：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">UUID</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"8c420242-b791-49fe-bbe3-614ee08be462"</span><span style="color:#61AFEF"> /work</span><span style="color:#98C379"> xfs</span><span style="color:#98C379"> defaults</span><span style="color:#D19A66"> 0</span><span style="color:#D19A66"> 0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h4>1.确保 <code>/etc/fstab</code> 中的配置正确：</h4>
<p>假设您已经在 <code>/etc/fstab</code> 中配置了如下条目：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">UUID</span><span style="color:#56B6C2">=</span><span style="color:#98C379">xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</span><span style="color:#61AFEF"> /work/data</span><span style="color:#98C379"> xfs</span><span style="color:#98C379"> defaults</span><span style="color:#D19A66"> 0</span><span style="color:#D19A66"> 0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ol>
<li>
<p><strong>运行 <code>mount -a</code></strong>：</p>
<p>运行以下命令来检查并应用 <code>/etc/fstab</code> 中的配置：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mount</span><span style="color:#D19A66"> -a</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果 <code>/etc/fstab</code> 配置正确，系统将自动挂载尚未挂载的分区。</p>
</li>
<li>
<p><strong>验证挂载情况</strong>：</p>
<p>使用 <code>df -h</code> 或 <code>mount | grep /mnt/data</code> 来验证挂载是否成功：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> df</span><span style="color:#D19A66"> -h</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>或者：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mount</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">grep</span><span style="color:#98C379"> /mnt/data</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
</ol>
<h4>2. 手动卸载并重新挂载分区</h4>
<p>如果已经手动挂载了该分区，可以先卸载它，然后使用 <code>mount -a</code> 来验证 <code>/etc/fstab</code> 的配置。</p>
<p>步骤：</p>
<ol>
<li>
<p><strong>卸载分区</strong>：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> umount</span><span style="color:#98C379"> /mnt/data</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p><strong>使用 <code>mount -a</code> 挂载分区</strong>：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mount</span><span style="color:#D19A66"> -a</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p><strong>检查挂载是否成功</strong>：</p>
<p>使用 <code>df -h</code> 或 <code>mount</code> 命令检查挂载情况。</p>
</li>
</ol>
<h4>3. 检查 <code>/etc/fstab</code> 语法是否正确</h4>
<p>在使用 <code>mount -a</code> 之前，您可以先检查 <code>/etc/fstab</code> 文件的语法是否正确，避免挂载时出现问题。可以使用以下命令来验证：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mount</span><span style="color:#D19A66"> -fav</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>其中：</p>
<ul>
<li><code>-f</code> 选项表示只检查但不实际挂载（dry-run）。</li>
<li><code>-a</code> 表示挂载 <code>/etc/fstab</code> 中的所有分区。</li>
<li><code>-v</code> 表示输出详细信息。</li>
</ul>
<h2>迁移 Docker 的 <code>overlay2</code> 文件夹</h2>
<p>要将 Docker 的 <code>overlay2</code> 文件夹迁移到另一个文件夹下，可以按照以下步骤操作。假设你想把 Docker 的数据迁移到一个新的目录，比如 <code>/new-docker-data</code>。</p>
<h3>1. 停止 Docker 服务</h3>
<p>首先，确保所有容器都停止运行，并停止 Docker 服务。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> systemctl</span><span style="color:#98C379"> stop</span><span style="color:#98C379"> docker</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>2. 创建新目录</h3>
<p>在目标位置创建一个新目录，用于存放 Docker 数据。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /new-docker-data</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>3. 移动 Docker 数据</h3>
<p>将现有的 Docker 数据从 <code>/var/lib/docker</code> 迁移到新的目录。这里需要使用 <code>rsync</code> 或 <code>mv</code> 来移动数据。</p>
<p>使用 <code>rsync</code> 的好处是能够保证文件权限、属性等信息被完整迁移，推荐使用 <code>rsync</code>。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> rsync</span><span style="color:#D19A66"> -aP</span><span style="color:#98C379"> /var/lib/docker/</span><span style="color:#98C379"> /new-docker-data/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>4. 修改 Docker 配置文件</h3>
<p>Docker 的默认数据目录是 <code>/var/lib/docker</code>，我们需要修改 Docker 的配置文件，指向新的目录。</p>
<p>编辑 Docker 的配置文件 <code>/etc/docker/daemon.json</code>，如果文件不存在，你可以新建这个文件。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> vim</span><span style="color:#98C379"> /etc/docker/daemon.json</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>添加以下内容：</p>
<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75">  "data-root"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"/new-docker-data"</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存并退出编辑器。</p>
<h3>5. 重启 Docker 服务</h3>
<p>现在可以重新启动 Docker 服务，并检查它是否正确运行。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> systemctl</span><span style="color:#98C379"> start</span><span style="color:#98C379"> docker</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>6. 验证</h3>
<p>使用 <code>docker info</code> 命令查看 Docker 的数据目录是否已经生效：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> docker</span><span style="color:#98C379"> info</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">grep</span><span style="color:#98C379"> "Docker Root Dir"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>你应该看到 <code>Docker Root Dir</code> 指向你指定的新目录 <code>/new-docker-data</code>。</p>
<p>如果一切正常，且旧的数据目录没有任何问题，你可以安全地删除旧的 <code>/var/lib/docker</code> 目录。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> rm</span><span style="color:#D19A66"> -rf</span><span style="color:#98C379"> /var/lib/docker</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>按照以上步骤，你就能成功地将 Docker 的数据目录迁移到另一个文件夹下了。</p>
<h2>Ubuntu 20.04 中进行磁盘分区</h2>
<p>1.<strong>使用 <code>fdisk</code> 创建新分区：</strong> 输入以下命令进入 <code>fdisk</code> 界面：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">fdisk</span><span style="color:#98C379"> /dev/vdb</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>然后执行以下步骤：</p>
<ul>
<li>输入 <code>n</code> 创建新分区。</li>
<li>输入 <code>p</code> 创建主分区。</li>
<li>选择分区号，例如 1（默认）。</li>
<li>按回车键以接受默认的第一个和最后一个扇区（或根据需要自定义大小）。</li>
<li>输入 <code>w</code> 保存并退出 <code>fdisk</code>。</li>
</ul>
<p><strong>刷新分区表：</strong> 运行以下命令确保内核更新了分区表：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>partprobe /dev/vdb</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p><strong>格式化分区为 <code>xfs</code> 文件系统：</strong> 使用以下命令将新创建的分区格式化为 <code>xfs</code> 文件系统：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>mkfs.xfs /dev/vdb1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p><strong>挂载分区（可选）：</strong> 创建挂载点并将分区挂载：</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>bash复制代码mkdir /mnt/vdb1</span></span>
<span class="line"><span>mount /dev/vdb1 /mnt/vdb1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240905161439566.png" type="image/png"/>
    </item>
    <item>
      <title>11种延时任务实方式</title>
      <link>https://cactusli.net/tutorial/%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/11%E7%A7%8D%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E6%96%B9%E5%BC%8F.html</link>
      <guid>https://cactusli.net/tutorial/%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/11%E7%A7%8D%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E6%96%B9%E5%BC%8F.html</guid>
      <source url="https://cactusli.net/rss.xml">11种延时任务实方式</source>
      <description>延时任务主要应用于需要在特定时间或延迟一段时间后执行的操作场景，比如订单支付超时取消订单功能，又比如自动确定收货的功能等等。所以就来从实现到原理来盘点延迟任务的11种实现方式，这些方式并没有绝对的好坏之分，只是适用场景的不大相同。 image-20240816164200487image-20240816164200487 DelayQueue Del...</description>
      <category>延时任务</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<p>延时任务主要应用于需要在特定时间或延迟一段时间后执行的操作场景，比如订单支付超时取消订单功能，又比如自动确定收货的功能等等。所以就来从实现到原理来盘点延迟任务的11种实现方式，这些方式并没有绝对的好坏之分，只是适用场景的不大相同。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816164200487.png" alt="image-20240816164200487" tabindex="0" loading="lazy"><figcaption>image-20240816164200487</figcaption></figure>
<h2>DelayQueue</h2>
<p><code>DelayQueue</code>是 <code>JDK</code> 提供的<code>api</code>，是一个延迟队列。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816164815646.png" alt="image-20240816164815646" tabindex="0" loading="lazy"><figcaption>image-20240816164815646</figcaption></figure>
<p>DelayQueue泛型参数得实现Delayed接口，Delayed继承了Comparable接口。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816164911015.png" alt="image-20240816164911015" tabindex="0" loading="lazy"><figcaption>image-20240816164911015</figcaption></figure>
<p><code>getDelay</code>方法返回这个任务还剩多久时间可以执行，小于0的时候说明可以这个延迟任务到了执行的时间了。</p>
<p><code>compareTo</code>这个是对任务排序的，保证最先到延迟时间的任务排到队列的头。</p>
<h3>DelayQueue 测试类</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> DelayQueueJDKTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        DelayQueue</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">CactusliTask</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">delayQueue</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DelayQueue</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    CactusliTask</span><span style="color:#E06C75"> task</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> delayQueue</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">take</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                    log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"获取到延迟任务:{}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getTaskContent</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                    e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"开始添加延迟任务"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        delayQueue</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">offer</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> CactusliTask</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"仙人球任务1，5秒"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        delayQueue</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">offer</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> CactusliTask</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"仙人球任务2，3秒"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        delayQueue</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">offer</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> CactusliTask</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"仙人球任务3，8秒"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> CactusliTask</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Delayed</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> taskContent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75"> triggerTime</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> CactusliTask</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> taskContent</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> delayTime</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">taskContent</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> taskContent;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">triggerTime</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> delayTime </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 1000</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> getDelay</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TimeUnit</span><span style="color:#E06C75;font-style:italic"> unit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> unit</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">convert</span><span style="color:#ABB2BF">(triggerTime </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">TimeUnit</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MILLISECONDS</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Delayed</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">triggerTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(((CactusliTask) o).</span><span style="color:#E5C07B">triggerTime</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>CactusliTask 实现了Delayed接口，其中构造参数有：</p>
<ul>
<li>taskContent：延迟任务的具体的内容</li>
<li>delayTime：延迟时间，秒为单位</li>
</ul>
</blockquote>
<h3>测试结果</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#C678DD">:</span><span style="color:#D19A66">15.492</span><span style="color:#E06C75"> [main] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DelayQueueJDKTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 开始添加延迟任务</span></span>
<span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#C678DD">:</span><span style="color:#D19A66">18.516</span><span style="color:#E06C75"> [Thread</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">0</span><span style="color:#E06C75">] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DelayQueueJDKTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 获取到延迟任务</span><span style="color:#C678DD">:</span><span style="color:#E06C75">仙人球任务2，3秒</span></span>
<span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20.511</span><span style="color:#E06C75"> [Thread</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">0</span><span style="color:#E06C75">] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DelayQueueJDKTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 获取到延迟任务</span><span style="color:#C678DD">:</span><span style="color:#E06C75">仙人球任务1，5秒</span></span>
<span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#C678DD">:</span><span style="color:#D19A66">23.519</span><span style="color:#E06C75"> [Thread</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">0</span><span style="color:#E06C75">] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DelayQueueJDKTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 获取到延迟任务</span><span style="color:#C678DD">:</span><span style="color:#E06C75">仙人球任务3，8秒</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此基于 JDK 自带的 DelayQueue 成功实现了延时任务。</p>
<h3>实现原理</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816171115066.png" alt="image-20240816171115066" tabindex="0" loading="lazy"><figcaption>image-20240816171115066</figcaption></figure>
<p><code>offer</code>方法在提交任务的时候，会通过根据<code>compareTo</code>的实现对任务进行排序，将最先需要被执行的任务放到队列头。</p>
<p><code>take</code>方法获取任务的时候，会拿到队列头部的元素，也就是队列中最早需要被执行的任务，通过getDelay返回值判断任务是否需要被立刻执行，如果需要的话，就返回任务，如果不需要就会等待这个任务到延迟时间的剩余时间，当时间到了就会将任务返回。</p>
<h2>Timer</h2>
<p>Timer 也是 JDK 中提供的一个用于安排任务在未来某个时间执行或重复执行的工具类。</p>
<h3>Timer 测试类</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TimerDelayQueueJDKTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Timer</span><span style="color:#E06C75"> timer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Timer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"开始添加延迟任务"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        timer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">schedule</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> TimerTask</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"执行仙人球任务1，6秒"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }, </span><span style="color:#D19A66">6000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>测试结果</h3>
<p>通过<code>schedule</code>提交一个延迟时间为6s的延迟任务，实现效果如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">D</span><span style="color:#C678DD">:</span><span style="color:#E06C75">\Public_software\Java_jdk\</span><span style="color:#D19A66">17</span><span style="color:#E06C75">\bin\</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">exe</span></span>
<span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">43.235</span><span style="color:#E06C75"> [main] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TimerDelayQueueJDKTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 开始添加延迟任务</span></span>
<span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">49.247</span><span style="color:#E06C75"> [Timer</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">0</span><span style="color:#E06C75">] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TimerDelayQueueJDKTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 执行仙人球任务1，6秒</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>实现原理</h3>
<p>提交的任务是一个<code>TimerTask</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816172400126.png" alt="image-20240816172400126" tabindex="0" loading="lazy"><figcaption>image-20240816172400126</figcaption></figure>
<p><code>TimerTask</code>内部有一个<code>nextExecutionTime</code>属性，代表下一次任务执行的时间，在提交任务的时候会计算出<code>nextExecutionTime</code>值。</p>
<p><code>Timer</code>内部有一个<code>TaskQueue</code>对象，用来保存<code>TimerTask</code>任务的，会根据<code>nextExecutionTime</code>来排序，保证能够快速获取到最早需要被执行的延迟任务。</p>
<p>在<code>Timer</code>内部还有一个执行任务的线程<code>TimerThread</code>，这个线程就跟<code>DelayQueue demo</code>中开启的线程作用是一样的，用来执行已经到延迟时间的任务。</p>
<p>所以总的来看，<code>Time</code>r有点像整体封装了<code>DelayQueue demo</code>中的所有东西，让用起来简单点。</p>
<p>虽然Timer用起来比较简单，但是在阿里规范中是不推荐使用的，主要是有以下几点原因：</p>
<ul>
<li>Timer使用单线程来处理任务，长时间运行的任务会导致其他任务的延时处理</li>
<li>Timer没有对运行时异常进行处理，一旦某个任务触发运行时异常，会导致整个Timer崩溃，不安全</li>
</ul>
<h2>ScheduledThreadPoolExecutor</h2>
<p>由于<code>Timer</code>在使用上有一定的问题，所以在<code>JDK1.5</code> 版本的时候提供了<code>ScheduledThreadPoolExecutor</code>，这个跟<code>Time</code>r的作用差不多，并且他们的方法的命名都是差不多的，但是<code>ScheduledThreadPoolExecutor</code>解决了单线程和异常崩溃等问题。</p>
<h3>测试类</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ScheduledThreadPoolExecutorTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ScheduledThreadPoolExecutor</span><span style="color:#E06C75"> executor</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ScheduledThreadPoolExecutor</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#ABB2BF"> ThreadPoolExecutor.</span><span style="color:#61AFEF">CallerRunsPolicy</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"提交延时任务"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        executor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">schedule</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"执行任务1，延时5秒"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }, </span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">TimeUnit</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SECONDS</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>测试结果</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">35</span><span style="color:#C678DD">:</span><span style="color:#D19A66">19.152</span><span style="color:#E06C75"> [main] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cactusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ScheduledThreadPoolExecutorTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 提交延时任务</span></span>
<span class="line"><span style="color:#D19A66">17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">35</span><span style="color:#C678DD">:</span><span style="color:#D19A66">24.166</span><span style="color:#E06C75"> [pool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">thread</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#E5C07B">INFO</span><span style="color:#E5C07B"> com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cactusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interview2</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">delayqueue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ScheduledThreadPoolExecutorTest</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75"> 执行任务1，延时5秒</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>实现原理</h3>
<p><code>ScheduledThreadPoolExecutor</code>继承了<code>ThreadPoolExecutor</code>，也就是继承了线程池，所以可以有很多个线程来执行任务。</p>
<p><code>ScheduledThreadPoolExecuto</code>r在构造的时候会传入一个<code>DelayedWorkQueue</code>阻塞队列，所以线程池内部的阻塞队列是<code>DelayedWorkQueue</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816174016758.png" alt="image-20240816174016758" tabindex="0" loading="lazy"><figcaption>image-20240816174016758</figcaption></figure>
<p>在提交延迟任务的时候，任务会被封装一个任务会被封装成<code>ScheduledFutureTask</code>对象，然后放到<code>DelayedWorkQueue</code>阻塞队列中。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816174909898.png" alt="image-20240816174909898" tabindex="0" loading="lazy"><figcaption>image-20240816174909898</figcaption></figure>
<p><code>ScheduledFutureTask</code>实现了前面提到的Delayed接口，所以其实可以猜到<code>DelayedWorkQueue</code>会根据<code>ScheduledFutureTask</code>对于Delayed接口的实现来排序，所以线程能够获取到最早到延迟时间的任务。当线程从<code>DelayedWorkQueue</code>中获取到需要执行的任务之后就会执行任务。</p>
<h2>RocketMQ</h2>
<p><code>RocketMQ</code>是阿里开源的一款消息中间件，其内部也是实现了延迟消息的功能，如果有对<code>RocketMQ</code>不熟悉的小伙伴可以看一下我之前写的<a href="https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20RocketMQ%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%92%8C%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84.html#_3-rockmq%E7%99%BB%E5%BD%95%E4%B8%8E%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">RocketMQ保姆级教程</a>进行学习。</p>
<p><code>RocketMQ</code>延迟消息的延迟时间默认有18个等级。当发送消息的时候只需要指定延迟等级即可。如果这18个等级的延迟时间不符和你的要求，可以修改<code>RocketMQ</code>服务端的配置文件。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240819105703628.png" alt="image-20240819105703628" tabindex="0" loading="lazy"><figcaption>image-20240819105703628</figcaption></figure>
<blockquote>
<p>当发送消息的时候只需要指定延迟等级即可。如果这18个等级的延迟时间不符和你的要求，可以修改RocketMQ服务端的配置文件。</p>
</blockquote>
<h3>RocketMQ 测试</h3>
<p>在项目中引入依赖如下：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">        &lt;!--SpringBoot与RocketMQ整合依赖--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.rocketmq&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;rocketmq-spring-boot-starter&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;2.2.3&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.2.0&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 application.properties 中配置：</p>
<div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># ========================RocketMQ=====================</span></span>
<span class="line"><span style="color:#C678DD">rocketmq.producer.group</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">cactusliProducer</span></span>
<span class="line"><span style="color:#C678DD">rocketmq.consumer.group</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">cactusliProducer</span></span>
<span class="line"><span style="color:#C678DD">rocketmq.name-server</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">192.168.1.20:9876</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建Topic 和 消费者组</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">./bin/mqadmin</span><span style="color:#98C379"> updateTopic</span><span style="color:#D19A66"> -n</span><span style="color:#98C379"> localhost:9876</span><span style="color:#D19A66"> -c</span><span style="color:#98C379"> DefaultCluster</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> cactusliDelayTaskTopic</span></span>
<span class="line"><span style="color:#61AFEF">./bin/mqadmin</span><span style="color:#98C379"> updateSubGroup</span><span style="color:#D19A66"> -n</span><span style="color:#98C379"> localhost:9876</span><span style="color:#D19A66"> -c</span><span style="color:#98C379"> DefaultCluster</span><span style="color:#D19A66"> -g</span><span style="color:#98C379"> cactusliConsumer</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>新建 <code>RocketMQProducerConfig</code> 配置消息生产者：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RocketMQProducerConfig</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Value</span><span style="color:#E06C75">(</span><span style="color:#98C379">"${rocketmq.producer.group}"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> producerGroup</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Value</span><span style="color:#E06C75">(</span><span style="color:#98C379">"${rocketmq.name-server}"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> namesrvAddr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> DefaultMQProducer</span><span style="color:#61AFEF"> defaultMQProducer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        DefaultMQProducer</span><span style="color:#E06C75"> cactusliDelayTaskProducer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DefaultMQProducer</span><span style="color:#ABB2BF">(producerGroup);</span></span>
<span class="line"><span style="color:#E5C07B">        cactusliDelayTaskProducer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setNamesrvAddr</span><span style="color:#ABB2BF">(namesrvAddr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            cactusliDelayTaskProducer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cactusliDelayTaskProducer;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在新建 <code>RocketMQConsumerConfig</code>配置消息消费者,监听<code>cactusliDelayTaskTopic</code>的消息：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RocketMQConsumerConfig</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Value</span><span style="color:#E06C75">(</span><span style="color:#98C379">"${rocketmq.name-server}"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> nameServer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Value</span><span style="color:#E06C75">(</span><span style="color:#98C379">"${rocketmq.consumer.group}"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> consumerGroup</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> DefaultMQPushConsumer</span><span style="color:#61AFEF"> defaultMQPushConsumer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        DefaultMQPushConsumer</span><span style="color:#E06C75"> consumer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DefaultMQPushConsumer</span><span style="color:#ABB2BF">(consumerGroup);</span></span>
<span class="line"><span style="color:#E5C07B">        consumer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setNamesrvAddr</span><span style="color:#ABB2BF">(nameServer);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            consumer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">subscribe</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cactusliDelayTaskTopic"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"*"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            consumer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">registerMessageListener</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> MessageListenerConcurrently</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#ABB2BF">                @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">                public</span><span style="color:#E5C07B"> ConsumeConcurrentlyStatus</span><span style="color:#61AFEF"> consumeMessage</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">MessageExt</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">msgs</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ConsumeConcurrentlyContext</span><span style="color:#E06C75;font-style:italic"> context</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                    for</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">MessageExt</span><span style="color:#E06C75"> msg</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> msgs) {</span></span>
<span class="line"><span style="color:#E5C07B">                        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"获取到延迟任务:{}"</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">msg</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBody</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E5C07B"> ConsumeConcurrentlyStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">CONSUME_SUCCESS</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#E5C07B">            consumer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> consumer;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>controller类，通过DefaultMQProducer发送延迟消息到`cactusliDelayTaskTopic这个topic，延迟等级为2，也就是延迟时间为5s的意思。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">RestController</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RocketMQDelayTaskController</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Resource</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> DefaultMQProducer</span><span style="color:#E06C75"> producer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">GetMapping</span><span style="color:#E06C75">(</span><span style="color:#98C379">"/rocketmq/add"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> addTask</span><span style="color:#ABB2BF">(@</span><span style="color:#E5C07B">RequestParam</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"task"</span><span style="color:#ABB2BF">) </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> task</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Message</span><span style="color:#E06C75"> msg</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Message</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cactusliDelayTaskTopic"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"TagA"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">task</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">RemotingHelper</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DEFAULT_CHARSET</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        msg</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setDelayTimeLevel</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 发送消息并得到消息的发送结果，然后打印</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"提交延迟任务"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        producer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">send</span><span style="color:#ABB2BF">(msg);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>测试结果</h3>
<p>启动应用，浏览器输入链接添加任务:<code> http://192.168.1.218:24618/rocketmq/add?task=仙人球下发订单1</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">2024</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">08</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">20T09</span><span style="color:#C678DD">:</span><span style="color:#D19A66">54</span><span style="color:#C678DD">:</span><span style="color:#D19A66">39.738</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">08</span><span style="color:#C678DD">:</span><span style="color:#D19A66">00</span><span style="color:#E06C75">  INFO </span><span style="color:#D19A66">21872</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240816164200487.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 方法引用结合lambda最佳实践</title>
      <link>https://cactusli.net/posts/Java/Javacc/Java8%20%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%BB%93%E5%90%88lambda%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html</link>
      <guid>https://cactusli.net/posts/Java/Javacc/Java8%20%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%BB%93%E5%90%88lambda%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 方法引用结合lambda最佳实践</source>
      <description>详解lambda中的方法引用 我们现在有一个苹果类，其代码定义如下： 因为重量单位的不同，所以得出的重量的结果可能是不同的，所以我们将计算重量的核心部分抽象成函数式接口，如下function所示，它要求我们传入Apple返回Integer： 假设我们对重量无需任何单位换算即原原本本返回重量本身，那么我们的表达式则直接是(a)-&amp;gt;a.getWeight(...</description>
      <category>lambda</category>
      <pubDate>Fri, 09 Aug 2024 14:36:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>详解lambda中的方法引用</h2>
<p>我们现在有一个苹果类，其代码定义如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Apple</span><span style="color:#ABB2BF">  {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> weight</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为重量单位的不同，所以得出的重量的结果可能是不同的，所以我们将计算重量的核心部分抽象成函数式接口，如下<code>function</code>所示，它要求我们传入<code>Apple</code>返回<code>Integer</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getWeight</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Apple</span><span style="color:#E06C75"> apple</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Function</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Apple</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">Integer</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> function) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> function</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(apple);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们对重量无需任何单位换算即原原本本返回重量本身，那么我们的表达式则直接是<code>(a)-&gt;a.getWeight()</code>，对应代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Apple</span><span style="color:#E06C75"> apple</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Apple</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">(apple,(a)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">()));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这个表达式还不是最精简的，按照方法引用的语法糖，如果我们的<code>lambda</code>表达式符合：<code>(arg)-&gt;arg.method()</code>，即传入的<code>lambda</code>就是<code>(实例变量)-&gt;实例变量.实例方法()</code>，那么这个表达式就可以直接缩写为<code>arg ClassName::invokeMethod</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/lambad1.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>于是我们的代码就可以精简成下面这样：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">(apple,Apple</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getWeight));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>除了上述这个公式以外，其实还有另外两种公式，如下所示我们的map映射希望将流中的字符串转为整型，然后输出：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">  Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(s </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(s))</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(i </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(i));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照jdk8的语法糖，对应的静态类调用静态方法的表达式<code>(args)-&gt;className.staticMethod(args)</code>可以直接缩写为<code>className-&gt;staticMethod(args)</code>，于是我们的整型转换的就可以直接缩写为<code>Integer::parseInt</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/lambad2.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Integer</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">parseInt)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(i </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(i));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一种则是针对多参数的如下所示，这是一个常规的排序lambda编程：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> str </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"b"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"A"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"B"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">((s1, s2) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareToIgnoreCase</span><span style="color:#ABB2BF">(s2));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>按照Java8的语法糖：<code>(arg1,arg2)-&gt;arg1.instanceMethod(arg2)</code>可以直接转换为<code>arg1ClassName::invokeInstanceMethod</code>，于是我们的就有了下面的推导：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/lambad3.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>最终我们的表达式就变成了这样：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> str </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"b"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"A"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"B"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">compareToIgnoreCase);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>方法引用对于含参构造器的抽象</h3>
<p>我们再来一个难一点的例子，假设我们的现在的类有重量和颜色两种属性，并指明使用全参构造器完成实例创建，我们如何将这个构造器转换为方法引用呢？</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Apple</span><span style="color:#ABB2BF">  {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> weight</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> color</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们不妨简单梳理一下，我们的构造器为传参顺序为<code>weight</code>、<code>color</code>然后创建<code>Apple</code>实例，对此我们可以大体抽象出函数式接口的签名为<code>(Integer,String)-&gt;Apple</code>，基于这个签名我们可以直接套用公式<code>BiFunction</code>，它的签名为<code>(T,U)-&gt;R</code>，参数列表符合要求，我们直接将类型代入完成函数式接口抽象：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Apple</span><span style="color:#61AFEF"> createApple</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Integer</span><span style="color:#E06C75"> weight</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> color</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">BiFunction</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> String</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> Apple</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> func) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> func</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(weight, color);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述的签名的参数列表和预期返回值，我们得出下面这样一条<code>lambda</code>表达式作为入参传入，由此得到一个<code>Apple</code>实例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF"> createApple</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"yellow"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">(w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">s)</span><span style="color:#C678DD">-&gt;new</span><span style="color:#61AFEF"> Apple</span><span style="color:#E06C75">(w</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">s))</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>按照上文所说的公式，于是我们的表达式又可以转为方法引用：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF"> createApple</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"yellow"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">Apple</span><span style="color:#C678DD">::new</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>lambda和方法引用的结合</h3>
<p>我们希望对苹果类进行排序，对此我们给出苹果类的实例集合：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> appleList </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Apple</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"green"</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">                new</span><span style="color:#61AFEF"> Apple</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">200</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"red"</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">                new</span><span style="color:#61AFEF"> Apple</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">155</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"yellow"</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">                new</span><span style="color:#61AFEF"> Apple</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">120</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"red"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看函数式接口<code>Comparator</code>的抽象方法 <code>int compare(T o1, T o2);</code>得出对应的函数签名为<code>(T,T)-&gt;Integer</code>，代入我们的Apple类，那么这个比较器的函数描述符则是<code>(Apple,Apple)-&gt;Integer</code>，于是我们就有了下面这条<code>lambda</code>表达式：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> comparator </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (a1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">a2)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">a1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">a2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>我们键入如下代码进行调用输出：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> appleList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">(comparator);</span></span>
<span class="line"><span style="color:#E5C07B"> appleList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>和预期比较结果一致：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">Apple</span><span style="color:#E06C75">(weight</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> color</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">green)</span></span>
<span class="line"><span style="color:#61AFEF">Apple</span><span style="color:#E06C75">(weight</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">120</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> color</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">red)</span></span>
<span class="line"><span style="color:#61AFEF">Apple</span><span style="color:#E06C75">(weight</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">155</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> color</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">yellow)</span></span>
<span class="line"><span style="color:#61AFEF">Apple</span><span style="color:#E06C75">(weight</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">200</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> color</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">red)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上我们还可以做的更加精简，因为JDK8中的<code>Comparator</code>已经为比较器提供了一个方法<code>comparing</code>，查看其源码可以看到他要求传入一个入参<code>keyExtractor</code>，从语义上就可以知道这个参数是作为比较的条件，以我们的例子就是<code>Apple</code>的<code>weight</code>。 这个<code>keyExtractor</code>是<code>Function</code>接口，查看其泛型我们也可以知晓它的函数式签名为<code>T-&gt;R</code>，由此我们可以推理出该方法本质就是通过Function接口变量<code>keyExtractor</code>生成比较变量的实例然后调用<code>compareTo</code>进行比较并返回结果：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//要求传入keyExtractor即作为比较的条件</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> U</span><span style="color:#E06C75"> extends </span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> U</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E5C07B"> Comparator</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> comparing</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#E5C07B">            Function</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> T</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> ?</span><span style="color:#E06C75"> extends U</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> keyExtractor)</span></span>
<span class="line"><span style="color:#E06C75">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //......</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Comparator</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> Serializable)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         //通过keyExtractor生成key值调用其compareTo方法进行比较</span></span>
<span class="line"><span style="color:#E06C75">            (c1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> c2) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> keyExtractor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(c1).</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">keyExtractor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(c2));</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述分析我们就可以开始编写这个比较器的<code>keyExtractor</code>的<code>lambda</code>表达式了，如下图，通过<code>keyExtractor</code>泛型得出函数描述符为<code>(T)-&gt;R</code>，基于我们的场景推导出公式是<code>apple实例-&gt;apple实例的weight</code>，最后<code>comparing</code>回基于这个函数接口生成的<code>R对象(我们的场景是weight即int类型)</code>调用<code>compareTo</code>进行比较：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/lambad4.png" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure>
<p>于是我们就有了这样一条lambda表达式，但这还不是最精简的：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> comparator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(a</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>按照<code>lambda</code>的语法糖:<code>instance-&gt;instance.method</code> 可以直接转为<code>instanceType::method</code>，我们最终的表达式如下，预期结果也和之前一致：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> comparator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(Apple</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getWeight);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>当然有时候我们希望能够对结果进行反向排序，我们也只需在comparing方法后面加一个reversed即实现，从语义和使用上是不是都很方便呢？</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> comparator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(Apple</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getWeight).</span><span style="color:#61AFEF">reversed</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>复合表达式</h2>
<h3>复合比较器</h3>
<p>自此我们基本将方法引用的推导和使用都讲完了，接下来我们还是基于<code>lambda</code>做一些实用的拓展，先来说说复合比较器，以上文的苹果为例，假设我们希望当重量一样时，在比较颜色进行进一步比较，那么我们就可以直接通过<code>thenComparing</code>生成复合表达式：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> comparator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(Apple</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getWeight).</span><span style="color:#61AFEF">reversed</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">thenComparing</span><span style="color:#ABB2BF">(Apple</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getColor);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>谓词复合</h3>
<p>还是用上面的例子，我们希望根据不同的条件从苹果集合中过滤出复合条件的苹果，对此我们基于<code>Predicate</code>即断言函数式接口编写了一个<code>filterApple</code>方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Apple</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> filterApple</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Apple</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> appleList</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Predicate</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Apple</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> predicate) {</span></span>
<span class="line"><span style="color:#E5C07B">        List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Apple</span><span style="color:#E06C75"> apple </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> appleList) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //复合predicate设定条件的苹果存入集合中</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(apple)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(apple);</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> list</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如客户需要过滤出红色的苹果，基于predicate的签名我们得出这样一个表达式，这里就不多介绍了：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF"> filterApple</span><span style="color:#E06C75">(appleList</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> apple </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> apple</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getColor</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"red"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>假如这时候我们有需要过滤出不为红色的苹果呢？其实<code>JDK8</code>为我们提供了一个非常强大的谓词<code>negate</code>，我们完全可以基于上面的代码进行改造从而实现需求，如下所示<code>negate</code>就相当于<code>!"red".equals(a.getColor());</code>，语义是不是很清晰呢？</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> predicate </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> apple </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> apple</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getColor</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"red"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        filterApple</span><span style="color:#E06C75">(appleList</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">negate</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们需要再次变化了，我们希望找出红色且重量大于150，或者颜色为绿色的苹果，这时候又怎么办呢？我们说过<code>JDK8</code>提供了<code>and</code>、<code>or</code>等谓词，我们的代码完全可以写成下文所示,可以看到代码语义以及流畅度都相比<code>JDK8</code>之前的各种<code>&amp;&amp; ||</code>拼接<code>for</code>循环来说优雅非常多：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"> //过滤出红色的苹果</span></span>
<span class="line"><span style="color:#E5C07B">        Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> predicate </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> apple </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> apple</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getColor</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"red"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //过滤出红色且大于150 或者绿色的苹果</span></span>
<span class="line"><span style="color:#E5C07B">        Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> redAndHeavyAppleOrGreen </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">and</span><span style="color:#ABB2BF">(apple </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> apple</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWeight</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 150</span><span style="color:#ABB2BF">).</span></span>
<span class="line"><span style="color:#61AFEF">                or</span><span style="color:#E06C75">(apple </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> apple</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getColor</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"green"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        filterApple</span><span style="color:#E06C75">(appleList</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> redAndHeavyAppleOrGreen)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>函数复合</h3>
<p>我们都说代码和数学息息相关，其实java8也提供很多函数式接口可以运用于数学公式上,例如，我们现在需要计算<code>f(g(x))</code>，这个公式学过高数的同学都知道，是先计算<code>g(x)</code>再将<code>g(x)</code>的结果作为入参交给<code>f(x)</code>计算，对应题解案例如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">我们假设</span><span style="color:#61AFEF">g</span><span style="color:#E06C75">(x)</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">x </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF">f</span><span style="color:#E06C75">(x)</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">x</span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span></span>
<span class="line"><span style="color:#E06C75">假如x</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">1</span></span>
<span class="line"><span style="color:#E06C75">那么</span><span style="color:#61AFEF">f</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">g</span><span style="color:#E06C75">(x))最终就会等于4</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解数学公式之后，我们完全可以使用java代码表示出来，首先我们先声明一下<code>f(x)</code>和<code>g(x)</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//f(x)</span></span>
<span class="line"><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> //g(x)</span></span>
<span class="line"><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> g </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在表示<code>g(f(x))</code>，通过复合表达式<code>andThen</code>表达了数学的计算顺序，即显得出<code>f(x)</code>结果，然后<code>(andThen)</code>代入<code>g(x)</code>中：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"> //意味先计算f(x)在计算g(x)</span></span>
<span class="line"><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> h </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">andThen</span><span style="color:#ABB2BF">(g);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(result);</span><span style="color:#7F848E;font-style:italic"> //输出 4</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上面的例子，如果我们还需要计算<code>f(g(x))</code>要怎么办呢？从f(x)角度来看，g(x)的结果组合到f(x)上，所以我们可以直接实用compose方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> gfx </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compose</span><span style="color:#ABB2BF">(g);</span></span>
<span class="line"><span style="color:#E5C07B"> Integer</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> gfx</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(result);</span><span style="color:#7F848E;font-style:italic">// 输出 3</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选其中一种好理解的实用就行了。</p>
<h2>小结</h2>
<p>自此我们将方法引用的推导和实用，以及各种表达式组合的内容都介绍完了，希望对你有帮助。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/lambad1.png" type="image/png"/>
    </item>
    <item>
      <title>基础篇之概述及入门案例</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%901%E3%80%91%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%901%E3%80%91%E5%9F%BA%E7%A1%80%E7%AF%87%E4%B9%8B%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B.html</guid>
      <source url="https://cactusli.net/rss.xml">基础篇之概述及入门案例</source>
      <description>1. 简介 本系列基于最新Spring Boot 3.x + Spring Security 6.x版本，由浅入深，从实战到源码分析，详细讲解各种 Spring Security 的使用技巧，适用于初学和进阶使用者。 本系列学习路线： image-20231215180957948image-20231215180957948 2. 安全框架 在 Ja...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p>本系列基于最新<code>Spring Boot 3.x + Spring Security 6.x</code>版本，由浅入深，从实战到源码分析，详细讲解各种 <code>Spring Security </code>的使用技巧，适用于初学和进阶使用者。</p>
<p><strong>本系列学习路线：</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231215180957948.png" alt="image-20231215180957948" tabindex="0" loading="lazy"><figcaption>image-20231215180957948</figcaption></figure>
<h2>2. 安全框架</h2>
<p>在 Java 生态中，目前有 <a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">Spring Security</a> 和 <a href="https://shiro.apache.org/" target="_blank" rel="noopener noreferrer">Apache Shiro</a> 两个安全框架，可以完成认证和授权的功能。本文主要是针对 Spring Security 进行详解。</p>
<ul>
<li>
<p><strong>Spring Security</strong></p>
<p>Spring Security是一个强大而全面的身份验证和访问控制框架，构建在Spring框架之上。它提供了全面的安全性服务，支持在应用程序中进行身份验证、授权和保护，同时还包括对常见安全攻击的防护机制。Spring Security是一个高度可定制的框架，可以轻松地集成到Spring应用程序中。</p>
<p><strong>关键特点和功能：</strong></p>
<ul>
<li><strong>综合性安全性：</strong> 提供细粒度的身份验证和授权控制。</li>
<li><strong>可扩展性：</strong> 易于集成到Spring框架中，同时支持自定义扩展。</li>
<li><strong>集成性：</strong> 能够与Spring框架和其他Spring项目（如Spring Boot）无缝集成。</li>
</ul>
<p><strong>官方网站：</strong> <a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">Spring Security</a></p>
<p><strong>GitHub地址：</strong> <a href="https://github.com/spring-projects/spring-security" target="_blank" rel="noopener noreferrer">GitHub地址</a></p>
</li>
<li>
<p><strong>Apache Shiro</strong></p>
<p><strong>官方术语介绍：</strong> Apache Shiro是一个功能强大且易于使用的Java安全框架，提供了身份验证、授权、会话管理和密码服务等核心安全功能。Shiro的设计目标是简化安全性的实现，并提供开发人员友好的API，以便轻松地将安全性集成到任何应用程序中。</p>
<p><strong>关键特点和功能：</strong></p>
<ul>
<li><strong>简单易用：</strong> 提供直观的API和清晰的安全性概念。</li>
<li><strong>综合性：</strong> 提供全面的身份验证、授权、会话管理和密码服务。</li>
<li><strong>无依赖性：</strong> 可以独立使用，不依赖其他框架。</li>
</ul>
<p><strong>官方网站：</strong> <a href="https://shiro.apache.org/" target="_blank" rel="noopener noreferrer">Apache Shiro</a></p>
</li>
</ul>
<p>在所有开发的系统中，确保系统安全性的基本要求是进行认证（authentication）和授权（authorization）。</p>
<ul>
<li>
<p><strong>认证（Authentication）：</strong> 认证是确认用户身份的过程。通过认证，系统可以验证用户是谁，以确保他们声称的身份是有效的。常见的认证方式包括用户名和密码、令牌、生物识别（指纹、面部识别等）等。认证通常在用户登录系统时进行，一旦用户成功通过认证，系统就会颁发一个用于识别该用户的凭证，该凭证通常被称为身份令牌。</p>
</li>
<li>
<p><strong>授权（Authorization）：</strong> 授权是确定用户是否有权进行某些操作或访问特定资源的过程。认证成功后，系统需要检查用户的权限，并根据其权限级别来决定是否允许执行特定的操作。授权确保用户只能访问他们被授予权限的资源。授权通常通过角色（Roles）或权限（Permissions）的概念来实现，用户被分配到不同的角色或权限组中，以确定其在系统中的权限范围。</p>
</li>
</ul>
<p>在现代应用程序中，常见的安全实践包括使用安全协议（如OAuth、OpenID Connect）、多因素身份验证（MFA）、密钥管理、会话管理等来增强认证和授权的安全性。这些安全机制帮助确保只有合法用户能够访问系统，并且他们只能进行被授权的操作。</p>
<blockquote>
<h2>认证 (authentication) 和授权 (authorization) 的区别</h2>
<p>以前一直分不清 authentication 和 authorization，其实很简单，举个例子来说：</p>
<p>你要登机，你需要出示你的 passport 和 ticket，passport 是为了证明你张三确实是你张三，这就是 authentication；而机票是为了证明你张三确实买了票可以上飞机，这就是 authorization。</p>
<p>在 computer science 领域再举个例子：</p>
<p>你要登陆论坛，输入用户名张三，密码1234，密码正确，证明你张三确实是张三，这就是 authentication；再一check用户张三是个版主，所以有权限加精删别人帖，这就是 authorization。</p>
</blockquote>
<h2>3. 入门案例</h2>
<blockquote>
<p>示例代码对应仓库：</p>
</blockquote>
<h3>3.1 引入依赖项</h3>
<p>在 <a href=""><code>pom.xml</code></a> 文件中，引入spring-boot-starter-security、spring-boot-starter-web 依赖。</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;?</span><span style="color:#E06C75">xml</span><span style="color:#D19A66"> version</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"1.0"</span><span style="color:#D19A66"> encoding</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">project</span><span style="color:#D19A66"> xmlns</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"http://maven.apache.org/POM/4.0.0"</span></span>
<span class="line"><span style="color:#D19A66">         xmlns:xsi</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"http://www.w3.org/2001/XMLSchema-instance"</span></span>
<span class="line"><span style="color:#D19A66">         xsi:schemaLocation</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">modelVersion</span><span style="color:#ABB2BF">&gt;4.0.0&lt;/</span><span style="color:#E06C75">modelVersion</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">parent</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-parent&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.1.6&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">relativePath</span><span style="color:#ABB2BF">/&gt; </span><span style="color:#7F848E;font-style:italic">&lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">parent</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;cactus-01-springsecurity-demo&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependencies</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        &lt;!-- 进行 Spring MVC 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        &lt;!-- 进行 Spring Security 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-security&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependencies</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">project</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>具体每个依赖项的作用，可以自己认真看下项目中添加的注释。</p>
</blockquote>
<h3>3.2 启动主程序 SecurityApplication</h3>
<p>创建 <a href=""><code>SecurityApplication.java</code></a> 类，配置 <code>@SpringBootApplication</code> 注解即可。代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">SpringBootApplication</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SecurityApplication</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SpringApplication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SecurityApplication</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, args);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.3 在 resources 下新建配置文件</h3>
<p>在 <a href="https://github.com/YunaiV/SpringBoot-Labs/blob/master/lab-01-spring-security/lab-01-springsecurity-demo/src/main/resources/application.yaml" target="_blank" rel="noopener noreferrer"><code>application.yml</code></a> 中，添加 Spring Security 配置，如下：</p>
<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">server</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  # 服务端口</span></span>
<span class="line"><span style="color:#E06C75">  port</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">8888</span></span>
<span class="line"><span style="color:#E06C75">spring</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  # Spring Security 配置项，对应 SecurityProperties 配置类</span></span>
<span class="line"><span style="color:#E06C75">  security</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 配置默认的 InMemoryUserDetailsManager 的用户账号与密码。</span></span>
<span class="line"><span style="color:#E06C75">    user</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">      name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">user</span><span style="color:#7F848E;font-style:italic"> # 账号</span></span>
<span class="line"><span style="color:#E06C75">      password</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">user</span><span style="color:#7F848E;font-style:italic"> # 密码</span></span>
<span class="line"><span style="color:#E06C75">      roles</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">ADMIN</span><span style="color:#7F848E;font-style:italic"> # 拥有角色</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>spring.security</code> 配置项，设置 Spring Security 的配置，对应 <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java" target="_blank" rel="noopener noreferrer">SecurityProperties</a> 配置类。</p>
<p>默认情况下，Spring Boot <a href="https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java" target="_blank" rel="noopener noreferrer">UserDetailsServiceAutoConfiguration</a> 自动化配置类，会创建一个<strong>内存级别</strong>的 <a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/provisioning/InMemoryUserDetailsManager.java" target="_blank" rel="noopener noreferrer">InMemoryUserDetailsManager</a> Bean 对象，提供认证的用户信息。</p>
<p>这里，我们<strong>添加了</strong> <code>spring.security.user</code> 配置项，UserDetailsServiceAutoConfiguration 会基于配置的信息创建一个用户 <a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/core/userdetails/User.java" target="_blank" rel="noopener noreferrer">User</a> 在内存中。</p>
<p>如果，我们<strong>未添加</strong> <code>spring.security.user</code> 配置项，UserDetailsServiceAutoConfiguration 会自动创建一个用户名为 <code>"user"</code> ，密码为 UUID 随机的用户 <a href="https://github.com/spring-projects/spring-security/blob/master/core/src/main/java/org/springframework/security/core/userdetails/User.java" target="_blank" rel="noopener noreferrer">User</a> 在内存中。</p>
<h3>3.4 新建 AdminController</h3>
<p>在 <code>cn.cactus.boot.springsecurity.controller.AdminController</code> 包下，创建  <a href="https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-01-spring-security/lab-01-springsecurity-demo/src/main/java/cn/iocoder/springboot/lab01/springsecurity/controller/AdminController.java" target="_blank" rel="noopener noreferrer">AdminController</a> 类，提供测试 API 接口。代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Package: cn.cactus.boot.security.controller</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Description:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @Author 仙人球⁶ᴳ | 微信：Cactusesli</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @Date 2023/12/15 14:36</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @Github https://github.com/lixuanfengs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">RestController</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">RequestMapping</span><span style="color:#E06C75">(</span><span style="color:#98C379">"/admin"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AdminController</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">GetMapping</span><span style="color:#E06C75">(</span><span style="color:#98C379">"/testString"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> testString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "♥访问成功♥"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们先提供一个 <code>"/admin/testString"</code> 接口，用于测试未登录时，会被拦截到登录界面。</p>
<h3>3.5 测试</h3>
<p>执行<code>SecurityApplication#main(String[] args)</code> 方法，运行项目。</p>
<p>项目启动成功后，浏览器访问 <a href="http://127.0.0.1:8888/admin/testString" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8888/admin/testString</a> 接口。因为未登录，所以被 Spring Security 拦截到登录界面。如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231215144457224.png" alt="image-20231215144457224" tabindex="0" loading="lazy"><figcaption>image-20231215144457224</figcaption></figure>
<p>因为我们没有<strong>自定义</strong>登录界面，所以默认会使用 <a href="https://github.com/spring-projects/spring-security/blob/master/web/src/main/java/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.java" target="_blank" rel="noopener noreferrer">DefaultLoginPageGeneratingFilter</a> 类，生成上述界面。</p>
<p>输入在<code>  application.yml</code> 中配置的用户名密码：user/test 进行登录系统。登录完成后，因为 Spring Security 会记录被拦截的访问地址，所以浏览器自动动跳转 <a href="http://127.0.0.1:8888/admin/testString" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8888/admin/testString</a> 接口。访问结果如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231215144951292.png" alt="image-20231215144951292" tabindex="0" loading="lazy"><figcaption>image-20231215144951292</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231215180957948.png" type="image/png"/>
    </item>
    <item>
      <title>认证篇之使用数据库存储用户</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%902%E3%80%91%E8%AE%A4%E8%AF%81%E7%AF%87%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%902%E3%80%91%E8%AE%A4%E8%AF%81%E7%AF%87%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7.html</guid>
      <source url="https://cactusli.net/rss.xml">认证篇之使用数据库存储用户</source>
      <description>1. 简介 在用户认证过程中，常见的方式是通过用户名和密码进行验证。认证服务首先根据提供的用户名从存储中检索用户信息，随后验证输入的密码是否与存储中的密码匹配。Spring Security 提供多种灵活的用户名和密码存储机制供选择，如下： 内存：将用户信息直接配置在内存中，适用于小型应用或者测试环境。这种方式的配置相对简单，但不适合生产环境。 关系型...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p>在用户认证过程中，常见的方式是通过用<strong>户名和密码</strong>进行验证。认证服务首先根据提供的<strong>用户名</strong>从存储中检索用户信息，随后验证输入的<strong>密码</strong>是否与存储中的<strong>密码</strong>匹配。Spring Security 提供多种灵活的用户名和密码存储机制供选择，如下：</p>
<ul>
<li>
<p><strong>内存</strong>：将用户信息直接配置在内存中，适用于小型应用或者测试环境。这种方式的配置相对简单，但不适合生产环境。</p>
<ul>
<li>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> configure</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">AuthenticationManagerBuilder</span><span style="color:#E06C75"> auth) throws Exception {</span></span>
<span class="line"><span style="color:#E06C75">    auth</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">inMemoryAuthentication</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">withUser</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"user"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">password</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"password"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">roles</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"USER"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">and</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">withUser</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"admin"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">password</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"admin"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">roles</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"USER"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"ADMIN"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
</ul>
<ul>
<li>
<p><strong>关系型数据库</strong>：使用关系型数据库存储用户信息，Spring Security提供了默认的数据库表结构，也可以进行自定义表结构。</p>
<ul>
<li>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Autowired</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> DataSource</span><span style="color:#E06C75"> dataSource</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> configure</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">AuthenticationManagerBuilder</span><span style="color:#E06C75"> auth) throws Exception {</span></span>
<span class="line"><span style="color:#E06C75">    auth</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">jdbcAuthentication</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">dataSource</span><span style="color:#ABB2BF">(dataSource)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">usersByUsernameQuery</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"SELECT username, password, enabled FROM users WHERE username=?"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">authoritiesByUsernameQuery</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"SELECT username, authority FROM authorities WHERE username=?"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述配置中，通过<code>usersByUsernameQuery</code>和<code>authoritiesByUsernameQuery</code>指定了查询用户信息和权限信息的SQL语句。</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><strong>使用<code> UserDetailsService</code>的自定义数据存储</strong>：实现自定义的<code>UserDetailsService</code>接口，从任何数据源加载用户信息。这种方式适用于各种非关系型数据库或其他数据源。</p>
<ul>
<li>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Service</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CustomUserDetailsService</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> UserDetailsService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Autowired</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> UserRepository</span><span style="color:#E06C75"> userRepository</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> UserDetails</span><span style="color:#61AFEF"> loadUserByUsername</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> username</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> UsernameNotFoundException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        User</span><span style="color:#E06C75"> user</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> userRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">findByUsername</span><span style="color:#ABB2BF">(username);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (user </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UsernameNotFoundException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"User not found with username: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> username);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> CustomUserDetails</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在配置中使用自定义的<code>UserDetailsService</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Autowired</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> UserDetailsService</span><span style="color:#E06C75"> userDetailsService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> configure</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">AuthenticationManagerBuilder</span><span style="color:#E06C75"> auth) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B">    auth</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">userDetailsService</span><span style="color:#ABB2BF">(userDetailsService);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ul>
</li>
<li>
<p><strong>使用<code>LDAP</code>认证的<code>LDAP</code>存储</strong>：如果你的用户信息存储在LDAP目录中，可以使用Spring Security对LDAP的支持。</p>
<ul>
<li>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> configure</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">AuthenticationManagerBuilder</span><span style="color:#E06C75"> auth) throws Exception {</span></span>
<span class="line"><span style="color:#E06C75">    auth</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">ldapAuthentication</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">userDnPatterns</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"uid={0},ou=people"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">groupSearchBase</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ou=groups"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">contextSource</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">url</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ldap://localhost:389/dc=springframework,dc=org"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">managerDn</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cn=admin,dc=springframework,dc=org"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">managerPassword</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"password"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置中，通过LDAP连接进行用户认证和授权。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>本篇文档主要学习使用数据库存储用户信息。</p>
</blockquote>
<h2>2. 环境搭建</h2>
<h3>2.1 创建用户表</h3>
<p>创建数据库并执行源码地址中的<code>SQL</code>脚本：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218095833880.png" alt="image-20231218095833880" tabindex="0" loading="lazy"><figcaption>image-20231218095833880</figcaption></figure>
<h3><strong>2.2 集成 Mybatis Plus</strong></h3>
<p><a href="https://baomidou.com/pages/24112f/" target="_blank" rel="noopener noreferrer">MyBatis-Plus官网</a></p>
<p>引入<code>Mybatis Plus</code>、<code>Mysql</code>等程依赖开发工具包：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependencies</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    &lt;!-- 进行 Spring MVC 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    &lt;!-- 进行 Spring Security 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-security&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    &lt;!-- 进行 Mybatis-Plus 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;com.baomidou&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;mybatis-plus-boot-starter&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.5.4.1&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    &lt;!-- 进行数据库的连接 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;com.mysql&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;mysql-connector-j&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">scope</span><span style="color:#ABB2BF">&gt;runtime&lt;/</span><span style="color:#E06C75">scope</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    &lt;!-- 进行实体类动态生成set、get等信息的生成 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.projectlombok&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;lombok&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    &lt;!-- 集成各种常用的工具包 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;cn.hutool&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;hutool-all&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;5.7.21&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependencies</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>application.yml</code> 中配置数据源信息：</p>
<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">server</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  # 服务端口</span></span>
<span class="line"><span style="color:#E06C75">  port</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">8888</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">spring</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  # DataSource Config</span></span>
<span class="line"><span style="color:#E06C75">  datasource</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    type</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">com.zaxxer.hikari.HikariDataSource</span></span>
<span class="line"><span style="color:#E06C75">    driver-class-name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span style="color:#E06C75">    url</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">jdbc:mysql://192.168.1.19:3306/security-user?zeroDateTimeBehavior=convertToNull&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;autoReconnect=true</span></span>
<span class="line"><span style="color:#E06C75">    username</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">root</span></span>
<span class="line"><span style="color:#E06C75">    password</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">Nstr.234808</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动类上添加 @MapperScan 扫描：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">SpringBootApplication</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">MapperScan</span><span style="color:#E06C75">(</span><span style="color:#98C379">"cn.cactus.boot.springsecurity.mapper"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SecurityApplication</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SpringApplication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SecurityApplication</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, args);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2.3 集成生成代码工具</h3>
<p>使用<code>Mybatis Plus</code><a href="https://baomidou.com/pages/779a6e/#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8" target="_blank" rel="noopener noreferrer">代码生成器</a>生成各层代码。首先引入代码生成器和模板引擎：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">&lt;!--代码生成器--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;com.baomidou&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;mybatis-plus-generator&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.5.2&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.freemarker&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;freemarker&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;2.3.31&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加生成工具类，修改一些数据库地址、包名等参数：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AutoGeneratorUtils</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> URISyntaxException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> encode</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BCryptPasswordEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encode</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"123456"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(encode);</span></span>
<span class="line"><span style="color:#E5C07B">        FastAutoGenerator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"jdbc:mysql://192.168.1.19:3306/security-user"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"root"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Nstr.234808"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">globalConfig</span><span style="color:#ABB2BF">(builder </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    builder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">author</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cactusli"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 设置作者</span></span>
<span class="line"><span style="color:#ABB2BF">                            .</span><span style="color:#61AFEF">enableSwagger</span><span style="color:#ABB2BF">() </span><span style="color:#7F848E;font-style:italic">// 开启 swagger 模式</span></span>
<span class="line"><span style="color:#ABB2BF">                            .</span><span style="color:#61AFEF">fileOverride</span><span style="color:#ABB2BF">() </span><span style="color:#7F848E;font-style:italic">// 覆盖已生成文件</span></span>
<span class="line"><span style="color:#ABB2BF">                            .</span><span style="color:#61AFEF">outputDir</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"D://"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// 指定输出目录</span></span>
<span class="line"><span style="color:#ABB2BF">                })</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">dataSourceConfig</span><span style="color:#ABB2BF">(builder </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> builder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">typeConvertHandler</span><span style="color:#ABB2BF">((globalConfig, typeRegistry, metaInfo) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                    int</span><span style="color:#E06C75"> typeCode</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> metaInfo</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getJdbcType</span><span style="color:#ABB2BF">().</span><span style="color:#E5C07B">TYPE_CODE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (typeCode </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> Types</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SMALLINT</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 自定义类型转换</span></span>
<span class="line"><span style="color:#C678DD">                        return</span><span style="color:#E5C07B"> DbColumnType</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">INTEGER</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E5C07B"> typeRegistry</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getColumnType</span><span style="color:#ABB2BF">(metaInfo);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">                }))</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">packageConfig</span><span style="color:#ABB2BF">(builder </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    builder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parent</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cn.cactus.boot.springsecurity"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 设置父包名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            //.moduleName("system") // 设置父包模块名</span></span>
<span class="line"><span style="color:#ABB2BF">                            .</span><span style="color:#61AFEF">pathInfo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">singletonMap</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputFile</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">xml</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"D://"</span><span style="color:#ABB2BF">)); </span><span style="color:#7F848E;font-style:italic">// 设置mapperXml生成路径</span></span>
<span class="line"><span style="color:#ABB2BF">                })</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">strategyConfig</span><span style="color:#ABB2BF">(builder </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    builder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addInclude</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"t_user"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 设置需要生成的表名</span></span>
<span class="line"><span style="color:#ABB2BF">                            .</span><span style="color:#61AFEF">addTablePrefix</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"t_"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"c_"</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// 设置过滤表前缀</span></span>
<span class="line"><span style="color:#ABB2BF">                })</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">templateEngine</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FreemarkerTemplateEngine</span><span style="color:#ABB2BF">()) </span><span style="color:#7F848E;font-style:italic">// 使用Freemarker引擎模板，默认的是Velocity引擎模板</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把生成的代码复制到项目中：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218154630109.png" alt="image-20231218154630109" tabindex="0" loading="lazy"><figcaption>image-20231218154630109</figcaption></figure>
<h3>2.4 测试验证代码</h3>
<p>在 pom.xml 文件中 引入 Spring Boot Test 测试启动场景依赖。</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;spring-boot-starter-test&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">scope</span><span style="color:#ABB2BF">&gt;test&lt;/</span><span style="color:#E06C75">scope</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 test 目录下新建 <code>CactusSpringSecurityDemoTest</code> 测试类代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">SpringBootTest</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> CactusSpringSecurityDemoTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Resource</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> IUserService</span><span style="color:#E06C75"> userService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF">  testSelectUser</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        User</span><span style="color:#E06C75"> test</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> userService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOne</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> LambdaQueryWrapper</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">User</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">eq</span><span style="color:#ABB2BF">(User</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getUserName, </span><span style="color:#98C379">"test"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(test);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码成功运行后会输出以下日志：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218155848654.png" alt="image-20231218155848654" tabindex="0" loading="lazy"><figcaption>image-20231218155848654</figcaption></figure>
<h2>3. 用户登录</h2>
<h3>3.1 首先看<code>UserDetailsService</code>接口</h3>
<p>这里我们需要从数据库中获取用户信息，<code>Spring Security</code>提供了<code>UserDetailsService</code>接口查询用户数据。</p>
<p>该接口中，只声明了一个根据用户名加载用户信息的方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 加载用户特定数据的核心接口。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 它在整个框架中用作用户 DAO，并且是 DaoAuthenticationProvider.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 该接口只需要一种只读方法，这简化了对新数据访问策略的支持。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> UserDetailsService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        根据用户名定位用户。在实际实现中，搜索可能区分大小写，也可能不区分大小写，具体取决于实现实例的配置方式。在这种情况下， UserDetails 返回的对象可能具有与实际请求的用户名不同的用户名。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        参数：username – 标识需要其数据的用户的用户名。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        返回：完全填充的用户记录（从不 null）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        抛出：UsernameNotFoundException – 如果找不到用户或用户没有 GrantedAuthorit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	 */</span></span>
<span class="line"><span style="color:#E5C07B">	UserDetails</span><span style="color:#61AFEF"> loadUserByUsername</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> username</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> UsernameNotFoundException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Spring Security</code>默认提供了几个实现类：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218160627289.png" alt="image-20231218160627289" tabindex="0" loading="lazy"><figcaption>image-20231218160627289</figcaption></figure>
<p>从类名称已经比较好理解，支持<strong>内存、数据库</strong>查询用户。首先我们看下<code>JdbcDaoImpl</code>是如何查询用户的，是不是满足我们的业务要求。</p>
<p>查看其<code>loadUserByUsername</code>方法执行逻辑：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> UserDetails</span><span style="color:#61AFEF"> loadUserByUsername</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> username) throws UsernameNotFoundException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // select username,password,enabled from users where username = ?</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 1. JdbcTemplate 执行SQL</span></span>
<span class="line"><span style="color:#E5C07B">    List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">UserDetails</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> users </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> loadUsersByUsername</span><span style="color:#E06C75">(username)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">users</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 2. 没有查询到，抛出 UsernameNotFoundException</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Query returned no results for user '"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> username </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "'"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UsernameNotFoundException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"JdbcDaoImpl.notFound"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                new</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">[] { username }, </span><span style="color:#98C379">"Username {0} not found"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 3. 如果查询多条用户信息，则取第一条数据</span></span>
<span class="line"><span style="color:#E5C07B">    UserDetails</span><span style="color:#E06C75"> user </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> users</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // contains no GrantedAuthority[]</span></span>
<span class="line"><span style="color:#E5C07B">    Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> dbAuthsSet </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 存放用户授予的权限</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 4. 开启了查询权限，执行SQL：select username,authority from authorities where username = ?</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将查询到的结果放入集合中</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">enableAuthorities</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        dbAuthsSet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAll</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">loadUserAuthorities</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUsername</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 5. 开启了权限分组，=》select g.id, g.group_name, ga.authority from groups g, group_members gm, group_authorities ga where gm.username = ? and g.id = ga.group_id and g.id = gm.group_id</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">enableGroups</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        dbAuthsSet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAll</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">loadGroupAuthorities</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUsername</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // set 不重复集合 =》 list</span></span>
<span class="line"><span style="color:#E5C07B">    List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> dbAuths </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(dbAuthsSet)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    addCustomAuthorities</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUsername</span><span style="color:#ABB2BF">(),</span><span style="color:#E06C75"> dbAuths)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 6. 当前用户没有任何权限，也会抛出 UsernameNotFoundException</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">dbAuths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"User '"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> username </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "' has no authorities and will be treated as 'not found'"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UsernameNotFoundException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"JdbcDaoImpl.noAuthority"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                new</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">[] { username }, </span><span style="color:#98C379">"User {0} has no GrantedAuthority"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 7. 创建 UserDetails 类型的用户对象并返回</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> createUserDetails</span><span style="color:#E06C75">(username</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> user</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> dbAuths)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上的源码分析，<code>JdbcDaoImpl</code>中的<code>SQL</code>都是固定的，而且为了更好的扩展，我们可以仿照其逻辑自定义实现<code>UserDetailsService</code>接口。</p>
<h3>3.2 UserDetails 接口</h3>
<p><code>UserDetailsService</code> 接口要求返回一个 <code>UserDetails</code> 类型的对象，这个命名本身已经非常直观，它表示一个封装了用户信息的类。我们的任务是将从数据库或其他数据源查询得到的用户对象转换为 <code>Spring Security</code> 框架支持的用户对象，以便进行认证、授权等操作。</p>
<p><code>UserDetails </code>接口源码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> UserDetails</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 返回授予用户的权限集合。</span></span>
<span class="line"><span style="color:#E5C07B">	Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> getAuthorities</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回用于对用户进行身份验证的密码。</span></span>
<span class="line"><span style="color:#E5C07B">	String</span><span style="color:#61AFEF"> getPassword</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回用于对用户进行身份验证的用户名。</span></span>
<span class="line"><span style="color:#E5C07B">	String</span><span style="color:#61AFEF"> getUsername</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 用户的帐户是否已过期。无法对过期的帐户进行身份验证</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回 true 用户的帐户有效（即未过期）， false 不再有效（即已过期）</span></span>
<span class="line"><span style="color:#C678DD">	boolean</span><span style="color:#61AFEF"> isAccountNonExpired</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 用户是已锁定还是已解锁。无法对锁定的用户进行身份验证。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回：true 用户未锁定， false 否则</span></span>
<span class="line"><span style="color:#C678DD">	boolean</span><span style="color:#61AFEF"> isAccountNonLocked</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 用户的凭据（密码）是否已过期。过期的凭据会阻止身份验证。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回：true 用户的凭据有效（即未过期）， false 不再有效（即已过期）</span></span>
<span class="line"><span style="color:#C678DD">	boolean</span><span style="color:#61AFEF"> isCredentialsNonExpired</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 用户是启用还是禁用。无法对禁用的用户进行身份验证。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回：true 用户已启用， false 否则</span></span>
<span class="line"><span style="color:#C678DD">	boolean</span><span style="color:#61AFEF"> isEnabled</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Spring Security</code>默认提供了一个实现类<code>User</code>源码如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218162550756.png" alt="image-20231218162550756" tabindex="0" loading="lazy"><figcaption>image-20231218162550756</figcaption></figure>
<p>目前来说，框架提供的<code>User</code>类，已经够用，但是本着可能需要扩展的情况，我们也需要自定义实现<code>UserDetails </code>接口。</p>
<h3>3.3 自定义<code>UserDetails </code>接口</h3>
<p>实现 <code>UserDetails</code>接口，代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusUserDetails</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> UserDetails</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> password</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> username</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> phone</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 扩展字段，手机号放入用户信息中</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> authorities</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> accountNonExpired</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> accountNonLocked</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> credentialsNonExpired</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> enabled</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> PearlUserDetails</span><span style="color:#ABB2BF">( </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> username</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> password</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> phone</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">authorities</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">boolean</span><span style="color:#E06C75;font-style:italic"> accountNonExpired</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">boolean</span><span style="color:#E06C75;font-style:italic"> accountNonLocked</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">boolean</span><span style="color:#E06C75;font-style:italic"> credentialsNonExpired</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">boolean</span><span style="color:#E06C75;font-style:italic"> enabled</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">password</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> password;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">phone</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> phone;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">username</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> username;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">accountNonExpired</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> accountNonExpired;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">accountNonLocked</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> accountNonLocked;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">credentialsNonExpired</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> credentialsNonExpired;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">enabled</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> enabled;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">authorities</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unmodifiableSet</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">sortAuthorities</span><span style="color:#ABB2BF">(authorities)); </span><span style="color:#7F848E;font-style:italic">// 非空判断+排序</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> SortedSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> sortAuthorities</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> GrantedAuthority</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">authorities</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Assert</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">notNull</span><span style="color:#ABB2BF">(authorities, </span><span style="color:#98C379">"Cannot pass a null GrantedAuthority collection"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        SortedSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">sortedAuthorities</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> TreeSet</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#ABB2BF"> PearlUserDetails.</span><span style="color:#61AFEF">AuthorityComparator</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#E06C75"> grantedAuthority</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> authorities) {</span></span>
<span class="line"><span style="color:#E5C07B">            Assert</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">notNull</span><span style="color:#ABB2BF">(grantedAuthority, </span><span style="color:#98C379">"GrantedAuthority list cannot contain any null elements"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            sortedAuthorities</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(grantedAuthority);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> sortedAuthorities;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AuthorityComparator</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> serialVersionUID </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 600L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> compare</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#E06C75;font-style:italic"> g1</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#E06C75;font-style:italic"> g2</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    	   // 两者都不应为 null，因为在将每个条目添加到集合之前都会对其进行检查。如果权限为 null，则它是自定义权限，应先于其他权限。</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">g2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthority</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">				return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">			}</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">g1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthority</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">				return</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">			}</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#E5C07B"> g1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthority</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">g2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthority</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后实现<code>UserDetailsService</code>接口，代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusUserDetailsService</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> UserDetailsService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Resource</span></span>
<span class="line"><span style="color:#E5C07B">    IUserService</span><span style="color:#E06C75"> userService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> UserDetails</span><span style="color:#61AFEF"> loadUserByUsername</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> username</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> UsernameNotFoundException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 1. 数据库查询用户</span></span>
<span class="line"><span style="color:#E5C07B">        User</span><span style="color:#E06C75"> user</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> userService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOne</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> LambdaQueryWrapper</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">User</span><span style="color:#ABB2BF">&gt;().</span><span style="color:#61AFEF">eq</span><span style="color:#ABB2BF">(User</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getUserName, username));</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">ObjectUtil</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isNull</span><span style="color:#ABB2BF">(user)) {</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Query returned no results for user '"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> username </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "'"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UsernameNotFoundException</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">StrUtil</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Username {} not found"</span><span style="color:#ABB2BF">, username));</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 2. 设置权限集合，后续需要数据库查询（授权篇讲解）</span></span>
<span class="line"><span style="color:#E5C07B">            List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">GrantedAuthority</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">authorityList</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> AuthorityUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">commaSeparatedStringToAuthorityList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"role"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 3. 返回UserDetails类型用户</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> CactusUserDetails</span><span style="color:#ABB2BF">(username, </span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPassword</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPhone</span><span style="color:#ABB2BF">(), authorityList,</span></span>
<span class="line"><span style="color:#D19A66">                    true</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// 账号状态这里都直接设置为启用，实际业务可以存在数据库中</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.4 添加配置类项</h3>
<p><code>Spring Security 6.0</code>和之前的配置有些区别，后续会详细解读。</p>
<p>添加配置类，注入一个密码编码器：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 开启 Spring Security，debug：是否开启Debug模式</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">EnableWebSecurity</span><span style="color:#E06C75">(</span><span style="color:#D19A66">debug</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusSecurityConfig</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 注入自定义 UserDetailsService 实现类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> UserDetailsService</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#E5C07B">    CactusUserDetailsService</span><span style="color:#61AFEF"> cactusUserDetailsService</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> CactusUserDetailsService</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 密码器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#E5C07B">    PasswordEncoder</span><span style="color:#61AFEF"> passwordEncoder</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BCryptPasswordEncoder</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.5 测试添加用户功能</h3>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>@Test</span></span>
<span class="line"><span>@DisplayName("插入一条用户数据")</span></span>
<span class="line"><span>void insertUserTest() {</span></span>
<span class="line"><span>    User user = new User();</span></span>
<span class="line"><span>    user.setUserName("admin");</span></span>
<span class="line"><span>    user.setPassword(new BCryptPasswordEncoder().encode("ckhop"));</span></span>
<span class="line"><span>    user.setLoginName("管理员");</span></span>
<span class="line"><span>    user.setPhone("17610005681");</span></span>
<span class="line"><span>    userService.save(user);</span></span>
<span class="line"><span>}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看数据库，显示数据添加成功</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218165051831.png" alt="image-20231218165051831" tabindex="0" loading="lazy"><figcaption>image-20231218165051831</figcaption></figure>
<h3>3.6 测试登录</h3>
<p>启动项目是用新添加的用户进行登录访问测试，在浏览器输入：<a href="http://localhost:8888/admin/testString" target="_blank" rel="noopener noreferrer">http://localhost:8888/admin/testString</a></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218172334115.png" alt="image-20231218172334115" tabindex="0" loading="lazy"><figcaption>image-20231218172334115</figcaption></figure>
<p>至此访问首页，使用数据库中的用户、密码登录，集成完毕。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218095833880.png" type="image/png"/>
    </item>
    <item>
      <title>源码篇之基于过滤器的基本原理</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%903%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E5%9F%BA%E4%BA%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%903%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E5%9F%BA%E4%BA%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://cactusli.net/rss.xml">源码篇之基于过滤器的基本原理</source>
      <description>1. 简介 Spring Security通过过滤器来支持Servlet，即在请求到达Servlet之前，通过过滤器进行认证和授权校验。如果用户合法且具备权限，则允许请求通过；反之，将会导致跳转到登录页或拒绝访问。因此，本文重点介绍Spring Security中与过滤器相关的知识。 类比JAVA Web中的过滤器，Spring Security 中的...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p><code>Spring Security</code>通过过滤器来支持<code>Servlet</code>，即在请求到达<code>Servlet之</code>前，通过过滤器进行认证和授权校验。如果用户合法且具备权限，则允许请求通过；反之，将会导致跳转到登录页或拒绝访问。因此，本文重点介绍<code>Spring Security</code>中与过滤器相关的知识。</p>
<p>类比<code>JAVA Web</code>中的<strong>过滤器</strong>，<code>Spring Security </code>中的<strong>过滤器</strong>进行了各种代理和增强，可以简单理解<code>Security </code>中的<strong>过滤器</strong>结构如下所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218174633340.png" alt="image-20231218174633340" tabindex="0" loading="lazy"><figcaption>image-20231218174633340</figcaption></figure>
<p><strong>简要说明：</strong></p>
<ol>
<li>请求到 DelegatingFilterProxy（代理过滤器）</li>
<li>调用 FilterChainProxy（过滤器链代理）</li>
<li>FilterChainProxy 根据请求，调用匹配的 SecurityFilterChain（Security中的过滤器链）</li>
<li>SecurityFilterChain 中的多个有序的 Security 过滤器对请求进行处理，检验是否登录、是否授权… 并做出相应处理</li>
</ol>
<h2>2. 过滤器</h2>
<p>大家对于Java Web中的过滤器（Filter）应该已经相当熟悉了。作为三大组件之一，过滤器在整个Web应用中扮演着重要而不可或缺的角色。</p>
<p>一个简单的<strong>过滤器</strong>如下所示：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 使用@ServletComponentScan添加在启动类上扫描该过滤器</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">WebFilter</span><span style="color:#E06C75">(</span><span style="color:#D19A66">filterName</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "CactusFilter"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> urlPatterns</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#98C379">"/*"</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusFilter</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Filter</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 过滤器对象进行初始化调用</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> init</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FilterConfig</span><span style="color:#E06C75;font-style:italic"> filterConfig</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // ......</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 添加自定义过滤逻辑</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> servletRequest</span><span style="color:#7F848E;font-style:italic">  请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> servletResponse</span><span style="color:#7F848E;font-style:italic"> 响应</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> filterChain</span><span style="color:#7F848E;font-style:italic"> 过滤器链，由多个过滤器组成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ServletRequest</span><span style="color:#E06C75;font-style:italic"> servletRequest</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ServletResponse</span><span style="color:#E06C75;font-style:italic"> servletResponse</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">FilterChain</span><span style="color:#E06C75;font-style:italic"> filterChain</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"对请求进行某些自定义操作"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 激活下一个过滤器的的doFilter 方法，最后一个激活Servlet </span></span>
<span class="line"><span style="color:#E5C07B">        filterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"对响应进行某些自定义操作"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 过滤器销毁对象前被调用</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> destroy</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // ......</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218175833151.png" alt="image-20231218175833151" tabindex="0" loading="lazy"><figcaption>image-20231218175833151</figcaption></figure>
<p>客户端向应用程序发送请求时，运行容器会创建一个FilterChain（过滤器链），其中包含所有Filter实例和Servlet。这些过滤器根据请求URI路径来处理请求和响应。</p>
<p>在Spring Boot Web应用程序中，通常只有一个Servlet实例，即DispatcherServlet，但是通常存在多个过滤器，它们按照指定的顺序共同协作。</p>
<h2>3. Security 过滤器（Security Filter）</h2>
<p><code>Spring Security </code>中的过滤器是通过<code>SecurityFilterChain API </code>插入<code>FilterChainProxy</code>中的，<code>Filter </code>实例的顺序非常重要。</p>
<p><code>Spring Security</code>中所有的过滤器按照顺序如下所示（后续会详细介绍）：</p>
<ul>
<li>ForceEagerSessionCreationFilter</li>
<li>ChannelProcessingFilter</li>
<li>WebAsyncManagerIntegrationFilter</li>
<li>SecurityContextPersistenceFilter</li>
<li>HeaderWriterFilter</li>
<li>CorsFilter</li>
<li>CsrfFilter</li>
<li>LogoutFilter</li>
<li>OAuth2AuthorizationRequestRedirectFilter</li>
<li>Saml2WebSsoAuthenticationRequestFilter</li>
<li>X509AuthenticationFilter</li>
<li>AbstractPreAuthenticatedProcessingFilter</li>
<li>CasAuthenticationFilter</li>
<li>OAuth2LoginAuthenticationFilter</li>
<li>Saml2WebSsoAuthenticationFilter</li>
<li>UsernamePasswordAuthenticationFilter</li>
<li>DefaultLoginPageGeneratingFilter</li>
<li>DefaultLogoutPageGeneratingFilter</li>
<li>ConcurrentSessionFilter</li>
<li>DigestAuthenticationFilter</li>
<li>BearerTokenAuthenticationFilter</li>
<li>BasicAuthenticationFilter</li>
<li>RequestCacheAwareFilter</li>
<li>SecurityContextHolderAwareRequestFilter</li>
<li>JaasApiIntegrationFilter</li>
<li>RememberMeAuthenticationFilter</li>
<li>AnonymousAuthenticationFilter</li>
<li>OAuth2AuthorizationCodeGrantFilter</li>
<li>SessionManagementFilter</li>
<li>ExceptionTranslationFilter</li>
<li>FilterSecurityInterceptor</li>
<li>SwitchUserFilter</li>
</ul>
<h2>4. 委派代理过滤器（DelegatingFilterProxy）</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218182806637.png" alt="image-20231218182806637" tabindex="0" loading="lazy"><figcaption>image-20231218182806637</figcaption></figure>
<p>在Spring的spring-web模块中，提供了DelegatingFilterProxy类用于代理过滤器，使得可以方便地利用Spring容器来管理过滤器。在请求响应的流程中，DelegatingFilterProxy会从容器中查找已注册的过滤器Bean对象，然后调用该Bean的过滤方法。</p>
<p>可以看到该类中包含了<code>Spring</code>容器对象和被代理的过滤器：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/1702949368735.jpg" alt="1702949368735" tabindex="0" loading="lazy"><figcaption>1702949368735</figcaption></figure>
<p>在 <a href="">2. 过滤器</a> 步骤中实现的过滤器，是使用<code>Servlet</code>容器自己的标准来注册，所以这时并不会被<code>Spring</code>容器管理，这时就可以使用<code>DelegatingFilterProxy</code>进行代理，实现代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Component</span><span style="color:#E06C75">(</span><span style="color:#98C379">"cactusFilter"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusFilter</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Filter</span><span style="color:#ABB2BF"> {</span><span style="color:#7F848E;font-style:italic">//...... }</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyConfig</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> DelegatingFilterProxyRegistrationBean</span><span style="color:#61AFEF"> delegatingFilterProxyRegistrationBean</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">        DelegatingFilterProxyRegistrationBean</span><span style="color:#E06C75"> filterProxy</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DelegatingFilterProxyRegistrationBean</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cactusFilter"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        filterProxy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addUrlPatterns</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/*"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        filterProxy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setOrder</span><span style="color:#ABB2BF">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> filterProxy;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>5.过滤器链代理（FilterChainProxy）</h2>
<p><code>Spring Security</code>提供了<code>FilterChainProxy</code>代理类，它是<code>Spring Security</code>的核心组件，用于代理<code>Spring Security</code>中的所有<code>SecurityFilterChain</code>。每个<code>SecurityFilterChain</code>中包含多个由<code>Spring Security</code>声明的<code>Filter</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219100525856.png" alt="image-20231219100525856" tabindex="0" loading="lazy"><figcaption>image-20231219100525856</figcaption></figure>
<p>FilterChainProxy本质上是一个特殊的过滤器，通过DelegatingFilterProxy进行代理，因此它也是一个Bean对象。在Security过滤器链中，过滤器通常都是Bean对象，通过FilterChainProxy进行注册。与直接向Servlet容器或DelegatingFilterProxy注册相比，FilterChainProxy的注册具有许多优势：</p>
<ul>
<li>它为Spring Security的所有Servlet支持提供了一个起点。如果需要对Spring Security的Servlet支持进行故障诊断，可以在FilterChainProxy中添加一个调试点。</li>
<li>可以执行一些被视为不可有可无的任务。例如，清除了SecurityContext以避免内存泄漏，并应用Spring Security的HttpFirewall来保护应用程序免受某些类型的攻击。</li>
<li>在确定何时应该调用SecurityFilterChain方面提供了更大的灵活性。在Servlet容器中，Filter实例仅基于URL被调用。FilterChainProxy可以通过使用RequestMatcher接口，根据HttpServletRequest中的任何内容来确定调用。</li>
</ul>
<p><code>FilterChainProxy </code> 在整个流程中的作用如下图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219104612610.png" alt="image-20231219104612610" tabindex="0" loading="lazy"><figcaption>image-20231219104612610</figcaption></figure>
<h2>6. Security 过滤器链（SecurityFilterChain）</h2>
<p>在Servlet中，一组过滤器构成了FilterChain（过滤器链）。对于SecurityFilterChain的理解就变得相对简单了，它是Spring Security提供的过滤器链，用于管理其自身的所有过滤器，如上述流程图所示。FilterChainProxy可以利用SecurityFilterChain来确定当前请求应该调用哪些Spring Security Filter实例。</p>
<p>在整个流程中，<code> FilterChainProxy</code> 决定应该使用哪个<code> SecurityFilterChain</code>，只有第一个匹配的<code>SecurityFilterChain</code>被调用。</p>
<p>如下图中，如果请求的<code>URL</code>是<code> /api/**/</code>，那么会匹配到左边的<code>SecurityFilterChain</code>，如果都不匹配，则会调用支持<code>/**</code>的<code> SecurityFilterChain</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219110053266.png" alt="image-20231219110053266" tabindex="0" loading="lazy"><figcaption>image-20231219110053266</figcaption></figure>
<h2>7. 源码分析</h2>
<h3>7.1 自动配置</h3>
<p>在入门篇中，我们只引入了一个<code>spring-boot-starter-security</code>依赖，就可以进行<strong>登录认证</strong>，得益于<code>Spring Boot</code>的自动配置。在<code>spring-boot-autoconfigure</code>模块中集成了对<code>Spring Security</code>的自动配置：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219110520871.png" alt="image-20231219110520871" tabindex="0" loading="lazy"><figcaption>image-20231219110520871</figcaption></figure>
<p>默认的配置是由 <code>SecurityAutoConfiguration</code> 和<code>UserDetailsServiceAutoConfiguration</code>这两个自动配置类实现的。</p>
<p><code>SecurityAutoConfiguration </code>主要是导入 <code>SpringBootWebSecurityConfiguration </code>配置：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AutoConfiguration</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">    before</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#E5C07B">UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">ConditionalOnClass</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">DefaultAuthenticationEventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">EnableConfigurationProperties</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">SecurityProperties</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Import</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">SpringBootWebSecurityConfiguration</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> SecurityDataConfiguration</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SecurityAutoConfiguration</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> SecurityAutoConfiguration</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 认证事件发布者</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">ConditionalOnMissingBean</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">AuthenticationEventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> DefaultAuthenticationEventPublisher</span><span style="color:#61AFEF"> authenticationEventPublisher</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationEventPublisher</span><span style="color:#E06C75;font-style:italic"> publisher</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DefaultAuthenticationEventPublisher</span><span style="color:#ABB2BF">(publisher);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>SpringBootWebSecurityConfiguration </code>配置类中，默认添加了<code> @EnableWebSecurity</code>注解启用了<code>Spring Security</code>应用安全配置，并添加了一个<code>SecurityFilterChain</code>，添加了<code>Http</code>相关规则：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">    proxyBeanMethods</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span></span>
<span class="line"><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">ConditionalOnWebApplication</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">    type</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Type</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SERVLET</span></span>
<span class="line"><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> SpringBootWebSecurityConfiguration</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">    SpringBootWebSecurityConfiguration</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Configuration</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">        proxyBeanMethods</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span></span>
<span class="line"><span style="color:#E06C75">    )</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">ConditionalOnMissingBean</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">        name</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#98C379">"springSecurityFilterChain"</span><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75">    )</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">ConditionalOnClass</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">EnableWebSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">EnableWebSecurity</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> WebSecurityEnablerConfiguration</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        WebSecurityEnablerConfiguration</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Configuration</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">        proxyBeanMethods</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span></span>
<span class="line"><span style="color:#E06C75">    )</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">ConditionalOnDefaultWebSecurity</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SecurityFilterChainConfiguration</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        SecurityFilterChainConfiguration</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Order</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2147483642</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        SecurityFilterChain</span><span style="color:#61AFEF"> defaultSecurityFilterChain</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpSecurity</span><span style="color:#E06C75;font-style:italic"> http</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 配置所有的Http请求必须认证</span></span>
<span class="line"><span style="color:#E5C07B">            http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">authorizeHttpRequests</span><span style="color:#ABB2BF">((requests) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">                ((</span><span style="color:#E5C07B">AuthorizeHttpRequestsConfigurer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AuthorizedUrl</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">requests</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">anyRequest</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 开启表单登录</span></span>
<span class="line"><span style="color:#E5C07B">            http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 开启 Basic 认证</span></span>
<span class="line"><span style="color:#E5C07B">            http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">httpBasic</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> (SecurityFilterChain)</span><span style="color:#E5C07B">http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UserDetailsServiceAutoConfiguration </code>则只是通过<code>Yml</code>配置配置文件生成了一个默认的用户，以便于开发测试：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AutoConfiguration</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">ConditionalOnClass</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">AuthenticationManager</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">ConditionalOnBean</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">ObjectPostProcessor</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">ConditionalOnMissingBean</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">    value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#E5C07B">AuthenticationManager</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AuthenticationProvider</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> UserDetailsService</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AuthenticationManagerResolver</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    type</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#98C379">"org.springframework.security.oauth2.jwt.JwtDecoder"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "org.springframework.security.oauth2.client.registration.ClientRegistrationRepository"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository"</span><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> NOOP_PASSWORD_PREFIX </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "{noop}"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Pattern</span><span style="color:#E06C75"> PASSWORD_ALGORITHM_PATTERN </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"^</span><span style="color:#56B6C2">\\</span><span style="color:#98C379">{.+}.*$"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Log</span><span style="color:#E06C75"> logger </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> LogFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLog</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> InMemoryUserDetailsManager</span><span style="color:#61AFEF"> inMemoryUserDetailsManager</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SecurityProperties</span><span style="color:#E06C75;font-style:italic"> properties</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ObjectProvider</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">PasswordEncoder</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">passwordEncoder</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SecurityProperties</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">User</span><span style="color:#E06C75"> user</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> properties</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUser</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">roles</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getRoles</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InMemoryUserDetailsManager</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> UserDetails</span><span style="color:#ABB2BF">[]{</span><span style="color:#E5C07B">User</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withUsername</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">password</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOrDeducePassword</span><span style="color:#ABB2BF">(user, (PasswordEncoder)</span><span style="color:#E5C07B">passwordEncoder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getIfAvailable</span><span style="color:#ABB2BF">())).</span><span style="color:#61AFEF">roles</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">StringUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toStringArray</span><span style="color:#ABB2BF">(roles)).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">()});</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getOrDeducePassword</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SecurityProperties</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">User</span><span style="color:#E06C75;font-style:italic"> user</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">PasswordEncoder</span><span style="color:#E06C75;font-style:italic"> encoder</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> password</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPassword</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPasswordGenerated</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#E5C07B">            logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">warn</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"%n%nUsing generated security password: %s%n%nThis generated password is for development use only. Your security configuration must be updated before running your application in production.%n"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPassword</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> encoder </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">PASSWORD_ALGORITHM_PATTERN</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">matcher</span><span style="color:#ABB2BF">(password).</span><span style="color:#61AFEF">matches</span><span style="color:#ABB2BF">() </span><span style="color:#C678DD">?</span><span style="color:#98C379"> "{noop}"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> password </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> password;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>SecurityFilterAutoConfiguration</code>自动配置类中，名称为<code>springSecurityFilterChain</code>的过滤器将会被代理：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219111837486.png" alt="image-20231219111837486" tabindex="0" loading="lazy"><figcaption>image-20231219111837486</figcaption></figure>
<h3>7.2 DefaultSecurityFilterChain</h3>
<p>如前所述，<code>SecurityFilterChain</code>包含所有过滤器。<code>Spring Security</code>提供了默认的实现类<code>DefaultSecurityFilterChain</code>，通过<code>HttpSecurity.build</code>方法构建。可以注意到，它默认匹配所有请求，并包含了<strong>15</strong>个过滤器。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219112457326.png" alt="image-20231219112457326" tabindex="0" loading="lazy"><figcaption>image-20231219112457326</figcaption></figure>
<h3>7.3 springSecurityFilterChain</h3>
<p>在<code>SecurityFilterAutoConfiguration</code>自动配置类中，声明名称为<code>springSecurityFilterChain</code>的过滤器将被代理。那么，这个过滤器是在哪里加载的呢？</p>
<p>首先，在<code>SpringBootWebSecurityConfiguration</code>配置类中，默认添加了<code>@EnableWebSecurity</code>注解，启用了Spring Security应用安全配置。<code>@EnableWebSecurity</code>会导入多个配置类:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Retention</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">RetentionPolicy</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RUNTIME</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Target</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">ElementType</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TYPE</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Documented</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Import</span><span style="color:#E06C75">({</span><span style="color:#E5C07B">WebSecurityConfiguration</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> SpringWebMvcImportSelector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> OAuth2ImportSelector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpSecurityConfiguration</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">EnableGlobalAuthentication</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> EnableWebSecurity</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#61AFEF"> debug</span><span style="color:#E06C75">() </span><span style="color:#C678DD">default</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>WebSecurityConfiguration</code>中，会构建 <code>springSecurityFilterChain</code> 过滤器：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Bean</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#D19A66">    name</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#98C379">"springSecurityFilterChain"</span><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Filter</span><span style="color:#61AFEF"> springSecurityFilterChain</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 检查是否已经配置了 securityFilterChain</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> hasFilterChain </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityFilterChains</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isEmpty</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 如果没有配置过过滤器链，则定义一个基础链</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">hasFilterChain) {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">webSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addSecurityFilterChainBuilder</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 要求所有请求都需要身份验证</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">httpSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">authorizeHttpRequests</span><span style="color:#ABB2BF">((authorize) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">                ((</span><span style="color:#E5C07B">AuthorizeHttpRequestsConfigurer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AuthorizedUrl</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">authorize</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">anyRequest</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 启用表单和基本身份验证</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">httpSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">httpSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">httpBasic</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 构建并返回安全过滤器链</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> (SecurityFilterChain)</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">httpSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 添加所配置的安全过滤器链</span></span>
<span class="line"><span style="color:#E5C07B">    Iterator</span><span style="color:#E06C75"> var2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityFilterChains</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">var2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        SecurityFilterChain</span><span style="color:#E06C75"> securityFilterChain </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (SecurityFilterChain)</span><span style="color:#E5C07B">var2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">webSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addSecurityFilterChainBuilder</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> securityFilterChain;</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 添加自定义的 WebSecurityCustomizer</span></span>
<span class="line"><span style="color:#E06C75">    var2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">webSecurityCustomizers</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">var2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        WebSecurityCustomizer</span><span style="color:#E06C75"> customizer </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (WebSecurityCustomizer)</span><span style="color:#E5C07B">var2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">customize</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">webSecurity</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 构建并返回最终的 Spring Security 过滤器链</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (Filter)</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">webSecurity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219123937347.png" alt="image-20231219123937347" tabindex="0" loading="lazy"><figcaption>image-20231219123937347</figcaption></figure>
<p><code>springSecurityFilterChain</code> 会被<code>FilterChainProxy</code>代理，注册为<code>Bean</code>，并存放了所有的<code>SecurityFilterChain</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/1702961016571.jpg" alt="1702961016571" tabindex="0" loading="lazy"><figcaption>1702961016571</figcaption></figure>
<p>springSecurityFilterChain 因为之前被声明过被 DelegatingFilterProxy 进行关联代理，最终经过层层代理，会生成完整的 DelegatingFilterProx y类型过滤器，等待请求，并执行相关逻辑。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218174633340.png" type="image/png"/>
    </item>
    <item>
      <title>源码篇之默认过滤器</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%904%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E9%BB%98%E8%AE%A4%E8%BF%87%E6%BB%A4%E5%99%A8.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%904%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E9%BB%98%E8%AE%A4%E8%BF%87%E6%BB%A4%E5%99%A8.html</guid>
      <source url="https://cactusli.net/rss.xml">源码篇之默认过滤器</source>
      <description>1. 简介 本篇文章主要介绍 Spring Security 中默认的 15 个过滤器实现原理和作用。 2.Spring Filter Spring 扩展了 Servlet 中原生的过滤器，给予其各种Spring 能力。 2.1 GenericFilterBean GenericFilterBean 在 Spring 中提供了一种抽象的方式来实现过滤器...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p>本篇文章主要介绍 <code>Spring Security</code> 中默认的 <code>15</code>  个过滤器实现原理和作用。</p>
<h2>2.Spring Filter</h2>
<p><code>Spring </code> 扩展了 <code>Servlet</code> 中原生的过滤器，给予其各种<code>Spring </code>能力。</p>
<h3>2.1 GenericFilterBean</h3>
<p>GenericFilterBean 在 Spring 中提供了一种抽象的方式来实现过滤器，它继承了jakarta.servlet.Filter 接口，并提供了其他一些便于在 Spring 中使用过滤器的功能。例如，GenericFilterBean 可以通过 BeanNameAware 接口获取 bean 的名称，通过 EnvironmentAware 接口获取 Spring 上下文的环境信息，通过 ServletContextAware 接口获取 Web 应用程序的 ServletContext 对象，以及通过 InitializingBean 和 DisposableBean 接口在 bean 初始化和销毁时执行自定义的逻辑。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219152357002.png" alt="image-20231219152357002" tabindex="0" loading="lazy"><figcaption>image-20231219152357002</figcaption></figure>
<p>可以看出 <code>GenericFilterBean</code>是对针对<code>Servlet</code> 过滤器的一种扩展，让其具备各种<code>Spring</code>特性，所实现接口的解释：</p>
<ul>
<li>**Filter：**该接口定义了过滤器的基本功能，是过滤器的核心接口。</li>
<li>**BeanNameAware：**该接口用于获取 bean 的名称，该名称可以用于在日志或其他场景中标识 bean。</li>
<li>**EnvironmentAware：**可以获取运行的环境<code>Environment</code></li>
<li><strong>EnvironmentCapable:</strong>  和<code>EnvironmentAware</code>结合使用获取<code>Environment</code></li>
<li>**ServletContextAware：**该接口用于获取 Web 应用程序的 ServletContext 对象，该对象提供了访问 Web 应用程序上下文的相关信息。</li>
<li>**InitializingBean：**该接口用于在 bean 初始化完成后执行自定义的初始化逻辑。</li>
<li>**DisposableBean ：**该接口用于在 bean 销毁之前执行自定义的销毁逻辑。</li>
</ul>
<h3>2.2 OncePerRequestFilter</h3>
<p>OncePerRequestFilter也是 spring-web提供的一个抽象类，继承自GenericFilterBean，从OncePerRequest就可以看出该过滤器可以确保每次请求只执行一次，这是因为不同类型Servlet 运行容器 在Servlet 3.0的调度中，某些可能会存在重复执行的情况，所以Spring中的过滤器，或者我们自定义时建议都基于该基础类来编写。</p>
<p><code>Spring Security</code>中的过滤器几乎都继承自该类：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219154707275.png" alt="image-20231219154707275" tabindex="0" loading="lazy"><figcaption>image-20231219154707275</figcaption></figure>
<p><code>OncePerRequestFilter</code>中的<code>doFilter</code> 实现了限制只执行一次的相关逻辑，最后调用<code>doFilterInternal</code>执行子类过滤器的过滤逻辑：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doFilter</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> filterChain) throws ServletException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IOException {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (request </span><span style="color:#C678DD">instanceof</span><span style="color:#E5C07B"> HttpServletRequest</span><span style="color:#E06C75"> httpRequest) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //1. 只支持 HTTP 请求</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (response </span><span style="color:#C678DD">instanceof</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> httpResponse) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 2. 获取当前当前过滤器已执行的标识，eg: characterEncodingFilter.FILTERED</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> alreadyFilteredAttributeName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAlreadyFilteredAttributeName</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 3. 当前过滤器是否已执行</span></span>
<span class="line"><span style="color:#C678DD">            boolean</span><span style="color:#E06C75"> hasAlreadyFilteredAttribute </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAttribute</span><span style="color:#ABB2BF">(alreadyFilteredAttributeName)</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">skipDispatch</span><span style="color:#ABB2BF">(httpRequest)</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">shouldNotFilter</span><span style="color:#ABB2BF">(httpRequest)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 4. 已执行过，直接中断或继续下一个过滤器</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (hasAlreadyFilteredAttribute) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">DispatcherType</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ERROR</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDispatcherType</span><span style="color:#ABB2BF">())</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilterNestedErrorDispatch</span><span style="color:#ABB2BF">(httpRequest, httpResponse, filterChain);</span></span>
<span class="line"><span style="color:#C678DD">                        return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                    filterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 5. 未执行过，设置一个属性标识，eg: characterEncodingFilter.FILTERED: true</span></span>
<span class="line"><span style="color:#E5C07B">                    request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAttribute</span><span style="color:#ABB2BF">(alreadyFilteredAttributeName, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 6. 调用过滤器的内部方法，执行当前子类过滤器过滤逻辑</span></span>
<span class="line"><span style="color:#E5C07B">                        this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilterInternal</span><span style="color:#ABB2BF">(httpRequest, httpResponse, filterChain);</span></span>
<span class="line"><span style="color:#E06C75">                    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                        request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">removeAttribute</span><span style="color:#ABB2BF">(alreadyFilteredAttributeName);</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                filterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ServletException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"OncePerRequestFilter only supports HTTP requests"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现自定义<code>OncePerRequestFilter </code>时，只需要重写<code>doFilterInternal</code>方法即可：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusOncePerRequestFilter</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> OncePerRequestFilter</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doFilterInternal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75;font-style:italic"> request</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">HttpServletResponse</span><span style="color:#E06C75;font-style:italic"> response</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">FilterChain</span><span style="color:#E06C75;font-style:italic"> filterChain</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219152357002.png" type="image/png"/>
    </item>
    <item>
      <title>源码篇之认证组件</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%905%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%905%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">源码篇之认证组件</source>
      <description>1. 简介 本篇文章主要学习 Spring Security 中认证相关组件，为下篇分析用户名密码认证执行流程 打个基础。 2. 认证机制 Spring Security 提供了多种认证方式登录系统： Username and Password ：用用户名/密码进行认证 OAuth 2.0 Login： 使用 OpenID Connect 和OAuth...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p>本篇文章主要学习 <code>Spring Security</code> 中认证相关组件，为下篇分析<strong>用户名密码认证执行流程</strong> 打个基础。</p>
<h2>2. 认证机制</h2>
<p><code>Spring Security</code> 提供了多种<strong>认证方式</strong>登录系统：</p>
<ul>
<li><strong>Username and Password</strong> ：用用户名/密码进行认证</li>
<li><strong>OAuth 2.0 Login</strong>： 使用 <code>OpenID Connect </code>和<code>OAuth 2.0</code>登录</li>
<li><strong>SAML 2.0 Login</strong> ： <code>SAML 2.0</code>登录</li>
<li><strong>Remember Me</strong> ： 记住我</li>
<li><strong>JAAS</strong>： <code>JAAS</code>认证</li>
<li><strong>Pre-Authentication Scenarios</strong> ： 使用外部机制进行认证</li>
<li><strong>X509</strong> ： X509认证</li>
</ul>
<h2>3. 认证组件</h2>
<p>在<code>Spring Security</code>中认证相关组件有：</p>
<ul>
<li><strong>SecurityContextHolder</strong> ： 上下文信息持有者，存储当前认证用户<code>SecurityContext</code></li>
<li><strong>SecurityContext</strong> ：上下文信息，包含当前认证用户的 <code>Authentication </code>（认证信息），从<code> SecurityContextHolder</code>中获取</li>
<li><strong>Authentication</strong> ： 认证信息</li>
<li><strong>GrantedAuthority</strong>：授予的权限</li>
<li><strong>AuthenticationManager</strong> ：认证管理器， 被<code>Spring Security </code>的<code> Filter</code> 调用执行认证</li>
<li><strong>ProviderManager</strong> ：认证提供者管理器，<code>AuthenticationManager</code>的实现</li>
<li><strong>AuthenticationProvider</strong> ：认证提供者，由 <code>ProviderManager</code> 用于执行特定类型的认证</li>
<li><strong>AuthenticationEntryPoint</strong> ：认证入口点，处理认证过程中的认证异常，比如：<strong>重定向到登录页面</strong></li>
<li><strong>AbstractAuthenticationProcessingFilter</strong> ：一个用于认证的基础<code> Filter</code>抽象类</li>
</ul>
<h3>3.1 SecurityContextHolder</h3>
<p><code>SecurityContextHolder</code> 是 Spring Security 中的一个核心类，用于存储和访问当前应用程序执行的安全上下文（SecurityContext）。<code>SecurityContext</code> 包含了当前应用程序执行的安全信息，例如认证主体（Principal）、授予的权限（Granted Authorities）等。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/securitycontextholder.png" alt="securitycontextholder" tabindex="0" loading="lazy"><figcaption>securitycontextholder</figcaption></figure>
<p>当用户认证成功后，会将 <code>SecurityContext</code> 设置到<code>SecurityContextHolder</code>中，后续流程可以通过 <code>SecurityContextHolder </code>静态方法直接获取用户信息：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 以下方式可以在环境中测试</span></span>
<span class="line"><span style="color:#E5C07B">SecurityContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> SecurityContextHolder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getContext</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">// 获取 SecurityContext</span></span>
<span class="line"><span style="color:#E5C07B">Authentication</span><span style="color:#E06C75"> authentication </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthentication</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">// 获取认证信息</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> username </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 用户名</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> principal </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPrincipal</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 当前用户的信息，通常是UserDetails的实例</span></span>
<span class="line"><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> authorities </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthorities</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">// 权限</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SecurityContextHolder</code> 默认采用 <code>ThreadLocal</code> 来保存信息。在过滤器阶段，已认证的请求线程会从会话中提取认证信息，并将其存储在当前线程的 <code>ThreadLocal</code> 中。这使得业务代码能够方便地获取用户信息。一旦线程执行完毕，<code>FilterChainProxy</code> 会负责执行清理操作。</p>
<h3>3.2 SecurityContext</h3>
<p><code>SecurityContext</code> 里主要包含了 <code>Authentication</code>认证对象，接口中只提供了两个简单方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Obtains the currently authenticated principal, or an authentication request token.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the &lt;code&gt;Authentication&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if no authentication</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * information is available</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> // 获取 Authentication</span></span>
<span class="line"><span style="color:#E5C07B">Authentication</span><span style="color:#61AFEF"> getAuthentication</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Changes the currently authenticated principal, or removes the authentication</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * information.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> authentication</span><span style="color:#7F848E;font-style:italic"> the new &lt;code&gt;Authentication&lt;/code&gt; token, or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;code&gt;null&lt;/code&gt; if no further authentication information should be stored</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> // 设置 Authentication</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> setAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Authentication</span><span style="color:#E06C75"> authentication)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该接口的实现类 <code>SecurityContextImpl</code> 也很简单：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118171722859.png" alt="image-20240118171722859" tabindex="0" loading="lazy"><figcaption>image-20240118171722859</figcaption></figure>
<h3>3.3 Authentication</h3>
<p>在 <code>Spring Security</code> 中，<code>Authentication</code> 接口具有两个主要作用：</p>
<ul>
<li>
<p><strong>作为预认证用户信息的容器</strong>，此时用户信息尚未完成认证。它在认证管理器中充当输入参数，用于提供认证凭证。</p>
</li>
<li>
<p><strong>表示当前已认证的用户</strong>，可以通过访问 <code>SecurityContext</code> 来获取当前的 <code>Authentication</code> 对象。这个对象包含了已通过认证的用户的信息。</p>
</li>
</ul>
<p><code>Authentication</code> 接口源码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> Authentication</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Principal</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 获取 授权信息 ,用户权限集合 =&gt; 可用于访问受保护资源时的权限验证</span></span>
<span class="line"><span style="color:#E5C07B">	Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> getAuthorities</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 凭据 这通常是一个密码，被认证后被清除</span></span>
<span class="line"><span style="color:#E5C07B">	Object</span><span style="color:#61AFEF"> getCredentials</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 存储有关身份验证请求的其他详细信息。</span></span>
<span class="line"><span style="color:#E5C07B">	Object</span><span style="color:#61AFEF"> getDetails</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 被认证主体的身份。在带有用户名和密码的身份验证请求的情况下，这将是用户名</span></span>
<span class="line"><span style="color:#E5C07B">	Object</span><span style="color:#61AFEF"> getPrincipal</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 是否被认证</span></span>
<span class="line"><span style="color:#C678DD">	boolean</span><span style="color:#61AFEF"> isAuthenticated</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 认证结果设置</span></span>
<span class="line"><span style="color:#C678DD">	void</span><span style="color:#61AFEF"> setAuthenticated</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">boolean</span><span style="color:#E06C75;font-style:italic"> isAuthenticated</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IllegalArgumentException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Authentication </code> 有很多实现类，对应了不同的认证方式，比如记住的身份验证时，使用的是 <code>RememberMeAuthenticationToken</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118174805422.png" alt="image-20240118174805422" tabindex="0" loading="lazy"><figcaption>image-20240118174805422</figcaption></figure>
<h3>3.4 GrantedAuthority</h3>
<p><code>GrantedAuthority</code>用于表示已经获得的权限信息，可以是<strong>角色</strong>或<strong>权限值</strong>。</p>
<p>这个接口只定义了一个<code>getAuthority</code>方法，用于获取当前权限的标识符。默认的实现类是 <code>SimpleGrantedAuthority</code>。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> GrantedAuthority</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">	String</span><span style="color:#61AFEF"> getAuthority</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<code>Authentication.getAuthorities()</code>获取当前用户的权限集合：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> GrantedAuthority</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> authorities </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthorities</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">// 权限集合信息</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>3.5 AuthenticationManager</h3>
<p><code>AuthenticationManager</code> 是认证管理器，它被Security过滤器调用，用于执行认证操作。通常情况下，我们会使用<code>ProviderManager</code>作为常见的<code>AuthenticationManager</code>实现。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Processes an {@link Authentication} request.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 认证管理器 实现认证主要是通过AuthenticationManager接口</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 在实际开发中，我们可能有多种不同的认证方式，例如：用户名+</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 密码、邮箱+密码、手机号+验证码等，而这些认证方式的入口始终只有一个，那就是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * AuthenticationManager。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> AuthenticationManager</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	 * authenticate()方法主要做三件事：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	 *   如果验证通过，返回Authentication（通常带上authenticated=true）。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	 *   认证失败抛出 AuthenticationException</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	 *   如果无法确定，则返回null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	 */</span></span>
<span class="line"><span style="color:#E5C07B">	Authentication</span><span style="color:#61AFEF"> authenticate</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Authentication</span><span style="color:#E06C75;font-style:italic"> authentication</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> AuthenticationException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.6 ProviderManager</h3>
<p><code>ProviderManager</code>（提供者管理器）类实现了 <code>AuthenticationManager</code> 接口。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ProviderManager</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> AuthenticationManager</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> MessageSourceAware</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> InitializingBean</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Log</span><span style="color:#E06C75"> logger </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> LogFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLog</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ProviderManager</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> AuthenticationEventPublisher</span><span style="color:#E06C75"> eventPublisher </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullEventPublisher</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">AuthenticationProvider</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> providers </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">emptyList</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	protected</span><span style="color:#E5C07B"> MessageSourceAccessor</span><span style="color:#E06C75"> messages </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> SpringSecurityMessageSource</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAccessor</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> AuthenticationManager</span><span style="color:#E06C75"> parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> eraseCredentialsAfterAuthentication </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#61AFEF"> ProviderManager</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AuthenticationProvider</span><span style="color:#ABB2BF">... </span><span style="color:#E06C75;font-style:italic">providers</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(providers), </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#61AFEF"> ProviderManager</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">AuthenticationProvider</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">providers</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">(providers, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#61AFEF"> ProviderManager</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">AuthenticationProvider</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">providers</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">AuthenticationManager</span><span style="color:#E06C75;font-style:italic"> parent</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">		Assert</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">notNull</span><span style="color:#ABB2BF">(providers, </span><span style="color:#98C379">"providers list cannot be null"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">providers</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> providers;</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> parent;</span></span>
<span class="line"><span style="color:#61AFEF">		checkState</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ProviderManager</code> 内部包含多个 <code>AuthenticationProvider</code>（认证提供者），在调用 <code>ProviderManager</code> 的 <code>authenticate</code> 方法时，会循环遍历所有的 <code>AuthenticationProvider</code>。认证过程会一直持续，直到某个提供者返回认证成功，此时整个认证过程结束；如果所有提供者都无法完成认证，那么最终会返回认证失败。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/providermanager.png" alt="providermanager" tabindex="0" loading="lazy"><figcaption>providermanager</figcaption></figure>
<h3>3.7 AuthenticationProvider</h3>
<p>每个<code>AuthenticationProvider</code>对应一种认证方式，执行实际的认证处理逻辑，比如<strong>用户名密码用</strong>的是<code>DaoAuthenticationProvider</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118180310737.png" alt="image-20240118180310737" tabindex="0" loading="lazy"><figcaption>image-20240118180310737</figcaption></figure>
<p>通过向 <code>ProviderManager</code> 注入多个 <code>AuthenticationProvider</code>，可以实现对认证方式的自定义扩展。例如，可以添加支持手机验证码登录的 <code>AuthenticationProvider</code>，从而实现多种认证方式的灵活组合。</p>
<h3>3.8 AuthenticationEntryPoint</h3>
<p><code>AuthenticationEntryPoint</code> 在 <code>ExceptionTranslationFilter</code> 检测到认证异常时被用于触发身份验证流程，比如重定向到登录页面。</p>
<p>几个常见的 <code>AuthenticationEntryPoint</code> 实现包括：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118180728322.png" alt="image-20240118180728322" tabindex="0" loading="lazy"><figcaption>image-20240118180728322</figcaption></figure>
<p>比如<code>LoginUrlAuthenticationEntryPoint</code>，会在表单登录失败时，执行重定向（或转发）到登录表单<code>URL</code>。</p>
<h3>3.9 AbstractAuthenticationProcessingFilter</h3>
<p><code>AbstractAuthenticationProcessingFilter</code> 是基于浏览器的HTTP身份验证请求的抽象类，可以通过继承此类来开发认证过滤器。主要功能是提供对认证结果成功和失败的相关处理：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doFilter</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> chain)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 1. 检查是否需要身份验证</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">requiresAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果不需要身份验证，直接继续执行过滤器链</span></span>
<span class="line"><span style="color:#E5C07B">        chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 2. 尝试进行身份验证，获取身份验证结果</span></span>
<span class="line"><span style="color:#E5C07B">        Authentication</span><span style="color:#E06C75"> authenticationResult </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> attemptAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 3. 如果身份验证结果为null，表示子类指示身份验证尚未完成，立即返回</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (authenticationResult </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // return immediately as subclass has indicated that it hasn't completed</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 4. 使用会话策略处理身份验证成功的情况</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">sessionStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">onAuthentication</span><span style="color:#ABB2BF">(authenticationResult, request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 5. 如果设置在身份验证成功之前继续执行过滤器链，则继续执行</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">continueChainBeforeSuccessfulAuthentication</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 6. 处理身份验证成功的情况</span></span>
<span class="line"><span style="color:#61AFEF">        successfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authenticationResult)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InternalAuthenticationServiceException</span><span style="color:#E06C75;font-style:italic"> failed</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 7. 处理内部身份验证服务异常</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"An internal error occurred while trying to authenticate the user."</span><span style="color:#ABB2BF">, failed);</span></span>
<span class="line"><span style="color:#61AFEF">        unsuccessfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> failed)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">AuthenticationException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 8. 处理身份验证失败的情况</span></span>
<span class="line"><span style="color:#61AFEF">        unsuccessfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ex)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/securitycontextholder.png" type="image/png"/>
    </item>
    <item>
      <title>源码篇之表单登录认证流程</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%906%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%906%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.html</guid>
      <source url="https://cactusli.net/rss.xml">源码篇之表单登录认证流程</source>
      <description>1. 简介 本篇文章主要学习Spring Security中用户名密码认证的执行流程。 在前面我们已经提到了Spring Security是基于过滤器实现的，并介绍了过滤器及相关的认证组件。现在，我们将深入源码，详细了解用户名密码认证的整个流程。 2. 配置表单登录 在前面我们已经提到了Spring Boot自动配置了添加了默认的认证规则： 在使用Sp...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p>本篇文章主要学习<code>Spring Security</code>中<strong>用户名密码</strong>认证的执行流程。</p>
<p>在前面我们已经提到了<code>Spring Security</code>是基于过滤器实现的，并介绍了过滤器及相关的认证组件。现在，我们将深入源码，详细了解<strong>用户名密码认证</strong>的整个流程。</p>
<h2>2. 配置表单登录</h2>
<p>在前面我们已经提到了<code>Spring Boot</code>自动配置了添加了默认的认证规则：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Order</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2147483642</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">SecurityFilterChain</span><span style="color:#61AFEF"> defaultSecurityFilterChain</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpSecurity</span><span style="color:#E06C75"> http) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 配置所有的Http请求必须认证</span></span>
<span class="line"><span style="color:#E06C75">    ((</span><span style="color:#E5C07B">AuthorizeHttpRequestsConfigurer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AuthorizedUrl</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">authorizeHttpRequests</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">anyRequest</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 开启表单登录</span></span>
<span class="line"><span style="color:#E5C07B">    http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 开启Basic认证</span></span>
<span class="line"><span style="color:#E5C07B">    http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">httpBasic</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (SecurityFilterChain)</span><span style="color:#E5C07B">http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用Spring Security时，定制一些安全规则是不可避免的。然而，6.0版本及其之前版本的配置方式发生了较大变化。之前的做法通常是继承<code>WebSecurityConfigurerAdapter</code>类，并重写其中的方法，如下所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119093845451.png" alt="image-20240119093845451" tabindex="0" loading="lazy"><figcaption>image-20240119093845451</figcaption></figure>
<p><code>Spring Security 6.x 及以后的版本中已经删除 </code>WebSecurityConfigurerAdapter<code>，新版中需要按照以下方式 来配置</code>HttpSecurity<code>和</code>WebSecurity` ：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">EnableWebSecurity</span><span style="color:#E06C75">(</span><span style="color:#D19A66">debug</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> WebSecurityConfig</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> SecurityFilterChain</span><span style="color:#61AFEF"> filterChain</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpSecurity</span><span style="color:#E06C75;font-style:italic"> http</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        http</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">csrf</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">authorizeHttpRequests</span><span style="color:#ABB2BF">(authorize </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> authorize</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">anyRequest</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            )</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">httpBasic</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#E5C07B">    WebSecurityCustomizer</span><span style="color:#61AFEF"> webSecurityCustomizer</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> web </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> web</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ignoring</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">requestMatchers</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/hello"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置中<code>http.formLogin()</code>表示开启表单认证，该方法中应用了一个<strong>表单登录配置类</strong>  <code>FormLoginConfigurer</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> HttpSecurity</span><span style="color:#61AFEF"> formLogin</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Customizer</span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">FormLoginConfigurer</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">HttpSecurity</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E06C75"> formLoginCustomizer) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B">    formLoginCustomizer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">customize</span><span style="color:#ABB2BF">((FormLoginConfigurer)</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOrApply</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FormLoginConfigurer</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>FormLoginConfigurer</code>的构造方法中，会配置添加<code>UsernamePasswordAuthenticationFilter</code>，用于处理用户名密码认证，并对请求参数的名称进行了设置：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#61AFEF"> FormLoginConfigurer</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> UsernamePasswordAuthenticationFilter</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (String)</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"username"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"password"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在父类的构造函数和配置类的构建过程中，还会进行一些相关的配置，包括设置登录请求URL、配置<code>DefaultLoginPageGeneratingFilter</code>（用于生成登录页面的过滤器）等。</p>
<h2>3. 重定向登录页</h2>
<p>首先添加一个访问测试接口：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">GetMapping</span><span style="color:#E06C75">(</span><span style="color:#98C379">"/test"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> test</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#98C379"> "Hello Security!!"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未登录时访问接口，会<strong>重定向到登录页</strong>，流程图如下说示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119111427881.png" alt="image-20240119111427881" tabindex="0" loading="lazy"><figcaption>image-20240119111427881</figcaption></figure>
<p>流程图说明：</p>
<ol>
<li>一个用户向其未被授权的资源（/test）发出一个未经认证的请求。</li>
<li>请求进入SecurityFilterChain开始执行过滤器，在AuthorizationFilter中校验不通过，抛出一个AccessDeniedException。</li>
<li>ExceptionTranslationFilter 捕获到异常，调用LoginUrlAuthenticationEntryPoint 重定向到/login。</li>
<li>重定向的/login发起请求进入过滤器</li>
<li>/login会被DefaultLoginPageGeneratingFilter处理，直接响应写出默认登录页。</li>
</ol>
<h3>3.1  抛出 AccessDeniedException</h3>
<p>访问上述接口地址，在<code>Spring Security 6.0系列【4】源码篇之默认过滤器</code> 中，有介绍请求最开始是到达<code>FilterChainProxy</code>，由它来调用<code>SecurityFilterChain</code>中的过滤器，<code>/test</code>是没有经过认证的，依次通过下述所有过滤器。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119112512670.png" alt="image-20240119112512670" tabindex="0" loading="lazy"><figcaption>image-20240119112512670</figcaption></figure>
<p>在经过最后一个过滤器 <code>AuthorizationFilter</code> 时，进行了最终的权限校验。如果当前请求缺乏执行所需操作的权限，那么会触发抛出 <code>AccessDeniedException</code> 异常。这表示请求被拒绝，因为用户没有足够的权限执行相应的操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">		try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 调用AuthorizationManager 检查当前是否有权限</span></span>
<span class="line"><span style="color:#E5C07B">			AuthorizationDecision</span><span style="color:#E06C75"> decision </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">authorizationManager</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">check</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getAuthentication, request);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 发布事件</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">eventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">publishAuthorizationEvent</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getAuthentication, request, decision);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果未被授权，抛出 AccessDeniedException</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#E06C75"> (decision </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">decision</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isGranted</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">				throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AccessDeniedException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Access Denied"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#E5C07B">			chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">			request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">removeAttribute</span><span style="color:#ABB2BF">(alreadyFilteredAttributeName);</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，<code>AuthorizationFilter</code>会提取当前用户的认证信息。由于当前请求尚未经过认证，因此用户将是由<code>AnonymousAuthenticationFilter</code>创建的<strong>匿名用户</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119175448941.png" alt="image-20240119175448941" tabindex="0" loading="lazy"><figcaption>image-20240119175448941</figcaption></figure>
<p>接着，使用<code>AuthorizationManager</code> 授权管理器对当前的认证信息进行检查。由于当前用户是<strong>匿名用户</strong>，因此判定当前请求无权访问，并触发抛出 <code>AccessDeniedException</code> 异常。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119175819405.png" alt="image-20240119175819405" tabindex="0" loading="lazy"><figcaption>image-20240119175819405</figcaption></figure>
<h3>3.2 异常处理</h3>
<p>抛出的<code>AccessDeniedException</code>异常会被<code>ExceptionTranslationFilter</code>捕获：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119180100744.png" alt="image-20240119180100744" tabindex="0" loading="lazy"><figcaption>image-20240119180100744</figcaption></figure>
<p><code>ExceptionTranslationFilter</code>根据异常类型进行相应处理：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> handleSpringSecurityException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			FilterChain</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> RuntimeException</span><span style="color:#E06C75"> exception) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (exception </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> AuthenticationException) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 处理 AuthenticationException（身份验证异常）</span></span>
<span class="line"><span style="color:#61AFEF">			handleAuthenticationException</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (AuthenticationException) exception)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (exception </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> AccessDeniedException) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 处理 AccessDeniedExceptio（访问拒绝异常）</span></span>
<span class="line"><span style="color:#61AFEF">			handleAccessDeniedException</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (AccessDeniedException) exception)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用<code>handleAccessDeniedException</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> handleAccessDeniedException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			FilterChain</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AccessDeniedException</span><span style="color:#E06C75"> exception) throws ServletException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 获取用户认证信息</span></span>
<span class="line"><span style="color:#E5C07B">		Authentication</span><span style="color:#E06C75"> authentication </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getContext</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getAuthentication</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 当前是匿名用户</span></span>
<span class="line"><span style="color:#C678DD">		boolean</span><span style="color:#E06C75"> isAnonymous </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">authenticationTrustResolver</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAnonymous</span><span style="color:#ABB2BF">(authentication);</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (isAnonymous </span><span style="color:#56B6C2">||</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">authenticationTrustResolver</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isRememberMe</span><span style="color:#ABB2BF">(authentication)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isTraceEnabled</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">				logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">trace</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">LogMessage</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sending %s to authentication entry point since access is denied"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">						authentication), exception);</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 当前是匿名用户，需要发送认证页面</span></span>
<span class="line"><span style="color:#61AFEF">			sendStartAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">					new</span><span style="color:#61AFEF"> InsufficientAuthenticationException</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#E5C07B">							this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ExceptionTranslationFilter.insufficientAuthentication"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">									"Full authentication is required to access this resource"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isTraceEnabled</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">				logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">trace</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#E5C07B">						LogMessage</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sending %s to access denied handler since access is denied"</span><span style="color:#ABB2BF">, authentication),</span></span>
<span class="line"><span style="color:#ABB2BF">						exception);</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 不是匿名用户，也不是记住我用户，调用访问拒绝处理器AccessDeniedHandler</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">accessDeniedHandler</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">handle</span><span style="color:#ABB2BF">(request, response, exception);</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用<code>sendStartAuthentication</code>缓存请求，并调用<code>AuthenticationEntryPoint</code>生成认证入口：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">	protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> sendStartAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			AuthenticationException</span><span style="color:#E06C75"> reason) throws ServletException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 创建空的SecurityContext</span></span>
<span class="line"><span style="color:#E5C07B">		SecurityContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">createEmptyContext</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContext</span><span style="color:#ABB2BF">(context);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 请求缓存中保存当前请求，使用的是HttpSession</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">requestCache</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">saveRequest</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用AuthenticationEntryPoint</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">authenticationEntryPoint</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">commence</span><span style="color:#ABB2BF">(request, response, reason);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.3 重定向</h3>
<p>接着调用到<code>LoginUrlAuthenticationEntryPoint</code>进行<strong>重定向</strong>或者<strong>转发</strong>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">	@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> commence</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			AuthenticationException</span><span style="color:#E06C75"> authException) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">useForward</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">           //  重定向至登录页面。如果 forceHttps true ，则使用 https</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        	// 重定向的登录页地址：http://localhost:10001/login</span></span>
<span class="line"><span style="color:#E5C07B">			String</span><span style="color:#E06C75"> redirectUrl </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> buildRedirectUrlToLoginPage</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authException)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 执行</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">redirectStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sendRedirect</span><span style="color:#ABB2BF">(request, response, redirectUrl);</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E5C07B">		String</span><span style="color:#E06C75"> redirectUrl </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">forceHttps</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#98C379"> "http"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getScheme</span><span style="color:#ABB2BF">())</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			// 首先将当前请求重定向到 HTTPS。收到该请求后，将使用转发到登录页面。</span></span>
<span class="line"><span style="color:#E06C75">			redirectUrl </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> buildHttpsRedirectUrlForRequest</span><span style="color:#E06C75">(request)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (redirectUrl </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">redirectStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sendRedirect</span><span style="color:#ABB2BF">(request, response, redirectUrl);</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E5C07B">		String</span><span style="color:#E06C75"> loginForm </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> determineUrlToUseForThisRequest</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authException)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">		logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">LogMessage</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Server side forward to: %s"</span><span style="color:#ABB2BF">, loginForm));</span></span>
<span class="line"><span style="color:#E5C07B">		RequestDispatcher</span><span style="color:#E06C75"> dispatcher </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getRequestDispatcher</span><span style="color:#ABB2BF">(loginForm);</span></span>
<span class="line"><span style="color:#E5C07B">		dispatcher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forward</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#C678DD">		return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3.4 生成默认页面</h3>
<p><strong>重定向</strong>后浏览器地址变为<code>http://localhost:8888/login</code>，发起<code>GET</code>请求，此时又会开始执行过滤器：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122110748749.png" alt="image-20240122110748749" tabindex="0" loading="lazy"><figcaption>image-20240122110748749</figcaption></figure>
<p>在经过<code>DefaultLoginPageGeneratingFilter</code>时，进行默认登录页的处理。在这个过滤器中，维护了许多参数，用于配置和定制默认登录页。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    // 默认登录页面 URL</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> DEFAULT_LOGIN_PAGE_URL </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/login"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 错误参数名称</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> ERROR_PARAMETER_NAME </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "error"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 登录页面网址, 默认 /login</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> loginPageUrl</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 登出成功页网址，默认 /login?logout</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> logoutSuccessUrl</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 登录错误页网址，默认 /login?error</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> failureUrl</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 是否开启表单登录</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> formLoginEnabled</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 是否开启oauth2登录</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> oauth2LoginEnabled</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 是否开启saml2登录</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> saml2LoginEnabled</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 认证请求地址，默认 /login</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> authenticationUrl</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 用户名参数，默认username</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> usernameParameter</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 密码参数，默认password</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> passwordParameter</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 记住用户</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> rememberMeParameter</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // oauth 2 客户端名称的身份验证 URL</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> oauth2AuthenticationUrlToClientName</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // saml 2 提供程序名称的身份验证 URL</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> saml2AuthenticationUrlToProviderName</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 解析隐藏输入</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;&gt;</span><span style="color:#E06C75"> resolveHiddenInputs </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (request) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">emptyMap</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当发生重定向到GET请求的 <code>/login</code> 时，会触发生成登录页面的逻辑。在这个过程中，会通过调用 <code>response</code> 直接输出一个页面，并在此处返回，不再执行后续的操作。这确保了在重定向到登录页时，后续的处理逻辑被中止。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doFilter</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> chain)</span></span>
<span class="line"><span style="color:#E06C75">			throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	    // 是否登录错误 /login?error</span></span>
<span class="line"><span style="color:#C678DD">		boolean</span><span style="color:#E06C75"> loginError </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> isErrorPage</span><span style="color:#E06C75">(request)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 是否登录成功 /login?logout</span></span>
<span class="line"><span style="color:#C678DD">		boolean</span><span style="color:#E06C75"> logoutSuccess </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> isLogoutSuccess</span><span style="color:#E06C75">(request)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">isLoginUrlRequest</span><span style="color:#E06C75">(request) </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> loginError </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> logoutSuccess) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //1.  /login?error、/login?logout、/login 三种请求URL中的任意一种会进入该方法</span></span>
<span class="line"><span style="color:#E5C07B">			String</span><span style="color:#E06C75"> loginPageHtml </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> generateLoginPageHtml</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> loginError</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> logoutSuccess)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //2. 生成登录页</span></span>
<span class="line"><span style="color:#E5C07B">			response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContentType</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"text/html;charset=UTF-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">			response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContentLength</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">loginPageHtml</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">StandardCharsets</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UTF_8</span><span style="color:#ABB2BF">).</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //3. 直接写出，并结束</span></span>
<span class="line"><span style="color:#E5C07B">			response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWriter</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(loginPageHtml);</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E5C07B">		chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，默认的登录页面就展示出来了：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122112155371.png" alt="image-20240122112155371" tabindex="0" loading="lazy"><figcaption>image-20240122112155371</figcaption></figure>
<h2>4. 表单登录</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122125832774.png" alt="image-20240122125832774" tabindex="0" loading="lazy"><figcaption>image-20240122125832774</figcaption></figure>
<p><strong>流程说明：</strong></p>
<ul>
<li>输入用户名、密码提交登录，登录请求会被UsernamePasswordAuthenticationFilter处理，构建预认证对象UsernamePasswordAuthenticationToken</li>
<li>调用AuthenticationManager（实现类是ProviderManager）进行认证</li>
<li>ProviderManager查询所有认证提供者，DaoAuthenticationProvider符合当前认证类型</li>
<li>DaoAuthenticationProvider查询用户，校验密码</li>
<li>身份验证成功，存储会话、发布事件、调用成功处理器</li>
<li>身份验证失败，清除SecurityContext，调用失败处理器</li>
</ul>
<h3>4.1  首先是进入AbstractAuthenticationProcessingFilter</h3>
<p>在进行表单登录时，登录请求会被传递到 <code>UsernamePasswordAuthenticationFilter</code> 过滤器中。该过滤器负责拦截前端提交的 POST 登录表单请求，并进行身份认证。</p>
<p>在该过滤器的 <code>doFilter</code> 方法中，实际上执行的是其父类 <code>AbstractAuthenticationProcessingFilter.doFilter</code> 方法。这是一个抽象类，采用了模板设计模式，主要用于执行认证过滤器。根据不同的认证方式，它会执行不同子类的认证逻辑。通过观察其实现类，我们可以看到 <code>Security</code> 提供了多种认证方式。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123102917835.png" alt="image-20240123102917835" tabindex="0" loading="lazy"><figcaption>image-20240123102917835</figcaption></figure>
<p><code>AbstractAuthenticationProcessingFilter</code>的<code>doFilter</code>方法，几乎完成了认证的所有流程。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">	// 过滤方法</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doFilter</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> chain)</span></span>
<span class="line"><span style="color:#E06C75">			throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 1. 判断是否需要认证</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">requiresAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response)) {</span></span>
<span class="line"><span style="color:#E5C07B">			chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 2. 调用子类方法认证，认证信息封装到 Authentication 中</span></span>
<span class="line"><span style="color:#E5C07B">			Authentication</span><span style="color:#E06C75"> authenticationResult </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> attemptAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#E06C75"> (authenticationResult </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">				// return immediately as subclass has indicated that it hasn't completed</span></span>
<span class="line"><span style="color:#C678DD">				return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 3. Session 策略处理</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">sessionStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">onAuthentication</span><span style="color:#ABB2BF">(authenticationResult, request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			// Authentication success</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">continueChainBeforeSuccessfulAuthentication</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">				chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 4. 成功处理</span></span>
<span class="line"><span style="color:#61AFEF">			successfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authenticationResult)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InternalAuthenticationServiceException</span><span style="color:#E06C75;font-style:italic"> failed</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"An internal error occurred while trying to authenticate the user."</span><span style="color:#ABB2BF">, failed);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 5. 失败处理</span></span>
<span class="line"><span style="color:#61AFEF">			unsuccessfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> failed)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">AuthenticationException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">			// Authentication failed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 6. 失败处理</span></span>
<span class="line"><span style="color:#61AFEF">			unsuccessfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ex)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.2 然后进入UsernamePasswordAuthenticationFilter</h3>
<p>UsernamePasswordAuthenticationFilter<code>的</code>attemptAuthentication<code>方法，该方法会创建一个没有认证的</code>UsernamePasswordAuthenticationToken `认证对象。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    // 用户名和密码认证逻辑</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#E5C07B"> Authentication</span><span style="color:#61AFEF"> attemptAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response)</span></span>
<span class="line"><span style="color:#E06C75">			throws AuthenticationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 1. 设置了只支持Post，而当前不是Post请求时，抛出异常 Authentication method not supported</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">postOnly</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMethod</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"POST"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">			throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AuthenticationServiceException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Authentication method not supported: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> request</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMethod</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 2. 请求中获取 username password 参数，去除空格，当参数为null时，设置为空</span></span>
<span class="line"><span style="color:#E5C07B">		String</span><span style="color:#E06C75"> username </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> obtainUsername</span><span style="color:#E06C75">(request)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		username </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (username </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> username</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">trim</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> :</span><span style="color:#98C379"> ""</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">		String</span><span style="color:#E06C75"> password </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> obtainPassword</span><span style="color:#E06C75">(request)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		password </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (password </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#E06C75"> password </span><span style="color:#C678DD">:</span><span style="color:#98C379"> ""</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 3. 创建 UsernamePasswordAuthenticationToken，标记为未认证</span></span>
<span class="line"><span style="color:#E5C07B">		UsernamePasswordAuthenticationToken</span><span style="color:#E06C75"> authRequest </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UsernamePasswordAuthenticationToken</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unauthenticated</span><span style="color:#ABB2BF">(username,</span></span>
<span class="line"><span style="color:#ABB2BF">				password);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// Allow subclasses to set the "details" property</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 4. UsernamePasswordAuthenticationToken 设置 Details 信息</span></span>
<span class="line"><span style="color:#61AFEF">		setDetails</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authRequest)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 5. 调用认证管理器进行认证，返回认证信息Authentication</span></span>
<span class="line"><span style="color:#C678DD">		return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthenticationManager</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">authenticate</span><span style="color:#ABB2BF">(authRequest);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UsernamePasswordAuthenticationToken</code>刚创建时，包含了输入的<strong>用户名密码</strong>、访问<code>IP</code>、<code>sessionID</code>等信息，这时状态为<strong>未认证</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123152053479.png" alt="image-20240123152053479" tabindex="0" loading="lazy"><figcaption>image-20240123152053479</figcaption></figure>
<p>认证管理器<code>ProviderManager</code>中包含多个认证提供者<code>AuthenticationProvider</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123154914336.png" alt="image-20240123154914336" tabindex="0" loading="lazy"><figcaption>image-20240123154914336</figcaption></figure>
<p>调用认证管理器进行认证时，进入的是 <code>ProviderManager</code> 的 <code>authenticate</code> 方法，先找到支持该类型认证的提供者，然后调用其认证方法：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123155116956.png" alt="image-20240123155116956" tabindex="0" loading="lazy"><figcaption>image-20240123155116956</figcaption></figure>
<h3>4.3 最后进入 DaoAuthenticationProvider</h3>
<p><code>UsernamePasswordAuthenticationToken</code> 类型的 <code>Authentication</code> 对象由 <code>DaoAuthenticationProvider</code> 处理。处理的第一步是调用父类 <code>AbstractUserDetailsAuthenticationProvider</code> 中的 <code>authenticate</code> 方法。在这个过程中，涉及到对数据库进行用户信息查询以及检查相关状态。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">	// 认证逻辑</span></span>
<span class="line"><span style="color:#ABB2BF">	@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#E5C07B"> Authentication</span><span style="color:#61AFEF"> authenticate</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Authentication</span><span style="color:#E06C75"> authentication) throws AuthenticationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 断言传入的认证对象必须是 UsernamePasswordAuthenticationToken 类型</span></span>
<span class="line"><span style="color:#E5C07B">		Assert</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isInstanceOf</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UsernamePasswordAuthenticationToken</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, authentication,</span></span>
<span class="line"><span style="color:#ABB2BF">				() </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">						"Only UsernamePasswordAuthenticationToken is supported"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 从认证对象中获取用户名</span></span>
<span class="line"><span style="color:#E5C07B">		String</span><span style="color:#E06C75"> username </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> determineUsername</span><span style="color:#E06C75">(authentication)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 标记是否使用了缓存</span></span>
<span class="line"><span style="color:#C678DD">		boolean</span><span style="color:#E06C75"> cacheWasUsed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 从用户缓存中获取用户详情对象</span></span>
<span class="line"><span style="color:#E5C07B">		UserDetails</span><span style="color:#E06C75"> user </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">userCache</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUserFromCache</span><span style="color:#ABB2BF">(username);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果缓存中没有用户详情对象</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (user </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 设置缓存标记为false</span></span>
<span class="line"><span style="color:#E06C75">			cacheWasUsed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">			try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 调 loadUserByUsername 方法获取数据库中查询的用户</span></span>
<span class="line"><span style="color:#E06C75">				user </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> retrieveUser</span><span style="color:#E06C75">(username</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#C678DD">			catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">UsernameNotFoundException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果用户服务中找不到用户，记录日志</span></span>
<span class="line"><span style="color:#E5C07B">				this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Failed to find user '"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> username </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "'"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">				if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hideUserNotFoundExceptions</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">					throw</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">				}</span></span>
<span class="line"><span style="color:#C678DD">				throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BadCredentialsException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span></span>
<span class="line"><span style="color:#ABB2BF">					.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Bad credentials"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 断言用户详情对象不为空</span></span>
<span class="line"><span style="color:#E5C07B">			Assert</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">notNull</span><span style="color:#ABB2BF">(user, </span><span style="color:#98C379">"retrieveUser returned null - a violation of the interface contract"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 对用户详情对象进行预认证检查，比如是否过期、是否锁定等</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">preAuthenticationChecks</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">check</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 对用户详情对象进行额外的认证检查，比如密码是否匹配等</span></span>
<span class="line"><span style="color:#61AFEF">			additionalAuthenticationChecks</span><span style="color:#E06C75">(user</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#C678DD">		catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">AuthenticationException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果发生认证异常</span></span>
<span class="line"><span style="color:#C678DD">			if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">cacheWasUsed) {</span></span>
<span class="line"><span style="color:#C678DD">				throw</span><span style="color:#E06C75"> ex</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 否则，重新从用户服务中获取用户详情对象，以防缓存中的数据过期</span></span>
<span class="line"><span style="color:#E06C75">			cacheWasUsed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">			user </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> retrieveUser</span><span style="color:#E06C75">(username</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 再次进行预认证检查和额外的认证检查</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">preAuthenticationChecks</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">check</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"><span style="color:#61AFEF">			additionalAuthenticationChecks</span><span style="color:#E06C75">(user</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 对用户详情对象进行后认证检查，比如是否启用等</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">postAuthenticationChecks</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">check</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果没有使用缓存</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">cacheWasUsed) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 将用户详情对象放入缓存中</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">userCache</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putUserInCache</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 定义要返回的主体对象</span></span>
<span class="line"><span style="color:#E5C07B">		Object</span><span style="color:#E06C75"> principalToReturn </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> user</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果强制将主体对象转换为字符串</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">forcePrincipalAsString</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 则将主体对象设置为用户的用户名</span></span>
<span class="line"><span style="color:#E06C75">			principalToReturn </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUsername</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建成功的认证对象，并返回</span></span>
<span class="line"><span style="color:#C678DD">		return</span><span style="color:#61AFEF"> createSuccessAuthentication</span><span style="color:#E06C75">(principalToReturn</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authentication</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> user)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库查询出用户后，<code>additionalAuthenticationChecks</code> 会对输入密码进行校验：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    // 密码校验</span></span>
<span class="line"><span style="color:#ABB2BF">	@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#ABB2BF">	@</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"deprecation"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">	protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> additionalAuthenticationChecks</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">UserDetails</span><span style="color:#E06C75"> userDetails</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			UsernamePasswordAuthenticationToken</span><span style="color:#E06C75"> authentication) throws AuthenticationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果认证对象没有提供凭证，即密码为空</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getCredentials</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 记录调试信息</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Failed to authenticate since no credentials provided"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">			throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BadCredentialsException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span></span>
<span class="line"><span style="color:#ABB2BF">				.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Bad credentials"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 将认证对象的凭证转换为字符串</span></span>
<span class="line"><span style="color:#E5C07B">		String</span><span style="color:#E06C75"> presentedPassword </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getCredentials</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果密码编码器无法匹配用户的密码和认证对象的凭证</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">passwordEncoder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">matches</span><span style="color:#ABB2BF">(presentedPassword, </span><span style="color:#E5C07B">userDetails</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPassword</span><span style="color:#ABB2BF">())</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Failed to authenticate since password does not match stored value"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 抛出凭证错误的异常</span></span>
<span class="line"><span style="color:#C678DD">			throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BadCredentialsException</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messages</span></span>
<span class="line"><span style="color:#ABB2BF">				.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Bad credentials"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>密码校验成功后，<code>AbstractUserDetailsAuthenticationProvider</code>就会创建一个认证成功的<code>Authentication</code>对象：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    // 创建已认证的Authentication</span></span>
<span class="line"><span style="color:#C678DD">	protected</span><span style="color:#E5C07B"> Authentication</span><span style="color:#61AFEF"> createSuccessAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> principal</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Authentication</span><span style="color:#E06C75"> authentication</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			UserDetails</span><span style="color:#E06C75"> user) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 保证返回用户提供的原始凭证，以便后续的尝试能够成功，即使密码是经过编码的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 同时保证返回原始的getDetails()，以便缓存过期后的认证事件包含细节</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 创建一个已认证的UsernamePasswordAuthenticationToken对象，包含主体、凭证和权限</span></span>
<span class="line"><span style="color:#E5C07B">		UsernamePasswordAuthenticationToken</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UsernamePasswordAuthenticationToken</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">(principal,</span></span>
<span class="line"><span style="color:#E5C07B">				authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getCredentials</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">authoritiesMapper</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">mapAuthorities</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAuthorities</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E5C07B">		result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setDetails</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">authentication</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDetails</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Authenticated user"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">		return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.4 会话策略处理</h3>
<p>回到第一步 <code>AbstractAuthenticationProcessingFilter</code> 中的 <code>doFilter </code>方法进行认证成功的后续处理：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123180418032.png" alt="image-20240123180418032" tabindex="0" loading="lazy"><figcaption>image-20240123180418032</figcaption></figure>
<p>可以看到<code>sessionStrategy</code>使用了两个策略进行会话处理：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123181242959.png" alt="image-20240123181242959" tabindex="0" loading="lazy"><figcaption>image-20240123181242959</figcaption></figure>
<p><strong>CsrfAuthenticationStrategy</strong> ：它负责在执行认证请求之后, 删除旧的令牌, 生成新的，确保每次请求之后,<code> csrf-token</code> 都得到更新</p>
<p><strong>ChangeSessionIdAuthenticationStrategy</strong>：主要是使用<code>HttpServletRequest.changeSessionId()</code>方法修改<code>sessionID</code>来防止会话固定攻击。</p>
<h4>4.5 成功处理</h4>
<p>会话处理完成后，调用<code>successfulAuthentication</code>进行认证成功后续处理。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">			// 成功处理</span></span>
<span class="line"><span style="color:#61AFEF">			successfulAuthentication</span><span style="color:#E06C75">(request</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> authenticationResult)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>详细代码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">	protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> successfulAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			Authentication</span><span style="color:#E06C75"> authResult) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 把认证信息封装到 SecurityContext 中</span></span>
<span class="line"><span style="color:#E5C07B">		SecurityContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">createEmptyContext</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAuthentication</span><span style="color:#ABB2BF">(authResult);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContext</span><span style="color:#ABB2BF">(context);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">saveContext</span><span style="color:#ABB2BF">(context, request, response);</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isDebugEnabled</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">LogMessage</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Set SecurityContextHolder to %s"</span><span style="color:#ABB2BF">, authResult));</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //  rememberMe 处理</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">rememberMeServices</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loginSuccess</span><span style="color:#ABB2BF">(request, response, authResult);</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">eventPublisher</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 发布认证成功事件</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">eventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">publishEvent</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InteractiveAuthenticationSuccessEvent</span><span style="color:#ABB2BF">(authResult, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用成功处理器，重定向到登录前 URL</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">successHandler</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">onAuthenticationSuccess</span><span style="color:#ABB2BF">(request, response, authResult);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在认证成功后，用户信息会被保存在 <code>SecurityContextHolder</code> 和会话（<code>Session</code>）中。成功处理器将会重定向到用户之前访问的URL。接下来，请求会继续经过过滤器。由于当前已完成认证，所以直接返回接口请求的资源。这确保了认证成功后的顺利访问。</p>
<h4>4.6 失败处理</h4>
<p>如果认证失败，比如密码错误，会进入到<code>AbstractAuthenticationProcessingFilter</code>失败处理方法中：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123182359205.png" alt="image-20240123182359205" tabindex="0" loading="lazy"><figcaption>image-20240123182359205</figcaption></figure>
<p>失败处理方法逻辑如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">	</span></span>
<span class="line"><span style="color:#C678DD">	protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> unsuccessfulAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			AuthenticationException</span><span style="color:#E06C75"> failed) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 清理 securityContext</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clearContext</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">trace</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Failed to process authentication request"</span><span style="color:#ABB2BF">, failed);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">trace</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Cleared SecurityContextHolder"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">trace</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Handling authentication failure"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 记住我处理</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">rememberMeServices</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loginFail</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用失败处理器</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">failureHandler</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">onAuthenticationFailure</span><span style="color:#ABB2BF">(request, response, failed);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败处理器默认使用的是<code>SimpleUrlAuthenticationFailureHandler</code>，将页面重定向到<code>/login?error</code>：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124101656530.png" alt="image-20240124101656530" tabindex="0" loading="lazy"><figcaption>image-20240124101656530</figcaption></figure>
<p>重定向的<code>/login?error</code>再次发起请求会被<code>DefaultLoginPageGeneratingFilter</code>处理，又重定向到登录页，并显示错误信息：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124101737573.png" alt="image-20240124101737573" tabindex="0" loading="lazy"><figcaption>image-20240124101737573</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119093845451.png" type="image/png"/>
    </item>
    <item>
      <title>认证篇之表单登录的自定义配置</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%907%E3%80%91%E8%AE%A4%E8%AF%81%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%907%E3%80%91%E8%AE%A4%E8%AF%81%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://cactusli.net/rss.xml">认证篇之表单登录的自定义配置</source>
      <description>1. 简介 Spring Security 提供了默认的认证规则，同时也支持各种自定义配置。本文档的重点在于深入研究 Spring Security 中表单登录的相关自定义配置。 2. 自定义登录页 对于未认证的请求，Spring Security 会将其重定向到默认的登录页面。同时，也支持自定义登录页面。首先，可以创建一个简单的登录页 login.h...</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1. 简介</h2>
<p><code>Spring Security</code> 提供了默认的认证规则，同时也支持各种自定义配置。本文档的重点在于深入研究 <code>Spring Security</code> 中表单登录的相关自定义配置。</p>
<h2>2. 自定义登录页</h2>
<p>对于未认证的请求，Spring Security 会将其重定向到默认的登录页面。同时，也支持自定义登录页面。首先，可以创建一个简单的登录页 <code>login.html</code>，并将其放置在 <code>resources\static</code> 目录下。</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;!</span><span style="color:#E06C75">DOCTYPE</span><span style="color:#D19A66"> html</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">html</span><span style="color:#D19A66"> lang</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"en"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">head</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">meta</span><span style="color:#D19A66"> charset</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">title</span><span style="color:#ABB2BF">&gt;登录页面&lt;/</span><span style="color:#E06C75">title</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">head</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">form</span><span style="color:#D19A66"> action</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"/login"</span><span style="color:#D19A66"> method</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"post"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    用户名：&lt;</span><span style="color:#E06C75">input</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"text"</span><span style="color:#D19A66"> name</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"username"</span><span style="color:#ABB2BF">/&gt;&lt;</span><span style="color:#E06C75">br</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    密码： &lt;</span><span style="color:#E06C75">input</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"password"</span><span style="color:#D19A66"> name</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"password"</span><span style="color:#ABB2BF">/&gt;&lt;</span><span style="color:#E06C75">br</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">input</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"submit"</span><span style="color:#D19A66"> value</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"登录"</span><span style="color:#ABB2BF">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">form</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">html</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置类中，设置表单登录的<code>loginPage</code>、<code>loginProcessingUrl</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Configuration</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 开启 Spring Security，debug：是否开启Debug模式</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">EnableWebSecurity</span><span style="color:#E06C75">(</span><span style="color:#D19A66">debug</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> CactusSecurityConfig</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> SecurityFilterChain</span><span style="color:#61AFEF"> securityFilterChain</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpSecurity</span><span style="color:#E06C75;font-style:italic"> http</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        http</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 配置所有的Http请求必须认证后才能访问</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">authorizeHttpRequests</span><span style="color:#ABB2BF">((authorize) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> authorize</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">requestMatchers</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">permitAll</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">anyRequest</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                )</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 开启Basic认证</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">httpBasic</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(formLoginConfigurer </span><span style="color:#C678DD">-&gt;</span></span>
<span class="line"><span style="color:#E5C07B">                        formLoginConfigurer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                                            .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login"</span><span style="color:#ABB2BF">)); </span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> http</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 注入自定义 UserDetailsService 实现类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> UserDetailsService</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#E5C07B">    CactusUserDetailsService</span><span style="color:#61AFEF"> cactusUserDetailsService</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> CactusUserDetailsService</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 密码器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Bean</span></span>
<span class="line"><span style="color:#E5C07B">    PasswordEncoder</span><span style="color:#61AFEF"> passwordEncoder</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BCryptPasswordEncoder</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//    @Bean</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//    CactusOncePerRequestFilter oncePerRequestFilter() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//        return new CactusOncePerRequestFilter();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问测试接口，会跳转到自定义登录页：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124111318387.png" alt="image-20240124111318387" tabindex="0" loading="lazy"><figcaption>image-20240124111318387</figcaption></figure>
<h2>3. 自定义登录请求处理路径</h2>
<p><code>Spring Security</code>默认对<code>POST /login</code>的请求进行认证处理，也支持自定义<strong>登录请求处理路径</strong>。</p>
<p>修改表单登录<code>loginProcessingUrl</code>为自定义路径：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">        http</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 配置所有的Http请求必须认证后才能访问</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">authorizeHttpRequests</span><span style="color:#ABB2BF">((authorize) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> authorize</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">requestMatchers</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">permitAll</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">anyRequest</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">authenticated</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                )</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 开启Basic认证</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">httpBasic</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">withDefaults</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(formLoginConfigurer </span><span style="color:#C678DD">-&gt;</span></span>
<span class="line"><span style="color:#E5C07B">                        formLoginConfigurer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                                            .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic"> // 自定义登录请求路径 URL</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面中也同步修改提交表单时的请求路径,ji</p>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">form</span><span style="color:#D19A66"> action</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"/custom/login"</span><span style="color:#D19A66"> method</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"POST"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    用户名：&lt;</span><span style="color:#E06C75">input</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"text"</span><span style="color:#D19A66"> name</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"username"</span><span style="color:#ABB2BF">/&gt;&lt;</span><span style="color:#E06C75">br</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    密码： &lt;</span><span style="color:#E06C75">input</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"password"</span><span style="color:#D19A66"> name</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"password"</span><span style="color:#ABB2BF">/&gt;&lt;</span><span style="color:#E06C75">br</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">input</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"submit"</span><span style="color:#D19A66"> value</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"登录"</span><span style="color:#ABB2BF">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">form</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意 POST 可不能写成小的了，这里是区分大小写</p>
</blockquote>
<p>重启项目，进行登录，可以发现当前<strong>用户名密码认证过滤器</strong>中处理登录的路径变为了我们的自定义：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240125172357920.png" alt="image-20240125172357920" tabindex="0" loading="lazy"><figcaption>image-20240125172357920</figcaption></figure>
<h2>4. 自定义用户名密码参数名称</h2>
<p>默认表单登录中用户名密码参数名称为<code>username</code>、<code>password</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> SPRING_SECURITY_FORM_USERNAME_KEY </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "username"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> SPRING_SECURITY_FORM_PASSWORD_KEY </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "password"</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置类中设置自定义参数名称即可：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(form </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> form</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"name"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pwd"</span><span style="color:#ABB2BF">))</span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义登录页中也需要修改参数名：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240125172702273.png" alt="image-20240125172702273" tabindex="0" loading="lazy"><figcaption>image-20240125172702273</figcaption></figure>
<h2>5. 自定义登录成功跳转地址</h2>
<p>如果通过其他访问地址跳转到登录页，登录成功后，默认会返回到原始的地址。但如果直接访问登录页，则会跳转到根路径 <code>/</code>。在这种情况下，Spring Boot会自动查找是否存在 <code>index.html</code>，如果不存在则显示空白页。</p>
<p>为了自定义登录成功后的跳转地址，可以通过配置 <code>successForwardUrl</code> 来实现。这时使用的是请求转发。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(form </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> form</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"name"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义用户名参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pwd"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">//自定义密码参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">successForwardUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/index"</span><span style="color:#ABB2BF">))</span><span style="color:#7F848E;font-style:italic"> // 自定义登录成功后转发的地址（请求转发，地址栏不变）</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以配置<code>defaultSuccessUrl</code>，使用的是重定向：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(form </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> form</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"name"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义用户名参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pwd"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">//自定义密码参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">defaultSuccessUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/index"</span><span style="color:#ABB2BF">))</span><span style="color:#7F848E;font-style:italic"> // 自定义登录成功后重定向的地址（重定向，地址栏变），会优先跳转到登陆前访问的页面，也可以设置总是跳转到该地址</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>6. 自定义登录失败跳转地址</h2>
<p>默认情况下，认证失败后会重定向到 <code>/login?error</code>，然后再次重定向到<strong>登录页</strong>并显示错误信息。</p>
<p>与自定义登录成功跳转地址相似，你也可以通过配置认证失败时的跳转地址来实现。这样的配置方式与之前提到的 <code>successForwardUrl</code> 类似。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(form </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> form</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"name"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义用户名参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pwd"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">//自定义密码参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">defaultSuccessUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/index"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录成功后重定向的地址（重定向，地址栏变），会优先跳转到登陆前访问的页面，也可以设置总是跳转到该地址</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">failureForwardUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login/failure"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录失败后跳转的地址（转发，地址栏不变）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        //.failureUrl("/login/failure") // 自定义登录失败后重定向的地址（重定向，地址栏变）</span></span>
<span class="line"><span style="color:#ABB2BF">                        </span></span>
<span class="line"><span style="color:#ABB2BF">                )</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>7. 自定义认证成功处理器</h2>
<p>默认情况下，登录成功后会跳转到首页或者登录前访问的地址，同时也可以自定义跳转路径。</p>
<p>然而，随着现代应用的发展，许多应用都采用前后端分离的架构，通过JSON实现交互。在这种情况下，后端可能不包含任何页面，也无需处理页面跳转。相反，它只需要通知前端登录成功，并返回用户信息，由前端决定是否进行页面跳转。</p>
<p>在登录流程中，登录成功后会调用认证成功处理器（默认为 <code>SavedRequestAwareAuthenticationSuccessHandler</code>）来处理页面跳转。这个处理器的默认行为是跳转到之前访问的地址。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">	protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> successfulAuthentication</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FilterChain</span><span style="color:#E06C75"> chain</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			Authentication</span><span style="color:#E06C75"> authResult) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 把认证信息封装到 SecurityContext 中</span></span>
<span class="line"><span style="color:#E5C07B">		SecurityContext</span><span style="color:#E06C75"> context </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">createEmptyContext</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		context</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAuthentication</span><span style="color:#ABB2BF">(authResult);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextHolderStrategy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContext</span><span style="color:#ABB2BF">(context);</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">securityContextRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">saveContext</span><span style="color:#ABB2BF">(context, request, response);</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isDebugEnabled</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">logger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debug</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">LogMessage</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">format</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Set SecurityContextHolder to %s"</span><span style="color:#ABB2BF">, authResult));</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //  rememberMe 处理</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">rememberMeServices</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loginSuccess</span><span style="color:#ABB2BF">(request, response, authResult);</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">eventPublisher</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 发布认证成功事件</span></span>
<span class="line"><span style="color:#E5C07B">			this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">eventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">publishEvent</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InteractiveAuthenticationSuccessEvent</span><span style="color:#ABB2BF">(authResult, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用成功处理器，重定向到登录前 URL</span></span>
<span class="line"><span style="color:#E5C07B">		this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">successHandler</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">onAuthenticationSuccess</span><span style="color:#ABB2BF">(request, response, authResult);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么只需要自定义认证成功处理器，就可以直接实现<code>JSON</code>返回了，<code>AuthenticationSuccessHandler </code>用于处理用户身份验证成功后的处理策略，实现可以随心所欲：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> AuthenticationSuccessHandler</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	default</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> onAuthenticationSuccess</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75;font-style:italic"> request</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">HttpServletResponse</span><span style="color:#E06C75;font-style:italic"> response</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">FilterChain</span><span style="color:#E06C75;font-style:italic"> chain</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			Authentication</span><span style="color:#E06C75;font-style:italic"> authentication</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">		onAuthenticationSuccess</span><span style="color:#ABB2BF">(request, response, authentication);</span></span>
<span class="line"><span style="color:#E5C07B">		chain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(request, response);</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 当用户已成功通过身份验证时调用</span></span>
<span class="line"><span style="color:#C678DD">	void</span><span style="color:#61AFEF"> onAuthenticationSuccess</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75;font-style:italic"> request</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">HttpServletResponse</span><span style="color:#E06C75;font-style:italic"> response</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">			Authentication</span><span style="color:#E06C75;font-style:italic"> authentication</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义登录成功后直接返回 <code>JSON</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 登录成功后直接返回 JSON</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> request</span><span style="color:#7F848E;font-style:italic">        请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> response</span><span style="color:#7F848E;font-style:italic">       响应</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> authentication</span><span style="color:#7F848E;font-style:italic"> 成功认证的用户信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> onAuthenticationSuccess</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Authentication</span><span style="color:#E06C75"> authentication) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#E5C07B">        response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContentType</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"application/json;charset=utf-8"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 返回JSON</span></span>
<span class="line"><span style="color:#E5C07B">        response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setStatus</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OK</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">value</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">  // 状态码 200</span></span>
<span class="line"><span style="color:#E5C07B">        Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 返回结果</span></span>
<span class="line"><span style="color:#E5C07B">        result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"msg"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"登录成功"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"code"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">200</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"data"</span><span style="color:#ABB2BF">, authentication);</span></span>
<span class="line"><span style="color:#E5C07B">        response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWriter</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">JSONUtil</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJsonStr</span><span style="color:#ABB2BF">(result));</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置表单登录：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(form </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> form</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"name"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义用户名参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pwd"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">//自定义密码参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">successHandler</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> JsonAuthenticationSuccessHandler</span><span style="color:#ABB2BF">())</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>apifox 测试结果如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240126100851292.png" alt="image-20240126100851292" tabindex="0" loading="lazy"><figcaption>image-20240126100851292</figcaption></figure>
<h2>8. 自定义认证失败处理器</h2>
<p>登录失败时，默认还是会跳转到内部登录页：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240126101110509.png" alt="image-20240126101110509" tabindex="0" loading="lazy"><figcaption>image-20240126101110509</figcaption></figure>
<p>在前后端分离时，还是需要返回<code>JSON</code>，由前端去处理，同理定义一个认证失败处理器即可：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> onAuthenticationFailure</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">HttpServletRequest</span><span style="color:#E06C75"> request</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> HttpServletResponse</span><span style="color:#E06C75"> response</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AuthenticationException</span><span style="color:#E06C75"> exception) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ServletException {</span></span>
<span class="line"><span style="color:#E5C07B">        response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setContentType</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"application/json;charset=utf-8"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic"> // 返回JSON</span></span>
<span class="line"><span style="color:#E5C07B">        response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setStatus</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BAD_REQUEST</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">value</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">  // 状态码 400</span></span>
<span class="line"><span style="color:#E5C07B">        Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 返回结果</span></span>
<span class="line"><span style="color:#E5C07B">        result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"msg"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"登录失败"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"code"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">400</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        result</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"data"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">exception</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getWriter</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">JSONUtil</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJsonStr</span><span style="color:#ABB2BF">(result));</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把配置项加入表单登录配置：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">                // 开启表单登录</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">formLogin</span><span style="color:#ABB2BF">(form </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> form</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginPage</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/login.html"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录页面（注意要同步配置 loginProcessingUrl）</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">loginProcessingUrl</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/custom/login"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义登录请求路径 URL</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">usernameParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"name"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 自定义用户名参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">passwordParameter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pwd"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">//自定义密码参数名称</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">successHandler</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> JsonAuthenticationSuccessHandler</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">failureHandler</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> JsonAuthenticationFailureHandler</span><span style="color:#ABB2BF">())</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240126101142844.png" alt="image-20240126101142844" tabindex="0" loading="lazy"><figcaption>image-20240126101142844</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124111318387.png" type="image/png"/>
    </item>
    <item>
      <title>认证篇之注销登录</title>
      <link>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%908%E3%80%91%E8%AE%A4%E8%AF%81%E7%AF%87%E4%B9%8B%E6%B3%A8%E9%94%80%E7%99%BB%E5%BD%95.html</link>
      <guid>https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%908%E3%80%91%E8%AE%A4%E8%AF%81%E7%AF%87%E4%B9%8B%E6%B3%A8%E9%94%80%E7%99%BB%E5%BD%95.html</guid>
      <source url="https://cactusli.net/rss.xml">认证篇之注销登录</source>
      <description>1. 简介 本文的主要内容涵盖了在Spring Security中实现注销登录操作的学习，同时也包括自定义配置和对注销流程的分析。</description>
      <category>Spring Security</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h3>1. 简介</h3>
<p>本文的主要内容涵盖了在<code>Spring Security</code>中实现注销登录操作的学习，同时也包括自定义配置和对注销流程的分析。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Fiddler Everywhere 抓包工具</title>
      <link>https://cactusli.net/tutorial/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/Fiddler%20Everywhere%20%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://cactusli.net/tutorial/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/Fiddler%20Everywhere%20%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://cactusli.net/rss.xml">Fiddler Everywhere 抓包工具</source>
      <description>Fiddler Everywhere 是什么？ Fiddler Everywhere 是一个网络流量监控和调试工具，由 Telerik（Progress Software的一个部门）开发。它是 Fiddler Classic 的继承者，提供了一个更新更现代的用户界面和一些增强功能，使其能够跨平台工作，支持 Windows、Mac 和 Linux 系统。...</description>
      <category>Fiddler Everywhere</category>
      <pubDate>Fri, 05 Apr 2024 14:36:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Fiddler Everywhere 是什么？</h2>
<p>Fiddler Everywhere 是一个网络流量监控和调试工具，由 Telerik（Progress Software的一个部门）开发。它是 Fiddler Classic 的继承者，提供了一个更新更现代的用户界面和一些增强功能，使其能够跨平台工作，支持 Windows、Mac 和 Linux 系统。</p>
<p><strong>主要功能包括：</strong></p>
<ol>
<li><strong>流量捕获和分析</strong>：Fiddler Everywhere 可以捕获来自浏览器和其他软件的 HTTP 和 HTTPS 网络流量，允许用户查看和分析请求和响应的详细内容。这对于调试网站和应用程序的网络请求、查找性能瓶颈或监控API调用非常有用。</li>
<li><strong>修改和重放请求</strong>：用户可以修改网络请求和响应，然后重新发送它们。这对于测试网络服务和应用程序如何响应不同的数据或行为非常有用。</li>
<li><strong>模拟网络条件</strong>：Fiddler Everywhere 可以模拟不同的网络环境，包括低带宽、高延迟等，以测试应用程序在各种网络条件下的表现。</li>
<li><strong>HTTPS 解密</strong>：提供 HTTPS 流量解密功能，允许用户查看加密通信的细节。</li>
<li><strong>团队协作</strong>：Fiddler Everywhere 提供了一些团队协作功能，例如共享捕获的流量数据和会话给团队成员，便于团队合作和问题解决。</li>
<li><strong>扩展性和自定义</strong>：用户可以使用 Fiddler Everywhere 的 API 和各种插件来扩展其功能，适应特定的使用案例。</li>
</ol>
<p><strong>使用场景</strong>：</p>
<ul>
<li><strong>开发者</strong>：调试和优化网站或应用程序的网络请求。</li>
<li><strong>测试人员</strong>：模拟不同的网络环境和条件来测试应用的弹性和性能。</li>
<li><strong>系统管理员</strong>：监控和审计网络请求安全。</li>
</ul>
<p>Fiddler Everywhere 是一个强大的工具，适用于任何需要深入理解或调试网络通信的专业人士。</p>
<blockquote>
<p>官网下载地址：<a href="https://www.telerik.com/download/fiddler-everywhere" target="_blank" rel="noopener noreferrer">https://www.telerik.com/download/fiddler-everywhere</a></p>
<p>全平台原生的补丁：<br>
<a href="https://linux.do/uploads/short-url/n0gqGdlUiGMxbCtyimfpbaYroir.zip" target="_blank" rel="noopener noreferrer">FiddlerEverywherePatcher-linux-x64_2024-07-29.zip</a> (3.7 MB)<br>
<a href="https://linux.do/uploads/short-url/gp3EzStDR40YHVl3MHSUx99fs2S.zip" target="_blank" rel="noopener noreferrer">FiddlerEverywherePatcher-osx-x64_2024-07-29.zip</a> (3.7 MB)<br>
<a href="https://linux.do/uploads/short-url/jsdAKKozbVQpkvWOfl4Z8vdMSh1.zip" target="_blank" rel="noopener noreferrer">FiddlerEverywherePatcher-osx-arm64_2024-07-29.zip</a> (3.7 MB)<br>
<a href="https://linux.do/uploads/short-url/igzsRIo107hTqpOF5MignLaSznr.zip" target="_blank" rel="noopener noreferrer">FiddlerEverywherePatcher-win-x64_2024-07-29.zip</a> (3.2 MB)</p>
</blockquote>
<h2>安装 Fiddler Everywhere</h2>
<p>下载 <code>全平台原生的补丁 </code>:</p>
<ul>
<li>
<p>Windows：双击直接运行，输入Fiddler Everywhere安装路径就可以。</p>
</li>
<li>
<p>Linux/MacOS：去Windows虚拟机上运行，把Fiddler.WebUi.dll复制到当前补丁目录生成修补后的文件，再替换回原文件。</p>
</li>
</ul>
<h3>安装完成后界面</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730102050470.png" alt="image-20240730102050470" tabindex="0" loading="lazy"><figcaption>image-20240730102050470</figcaption></figure>
<h2>开启HTTPS抓包功能</h2>
<p>安装好Fiddler后，默认情况下无法抓取HTTPS数据。启用此功能，请执行以下步骤：</p>
<h3>1. 点击Fiddler右上角的设置图标，第一个选项就是HTTPS。</h3>
<h3>2. 点击信任Fiddler并勾选以下两个选项：</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730102309022.png" alt="image-20240730102309022" tabindex="0" loading="lazy"><figcaption>image-20240730102309022</figcaption></figure>
<h3>3.  导出证书到桌面</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730102802692.png" alt="image-20240730102802692" tabindex="0" loading="lazy"><figcaption>image-20240730102802692</figcaption></figure>
<h3>4. 打开浏览器，这里以歌浏览器为例。</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730103026062.png" alt="image-20240730103026062" tabindex="0" loading="lazy"><figcaption>image-20240730103026062</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730103216854.png" alt="image-20240730103216854" tabindex="0" loading="lazy"><figcaption>image-20240730103216854</figcaption></figure>
<blockquote>
<p>如图将刚导出到桌面的证书，导入到所使用的浏览器中。</p>
</blockquote>
<h2>抓取HTTP/HTTPS数据</h2>
<p>HTTPS是建立在HTTP之上的加密应用层协议。Fiddler能自动解密HTTPS传输的数据，将之还原为原始HTTP形式。</p>
<p>以站长自己的网站“仙人球博客”为例，打开一个页面后，在Fiddler左侧点击眼睛那个图标，页面会显示抓取到的HTTP/HTTPS请求信息，<code>一个页面可能会有很多个请求，可以在上方的搜索框中输入“cactusli.net”过滤你想要的请求</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730104436780.png" alt="image-20240730104436780" tabindex="0" loading="lazy"><figcaption>image-20240730104436780</figcaption></figure>
<blockquote>
<p>点击“Inspectors”后，可以看到HTTP请求和响应的详细格式。点击“raw”按钮，即可查看原始数据。请注意，原始请求数据是直接用于TCP套接字构成HTTP请求的，而响应数据通常会经过压缩以节省网络带宽，点击“解压缩”按钮后，可查看从TCP套接字读取的HTTP响应数据。</p>
</blockquote>
<p>再看一个抓取的 POST 接口的场景，可以很直观的看出接口的请求参数和相应数据：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730110125376.png" alt="image-20240730110125376" tabindex="0" loading="lazy"><figcaption>image-20240730110125376</figcaption></figure>
<h2>Fiddler 的工作原理</h2>
<p>Fiddler本质上是一个代理服务器。当浏览器访问页面时，它会将HTTP请求首先发送给Fiddler，Fiddler再将请求转发给浏览器服务器。当服务器返回数据时，Fiddler会获取这些数据，并将其传递给浏览器。因此，Fiddler可以清楚掌握浏览器与服务器之间交互的数据细节，帮助我们完成抓包工作。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730111857780.png" alt="image-20240730111857780" tabindex="0" loading="lazy"><figcaption>image-20240730111857780</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240730102050470.png" type="image/png"/>
    </item>
    <item>
      <title>Nas选购指南</title>
      <link>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Nas%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97.html</link>
      <guid>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Nas%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97.html</guid>
      <source url="https://cactusli.net/rss.xml">Nas选购指南</source>
      <description>废话 随着时代的改变，数据量指数上涨，网盘的各种限制，家庭Nas受到了很多人追捧，今天我们就讲一讲如何选购一台适合自己的Nas。 什么是Nas Nas本质就是一个电脑，集文件服务，媒体服务，各种应用。主流Nas系统底层都是基于linux进行修改的系统，能方便用户实现Nas所需要的各项功能，比较有名的Nas系统有群辉，威联通，Unraid等。 有了Nas...</description>
      <category>Nas</category>
      <pubDate>Fri, 05 Apr 2024 14:36:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>废话</h2>
<p>随着时代的改变，数据量指数上涨，网盘的各种限制，家庭Nas受到了很多人追捧，今天我们就讲一讲如何选购一台适合自己的Nas。</p>
<h2>什么是Nas</h2>
<p>Nas本质就是一个电脑，集文件服务，媒体服务，各种应用。主流Nas系统底层都是基于linux进行修改的系统，能方便用户实现Nas所需要的各项功能，比较有名的Nas系统有群辉，威联通，Unraid等。</p>
<h2>有了Nas能做什么？</h2>
<p><strong>基本功能</strong></p>
<ul>
<li>文件存储</li>
<li>照片库</li>
<li>影音库ip</li>
</ul>
<p><strong>进阶玩法</strong></p>
<ul>
<li>虚拟机</li>
<li>docker</li>
<li>软路由</li>
<li>小型服务器</li>
</ul>
<h2>成品Nas和DIY如何选？</h2>
<p>喜欢折腾，特别是有linux技能，建议DIY，享受折腾的乐趣。</p>
<p>diy的优势在于能根据需求选择合适的硬件配置，性价比更高，但遇到问题需要自行解决。</p>
<p>不喜欢折腾，有钱选群晖，追求稳定和性价比也可以选另一家老牌厂家威联通，但系统上手有些门槛，更高性价比选择还有极空间（推荐）/绿联等国产新星，但系统稳定性相对老牌差一些。</p>
<p>成品nas优势是有人维护，有技术支持，厂商提供外网访问服务，缺点就是贵，特别是4盘位以上机器，当然这是我的缺点，性价比机器通常采用j4125系列，n5000系列，n100系列这种工控机低功耗平台，无法满足高性能需求，但作为nas绰绰有余，而且这种平台cpu的pcie通道很少，没有扩展性。</p>
<h2>成品Nas避坑</h2>
<p>1.1.不买ARM平台，ARM平台通常是厂家为降低成本所采用，整体配置差，虽然新版威联通和群辉已经支持docker，受性能影响可玩性并不高，而且还有很多未尚未支持Docker的系统；</p>
<p>2.不买双盘位nas，raid模式受限，扩展性差，4盘位性价比更高；</p>
<p>3.不买“小众”品牌（如海康威视，联想等），系统体验很糟糕，不如diy。</p>
<h2>成品nas推荐</h2>
<p>追求稳定，不差钱首选群晖，虽然贵，不过要的就是他家的系统和服务，号称买软件送硬件。</p>
<p>推荐型号<a href="https://item.jd.com/100047343428.html?hideyl=1&amp;cu=true&amp;utm_source=kong&amp;utm_medium=jingfen&amp;utm_campaign=t_2011361521_100047343428&amp;utm_term=3b21fda505894435bce7f462b45c2260" target="_blank" rel="noopener noreferrer">DS423+ 16</a>，有核显支持硬件转码，缺点是使用上上代的j4125，网口还是双千兆，无法扩展万兆。</p>
<p>如果不需要核显转码，推荐<a href="https://item.jd.com/100041120060.html?hideyl=1&amp;cu=true&amp;utm_source=kong&amp;utm_medium=jingfen&amp;utm_campaign=t_2011361521_100041120060&amp;utm_term=98140a0966e247309529094328abbe4f" target="_blank" rel="noopener noreferrer">DS923+ 8</a>，和j4125半斤八两的r1600，但支持扩展万兆网卡（单独购买），看个人取舍了。</p>
<p>如果你喜欢折腾，可以考虑性价比更高的<a href="https://item.jd.com/100016638665.html?hideyl=1&amp;cu=true&amp;utm_source=kong&amp;utm_medium=jingfen&amp;utm_campaign=t_2011361521_100016638665&amp;utm_term=73f2244ddd404cbd91d1d1763f6dc446" target="_blank" rel="noopener noreferrer">威联通TS-464C 7</a>，老牌nas厂商，系统稳定性也不错，上手有门槛。</p>
<p>追求高性价比，首选<a href="https://item.jd.com/100071457020.html?hideyl=1&amp;cu=true&amp;utm_source=kong&amp;utm_medium=jingfen&amp;utm_campaign=t_2011361521_100071457020&amp;utm_term=d9d0d8e92aeb42b19b6470a8c6735401" target="_blank" rel="noopener noreferrer">极空间Z4Pro 25</a>，国产新星no1，虽然系统稳定性比不上群晖/威联通等老牌厂商，但易用性不错，上手门槛低。</p>
<p>如果你觉得极空间是“小牌厂商”，怕跑路，也可以考虑“配件大厂”<a href="https://item.jd.com/100096546777.html?hideyl=1&amp;cu=true&amp;utm_source=kong&amp;utm_medium=jingfen&amp;utm_campaign=t_2011361521_100096546777&amp;utm_term=54e986368af74055b6e58ab5c6157bd1" target="_blank" rel="noopener noreferrer">绿联DXP4800 12</a>，他家的新系统刚刚发布，功能不是很齐全，未来可期。</p>
<h2>DIY</h2>
<h3>硬件选择</h3>
<p>追求低功耗，性价比可以考虑n100主板，核显转码很强，七八百的价格，加上内存，电源大概1k+，机箱选一个喜欢的itx或者3d打印（海鲜市场）。自带双2.5G网口，6sata和双nvme。搭配16G或32G内存（支持），足以应对nas性能需求。因为n100的pcie通道只有9条，没有任何扩展性，无法安装万兆网卡，显卡，nvme只有x1速度，内存只有单通道。</p>
<p>如果追求高性能，扩展性，可以考虑常规的cpu和主板（itx或matx），推荐12100/12400（一定要核显），搭配nas机箱，既可以当nas，又可以当性能强进的家庭服务器，有pcie插槽可以插独立显卡炼丹，也可以插万兆网卡提升内网速度，也可以插扩展卡扩展盘位。</p>
<h3>系统选择</h3>
<p>diy nas系统有黑群晖，unraid，truenas，omv等很多系统可选，每个系统有自己的特点，适合不同的人，你也可以选择window作为nas系统。有兴趣的小伙伴可以上网了解，这里重点介绍两个系统，也是选择最多的两个方案。</p>
<p>1.黑群晖：半洗白后和白群晖比，主要缺少了QuickConnect功能（群辉提供的外网访问服务），当然也可以通过全洗白方式解锁。其他方面无差异，系统功能性齐全，易用性很好，对新手小白友好，适合不太喜欢折腾，开箱即用的。也是目前用的最多的nas系统，网上教程也很多，遇到问题也更容易解决。</p>
<p>2.unraid：正版需要付费，当然也有开心版（破解版），系统只提供磁盘阵列，文件基础功能，docker，虚拟机，应用商店等功能。各种功能需要使用docker来实现，适合喜欢自己折腾的人。新版也增加了zfs支持。</p>
<p>很多小伙伴还会选择Allinone的方案（一台机器集合软路由，nas等功能），通常使用Pve或Exsi等虚拟化平台作为底层系统，在虚拟机上创建如软路由，Nas等系统。当然有小伙伴会戏称为allinboom。</p>
<h2>硬盘选购</h2>
<p>玩Nas还会面临买硬盘的选择，首先<strong>千万不要买叠瓦盘</strong> ，即使不是nas用，也不推荐购买3.5寸的叠瓦盘。如果你不知道什么是叠瓦盘，那么请避开西数蓝盘，希捷酷鱼等家用盘。企业盘和Nas专用盘，监控盘等都是垂直盘。硬盘还分为空气盘和氦气盘，空气盘最大容量是10T，以上均为氦气盘。</p>
<p>空气盘推荐购买西数hc330和希捷7e10系列。氦气盘推荐西数hc550和银河x18。希捷酷狼等硬盘我个人不推荐，虽然带数据救援服务，但溢价我觉得不值。数据最重要的还是做好备份。企业盘噪音比家用盘大很多，希捷比西数噪音更小，但价格更高。</p>
<p>购买硬盘一定要选择正规店铺，如京东自营和天猫旗舰店，或者知名店铺（如坤心电子，南京梵多，华婉琴等），<strong>那些低于正常价很多的硬盘全都是二手翻新盘。不建议小白购买任何矿盘，二手盘等，</strong> 数据无价。</p>
<p>需要注意的是，企业盘发热比家用盘要高，一定要注意硬盘散热，通常Nas机箱都会有大尺寸风扇或多个风扇专门给硬盘散热。</p>
<h2>Q&amp;A</h2>
<p><strong>1.nas需要什么样的性能</strong></p>
<p>nas对性能和配置要求很低（truenas除外），即使j1900这样的cpu外加2g内存也能胜任，但如果你有更多需求，如docker，虚拟机等，那就得根据需求来了。</p>
<p><strong>2.外挂硬盘盒当nas</strong></p>
<p>有很多人问小主机或路由器能不能用硬盘盒外挂一块3.5存硬盘当nas。可以，但不推荐。震动，供电对机械硬盘影响很大，特别是企业盘对供电要求更高。硬盘盒导致硬盘挂掉的概率非常高。我不推荐使用任何硬盘盒挂载机械硬盘。</p>
<p><strong>3.全固态nas如何</strong></p>
<p>有钱任性，全固态nas兼顾速度，静音。但目前4t以上的固态硬盘价格都很高，性价比还是不如大容量的3.5寸机械盘。而且目前全固态nas机箱和成品nas可选择性太少。如果你没有大容量需求，确实可以使用小主机加小容量固态的方案。</p>
<p><strong>4.标压cpu会不会功耗很高</strong></p>
<p>相比n100等低功耗平台确实高一点，但nas耗电大头是硬盘，即使12100,12400这种标压u待机功耗下也就几十w（含主板功耗），一天差不了一度电，一度电不到6毛钱。所以不要纠结那点功耗，也不推荐带T的型号，因为同架构下待机功耗都一样。</p>
<p><strong>5.为什么不推荐千元以下便宜的nas</strong></p>
<p>这个价位的成品Nas基本都是Arm架构，不支持Docker，也就没有任何可玩性，还是双盘位，没有任何扩展性。</p>
<p>如果是diy，那可选性也很低，只能淘一些上古世纪的硬件，如蜗牛机箱+j1900这种组合。也选不到好电源。电源对硬盘非常重要，而且硬盘价值很高，千万不要省电源钱。</p>
<p><strong>6.什么是白、黑群晖，半洗白，全洗白</strong></p>
<p>白群指的是购买了群辉Nas内置了正版的群辉系统。黑群晖是你自己diy的nas，然后自己安装群辉的系统，相当于盗版。</p>
<p>安装完群辉系统后是无法正常使用群辉部分服务的，如QuickConnect和DS相关套件，此时通过半洗白（使用群辉产品的序列号）可以解锁DS相关套件。如果你有群辉产品的SN，MAC等可以全洗白，解锁群辉全部正版功能。</p>
<p><strong>7.10代以上支持黑群晖吗</strong></p>
<p>最新的rr引导已经支持</p>
]]></content:encoded>
    </item>
    <item>
      <title>DDD 工程 Dubbo 使用教程及原理分析</title>
      <link>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20Dubbo%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html</link>
      <guid>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20Dubbo%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">DDD 工程 Dubbo 使用教程及原理分析</source>
      <description>一、Dubbo 能干什么？ 随着互联网场景的扩展，面对的用户规模和体量不断增加，系统也需进行相应的拆分设计和实施。原本单一的系统现已演变为多个微服务。例如，电商系统过去可能只需在一个工程中开发，而现在则需要将用户、支付、商品、配送、活动和风控等模块分离出来。那么，这些模块拆分后，应如何实现高效的通信呢？ image-20240422161208873i...</description>
      <category>DDD 技术体系</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、Dubbo 能干什么？</h2>
<p>随着互联网场景的扩展，面对的用户规模和体量不断增加，系统也需进行相应的拆分设计和实施。原本单一的系统现已演变为多个微服务。例如，电商系统过去可能只需在一个工程中开发，而现在则需要将用户、支付、商品、配送、活动和风控等模块分离出来。那么，这些模块拆分后，应如何实现高效的通信呢？</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240422161208873.png" alt="image-20240422161208873" tabindex="0" loading="lazy"><figcaption>image-20240422161208873</figcaption></figure>
<p>关于通信，我们引入了RPC框架，而Dubbo是其中的一种实现方式。选择Dubbo的主要原因是为了提高通信效率。Dubbo采用Socket进行底层通信，而不是HTTP，因此其通信性能更优。同时，Dubbo具备分布式高可用设计，当部署了交易服务的某组实例发生故障时，这些实例会从注册中心被摘除，随后流量将转移到其他服务上。这样的设计确保了服务的稳定性和可靠性。</p>
<h2>二、该如何使用</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240422161924427.png" alt="image-20240422161924427" tabindex="0" loading="lazy"><figcaption>image-20240422161924427</figcaption></figure>
<p>Dubbo的使用涉及两个方面：接口的提供方和接口的调用方。接口提供方需要提供接口的描述性信息，供调用方使用。这些信息包括接口名称、接口的输入参数和输出参数。只有当调用方获取到这些信息后，才能基于这些接口信息创建一个代理，通过代理类使用Socket完成信息的交互。</p>
<p>因此，虽然表面上使用RPC接口看似与使用HTTP没有太大区别，只是增加了POM配置和注解配置的步骤，但实际上RPC使用了你的Jar文件作为代理操作的必要参数。这种方式实际上是通过代理来实现的。本文也将进一步介绍这种代理是如何实现的。</p>
<h2>三、使用的案例</h2>
<p>基本条件包括：</p>
<ul>
<li>JDK 1.8</li>
<li>Maven 3.x - 只要是支持JDK 1.8的版本即可</li>
<li>Dubbo 3.1.4 - 在POM文件中已经配置好，与2.x版本主要的区别在于一些注解的使用</li>
<li>Zookeeper 3.4.x - 如果你是按照本文的直连模式进行测试，那么可以不安装Zookeeper</li>
</ul>
<h3>1. 接口提供方</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240422170553163.png" alt="image-20240422170553163" tabindex="0" loading="lazy"><figcaption>image-20240422170553163</figcaption></figure>
<h4>1.1 接口定义</h4>
<p><strong>源码</strong>：<code>cn.cactusli.dev.tech.dubbo.api.IUserService</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> IUserService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    Response</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">UserResDTO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> queryUserInfo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UserReqDTO</span><span style="color:#E06C75;font-style:italic"> reqDTO</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>接口定义看似简单，但隐藏了一个关键的要求：所有的Dubbo接口及其出入参，默认都必须实现Serializable接口。这意味着UserReqDTO、UserResDTO、Response这三个类都需要继承Serializable序列化接口。这一设计是为了确保这些对象在网络间传输时能够被正确地序列化和反序列化。</p>
</blockquote>
<h4>1.2 接口实现</h4>
<p><strong>源码</strong>：<code>cn.cactusli.dev.tech.dubbo.trigger.rpc.UserService</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">DubboService</span><span style="color:#E06C75">(</span><span style="color:#D19A66">version</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "1.0.0"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> UserService</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> IUserService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Response</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">UserResDTO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> queryUserInfo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UserReqDTO</span><span style="color:#E06C75;font-style:italic"> reqDTO</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"查询用户信息 userId: {} reqStr: {}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">reqDTO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUserId</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(reqDTO));</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 1. 模拟查询【你可以从数据库或者Redis缓存获取数据】</span></span>
<span class="line"><span style="color:#E5C07B">            UserResDTO</span><span style="color:#E06C75"> resDTO</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> UserResDTO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">userId</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">reqDTO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUserId</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">userName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"仙人球"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">userAge</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">18</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 2. 返回结果</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> Response.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">UserResDTO</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">code</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Constants</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ResponseCode</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SUCCESS</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getCode</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Constants</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ResponseCode</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SUCCESS</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInfo</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">data</span><span style="color:#ABB2BF">(resDTO).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"查询用户信息失败 userId: {} reqStr: {}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">reqDTO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUserId</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(reqDTO), e);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> Response.</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">UserResDTO</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">code</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Constants</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ResponseCode</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UN_ERROR</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getCode</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Constants</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ResponseCode</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UN_ERROR</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInfo</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在Dubbo中，实现接口需要由Dubbo本身来管理，因此Dubbo提供了<code>@DubboService</code>注解来标识服务。这与Spring的<code>@Service</code>注解容易混淆，尤其是在早期的Dubbo版本2.7.*中，Dubbo也使用了<code>@Service</code>注解，这容易导致开发者误用Spring的<code>@Service</code>。这种小错误可能会让你调试半天才发现问题所在。</p>
</blockquote>
<h4>1.3 工程配置</h4>
<p><strong>application.yml</strong></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#E06C75">dubbo</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">  application</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">    name</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> lxf</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">dev</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">tech</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">dubbo</span></span>
<span class="line"><span style="color:#E06C75">    version</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 1.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span></span>
<span class="line"><span style="color:#E06C75">  registry</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">    address</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> zookeeper</span><span style="color:#C678DD">:</span><span style="color:#7F848E;font-style:italic">//127.0.0.1:2181 # N/A - 无zookeeper可配置 N/A 走直连模式测试</span></span>
<span class="line"><span style="color:#E06C75">  protocol</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">    name</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> dubbo</span></span>
<span class="line"><span style="color:#E06C75">    port</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 20881</span></span>
<span class="line"><span style="color:#E06C75">  scan</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">    base</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">packages</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> cn</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cactusli</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">dev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">tech</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">dubbo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">api</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Dubbo中，<code>base-packages</code>用于指定扫描Dubbo服务接口的入口位置。你只需要配置好这个入口，Dubbo框架会自动找到对应的实现类。但是，要注意，这些服务接口和实现类必须能被Spring框架扫描到并管理，这就要求你的pom文件中必须直接或间接地引入定义了Dubbo服务的模块。</p>
<p>关于Spring应用开发，它讲究的是“约定大于配置”。这意味着你的Application类的包名应该足够广泛，以覆盖到其他所有相关的包名。例如，如果你将Application配置在了<code>cn.cactusli.dev.tech.dubbo.a.b.c.d.*</code>，那么它默认可能就扫描不到<code>cn.cactusli.dev.tech.dubbo.api</code>这个包。这种包扫描的问题可能会导致你花费大量时间去调试。</p>
<p>另外，关于Dubbo的连接配置，如果你设置了<code>address</code>为<code>N/A</code>，这表示不通过任何注册中心进行连接，仅用于本地直连测试。而如果你配置了如<code>zookeeper://127.0.0.1:2181</code>这样的地址，那么你需要先安装Zookeeper。即使配置了使用注册中心，你也可以进行直连测试，这对于开发和测试阶段非常有用。</p>
<h4>1.4 应用构建</h4>
<p>在Maven中，<code>install</code>命令的作用是将项目的打包后的jar包安装到本地Maven仓库中。这样做的目的是让同一个本地Maven配置的其他项目能够引用这个jar包。当你执行<code>install</code>命令后，生成的jar包就会被保存在你的本地Maven仓库里，这使得其他依赖于此jar包的项目可以方便地进行构建和开发。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240422172905704.png" alt="image-20240422172905704" tabindex="0" loading="lazy"><figcaption>image-20240422172905704</figcaption></figure>
<h3>2. 接口使用方</h3>
<h4>2.1 POM 引入</h4>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#56B6C2">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B">cn</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cactusli</span><span style="color:#56B6C2">&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#56B6C2">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">lxf</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">dev</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">tech</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">dubbo</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">api</span><span style="color:#56B6C2">&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#56B6C2">    &lt;</span><span style="color:#E06C75">version</span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66">1.0</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">SNAPSHOT</span><span style="color:#56B6C2">&lt;/</span><span style="color:#E06C75">version</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#56B6C2">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#56B6C2">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>POM 的配置，就是把 Jar 包给引用进来。因为 Dubbo 需要根据这个接口，做一个代理操作。<strong>不引入，你代码就爆红啦！爆红啦！🌶</strong></p>
</blockquote>
<h4>2.2 消费配置</h4>
<p><strong>源码</strong>：<code>application.yml</code></p>
<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">dubbo</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">  application</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">lxf-dev-tech-dubbo</span></span>
<span class="line"><span style="color:#E06C75">    version</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">1.0.0</span></span>
<span class="line"><span style="color:#E06C75">  registry</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">     address</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">zookeeper://127.0.0.1:2181</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">#    address: N/A</span></span>
<span class="line"><span style="color:#E06C75">  protocol</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">dubbo</span></span>
<span class="line"><span style="color:#E06C75">    port</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">20881</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>配置了 zookeeper 你就用第一个，代码中对应 <code>@DubboReference(interfaceClass = IUserService.class, version = "1.0.0")</code></p>
<p>配置了 N/A 你就用第二个，代码中必须指定直连。<code>@DubboReference(interfaceClass = IUserService.class, url = "dubbo://127.0.0.1:20881", version = "1.0.0")</code></p>
</blockquote>
<h4>2.3 代码配置</h4>
<p><strong>源码</strong>：<code>cn.cactusli.dev.tech.dubbo.consumer.test.ApiTest</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 直连模式；@DubboReference(interfaceClass = IUserService.class, url = "dubbo://127.0.0.1:20881", version = "1.0.0")</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">DubboReference</span><span style="color:#E06C75">(</span><span style="color:#D19A66">interfaceClass</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> IUserService</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> version</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "1.0.0"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> IUserService</span><span style="color:#E06C75"> userService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test_userService</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    UserReqDTO</span><span style="color:#E06C75"> reqDTO </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> UserReqDTO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">userId</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"10001"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    Response</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">UserResDTO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> resDTO </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> userService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">queryUserInfo</span><span style="color:#ABB2BF">(reqDTO);</span></span>
<span class="line"><span style="color:#E5C07B">    log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"测试结果 req: {} res: {}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(reqDTO), </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(resDTO));</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">2024</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">22</span><span style="color:#D19A66"> 17</span><span style="color:#C678DD">:</span><span style="color:#D19A66">58</span><span style="color:#C678DD">:</span><span style="color:#D19A66">44.523</span><span style="color:#E06C75">  INFO </span><span style="color:#D19A66">21596</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240422161208873.png" type="image/png"/>
    </item>
    <item>
      <title>DDD 工程 Mybatis</title>
      <link>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20Mybatis.html</link>
      <guid>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20Mybatis.html</guid>
      <source url="https://cactusli.net/rss.xml">DDD 工程 Mybatis</source>
      <description>一、案例背景 为了清晰明了地展示MyBatis的常用功能,我们设定了一个公司雇员薪酬管理的开发场景。 image-20240418180519158image-20240418180519158 首先，雇员员工和对应的薪资待遇，是一个1v1的关系。 之后，薪资表与调薪表，是一个1vn的关系。每次晋升、普调，都会有一条对应的调薪记录。 最后，有了这样3个...</description>
      <category>DDD 技术体系</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、案例背景</h2>
<p>为了清晰明了地展示MyBatis的常用功能,我们设定了一个公司雇员薪酬管理的开发场景。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240418180519158.png" alt="image-20240418180519158" tabindex="0" loading="lazy"><figcaption>image-20240418180519158</figcaption></figure>
<ul>
<li>首先，雇员员工和对应的薪资待遇，是一个1v1的关系。</li>
<li>之后，薪资表与调薪表，是一个1vn的关系。每次晋升、普调，都会有一条对应的调薪记录。</li>
<li>最后，有了这样3个表，我们就可以很好的完成，员工的插入、批量插入，和事务操作调薪。</li>
</ul>
<h2>二、领域模型</h2>
<p><strong>模型定义</strong>：<a href="https://bugstack.cn/md/road-map/ddd.html" target="_blank" rel="noopener noreferrer">https://bugstack.cn/md/road-map/ddd.html (opens new window)</a>- 你可以先参 <a href="https://bugstack.cn/md/road-map/ddd.html" target="_blank" rel="noopener noreferrer">DDD (opens new window)</a>篇，这样可以更好的理解模型概念和设计原则。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240419112246984.png" alt="image-20240419112246984" tabindex="0" loading="lazy"><figcaption>image-20240419112246984</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240419113046073.png" alt="image-20240419113046073" tabindex="0" loading="lazy"><figcaption>image-20240419113046073</figcaption></figure>
<p>此场景的业务用于对指定的用户进行<strong>晋升加薪调幅</strong>，但因为加薪会需要操作3个表，包括；雇员表 - 修改个人Title、薪资表 - 修改薪酬、调薪记录表 - 每一次加薪都写一条记录。</p>
<p>此场景用于为指定用户进行晋升加薪调整。加薪操作需涉及以下3个表:</p>
<ol>
<li><strong>雇员表</strong>:修改员工的职位(Title)信息</li>
<li><strong>薪资表</strong>:修改员工的薪酬数额</li>
<li><strong>调薪记录表</strong>:为每次加薪操作添加一条调薪记录</li>
</ol>
<h3>1. model</h3>
<h4>1.1 值对象</h4>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> enum</span><span style="color:#E5C07B"> EmployeePostVO</span><span style="color:#E06C75"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66">    T1</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-1"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "初级工程师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T2</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-2"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "初级工程师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T3</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-3"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "中级工程师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T4</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-4"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "中级工程师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T5</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-5"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "高级工程师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T6</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-6"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "高级工程师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T7</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-7"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "架构师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#D19A66">    T8</span><span style="color:#E06C75">(</span><span style="color:#98C379">"T-8"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "架构师"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> code</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> desc</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// 省略部分</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>当一个实体对象中的一个值，是有多个范围时候，则需要定义出值对象。由于此类的值对象更贴近于当前的场景业务，所以一般不会被定义为共用的枚举。如此此类值范围，都会被定义为值对象。</p>
</blockquote>
<h4>1.2 实体对象</h4>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Builder</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AllArgsConstructor</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> EmployeeEntity</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 雇员级别 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> EmployeePostVO</span><span style="color:#E06C75"> employeeLevel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 雇员岗位Title */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> EmployeePostVO</span><span style="color:#E06C75"> employeeTitle</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Builder</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AllArgsConstructor</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> EmployeeSalaryAdjustEntity</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 总额调薪 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> BigDecimal</span><span style="color:#E06C75"> adjustTotalAmount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 基础调薪 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> BigDecimal</span><span style="color:#E06C75"> adjustBaseAmount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 绩效调薪 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> BigDecimal</span><span style="color:#E06C75"> adjustMeritAmount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>实体对象是对数据库对象的抽象，大多数时候是 1:1 的关系结构，在一些复杂的模型场景中会是1:n的结构。</p>
</blockquote>
<h4>1.3 聚合对象</h4>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Builder</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">AllArgsConstructor</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AdjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 雇员编号 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> employeeNumber</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 调薪单号 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> orderId</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 雇员实体 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> EmployeeEntity</span><span style="color:#E06C75"> employeeEntity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** 雇员实体 */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> EmployeeSalaryAdjustEntity</span><span style="color:#E06C75"> employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>聚合对象是对实体对象和值对象的封装，代表着一类业务的聚合。通常是作为 service 服务层中入参出现。</p>
</blockquote>
<h3>2. repository</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> ISalaryAdjustRepository</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#61AFEF"> adjustSalary</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75;font-style:italic"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在DDD中，仓储的设计采用了依赖倒置原则，由领域层定义接口，然后由依赖领域包的基础设施层来实现这些接口。</p>
<p>依赖倒置还自然地实现了PO（数据库持久化对象）的隔离，防止它们被外部直接使用。这种设计精巧地确保了结构的严谨性，避免了对象的滥用。</p>
</blockquote>
<h3>3. service</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> ISalaryAdjustApplyService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#61AFEF"> execSalaryAdjust</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75;font-style:italic"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在简单场景下，确实不需要额外的设计模式。但对于复杂场景，设计模式的应用是必不可少的，以避免将所有代码都集中在如SalaryAdjustApplyService的实现类中，这样做会使得代码难以维护。同时，不应仅将聚合对象视为充血模型；实际上，充血结构应该涵盖领域内的每一个领域包，将状态和行为视为一个统一的整体。通过这样的模型结构设计，你可以更好地拆分业务对象并实现领域功能。</p>
</blockquote>
<h2>三、配置文件</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240419170826012.png" alt="image-20240419170826012" tabindex="0" loading="lazy"><figcaption>image-20240419170826012</figcaption></figure>
<blockquote>
<p>工程中关于 MyBatis 的使用，在 lxf-dev-tech-app 下进行统一配置。因为所有配置信息都放到一起，比较方便管理，也利于线上上线后，提取配置文件。</p>
</blockquote>
<h2>四、功能实现</h2>
<p>接下来，我们将介绍一些 MyBatis 的功能。您可以结合 DDD 的理念来理解这些功能的实现位置，这不仅有助于学习 MyBatis，还能帮助您掌握 DDD 的设计理念。</p>
<h3>1. 插入&amp;批量插入</h3>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.infrastructure.dao.IEmployeeDAO</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Mapper</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> IEmployeeDAO</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> insert</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeePO</span><span style="color:#E06C75;font-style:italic"> employee</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> insertList</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">EmployeePO</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">list</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> update</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeePO</span><span style="color:#E06C75;font-style:italic"> employeePO</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    EmployeePO</span><span style="color:#61AFEF"> queryEmployeeByEmployNumber</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> employNumber</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>xml</strong>：<code>employee_mapper.xml</code></p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">insert</span><span style="color:#D19A66"> id</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"insert"</span><span style="color:#D19A66"> parameterType</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"cn.bugstack.xfg.dev.tech.infrastructure.po.EmployeePO"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    INSERT INTO employee(employee_number, employee_name, employee_level, employee_title, create_time, update_time)</span></span>
<span class="line"><span style="color:#ABB2BF">    VALUES(#{employeeNumber}, #{employeeName}, #{employeeLevel}, #{employeeTitle}, now(), now())</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">insert</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">insert</span><span style="color:#D19A66"> id</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"insertList"</span><span style="color:#D19A66"> parameterType</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"java.util.List"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    INSERT INTO employee(employee_number, employee_name, employee_level, employee_title, create_time, update_time)</span></span>
<span class="line"><span style="color:#ABB2BF">    VALUES</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">foreach</span><span style="color:#D19A66"> collection</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"list"</span><span style="color:#D19A66"> item</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"item"</span><span style="color:#D19A66"> separator</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">","</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        (#{item.employeeNumber}, #{item.employeeName}, #{item.employeeLevel}, #{item.employeeTitle}, now(), now())</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">foreach</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">insert</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置文件的方式确实更便于维护，同时您也可以尝试使用 MyBatis 提供的注解方式来完成数据操作。这两种方式各有优势，您可以根据项目的具体需求来选择适合的方法。</p>
<h3>2. 事务&amp;注解编程</h3>
<p>Spring 提供的事务分为注解事务和编程事务，其中编程事务可以实现更细粒度的控制。</p>
<p>在 Spring Boot 中，事务管理的隔离级别可以通过 <code>@Transactional</code> 注解的 <code>isolation</code> 属性进行配置。常见的事务隔离级别包括：</p>
<ul>
<li><strong>DEFAULT</strong>：使用底层数据库的默认隔离级别。例如，MySQL 默认为 REPEATABLE READ，Oracle 默认为 READ COMMITTED。</li>
<li><strong>READ_UNCOMMITTED</strong>：最低的隔离级别，允许读取未提交的数据变更，可能会导致脏读、不可重复读和幻读问题。</li>
<li><strong>READ_COMMITTED</strong>：允许读取已经提交的数据变更，可以避免脏读问题，但可能会出现不可重复读和幻读问题。</li>
<li><strong>REPEATABLE_READ</strong>：保证同一事务中多次读取同一数据时，结果始终一致，可以避免脏读和不可重复读问题，但可能会出现幻读问题。</li>
<li><strong>SERIALIZABLE</strong>：最高的隔离级别，可以避免脏读、不可重复读和幻读问题，但会影响并发性能。</li>
</ul>
<p>Spring Boot 默认使用 DEFAULT 隔离级别。除非有特殊需求，通常建议使用默认隔离级别。</p>
<p>事务的传播行为也可以通过 <code>@Transactional</code> 注解的 <code>propagation</code> 属性进行配置。常用的传播行为包括：</p>
<ul>
<li><strong>Propagation.REQUIRED</strong>：默认的传播行为，如果当前存在事务，则加入该事务，否则新建一个事务。</li>
<li><strong>Propagation.SUPPORTS</strong>：如果当前存在事务，则加入该事务，否则以非事务的方式执行。</li>
<li><strong>Propagation.MANDATORY</strong>：如果当前存在事务，则加入该事务，否则抛出异常。</li>
<li><strong>Propagation.REQUIRES_NEW</strong>：无论当前是否存在事务，都会新建一个事务，如果当前存在事务，则将当前事务挂起。</li>
<li><strong>Propagation.NOT_SUPPORTED</strong>：以非事务的方式执行操作，如果当前存在事务，则将当前事务挂起。</li>
<li><strong>Propagation.NEVER</strong>：以非事务的方式执行操作，如果当前存在事务，则抛出异常。</li>
<li><strong>Propagation.NESTED</strong>：如果当前存在事务，则在该事务的嵌套事务中执行，否则新建一个事务。嵌套事务是独立于外部事务的，但如果外部事务回滚，则嵌套事务也会回滚。</li>
</ul>
<p><code>@Transactional</code> 注解还可以配置其他属性，例如隔离级别、超时时间、只读等，以满足不同的业务需求。</p>
<h4>2.1 注解事务</h4>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.infrastructure.repository.SalaryAdjustRepository</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Transactional</span><span style="color:#E06C75">(</span><span style="color:#D19A66">rollbackFor</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> timeout</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 350</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> propagation</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Propagation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">REQUIRED</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> isolation</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Isolation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DEFAULT</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> adjustSalary</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75"> adjustSalaryApplyOrderAggregate) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> employeeNumber </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeNumber</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> orderId </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOrderId</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    EmployeeEntity</span><span style="color:#E06C75"> employeeEntity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeEntity</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    EmployeeSalaryAdjustEntity</span><span style="color:#E06C75"> employeeSalaryAdjustEntity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeSalaryAdjustEntity</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    EmployeePO</span><span style="color:#E06C75"> employeePO </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> EmployeePO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(employeeNumber)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeLevel</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeLevel</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getCode</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeTitle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeTitle</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getDesc</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 更新岗位</span></span>
<span class="line"><span style="color:#E5C07B">    employeeDAO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">update</span><span style="color:#ABB2BF">(employeePO);</span></span>
<span class="line"><span style="color:#E5C07B">    EmployeeSalaryPO</span><span style="color:#E06C75"> employeeSalaryPO </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> EmployeeSalaryPO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(employeeNumber)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">salaryTotalAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAdjustTotalAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">salaryMeritAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAdjustMeritAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">salaryBaseAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAdjustBaseAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 更新薪酬</span></span>
<span class="line"><span style="color:#E5C07B">    employeeSalaryDAO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">update</span><span style="color:#ABB2BF">(employeeSalaryPO);</span></span>
<span class="line"><span style="color:#E5C07B">    EmployeeSalaryAdjustPO</span><span style="color:#E06C75"> employeeSalaryAdjustPO </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> EmployeeSalaryAdjustPO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(employeeNumber)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">adjustOrderId</span><span style="color:#ABB2BF">(orderId)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">adjustTotalAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAdjustTotalAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">adjustBaseAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAdjustMeritAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">adjustMeritAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAdjustBaseAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入流水</span></span>
<span class="line"><span style="color:#E5C07B">    employeeSalaryAdjustDAO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insert</span><span style="color:#ABB2BF">(employeeSalaryAdjustPO);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> orderId</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>这个事务主要处理的是调整薪资的操作，具体实现则是放在仓储层。在实现时，需要特别注意事务注解的配置，确保事务的正确性和一致性。</p>
</blockquote>
<h4>2.2 编程事务</h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240419172347940.png" alt="image-20240419172347940" tabindex="0" loading="lazy"><figcaption>image-20240419172347940</figcaption></figure>
<blockquote>
<p>使用编程事务，需要在这里创建出一个事务模板，当然你不创建也可以使用。只不过这样统一的配置会更加方便。</p>
</blockquote>
<h5>2.2.2 事务使用</h5>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> TransactionTemplate</span><span style="color:#E06C75"> transactionTemplate</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> insertEmployeeInfo</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">EmployeeInfoEntity</span><span style="color:#E06C75"> employeeInfoEntity) {</span></span>
<span class="line"><span style="color:#E5C07B">    transactionTemplate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execute</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> TransactionCallbackWithoutResult</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        protected</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doInTransactionWithoutResult</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TransactionStatus</span><span style="color:#E06C75;font-style:italic"> status</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                EmployeePO</span><span style="color:#E06C75"> employeePO</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> EmployeePO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeNumber</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">employeeName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeName</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">employeeLevel</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeLevel</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">employeeTitle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeTitle</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                employeeDAO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insert</span><span style="color:#ABB2BF">(employeePO);</span></span>
<span class="line"><span style="color:#E5C07B">                EmployeeSalaryPO</span><span style="color:#E06C75"> employeeSalaryPO</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> EmployeeSalaryPO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEmployeeNumber</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">salaryTotalAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalaryTotalAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">salaryMeritAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalaryMeritAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">salaryBaseAmount</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">employeeInfoEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalaryBaseAmount</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                employeeSalaryDAO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insert</span><span style="color:#ABB2BF">(employeeSalaryPO);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                status</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setRollbackOnly</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>之后，您可以选择手动处理事务，这种方式可以更细致地控制事务的每一个环节。通过手动处理，您可以根据操作的返回结果来决定是否需要回滚事务，而不是仅在发生异常时自动回滚。这样做增加了灵活性，允许根据具体情况做出最合适的决策</p>
</blockquote>
<h3>3. 插件&amp;数据加密</h3>
<p>在使用 MyBatis 时，插件开发是一个常见的应用场景，尤其是在进行数据的加解密、路由、日志记录等方面。现在，我将指导你如何实现一个针对指定字段的加解密处理插件，以确保敏感信息如雇员的姓名、薪资和级别不被有心人士盗取。</p>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.plugin.FieldEncryptionAndDecryptionMybatisPlugin</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Intercepts</span><span style="color:#E06C75">({</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Signature</span><span style="color:#E06C75">(</span><span style="color:#D19A66">type</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Executor</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> method</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "update"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> args</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#E5C07B">MappedStatement</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Signature</span><span style="color:#E06C75">(</span><span style="color:#D19A66">type</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Executor</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> method</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "query"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> args</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> {</span><span style="color:#E5C07B">MappedStatement</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> RowBounds</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ResultHandler</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#E06C75">})</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FieldEncryptionAndDecryptionMybatisPlugin</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Interceptor</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 密钥，必须是16位</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> KEY </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "1898794876567654"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 偏移量，必须是16位</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> IV </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "1233214566547891"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> intercept</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Invocation</span><span style="color:#E06C75;font-style:italic"> invocation</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Throwable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">args</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> invocation</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getArgs</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        MappedStatement</span><span style="color:#E06C75"> mappedStatement</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (MappedStatement) args[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> parameter</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> args[</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> sqlId</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> mappedStatement</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (parameter </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">sqlId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"insert"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">||</span><span style="color:#E5C07B"> sqlId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"update"</span><span style="color:#ABB2BF">)) ) {</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> columnName</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "employeeName"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (parameter </span><span style="color:#C678DD">instanceof</span><span style="color:#ABB2BF"> Map) {</span></span>
<span class="line"><span style="color:#E5C07B">                List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">parameterList</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Object</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">) ((</span><span style="color:#E5C07B">Map</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">) parameter).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"list"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> obj</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> parameterList) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (</span><span style="color:#61AFEF">hasField</span><span style="color:#ABB2BF">(obj, columnName)) {</span></span>
<span class="line"><span style="color:#E5C07B">                        String</span><span style="color:#E06C75"> fieldValue</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> BeanUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProperty</span><span style="color:#ABB2BF">(obj, columnName);</span></span>
<span class="line"><span style="color:#E5C07B">                        String</span><span style="color:#E06C75"> encryptedValue</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> encrypt</span><span style="color:#ABB2BF">(fieldValue);</span></span>
<span class="line"><span style="color:#E5C07B">                        BeanUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setProperty</span><span style="color:#ABB2BF">(obj, columnName, encryptedValue);</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (</span><span style="color:#61AFEF">hasField</span><span style="color:#ABB2BF">(parameter, columnName)) {</span></span>
<span class="line"><span style="color:#E5C07B">                    String</span><span style="color:#E06C75"> fieldValue</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> BeanUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProperty</span><span style="color:#ABB2BF">(parameter, columnName);</span></span>
<span class="line"><span style="color:#E5C07B">                    String</span><span style="color:#E06C75"> encryptedValue</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> encrypt</span><span style="color:#ABB2BF">(fieldValue);</span></span>
<span class="line"><span style="color:#E5C07B">                    BeanUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setProperty</span><span style="color:#ABB2BF">(parameter, columnName, encryptedValue);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> result</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> invocation</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">proceed</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (result </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> sqlId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"query"</span><span style="color:#ABB2BF">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 查询操作，解密</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> columnName</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "employeeName"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (result </span><span style="color:#C678DD">instanceof</span><span style="color:#ABB2BF"> List) {</span></span>
<span class="line"><span style="color:#E5C07B">                List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">resultList</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">List</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Object</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">) result;</span></span>
<span class="line"><span style="color:#C678DD">                for</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> obj</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> resultList) {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">hasField</span><span style="color:#ABB2BF">(obj, columnName)) </span><span style="color:#C678DD">continue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    String</span><span style="color:#E06C75"> fieldValue</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> BeanUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getProperty</span><span style="color:#ABB2BF">(obj, columnName);</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">StringUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isBlank</span><span style="color:#ABB2BF">(fieldValue)) </span><span style="color:#C678DD">continue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    String</span><span style="color:#E06C75"> decryptedValue</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> decrypt</span><span style="color:#ABB2BF">(fieldValue);</span></span>
<span class="line"><span style="color:#E5C07B">                    BeanUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setProperty</span><span style="color:#ABB2BF">(obj, columnName, decryptedValue);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> encrypt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> content</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Cipher</span><span style="color:#E06C75"> cipher</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Cipher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"AES/CBC/PKCS5Padding"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">raw</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> KEY</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        SecretKeySpec</span><span style="color:#E06C75"> secretKeySpec</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SecretKeySpec</span><span style="color:#ABB2BF">(raw, </span><span style="color:#98C379">"AES"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        IvParameterSpec</span><span style="color:#E06C75"> ivParameterSpec</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IvParameterSpec</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">IV</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        cipher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">init</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Cipher</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ENCRYPT_MODE</span><span style="color:#ABB2BF">, secretKeySpec, ivParameterSpec);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">encrypted</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cipher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFinal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">content</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(encrypted);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * AES解密</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> content</span><span style="color:#7F848E;font-style:italic"> 密文</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> 明文</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> Exception</span><span style="color:#7F848E;font-style:italic"> 异常</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> decrypt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> content</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Cipher</span><span style="color:#E06C75"> cipher</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Cipher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"AES/CBC/PKCS5Padding"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">raw</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> KEY</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        SecretKeySpec</span><span style="color:#E06C75"> secretKeySpec</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SecretKeySpec</span><span style="color:#ABB2BF">(raw, </span><span style="color:#98C379">"AES"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        IvParameterSpec</span><span style="color:#E06C75"> ivParameterSpec</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IvParameterSpec</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">IV</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        cipher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">init</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Cipher</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DECRYPT_MODE</span><span style="color:#ABB2BF">, secretKeySpec, ivParameterSpec);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">encrypted</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDecoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">decode</span><span style="color:#ABB2BF">(content);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">original</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cipher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFinal</span><span style="color:#ABB2BF">(encrypted);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(original);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> hasField</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> obj</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> fieldName</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">clazz</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> obj</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (clazz </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Field</span><span style="color:#E06C75"> field</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> clazz</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(fieldName);</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">NoSuchFieldException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                clazz </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> clazz</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSuperclass</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>代码定义了一个MyBatis插件，用于在数据库操作中自动加密和解密特定字段。插件通过拦截MyBatis的执行器（Executor）方法来实现这一功能。</p>
<p><strong>拦截器配置</strong>:</p>
<ul>
<li>
<p>使用</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Intercepts</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>注解定义了两个拦截点：</p>
<ul>
<li><code>update</code>方法，用于处理插入（insert）和更新（update）操作。</li>
<li><code>query</code>方法，用于处理查询（query）操作。</li>
</ul>
</li>
<li>
<p>每个拦截点都指定了要拦截的方法名和参数类型。</p>
</li>
</ul>
<p><strong>加密和解密逻辑</strong>:</p>
<ul>
<li>**密钥（KEY）<strong>和</strong>偏移量（IV）**都被硬编码在代码中，用于AES加密算法的配置。</li>
<li><code>encrypt</code>方法使用AES/CBC/PKCS5Padding模式进行加密。</li>
<li><code>decrypt</code>方法使用相同的模式进行解密。</li>
<li>加解密过程中，使用<code>SecretKeySpec</code>和<code>IvParameterSpec</code>来配置Cipher对象。</li>
</ul>
<p><strong>拦截方法实现</strong>:</p>
<ul>
<li><code>intercept</code>方法是插件的核心，它根据拦截到的SQL操作类型（插入/更新或查询）来处理数据。</li>
<li>对于插入和更新操作，代码检查参数对象中是否存在指定的字段（如<code>employeeName</code>），如果存在，则将该字段的值加密后再设置回对象。</li>
<li>对于查询操作，结果集中对应的字段值会被解密。</li>
<li>加密和解密操作仅在字段存在时进行，使用<code>hasField</code>方法来检查对象是否包含特定字段。</li>
</ul>
<p><strong>辅助方法</strong>:</p>
<ul>
<li><code>hasField</code>方法用于检查一个对象是否包含某个字段，即使该字段在父类中定义也能检测到。</li>
</ul>
<p>通过这种方式，插件确保了敏感数据在数据库存储时的安全性，并在应用层面保持数据的可用性和正确性。</p>
</blockquote>
<h2>五、测试验证</h2>
<h3>1. 调薪</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test_execSalaryAdjust</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75"> adjustSalaryApplyOrderAggregate </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> AdjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">orderId</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"100908977676001"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeEntity</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeeEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">employeeLevel</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeePostVO</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">T3</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">employeeTitle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeePostVO</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">T3</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">adjustTotalAmount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> BigDecimal</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">adjustBaseAmount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> BigDecimal</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">                    .</span><span style="color:#61AFEF">adjustMeritAmount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> BigDecimal</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">)).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> orderId </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> salaryAdjustApplyService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execSalaryAdjust</span><span style="color:#ABB2BF">(adjustSalaryApplyOrderAggregate);</span></span>
<span class="line"><span style="color:#E5C07B">    log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"调薪测试 req: {} res: {}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(adjustSalaryApplyOrderAggregate), orderId);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">19.18</span><span style="color:#C678DD">:</span><span style="color:#D19A66">04</span><span style="color:#C678DD">:</span><span style="color:#D19A66">21.934</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  HikariDataSource       </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> HikariPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> Starting</span><span style="color:#ABB2BF">...</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">19.18</span><span style="color:#C678DD">:</span><span style="color:#D19A66">04</span><span style="color:#C678DD">:</span><span style="color:#D19A66">22.396</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  HikariDataSource       </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> HikariPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> Start</span><span style="color:#E06C75"> completed</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">19.18</span><span style="color:#C678DD">:</span><span style="color:#D19A66">04</span><span style="color:#C678DD">:</span><span style="color:#D19A66">22.607</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  ISalaryAdjustApplyServiceTest </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> 调薪测试 req</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> {</span><span style="color:#98C379">"employeeEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"employeeLevel"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeTitle"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeNumber"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeSalaryAdjustEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"adjustBaseAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustMeritAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustTotalAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">100</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"orderId"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"100908977676002"</span><span style="color:#E06C75">} res</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 100908977676002</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>2. 查询</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test_queryEmployInfo</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    EmployeeInfoEntity</span><span style="color:#E06C75"> employeeInfoEntity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> employeeService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">queryEmployInfo</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"测试结果：{}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(employeeInfoEntity));</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">19.18</span><span style="color:#C678DD">:</span><span style="color:#D19A66">06</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">467</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  IEmployeeServiceTest   </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> 测试结果：{</span><span style="color:#98C379">"employeeLevel"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T-3"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeName"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"仙人球"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeNumber"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeTitle"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"中级工程师"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"salaryBaseAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5300.00</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"salaryMeritAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5300.00</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"salaryTotalAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5300.00</span><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">19.18</span><span style="color:#C678DD">:</span><span style="color:#D19A66">06</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">475</span><span style="color:#E06C75"> [SpringApplicationShutdownHook] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  HikariDataSource       </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> HikariPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> Shutdown</span><span style="color:#E06C75"> initiated</span><span style="color:#ABB2BF">...</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">19.18</span><span style="color:#C678DD">:</span><span style="color:#D19A66">06</span><span style="color:#C678DD">:</span><span style="color:#D19A66">05</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">480</span><span style="color:#E06C75"> [SpringApplicationShutdownHook] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  HikariDataSource       </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> HikariPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> Shutdown</span><span style="color:#E06C75"> completed</span><span style="color:#ABB2BF">.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240418180519158.png" type="image/png"/>
    </item>
    <item>
      <title>DDD 工程 RocketMQ 使用教程和模型结构</title>
      <link>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20RocketMQ%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%92%8C%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84.html</link>
      <guid>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%20RocketMQ%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E5%92%8C%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://cactusli.net/rss.xml">DDD 工程 RocketMQ 使用教程和模型结构</source>
      <description>一、应用背景 MQ（消息队列）的主要作用是用于解耦复杂的业务流程和应对流量高峰时的消峰。例如，在用户完成下单支付后，系统可以通过MQ发送一个支付成功的消息，这个消息会触发后续的发货流程。这样，支付和发货两个环节就通过消息队列解耦，提高了系统的灵活性和可维护性。 另一个例子是在使用《MyBatis 使用教程》中的案例场景时，当对雇员进行级别提升和薪资调整...</description>
      <category>DDD 技术体系</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、应用背景</h2>
<p>MQ（消息队列）的主要作用是用于解耦复杂的业务流程和应对流量高峰时的消峰。例如，在用户完成下单支付后，系统可以通过MQ发送一个支付成功的消息，这个消息会触发后续的发货流程。这样，支付和发货两个环节就通过消息队列解耦，提高了系统的灵活性和可维护性。</p>
<p>另一个例子是在使用《MyBatis 使用教程》中的案例场景时，当对雇员进行级别提升和薪资调整后，系统也可以发送一条MQ消息。这条消息用于触发发送邮件通知给用户的流程。通过这种方式，业务流程中的各个环节可以独立运作，互不影响，同时也能有效地处理突发的高流量，避免系统过载。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240423150157167.png" alt="image-20240423150157167" tabindex="0" loading="lazy"><figcaption>image-20240423150157167</figcaption></figure>
<p>如从薪资调整到邮件发送的过程。通过MQ，不同的业务环节可以通过发送和接收消息来进行交互，这样可以减少直接的依赖关系，提高系统的灵活性和可扩展性。</p>
<p>在过去，你可能需要通过多线程来处理这些任务，但现在通过使用MQ，可以简化这一处理过程。通过将消息放入队列，不同的服务实例可以独立地从队列中取出消息并处理，这样既可以分散处理压力，也可以在必要时轻松扩展服务的数量来应对更高的负载需求。</p>
<h2>二、领域事件</h2>
<p>领域事件是微服务设计中实现解耦的核心概念。它是领域模型的重要组成部分，用于表示领域中发生的具体事件。这些事件不仅推动业务流程的发展，还有助于业务解耦，从而实现业务流程的完整闭环。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240423162241761.png" alt="image-20240423162241761" tabindex="0" loading="lazy"><figcaption>image-20240423162241761</figcaption></figure>
<ul>
<li>
<p>首先，在领域模型层中，我们需要添加一个事件（event）区域，其目的是定义当前领域所需的事件消息信息。这些信息类型可能包括模型下的实体对象或聚合对象。</p>
</li>
<li>
<p>接着，消息的发送则是在基础设置层进行。由于基础设置层本身是依赖于模型层的，因此模型层定义的事件对象可以方便地在基础设置层中使用。在大多数开发场景中，消息队列（MQ）消息的发送通常与数据库操作相关联，通常的做法是在数据落库之后推送MQ消息。因此，将这一功能定义在仓储层中实现，可以使操作更加顺畅和自然。</p>
</li>
<li>
<p>最后，关于MQ消息，MQ的消费不仅可以是自身服务发出的消息，也可以是来自外部其他微服务的消息。这是在小傅哥讲述的DDD部分中提到的触发器层的内容。</p>
</li>
</ul>
<h2>三、环境安装</h2>
<p>本案例涉及了数据库和RocketMQ的使用，都已经在工程中提供了安装脚本，可以按需执行。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240423172743384.png" alt="image-20240423172743384" tabindex="0" loading="lazy"><figcaption>image-20240423172743384</figcaption></figure>
<h3>1. 执行 compose yml</h3>
<p><strong>文件</strong>：<code>docs/rocketmq/rocketmq-docker-compose-mac-amd-arm.yml</code>  关于安装这里提供了不同的镜像，包括Mac、Mac M1、Windows 可以按需选择使用。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">version</span><span style="color:#C678DD">:</span><span style="color:#98C379"> '3'</span></span>
<span class="line"><span style="color:#E06C75">services</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">  # https</span><span style="color:#C678DD">:</span><span style="color:#7F848E;font-style:italic">//hub.docker.com/r/xuchengen/rocketmq</span></span>
<span class="line"><span style="color:#E06C75">  # 注意修改项；</span></span>
<span class="line"><span style="color:#E06C75">  # </span><span style="color:#D19A66">01</span><span style="color:#E06C75">：data</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">rocketmq</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">conf</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">broker</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">conf</span><span style="color:#E06C75"> 添加 brokerIP1</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">127.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">1</span></span>
<span class="line"><span style="color:#E06C75">  # </span><span style="color:#D19A66">02</span><span style="color:#E06C75">：data</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">console</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">config</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">application</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">properties</span><span style="color:#E5C07B"> server</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">port</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">9009</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75"> 如果8080端口被占用，可以修改或者添加映射端口</span></span>
<span class="line"><span style="color:#E06C75">  rocketmq</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> livinphp</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">rocketmq</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> rocketmq</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#56B6C2">      -</span><span style="color:#D19A66"> 9009</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9009</span></span>
<span class="line"><span style="color:#56B6C2">      -</span><span style="color:#D19A66"> 9876</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9876</span></span>
<span class="line"><span style="color:#56B6C2">      -</span><span style="color:#D19A66"> 10909</span><span style="color:#C678DD">:</span><span style="color:#D19A66">10909</span></span>
<span class="line"><span style="color:#56B6C2">      -</span><span style="color:#D19A66"> 10911</span><span style="color:#C678DD">:</span><span style="color:#D19A66">10911</span></span>
<span class="line"><span style="color:#56B6C2">      -</span><span style="color:#D19A66"> 10912</span><span style="color:#C678DD">:</span><span style="color:#D19A66">10912</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#56B6C2">      -</span><span style="color:#ABB2BF"> .</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">data</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">app</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">data</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#E06C75">      TZ</span><span style="color:#C678DD">:</span><span style="color:#98C379"> "Asia/Shanghai"</span></span>
<span class="line"><span style="color:#E06C75">      NAMESRV_ADDR</span><span style="color:#C678DD">:</span><span style="color:#98C379"> "rocketmq:9876"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>使用命令安装：<code># /usr/local/bin/docker-compose -f /docs/dev-ops/environment/environment-docker-compose.yml up -d</code></li>
<li>首次安装可能使用不了，一个原因是 brokerIP1 未配置IP，另外一个是默认的 8080 端口占用。</li>
</ul>
<h3>2. 修改默认配合</h3>
<ol>
<li>
<p>打开 <code>data/rocketmq/conf/broker.conf</code> 添加一条 <code>brokerIP1=127.0.0.1</code> 在结尾</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75"># 集群名称</span></span>
<span class="line"><span style="color:#E06C75">brokerClusterName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> DefaultCluster</span></span>
<span class="line"><span style="color:#E06C75"># BROKER 名称</span></span>
<span class="line"><span style="color:#E06C75">brokerName </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> broker</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">a</span></span>
<span class="line"><span style="color:#E06C75"># </span><span style="color:#D19A66">0</span><span style="color:#E06C75"> 表示 Master</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75"> 表示 </span><span style="color:#E5C07B">Slave</span></span>
<span class="line"><span style="color:#E06C75">brokerId </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#E06C75"># 删除文件时间点，默认凌晨 </span><span style="color:#D19A66">4</span><span style="color:#E06C75"> 点</span></span>
<span class="line"><span style="color:#E06C75">deleteWhen </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 04</span></span>
<span class="line"><span style="color:#E06C75"># 文件保留时间，默认 </span><span style="color:#D19A66">48</span><span style="color:#E06C75"> 小时</span></span>
<span class="line"><span style="color:#E06C75">fileReservedTime </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 48</span></span>
<span class="line"><span style="color:#E06C75"># BROKER 角色 ASYNC_MASTER为异步主节点，SYNC_MASTER为同步主节点，</span><span style="color:#E5C07B">SLAVE为从节点</span></span>
<span class="line"><span style="color:#E06C75">brokerRole </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ASYNC_MASTER</span></span>
<span class="line"><span style="color:#E06C75"># 刷新数据到磁盘的方式，ASYNC_FLUSH 刷新</span></span>
<span class="line"><span style="color:#E06C75">flushDiskType </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ASYNC_FLUSH</span></span>
<span class="line"><span style="color:#E06C75"># 存储路径</span></span>
<span class="line"><span style="color:#E06C75">storePathRootDir </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">app</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">data</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">rocketmq</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">store</span></span>
<span class="line"><span style="color:#E06C75"># </span><span style="color:#E5C07B">IP地址</span></span>
<span class="line"><span style="color:#E06C75">brokerIP1 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 127.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">1</span></span>
<span class="line"><span style="color:#E06C75">permittedIP </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 192.168</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">218</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">192.168</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">216</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>打开 <code>data/console/config/application.properties</code>修改<code>server.port=9009</code> 端口。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">server</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">address</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span></span>
<span class="line"><span style="color:#E5C07B">server</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">port</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">9009</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>修改配置后，重启服务。</p>
</blockquote>
</li>
</ol>
<h3>3. RockMQ登录与配置</h3>
<h4>3.1 登录</h4>
<p>RocketMQ 此镜像，会在安装后在控制台打印登录账号信息，你可以查看使用。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240424174024536.png" alt="image-20240424174024536" tabindex="0" loading="lazy"><figcaption>image-20240424174024536</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240424174139076.png" alt="image-20240424174139076" tabindex="0" loading="lazy"><figcaption>image-20240424174139076</figcaption></figure>
<blockquote>
<p>登录：<a href="http://192.168.1.20:9009/" target="_blank" rel="noopener noreferrer">http://192.168.1.20:9009/</a></p>
</blockquote>
<h4>3.2 创建Topic</h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240424190446212.png" alt="image-20240424190446212" tabindex="0" loading="lazy"><figcaption>image-20240424190446212</figcaption></figure>
<blockquote>
<p>可以命令创建：<code>docker exec -it rocketmq sh /home/app/rocketmq/bin/mqadmin updateTopic -n localhost:9876 -c DefaultCluster -t lxf-mq</code></p>
</blockquote>
<h4>3.3 创建消费者组</h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240424190726802.png" alt="image-20240424190726802" tabindex="0" loading="lazy"><figcaption>image-20240424190726802</figcaption></figure>
<blockquote>
<p>可以使用命令创建：<code>docker exec -it rocketmq sh /home/app/rocketmq/bin/mqadmin updateSubGroup -n localhost:9876 -c DefaultCluster -g lxf-group</code></p>
</blockquote>
<h2>四、工程实现</h2>
<h3>1. 工程结构</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240425101631564.png" alt="image-20240425101631564" tabindex="0" loading="lazy"><figcaption>image-20240425101631564</figcaption></figure>
<p>无论是使用RocketMQ还是Kafka，操作本身都相对简单。但关键在于如何在架构中合理地使用这些消息队列技术。如果在项目初期没有正确定义消息的发送和接收规则，可能会导致消息在系统中任意地点被发送和接收，这将使得最终的系统架构难以维护。</p>
<p>因此，在使用MQ时，应当根据DDD（领域驱动设计）的领域事件结构来设计消息的生产和消费。具体来说，可以在领域层（domain）使用基础层（infrastructure layer）来生产消息，然后通过触发器层（trigger layer）来接收消息。这样的设计可以确保消息流的清晰和系统的可维护性，同时也利于业务逻辑与消息处理逻辑的解耦。</p>
<h3>2. 配置文件</h3>
<p><strong>配置依赖包添加到 pom 文件中</strong></p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">&lt;!-- https://mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-client-java --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.rocketmq&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;rocketmq-client-java&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;5.0.4&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.rocketmq&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;rocketmq-spring-boot-starter&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;2.2.0&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加配置到 application-dev.yml</strong></p>
<div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># RocketMQ 配置</span></span>
<span class="line"><span style="color:#E06C75">rocketmq</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">  name-server</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">192.168.1.20:9876</span></span>
<span class="line"><span style="color:#E06C75">  consumer</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    group</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">lxf-group</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 一次拉取消息最大值，注意是拉取消息的最大值而非消费最大值</span></span>
<span class="line"><span style="color:#E06C75">    pull-batch-size</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">10</span></span>
<span class="line"><span style="color:#E06C75">  producer</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 发送同一类消息的设置为同一个group，保证唯一</span></span>
<span class="line"><span style="color:#E06C75">    group</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">lxf-group</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 发送消息超时时间，默认3000</span></span>
<span class="line"><span style="color:#E06C75">    sendMessageTimeout</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">10000</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 发送消息失败重试次数，默认2</span></span>
<span class="line"><span style="color:#E06C75">    retryTimesWhenSendFailed</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 异步消息重试此处，默认2</span></span>
<span class="line"><span style="color:#E06C75">    retryTimesWhenSendAsyncFailed</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 消息最大长度，默认1024 * 1024 * 4(默认4M)</span></span>
<span class="line"><span style="color:#E06C75">    maxMessageSize</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">4096</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 压缩消息阈值，默认4k(1024 * 4)</span></span>
<span class="line"><span style="color:#E06C75">    compressMessageBodyThreshold</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">4096</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    # 是否在内部发送失败时重试另一个broker，默认false</span></span>
<span class="line"><span style="color:#E06C75">    retryNextServer</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">false</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>3. 定义领域事件</h3>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.domain.salary.event.SalaryAdjustEvent</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240425102311388.png" alt="image-20240425102311388" tabindex="0" loading="lazy"><figcaption>image-20240425102311388</figcaption></figure>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">EqualsAndHashCode</span><span style="color:#E06C75">(</span><span style="color:#D19A66">callSuper</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> true</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Data</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SalaryAdjustEvent</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> BaseEvent</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">AdjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> TOPIC </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "lxf-mq"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> SalaryAdjustEvent</span><span style="color:#61AFEF"> create</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75;font-style:italic"> aggregate</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SalaryAdjustEvent</span><span style="color:#E06C75"> event</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> SalaryAdjustEvent</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        event</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setId</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">RandomStringUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">randomNumeric</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        event</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setTimestamp</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        event</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setData</span><span style="color:#ABB2BF">(aggregate);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> event;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>每个领域的消息都应由该领域自行定义。在消息发送方面，领域层会负责定义和构造消息，而具体的发送操作则交由基础设施层来处理。</p>
</blockquote>
<h3>4. 消息发送</h3>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.infrastructure.event.EventPublisher</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240425102823240.png" alt="image-20240425102823240" tabindex="0" loading="lazy"><figcaption>image-20240425102823240</figcaption></figure>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Package: cn.cactusli.lxf.dev.tech.infrastructure.event</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Description:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *  事件发布，消息推送。你可以在这里扩展各类的消息推送方式，如；异步消息、延迟消息、顺序消息、事务消息。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @Author 仙人球⁶ᴳ | 微信：Cactusesli</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @Date 2024/4/23 17:07</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @Github https://github.com/lixuanfengs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Component</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> EventPublisher</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Setter</span><span style="color:#E06C75">(</span><span style="color:#D19A66">onMethod_</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">Autowired</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> RocketMQTemplate</span><span style="color:#E06C75"> rocketmqTemplate</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 普通消息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> topic</span><span style="color:#7F848E;font-style:italic">   主题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> message</span><span style="color:#7F848E;font-style:italic"> 消息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> publish</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> topic</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">BaseEvent</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">message</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> mqMessage</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(message);</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"发送MQ消息 topic:{} message:{}"</span><span style="color:#ABB2BF">, topic, mqMessage);</span></span>
<span class="line"><span style="color:#E5C07B">            rocketmqTemplate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">convertAndSend</span><span style="color:#ABB2BF">(topic, mqMessage);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"发送MQ消息失败 topic:{} message:{}"</span><span style="color:#ABB2BF">, topic, </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(message), e);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 大部分MQ发送失败后，会需要任务补偿</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 延迟消息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> topic</span><span style="color:#7F848E;font-style:italic">          主题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> message</span><span style="color:#7F848E;font-style:italic">        消息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> delayTimeLevel</span><span style="color:#7F848E;font-style:italic"> 延迟时长</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> publishDelivery</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> topic</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">BaseEvent</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">message</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> delayTimeLevel</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> mqMessage</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(message);</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"发送MQ延迟消息 topic:{} message:{}"</span><span style="color:#ABB2BF">, topic, mqMessage);</span></span>
<span class="line"><span style="color:#E5C07B">            rocketmqTemplate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">syncSend</span><span style="color:#ABB2BF">(topic, </span><span style="color:#E5C07B">MessageBuilder</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withPayload</span><span style="color:#ABB2BF">(message).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">(), </span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">, delayTimeLevel);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"发送MQ延迟消息失败 topic:{} message:{}"</span><span style="color:#ABB2BF">, topic, </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(message), e);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 大部分MQ发送失败后，会需要任务补偿</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在基础设施层处理 event 事件，主要涉及到 MQ 消息的发送。</p>
</blockquote>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.infrastructure.repository.SalaryAdjustRepository</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Repository</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SalaryAdjustRepository</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> ISalaryAdjustRepository</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Resource</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> EventPublisher</span><span style="color:#E06C75"> eventPublisher</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Transactional</span><span style="color:#E06C75">(</span><span style="color:#D19A66">rollbackFor</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> timeout</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 350</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> propagation</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Propagation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">REQUIRED</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> isolation</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Isolation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DEFAULT</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> adjustSalary</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75;font-style:italic"> adjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// ... 省略部分代码 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 发送消息，实际应用常见建议</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 1. 消息发送，不要写在数据库事务中。因为事务一直占用数据库连接，需要快速释放。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 2. 对于一些强MQ要求的场景，需要在发送MQ前，写入一条数据库 Task 记录，发送消息后更新 Task 状态为成功。如果长时间未更新数据库状态或者为失败的，则需要由任务补偿进行处理。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         */</span></span>
<span class="line"><span style="color:#E5C07B">        eventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">publish</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SalaryAdjustEvent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TOPIC</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">SalaryAdjustEvent</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">(adjustSalaryApplyOrderAggregate));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> orderId;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在 <code>SalaryAdjustRepository</code> 仓储实现中发送 MQ 消息时，确实需要注意以下两点：</p>
<ol>
<li><strong>消息发送不应写在数据库事务中</strong>。这是因为数据库事务会占用数据库连接，而数据库连接需要尽快释放以避免影响系统性能和可用性。因此，建议在完成所有数据库操作并提交事务后，再进行消息的发送。</li>
<li><strong>对于对消息队列（MQ）要求较高的场景</strong>，可以在发送 MQ 消息前，先在数据库中写入一条 Task 记录。发送消息后，再更新这条 Task 记录的状态为成功。这样做的目的是为了确保消息的可追踪性和状态的可管理性。如果消息发送后，长时间未能更新数据库中的 Task 状态，或者状态更新为失败，那么就需要通过任务补偿机制来处理这种异常情况。</li>
</ol>
</blockquote>
<h3>5. 消费消息</h3>
<p><strong>源码</strong>：<code>cn.cactusli.lxf.dev.tech.trigger.mq.SalaryAdjustMQListener</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240425103420154.png" alt="image-20240425103420154" tabindex="0" loading="lazy"><figcaption>image-20240425103420154</figcaption></figure>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Component</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">RocketMQMessageListener</span><span style="color:#E06C75">(</span><span style="color:#D19A66">topic</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "lxf-mq"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> consumerGroup</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "lxf-group"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SalaryAdjustMQListener</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> RocketMQListener</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> onMessage</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> s</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"接收到消息：{}"</span><span style="color:#ABB2BF">, s);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在配置消息队列的消费者时，首先需要设置消费者组和它们需要消费的主题。这样，消费者就可以根据配置的主题接收到消息。接收到消息后，消费者可以根据业务需求进行相应的处理。</p>
</blockquote>
<h2>六、测试验证</h2>
<h3>1. 单独发送消息测试</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">RunWith</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">SpringRunner</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">SpringBootTest</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RocketMQTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Setter</span><span style="color:#E06C75">(</span><span style="color:#D19A66">onMethod_</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">Autowired</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> RocketMQTemplate</span><span style="color:#E06C75"> rocketMQTemplate</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        rocketMQTemplate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">convertAndSend</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"lxf-mq"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Hello, World!"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>测试发送消息，方便验证流程。</p>
</blockquote>
<h3>2. 业务流程消息验证</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">RunWith</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">SpringRunner</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">SpringBootTest</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ISalaryAdjustApplyServiceTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Resource</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> ISalaryAdjustApplyService</span><span style="color:#E06C75"> salaryAdjustApplyService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> test_execSalaryAdjust</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        AdjustSalaryApplyOrderAggregate</span><span style="color:#E06C75"> adjustSalaryApplyOrderAggregate</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> AdjustSalaryApplyOrderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">employeeNumber</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">orderId</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"100908977676002"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">employeeEntity</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeeEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">employeeLevel</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeePostVO</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">T3</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">employeeTitle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeePostVO</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">T3</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">employeeSalaryAdjustEntity</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">EmployeeSalaryAdjustEntity</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">builder</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">adjustTotalAmount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> BigDecimal</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">adjustBaseAmount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> BigDecimal</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">                        .</span><span style="color:#61AFEF">adjustMeritAmount</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> BigDecimal</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">)).</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">build</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> orderId</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> salaryAdjustApplyService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">execSalaryAdjust</span><span style="color:#ABB2BF">(adjustSalaryApplyOrderAggregate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"调薪测试 req: {} res: {}"</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">JSON</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toJSONString</span><span style="color:#ABB2BF">(adjustSalaryApplyOrderAggregate), orderId);</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">25.19</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">19.559</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  HikariDataSource       </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> HikariPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> Starting</span><span style="color:#ABB2BF">...</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">25.19</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20.617</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  HikariDataSource       </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> HikariPool</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#56B6C2"> -</span><span style="color:#E5C07B"> Start</span><span style="color:#E06C75"> completed</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">25.19</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20.767</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  EventPublisher         </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> 发送MQ消息 topic</span><span style="color:#C678DD">:</span><span style="color:#E06C75">lxf</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">mq message</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"data"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"employeeEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"employeeLevel"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeTitle"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeNumber"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeSalaryAdjustEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"adjustBaseAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustMeritAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustTotalAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">100</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"orderId"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"100908977676002"</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"id"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"21599579545"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"timestamp"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"2024-04-25 19:16:20.751"</span><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">25.19</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">21.021</span><span style="color:#E06C75"> [main            ] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  ISalaryAdjustApplyServiceTest </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> 调薪测试 req</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> {</span><span style="color:#98C379">"employeeEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"employeeLevel"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeTitle"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeNumber"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeSalaryAdjustEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"adjustBaseAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustMeritAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustTotalAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">100</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"orderId"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"100908977676002"</span><span style="color:#E06C75">} res</span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 100908977676002</span></span>
<span class="line"><span style="color:#D19A66">24</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">04</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">25.19</span><span style="color:#C678DD">:</span><span style="color:#D19A66">16</span><span style="color:#C678DD">:</span><span style="color:#D19A66">28.540</span><span style="color:#E06C75"> [ConsumeMessageThread_lxf</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">group_1] </span><span style="color:#E5C07B">INFO</span><span style="color:#E06C75">  SalaryAdjustMQListener </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> 接收到消息：{</span><span style="color:#98C379">"data"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"employeeEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"employeeLevel"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeTitle"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"T3"</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeNumber"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"10000001"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"employeeSalaryAdjustEntity"</span><span style="color:#C678DD">:</span><span style="color:#E06C75">{</span><span style="color:#98C379">"adjustBaseAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">80</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustMeritAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"adjustTotalAmount"</span><span style="color:#C678DD">:</span><span style="color:#D19A66">100</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"orderId"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"100908977676002"</span><span style="color:#E06C75">}</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"id"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"21599579545"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"timestamp"</span><span style="color:#C678DD">:</span><span style="color:#98C379">"2024-04-25 19:16:20.751"</span><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>运行完成一次调薪方法后，此时MQ就会监听到发送的消息。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240423150157167.png" type="image/png"/>
    </item>
    <item>
      <title>DDD 工程脚手架 【Maven 仓库版】</title>
      <link>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%E8%84%9A%E6%89%8B%E6%9E%B6%20%E3%80%90Maven%20%E4%BB%93%E5%BA%93%E7%89%88%E3%80%91.html</link>
      <guid>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%E8%84%9A%E6%89%8B%E6%9E%B6%20%E3%80%90Maven%20%E4%BB%93%E5%BA%93%E7%89%88%E3%80%91.html</guid>
      <source url="https://cactusli.net/rss.xml">DDD 工程脚手架 【Maven 仓库版】</source>
      <description>我把DDD脚手架，发布到了Maven仓库，所有人都能使用！ 一、操作步骤 1.访问官网查看文档 在 https://central.sonatype.com/publishing (opens new window)首页有一个 Help 帮助文档，https://central.sonatype.org/register/central-portal/...</description>
      <category>DDD 技术体系</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>我把DDD脚手架，发布到了Maven仓库，所有人都能使用！</h2>
<h2>一、操作步骤</h2>
<h3>1.访问官网查看文档</h3>
<p>在 <a href="https://central.sonatype.com/publishing" target="_blank" rel="noopener noreferrer">https://central.sonatype.com/publishing (opens new window)</a>首页有一个 Help 帮助文档，<a href="https://central.sonatype.org/register/central-portal/#producers" target="_blank" rel="noopener noreferrer">https://central.sonatype.org/register/central-portal/#producers (opens new window)</a>这里有非常详细的操作说明。接下来我讲一些核心的步骤，如果操作有失败，可以参考官网资料。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240415160031703.png" alt="image-20240415160031703" tabindex="0" loading="lazy"><figcaption>image-20240415160031703</figcaption></figure>
<p>开始前，登录注册 <a href="https://central.sonatype.com/" target="_blank" rel="noopener noreferrer">https://central.sonatype.com (opens new window)</a>- 可以选择 github 登录。</p>
<h3>2.配置 NameSpace</h3>
<p>如果选择 github 登录，你会有一个默认配置的 NameSpace（io.github.fuzhengwei），这个东西的作用就是要和本地工程名 groupId 保持一致的。如工程是 cn.cactusli、xyz.199228，那么你在的 NameSpace 就需要配置一个这样的调过来的域名。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240415163612519.png" alt="image-20240415163612519" tabindex="0" loading="lazy"><figcaption>image-20240415163612519</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240415163535760.png" alt="image-20240415163535760" tabindex="0" loading="lazy"><figcaption>image-20240415163535760</figcaption></figure>
<blockquote>
<p>如图配置完添加验证即可，最后验证成功就可以使用了。</p>
</blockquote>
<h3>3.上传要求</h3>
<p>文档：<a href="https://central.sonatype.org/publish/publish-portal-upload/" target="_blank" rel="noopener noreferrer">https://central.sonatype.org/publish/publish-portal-upload/</a></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/1713171011992.jpg" alt="1713171011992" tabindex="0" loading="lazy"><figcaption>1713171011992</figcaption></figure>
<blockquote>
<p>如文档上传要求，你需要把jar、pom、doc、sources 全部打包到 zip 包，同时每个文件的 asc、md5、sha1 也需要打包进来。</p>
<p>这些文件也都是在旧版上传 maven 中央仓库的时候，所需提供的内容。</p>
</blockquote>
<h3>4.项目配置</h3>
<p><strong>源码</strong>：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-lite/-/tree/master/scaffold-lite" target="_blank" rel="noopener noreferrer">https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-lite/-/tree/master/scaffold-lite</a></p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;?</span><span style="color:#E06C75">xml</span><span style="color:#D19A66"> version</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"1.0"</span><span style="color:#D19A66"> encoding</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">project</span><span style="color:#D19A66"> xmlns</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"http://maven.apache.org/POM/4.0.0"</span><span style="color:#D19A66"> xmlns:xsi</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"http://www.w3.org/2001/XMLSchema-instance"</span></span>
<span class="line"><span style="color:#D19A66">         xsi:schemaLocation</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">modelVersion</span><span style="color:#ABB2BF">&gt;4.0.0&lt;/</span><span style="color:#E06C75">modelVersion</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;io.github.lixuanfengs&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;ddd-scaffold-lite&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;1.0&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">packaging</span><span style="color:#ABB2BF">&gt;maven-archetype&lt;/</span><span style="color:#E06C75">packaging</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">&gt;ddd-scaffold-lite&lt;/</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">properties</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">java.version</span><span style="color:#ABB2BF">&gt;1.8&lt;/</span><span style="color:#E06C75">java.version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">maven-javadoc-plugin.version</span><span style="color:#ABB2BF">&gt;3.2.0&lt;/</span><span style="color:#E06C75">maven-javadoc-plugin.version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">maven-source-plugin.version</span><span style="color:#ABB2BF">&gt;3.2.1&lt;/</span><span style="color:#E06C75">maven-source-plugin.version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">maven-gpg-plugin.version</span><span style="color:#ABB2BF">&gt;1.6&lt;/</span><span style="color:#E06C75">maven-gpg-plugin.version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">maven-checksum-plugin.version</span><span style="color:#ABB2BF">&gt;1.10&lt;/</span><span style="color:#E06C75">maven-checksum-plugin.version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">properties</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">build</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">extensions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">extension</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.maven.archetype&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;archetype-packaging&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.2.0&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">extension</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">extensions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">plugins</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;net.nicoulaj.maven.plugins&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;checksum-maven-plugin&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;${maven-checksum-plugin.version}&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;create-checksums&lt;/</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;artifacts&lt;/</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;/</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;/</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;maven-source-plugin&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;2.2.1&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;attach-sources&lt;/</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;jar-no-fork&lt;/</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;/</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;/</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;maven-javadoc-plugin&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;2.9.1&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">configuration</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">encoding</span><span style="color:#ABB2BF">&gt;UTF-8&lt;/</span><span style="color:#E06C75">encoding</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">aggregate</span><span style="color:#ABB2BF">&gt;true&lt;/</span><span style="color:#E06C75">aggregate</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">charset</span><span style="color:#ABB2BF">&gt;UTF-8&lt;/</span><span style="color:#E06C75">charset</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">docencoding</span><span style="color:#ABB2BF">&gt;UTF-8&lt;/</span><span style="color:#E06C75">docencoding</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">configuration</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;attach-javadocs&lt;/</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;jar&lt;/</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;/</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">configuration</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">additionalparam</span><span style="color:#ABB2BF">&gt;-Xdoclint:none&lt;/</span><span style="color:#E06C75">additionalparam</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">javadocExecutable</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                                /Library/Java/JavaVirtualMachines/jdk1.8.0_341.jdk/Contents/Home/bin/javadoc</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;/</span><span style="color:#E06C75">javadocExecutable</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;/</span><span style="color:#E06C75">configuration</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;/</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;maven-gpg-plugin&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;1.5&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;sign-artifacts&lt;/</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">phase</span><span style="color:#ABB2BF">&gt;verify&lt;/</span><span style="color:#E06C75">phase</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;sign&lt;/</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;/</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;/</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;maven-release-plugin&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;2.5.3&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">configuration</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">autoVersionSubmodules</span><span style="color:#ABB2BF">&gt;true&lt;/</span><span style="color:#E06C75">autoVersionSubmodules</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">useReleaseProfile</span><span style="color:#ABB2BF">&gt;false&lt;/</span><span style="color:#E06C75">useReleaseProfile</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">releaseProfiles</span><span style="color:#ABB2BF">&gt;release&lt;/</span><span style="color:#E06C75">releaseProfiles</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;deploy&lt;/</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">configuration</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">plugins</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">build</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">profiles</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">profile</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;release&lt;/</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">build</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;</span><span style="color:#E06C75">plugins</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.apache.maven.plugins&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;maven-javadoc-plugin&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.3.1&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt; </span><span style="color:#7F848E;font-style:italic">&lt;!-- 使用最新版本 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                                &lt;</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;attach-javadocs&lt;/</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                                &lt;</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                                    &lt;</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt;jar&lt;/</span><span style="color:#E06C75">goal</span><span style="color:#ABB2BF">&gt; </span><span style="color:#7F848E;font-style:italic">&lt;!-- 绑定到 jar 目标 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                                &lt;/</span><span style="color:#E06C75">goals</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                            &lt;/</span><span style="color:#E06C75">execution</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                        &lt;/</span><span style="color:#E06C75">executions</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                    &lt;/</span><span style="color:#E06C75">plugin</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">                &lt;/</span><span style="color:#E06C75">plugins</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;/</span><span style="color:#E06C75">build</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">profile</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">profiles</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">description</span><span style="color:#ABB2BF">&gt;ddd scaffold lite by xiaofuge&lt;/</span><span style="color:#E06C75">description</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">url</span><span style="color:#ABB2BF">&gt;https://spring.io/projects/spring-boot/lxf-frame-archetype&lt;/</span><span style="color:#E06C75">url</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">developers</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;</span><span style="color:#E06C75">developer</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">&gt;lixuanfeng&lt;/</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">email</span><span style="color:#ABB2BF">&gt;184172133@qq.com&lt;/</span><span style="color:#E06C75">email</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">organization</span><span style="color:#ABB2BF">&gt;cactusli&lt;/</span><span style="color:#E06C75">organization</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">            &lt;</span><span style="color:#E06C75">organizationUrl</span><span style="color:#ABB2BF">&gt;https://github.com/lixuanfengs&lt;/</span><span style="color:#E06C75">organizationUrl</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">        &lt;/</span><span style="color:#E06C75">developer</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;/</span><span style="color:#E06C75">developers</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">project</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意 groupId、artifactId 名字，如果你有发布诉求，需要和你自己的一直。</p>
<p>maven-javadoc-plugin：生成 doc 文档。这里要注意，因为我们脚手架不是代码文件，没有doc的，所以要在工程中加一个任意类名文件。工程中小傅哥加了个 Api 类。</p>
<p>maven-source-plugin：生成 source 文件。</p>
<p>maven-gpg-plugin：是签名的加密文件，需要本地安装过 gpg 包。</p>
<p>checksum-maven-plugin：生成 md5、sha1 文件，但这里不会对 pom 生成此文件，还需要单独命令处理。</p>
</blockquote>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">md5 ddd</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">scaffold</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">lite</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pom</span><span style="color:#56B6C2"> &gt;</span><span style="color:#E06C75"> ddd</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">scaffold</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">lite</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pom</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">md5</span></span>
<span class="line"><span style="color:#E06C75">shasum ddd</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">scaffold</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">lite</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pom</span><span style="color:#56B6C2"> &gt;</span><span style="color:#E06C75"> ddd</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">scaffold</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">lite</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pom</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">sha1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>检查生成后的文件，去掉不需要的内容</p>
<h3>5.构建项目</h3>
<h4><strong>第1次构建</strong></h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240415172010706.png" alt="image-20240415172010706" tabindex="0" loading="lazy"><figcaption>image-20240415172010706</figcaption></figure>
<h4><strong>第2次构建</strong></h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240417171732169.png" alt="image-20240417171732169" tabindex="0" loading="lazy"><figcaption>image-20240417171732169</figcaption></figure>
<h4>执行脚本</h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240417172536682.png" alt="image-20240417172536682" tabindex="0" loading="lazy"><figcaption>image-20240417172536682</figcaption></figure>
<h3>6.上传 archetype-catalog.xml</h3>
<p>把 archetype-catalog.xml 文件，上传到域名可访问云服务器的根目录中。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240416111427450.png" alt="image-20240416111427450" tabindex="0" loading="lazy"><figcaption>image-20240416111427450</figcaption></figure>
<h3>7.上传打包文件到 maven 仓库</h3>
<p><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240416111845769.png" alt="image-20240416111845769" loading="lazy">、</p>
<blockquote>
<p>你需要按照你的工程结构也是 namespace 创建出文件夹结构，并把工程 target 打包的文件全部复制进来。最后把 io 这个文件夹，打包一个 zip 包。就可以了。</p>
</blockquote>
<h3>8.上传 maven 仓库</h3>
<h3>9.上传成功！❀</h3>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240415160031703.png" type="image/png"/>
    </item>
    <item>
      <title>DDD 工程脚手架 【Maven 本地版】</title>
      <link>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%E8%84%9A%E6%89%8B%E6%9E%B6%20%E3%80%90Maven%20%E6%9C%AC%E5%9C%B0%E7%89%88%E3%80%91.html</link>
      <guid>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E5%B7%A5%E7%A8%8B%E8%84%9A%E6%89%8B%E6%9E%B6%20%E3%80%90Maven%20%E6%9C%AC%E5%9C%B0%E7%89%88%E3%80%91.html</guid>
      <source url="https://cactusli.net/rss.xml">DDD 工程脚手架 【Maven 本地版】</source>
      <description>DDD 工程脚手架 【Maven 本地版】+ 一键式配置分布式环境 一、工程效果 1.工程框架 2.环境展示 3.Redis 管理 4.Mysql 管理 5.MQ 管理 6.JOB 管理 二、框架介绍 1.轻量版 2.标准本 三、操作说明 1.工程结构 2.框架安装 3.环境安装 四、项目下载 脚手架(轻量版)：https://gitcode.net/...</description>
      <category>DDD 技术体系</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>DDD 工程脚手架 【Maven 本地版】+ 一键式配置分布式环境</h2>
<h2>一、工程效果</h2>
<h3><strong>1.工程框架</strong></h3>
<h3>2.环境展示</h3>
<h3>3.Redis 管理</h3>
<h3>4.Mysql 管理</h3>
<h3><a class="header-anchor" href="#_5-mq-管理"><span></span></a><a href="http://5.MQ" target="_blank" rel="noopener noreferrer">5.MQ</a> 管理</h3>
<h3>6.JOB 管理</h3>
<h2>二、框架介绍</h2>
<h3><strong>1.轻量版</strong></h3>
<h3><strong>2.标准本</strong></h3>
<h2>三、操作说明</h2>
<h3><strong>1.工程结构</strong></h3>
<h3><strong>2.框架安装</strong></h3>
<h3><strong>3.环境安装</strong></h3>
<h2>四、项目下载</h2>
<blockquote>
<ul>
<li>脚手架(轻量版)：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-lite" target="_blank" rel="noopener noreferrer">https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-lite(opens new window)</a></li>
<li>脚手架(标准版)：<a href="https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-std" target="_blank" rel="noopener noreferrer">https://gitcode.net/KnowledgePlanet/road-map/xfg-frame-archetype-std</a></li>
</ul>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>自建内网穿透服务</title>
      <link>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1.html</link>
      <guid>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/%E8%87%AA%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1.html</guid>
      <source url="https://cactusli.net/rss.xml">自建内网穿透服务</source>
      <description>自建内网穿透服务 EasyTier 一个简单、安全、去中心化的内网穿透 VPN 组网方案，使用 Rust 语言和 Tokio 框架实现。 安装 下载预编译的二进制文件 访问 GitHub Release 页面 下载适用于您操作系统的二进制文件。Release 压缩包中同时包含命令行程序和图形界面程序。 通过 crates.io 安装 通过源码安装 快速...</description>
      <category>easyTier</category>
      <pubDate>Wed, 03 Apr 2024 15:36:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>自建内网穿透服务 EasyTier</h2>
<p>一个简单、安全、去中心化的内网穿透 VPN 组网方案，使用 Rust 语言和 Tokio 框架实现。</p>
<h2>安装</h2>
<ol>
<li>
<p><strong>下载预编译的二进制文件</strong></p>
<p>访问 <a href="https://github.com/KKRainbow/EasyTier/releases" target="_blank" rel="noopener noreferrer">GitHub Release 页面</a> 下载适用于您操作系统的二进制文件。Release 压缩包中同时包含命令行程序和图形界面程序。</p>
</li>
<li>
<p><strong>通过 <a href="http://crates.io" target="_blank" rel="noopener noreferrer">crates.io</a> 安装</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">cargo</span><span style="color:#98C379"> install</span><span style="color:#98C379"> easytier</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p><strong>通过源码安装</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">cargo</span><span style="color:#98C379"> install</span><span style="color:#D19A66"> --git</span><span style="color:#98C379"> https://github.com/KKRainbow/EasyTier.git</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
</ol>
<h2>快速开始</h2>
<blockquote>
<p>下文仅描述命令行工具的使用，图形界面程序可参考下述概念自行配置。</p>
</blockquote>
<p>确保已按照 <a href="https://github.com/EasyTier/EasyTier/blob/main/README_CN.md#%E5%AE%89%E8%A3%85" target="_blank" rel="noopener noreferrer">安装指南</a> 安装 EasyTier，并且 easytier-core 和 easytier-cli 两个命令都已经可用。</p>
<h3>双节点组网</h3>
<p>假设双节点的网络拓扑如下</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240511172954755.png" alt="image-20240511172954755" tabindex="0" loading="lazy"><figcaption>image-20240511172954755</figcaption></figure>
<p>在节点 A 上执行：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> easytier-core</span><span style="color:#D19A66"> --ipv4</span><span style="color:#D19A66"> 10.144.144.1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>命令执行成功会有如下打印。</p>
<p>[<img src="https://lixuanfengs.github.io/blog-images/vp/web/image-2.png" alt="alt text" loading="lazy"></p>
<p>在节点 B 执行</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> easytier-core</span><span style="color:#D19A66"> --ipv4</span><span style="color:#D19A66"> 10.144.144.2</span><span style="color:#D19A66"> --peers</span><span style="color:#98C379"> udp://22.1.1.1:11010</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>测试联通性</p>
<p>两个节点应成功连接并能够在虚拟子网内通信</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">ping</span><span style="color:#D19A66"> 10.144.144.2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>使用 easytier-cli 查看子网中的节点信息</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">easytier-cli</span><span style="color:#98C379"> peer</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><a href="https://github.com/EasyTier/EasyTier/blob/main/assets/image.png" target="_blank" rel="noopener noreferrer"><img src="https://lixuanfengs.github.io/blog-images/vp/web/image.png" alt="alt text" tabindex="0" loading="lazy"></a><figcaption>alt text</figcaption></figure>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">easytier-cli</span><span style="color:#98C379"> route</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><a href="https://github.com/EasyTier/EasyTier/blob/main/assets/image-1.png" target="_blank" rel="noopener noreferrer"><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-1.png" alt="alt text" tabindex="0" loading="lazy"></a><figcaption>alt text</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/image-20240511172954755.png" type="image/png"/>
    </item>
    <item>
      <title>Idea部署服务的使用</title>
      <link>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Idea%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Idea%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://cactusli.net/rss.xml">Idea部署服务的使用</source>
      <description>IntelliJ IDEA Deployment 教程 简介 在本教程中，我们将讨论如何使用IntelliJ IDEA的Deployment模块来简化部署过程。Deployment模块允许您将本地开发的应用程序代码部署到远程服务器上。 前提条件 安装了IntelliJ IDEA 基本的IDEA使用知识 访问权限到远程服务器（FTP/SFTP/FTPS等...</description>
      <category>devops</category>
      <pubDate>Wed, 03 Apr 2024 14:06:01 GMT</pubDate>
      <content:encoded><![CDATA[<h2>IntelliJ IDEA Deployment 教程</h2>
<p><strong>简介</strong></p>
<p>在本教程中，我们将讨论如何使用IntelliJ IDEA的Deployment模块来简化部署过程。Deployment模块允许您将本地开发的应用程序代码部署到远程服务器上。</p>
<h2>前提条件</h2>
<ul>
<li>安装了IntelliJ IDEA</li>
<li>基本的IDEA使用知识</li>
<li>访问权限到远程服务器（FTP/SFTP/FTPS等）</li>
</ul>
<h2>配置Deployment模块</h2>
<h3>1. 打开Deployment设置</h3>
<ul>
<li>
<p>在IDEA中，点击 <code>File</code> 菜单</p>
</li>
<li>
<p>选择 <code>Settings</code></p>
</li>
<li>
<p>在设置或首选项窗口中，导航到 <code>Build, Execution, Deployment</code> &gt; <code>Deployment</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/PixPin_2024-05-07_17-15-04.gif" alt="PixPin_2024-05-07_17-15-04" tabindex="0" loading="lazy"><figcaption>PixPin_2024-05-07_17-15-04</figcaption></figure>
</li>
</ul>
<h3>2. 具体配置</h3>
<p>在IDEA中，点击 <code>File</code> 菜单，选择 <code>Settings</code>，在设置或首选项窗口中，导航到 <code>Build, Execution, Deployment</code> &gt; <code>Deployment</code>。然后配置服务器详情、映射本地与远程路径、测试连接。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240507173411359.png" alt="image-20240507173411359" tabindex="0" loading="lazy"><figcaption>image-20240507173411359</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240507173713331.png" alt="image-20240507173713331" tabindex="0" loading="lazy"><figcaption>image-20240507173713331</figcaption></figure>
<h2>部署项目</h2>
<h3>1. 手动上转文件到服务器</h3>
<p>选中文件，鼠标点击右键找到选项 <code>Deployment</code> &gt;<code> Upload to cactus</code>, 等待上传文件完毕。在配置的服务器指定目录下就能看到上传的文件。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/recording.gif" alt="recording" tabindex="0" loading="lazy"><figcaption>recording</figcaption></figure>
<h3>2. 自动上传</h3>
<p>在 <code>Tools</code> 菜单中的 <code>Deployment</code> 设置中，您可以启用 <code>Automatic Upload</code>（保存时自动上传）功能，以确保最新的更改总是被部署。</p>
<p>选择 <code>Sync with Deployed to...</code> 来查看哪些文件将被上传或下载。</p>
<h2>监听启动项目</h2>
<p>编写监听上传的文件，当上传的文件<code>inode</code>号码和修改时间戳改变时，进行项目的重新部署运行。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /sg-work/cactus-server/start.sh</span><span style="color:#ABB2BF"> &lt;&lt;-</span><span style="color:#ABB2BF">'EOF'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379"># 定义一个部署函数</span></span>
<span class="line"><span style="color:#98C379">deploy_cactus_server() {</span></span>
<span class="line"><span style="color:#98C379">    echo "Start deploying..."</span></span>
<span class="line"><span style="color:#98C379">    sh deploy.sh</span></span>
<span class="line"><span style="color:#98C379">    echo "Deployment done."</span></span>
<span class="line"><span style="color:#98C379">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379"># 定义一个通用的检查和处理文件变化的函数</span></span>
<span class="line"><span style="color:#98C379">handle_file_change() {</span></span>
<span class="line"><span style="color:#98C379">    local file_path="$1"</span></span>
<span class="line"><span style="color:#98C379">    local target_path="$2"</span></span>
<span class="line"><span style="color:#98C379">    local dockerfile_path="$3"</span></span>
<span class="line"><span style="color:#98C379">    local is_directory="$4"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">    while true; do</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        if [ -d "$file_path" ] || [ -f "$file_path" ]; then</span></span>
<span class="line"><span style="color:#98C379">            echo "File/Directory has been replaced or modified at $file_path."</span></span>
<span class="line"><span style="color:#98C379">            sleep 15  # 等待上传完成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">            if [ "$is_directory" = "yes" ]; then</span></span>
<span class="line"><span style="color:#98C379">                # 对于目录，使用 rsync 进行同步</span></span>
<span class="line"><span style="color:#98C379">                rsync -av --delete "$file_path/" "$target_path/"</span></span>
<span class="line"><span style="color:#98C379">                echo "Directory synchronized: $target_path"</span></span>
<span class="line"><span style="color:#98C379">                rm -r "$file_path" &amp;&amp; echo "Old directory removed: $file_path" || { echo "Failed to remove old directory: $target_path"; continue; }</span></span>
<span class="line"><span style="color:#98C379">            else</span></span>
<span class="line"><span style="color:#98C379">                # 对于文件，使用原子操作进行替换</span></span>
<span class="line"><span style="color:#98C379">                rm "$target_path"</span></span>
<span class="line"><span style="color:#98C379">                mv "$file_path" "$target_path.tmp" &amp;&amp; \</span></span>
<span class="line"><span style="color:#98C379">                mv -f "$target_path.tmp" "$target_path" &amp;&amp; \</span></span>
<span class="line"><span style="color:#98C379">                echo "New file moved to $target_path"</span></span>
<span class="line"><span style="color:#98C379">            fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">            if [ -n "$dockerfile_path" ]; then</span></span>
<span class="line"><span style="color:#98C379">                docker build -t cactus-server -f "$dockerfile_path" . &amp;&amp; echo "Docker build successful." || { echo "Docker build failed."; continue; }</span></span>
<span class="line"><span style="color:#98C379">                deploy_cactus_server</span></span>
<span class="line"><span style="color:#98C379">            fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">          else</span></span>
<span class="line"><span style="color:#98C379">                 echo "File or directory does not exist. $file_path."</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        sleep 15</span></span>
<span class="line"><span style="color:#98C379">    done</span></span>
<span class="line"><span style="color:#98C379">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379"># 启动后端服务模块的监听</span></span>
<span class="line"><span style="color:#98C379">handle_file_change "/home/cactus/cactus-server.jar" "/sg-work/cactus-server/cactus-server.jar" "/sg-work/cactus-server/Dockerfile" "no" &amp;</span></span>
<span class="line"><span style="color:#98C379"># 启动后端页面模块的监听</span></span>
<span class="line"><span style="color:#98C379">handle_file_change "/home/cactus/dist-dev" "/sg-work/nginx/html/cactus-ui-admin-vue3" "" "yes" &amp;</span></span>
<span class="line"><span style="color:#98C379"># 启动门户页面模块的监听</span></span>
<span class="line"><span style="color:#98C379">handle_file_change "/home/cactus/dist" "/sg-work/nginx/html/cactus-ui-web-vue2" "" "yes" &amp;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">wait</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">EOF</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>查看进程使用内存：</p>
<ul>
<li>cat /proc/[ PID ]/status | grep 'VmSize|VmRSS' | awk '{print $1, $2/1024/1024, "GB"}'</li>
</ul>
</blockquote>
<p>后台启动此监听脚本</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">nohup</span><span style="color:#98C379"> /sg-work/cactus-server/start.sh</span><span style="color:#ABB2BF"> &gt; </span><span style="color:#98C379">/sg-work/cactus-server/start.log</span><span style="color:#ABB2BF"> 2&gt;&amp;1 &amp;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>动态查看输出的日志</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">tail</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> /sg-work/cactus-server/start.log</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>编写停止以上脚本的命令</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 使用 pgrep 寻找特定脚本的 PID</span></span>
<span class="line"><span style="color:#E06C75">PID</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">ps</span><span style="color:#98C379"> aux</span><span style="color:#ABB2BF">  | </span><span style="color:#61AFEF">grep</span><span style="color:#98C379"> /sg-work/cactus-server/[s]tart.sh</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">awk</span><span style="color:#98C379"> '{print $2}'</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 检查是否找到了 PID</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#ABB2BF"> [ </span><span style="color:#56B6C2">-z</span><span style="color:#98C379"> "</span><span style="color:#E06C75">$PID</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> ]; </span><span style="color:#C678DD">then</span></span>
<span class="line"><span style="color:#56B6C2">    echo</span><span style="color:#98C379"> "No process found."</span></span>
<span class="line"><span style="color:#56B6C2">    exit</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#C678DD">else</span></span>
<span class="line"><span style="color:#56B6C2">    echo</span><span style="color:#98C379"> "Killing process with PID </span><span style="color:#E06C75">$PID</span><span style="color:#98C379">..."</span></span>
<span class="line"><span style="color:#56B6C2">    kill</span><span style="color:#D19A66"> -9</span><span style="color:#E06C75"> $PID</span></span>
<span class="line"><span style="color:#56B6C2">    echo</span><span style="color:#98C379"> "Process </span><span style="color:#E06C75">$PID</span><span style="color:#98C379"> has been killed."</span></span>
<span class="line"><span style="color:#C678DD">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2">exit</span><span style="color:#D19A66"> 0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>关于 Docker 的一些命令：</p>
<ul>
<li>删除个镜像：docker rmi $(docker images | grep cactus-server | awk '{print $3}')</li>
</ul>
<p>Docker 的层级缓存机制非常有效地帮助节省时间和资源，在文件或指令未变更的情况下，重新构建将不会改变镜像 ID。要管理和控制这种行为，你可以选择使用 <code>--no-cache</code> 选项来强制 Docker 进行全新的构建，或者在 Dockerfile 中做微小调整来触发新层的创建。</p>
</blockquote>
<h2>结论</h2>
<p>使用IntelliJ IDEA的Deployment模块可以大大简化远程服务器部署过程。一旦正确配置，您可以轻松同步代码，自动或手动部署更新。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/PixPin_2024-05-07_17-15-04.gif" type="image/gif"/>
    </item>
    <item>
      <title>使用 OAuth2.0 的几种方式</title>
      <link>https://cactusli.net/tutorial/OAuth2.0%20%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8%20OAuth2.0%20%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</link>
      <guid>https://cactusli.net/tutorial/OAuth2.0%20%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8%20OAuth2.0%20%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html</guid>
      <source url="https://cactusli.net/rss.xml">使用 OAuth2.0 的几种方式</source>
      <description>RFC 6749 OAuth 2.0 的标准是 RFC 6749 文件。该文件先解释了 OAuth 是什么。 OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。......资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。 这段话的意思就是，**OAuth 的核心就是向第三方应用颁发令牌。**然后，...</description>
      <category>OAuth2.0</category>
      <pubDate>Fri, 12 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>RFC 6749</h2>
<p>OAuth 2.0 的标准是 <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener noreferrer">RFC 6749</a> 文件。该文件先解释了 OAuth 是什么。</p>
<blockquote>
<p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。......资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p>
</blockquote>
<p>这段话的意思就是，**OAuth 的核心就是向第三方应用颁发令牌。**然后，RFC 6749 接着写道：</p>
<blockquote>
<p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）。</p>
</blockquote>
<p>也就是说，**OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。**下面就是这四种授权方式。</p>
<blockquote>
<ul>
<li>授权码（authorization-code）</li>
<li>隐藏式（implicit）</li>
<li>密码式（password）：</li>
<li>客户端凭证（client credentials）</li>
</ul>
</blockquote>
<p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p>
<h2>第一种授权方式：授权码</h2>
<p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p>
<p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p>
<p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://b.com/oauth/authorize?</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">response_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">code</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_ID</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">redirect_uri</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CALLBACK_URL</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">scope</span><span style="color:#56B6C2">=</span><span style="color:#98C379">read</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/3bf6164800a54ec86fed4cda4ad94c79.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://a.com/callback?</span><span style="color:#E06C75">code</span><span style="color:#56B6C2">=</span><span style="color:#98C379">AUTHORIZATION_CODE</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>code</code>参数就是授权码。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/f0ee84487acbbb6d39cc5082f36cf124.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://b.com/oauth/token?</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;  </span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_ID</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;  </span><span style="color:#E06C75">client_secret</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_SECRET</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;  </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">authorization_code</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;  </span><span style="color:#E06C75">code</span><span style="color:#56B6C2">=</span><span style="color:#98C379">AUTHORIZATION_CODE</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;  </span><span style="color:#E06C75">redirect_uri</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CALLBACK_URL</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/740d3ddeba01542873821d4d1305ffab.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; {    </span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"access_token"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"ACCESS_TOKEN"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"token_type"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"bearer"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"expires_in"</span><span style="color:#ABB2BF">:2592000,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"refresh_token"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"REFRESH_TOKEN"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"scope"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"read"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"uid"</span><span style="color:#ABB2BF">:100101,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#98C379">"info"</span><span style="color:#ABB2BF">:{</span><span style="color:#56B6C2">...</span><span style="color:#98C379">}</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; }</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/1dc31da50cae3cf77cbb2dabe4aadfb5.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2>第二种方式：隐藏式</h2>
<p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）"隐藏式"（implicit）。</strong></p>
<p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://b.com/oauth/authorize?</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">response_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">token</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_ID</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">redirect_uri</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CALLBACK_URL</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">scope</span><span style="color:#56B6C2">=</span><span style="color:#98C379">read</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p>
<p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://a.com/callback#</span><span style="color:#E06C75">token</span><span style="color:#56B6C2">=</span><span style="color:#98C379">ACCESS_TOKEN</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p>
<p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在"中间人攻击"的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/ce5e3e0634aa94482ee3fe68af2e0184.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p>
<h2>第三种方式：密码式</h2>
<p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为"密码式"（password）。</strong></p>
<p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://oauth.b.com/token?</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">password</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">username</span><span style="color:#56B6C2">=</span><span style="color:#98C379">USERNAME</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">password</span><span style="color:#56B6C2">=</span><span style="color:#98C379">PASSWORD</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_ID</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示"密码式"，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p>
<p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p>
<p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p>
<h2>第四种方式：凭证式</h2>
<p><strong>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</strong></p>
<p>第一步，A 应用在命令行向 B 发出请求。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://oauth.b.com/token?</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">client_credentials</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_ID</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_secret</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_SECRET</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p>
<p>第二步，B 网站验证通过以后，直接返回令牌。</p>
<p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p>
<h2>令牌的使用</h2>
<p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p>
<p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; curl -H </span><span style="color:#98C379">"Authorization: Bearer ACCESS_TOKEN"</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#98C379">"https://api.b.com"</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p>
<h2>更新令牌</h2>
<p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p>
<p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; https://b.com/oauth/token?</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">refresh_token</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_ID</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">client_secret</span><span style="color:#56B6C2">=</span><span style="color:#98C379">CLIENT_SECRET</span><span style="color:#ABB2BF">&amp;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;   </span><span style="color:#E06C75">refresh_token</span><span style="color:#56B6C2">=</span><span style="color:#98C379">REFRESH_TOKEN</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。B 网站验证通过以后，就会颁发新的令牌。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/3bf6164800a54ec86fed4cda4ad94c79.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>理解 OAuth2.0 是什么</title>
      <link>https://cactusli.net/tutorial/OAuth2.0%20%E6%95%99%E7%A8%8B/%E7%90%86%E8%A7%A3%20OAuth2.0%20%E6%98%AF%E4%BB%80%E4%B9%88.html</link>
      <guid>https://cactusli.net/tutorial/OAuth2.0%20%E6%95%99%E7%A8%8B/%E7%90%86%E8%A7%A3%20OAuth2.0%20%E6%98%AF%E4%BB%80%E4%B9%88.html</guid>
      <source url="https://cactusli.net/rss.xml">理解 OAuth2.0 是什么</source>
      <description>OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。 本文对OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为RFC 6749。 OAuth LogoOAuth Logo 一、应用场景 为了理解OAuth的适用场合，让我举一个假设的例子。 有一个&amp;quot;云冲印&amp;quot;的网站，可...</description>
      <category>OAuth2.0</category>
      <pubDate>Fri, 12 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<p><a href="http://en.wikipedia.org/wiki/OAuth" target="_blank" rel="noopener noreferrer">OAuth</a>是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。</p>
<p>本文对OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为<a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener noreferrer">RFC 6749</a>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/609e4de1f50b462b8bdfba37ac57714d.jpg" alt="OAuth Logo" tabindex="0" loading="lazy"><figcaption>OAuth Logo</figcaption></figure>
<h2>一、应用场景</h2>
<p>为了理解OAuth的适用场合，让我举一个假设的例子。</p>
<p>有一个"云冲印"的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让"云冲印"读取自己储存在Google上的照片。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/ec4a29109690c4102744e36747544bb9.jpg" alt="云冲印" tabindex="0" loading="lazy"><figcaption>云冲印</figcaption></figure>
<p>问题是只有得到用户的授权，Google才会同意"云冲印"读取这些照片。那么，"云冲印"怎样获得用户的授权呢？</p>
<p>传统方法是，用户将自己的Google用户名和密码，告诉"云冲印"，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。</p>
<blockquote>
<p>（1）"云冲印"为了后续的服务，会保存用户的密码，这样很不安全。</p>
<p>（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。</p>
<p>（3）"云冲印"拥有了获取用户储存在Google所有资料的权力，用户没法限制"云冲印"获得授权的范围和有效期。</p>
<p>（4）用户只有修改密码，才能收回赋予"云冲印"的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。</p>
<p>（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。</p>
</blockquote>
<p>OAuth就是为了解决上面这些问题而诞生的。</p>
<h2>二、名词定义</h2>
<p>在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。</p>
<blockquote>
<p>（1） <strong>Third-party application</strong>：第三方应用程序，本文中又称"客户端"（client），即上一节例子中的"云冲印"。</p>
<p>（2）<strong>HTTP service</strong>：HTTP服务提供商，本文中简称"服务提供商"，即上一节例子中的Google。</p>
<p>（3）<strong>Resource Owner</strong>：资源所有者，本文中又称"用户"（user）。</p>
<p>（4）<strong>User Agent</strong>：用户代理，本文中就是指浏览器。</p>
<p>（5）<strong>Authorization server</strong>：认证服务器，即服务提供商专门用来处理认证的服务器。</p>
<p>（6）<strong>Resource server</strong>：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。</p>
</blockquote>
<p>知道了上面这些名词，就不难理解，OAuth的作用就是让"客户端"安全可控地获取"用户"的授权，与"服务商提供商"进行互动。</p>
<h2>三、OAuth的思路</h2>
<p>OAuth在"客户端"与"服务提供商"之间，设置了一个授权层（authorization layer）。"客户端"不能直接登录"服务提供商"，只能登录授权层，以此将用户与客户端区分开来。"客户端"登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p>
<p>"客户端"登录授权层以后，"服务提供商"根据令牌的权限范围和有效期，向"客户端"开放用户储存的资料。</p>
<h2>四、运行流程</h2>
<p>OAuth 2.0的运行流程如下图，摘自RFC 6749。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/6a92a862da97a4692c755c7e186dfd07.jpg" alt="OAuth运行流程" tabindex="0" loading="lazy"><figcaption>OAuth运行流程</figcaption></figure>
<blockquote>
<p>（A）用户打开客户端以后，客户端要求用户给予授权。</p>
<p>（B）用户同意给予客户端授权。</p>
<p>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</p>
<p>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p>
<p>（E）客户端使用令牌，向资源服务器申请获取资源。</p>
<p>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p>
</blockquote>
<p>不难看出来，上面六个步骤之中，B是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。</p>
<p>下面一一讲解客户端获取授权的四种模式。</p>
<h2>五、客户端的授权模式</h2>
<p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<h2>六、授权码模式</h2>
<p>授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与"服务提供商"的认证服务器进行互动。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/8a16a81fbba3d6ba1002921bf6b4feff.jpg" alt="授权码模式" tabindex="0" loading="lazy"><figcaption>授权码模式</figcaption></figure>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）用户访问客户端，后者将前者导向认证服务器。</p>
<p>（B）用户选择是否给予客户端授权。</p>
<p>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。</p>
<p>（D）客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p>
<p>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p>
</blockquote>
<p>下面是上面这些步骤所需要的参数。</p>
<p>A步骤中，客户端申请认证的URI，包含以下参数：</p>
<ul>
<li>response_type：表示授权类型，必选项，此处的值固定为"code"</li>
<li>client_id：表示客户端的ID，必选项</li>
<li>redirect_uri：表示重定向URI，可选项</li>
<li>scope：表示申请的权限范围，可选项</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; GET /authorize?</span><span style="color:#E06C75">response_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">code</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">s6BhdRkqt3</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">state</span><span style="color:#56B6C2">=</span><span style="color:#98C379">xyz</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;         &amp;</span><span style="color:#E06C75">redirect_uri</span><span style="color:#56B6C2">=</span><span style="color:#98C379">https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span><span style="color:#61AFEF"> HTTP/1.1</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; Host: server.example.com</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>C步骤中，服务器回应客户端的URI，包含以下参数：</p>
<ul>
<li>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; HTTP/1.1 302 Found</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; Location: https://client.example.com/cb?</span><span style="color:#E06C75">code</span><span style="color:#56B6C2">=</span><span style="color:#98C379">SplxlOBeZQQYbYS6WxSbIA</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;           &amp;</span><span style="color:#E06C75">state</span><span style="color:#56B6C2">=</span><span style="color:#98C379">xyz</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：</p>
<ul>
<li>grant_type：表示使用的授权模式，必选项，此处的值固定为"authorization_code"。</li>
<li>code：表示上一步获得的授权码，必选项。</li>
<li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。</li>
<li>client_id：表示客户端ID，必选项。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt; POST /token HTTP/1.1</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; Host: server.example.com</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">authorization_code</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">code</span><span style="color:#56B6C2">=</span><span style="color:#98C379">SplxlOBeZQQYbYS6WxSbIA</span></span>
<span class="line"><span style="color:#ABB2BF">&gt; &amp;</span><span style="color:#E06C75">redirect_uri</span><span style="color:#56B6C2">=</span><span style="color:#98C379">https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>E步骤中，认证服务器发送的HTTP回复，包含以下参数：</p>
<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Content-Type: application/json;</span><span style="color:#E06C75">charset</span><span style="color:#56B6C2">=</span><span style="color:#98C379">UTF-8</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Cache-Control: no-store</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Pragma: no-cache</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      {</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#61AFEF">"access_token"</span><span style="color:#56B6C2">:</span><span style="color:#61AFEF">"2YotnFZFEjr1zCsicMWpAA"</span><span style="color:#61AFEF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"token_type"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"example"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"expires_in"</span><span style="color:#ABB2BF">:3600,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"refresh_token"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"tGzv3JOkF0XG5Qx2TlKWIA"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"example_parameter"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"example_value"</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      }</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>从上面代码可以看到，相关参数使用JSON格式发送（Content-Type: application/json）。此外，HTTP头信息中明确指定不得缓存。</p>
<h2>七、简化模式</h2>
<p>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/202e8e80d8b1740f38bde7a3d889e088.jpg" alt="简化模式" tabindex="0" loading="lazy"><figcaption>简化模式</figcaption></figure>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）客户端将用户导向认证服务器。</p>
<p>（B）用户决定是否给于客户端授权。</p>
<p>（C）假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌。</p>
<p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p>
<p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p>
<p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p>
<p>（G）浏览器将令牌发给客户端。</p>
</blockquote>
<p>下面是上面这些步骤所需要的参数。</p>
<p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<ul>
<li>response_type：表示授权类型，此处的值固定为"token"，必选项。</li>
<li>client_id：表示客户端的ID，必选项。</li>
<li>redirect_uri：表示重定向的URI，可选项。</li>
<li>scope：表示权限范围，可选项。</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;     GET /authorize?</span><span style="color:#E06C75">response_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">token</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">client_id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">s6BhdRkqt3</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">state</span><span style="color:#56B6C2">=</span><span style="color:#98C379">xyz</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;         &amp;</span><span style="color:#E06C75">redirect_uri</span><span style="color:#56B6C2">=</span><span style="color:#98C379">https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span><span style="color:#61AFEF"> HTTP/1.1</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;     Host: server.example.com</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>C步骤中，认证服务器回应客户端的URI，包含以下参数：</p>
<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      HTTP/1.1 302 Found</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Location: http://example.com/cb#</span><span style="color:#E06C75">access_token</span><span style="color:#56B6C2">=</span><span style="color:#98C379">2YotnFZFEjr1zCsicMWpAA</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;                &amp;</span><span style="color:#E06C75">state</span><span style="color:#56B6C2">=</span><span style="color:#98C379">xyz</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">token_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">example</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">expires_in</span><span style="color:#56B6C2">=</span><span style="color:#98C379">3600</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>在上面的例子中，认证服务器用HTTP头信息的Location栏，指定浏览器重定向的网址。注意，在这个网址的Hash部分包含了令牌。</p>
<p>根据上面的D步骤，下一步浏览器会访问Location指定的网址，但是Hash部分不会发送。接下来的E步骤，服务提供商的资源服务器发送过来的代码，会提取出Hash中的令牌。</p>
<h2>八、密码模式</h2>
<p>密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。</p>
<p>在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/1e7d96e9ed5ab025afd37c1ca97d1b39.jpg" alt="密码模式" tabindex="0" loading="lazy"><figcaption>密码模式</figcaption></figure>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）用户向客户端提供用户名和密码。</p>
<p>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。</p>
<p>（C）认证服务器确认无误后，向客户端提供访问令牌。</p>
</blockquote>
<p>B步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<ul>
<li>grant_type：表示授权类型，此处的值固定为"password"，必选项。</li>
<li>username：表示用户名，必选项。</li>
<li>password：表示用户的密码，必选项。</li>
<li>scope：表示权限范围，可选项。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      POST /token HTTP/1.1</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Host: server.example.com</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">password</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">username</span><span style="color:#56B6C2">=</span><span style="color:#98C379">johndoe</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">password</span><span style="color:#56B6C2">=</span><span style="color:#98C379">A3ddj3w</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>C步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Content-Type: application/json;</span><span style="color:#E06C75">charset</span><span style="color:#56B6C2">=</span><span style="color:#98C379">UTF-8</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Cache-Control: no-store</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Pragma: no-cache</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      {</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#61AFEF">"access_token"</span><span style="color:#56B6C2">:</span><span style="color:#61AFEF">"2YotnFZFEjr1zCsicMWpAA"</span><span style="color:#61AFEF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"token_type"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"example"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"expires_in"</span><span style="color:#ABB2BF">:3600,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"refresh_token"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"tGzv3JOkF0XG5Qx2TlKWIA"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"example_parameter"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"example_value"</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      }</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面代码中，各个参数的含义参见《授权码模式》一节。</p>
<p>整个过程中，客户端不得保存用户的密码。</p>
<h2>九、客户端模式</h2>
<p>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/062fff24b9564ca9e0cbf4f702af9ee6.jpg" alt="客户端模式" tabindex="0" loading="lazy"><figcaption>客户端模式</figcaption></figure>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。</p>
<p>（B）认证服务器确认无误后，向客户端提供访问令牌。</p>
</blockquote>
<p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<ul>
<li>grant<em>type：表示授权类型，此处的值固定为"client</em>credentials"，必选项。</li>
<li>scope：表示权限范围，可选项。</li>
</ul>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      POST /token HTTP/1.1</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Host: server.example.com</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">client_credentials</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>认证服务器必须以某种方式，验证客户端身份。</p>
<p>B步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Content-Type: application/json;</span><span style="color:#E06C75">charset</span><span style="color:#56B6C2">=</span><span style="color:#98C379">UTF-8</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Cache-Control: no-store</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Pragma: no-cache</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      {</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#61AFEF">"access_token"</span><span style="color:#56B6C2">:</span><span style="color:#61AFEF">"2YotnFZFEjr1zCsicMWpAA"</span><span style="color:#61AFEF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"token_type"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"example"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"expires_in"</span><span style="color:#ABB2BF">:3600,</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;        </span><span style="color:#98C379">"example_parameter"</span><span style="color:#ABB2BF">:</span><span style="color:#98C379">"example_value"</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      }</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
<p>上面代码中，各个参数的含义参见《授权码模式》一节。</p>
<h2>十、更新令牌</h2>
<p>如果用户访问的时候，客户端的"访问令牌"已经过期，则需要使用"更新令牌"申请一个新的访问令牌。</p>
<p>客户端发出更新令牌的HTTP请求，包含以下参数：</p>
<ul>
<li>grant<em>type：表示使用的授权模式，此处的值固定为"refresh</em>token"，必选项。</li>
<li>refresh_token：表示早前收到的更新令牌，必选项。</li>
<li>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。</li>
</ul>
<p>下面是一个例子。</p>
<blockquote>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&gt;      POST /token HTTP/1.1</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Host: server.example.com</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;      </span><span style="color:#E06C75">grant_type</span><span style="color:#56B6C2">=</span><span style="color:#98C379">refresh_token</span><span style="color:#ABB2BF">&amp;</span><span style="color:#E06C75">refresh_token</span><span style="color:#56B6C2">=</span><span style="color:#98C379">tGzv3JOkF0XG5Qx2TlKWIA</span></span>
<span class="line"><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/609e4de1f50b462b8bdfba37ac57714d.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>DDD 技术体系— 理论</title>
      <link>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E2%80%94%20%E7%90%86%E8%AE%BA.html</link>
      <guid>https://cactusli.net/tutorial/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/DDD%20%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB%E2%80%94%20%E7%90%86%E8%AE%BA.html</guid>
      <source url="https://cactusli.net/rss.xml">DDD 技术体系— 理论</source>
      <description>DDD 是什么？ DDD 是领域驱动设计（Domain-Driven Design）的缩写，这是一种主要软件开发方法，由 Eric Evans 在他的书《领域驱动设计：软件核心复杂性应对之道》（Domain-Driven Design: Tackling Complexity in the Heart of Software）中首次提出。DDD 主要关...</description>
      <category>DDD 技术体系</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>DDD 是什么？</h2>
<p>DDD 是领域驱动设计（Domain-Driven Design）的缩写，这是一种主要软件开发方法，由 Eric Evans 在他的书《领域驱动设计：软件核心复杂性应对之道》（Domain-Driven Design: Tackling Complexity in the Heart of Software）中首次提出。<strong>DDD 主要关注于创建与业务领域紧密相关的软件模型，以确保软件能够准确地解决实际问题。</strong></p>
<p>DDD 的核心理念包括以下几个方面：</p>
<ol>
<li>
<p><strong>领域模型（Domain Model）</strong>：</p>
<p>领域模型是对特定业务领域知识的精确表述，它包括业务中的实体（Entities）、值对象（Value Objects）、服务（Services）、聚合（Aggregates）、聚合根（Aggregate Roots）等概念。领域模型是DDD的核心，它反映了业务专家的语言和决策。</p>
</li>
<li>
<p><strong>统一语言（Ubiquitous Language）</strong>：</p>
<p>统一语言是开发团队与业务专家共同使用的语言，它在整个项目中保持一致。统一语言确保所有人都对业务概念有着相同的理解，减少沟通成本和误解。</p>
</li>
<li>
<p><strong>限界上下文（Bounded Context）</strong>：</p>
<p>限界上下文是明确界定的系统边界，在这个边界内部有一套统一的模型和语言。不同的限界上下文之间可能有不同的模型，它们通过上下文映射（Context Mapping）来进行交互和集成。</p>
</li>
<li>
<p><strong>聚合（Aggregate）</strong>：</p>
<p>聚合是一组相关对象的集合，它们被视为数据修改的单元。每个聚合都有一个聚合根，它是外部对象与聚合内部对象交互的唯一入口。</p>
</li>
<li>
<p><strong>领域服务（Domain Services）</strong>：</p>
<p>当某些行为不自然属于任何实体或值对象时，这些行为可以被定义为领域服务。领域服务通常表示领域中的一些操作或业务逻辑。</p>
</li>
<li>
<p><strong>应用服务（Application Services）</strong>：</p>
<p>应用服务是软件的一部分，它们协调领域对象来执行任务。它们负责应用程序的工作流程，但不包含业务规则或知识。</p>
</li>
<li>
<p><strong>基础设施（Infrastructure）</strong>：</p>
<p>基础设施包括为领域模型提供持久化机制（如数据库）、消息传递、应用程序的配置等技术组件。</p>
</li>
<li>
<p><strong>领域事件（Domain Events）</strong>：</p>
<p>领域事件是领域中发生的有意义的业务事件，它们可以触发其他子系统的反应或流程。</p>
</li>
</ol>
<p>DDD 的目标是通过将软件的关注点集中在核心领域上，并通过丰富的领域模型来管理复杂性，从而提高软件的质量和维护性。DDD 强调与业务专家的紧密合作，以确保软件解决方案能够准确反映业务需求。通过这种方法，软件开发团队可以创建出更加灵活、可扩展且与业务紧密结合的系统。</p>
<p>其中DDD所提到的软件设计方法涵盖了；范式、模型、框架、方法论，主要活动包括建模、测试、工程、开发、部署、维护。</p>
<p>软件设计方法是指一系列用于指导软件开发过程的原则、概念和实践。这些方法通常包括范式、模型、框架和方法论。下面我将分别介绍这些概念以及软件设计的主要活动。</p>
<h3><strong>范式 (Paradigms)</strong></h3>
<p>范式是指软件设计和开发的基本风格或哲学。它通常定义了编程的基本原则和模式。常见的软件设计范式包括：</p>
<ol>
<li><strong>结构化编程</strong>：强调程序结构的重要性，使用顺序、选择和循环控制结构。</li>
<li><strong>面向对象编程 (OOP)</strong>：基于对象的概念，将数据和处理数据的方法封装在一起。</li>
<li><strong>函数式编程</strong>：将计算视为数学函数的评估，避免状态改变和可变数据。</li>
<li><strong>事件驱动编程</strong>：以事件为中心，响应用户操作、消息或其他系统事件。</li>
</ol>
<h3><strong>模型 (Models)</strong></h3>
<p>模型是对软件系统的抽象表示，用于帮助理解、设计和测试系统。常用的软件设计模型包括：</p>
<ol>
<li><strong>UML (统一建模语言)</strong>：一套图形化的建模语言，用于描述、设计和文档化软件项目。</li>
<li><strong>ER模型 (实体-关系模型)</strong>：用于数据库设计，描述数据的实体及其之间的关系。</li>
<li><strong>状态机模型</strong>：描述系统可能的状态、事件和在这些事件发生时的转换。</li>
</ol>
<h3><strong>框架 (Frameworks)</strong></h3>
<p>框架是一套预先制定的代码库和组件，用于提供软件开发的骨架。框架通常定义了应用程序的结构，提供了一组通用的功能和模式，以便开发者可以专注于实现特定的业务逻辑。例如：</p>
<ol>
<li><strong>Spring Framework</strong>：一个用于Java应用程序的全面编程和配置模型。</li>
<li><strong>Ruby on Rails</strong>：一个用于快速开发Web应用程序的Ruby框架。</li>
<li><strong>Django</strong>：一个高级Python Web框架，鼓励快速开发和干净、实用的设计。</li>
</ol>
<h3><strong>方法论 (Methodologies)</strong></h3>
<p>方法论是指一套指导软件开发过程的规则和实践。它包括项目管理、开发流程、团队协作等方面。常见的软件开发方法论有：</p>
<ol>
<li><strong>敏捷开发</strong>：一种迭代和增量的开发方法，强调灵活性和客户合作。</li>
<li><strong>Scrum</strong>：一种敏捷开发框架，用于管理复杂的软件和产品开发。</li>
<li><strong>瀑布模型</strong>：一种线性顺序的开发方法，将项目分为不同阶段，每个阶段完成后才能进入下一个阶段。</li>
</ol>
<h3><strong>主要活动</strong></h3>
<p>软件设计的主要活动包括：</p>
<ol>
<li><strong>建模 (Modeling)</strong> ：通过创建模型来表示系统的不同方面，如使用UML图来描述系统架构。</li>
<li><strong>测试 (Testing)</strong> ：确保软件的质量，包括单元测试、集成测试、系统测试和验收测试。</li>
<li><strong>工程 (Engineering)</strong> ：应用工程原则和实践来构建软件，包括需求分析、设计、实现和测试。</li>
<li><strong>开发 (Development)</strong> ：编写代码和实现功能，将设计转化为实际的软件产品。</li>
<li><strong>部署 (Deployment)</strong> ：将软件发布到生产环境，使其可供用户使用。</li>
<li><strong>维护 (Maintenance)</strong> ：在软件发布后对其进行更新和改进，修复缺陷，提升性能和适应性。</li>
</ol>
<p>每个活动都是软件开发生命周期的重要组成部分，它们相互依赖，共同确保软件项目的成功。</p>
<h3><strong>维护 (Maintenance)</strong></h3>
<p>软件维护是在软件发布后进行的活动，包括以下几个方面：</p>
<ol>
<li><strong>纠错</strong>：修复软件中发现的缺陷或错误。</li>
<li><strong>适应性维护</strong>：修改软件以适应环境的变化，如操作系统升级、硬件更换等。</li>
<li><strong>完善性维护</strong>：增加新功能或提升性能，以满足用户新的或变化的需求。</li>
<li><strong>预防性维护</strong>：改进软件内部结构，以防止潜在的问题发生，提高软件的可维护性和可扩展性。</li>
</ol>
<p>软件维护是一个持续的过程，它确保软件能够长期有效地服务于用户。</p>
<h2>Domain 领域层都包含什么？</h2>
<h3><strong>Domain（领域）的概念</strong></h3>
<p>在DDD中，领域是指具体业务领域的知识、业务逻辑、数据以及业务规则的集合。它是软件要解决问题的业务环境，通常由一系列子领域组成，每个子领域代表业务中的一个特定部分。</p>
<h3><strong>领域的特性</strong></h3>
<ol>
<li><strong>业务中心</strong>：领域是围绕业务需求和业务规则构建的，它是软件设计的核心。</li>
<li><strong>模型驱动</strong>：领域模型是对业务知识的抽象，它通过领域实体、值对象、服务、聚合等概念来表达。</li>
<li><strong>语言一致性</strong>：领域模型的构建基于统一语言（Ubiquitous Language），这是开发团队与业务专家共同使用的语言，确保沟通无歧义。</li>
<li><strong>边界清晰</strong>：领域模型定义了清晰的边界，这些边界划分了不同的子领域和聚合，有助于管理复杂性和维护性。</li>
</ol>
<h3><strong>领域的用途</strong></h3>
<ol>
<li><strong>业务逻辑的封装</strong>：领域模型封装了业务逻辑，使得业务规则和数据操作集中管理，便于理解和维护。</li>
<li><strong>沟通工具</strong>：领域模型作为开发团队与业务专家之间的共同语言，有助于提高沟通效率，确保软件开发紧密跟随业务需求。</li>
<li><strong>软件设计的基础</strong>：领域模型是软件设计的基础，它指导着软件的架构和实现。</li>
</ol>
<h3><strong>实现手段</strong></h3>
<ol>
<li><strong>实体（Entity）</strong>：具有唯一标识的领域对象，代表业务中的实体。</li>
<li><strong>值对象（Value Object）</strong>：描述领域中的一些特性或概念，没有唯一标识，通常是不可变的。</li>
<li><strong>聚合（Aggregate）</strong>：一组相关的实体和值对象的集合，它们一起构成一个数据和业务规则的单元。</li>
<li><strong>领域服务（Domain Service）</strong>：在领域模型中执行特定业务逻辑的无状态服务，通常操作多个实体或聚合。</li>
<li><strong>领域事件（Domain Event）</strong>：表示领域中发生的重要业务事件，用于解耦系统的不同部分。</li>
<li><strong>仓储（Repository）</strong>：提供对聚合根的持久化操作，如保存和检索，通常与数据库交互。</li>
<li><strong>领域适配器（Domain Adapter）</strong>：领域适配器是适配器模式在DDD中的应用，它的目的是使得领域模型能够与外部系统或技术细节进行交互，而不会受到污染。</li>
<li><strong>工厂（Factory）</strong>：用于创建复杂的聚合或实体，封装创建逻辑。如 OpenAi项目、Lottery 项目都运用了工厂，也包括如 chatglm-sdk-java 的开发，就是会话模型结构用工厂对外提供服务。</li>
</ol>
<p>通过这些实现手段，DDD使得软件设计更加贴近业务需求，提高了软件的质量和可维护性。开发团队可以更好地理解业务逻辑，从而设计出更加健壮和灵活的系统。</p>
<h2>聚合、实体、值对象</h2>
<ul>
<li>
<p>聚合对象</p>
<ul>
<li>概念</li>
<li>特性</li>
<li>用途</li>
<li>实现手段</li>
</ul>
</li>
<li>
<p>实体</p>
<ul>
<li>概念</li>
<li>特性</li>
<li>用途</li>
<li>实现手段</li>
</ul>
</li>
<li>
<p>值对象</p>
<ul>
<li>概念</li>
<li>特性用途</li>
<li>实现手段</li>
<li>示例</li>
</ul>
</li>
</ul>
<p>在领域驱动设计（Domain-Driven Design, DDD）中，领域模型（Domain Model）是核心概念之一。领域模型是对现实世界中业务领域的抽象，它包含了业务领域的聚合（Aggregates）、实体（Entities）、值对象（Value Objects）等概念。</p>
<h3><strong>聚合对象</strong></h3>
<p>聚合是一组相关对象的集合，它们一起形成一个单一的单元。</p>
<h4><strong>概念</strong></h4>
<p>聚合是领域模型中的一个关键概念，它是一组具有内聚性的相关对象的集合，这些对象一起工作以执行某些业务规则或操作。聚合定义了一组对象的边界，这些对象可以被视为一个单一的单元进行处理。</p>
<p><strong>关键：聚合内实现事务一致性、聚合外实现最终一致性。</strong></p>
<h4><strong>特性</strong></h4>
<ol>
<li><strong>一致性边界</strong>：聚合确保其内部对象的状态变化是一致的。当对聚合内的对象进行操作时，这些操作必须保持聚合内所有对象的一致性。</li>
<li><strong>根实体</strong>：每个聚合都有一个根实体（Aggregate Root），它是聚合的入口点。根实体拥有一个全局唯一的标识符，其他对象通过根实体与聚合交互。</li>
<li><strong>事务边界</strong>：聚合也定义了事务的边界。在聚合内部，所有的变更操作应该是原子的，即它们要么全部成功，要么全部失败，以此来保证数据的一致性。</li>
</ol>
<h4><strong>用途</strong></h4>
<ol>
<li><strong>封装业务逻辑</strong>：聚合通过将相关的对象和操作封装在一起，提供了一个清晰的业务逻辑模型，有助于业务规则的实施和维护。</li>
<li><strong>保证一致性</strong>：聚合确保内部状态的一致性，通过定义清晰的边界和规则，聚合可以在内部强制执行业务规则，从而保证数据的一致性。</li>
<li><strong>简化复杂性</strong>：聚合通过组织相关的对象，简化了领域模型的复杂性。这有助于开发者更好地理解和扩展系统。</li>
</ol>
<h4><strong>实现手段</strong></h4>
<ol>
<li><strong>定义聚合根</strong>：选择合适的聚合根是实现聚合的第一步。聚合根应该是能够代表整个聚合的实体，并且拥有唯一标识。</li>
<li><strong>限制访问路径</strong>：只能通过聚合根来修改聚合内的对象，不允许直接修改聚合内部对象的状态，以此来维护边界和一致性。</li>
<li><strong>设计事务策略</strong>：在聚合内部实现事务一致性，确保操作要么全部完成，要么全部回滚。对于聚合之间的交互，可以采用领域事件或其他机制来实现最终一致性。</li>
<li><strong>封装业务规则</strong>：在聚合内部实现业务规则和逻辑，确保所有的业务操作都遵循这些规则。</li>
<li><strong>持久化</strong>：聚合根通常与数据持久化层交互，以保存聚合的状态。这通常涉及到对象-关系映射（ORM）或其他数据映射技术。</li>
</ol>
<p>通过这些实现手段，DDD中的聚合模型能够帮助开发者构建出既符合业务需求又具有良好架构设计的软件系统。</p>
<p>以下是一个简化的Java代码示例，展示了如何在DDD中实现一个聚合。在这个例子中，我们将创建一个简单的订单系统，其中包含订单聚合（Order Aggregate）和订单项（OrderItem）作为内部实体。订单聚合根（Order）将封装所有业务规则，并通过聚合根进行所有的交互。</p>
<p>首先，我们定义实体和值对象的基类：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//实体基类</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BaseEntity</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75"> id</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Long</span><span style="color:#61AFEF"> getId</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//值对象基类</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ValueObject</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //值对象通常是不可变的，所以没有setter方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们定义订单项（OrderItem）作为实体：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OrderItem</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> BaseEntity</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> productName</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> quantity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> price</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Order</span><span style="color:#61AFEF"> Item</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">StringproductName</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75;font-style:italic">intquantity</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75;font-style:italic">doubleprice</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">productName</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> productName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">quantity</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> quantity;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">price</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> price;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> getTotalPrice</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> quantity </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> price;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//省略getter和setter方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们定义订单聚合根（Order）：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">importjava</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ArrayList</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">importjava</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OrderAggregate</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> BaseEntity</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">OrderItem</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> orderItems</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> customerName</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> isPaid</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Order</span><span style="color:#61AFEF"> Aggregate</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> customerName</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">customerName</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> customerName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">orderItems</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">isPaid</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> addItem</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OrderItem</span><span style="color:#E06C75;font-style:italic"> item</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //业务规则：订单未支付时才能添加订单项</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#56B6C2">!</span><span style="color:#ABB2BF">isPaid){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        	orderItems</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(item);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span><span style="color:#C678DD">else</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        	throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalStateException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Can not add items to apaid order."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> double</span><span style="color:#61AFEF"> getTotal Amount</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#E5C07B"> orderItems</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">mapToDouble</span><span style="color:#ABB2BF">(OrderItem</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getTotalPrice).</span><span style="color:#61AFEF">sum</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> markAsPaid</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //业务规则：订单总金额必须大于0才能标记为已支付</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getTotalAmount</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            isPaid </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span><span style="color:#C678DD">else</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalStateException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Order total must begreater than 0 to bepaid."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//省略getter和setter方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以创建一个订单，并添加一些订单项：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Order</span><span style="color:#E06C75"> Demo</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //创建订单聚合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        OrderAggregate</span><span style="color:#E06C75"> orderAggregate</span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OrderAggregate</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"XiaoFuGe"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //添加订单项</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        orderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addItem</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> OrderItem</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"手机"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1000.00</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        orderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addItem</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> OrderItem</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"数据线"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">25.00</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //获取订单总金额</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Total amount:"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> orderAggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getTotalAmount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //标记订单为已支付</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        order </span><span style="color:#E5C07B">Aggregate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">markAsPaid</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们展示了如何在DDD中定义聚合根和实体，并且如何封装业务规则。订单聚合根（Order）确保了订单项（OrderItem）的一致性，并且只有通过聚合根才能修改订单的状态。这个例子还展示了如何在聚合内部实现事务一致性，例如，订单项只能在订单未支付时添加，订单必须有一个大于0的总金额才能标记为已支付。</p>
<h3><strong>实体</strong></h3>
<p>实体（Entity）在领域驱动设计（Domain-Driven Design, DDD）中是一个核心概念，用于表示具有唯一标识的领域对象。以下是实体的详细介绍：</p>
<h4><strong>概念</strong></h4>
<p>实体 = 唯一标识 + 状态属性 + 行为动作（功能），是DDD中的一个基本构建块，它代表了具有唯一标识的领域对象。实体不仅仅包含数据（状态属性），还包含了相关的行为（功能），并且它的标识在整个生命周期中保持不变。</p>
<h4><strong>特性</strong></h4>
<ol>
<li><strong>唯一标识</strong>：实体具有一个可以区分其他实体的标识符。这个标识符可以是一个ID、一个复合键或者是一个自然键，关键是它能够唯一地标识实体实例。</li>
<li><strong>领域标识</strong>：实体的标识通常来源于业务领域，例如用户ID、订单ID等。这些标识符在业务上有特定的含义，并且在系统中是唯一的。</li>
<li><strong>委派标识</strong>：在某些情况下，实体的标识可能是由ORM（对象关系映射）框架自动生成的，如数据库中的自增主键。这种标识符虽然可以唯一标识实体，但它并不直接来源于业务领域。</li>
</ol>
<h4><strong>用途</strong></h4>
<ol>
<li><strong>表达业务概念</strong>：实体用于在软件中表达具体的业务概念，如用户、订单、交易等。通过实体的属性和行为，可以描述这些业务对象的特征和能力。</li>
<li><strong>封装业务逻辑</strong>：实体不仅仅承载数据，还封装了业务规则和逻辑。这些逻辑包括验证数据的有效性、执行业务规则、计算属性值等。这样做的目的是保证业务逻辑的集中和一致性。</li>
<li><strong>保持数据一致性</strong>：实体负责维护自身的状态和数据一致性。它确保自己的属性和关联关系在任何时候都是正确和完整的，从而避免数据的不一致性。</li>
</ol>
<h4><strong>实现手段</strong></h4>
<p>在实现实体时，通常会采用以下手段：</p>
<ol>
<li><strong>定义实体类</strong>：在代码中定义一个类，该类包含实体的属性、构造函数、方法等。</li>
<li><strong>实现唯一标识</strong>：为实体类提供一个唯一标识的属性，如ID，并确保在实体的生命周期中这个标识保持不变。</li>
<li><strong>封装行为</strong>：在实体类中实现业务逻辑的方法，这些方法可以操作实体的状态，并执行相关的业务规则。</li>
<li><strong>使用ORM框架</strong>：利用ORM框架将实体映射到数据库表中，这样可以简化数据持久化的操作。</li>
<li><strong>实现领域服务</strong>：对于跨实体或跨聚合的操作，可以实现领域服务来处理这些操作，而不是在实体中直接实现。</li>
<li><strong>使用领域事件</strong>：当实体的状态发生变化时，可以发布领域事件，这样可以通知其他部分的系统进行相应的处理。</li>
</ol>
<p>通过上述手段，实体在DDD架构中扮演着重要的角色，它不仅代表了业务概念，还封装了业务逻辑，并通过其唯一标识确保了数据的一致性。</p>
<p>以下是一个简单的Java代码示例，展示了如何在领域驱动设计（DDD）中实现一个实体。我们将创建一个User实体，它代表了一个用户，具有唯一的用户ID、姓名和电子邮件地址，并且可以执行一些基本的行为。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.Objects</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.UUID</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//UserEntity实体类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> UserEntity</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //实体的唯一标识符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E06C75"> UUIDid</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //用户的状态属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> name</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> email</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //构造函数，用于创建实体实例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> User</span><span style="color:#61AFEF"> Entity</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UUID</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> email</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">id</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">email</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">email;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //可以在这里添加验证逻辑，确保创建的实体是有效的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //实体的行为方法，例如更新用户的姓名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> updateName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> newName</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //可以在这里添加业务规则，例如验证姓名的格式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> newName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //实体的行为方法，例如更新用户的电子邮件地址</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> updateEmail</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> newEmail</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //可以在这里添加业务规则，例如验证电子邮件地址的格式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">email</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">newEmail;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //Getter方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> UUID</span><span style="color:#61AFEF"> getId</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">   	 return</span><span style="color:#ABB2BF"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getName</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getEmail</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#ABB2BF"> email;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //实体的equals和hashCode方法，基于唯一标识符实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#56B6C2">==</span><span style="color:#ABB2BF">o)	</span><span style="color:#C678DD">return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(o</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#56B6C2">||</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">!=</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">())	</span><span style="color:#C678DD">return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        UserEntity</span><span style="color:#E06C75"> user</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (UserEntity)o;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> id</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">id</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hashCode</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#E5C07B"> Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hash</span><span style="color:#ABB2BF">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //toString方法，用于打印实体信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379">"UserEntity{"</span><span style="color:#56B6C2">+</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        "id="</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">id</span><span style="color:#56B6C2">+</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        ",name='"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">name</span><span style="color:#56B6C2">+</span><span style="color:#98C379">'</span><span style="color:#56B6C2">\'</span><span style="color:#98C379">'</span><span style="color:#56B6C2">+</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        ",email='"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">email</span><span style="color:#56B6C2">+</span><span style="color:#98C379">'</span><span style="color:#56B6C2">\'</span><span style="color:#98C379">'</span><span style="color:#56B6C2">+</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">        '}'</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//使用实体的示例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> UserEntityDemo</span><span style="color:#ABB2BF">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[]</span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //创建一个新的用户实体</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        UserEntity</span><span style="color:#E06C75"> user</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> UserEntity</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UUID</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">randomUUID</span><span style="color:#ABB2BF">(),</span><span style="color:#98C379">"XiaoFuGe"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"xiaofuge@qq.com"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //打印用户信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //更新用户的姓名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">updateName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"XiaoFuGe"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //打印更新后的用户信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //更新用户的电子邮件地址</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">updateEmail</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"xiaofuge@qq.com"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //打印更新后的用户信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，User类代表了用户实体，它有一个唯一的标识符id，这个标识符在实体的整个生命周期中保持不变。name和email是用户的状态属性，updateName和updateEmail是封装了业务逻辑的行为方法。equals和hashCode方法基于唯一标识符实现，以确保实体的正确比较和散列。UserDemo类演示了如何创建和使用User实体。</p>
<h3><strong>值对象</strong></h3>
<p>在领域驱动设计（Domain-Driven Design, DDD）中，值对象（Value Object）是一个核心概念，用于封装和表示领域中的概念，其特点是它们描述了领域中的某些属性或度量，但不具有唯一标识。</p>
<p>值对象 = 值 + 对象，用于描述对象属性的值，表示具体固定不变的属性值信息。</p>
<h4><strong>概念</strong></h4>
<p>值对象是由一组属性组成的，它们共同描述了一个领域概念。与实体（Entity）不同，值对象不需要有一个唯一的标识符来区分它们。值对象通常是不可变的，这意味着一旦创建，它们的状态就不应该改变。</p>
<h4><strong>特性</strong></h4>
<ol>
<li><strong>不可变性（Immutability）</strong>：值对象一旦被创建，它的状态就不应该发生变化。这有助于保证领域模型的一致性和线程安全性。</li>
<li><strong>等价性（Equality）</strong>：值对象的等价性不是基于身份或引用，而是基于对象的属性值。如果两个值对象的所有属性值都相等，那么这两个对象就被认为是等价的。</li>
<li><strong>替换性（Replaceability）</strong>：由于值对象是不可变的，任何需要改变值对象的操作都会导致创建一个新的值对象实例，而不是修改现有的实例。</li>
<li><strong>侧重于描述事物的状态</strong>：值对象通常用来描述事物的状态，而不是事物的唯一身份。</li>
<li><strong>可复用性（Reusability）</strong>：值对象可以在不同的领域实体或其他值对象中重复使用。</li>
</ol>
<h4><strong>用途</strong></h4>
<p>值对象的用途非常广泛，它们可以用来表示：</p>
<ol>
<li>金额和货币（如价格、工资、费用等）</li>
<li>度量和数据（如重量、长度、体积等）</li>
<li>范围或区间（如日期范围、温度区间等）</li>
<li>复杂的数学模型（如坐标、向量等）</li>
<li>任何其他需要封装的属性集合</li>
</ol>
<h4><strong>实现手段</strong></h4>
<p>在实现值对象时，通常会遵循以下几个步骤：</p>
<ol>
<li><strong>定义不可变类</strong>：确保类的所有属性都是私有的，并且只能通过构造函数来设置。</li>
<li><strong>重写equals和hashCode方法</strong>：这样可以确保值对象的等价性是基于它们的属性值，而不是对象的引用。</li>
<li><strong>提供只读访问器</strong>：只提供获取属性值的方法，不提供修改属性值的方法。</li>
<li><strong>使用工厂方法或构造函数创建实例</strong>：这有助于确保值对象的有效性和一致性。</li>
<li><strong>考虑序列化支持</strong>：如果值对象需要在网络上传输或存储到数据库中，需要提供序列化和反序列化的支持。</li>
</ol>
<h4><strong>示例</strong></h4>
<p>以订单状态为例，可以定义一个值对象来表示不同的状态：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> enum</span><span style="color:#E5C07B"> Order</span><span style="color:#E06C75"> StatusVO{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66">    PLACED</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"下单"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66">    PAID</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"支付"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66">    COMPLETED</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"完成"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66">    CANCELLED</span><span style="color:#E06C75">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"退单"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> code</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> description</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">    OrderStatusVO</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> code</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> description</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">code</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> code;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">description</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> description;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getCode</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#ABB2BF"> code;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getDescription</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#ABB2BF"> description;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //根据code获取对应的OrderStatus</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#61AFEF"> OrderStatusVOfromCode</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> code</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OrderStatusVO</span><span style="color:#E06C75"> status</span><span style="color:#C678DD">:</span><span style="color:#E5C07B">OrderStatusVO</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">values</span><span style="color:#ABB2BF">()){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">status</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getCode</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">==</span><span style="color:#ABB2BF">code){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            	return</span><span style="color:#ABB2BF"> status;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	throw</span><span style="color:#61AFEF"> newIllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Invalid code for OrderStatus:"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">code);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，OrderStatusVO是一个枚举类型的值对象，它封装了订单状态的代码和描述。它是不可变的，并且提供了基于属性值的等价性。通过定义一个枚举，我们可以确保订单状态的值是受限的，并且每个状态都有一个明确的含义。</p>
<p>在数据库中，订单状态可能会以整数形式存储（例如，0表示下单，1表示支付等）。在应用程序中，我们可以使用OrderStatusVO枚举来确保我们在代码中使用的是类型安全的值，而不是裸露的整数。这样可以减少错误，并提高代码的可读性和可维护性。</p>
<p>当需要将订单状态存储到数据库中时，我们可以存储枚举的code值。当从数据库中读取订单状态时，我们可以使用fromCode方法来将整数值转换回OrderStatusVO枚举，这样我们就可以在代码中使用丰富的枚举类型而不是简单的整数。</p>
<p>值对象也可以用来表示更复杂的结构，比如一个地址：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#E06C75"> classAddressVO	{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E06C75"> Stringstreet</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E06C75"> Stringcity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E06C75"> StringzipCode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E06C75"> Stringcountry</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">    publicAddress</span><span style="color:#E06C75">(Stringstreet</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">Stringcity</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">StringzipCode</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">Stringcountry){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //这里可以添加验证逻辑以确保地址的有效性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">street</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">street</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">city</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">city</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">zipCode</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">zipCode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">country</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">country</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //只读访问器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getStreet</span><span style="color:#E06C75">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">   	 returnstreet</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getCity</span><span style="color:#E06C75">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    	returncity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getZipCode</span><span style="color:#E06C75">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#E06C75"> zipCode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getCountry</span><span style="color:#E06C75">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#E06C75"> country</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //重写equals和hashCode方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> equals</span><span style="color:#E06C75">(Objecto){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#56B6C2">==</span><span style="color:#E06C75">o) </span><span style="color:#C678DD">return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75">(o</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#56B6C2">||</span><span style="color:#61AFEF">getClass</span><span style="color:#E06C75">()</span><span style="color:#56B6C2">!=</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#C678DD">return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    Address</span><span style="color:#E06C75"> address</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">(Address)o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> street</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">address</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">street</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    		city</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">address</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">city</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            zipCode</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">address</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">zipCode</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            country</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">address</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">country</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hashCode</span><span style="color:#E06C75">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#E5C07B"> Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hash</span><span style="color:#ABB2BF">(street,city,zipCode,country);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，AddressVO是一个不可变的值对象，它封装了一个地址的所有部分。它提供了只读访问器，并且重写了equals和hashCode方法以确保基于属性值的等价性。这样的设计有助于确保地址的一致性，并且可以在不同的实体之间重复使用，例如用户和商店都可能有地址。</p>
<p>总的来说，值对象是DDD中用于封装领域概念的重要工具，它们通过提供不可变性、基于属性的等价性和替换性来帮助构建一个清晰、一致和可维护的领域模型。</p>
<h2>仓储，封装持久化数据</h2>
<ul>
<li>
<p>特性</p>
</li>
<li>
<p>用途</p>
</li>
<li>
<p>实现手段</p>
</li>
<li>
<p>案例</p>
</li>
</ul>
<p>Repository（仓储）模式是一种设计模式，它用于将数据访问逻辑封装起来，使得领域层可以通过一个简单、一致的接口来访问聚合根或实体对象。这个模式的关键在于提供了一个抽象的接口，领域层通过这个接口与数据存储层进行交互，而不需要知道背后具体的实现细节。</p>
<h3><strong>特性</strong></h3>
<ol>
<li>封装持久化操作：Repository负责封装所有与数据源交互的操作，如创建、读取、更新和删除（CRUD）操作。这样，领域层的代码就可以避免直接处理数据库或其他存储机制的复杂性。</li>
<li>领域对象的集合管理：Repository通常被视为领域对象的集合，提供了查询和过滤这些对象的方法，使得领域对象的获取和管理更加方便。</li>
<li>抽象接口：Repository定义了一个与持久化机制无关的接口，这使得领域层的代码可以在不同的持久化机制之间切换，而不需要修改业务逻辑。</li>
</ol>
<h3><strong>用途</strong></h3>
<ol>
<li>数据访问抽象：Repository为领域层提供了一个清晰的数据访问接口，使得领域对象可以专注于业务逻辑的实现，而不是数据访问的细节。</li>
<li>领域对象的查询和管理：Repository使得对领域对象的查询和管理变得更加方便和灵活，支持复杂的查询逻辑。</li>
<li>领域逻辑与数据存储分离：通过Repository模式，领域逻辑与数据存储逻辑分离，提高了领域模型的纯粹性和可测试性。</li>
<li>优化数据访问：Repository实现可以包含数据访问的优化策略，如缓存、批处理操作等，以提高应用程序的性能。</li>
</ol>
<h3><strong>实现手段</strong></h3>
<p>在实践中，Repository模式通常通过以下方式实现：</p>
<ol>
<li>定义Repository接口：在领域层定义一个或多个Repository接口，这些接口声明了所需的数据访问方法。</li>
<li>实现Repository接口：在基础设施层或数据访问层实现这些接口，具体实现可能是使用ORM（对象关系映射）框架，如MyBatis、Hibernate等，或者直接使用数据库访问API，如JDBC等。</li>
<li>依赖注入：在应用程序中使用依赖注入（DI）来将具体的Repository实现注入到需要它们的领域服务或应用服务中。这样做可以进一步解耦领域层和数据访问层，同时也便于单元测试。</li>
<li>使用规范模式（Specification Pattern）：有时候，为了构建复杂的查询，可以结合使用规范模式，这是一种允许将业务规则封装为单独的业务逻辑单元的模式，这些单元可以被Repository用来构建查询。</li>
</ol>
<p>总之，Repository模式是DDD（领域驱动设计）中的一个核心概念，它有助于保持领域模型的聚焦和清晰，同时提供了灵活、可测试和可维护的数据访问策略。</p>
<h3><strong>案例</strong></h3>
<p>以下是一个简单的Java代码示例，展示了如何在DDD架构中实现Repository模式。在这个例子中，我们将创建一个简单的用户管理系统，其中包含用户实体和用户仓储接口，以及一个基于内存的仓储实现。</p>
<p>首先，我们定义一个用户实体：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75"> id</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> username</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> email</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数、getter和setter省略</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们定义用户仓储的接口：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> UserRepository</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    User</span><span style="color:#61AFEF"> findById</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Long</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">User</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> findAll</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> save</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">User</span><span style="color:#E06C75;font-style:italic"> user</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> delete</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">User</span><span style="color:#E06C75;font-style:italic"> user</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们提供一个基于内存的仓储实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> InMemoryUserRepository</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> UserRepository</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> User</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> database </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> AtomicLong</span><span style="color:#E06C75"> idGenerator </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicLong</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> User</span><span style="color:#61AFEF"> findById</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Long</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> database</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(id);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">User</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> findAll</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;(</span><span style="color:#E5C07B">database</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">values</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> save</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">User</span><span style="color:#E06C75;font-style:italic"> user</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setId</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">idGenerator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">incrementAndGet</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        database</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">(), user);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> delete</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">User</span><span style="color:#E06C75;font-style:italic"> user</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        database</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以在应用服务中使用这个仓储：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> UserService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> UserRepository</span><span style="color:#E06C75"> userRepository</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> UserService</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UserRepository</span><span style="color:#E06C75;font-style:italic"> userRepository</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">userRepository</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> userRepository;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> User</span><span style="color:#61AFEF"> getUserById</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Long</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> userRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">findById</span><span style="color:#ABB2BF">(id);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> createUser</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> username</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> email</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        User</span><span style="color:#E06C75"> newUser</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> User</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        newUser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setUsername</span><span style="color:#ABB2BF">(username);</span></span>
<span class="line"><span style="color:#E5C07B">        newUser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setEmail</span><span style="color:#ABB2BF">(email);</span></span>
<span class="line"><span style="color:#E5C07B">        userRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">save</span><span style="color:#ABB2BF">(newUser);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 其他业务逻辑方法...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用中，我们通常会使用依赖注入框架（如Spring）来自动注入仓储的实现。这里为了简单起见，我们可以手动创建服务和仓储的实例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Application</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        UserRepository</span><span style="color:#E06C75"> userRepository</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InMemoryUserRepository</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        UserService</span><span style="color:#E06C75"> userService</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UserService</span><span style="color:#ABB2BF">(userRepository);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        userService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">createUser</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"XiaoFuGe"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"xiaofuge@qq.com"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        User</span><span style="color:#E06C75"> user</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> userService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUserById</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"User found: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> user</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUsername</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子展示了Repository模式的基本结构和用法。在实际项目中，仓储的实现可能会连接到数据库，并使用ORM框架来处理数据持久化的细节。此外，仓储接口可能会包含更复杂的查询方法，以支持各种业务需求。</p>
<h2>适配(端口)，调用外部接口</h2>
<ul>
<li>
<p>概念</p>
</li>
<li>
<p>特性</p>
</li>
<li>
<p>用途</p>
</li>
<li>
<p>实现</p>
</li>
<li>
<p>案例</p>
</li>
</ul>
<p>在领域驱动设计（DDD）的上下文中，适配器（Adapter）模式扮演着至关重要的角色。适配器模式允许将不兼容的接口转换为另一个预期的接口，从而使原本由于接口不兼容而不能一起工作的类可以协同工作。在DDD中，适配器通常与端口（Port）概念结合使用，形成"端口和适配器"（Ports and Adapters）架构，也称为"六边形架构"（Hexagonal Architecture）。这种架构风格旨在将应用程序的核心逻辑与外部世界的交互解耦。</p>
<h3><strong>概念</strong></h3>
<p>Port 在这种架构中代表了应用程序的一个入口或出口点。它定义了一个与外部世界交互的接口，但不关心具体的实现细节。端口可以是驱动端口（Driving Ports，通常是输入端口）或被驱动端口（Driven Ports，通常是输出端口）。</p>
<h3><strong>特性</strong></h3>
<ol>
<li><strong>抽象性</strong>：端口提供了服务行为的抽象描述，明确了服务的功能和外部依赖。</li>
<li><strong>独立性</strong>：端口独立于具体实现，允许服务实现的灵活替换或扩展。</li>
<li><strong>灵活性</strong>：可以为同一端口提供不同的适配器实现，以适应不同的运行环境或需求。</li>
</ol>
<h3><strong>用途</strong></h3>
<ol>
<li><strong>标准定义</strong>：端口和适配器定义了服务的标准行为和外部依赖，提高了代码的可读性和可维护性。</li>
<li><strong>隔离变化</strong>：当外部系统变化时，只需更换或修改适配器，无需改动核心业务逻辑。</li>
<li><strong>促进测试</strong>：可以使用模拟适配器来测试核心逻辑，而不依赖真实的外部系统。</li>
</ol>
<h3><strong>实现</strong></h3>
<p>实现端口和适配器架构通常涉及以下步骤：</p>
<ol>
<li><strong>定义端口</strong>：在领域层定义清晰的接口，这些接口代表了应用程序与外部世界的交互点。</li>
<li><strong>创建适配器</strong>：在基础层或应用层实现适配器，这些适配器负责将端口的抽象操作转换为具体的外部调用。</li>
<li><strong>依赖倒置</strong>：应用程序的核心逻辑依赖于端口接口，而不是适配器的具体实现。这样，适配器可以随时被替换，而不影响核心逻辑。</li>
<li><strong>配置和组装</strong>：在应用程序启动时，根据需要将适配器与相应的端口连接起来。</li>
</ol>
<p>通过这种方式，DDD中的适配器模式有助于构建一个灵活、可维护且易于测试的系统。</p>
<h3><strong>案例</strong></h3>
<p>以下是一个简单的Java示例，展示了如何在DDD架构中实现适配器模式。在这个例子中，我们将创建一个简单的支付系统，其中包含一个支付端口和一个适配器，该适配器负责调用外部支付服务的接口。</p>
<p>首先，我们定义一个支付端口（Port），它是一个接口，描述了支付服务应该提供的操作：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> PaymentPort</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#61AFEF"> processPayment</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们创建一个适配器，它实现了支付端口，并负责调用外部支付服务的接口：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ExternalPaymentService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> makePayment</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这里是外部支付服务的具体调用逻辑</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Calling external payment service for amount: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> amount);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 假设支付总是成功</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> PaymentAdapter</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> PaymentPort</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> ExternalPaymentService</span><span style="color:#E06C75"> externalPaymentService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> PaymentAdapter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ExternalPaymentService</span><span style="color:#E06C75;font-style:italic"> externalPaymentService</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">externalPaymentService</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> externalPaymentService;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> processPayment</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用外部支付服务的接口</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> externalPaymentService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">makePayment</span><span style="color:#ABB2BF">(amount);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以在应用程序的核心逻辑中使用支付端口，而不依赖于适配器的具体实现。这样，如果将来需要更换外部支付服务，我们只需提供一个新的适配器实现即可：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> PaymentService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> PaymentPort</span><span style="color:#E06C75"> paymentPort</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> PaymentService</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">PaymentPort</span><span style="color:#E06C75;font-style:italic"> paymentPort</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">paymentPort</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> paymentPort;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> processUserPayment</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">paymentPort</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">processPayment</span><span style="color:#ABB2BF">(amount)) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Payment processed successfully."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Payment failed."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们在应用程序的启动或配置阶段组装这些组件：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Application</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建外部支付服务的实例</span></span>
<span class="line"><span style="color:#E5C07B">        ExternalPaymentService</span><span style="color:#E06C75"> externalPaymentService</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ExternalPaymentService</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建适配器的实例，注入外部支付服务</span></span>
<span class="line"><span style="color:#E5C07B">        PaymentAdapter</span><span style="color:#E06C75"> paymentAdapter</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> PaymentAdapter</span><span style="color:#ABB2BF">(externalPaymentService);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建支付服务的实例，注入适配器</span></span>
<span class="line"><span style="color:#E5C07B">        PaymentService</span><span style="color:#E06C75"> paymentService</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> PaymentService</span><span style="color:#ABB2BF">(paymentAdapter);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 处理用户支付</span></span>
<span class="line"><span style="color:#E5C07B">        paymentService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">processUserPayment</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100.0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，PaymentAdapter 负责调用外部的支付接口 ExternalPaymentService.makePayment。PaymentService 使用 PaymentPort 接口与外部世界交互，这样就实现了领域逻辑与外部服务之间的解耦。如果需要更换支付服务提供商，我们只需要实现一个新的 PaymentAdapter，而不需要修改 PaymentService 的代码。</p>
<h2>事件，触发异步消息</h2>
<ul>
<li>
<p>概念</p>
</li>
<li>
<p>特性</p>
</li>
<li>
<p>用途</p>
</li>
<li>
<p>实现</p>
<ul>
<li>领域层</li>
<li>基础层</li>
<li>触发器层/接口层</li>
</ul>
</li>
<li>
<p>案例</p>
</li>
</ul>
<p>在领域驱动设计（Domain-Driven Design, DDD）中，领域事件（Domain Events）是一种模型，用于表示领域中发生的有意义的事件。这些事件对业务来说是重要的，并且通常表示领域状态的变化。适配器（Adapter）在这个上下文中扮演着将领域事件与系统其他部分或外部系统连接起来的角色。</p>
<h3><strong>概念</strong></h3>
<p>领域事件是DDD中的一个关键概念，它代表了领域中发生的一个具有业务意义的事件。这些事件通常是由领域实体或聚合根的状态变化触发的。领域事件不仅仅是数据的变化，它们还承载了业务上下文和业务意图。</p>
<h3><strong>特性</strong></h3>
<ol>
<li><strong>意义明确</strong>：领域事件通常具有明确的业务含义，例如“用户已下单”、“商品已支付”等。</li>
<li><strong>不可变性</strong>：一旦领域事件被创建，它的状态就不应该被改变。这有助于确保事件的一致性和可靠性。</li>
<li><strong>时间相关性</strong>：领域事件通常包含事件发生的时间戳，这有助于追踪事件的顺序和时间线。</li>
<li><strong>关联性</strong>：领域事件可能与特定的领域实体或聚合根相关联，这有助于完成事件的上下文。</li>
<li><strong>可观察性</strong>：领域事件可以被其他部分的系统监听和响应，有助于实现系统间的解耦。</li>
</ol>
<h3><strong>用途</strong></h3>
<ol>
<li><strong>解耦</strong>：领域事件可以帮助系统内部或系统间的不同部分解耦，因为它们提供了一种基于事件的通信机制。</li>
<li><strong>业务逻辑触发</strong>：领域事件可以触发其他业务逻辑的执行，例如推送消息（优惠券到账）、更新其他聚合或生成数据流式报告等。</li>
<li><strong>事件溯源</strong>：领域事件可以用于实现事件溯源（Event Sourcing），这是一种存储系统状态变化的方法，通过重放事件来恢复系统状态。</li>
<li><strong>集成</strong>：领域事件可以用于系统与外部系统的集成，通过发布事件来通知外部系统领域中发生的变化。</li>
</ol>
<h3><strong>实现</strong></h3>
<h4>领域层</h4>
<ol>
<li><strong>定义事件接口</strong>：创建一个或多个接口来定义领域事件的结构和行为。</li>
<li><strong>创建领域事件类</strong>：基于定义的接口，实现具体的领域事件类，包含必要的属性和方法。</li>
<li><strong>触发领域事件</strong>：在领域逻辑中的适当位置，实例化并发布领域事件。</li>
</ol>
<h4>基础层</h4>
<ol>
<li><strong>实现领域接口</strong>：使用消息队列（如RocketMQ或RabbitMQ）来实现领域事件的发布和订阅机制。</li>
</ol>
<h4>触发器层/接口层</h4>
<ol>
<li><strong>监听领域事件消息</strong>：在系统的其他部分或外部系统中，监听领域事件并根据事件来执行相应的业务逻辑或集成逻辑。</li>
</ol>
<h3><strong>案例</strong></h3>
<p>以下是一个简单的Java事件消息场景案例代码，展示了如何在DDD架构中定义领域事件、发布事件以及如何通过适配器模式将事件传递给外部系统或服务。</p>
<p>首先，我们定义一个领域事件接口和一个具体的领域事件类：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> DomainEvent</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Date</span><span style="color:#61AFEF"> occurredOn</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OrderCreatedEvent</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> DomainEvent</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> orderId</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Date</span><span style="color:#E06C75"> occurredOn</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> OrderCreatedEvent</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> orderId</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">orderId</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> orderId;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">occurredOn</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Date</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Date</span><span style="color:#61AFEF"> occurredOn</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">occurredOn</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getOrderId</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> orderId;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们创建一个事件发布器接口和一个基于消息队列的实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> DomainEventPublisher</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> publish</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DomainEvent</span><span style="color:#E06C75;font-style:italic"> event</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MessageQueueEventPublisher</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> DomainEventPublisher</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 模拟消息队列客户端</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> MessageQueueClient</span><span style="color:#E06C75"> messageQueueClient</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MessageQueueEventPublisher</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">MessageQueueClient</span><span style="color:#E06C75;font-style:italic"> messageQueueClient</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messageQueueClient</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> messageQueueClient;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> publish</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DomainEvent</span><span style="color:#E06C75;font-style:italic"> event</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 将领域事件转换为消息并发送到消息队列</span></span>
<span class="line"><span style="color:#E5C07B">        messageQueueClient</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">send</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">serialize</span><span style="color:#ABB2BF">(event));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> serialize</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DomainEvent</span><span style="color:#E06C75;font-style:italic"> event</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 序列化事件对象为JSON或其他格式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这里简化为直接使用toString()</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> event</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MessageQueueClient</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> send</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> message</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 实际的消息发送逻辑</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Message sent to queue: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> message);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以在领域逻辑中触发领域事件：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OrderService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> DomainEventPublisher</span><span style="color:#E06C75"> eventPublisher</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> OrderService</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DomainEventPublisher</span><span style="color:#E06C75;font-style:italic"> eventPublisher</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">eventPublisher</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> eventPublisher;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> createOrder</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> orderId</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建订单的业务逻辑...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建并发布订单创建事件</span></span>
<span class="line"><span style="color:#E5C07B">        OrderCreatedEvent</span><span style="color:#E06C75"> event</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OrderCreatedEvent</span><span style="color:#ABB2BF">(orderId);</span></span>
<span class="line"><span style="color:#E5C07B">        eventPublisher</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">publish</span><span style="color:#ABB2BF">(event);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们模拟一个外部系统的适配器，它监听消息队列中的事件消息：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ExternalSystemAdapter</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> MessageQueueClient</span><span style="color:#E06C75"> messageQueueClient</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ExternalSystemAdapter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">MessageQueueClient</span><span style="color:#E06C75;font-style:italic"> messageQueueClient</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">messageQueueClient</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> messageQueueClient;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 假设这里有一个方法来监听消息队列</span></span>
<span class="line"><span style="color:#E5C07B">        messageQueueClient</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">onMessage</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">onEventReceived);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> onEventReceived</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> message</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 处理接收到的事件消息</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"External system received event: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> message);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 根据事件类型执行相应的逻辑</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，我们可以在应用程序中初始化这些组件并执行业务逻辑：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Application</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MessageQueueClient</span><span style="color:#E06C75"> messageQueueClient</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MessageQueueClient</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        DomainEventPublisher</span><span style="color:#E06C75"> eventPublisher</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MessageQueueEventPublisher</span><span style="color:#ABB2BF">(messageQueueClient);</span></span>
<span class="line"><span style="color:#E5C07B">        OrderService</span><span style="color:#E06C75"> orderService</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OrderService</span><span style="color:#ABB2BF">(eventPublisher);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 初始化外部系统适配器</span></span>
<span class="line"><span style="color:#E5C07B">        ExternalSystemAdapter</span><span style="color:#E06C75"> externalSystemAdapter</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ExternalSystemAdapter</span><span style="color:#ABB2BF">(messageQueueClient);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 执行业务逻辑，创建订单</span></span>
<span class="line"><span style="color:#E5C07B">        orderService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">createOrder</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"XFG1000900111199"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，当OrderService创建一个新订单时，它会发布一个OrderCreatedEvent。MessageQueueEventPublisher接收到这个事件，并将其发送到消息队列。ExternalSystemAdapter监听消息队列，并在接收到事件消息时执行相应的逻辑。</p>
<p>请注意，这个例子是为了演示目的而简化的。在实际应用中，你需要处理消息队列的连接、错误处理、事件的序列化和反序列化等复杂问题。</p>
<h2>领域服务，实现约定</h2>
<ul>
<li>
<p>概念</p>
</li>
<li>
<p>特性</p>
</li>
<li>
<p>用途</p>
</li>
<li>
<p>实现手段</p>
<ul>
<li>
<p>设计原则和模式</p>
</li>
<li>
<p>功能拆分</p>
</li>
<li>
<p>依赖抽象</p>
</li>
<li>
<p>协作和编排</p>
</li>
</ul>
</li>
<li>
<p>领域服务的实践建议</p>
<ul>
<li>
<p>识别领域服务</p>
</li>
<li>
<p>界限清晰</p>
</li>
<li>
<p>依赖注入</p>
</li>
<li>
<p>事务管理</p>
</li>
<li>
<p>测试和验证</p>
</li>
<li>
<p>文档和维护</p>
</li>
</ul>
</li>
<li>
<p>结论</p>
</li>
<li>
<p>案例</p>
</li>
</ul>
<h3><strong>概念</strong></h3>
<p>在领域驱动设计（Domain-Driven Design, DDD）的上下文中，领域服务（Domain Service）是一种封装了特定领域操作的服务。它是实现领域模型中的业务逻辑的一种手段，特别是当这些逻辑不适合归属于任何一个实体（Entity）或值对象（Value Object）时。领域服务通常用于实现跨越多个实体或值对象的行为，或者是那些不适合放在单个实体中的操作。</p>
<h3><strong>特性</strong></h3>
<ol>
<li>领域逻辑的封装：领域服务封装了领域特定的业务逻辑，这些逻辑通常涉及多个领域对象的交互。这种封装有助于保持实体和值对象的职责单一和清晰。</li>
<li>无状态：领域服务通常是无状态的，它们不保存任何业务数据，而是操作领域对象来完成业务逻辑。这有助于保持服务的可重用性和可测试性。</li>
<li>独立性：领域服务通常与特定的实体或值对象无关，它们提供了一种独立于领域模型的其他部分的方式来实现业务规则。</li>
<li>重用性：领域服务可以被不同的应用请求重用，例如不同的应用服务编排或领域事件处理器。</li>
<li>接口清晰：领域服务的接口应该清晰地反映其提供的业务能力，参数和返回值应该是领域对象或基本数据类型。</li>
</ol>
<h3><strong>用途</strong></h3>
<ol>
<li>当一个操作不属于任何一个实体或值对象时。</li>
<li>当一个操作需要协调多个实体或值对象时。</li>
<li>当实现某个业务规则需要访问基础设施层（如数据库、外部服务）时，可以通过领域服务来抽象这些操作，保持领域模型的纯粹性。</li>
</ol>
<h3><strong>实现手段</strong></h3>
<h4><strong>设计原则和模式</strong></h4>
<p>通过使用设计原则（如单一职责原则、开闭原则）和设计模式（如工厂、策略、模板、组合、责任链）对功能逻辑进行解耦，可以提高领域服务的灵活性和可维护性。</p>
<h4><strong>功能拆分</strong></h4>
<p>不应该只定义一个service接口，然后在实现类下编写所有的逻辑。相反，应该对功能进行子包的拆分，以保持领域服务的职责清晰和管理易于维护。</p>
<h4><strong>依赖抽象</strong></h4>
<p>领域服务应该依赖于抽象而不是具体的实现。这意味着领域服务应该通过接口与外部资源（如数据库、外部API）交互，而不是直接依赖于具体的实现。这样可以提高领域服务的可测试性和灵活性。</p>
<h4><strong>协作和编排</strong></h4>
<p>领域服务可能需要与其他领域服务或应用服务协作以完成复杂的业务操作。在这种情况下，应该设计清晰的协作和编排机制，以确保业务逻辑的正确性和一致性。</p>
<p>通过以上的概念、特性、用途和实现手段，领域服务在DDD架构中扮演着至关键的角色，它们是实现领域逻辑和维护领域模型完整性的重要组成部分。</p>
<h3><strong>领域服务的实践建议</strong></h3>
<p>在实践中，领域服务的设计和实现应遵循以下建议：</p>
<h4><strong>识别领域服务</strong></h4>
<p>在设计领域模型时，应该识别出那些不自然属于任何实体或值对象的行为，并将这些行为抽象为领域服务。这通常涉及到对业务规则的深入理解和分析。</p>
<h4><strong>界限清晰</strong></h4>
<p>确保领域服务的职责界限清晰。领域服务不应该变成大杂烩，承担过多的职责。每个领域服务应该专注于一个具体的业务能力或一组紧密相关的业务行为。</p>
<h4><strong>依赖注入</strong></h4>
<p>使用依赖注入（Dependency Injection, DI）来管理领域服务的依赖关系。这有助于保持领域服务的可测试性，并使其更容易与其他组件集成。</p>
<h4><strong>事务管理</strong></h4>
<p>虽然领域服务不直接管理事务，但它们可能会参与到事务性的操作中。在这种情况下，应该确保领域服务的操作可以与外部事务管理机制（如应用服务中的事务）协同工作。</p>
<h4><strong>测试和验证</strong></h4>
<p>领域服务应该通过单元测试和集成测试进行充分的测试。这有助于验证领域服务的行为符合预期，并确保在重构或扩展时不会破坏现有功能。</p>
<h4><strong>文档和维护</strong></h4>
<p>为领域服务编写清晰的文档，描述其职责、使用方式和与其他领域模型组件的交互。这有助于新团队成员理解和维护领域服务。</p>
<h3><strong>结论</strong></h3>
<p>领域服务在DDD架构中是实现领域逻辑的关键组件。它们提供了一种封装业务规则和协调领域对象行为的方式，同时保持了领域模型的清晰和聚焦。通过遵循DDD的原则和最佳实践，领域服务可以有效地支持复杂业务逻辑的实现，并促进软件系统的可维护性和可扩展性。</p>
<h3><strong>案例</strong></h3>
<p>以下是一个简化的Java示例，展示了如何在领域驱动设计（DDD）中实现领域服务。假设我们有一个银行应用程序，其中包含账户（Account）实体和转账（Transfer）的领域服务。</p>
<p>首先，我们定义账户实体：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Account</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> id</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> BigDecimal</span><span style="color:#E06C75"> balance</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> Account</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">BigDecimal</span><span style="color:#E06C75;font-style:italic"> balance</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">id</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> id;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">balance</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> balance;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getId</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> id;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> BigDecimal</span><span style="color:#61AFEF"> getBalance</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> balance;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> debit</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">BigDecimal</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">balance</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(amount) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Insufficient funds"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        balance </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> balance</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">subtract</span><span style="color:#ABB2BF">(amount);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> credit</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">BigDecimal</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        balance </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> balance</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(amount);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们定义转账领域服务：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TransferService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> AccountRepository</span><span style="color:#E06C75"> accountRepository</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> TransferService</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AccountRepository</span><span style="color:#E06C75;font-style:italic"> accountRepository</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">accountRepository</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> accountRepository;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> transfer</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> fromAccountId</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> toAccountId</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">BigDecimal</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Account</span><span style="color:#E06C75"> fromAccount</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> accountRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">findById</span><span style="color:#ABB2BF">(fromAccountId);</span></span>
<span class="line"><span style="color:#E5C07B">        Account</span><span style="color:#E06C75"> toAccount</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> accountRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">findById</span><span style="color:#ABB2BF">(toAccountId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (fromAccount </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#ABB2BF"> toAccount </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Account not found"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        fromAccount</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">debit</span><span style="color:#ABB2BF">(amount);</span></span>
<span class="line"><span style="color:#E5C07B">        toAccount</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">credit</span><span style="color:#ABB2BF">(amount);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        accountRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">save</span><span style="color:#ABB2BF">(fromAccount);</span></span>
<span class="line"><span style="color:#E5C07B">        accountRepository</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">save</span><span style="color:#ABB2BF">(toAccount);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们定义账户仓库接口：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> AccountRepository</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Account</span><span style="color:#61AFEF"> findById</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> save</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Account</span><span style="color:#E06C75;font-style:italic"> account</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以在应用服务层使用转账领域服务：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BankingApplicationService</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> TransferService</span><span style="color:#E06C75"> transferService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BankingApplicationService</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TransferService</span><span style="color:#E06C75;font-style:italic"> transferService</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">transferService</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> transferService;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> handleTransferRequest</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> fromAccountId</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> toAccountId</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">BigDecimal</span><span style="color:#E06C75;font-style:italic"> amount</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 这里可以添加额外的应用层逻辑，如验证、权限检查、事务管理等</span></span>
<span class="line"><span style="color:#E5C07B">        transferService</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transfer</span><span style="color:#ABB2BF">(fromAccountId, toAccountId, amount);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用中，AccountRepository 的实现将与数据库交互，TransferService 可能会涉及更复杂的业务规则，而 BankingApplicationService 将处理事务和安全性等跨领域服务的关注点。</p>
<p>请注意，这个例子是为了演示目的而简化的。在真实的系统中，你需要考虑事务管理、错误处理、日志记录、安全性等方面的问题。此外，依赖注入通常由框架（如Spring）处理，而不是手动创建服务实例。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Cactus-vue-pro 开发手册</title>
      <link>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Cactus-vue-pro%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.html</link>
      <guid>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Cactus-vue-pro%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C.html</guid>
      <source url="https://cactusli.net/rss.xml">Cactus-vue-pro 开发手册</source>
      <description>演示系统访问地址 http://192.168.1.218/ gitlab 代码仓库访问地址 新用户注册 dsfsdfsdfsdfdsfsdfsdfsdf i5103513459i5103513459 注册完成后需要登录管理员账号进行用户的审核 image-20230925103613099image-20230925103613099 image-2...</description>
      <category>cactus-vue-pro</category>
      <pubDate>Thu, 11 Apr 2024 10:54:20 GMT</pubDate>
      <content:encoded><![CDATA[<h2>演示系统访问地址</h2>
<p><a href="http://192.168.1.218/" target="_blank" rel="noopener noreferrer">http://192.168.1.218/</a></p>
<h2>gitlab 代码仓库访问地址</h2>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">http://192.168.1.19:8929/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2>新用户注册</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/dsfsdfsdfsdf.png" alt="dsfsdfsdfsdf" tabindex="0" loading="lazy"><figcaption>dsfsdfsdfsdf</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/i5103513459.png" alt="i5103513459" tabindex="0" loading="lazy"><figcaption>i5103513459</figcaption></figure>
<p>注册完成后需要登录管理员账号进行用户的审核</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925103613099.png" alt="image-20230925103613099" tabindex="0" loading="lazy"><figcaption>image-20230925103613099</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925103653752.png" alt="image-20230925103653752" tabindex="0" loading="lazy"><figcaption>image-20230925103653752</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925103740824.png" alt="image-20230925103740824" tabindex="0" loading="lazy"><figcaption>image-20230925103740824</figcaption></figure>
<p>等管理员审批通过后就可以直接登录了。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925103925878.png" alt="image-20230925103925878" tabindex="0" loading="lazy"><figcaption>image-20230925103925878</figcaption></figure>
<h3>配置公钥</h3>
<p>登录完成后把本地 公钥添加到自己的账户里，方便克隆提交项目代码或文件。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925104321903.png" alt="image-20230925104321903" tabindex="0" loading="lazy"><figcaption>image-20230925104321903</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925104417399.png" alt="image-20230925104417399" tabindex="0" loading="lazy"><figcaption>image-20230925104417399</figcaption></figure>
<p>查询或生成密钥的具体操作如下：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 如果本地之前创建过密钥直接运行(cat ~/.ssh/*.pub)</span></span>
<span class="line"><span style="color:#61AFEF">ssh-keygen</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> rsa</span><span style="color:#D19A66"> -b</span><span style="color:#D19A66"> 4096</span><span style="color:#D19A66"> -C</span><span style="color:#98C379"> "w****@163.com"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 一路回车</span></span>
<span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> ~/.ssh/</span></span>
<span class="line"><span style="color:#61AFEF">cat</span><span style="color:#98C379"> id_rsa.pub</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将密钥添加到 gitlba 上</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>创建项目</h3>
<p>密钥成功添加后，接下来开始创建项目。关联项目，测试拉取和提交代码。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925105027968.png" alt="image-20230925105027968" tabindex="0" loading="lazy"><figcaption>image-20230925105027968</figcaption></figure>
<p>可以根据自己的实际需求，创建符合新要求的项目，这里我选择创建个空的项目。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-202230925105042518.png" alt="image-202230925105042518" tabindex="0" loading="lazy"><figcaption>image-202230925105042518</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230925110606742.png" alt="image-20230925110606742" tabindex="0" loading="lazy"><figcaption>image-20230925110606742</figcaption></figure>
<p>Git全局设置</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> user.name</span><span style="color:#98C379"> "xuanfeng li"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> user.email</span><span style="color:#98C379"> "1183895890@qq.com"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建仓库</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> clone</span><span style="color:#98C379"> ssh://git@192.168.1.19:2224/cactusli/segen.git</span></span>
<span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> segen</span></span>
<span class="line"><span style="color:#61AFEF">touch</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "add README"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> main</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925111042421.png" alt="image-20230925111042421" tabindex="0" loading="lazy"><figcaption>image-20230925111042421</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925111058204.png" alt="image-20230925111058204" tabindex="0" loading="lazy"><figcaption>image-20230925111058204</figcaption></figure>
<p>推送一个已有的文件夹</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> existing_folder</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> init</span><span style="color:#D19A66"> --initial-branch=main</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> add</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> ssh://git@192.168.1.19:2224/cactusli/segen.git</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> .</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "Initial commit"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> main</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推送一个现有的Git存储库</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> existing_repo</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> rename</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> old-origin</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> add</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> ssh://git@192.168.1.19:2224/cactusli/segen.git</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#D19A66"> --all</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#D19A66"> --tags</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>克隆代码</h2>
<p>使用 <a href="http://www.iocoder.cn/categories/IDEA/?self" target="_blank" rel="noopener noreferrer">IDEA (opens new window)</a>克隆 <a href="https://github.com/YunaiV/ruoyi-vue-pro" target="_blank" rel="noopener noreferrer">http://192.168.1.19:8929/root/cactus-vue-pro.git</a>仓库的最新代码，并给该仓库一个 Star。</p>
<blockquote>
<p>注意：不建议使用 Eclipse，因为它没有支持 Lombok 和 Mapstruct 插件。</p>
</blockquote>
<p>克隆完成后，耐心等待 Maven 下载完相关的依赖。一定要注意：</p>
<p>① 默认情况下，使用 <code>master</code> 分支，它对应 JDK 8 + Spring Boot 2.7.18 版本。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240117162651217.png" alt="image-20240117162651217" tabindex="0" loading="lazy"><figcaption>image-20240117162651217</figcaption></figure>
<h2>启动后端项目</h2>
<p><a href="http://192.168.1.19:8929/root/cactus-vue-pro/-/tree/main/cactus-server" target="_blank" rel="noopener noreferrer"><code>cactus-server</code></a> 是后端项目，提供管理后台、用户 APP 的 RESTful API 接口。</p>
<h3>编译项目</h3>
<p>第一步，使用 IDEA 打开 Terminal 终端，在 <strong>根目录</strong> 下直接执行 <code>mvn clean install package '-Dmaven.test.skip=true'</code> 命令，将项目进行初始化的打包，预计需要 1 分钟左右。成功后，控制台日志如下：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">[INFO] BUILD SUCCESS</span></span>
<span class="line"><span style="color:#ABB2BF">[INFO]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/dsfsdfsdfsdf.png" type="image/png"/>
    </item>
    <item>
      <title>服务器基础环境配置</title>
      <link>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</link>
      <guid>https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</guid>
      <source url="https://cactusli.net/rss.xml">服务器基础环境配置</source>
      <description>Ubuntu 22 安装 JDK 17 在浏览器输入：Java Downloads | Oracle，选择 jdk17 进行下载。 image-20230920164316099image-20230920164316099 把下载完完成的 jdk-17_linux-x64_bin.tar.gz 包通过 ssh 客户端中 ftp 模块上传至服务器 /u...</description>
      <category>devops</category>
      <pubDate>Wed, 03 Apr 2024 14:06:01 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Ubuntu 22 安装 JDK 17</h2>
<p>在浏览器输入：<a href="https://www.oracle.com/java/technologies/downloads/#java17" target="_blank" rel="noopener noreferrer">Java Downloads | Oracle</a>，选择 jdk17 进行下载。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230920164316099.png" alt="image-20230920164316099" tabindex="0" loading="lazy"><figcaption>image-20230920164316099</figcaption></figure>
<p>把下载完完成的 <code>jdk-17_linux-x64_bin.tar.gz</code> 包通过 ssh 客户端中 ftp 模块上传至服务器 <code>/usr/local/src</code>  目录下 。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230920171314313.png" alt="image-20230920171314313" tabindex="0" loading="lazy"><figcaption>image-20230920171314313</figcaption></figure>
<p><strong>解压压 jdk 文件到指定目录下</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/src#</span><span style="color:#98C379"> tar</span><span style="color:#D19A66"> -zxf</span><span style="color:#E06C75"> $PWD</span><span style="color:#98C379">/jdk-17_linux-x64_bin.tar.gz</span><span style="color:#D19A66"> -C</span><span style="color:#98C379"> /usr/local/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230920172124024.png" alt="image-20230920172124024" tabindex="0" loading="lazy"><figcaption>image-20230920172124024</figcaption></figure>
<h3>配置环境</h3>
<p>使用如下命令打开文件</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local#</span><span style="color:#98C379"> vim</span><span style="color:#98C379"> ~/.bashrc</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果vim 打不开先 安装vim编辑器</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local#</span><span style="color:#98C379"> apt-get</span><span style="color:#98C379"> install</span><span style="color:#98C379"> vim</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>使用命令sudo vim ~/.bashrc，然后在文件末尾添加如下内容：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">export</span><span style="color:#E06C75"> JAVA_HOME</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">/</span><span style="color:#E06C75">usr</span><span style="color:#ABB2BF">/</span><span style="color:#E06C75">local</span><span style="color:#ABB2BF">/</span><span style="color:#E06C75">jdk-17</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">0</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">8</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#E06C75"> JRE_HOME</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">${</span><span style="color:#E06C75">JAVA_HOME</span><span style="color:#ABB2BF">}/</span><span style="color:#E06C75">jre</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#E06C75"> CLASSPATH</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">.:${</span><span style="color:#E06C75">JAVA_HOME</span><span style="color:#ABB2BF">}/</span><span style="color:#E06C75">lib</span><span style="color:#ABB2BF">:${</span><span style="color:#E06C75">JRE_HOME</span><span style="color:#ABB2BF">}/</span><span style="color:#E06C75">lib</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#E06C75"> PATH</span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF">${</span><span style="color:#E06C75">JAVA_HOME</span><span style="color:#ABB2BF">}/</span><span style="color:#E06C75">bin</span><span style="color:#ABB2BF">:</span><span style="color:#E06C75">$PATH</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后保存。输入以下命令, 令系统配置文件.bashrc立即生效 ：<code>source ~/.bashrc</code></p>
<p>在终端输入 <code>java -version</code> 出现如下信息代表 java 环境配置正确</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/jdk-17.0.8#</span><span style="color:#98C379"> java</span><span style="color:#D19A66"> -version</span></span>
<span class="line"><span style="color:#61AFEF">java</span><span style="color:#98C379"> version</span><span style="color:#98C379"> "17.0.8"</span><span style="color:#98C379"> 2023-07-18</span><span style="color:#98C379"> LTS</span></span>
<span class="line"><span style="color:#61AFEF">Java(TM</span><span style="color:#ABB2BF">) SE Runtime Environment (</span><span style="color:#61AFEF">build</span><span style="color:#98C379"> 17.0.8+9-LTS-211</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">Java</span><span style="color:#98C379"> HotSpot</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">TM</span><span style="color:#ABB2BF">) </span><span style="color:#98C379">64-Bit</span><span style="color:#98C379"> Server</span><span style="color:#98C379"> VM</span><span style="color:#ABB2BF"> (build </span><span style="color:#98C379">17.0.8+9-LTS-211,</span><span style="color:#98C379"> mixed</span><span style="color:#98C379"> mode,</span><span style="color:#98C379"> sharing</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Ubuntu 22 安装 docker</h2>
<h3>卸载旧版本</h3>
<p>在安装 Docker 引擎之前，您必须首先确保任何 将卸载冲突的软件包。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/opt#</span><span style="color:#98C379"> for</span><span style="color:#98C379"> pkg</span><span style="color:#98C379"> in</span><span style="color:#98C379"> docker.io</span><span style="color:#98C379"> docker-doc</span><span style="color:#98C379"> docker-compose</span><span style="color:#98C379"> podman-docker</span><span style="color:#98C379"> containerd</span><span style="color:#98C379"> runc</span><span style="color:#ABB2BF">; </span><span style="color:#C678DD">do</span><span style="color:#61AFEF"> sudo</span><span style="color:#98C379"> apt-get</span><span style="color:#98C379"> remove</span><span style="color:#E06C75"> $pkg</span><span style="color:#ABB2BF">; </span><span style="color:#C678DD">done</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>安装 docker 脚本</h3>
<ol>
<li>
<p>设置 Docker 的 Apt 存储库。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># Add Docker's official GPG key:</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> apt-get</span><span style="color:#98C379"> update</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> apt-get</span><span style="color:#98C379"> install</span><span style="color:#98C379"> ca-certificates</span><span style="color:#98C379"> curl</span><span style="color:#98C379"> gnupg</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> install</span><span style="color:#D19A66"> -m</span><span style="color:#D19A66"> 0755</span><span style="color:#D19A66"> -d</span><span style="color:#98C379"> /etc/apt/keyrings</span></span>
<span class="line"><span style="color:#61AFEF">curl</span><span style="color:#D19A66"> -fsSL</span><span style="color:#98C379"> https://download.docker.com/linux/ubuntu/gpg</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> gpg</span><span style="color:#D19A66"> --dearmor</span><span style="color:#D19A66"> -o</span><span style="color:#98C379"> /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> chmod</span><span style="color:#98C379"> a+r</span><span style="color:#98C379"> /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># Add the repository to Apt sources:</span></span>
<span class="line"><span style="color:#56B6C2">echo</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#98C379">  "deb [arch="</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">dpkg</span><span style="color:#D19A66"> --print-architecture</span><span style="color:#ABB2BF">)</span><span style="color:#98C379">" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </span><span style="color:#56B6C2">\</span></span>
<span class="line"><span style="color:#98C379">  "</span><span style="color:#ABB2BF">$(</span><span style="color:#56B6C2">.</span><span style="color:#98C379"> /etc/os-release</span><span style="color:#ABB2BF"> &amp;&amp; </span><span style="color:#56B6C2">echo</span><span style="color:#98C379"> "</span><span style="color:#E06C75">$VERSION_CODENAME</span><span style="color:#98C379">"</span><span style="color:#ABB2BF">)</span><span style="color:#98C379">" stable"</span><span style="color:#ABB2BF"> | </span><span style="color:#56B6C2">\</span></span>
<span class="line"><span style="color:#61AFEF">  sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /etc/apt/sources.list.d/docker.list</span><span style="color:#ABB2BF"> &gt; </span><span style="color:#98C379">/dev/null</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> apt-get</span><span style="color:#98C379"> update</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>安装 Docker 软件包。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/opt#</span><span style="color:#98C379">  apt-get</span><span style="color:#98C379"> install</span><span style="color:#98C379"> docker-ce</span><span style="color:#98C379"> docker-ce-cli</span><span style="color:#98C379"> containerd.io</span><span style="color:#98C379"> docker-buildx-plugin</span><span style="color:#98C379"> docker-compose-plugin</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div></li>
<li>
<p>通过运行  <code>docker version</code> 引擎安装是否成功，如果出现以下内容代表安装成功。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">Client:</span><span style="color:#98C379"> Docker</span><span style="color:#98C379"> Engine</span><span style="color:#98C379"> -</span><span style="color:#98C379"> Community</span></span>
<span class="line"><span style="color:#61AFEF"> Version:</span><span style="color:#D19A66">           24.0.6</span></span>
<span class="line"><span style="color:#61AFEF"> API</span><span style="color:#98C379"> version:</span><span style="color:#D19A66">       1.43</span></span>
<span class="line"><span style="color:#61AFEF"> Go</span><span style="color:#98C379"> version:</span><span style="color:#98C379">        go1.20.7</span></span>
<span class="line"><span style="color:#61AFEF"> Git</span><span style="color:#98C379"> commit:</span><span style="color:#98C379">        ed223bc</span></span>
<span class="line"><span style="color:#61AFEF"> Built:</span><span style="color:#98C379">             Mon</span><span style="color:#98C379"> Sep</span><span style="color:#D19A66">  4</span><span style="color:#98C379"> 12:31:44</span><span style="color:#D19A66"> 2023</span></span>
<span class="line"><span style="color:#61AFEF"> OS/Arch:</span><span style="color:#98C379">           linux/amd64</span></span>
<span class="line"><span style="color:#61AFEF"> Context:</span><span style="color:#98C379">           default</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">Server:</span><span style="color:#98C379"> Docker</span><span style="color:#98C379"> Engine</span><span style="color:#98C379"> -</span><span style="color:#98C379"> Community</span></span>
<span class="line"><span style="color:#61AFEF"> Engine:</span></span>
<span class="line"><span style="color:#61AFEF">  Version:</span><span style="color:#D19A66">          24.0.6</span></span>
<span class="line"><span style="color:#61AFEF">  API</span><span style="color:#98C379"> version:</span><span style="color:#D19A66">      1.43</span><span style="color:#ABB2BF"> (minimum </span><span style="color:#98C379">version</span><span style="color:#D19A66"> 1.12</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">  Go</span><span style="color:#98C379"> version:</span><span style="color:#98C379">       go1.20.7</span></span>
<span class="line"><span style="color:#61AFEF">  Git</span><span style="color:#98C379"> commit:</span><span style="color:#98C379">       1a79695</span></span>
<span class="line"><span style="color:#61AFEF">  Built:</span><span style="color:#98C379">            Mon</span><span style="color:#98C379"> Sep</span><span style="color:#D19A66">  4</span><span style="color:#98C379"> 12:31:44</span><span style="color:#D19A66"> 2023</span></span>
<span class="line"><span style="color:#61AFEF">  OS/Arch:</span><span style="color:#98C379">          linux/amd64</span></span>
<span class="line"><span style="color:#61AFEF">  Experimental:</span><span style="color:#D19A66">     false</span></span>
<span class="line"><span style="color:#61AFEF"> containerd:</span></span>
<span class="line"><span style="color:#61AFEF">  Version:</span><span style="color:#D19A66">          1.6.24</span></span>
<span class="line"><span style="color:#61AFEF">  GitCommit:</span><span style="color:#98C379">        61f9fd88f79f081d64d6fa3bb1a0dc71ec870523</span></span>
<span class="line"><span style="color:#61AFEF"> runc:</span></span>
<span class="line"><span style="color:#61AFEF">  Version:</span><span style="color:#D19A66">          1.1.9</span></span>
<span class="line"><span style="color:#61AFEF">  GitCommit:</span><span style="color:#98C379">        v1.1.9-0-gccaecfc</span></span>
<span class="line"><span style="color:#61AFEF"> docker-init:</span></span>
<span class="line"><span style="color:#61AFEF">  Version:</span><span style="color:#D19A66">          0.19.0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
</ol>
<p><strong>在 opt 目录下创建 shell 脚本把上面的脚本进行统一运行</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 使用touch命令创建一个空文件</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/opt#</span><span style="color:#98C379"> touch</span><span style="color:#98C379"> ubuntu22_docker_install.sh</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 使用chmod命令赋予文件执行权限</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/opt#</span><span style="color:#98C379"> chmod</span><span style="color:#98C379"> +x</span><span style="color:#98C379"> ubuntu22_docker_install.sh</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>完整脚本内容如下 ubuntu22_docker_install.sh</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">#!/bin/bash</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这个脚本用于在Ubuntu上安装Docker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 添加Docker的官方GPG密钥:</span></span>
<span class="line"><span style="color:#61AFEF">apt-get</span><span style="color:#98C379"> update</span></span>
<span class="line"><span style="color:#61AFEF">apt-get</span><span style="color:#98C379"> install</span><span style="color:#98C379"> ca-certificates</span><span style="color:#98C379"> curl</span><span style="color:#98C379"> gnupg</span></span>
<span class="line"><span style="color:#61AFEF">install</span><span style="color:#D19A66"> -m</span><span style="color:#D19A66"> 0755</span><span style="color:#D19A66"> -d</span><span style="color:#98C379"> /etc/apt/keyrings</span></span>
<span class="line"><span style="color:#61AFEF">curl</span><span style="color:#D19A66"> -fsSL</span><span style="color:#98C379"> https://download.docker.com/linux/ubuntu/gpg</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> gpg</span><span style="color:#D19A66"> --dearmor</span><span style="color:#D19A66"> -o</span><span style="color:#98C379"> /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"><span style="color:#61AFEF">chmod</span><span style="color:#98C379"> a+r</span><span style="color:#98C379"> /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将仓库添加到Apt源中:</span></span>
<span class="line"><span style="color:#56B6C2">echo</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#98C379">  "deb [arch="</span><span style="color:#ABB2BF">$(</span><span style="color:#61AFEF">dpkg</span><span style="color:#D19A66"> --print-architecture</span><span style="color:#ABB2BF">)</span><span style="color:#98C379">" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu </span><span style="color:#56B6C2">\</span></span>
<span class="line"><span style="color:#98C379">  "</span><span style="color:#ABB2BF">$(</span><span style="color:#56B6C2">.</span><span style="color:#98C379"> /etc/os-release</span><span style="color:#ABB2BF"> &amp;&amp; </span><span style="color:#56B6C2">echo</span><span style="color:#98C379"> "</span><span style="color:#E06C75">$VERSION_CODENAME</span><span style="color:#98C379">"</span><span style="color:#ABB2BF">)</span><span style="color:#98C379">" stable"</span><span style="color:#ABB2BF"> | </span><span style="color:#56B6C2">\</span></span>
<span class="line"><span style="color:#61AFEF">  sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /etc/apt/sources.list.d/docker.list</span><span style="color:#ABB2BF"> &gt; </span><span style="color:#98C379">/dev/null</span></span>
<span class="line"><span style="color:#61AFEF">apt-get</span><span style="color:#98C379"> update</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 安装Docker及相关组件:</span></span>
<span class="line"><span style="color:#61AFEF">apt-get</span><span style="color:#98C379"> install</span><span style="color:#98C379"> docker-ce</span><span style="color:#98C379"> docker-ce-cli</span><span style="color:#98C379"> containerd.io</span><span style="color:#98C379"> docker-buildx-plugin</span><span style="color:#98C379"> docker-compose-plugin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 查看 Docker 版本信息:</span></span>
<span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379">  version</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>离线安装docker</h3>
<p>参考Docker官方文档：<br>
Install Docker Engine on Ubuntu | Docker Documentation<br>
Jumpstart your client-side server applications with Docker Engine on Ubuntu. This guide details prerequisites and multiple methods to install.<br>
<a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/install/ubuntu/</a></p>
<p>1.访问下列链接，选择对应的Ubuntu版本：</p>
<p><a href="https://download.docker.com/linux/ubuntu/dists/" target="_blank" rel="noopener noreferrer">https://download.docker.com/linux/ubuntu/dists/</a></p>
<p>2.访问问 <code>pool/stable/ ，然后选择对应的CPU架构</code> (<code>amd64</code>, <code>armhf</code>, <code>arm64</code>, or <code>s390x</code>)，如Ubuntu 22.04 amd64链接：<a href="https://download.docker.com/linux/ubuntu/dists/jammy/pool/stable/amd64/" target="_blank" rel="noopener noreferrer">Index of linux/ubuntu/dists/jammy/pool/stable/amd64/</a></p>
<p>3.下载下列dep文件</p>
<ul>
<li><code>containerd.io_&lt;version&gt;_&lt;arch&gt;.deb</code></li>
<li><code>docker-ce_&lt;version&gt;_&lt;arch&gt;.deb</code></li>
<li><code>docker-ce-cli_&lt;version&gt;_&lt;arch&gt;.deb</code></li>
<li><code>docker-buildx-plugin_&lt;version&gt;_&lt;arch&gt;.deb</code></li>
<li><code>docker-compose-plugin_&lt;version&gt;_&lt;arch&gt;.deb</code></li>
</ul>
<p>4.使用下列命令安装</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> tar</span><span style="color:#D19A66"> -zxvf</span><span style="color:#98C379"> Ubuntu22_Docker_离线安装包.tar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> dpkg</span><span style="color:#D19A66"> -i</span><span style="color:#98C379"> ./containerd.io_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">versio</span><span style="color:#ABB2BF">n&gt;</span><span style="color:#98C379">_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">arc</span><span style="color:#ABB2BF">h&gt;</span><span style="color:#98C379">.deb</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#98C379">  ./docker-ce_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">versio</span><span style="color:#ABB2BF">n&gt;</span><span style="color:#98C379">_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">arc</span><span style="color:#ABB2BF">h&gt;</span><span style="color:#98C379">.deb</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#98C379">  ./docker-ce-cli_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">versio</span><span style="color:#ABB2BF">n&gt;</span><span style="color:#98C379">_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">arc</span><span style="color:#ABB2BF">h&gt;</span><span style="color:#98C379">.deb</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#98C379">  ./docker-buildx-plugin_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">versio</span><span style="color:#ABB2BF">n&gt;</span><span style="color:#98C379">_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">arc</span><span style="color:#ABB2BF">h&gt;</span><span style="color:#98C379">.deb</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#98C379">  ./docker-compose-plugin_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">versio</span><span style="color:#ABB2BF">n&gt;</span><span style="color:#98C379">_</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">arc</span><span style="color:#ABB2BF">h&gt;</span><span style="color:#98C379">.deb</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.启动docker</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> service</span><span style="color:#98C379"> docker</span><span style="color:#98C379"> start</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>6.设置docker自动启动</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> systemctl</span><span style="color:#98C379"> enable</span><span style="color:#98C379"> docker.service</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>7.同步本地时间</p>
<ol>
<li>
<p><strong>更新系统时间：</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> timedatectl</span><span style="color:#98C379"> set-ntp</span><span style="color:#98C379"> on</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这会启用网络时间协议（NTP）同步，使系统自动从网络服务器获取时间。</p>
</li>
<li>
<p><strong>选择上海时区：</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> timedatectl</span><span style="color:#98C379"> set-timezone</span><span style="color:#98C379"> Asia/Shanghai</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这会将系统时区设置为上海。</p>
</li>
<li>
<p><strong>检查时间和时区设置：</strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> timedatectl</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>确保输出中的 "Time zone" 显示为 "Asia/Shanghai"。</p>
</li>
</ol>
<p>这样，你的系统时间就会被同步到上海的时间，并且自动与 NTP 服务器同步。</p>
<p>请注意，这些操作需要管理员权限，因此可能需要使用 <code>sudo</code> 命令执行。如果系统上尚未安装 NTP，你可能需要首先安装它，可以使用以下命令：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> apt</span><span style="color:#98C379"> update</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sudo</span><span style="color:#98C379"> apt</span><span style="color:#98C379"> install</span><span style="color:#D19A66"> -y</span><span style="color:#98C379"> ntp</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述命令将确保 NTP 工具安装在系统上，然后你可以执行同步时间的步骤。</p>
<h3>配置镜像加速</h3>
<div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /etc/docker</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /etc/docker/daemon.json</span><span style="color:#ABB2BF"> &lt;&lt;-</span><span style="color:#ABB2BF">'EOF'</span></span>
<span class="line"><span style="color:#98C379">{</span></span>
<span class="line"><span style="color:#98C379">  "log-driver": "json-file",</span></span>
<span class="line"><span style="color:#98C379">  "log-opts": {</span></span>
<span class="line"><span style="color:#98C379">    "max-size": "500m",</span></span>
<span class="line"><span style="color:#98C379">    "max-file": "3"</span></span>
<span class="line"><span style="color:#98C379">  },</span></span>
<span class="line"><span style="color:#98C379">  "registry-mirrors": ["https://avz7ojgz.mirror.aliyuncs.com"]</span></span>
<span class="line"><span style="color:#98C379">}</span></span>
<span class="line"><span style="color:#ABB2BF">EOF</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> systemctl</span><span style="color:#98C379"> daemon-reload</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> systemctl</span><span style="color:#98C379"> restart</span><span style="color:#98C379"> docker</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>在<code>daemon.json</code>文件中添加<code>log-driver</code>和<code>log-opts</code>参数，设置<code>max-size</code>和<code>max-file</code>。例如，设置单个日志文件的最大大小为500MB，并且最多保留3个日志文件</p>
</blockquote>
<h3>docker容器时区修改</h3>
<p>复制宿主机下面的zoneinfo文件到容器内</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> cp</span><span style="color:#98C379"> /usr/share/zoneinfo/</span><span style="color:#98C379"> aca1a3850163:/usr/share/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>进去容器</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> exec</span><span style="color:#D19A66"> -it</span><span style="color:#98C379"> nstr-minio</span><span style="color:#98C379"> /bin/bash</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>在容器内设置时区，不用重启容器即可更改时间时区设置</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">ln</span><span style="color:#D19A66"> -sf</span><span style="color:#98C379"> /usr/share/zoneinfo/Asia/Shanghai</span><span style="color:#98C379"> /etc/localtime</span></span>
<span class="line"><span style="color:#61AFEF">cho</span><span style="color:#98C379"> "Asia/Shanghai"</span><span style="color:#ABB2BF"> &gt; </span><span style="color:#98C379">/etc/timezone</span></span>
<span class="line"><span style="color:#61AFEF">date</span></span>
<span class="line"><span style="color:#61AFEF">Tue</span><span style="color:#98C379"> Mar</span><span style="color:#D19A66"> 15</span><span style="color:#98C379"> 16:47:19</span><span style="color:#98C379"> CST</span><span style="color:#D19A66"> 2022</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>安装开发环境</h3>
<h4><strong>创建容器需要挂载的目录和文件</strong></h4>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/jenkins</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gogs</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/mysql/conf</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/mysql/data</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/nginx</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/redis</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/nacos</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/seata</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/xxl-job</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/es</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/mq</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gitlab-data/config</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gitlab-data/logs</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gitlab-data/data</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建 mysql 配置文件：<code>vim /usr/local/dockerdata/mysql/conf/my.cnf</code></strong></p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">[mysqld]</span></span>
<span class="line"><span style="color:#61AFEF">skip-name-resolve</span></span>
<span class="line"><span style="color:#E06C75">character_set_server</span><span style="color:#56B6C2">=</span><span style="color:#98C379">utf8</span></span>
<span class="line"><span style="color:#E06C75">datadir</span><span style="color:#56B6C2">=</span><span style="color:#98C379">/var/lib/mysql</span></span>
<span class="line"><span style="color:#E06C75">server-id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">1010</span></span>
<span class="line"><span style="color:#E06C75">innodb_fast_shutdown</span><span style="color:#56B6C2">=</span><span style="color:#98C379">1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><strong>编写 docker-compose.yml 文件</strong></h4>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 使用 sudo 权限以管理员身份执行命令，并使用 tee 命令将数据写入文件</span></span>
<span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /usr/local/dockerdata/docker-compose.yml</span><span style="color:#ABB2BF"> &lt;&lt;-</span><span style="color:#ABB2BF">'EOF'</span></span>
<span class="line"><span style="color:#98C379">services:</span></span>
<span class="line"><span style="color:#98C379">  mysql:</span></span>
<span class="line"><span style="color:#98C379">    image: mysql:8.0.34</span></span>
<span class="line"><span style="color:#98C379">    container_name: mysql</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "3306:3306"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      TZ: Asia/Shanghai</span></span>
<span class="line"><span style="color:#98C379">      MYSQL_ROOT_PASSWORD: Nstr.234808</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/mysql/conf:/etc/mysql/conf.d"</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/mysql/data:/var/lib/mysql"</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">  gogs:</span></span>
<span class="line"><span style="color:#98C379">    image: gogs/gogs:0.13</span></span>
<span class="line"><span style="color:#98C379">    container_name: gogs</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "20022:22"</span></span>
<span class="line"><span style="color:#98C379">      - "3001:3000"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      TZ: Asia/Shanghai</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/gogs:/data"</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    depends_on:</span></span>
<span class="line"><span style="color:#98C379">      - mysql</span></span>
<span class="line"><span style="color:#98C379">  jenkins:</span></span>
<span class="line"><span style="color:#98C379">    image: jenkins/jenkins:2.414.2-lts-jdk17</span></span>
<span class="line"><span style="color:#98C379">    container_name: jenkins</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "2080:8080"</span></span>
<span class="line"><span style="color:#98C379">      - "50000:50000"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      - "JAVA_OPTS=-server -Xms1024m -Xmx1024m -XX:MetaspaceSize=100m -XX:MaxMetaspaceSize=512m"</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/jenkins:/var/jenkins_home"</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/bin/docker:/usr/bin/docker"</span></span>
<span class="line"><span style="color:#98C379">      - "/var/run/docker.sock:/var/run/docker.sock"</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">networks:</span></span>
<span class="line"><span style="color:#98C379">  new:</span></span>
<span class="line"><span style="color:#98C379">    name: segen</span></span>
<span class="line"><span style="color:#ABB2BF">EOF</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写完成后运行<code>docker compose up  -d</code>命令来启动应用容器，成功启动后 使用 <code>docker compose ps</code> 查看容器是否运行正常，如果启动正常会出现如图所示内容。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921162039463.png" alt="image-20230921162039463" tabindex="0" loading="lazy"><figcaption>image-20230921162039463</figcaption></figure>
<p><strong><code>docker compose</code> 一些常用命令</strong></p>
<ol>
<li><code>docker-compose up -d</code>：启动应用程序，创建并启动所有定义在 <code>docker-compose.yml</code> 文件中的容器。</li>
<li><code>docker-compose down</code>：停止并删除所有与应用程序相关的容器、网络和卷。通常与 <code>up</code> 配对使用，用于关闭应用程序。</li>
<li><code>docker-compose build</code>：根据 <code>Dockerfile</code> 构建应用程序所需的镜像。这个命令通常在修改了 Dockerfile 或其他构建上下文内容后使用。</li>
<li><code>docker-compose ps</code>：列出与应用程序关联的容器的状态信息，如容器 ID、名称、状态、端口映射等。</li>
<li><code>docker-compose logs</code>：查看应用程序中所有容器的日志输出。可以使用 <code>-f</code> 参数来实时监视日志。</li>
<li><code>docker-compose exec</code>：在运行中的容器中执行命令。例如：<code>docker-compose exec &lt;service-name&gt; &lt;command&gt;</code>。</li>
<li><code>docker-compose scale</code>：用于扩展指定服务的容器数量。例如：<code>docker-compose scale &lt;service-name&gt;=3</code> 将服务的容器数量扩展为 3 个。</li>
<li><code>docker-compose down -v</code>：停止并删除容器，同时删除关联的数据卷。</li>
<li><code>docker-compose restart</code>：重新启动已经运行的服务。</li>
<li><code>docker-compose pull</code>：从容器仓库拉取最新的镜像版本。</li>
<li><code>docker-compose config</code>：验证 <code>docker-compose.yml</code> 文件的语法，并将其解析成 Compose 文件的配置信息。</li>
</ol>
<p>这些是一些常见的 Docker Compose 命令，可以帮助你管理容器化应用程序的生命周期。你可以通过运行 <code>docker-compose --help</code> 命令来查看更多的命令选项和详细信息。</p>
<h4><strong>容器都正常启动后首先配置 gogs</strong></h4>
<p>访问：<a href="http://192.168.1.19:10880/" target="_blank" rel="noopener noreferrer">http://192.168.1.19:10880/</a> 安装页面，这里ip 替换成你的虚拟机的ip。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921164829752.png" alt="image-20230921164829752" tabindex="0" loading="lazy"><figcaption>image-20230921164829752</figcaption></figure>
<h5><strong>配置数据库</strong></h5>
<p>首先创建DataBase，并设置字符集utf8_general_ci。为了安全可以创建单独的用户用于处理gogs服务。</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF"># 创建一个名为 </span><span style="color:#98C379">"gogs"</span><span style="color:#ABB2BF"> 的数据库，使用 UTF-</span><span style="color:#D19A66">8</span><span style="color:#ABB2BF"> 字符集</span></span>
<span class="line"><span style="color:#C678DD">CREATE</span><span style="color:#C678DD"> DATABASE</span><span style="color:#61AFEF"> gogs</span><span style="color:#C678DD"> CHARACTER</span><span style="color:#C678DD"> SET</span><span style="color:#ABB2BF"> utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF"># 创建一个名为 </span><span style="color:#98C379">"gogs"</span><span style="color:#ABB2BF"> 的数据库用户，该用户只可以从任何 IP 地址进行访问，并设置密码为 </span><span style="color:#98C379">"Nstr.gogs808"</span></span>
<span class="line"><span style="color:#C678DD">CREATE</span><span style="color:#C678DD"> USER</span><span style="color:#ABB2BF"> '</span><span style="color:#61AFEF">gogs</span><span style="color:#ABB2BF">'@</span><span style="color:#98C379">'%'</span><span style="color:#ABB2BF"> IDENTIFIED </span><span style="color:#C678DD">BY</span><span style="color:#98C379"> 'Nstr.gogs808'</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF"># 授予用户 </span><span style="color:#98C379">"gogs"</span><span style="color:#ABB2BF"> 从 IP 地址 % 访问数据库的所有权限</span></span>
<span class="line"><span style="color:#C678DD">GRANT</span><span style="color:#ABB2BF"> ALL PRIVILEGES </span><span style="color:#C678DD">ON</span><span style="color:#ABB2BF"> *.* </span><span style="color:#C678DD">TO</span><span style="color:#98C379"> 'gogs'</span><span style="color:#ABB2BF">@</span><span style="color:#98C379">'%'</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF"># 刷新数据库权限，以使新的权限设置立即生效</span></span>
<span class="line"><span style="color:#ABB2BF">FLUSH PRIVILEGES;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置数据库主机、用户名、密码等信息.</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921172222258.png" alt="image-20230921172222258" tabindex="0" loading="lazy"><figcaption>image-20230921172222258</figcaption></figure>
<h5><strong>应用基本配置</strong></h5>
<p>应用基本设置只需要修改运行系统用户、域名、应用URL，其它采用默认值。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921173134003.png" alt="image-20230921173134003" tabindex="0" loading="lazy"><figcaption>image-20230921173134003</figcaption></figure>
<h5><strong>设置管理员账号</strong></h5>
<p>配置管理员账号，让自己有所有权限。</p>
<h5>创建仓库</h5>
<p>用户可以创建新的仓库</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921174049065.png" alt="image-20230921174049065" tabindex="0" loading="lazy"><figcaption>image-20230921174049065</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921174434886.png" alt="image-20230921174434886" tabindex="0" loading="lazy"><figcaption>image-20230921174434886</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921174503908.png" alt="image-20230921174503908" tabindex="0" loading="lazy"><figcaption>image-20230921174503908</figcaption></figure>
<h5><strong>创建密钥</strong></h5>
<p>用户要将仓库下载到本地，这需要配置密钥，具体操作如下：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 如果本地之前创建过密钥直接运行(cat ~/.ssh/*.pub)</span></span>
<span class="line"><span style="color:#61AFEF">ssh-keygen</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> rsa</span><span style="color:#D19A66"> -b</span><span style="color:#D19A66"> 4096</span><span style="color:#D19A66"> -C</span><span style="color:#98C379"> "w****@163.com"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 一路回车</span></span>
<span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> ~/.ssh/</span></span>
<span class="line"><span style="color:#61AFEF">cat</span><span style="color:#98C379"> id_rsa.pub</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将密钥添加到gogs上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">#跟踪连接远程仓库的信息</span></span>
<span class="line"><span style="color:#61AFEF">ssh</span><span style="color:#D19A66"> -vT</span><span style="color:#98C379"> git@192.168.1.19</span><span style="color:#D19A66"> -p</span><span style="color:#D19A66"> 20022</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921175259260.png" alt="image-20230921175259260" tabindex="0" loading="lazy"><figcaption>image-20230921175259260</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230921175406933.png" alt="image-20230921175406933" tabindex="0" loading="lazy"><figcaption>image-20230921175406933</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20230921175504997.png" alt="image-20230921175504997" tabindex="0" loading="lazy"><figcaption>image-20230921175504997</figcaption></figure>
<h5>克隆仓库</h5>
<p>把刚刚创建好的仓库克隆到本地：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 克隆远程仓库方式</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> clone</span><span style="color:#98C379"> http://192.168.1.19:3001/segen/sgtest.git</span></span>
<span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> sgtest</span></span>
<span class="line"><span style="color:#61AFEF">touch</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "first commit"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> master</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 本地关联远程仓库方式</span></span>
<span class="line"><span style="color:#61AFEF">touch</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> init</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "first commit"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> add</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> http://192.168.1.19:3001/segen/sgtest.git</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> master</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230922092007894.png" alt="image-20230922092007894" tabindex="0" loading="lazy"><figcaption>image-20230922092007894</figcaption></figure>
<h4>部署配置 gitlab</h4>
<p>首先创建 gitlab 需要挂载到本地的文件目录。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gitlab-data/config</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gitlab-data/logs</span></span>
<span class="line"><span style="color:#61AFEF">root@segen-virtual-machine:/usr/local/dockerdata#</span><span style="color:#98C379"> mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> /usr/local/dockerdata/gitlab-data/data</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写 docker compose 文件，使用 <code>docker compose up -d  gitlab</code>  启动 <code>gitlab</code>   容器，docker ps 查看容器是否成功启动。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /usr/local/dockerdata/docker-compose.yml</span><span style="color:#ABB2BF"> &lt;&lt;-</span><span style="color:#ABB2BF">'EOF'</span></span>
<span class="line"><span style="color:#98C379">services:</span></span>
<span class="line"><span style="color:#98C379">  mysql:</span></span>
<span class="line"><span style="color:#98C379">    image: mysql:8.0.34</span></span>
<span class="line"><span style="color:#98C379">    container_name: mysql</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "3306:3306"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      TZ: Asia/Shanghai</span></span>
<span class="line"><span style="color:#98C379">      MYSQL_ROOT_PASSWORD: Nstr.234808</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/mysql/conf:/etc/mysql/conf.d"</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/mysql/data:/var/lib/mysql"</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">  gitlab:</span></span>
<span class="line"><span style="color:#98C379">    image: 'gitlab/gitlab-ce:latest'</span></span>
<span class="line"><span style="color:#98C379">    hostname: '192.168.1.19'</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      GITLAB_OMNIBUS_CONFIG: |</span></span>
<span class="line"><span style="color:#98C379">        external_url 'http://192.168.1.19:8929'</span></span>
<span class="line"><span style="color:#98C379">        gitlab_rails['gitlab_shell_ssh_port'] = 2224</span></span>
<span class="line"><span style="color:#98C379">        gitlab_rails['time_zone'] = 'Asia/Shanghai'</span></span>
<span class="line"><span style="color:#98C379">        gitlab_rails['backup_keep_time'] = 259200</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - '8929:8929'</span></span>
<span class="line"><span style="color:#98C379">      - '2224:22'</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - /usr/local/dockerdata/gitlab-data/config:/etc/gitlab</span></span>
<span class="line"><span style="color:#98C379">      - /usr/local/dockerdata/gitlab-data/logs:/var/log/gitlab</span></span>
<span class="line"><span style="color:#98C379">      - /usr/local/dockerdata/gitlab-data/data:/var/opt/gitlab'</span></span>
<span class="line"><span style="color:#98C379">    shm_size: '256m'</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new </span></span>
<span class="line"><span style="color:#98C379">  jenkins:</span></span>
<span class="line"><span style="color:#98C379">    image: jenkins/jenkins:2.414.2-lts-jdk17</span></span>
<span class="line"><span style="color:#98C379">    container_name: jenkins</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "2080:8080"</span></span>
<span class="line"><span style="color:#98C379">      - "50000:50000"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      - "JAVA_OPTS=-server -Xms1024m -Xmx1024m -XX:MetaspaceSize=100m -XX:MaxMetaspaceSize=512m"</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/jenkins:/var/jenkins_home"</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/bin/docker:/usr/bin/docker"</span></span>
<span class="line"><span style="color:#98C379">      - "/var/run/docker.sock:/var/run/docker.sock"</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">networks:</span></span>
<span class="line"><span style="color:#98C379">  new:</span></span>
<span class="line"><span style="color:#98C379">    name: segen</span></span>
<span class="line"><span style="color:#ABB2BF">EOF</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925095938252.png" alt="image-20230925095938252" tabindex="0" loading="lazy"><figcaption>image-20230925095938252</figcaption></figure>
<p>在浏览器输入：<a href="http://192.168.1.19:8929/" target="_blank" rel="noopener noreferrer">http://192.168.1.19:8929/</a> 访问 gitlab 的 web 界面。</p>
<p>然后登录管理员账号，查看初始化的管理员账号密码：<code>cat /usr/local/dockerdata/gitlab-data/config/initial_root_password</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925100325814.png" alt="image-20230925100325814" tabindex="0" loading="lazy"><figcaption>image-20230925100325814</figcaption></figure>
<h5>新用户注册</h5>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925095531230.png" alt="image-20230925095531230" tabindex="0" loading="lazy"><figcaption>image-20230925095531230</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925103513459.png" alt="image-20230925103513459" tabindex="0" loading="lazy"><figcaption>image-20230925103513459</figcaption></figure>
<p>注册完成后需要登录管理员账号进行用户的审核</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925103613099.png" alt="image-20230925103613099" tabindex="0" loading="lazy"><figcaption>image-20230925103613099</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925103653752.png" alt="image-20230925103653752" tabindex="0" loading="lazy"><figcaption>image-20230925103653752</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925103740824.png" alt="image-20230925103740824" tabindex="0" loading="lazy"><figcaption>image-20230925103740824</figcaption></figure>
<p>等管理员审批通过后就可以直接登录了。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925103925878.png" alt="image-20230925103925878" tabindex="0" loading="lazy"><figcaption>image-20230925103925878</figcaption></figure>
<h5>配置公钥</h5>
<p>登录完成后把本地 公钥添加到自己的账户里，方便克隆提交项目代码或文件。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925104321903.png" alt="image-20230925104321903" tabindex="0" loading="lazy"><figcaption>image-20230925104321903</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925104417399.png" alt="image-20230925104417399" tabindex="0" loading="lazy"><figcaption>image-20230925104417399</figcaption></figure>
<p>查询或生成密钥的具体操作如下：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 如果本地之前创建过密钥直接运行(cat ~/.ssh/*.pub)</span></span>
<span class="line"><span style="color:#61AFEF">ssh-keygen</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> rsa</span><span style="color:#D19A66"> -b</span><span style="color:#D19A66"> 4096</span><span style="color:#D19A66"> -C</span><span style="color:#98C379"> "w****@163.com"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 一路回车</span></span>
<span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> ~/.ssh/</span></span>
<span class="line"><span style="color:#61AFEF">cat</span><span style="color:#98C379"> id_rsa.pub</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 将密钥添加到 gitlba 上</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>创建项目</h5>
<p>密钥成功添加后，接下来开始创建项目。关联项目，测试拉取和提交代码。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925105027968.png" alt="image-20230925105027968" tabindex="0" loading="lazy"><figcaption>image-20230925105027968</figcaption></figure>
<p>可以根据自己的实际需求，创建符合新要求的项目，这里我选择创建个空的项目。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925105042518.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925110606742.png" alt="image-20230925110606742" tabindex="0" loading="lazy"><figcaption>image-20230925110606742</figcaption></figure>
<p>Git全局设置</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> user.name</span><span style="color:#98C379"> "xuanfeng li"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> config</span><span style="color:#D19A66"> --global</span><span style="color:#98C379"> user.email</span><span style="color:#98C379"> "1183895890@qq.com"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建仓库</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> clone</span><span style="color:#98C379"> ssh://git@192.168.1.19:2224/cactusli/segen.git</span></span>
<span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> segen</span></span>
<span class="line"><span style="color:#61AFEF">touch</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> README.md</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "add README"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> main</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925111042421.png" alt="image-20230925111042421" tabindex="0" loading="lazy"><figcaption>image-20230925111042421</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925111058204.png" alt="image-20230925111058204" tabindex="0" loading="lazy"><figcaption>image-20230925111058204</figcaption></figure>
<p>推送一个已有的文件夹</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> existing_folder</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> init</span><span style="color:#D19A66"> --initial-branch=main</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> add</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> ssh://git@192.168.1.19:2224/cactusli/segen.git</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> add</span><span style="color:#98C379"> .</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> commit</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> "Initial commit"</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> main</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推送一个现有的Git存储库</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">cd</span><span style="color:#98C379"> existing_repo</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> rename</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> old-origin</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> remote</span><span style="color:#98C379"> add</span><span style="color:#98C379"> origin</span><span style="color:#98C379"> ssh://git@192.168.1.19:2224/cactusli/segen.git</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#D19A66"> --all</span></span>
<span class="line"><span style="color:#61AFEF">git</span><span style="color:#98C379"> push</span><span style="color:#D19A66"> -u</span><span style="color:#98C379"> origin</span><span style="color:#D19A66"> --tags</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>root 密码忘记使用脚本一键更新</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 替换为你的 GitLab 容器 ID</span></span>
<span class="line"><span style="color:#E06C75">GITLAB_CONTAINER_ID</span><span style="color:#56B6C2">=</span><span style="color:#98C379">f7cad737731d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 在容器中运行 Rails 控制台，并执行密码重置操作</span></span>
<span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> exec</span><span style="color:#D19A66"> -it</span><span style="color:#E06C75"> $GITLAB_CONTAINER_ID</span><span style="color:#98C379"> /bin/bash</span><span style="color:#D19A66"> -c</span><span style="color:#98C379"> 'gitlab-rails console &lt;&lt;EOF</span></span>
<span class="line"><span style="color:#98C379">user = User.where(id: 1).first</span></span>
<span class="line"><span style="color:#98C379">new_password = "Nstr.@#$%^&amp;*808"</span></span>
<span class="line"><span style="color:#98C379">user.password = new_password</span></span>
<span class="line"><span style="color:#98C379">user.password_confirmation = new_password</span></span>
<span class="line"><span style="color:#98C379">user.save!</span></span>
<span class="line"><span style="color:#98C379">exit</span></span>
<span class="line"><span style="color:#98C379">EOF'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 重新启动 GitLab 容器</span></span>
<span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> restart</span><span style="color:#E06C75"> $GITLAB_CONTAINER_ID</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2">echo</span><span style="color:#98C379"> "新密码已生成：</span><span style="color:#E06C75">$new_password</span><span style="color:#98C379">"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>安装配置 jenkins</h4>
<h5>首先在服务器创建 jenkins 用户，然后赋予相应的权限。</h5>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># useradd 命令用于创建新用户，-U 选项表示不要创建与用户名相同的用户组，-m 表示创建用户的家目录</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这个命令创建了一个名为 "jenkins" 的用户，不会创建与其同名的用户组，并在家目录中存储用户文件</span></span>
<span class="line"><span style="color:#61AFEF">useradd</span><span style="color:#D19A66"> -U</span><span style="color:#D19A66"> -m</span><span style="color:#98C379"> jenkins</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># usermod 命令用于修改用户属性，-aG 选项用于将用户添加到指定的附加组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这个命令将用户 "jenkins" 添加到 "docker" 附加组中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这通常用于允许用户执行Docker相关的操作</span></span>
<span class="line"><span style="color:#61AFEF">usermod</span><span style="color:#D19A66"> -aG</span><span style="color:#98C379"> docker</span><span style="color:#98C379"> jenkins</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这个命令将用户 "jenkins" 添加到 "root" 附加组中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 添加用户到 "root" 附加组通常是不推荐的，因为它会给予用户超级用户权限，潜在的安全风险</span></span>
<span class="line"><span style="color:#61AFEF">usermod</span><span style="color:#D19A66"> -aG</span><span style="color:#98C379"> root</span><span style="color:#98C379"> jenkins</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># chmod 命令用于更改文件或目录的权限，777 表示最大的权限，即读取、写入和执行权限</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这个命令将文件 /var/run/docker.sock 的权限设置为最大，允许任何用户对其进行读取、写入和执行操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 这样的权限设置可能会存在安全风险，请小心使用，并确保只允许信任的用户或进程访问这个文件</span></span>
<span class="line"><span style="color:#61AFEF">chmod</span><span style="color:#D19A66"> 777</span><span style="color:#98C379"> /var/run/docker.sock</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5>创建  jenkins 需要挂载到本地的文件目录。</h5>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>root@segen-virtual-machine:/usr/local/dockerdata# mkdir -p /usr/local/dockerdata/jenkins</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>编写 docker compose 文件，使用 <code>docker compose up -d  jenkins</code>  启动  <code> jenkins</code> 容器，docker ps 查看容器是否成功启动。</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">sudo</span><span style="color:#98C379"> tee</span><span style="color:#98C379"> /usr/local/dockerdata/docker-compose.yml</span><span style="color:#ABB2BF"> &lt;&lt;-</span><span style="color:#ABB2BF">'EOF'</span></span>
<span class="line"><span style="color:#98C379">services:</span></span>
<span class="line"><span style="color:#98C379">  mysql:</span></span>
<span class="line"><span style="color:#98C379">    image: mysql:8.0.34</span></span>
<span class="line"><span style="color:#98C379">    container_name: mysql</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "3306:3306"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      TZ: Asia/Shanghai</span></span>
<span class="line"><span style="color:#98C379">      MYSQL_ROOT_PASSWORD: Nstr.234808</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/mysql/conf:/etc/mysql/conf.d"</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/mysql/data:/var/lib/mysql"</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">  gitlab:</span></span>
<span class="line"><span style="color:#98C379">    image: 'gitlab/gitlab-ce:latest'</span></span>
<span class="line"><span style="color:#98C379">    hostname: '192.168.1.19'</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      GITLAB_OMNIBUS_CONFIG: |</span></span>
<span class="line"><span style="color:#98C379">        external_url 'http://192.168.1.19:8929'</span></span>
<span class="line"><span style="color:#98C379">        gitlab_rails['gitlab_shell_ssh_port'] = 2224</span></span>
<span class="line"><span style="color:#98C379">        gitlab_rails['time_zone'] = 'Asia/Shanghai'</span></span>
<span class="line"><span style="color:#98C379">        gitlab_rails['backup_keep_time'] = 259200</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - '8929:8929'</span></span>
<span class="line"><span style="color:#98C379">      - '2224:22'</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - /usr/local/dockerdata/gitlab-data/config:/etc/gitlab</span></span>
<span class="line"><span style="color:#98C379">      - /usr/local/dockerdata/gitlab-data/logs:/var/log/gitlab</span></span>
<span class="line"><span style="color:#98C379">      - /usr/local/dockerdata/gitlab-data/data:/var/opt/gitlab'</span></span>
<span class="line"><span style="color:#98C379">    shm_size: '256m'</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new </span></span>
<span class="line"><span style="color:#98C379">  jenkins:</span></span>
<span class="line"><span style="color:#98C379">    image: jenkins/jenkins:2.414.2-lts-jdk17</span></span>
<span class="line"><span style="color:#98C379">    container_name: jenkins</span></span>
<span class="line"><span style="color:#98C379">    ports:</span></span>
<span class="line"><span style="color:#98C379">      - "2080:8080"</span></span>
<span class="line"><span style="color:#98C379">      - "50000:50000"</span></span>
<span class="line"><span style="color:#98C379">    environment:</span></span>
<span class="line"><span style="color:#98C379">      - "JAVA_OPTS=-server -Xms1024m -Xmx1024m -XX:MetaspaceSize=100m -XX:MaxMetaspaceSize=512m"</span></span>
<span class="line"><span style="color:#98C379">    volumes:</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/local/dockerdata/jenkins:/var/jenkins_home"</span></span>
<span class="line"><span style="color:#98C379">      - "/usr/bin/docker:/usr/bin/docker"</span></span>
<span class="line"><span style="color:#98C379">      - "/var/run/docker.sock:/var/run/docker.sock"</span></span>
<span class="line"><span style="color:#98C379">    restart: always</span></span>
<span class="line"><span style="color:#98C379">    networks:</span></span>
<span class="line"><span style="color:#98C379">      - new</span></span>
<span class="line"><span style="color:#98C379">networks:</span></span>
<span class="line"><span style="color:#98C379">  new:</span></span>
<span class="line"><span style="color:#98C379">    name: segen</span></span>
<span class="line"><span style="color:#ABB2BF">EOF</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图所示 jenkins 成功启动</p>
<p>如图所示 jenkins 成功启动</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925112114344.png" alt="image-20230925112114344" tabindex="0" loading="lazy"><figcaption>image-20230925112114344</figcaption></figure>
<h5>新手入门</h5>
<p><strong>浏览器访问（ip:port），出现这个界面说明安装成功，查看Jenkins密码进行下一步。</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925112911075.png" alt="image-20230925112911075" tabindex="0" loading="lazy"><figcaption>image-20230925112911075</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925150954722.png" alt="image-20230925150954722" tabindex="0" loading="lazy"><figcaption>image-20230925150954722</figcaption></figure>
<p>创建用户</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925151108740.png" alt="image-20230925151108740" tabindex="0" loading="lazy"><figcaption>image-20230925151108740</figcaption></figure>
<p>保存实例</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925151203230.png" alt="image-20230925151203230" tabindex="0" loading="lazy"><figcaption>image-20230925151203230</figcaption></figure>
<p>进入Jenkins 后台管理系统</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925164237110.png" alt="image-20230925164237110" tabindex="0" loading="lazy"><figcaption>image-20230925164237110</figcaption></figure>
<h5>汉化插件安装</h5>
<ol>
<li>
<p>缓存插件列表</p>
<p>点击Manage Jenkins --》 Manage Plugins --》Available 等待浏览器加载完成。（这样做是为了把Jenkins官方的插件列表下载到本地）</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925164557413.png" alt="image-20230925164557413" tabindex="0" loading="lazy"><figcaption>image-20230925164557413</figcaption></figure>
</li>
<li>
<p>安装汉化插件</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925165106789.png" alt="image-20230925165106789" tabindex="0" loading="lazy"><figcaption>image-20230925165106789</figcaption></figure>
</li>
<li>
<p>重启 jenkins 使用命令<code>docker compose restart jenkins</code> ，此命令一定要在有 docker-compose.yml 目录下运行。<br>
<img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230925170357873.png" alt="image-20230925170357873" loading="lazy"></p>
</li>
</ol>
<h2>实现前端自动化部署</h2>
<p>实现 vue3 项目的自动化打包部署。</p>
<h3>安装 jenkins 插件</h3>
<p>选择：Dashboard  》系统管理  》 插件管理 》Available plugins；</p>
<p>搜索安装部署需要的插件 如：<code>gitlab</code>、<code>Publish Over SSH</code>、<code>nodejs</code></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926101300694.png" alt="image-20230926101300694" tabindex="0" loading="lazy"><figcaption>image-20230926101300694</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926102006076.png" alt="image-20230926102006076" tabindex="0" loading="lazy"><figcaption>image-20230926102006076</figcaption></figure>
<h3>软件配置</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926103718472.png" alt="image-20230926103718472" tabindex="0" loading="lazy"><figcaption>image-20230926103718472</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926153835689.png" alt="image-20230926153835689" tabindex="0" loading="lazy"><figcaption>image-20230926153835689</figcaption></figure>
<p>在系统管理中的全局工具配置里，可以把Maven、Gradle、NodeJ、Git 的环境都选一下，勾选自动安装。但这里有个小坑，就是点击保存后并不会直接下载安装，而是使用触发的时候才会。比如Maven需要再新建Job中选择Maven选项才会自动下载；Node的话则需要勾选这个选项才会自动下载。</p>
<h3>创建任务</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926104421760.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3>项目配置</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926111821912.png" alt="image-20230926111821912" tabindex="0" loading="lazy"><figcaption>image-20230926111821912</figcaption></figure>
<p>源码管理这里选择Git，然后将我们的Gitlab的项目地址放上去，Credentials里添加一个Gitlab的用户名密码。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926111856214.png" alt="image-20230926111856214" tabindex="0" loading="lazy"><figcaption>image-20230926111856214</figcaption></figure>
<p>然后我们勾上这个<code>Build when a change is pushed to Gitlab</code>选项，后面这个URL拷贝一下。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926111927852.png" alt="image-20230926111927852" tabindex="0" loading="lazy"><figcaption>image-20230926111927852</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926112101315.png" alt="image-20230926112101315" tabindex="0" loading="lazy"><figcaption>image-20230926112101315</figcaption></figure>
<p>将上面的URL拷贝到Gitlab中，点击Webhook：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926112337868.png" alt="image-20230926112337868" tabindex="0" loading="lazy"><figcaption>image-20230926112337868</figcaption></figure>
<p>如果出现这种错误提示，修改修改gitlab 的网络策略： <strong>Admin -&gt; Settings -&gt; Network -&gt; Outbound Requests -&gt; Allow requests to the local network from hooks and services（勾选上）</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926112548422.png" alt="image-20230926112548422" tabindex="0" loading="lazy"><figcaption>image-20230926112548422</figcaption></figure>
<p>添加后，我们就可以在这里看到了该Hook，我们可以点击Test测试一下。如果出现如图所示提示的错误，则需要在Jenkins里设置一下安全策略，勾选以下按钮：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926112806978.png" alt="image-20230926112806978" tabindex="0" loading="lazy"><figcaption>image-20230926112806978</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926113003966.png" alt="image-20230926113003966" tabindex="0" loading="lazy"><figcaption>image-20230926113003966</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926142345338.png" alt="image-20230926142345338" tabindex="0" loading="lazy"><figcaption>image-20230926142345338</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926142431043.png" alt="image-20230926142431043" tabindex="0" loading="lazy"><figcaption>image-20230926142431043</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926142709056.png" alt="image-20230926142709056" tabindex="0" loading="lazy"><figcaption>image-20230926142709056</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926143746226.png" alt="image-20230926143746226" tabindex="0" loading="lazy"><figcaption>image-20230926143746226</figcaption></figure>
<p>最后，我们编写一下需要Jenkins拿到这个事件后，执行什么。我们在构建里，添加执行Shell：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230926154918873.png" alt="image-20230926154918873" tabindex="0" loading="lazy"><figcaption>image-20230926154918873</figcaption></figure>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> rm</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> pure-admin-thin</span></span>
<span class="line"><span style="color:#61AFEF">sleep</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> rmi</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> pure-admin-thin:1.0</span></span>
<span class="line"><span style="color:#61AFEF">sleep</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> build</span><span style="color:#D19A66"> -t</span><span style="color:#98C379"> pure-admin-thin:1.0</span><span style="color:#D19A66"> -f</span><span style="color:#98C379"> ./Dockerfile</span><span style="color:#98C379"> .</span></span>
<span class="line"><span style="color:#61AFEF">sleep</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">docker</span><span style="color:#98C379"> run</span><span style="color:#D19A66"> -d</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> 8032:80</span><span style="color:#D19A66"> --name</span><span style="color:#98C379"> pure-admin-thin</span><span style="color:#98C379"> pure-admin-thin:1.0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制台里我们可以看到具体的执行信息，其实和我们在Linux上敲命令是一样的，出啥错解决啥就可以了。</p>
<h3>删除任务的构建历史</h3>
<p>进入 “Dashboard --&gt; 系统管理 --&gt; Script Console” 输入清理构建记录的脚本内容：</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">item</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Jenkins</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">instance</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getItemByFullName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"your-job-name-here"</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 替换成自己 JOB 名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//THIS WILL REMOVE ALL BUILD HISTORY</span></span>
<span class="line"><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">builds</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">each</span><span style="color:#ABB2BF">() { </span><span style="color:#E06C75">build</span><span style="color:#56B6C2"> -&gt;</span></span>
<span class="line"><span style="color:#E5C07B">  build</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">delete</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">updateNextBuildNumber</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">services</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">  mysql</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">mysql</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">mysql</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"3306:3306"</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">      TZ</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">Asia/Shanghai</span></span>
<span class="line"><span style="color:#E06C75">      MYSQL_ROOT_PASSWORD</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">123</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./mysql/conf:/etc/mysql/conf.d"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./mysql/data:/var/lib/mysql"</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">  nacos</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">nacos/nacos-server:v2.1.0-slim</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">nacos</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">MODE=standalone</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">JVM_XMS=512m</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">JVM_XMX=512m</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">MYSQL_SERVICE_HOST=mysql</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">MYSQL_SERVICE_USER=root</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">MYSQL_SERVICE_PASSWORD=123</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">MYSQL_SERVICE_DB_NAME=nacos</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">SPRING_DATASOURCE_PLATFORM=mysql</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"8848:8848"</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    depends_on</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">mysql</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">  xxl-job</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">xuxueli/xxl-job-admin:2.3.0</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">xxljob</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"8880:8880"</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./xxl-job/logs:/data/applogs"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./xxl-job/application.properties:/config/application.properties"</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    depends_on</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">mysql</span></span>
<span class="line"><span style="color:#E06C75">  seata</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">seataio/seata-server</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">seata</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"8099:8099"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"7099:7099"</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">      SEATA_IP</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">192.168.150.101</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./seata:/seata-server/resources"</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    depends_on</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">mysql</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">nacos</span></span>
<span class="line"><span style="color:#E06C75">  gogs</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">gogs/gogs:0.12</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">gogs</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"10022:22"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"10880:3000"</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">      TZ</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">Asia/Shanghai</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./gogs:/data"</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    depends_on</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">mysql</span></span>
<span class="line"><span style="color:#E06C75">  jenkins</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">jenkins/jenkins:2.361.1-lts-jdk11</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">jenkins</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"18080:8080"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"50000:50000"</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"JAVA_OPTS=-server -Xms1024m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m"</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./jenkins:/var/jenkins_home"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"/usr/bin/docker:/usr/bin/docker"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"/var/run/docker.sock:/var/run/docker.sock"</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">  mq</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">rabbitmq:3.8-management</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">mq</span></span>
<span class="line"><span style="color:#E06C75">    hostname</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">mq</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"15672:15672"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"5672:5672"</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">      RABBITMQ_DEFAULT_USER</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">tjxt</span></span>
<span class="line"><span style="color:#E06C75">      RABBITMQ_DEFAULT_PASS</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">123321</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./mq/plugins:/plugins"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./mq/data:/var/lib/rabbitmq"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./mq/conf:/etc/rabbitmq"</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">  es</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">elasticsearch:7.12.1</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">es</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"9200:9200"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"9300:9300"</span></span>
<span class="line"><span style="color:#E06C75">    environment</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"discovery.type=single-node"</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./es/data:/usr/share/elasticsearch/data"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./es/plugins:/usr/share/elasticsearch/plugins"</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">  redis</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">redis</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">redis</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"6379:6379"</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./redis/conf:/usr/local/etc/redis"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./redis/data:/tmp"</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    entrypoint</span><span style="color:#ABB2BF">: [ </span><span style="color:#98C379">"redis-server"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"/usr/local/etc/redis/redis.conf"</span><span style="color:#ABB2BF"> ]</span></span>
<span class="line"><span style="color:#E06C75">  nginx</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    image</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">nginx</span></span>
<span class="line"><span style="color:#E06C75">    container_name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">nginx</span></span>
<span class="line"><span style="color:#E06C75">    ports</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"80:80"</span></span>
<span class="line"><span style="color:#E06C75">    volumes</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./nginx/conf/nginx.conf:/etc/nginx/nginx.conf"</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">"./nginx/html:/etc/nginx/html"</span></span>
<span class="line"><span style="color:#E06C75">    restart</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">always</span></span>
<span class="line"><span style="color:#E06C75">    networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#ABB2BF">      - </span><span style="color:#98C379">new</span></span>
<span class="line"><span style="color:#E06C75">networks</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">  new</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#E06C75">    name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">tjxt</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20230920164316099.png" type="image/png"/>
    </item>
    <item>
      <title>Maven 系统介绍</title>
      <link>https://cactusli.net/tutorial/Maven%20%E5%9F%BA%E7%A1%80/Maven%20%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D.html</link>
      <guid>https://cactusli.net/tutorial/Maven%20%E5%9F%BA%E7%A1%80/Maven%20%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D.html</guid>
      <source url="https://cactusli.net/rss.xml">Maven 系统介绍</source>
      <description>在Java开发中，常用构建工具ant,maven和gradle, 其中maven相对主流； Maven 相关资源 官方网站 https://maven.apache.org/ Maven 的作用 更方便进行项目构建和项目 jar 包管理 下载和安装 第 1 种方式: 直接使用 idea 自带的 Maven 第 2 种方式: 自己下载 Maven 软件,...</description>
      <category>Maven</category>
      <pubDate>Mon, 01 Apr 2024 17:33:30 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>在Java开发中，常用构建工具ant,maven和gradle, 其中maven相对主流；</p>
</blockquote>
<h2>Maven 相关资源</h2>
<p><strong>官方网站</strong>  <strong><a href="https://maven.apache.org/" target="_blank" rel="noopener noreferrer">https://maven.apache.org/</a></strong></p>
<h2>Maven 的作用</h2>
<p><strong>更方便进行项目构建和项目</strong> <strong>jar</strong> <strong>包管理</strong></p>
<h2>下载和安装</h2>
<p>第 1 种方式: 直接使用 idea 自带的 Maven<br>
第 2 种方式: 自己下载 Maven 软件, 安装、配置并使用</p>
<blockquote>
<p>下载地址 <a href="https://archive.apache.org/dist/maven/maven-3/" target="_blank" rel="noopener noreferrer">https://archive.apache.org/dist/maven/maven-3/</a></p>
</blockquote>
<h3>安装步骤</h3>
<ol>
<li>
<p>直接解 maven 安装到指定目录, 解压到 d:\program 目录下</p>
</li>
<li>
<p>目录结构说明</p>
</li>
<li>
<p>maven 使用需要依赖 jdk ,因此事先要保证安装了 jdk1.8 以上</p>
</li>
<li>
<p>配置环境变量 MAVEN_HOME</p>
</li>
<li>
<p>配置环境变量 PATH, 增加 Maven 的路径, (说明: 如果有多个 Maven 的 Path, 可以 上移, 提高优先级)</p>
</li>
<li>
<p>测试是否安装 maven 成功</p>
</li>
</ol>
<h3>Maven 工作原理图</h3>
<p>原理图解读</p>
<ol>
<li>在 maven 项目的 pom.xml, 可以配置项目依赖的 jar(指定坐标即可)</li>
<li>maven 根据配置, 到中央仓库/私服 去获取 jar,下载到本地仓库</li>
<li>maven 项目, 会引用本地仓库的 jar ,完成项目开发</li>
<li>在 maven 项目构建生命周期中，每个阶段的执行都有相应的插件完成</li>
<li>各个插件执行过程中，会附带输出内容，比如 jar/war/xml/源码</li>
<li>程序员可以使用 maven 默认的插件，也可以自定义插件，完成定制任务</li>
</ol>
<p>实例 01_mybatis_quickstart : Maven 项目统一的开发结构分析</p>
]]></content:encoded>
    </item>
    <item>
      <title>ES6 常用知识点</title>
      <link>https://cactusli.net/webs/ES6/ES6%20%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://cactusli.net/webs/ES6/ES6%20%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://cactusli.net/rss.xml">ES6 常用知识点</source>
      <description>ES6+ let 推荐使用let关键字替代 var关键字声明变量，因为 var存在诸多问题，比如： 越域 重复声明 变量提升 const 解构 数组解构 对象解构 链判断 如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。 比如，读取message.body.user.firstName这个属性，安全的写法是写成下面这样。 这样的层...</description>
      <category>ES6s</category>
      <pubDate>Tue, 02 Apr 2024 15:44:32 GMT</pubDate>
      <content:encoded><![CDATA[<h2>ES6+</h2>
<h3>let</h3>
<p>推荐使用<code>let</code>关键字替代 <code>var</code>关键字声明变量，因为 <code>var</code>存在诸多问题，比如：</p>
<h4>越域</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    var</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    let</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">a</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// 1</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">b</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// ReferenceError: b is not defined</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>重复声明</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// var 可以声明多次</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// let 只能声明一次</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#E06C75"> m</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#E06C75"> m</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 2</span></span>
<span class="line"><span style="color:#C678DD">let</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// let n = 4</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">m</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// 2</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">n</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// Identifier 'n' has already been declared</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>变量提升</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// var 会变量提升</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// let 不存在变量提升</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">// undefined</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#E06C75"> x</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//ReferenceError: y is not defined</span></span>
<span class="line"><span style="color:#C678DD">let</span><span style="color:#E06C75"> y</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 20</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>const</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 1. 声明之后不允许改变</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 2. 一但声明必须初始化，否则会报错</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> a</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">a</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 3</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">//Uncaught TypeError: Assignment to constant variable.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>解构</h3>
<h4>数组解构</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">let</span><span style="color:#E06C75"> arr</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> [</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//以前我们想获取其中的值，只能通过角标。ES6 可以这样：</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#ABB2BF"> [</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">y</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">z</span><span style="color:#ABB2BF">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> arr</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// x，y，z 将与 arr 中的每个位置对应来取值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 然后打印</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">z</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>对象解构</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> person</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    name</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"jack"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    age</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">21</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    language</span><span style="color:#ABB2BF">: [</span><span style="color:#98C379">'java'</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">'js'</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">'css'</span><span style="color:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 解构表达式获取值，将 person 里面每一个属性和左边对应赋值</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#ABB2BF"> {</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">age</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">language</span><span style="color:#ABB2BF">} </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> person</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 等价于下面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// const name = person.name;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// const age = person.age;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// const language = person.language;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 可以分别打印</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">age</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">language</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//扩展：如果想要将 name 的值赋值给其他变量，可以如下,nn 是新的变量名</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">nn</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">age</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">language</span><span style="color:#ABB2BF">} </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> person</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">nn</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">age</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">language</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>链判断</h3>
<p>如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。</p>
<p>比如，读取message.body.user.firstName这个属性，安全的写法是写成下面这样。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">let</span><span style="color:#E06C75">  message</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 错误的写法</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B">  firstName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> message</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">firstName</span><span style="color:#56B6C2"> ||</span><span style="color:#98C379"> 'default'</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 正确的写法</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> firstName</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">message</span></span>
<span class="line"><span style="color:#56B6C2">                   &amp;&amp;</span><span style="color:#E5C07B"> message</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">body</span></span>
<span class="line"><span style="color:#56B6C2">                   &amp;&amp;</span><span style="color:#E5C07B"> message</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">user</span></span>
<span class="line"><span style="color:#56B6C2">                   &amp;&amp;</span><span style="color:#E5C07B"> message</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">firstName</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">||</span><span style="color:#98C379"> 'default'</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">firstName</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的层层判断非常麻烦，因此 <a href="https://github.com/tc39/proposal-optional-chaining" target="_blank" rel="noopener noreferrer">ES2020</a> 引入了“链判断运算符”（optional chaining operator）<strong>?.</strong>，简化上面的写法。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> firstName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> message</span><span style="color:#ABB2BF">?.</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">?.</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">?.</span><span style="color:#E06C75">firstName</span><span style="color:#56B6C2"> ||</span><span style="color:#98C379"> 'default'</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3>参数默认值</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//在 ES6 以前，我们无法给一个函数参数设置默认值，只能采用变通写法：</span></span>
<span class="line"><span style="color:#C678DD">function</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // 判断 b 是否为空，为空就给默认值 1</span></span>
<span class="line"><span style="color:#E06C75">  b</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> ||</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 传一个参数</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//现在可以这么写：直接给参数写上默认值，没传就会自动使用默认值</span></span>
<span class="line"><span style="color:#C678DD">function</span><span style="color:#61AFEF"> add2</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 传一个参数</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">add2</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>箭头函数</h3>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//以前声明一个方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// var print = function (obj) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// console.log(obj);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 可以简写为：</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#61AFEF"> print</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75;font-style:italic"> obj</span><span style="color:#C678DD"> =&gt;</span><span style="color:#E5C07B"> console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">obj</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 测试调用</span></span>
<span class="line"><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 两个参数的情况：</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#61AFEF"> sum</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> function</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 简写为：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#61AFEF"> sum2</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//测试调用</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">sum2</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//20</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 代码不止一行，可以用`{}`括起来</span></span>
<span class="line"><span style="color:#C678DD">var</span><span style="color:#61AFEF"> sum3</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    c</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//测试调用</span></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">sum3</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//30</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Promise</h3>
<p>代表 <code>异步对象</code>，类似Java中的 <code>CompletableFuture</code></p>
<p><strong>Promise</strong> 是现代 JavaScript 中异步编程的基础，是一个由异步函数返回的可以向我们指示当前操作所处的状态的对象。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象可以让我们操作最终完成时对其进行处理（无论成功还是失败）</p>
<h4>fetch</h4>
<p>fetch 是浏览器支持从远程获取数据的一个函数，这个函数返回的就是 <code>Promise 对象</code></p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> fetchPromise</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> fetch</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379">  "https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">fetchPromise</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">fetchPromise</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">then</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">response</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">  console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">`已收到响应：</span><span style="color:#C678DD">${</span><span style="color:#E5C07B">response</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">status</span><span style="color:#C678DD">}</span><span style="color:#98C379">`</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"已发送请求……"</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 fetch() API 得到一个 Response 对象；</p>
<ul>
<li><strong>response.status</strong>： 读取响应状态码</li>
<li><strong>response.json()</strong>：读取响应体json数据；（<strong>这也是个异步对象</strong>）</li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> fetchPromise</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> fetch</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379">  "https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">fetchPromise</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">then</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">response</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> jsonPromise</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">json</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">  jsonPromise</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">then</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">json</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">json</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">].</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  });</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>Promise状态</h4>
<p>首先，Promise 有三种状态：</p>
<ul>
<li><strong>待定（pending）</strong>：初始状态，既没有被兑现，也没有被拒绝。这是调用 fetch() 返回 Promise 时的状态，此时请求还在进行中。</li>
<li><strong>已兑现（fulfilled）</strong>：意味着操作成功完成。当 Promise 完成时，它的 then() 处理函数被调用。</li>
<li><strong>已拒绝（rejected）</strong>：意味着操作失败。当一个 Promise 失败时，它的 catch() 处理函数被调用。</li>
</ul>
<h4>Promise对象</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> promise</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Promise</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">resolve</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">reject</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 执行异步操作</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#ABB2BF"> (</span><span style="color:#7F848E;font-style:italic">/* 异步操作成功 */</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">      resolve</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">value</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">// 调用 resolve，代表 Promise 将返回成功的结果</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">      reject</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">error</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">// 调用 reject，代表 Promise 会返回失败结果</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">    let</span><span style="color:#61AFEF"> get</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> function</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">url</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">data</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Promise</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">resolve</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">reject</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            $</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ajax</span><span style="color:#ABB2BF">({</span></span>
<span class="line"><span style="color:#E06C75">                url</span><span style="color:#ABB2BF">: </span><span style="color:#E06C75">url</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                type</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"GET"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                data</span><span style="color:#ABB2BF">: </span><span style="color:#E06C75">data</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#61AFEF">                success</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">result</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    resolve</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">result</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                },</span></span>
<span class="line"><span style="color:#61AFEF">                error</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">error</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    reject</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">error</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            });</span></span>
<span class="line"><span style="color:#ABB2BF">        })</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>Async关键字</h3>
<p>Async主要目的是希望 把Promise.then的各种写法，转换为 同步代码块写法的方式，增强可读性</p>
<ul>
<li><code>async 函数</code>是使用<code>async关键字声明的函数</code>。async 函数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" target="_blank" rel="noopener noreferrer">AsyncFunction</a> 构造函数的实例，并且其中允许使用 await 关键字。</li>
<li><code>async 和 await</code> 关键字让我们可以用一种更简洁的方式写出基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferrer">Promise</a> 的异步行为，而无需刻意地链式调用 promise。</li>
<li><code>async 函数</code> 返回的还是 <code>Promise对象</code></li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> myFunction</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // 这是一个异步函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在异步函数中，你可以在调用一个返回 Promise 的函数之前使用 <strong>await</strong> 关键字。这使得代码在该点上等待，直到 Promise 被完成，这时 Promise 的响应被当作返回值，或者被拒绝的响应被作为错误抛出。</p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> fetchProducts</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#C678DD">  try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在这一行之后，我们的函数将等待 `fetch()` 调用完成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 调用 `fetch()` 将返回一个“响应”或抛出一个错误</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> response</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> fetch</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379">      "https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">    );</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">response</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">ok</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">      throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">`HTTP 请求错误：</span><span style="color:#C678DD">${</span><span style="color:#E5C07B">response</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">status</span><span style="color:#C678DD">}</span><span style="color:#98C379">`</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在这一行之后，我们的函数将等待 `response.json()` 的调用完成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // `response.json()` 调用将返回 JSON 对象或抛出一个错误</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> json</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#E5C07B"> response</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">json</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">json</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">].</span><span style="color:#E06C75">name</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">error</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">    console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">`无法获取产品列表：</span><span style="color:#C678DD">${</span><span style="color:#E06C75">error</span><span style="color:#C678DD">}</span><span style="color:#98C379">`</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">fetchProducts</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>模块化</h3>
<p><strong>将 JavaScript 程序拆分为可按需导入的单独模块</strong>的机制。Node.js 已经提供这个能力很长时间了，还有很多的 JavaScript 库和框架已经开始了模块的使用（例如，<a href="https://en.wikipedia.org/wiki/CommonJS" target="_blank" rel="noopener noreferrer">CommonJS</a> 和基于 <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener noreferrer">AMD</a> 的其他模块系统 如 <a href="https://requirejs.org/" target="_blank" rel="noopener noreferrer">RequireJS</a>，以及最新的 <a href="https://webpack.github.io/" target="_blank" rel="noopener noreferrer">Webpack</a> 和 <a href="https://babeljs.io/" target="_blank" rel="noopener noreferrer">Babel</a>）。</p>
<p>好消息是，最新的浏览器开始原生支持模块功能了。</p>
<h4>工程架构</h4>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/工程架构.png" alt="工程架构" tabindex="0" loading="lazy"><figcaption>工程架构</figcaption></figure>
<h4>index.html</h4>
<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;!</span><span style="color:#E06C75">DOCTYPE</span><span style="color:#D19A66"> html</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">html</span><span style="color:#D19A66"> lang</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"en"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">head</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">meta</span><span style="color:#D19A66"> charset</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">title</span><span style="color:#ABB2BF">&gt;Title&lt;/</span><span style="color:#E06C75">title</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">    &lt;</span><span style="color:#E06C75">script</span><span style="color:#D19A66"> src</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"main.js"</span><span style="color:#D19A66"> type</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"module"</span><span style="color:#FFFFFF">/</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#56B6C2">&lt;/</span><span style="color:#E06C75">head</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">&gt;模块化测试&lt;/</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#56B6C2">&lt;/</span><span style="color:#E06C75">html</span><span style="color:#56B6C2">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>user.js</h4>
<p>放在 <code>libs/user.js</code></p>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B">  user</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    username</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"张三"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    age</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">18</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#61AFEF"> isAdult</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">age</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">age</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 18</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"成年人"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"未成年"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">user</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">isAdult</span><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Java 怎么模块化；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 1、 druid.jar</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 2、import 导入类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JS 模块化；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 1、 xxx.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 2、 xxx.js 暴露功能；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 3、import 导入 xxx.js 的功能</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//xxx.js 暴露的功能，别人才能导入</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>main.js</h4>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 所有的功能不用写在一个JS中</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75">user</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">isAdult</span><span style="color:#ABB2BF">} </span><span style="color:#C678DD">from</span><span style="color:#98C379"> './libs/user.js'</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">alert</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"当前用户："</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">username</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">isAdult</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">user</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">age</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>递归通用级联数据</h2>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // 调用函数，查找目标节点及其父节点路径</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> targetValue</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> '声纳仪'</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> path</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> findNodePath</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">categoryTree</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">value</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">targetValue</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">path</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">    console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'Path to node:'</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">node</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#E5C07B"> node</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">' &gt; '</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">  } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'Node not found'</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#61AFEF"> findNodePath</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">options</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">targetValue</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // 用于存储当前路径中的节点</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> path</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // 内部递归函数</span></span>
<span class="line"><span style="color:#C678DD">  function</span><span style="color:#61AFEF"> traverse</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">nodes</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">let</span><span style="color:#E06C75"> node</span><span style="color:#C678DD"> of</span><span style="color:#E06C75"> nodes</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      // 将当前节点推入路径</span></span>
<span class="line"><span style="color:#E5C07B">      path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">push</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">node</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      // 检查当前节点是否是目标节点</span></span>
<span class="line"><span style="color:#C678DD">      if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">node</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">label</span><span style="color:#56B6C2"> ===</span><span style="color:#E06C75"> targetValue</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 找到目标节点，返回当前路径的复制</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> [...</span><span style="color:#E06C75">path</span><span style="color:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      // 如果有子节点，继续递归遍历</span></span>
<span class="line"><span style="color:#C678DD">      if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">node</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">children</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">        const</span><span style="color:#E5C07B"> result</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> traverse</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">node</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">children</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">result</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">          return</span><span style="color:#E06C75"> result</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      // 当前节点不是目标节点，从路径中移除</span></span>
<span class="line"><span style="color:#E5C07B">      path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">pop</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // 开始遍历</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#61AFEF"> traverse</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">options</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/web/工程架构.png" type="image/png"/>
    </item>
    <item>
      <title>npm 常用知识点</title>
      <link>https://cactusli.net/webs/ES6/npm%20%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
      <guid>https://cactusli.net/webs/ES6/npm%20%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
      <source url="https://cactusli.net/rss.xml">npm 常用知识点</source>
      <description>npm 下载：https://nodejs.org/en 环境 npm是nodejs中进行包管理的工具； 安装Node.js 配置npm npm 命令 npm init： 项目初始化 npm init -y：默认一路yes，不用挨个输入信息 npm install 包名：安装js包到项目中（仅当前项目有效）。指定 包名，或者 包名@版本号 npm in...</description>
      <category>npm</category>
      <pubDate>Tue, 02 Apr 2024 15:55:10 GMT</pubDate>
      <content:encoded><![CDATA[<h2>npm</h2>
<p>下载：<a href="https://nodejs.org/en" target="_blank" rel="noopener noreferrer">https://nodejs.org/en</a></p>
<h3>环境</h3>
<p>npm是nodejs中进行包管理的工具；</p>
<ul>
<li>安装<code>Node.js</code></li>
<li>配置npm</li>
</ul>
<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">npm</span><span style="color:#E06C75"> config</span><span style="color:#E06C75"> set</span><span style="color:#E06C75"> registry</span><span style="color:#E06C75"> https</span><span style="color:#ABB2BF">:</span><span style="color:#7F848E;font-style:italic">//registry.npmmirror.com  //设置国内镜像源</span></span>
<span class="line"><span style="color:#E06C75">npm</span><span style="color:#E06C75"> config</span><span style="color:#E06C75"> get</span><span style="color:#E06C75"> registry</span><span style="color:#7F848E;font-style:italic">  //查看镜像源</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3>npm 命令</h3>
<ul>
<li>npm init： 项目初始化
<ul>
<li>npm init -y：默认一路yes，不用挨个输入信息</li>
</ul>
</li>
</ul>
<ul>
<li>
<p>npm install 包名：安装js包到项目中（仅当前项目有效）。指定 <strong>包名</strong>，或者 <strong>包名@版本号</strong></p>
<ul>
<li>npm install -g： 全局安装，所有都能用</li>
</ul>
</li>
<li>
<p>npm update 包名：升级包到最新版本</p>
</li>
<li>
<p>npm uninstall 包名：卸载包</p>
</li>
<li>
<p>npm run：项目运行</p>
</li>
</ul>
<h3>pnpm 命令</h3>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 安装 pnpm 速度更快</span></span>
<span class="line"><span style="color:#61AFEF">npm</span><span style="color:#98C379"> install</span><span style="color:#D19A66"> -g</span><span style="color:#98C379"> pnpm</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>pnpm -v ：查看版本</p>
</li>
<li>
<p>pnpm install xxx <code>或</code> pnpm i xxx</p>
</li>
<li>
<p>pnpm run xxx：项目运行</p>
</li>
<li>
<p>pnpm config</p>
<ul>
<li>pnpm config get registry：查看当前设置的源</li>
<li>pnpm config set registry &lt;源地址&gt;：设置源</li>
</ul>
</li>
<li>
<p>pnpm add 包名：指定 <strong>包名</strong>，或者 <strong>包名@版本号</strong></p>
</li>
<li>
<p>pnpm update 包名：升级包到最新版本</p>
</li>
<li>
<p>pnpm remove 包名：卸载包</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 函数编程lambda表达式</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 函数编程lambda表达式</source>
      <description>我们关心的是如何写出好代码，而不是符合函数编程风格的代码。 Java8 函数编程lambda表达式 简介 lambda表达式 分类 惰性求值方法 及早求值方法 stream &amp; parallelStream stream &amp; parallelStream parallelStream原理: stream与parallelStream性能测试对比 Str...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>我们关心的是如何写出好代码，而不是符合函数编程风格的代码。</p>
</blockquote>
<ul>
<li>Java8 函数编程lambda表达式
<ul>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">lambda表达式</a></li>
<li>分类
<ul>
<li><a href="#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">惰性求值方法</a></li>
<li><a href="#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">及早求值方法</a></li>
</ul>
</li>
<li>stream &amp; parallelStream
<ul>
<li><a href="#stream--parallelstream-1">stream &amp; parallelStream</a></li>
<li><a href="#parallelstream%E5%8E%9F%E7%90%86">parallelStream原理:</a></li>
<li><a href="#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94">stream与parallelStream性能测试对比</a></li>
<li><a href="#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B">Stream中常用方法如下:</a></li>
</ul>
</li>
<li>常用例子
<ul>
<li><a href="#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99">匿名类简写</a></li>
<li><a href="#foreach">forEach</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">方法引用</a></li>
<li><a href="#filter--predicate">Filter &amp; Predicate</a></li>
<li><a href="#mapreduce">Map&amp;Reduce</a></li>
<li><a href="#collectors">Collectors</a></li>
<li><a href="#flatmap">flatMap</a></li>
<li><a href="#distinct">distinct</a></li>
<li><a href="#count">count</a></li>
<li><a href="#match">Match</a></li>
<li><a href="#minmaxsummarystatistics">min,max,summaryStatistics</a></li>
<li><a href="#peek">peek</a></li>
</ul>
</li>
<li>FunctionalInterface
<ul>
<li><a href="#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface">理解注解 @FunctionInterface</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">自定义函数接口</a></li>
<li><a href="#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">内置四大函数接口</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#简介"><span></span></a><a href="#%E7%AE%80%E4%BB%8B">#</a> 简介</h2>
<blockquote>
<p>在Java世界里面，面向对象还是主流思想，对于习惯了面向对象编程的开发者来说，抽象的概念并不陌生。面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此，因此这两种编程方式我们都得学。</p>
</blockquote>
<blockquote>
<p>这种新的抽象方式还有其他好处。很多人不总是在编写性能优先的代码，对于这些人来说，函数式编程带来的好处尤为明显。程序员能编写出更容易阅读的代码——这种代码更多地表达了业务逻辑，而不是从机制上如何实现。易读的代码也易于维护、更可靠、更不容易出错。</p>
</blockquote>
<blockquote>
<p>在写回调函数和事件处理器时，程序员不必再纠缠于匿名内部类的冗繁和可读性，函数式编程让事件处理系统变得更加简单。能将函数方便地传递也让编写惰性代码变得容易，只有在真正需要的时候，才初始化变量的值。</p>
</blockquote>
<p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p>
<p>核心思想: 使用不可变值和函数，函数对一个值进行处理，映射成另一个值。</p>
<p>对核心类库的改进主要包括集合类的API和新引入的流Stream。流使程序员可以站在更高的抽象层次上对集合进行操作。</p>
<h2><a class="header-anchor" href="#lambda表达式"><span></span></a><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a> lambda表达式</h2>
<ul>
<li>lambda表达式仅能放入如下代码: 预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法，或者SAM(Single Abstract Method 单个抽象方法)类型。这些称为lambda表达式的目标类型，可以用作返回类型，或lambda目标代码的参数。例如，若一个方法接收Runnable、Comparable或者 Callable 接口，都有单个抽象方法，可以传入lambda表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式。</li>
<li>lambda表达式内可以使用<code>方法引用</code>，仅当该方法不修改lambda表达式提供的参数。本例中的lambda表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(n </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(n));</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span><span style="color:#7F848E;font-style:italic">  // 使用方法引用</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，若对参数有任何修改，则不能使用方法引用，而需键入完整地lambda表达式，如下所示:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF"> s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"*"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> s </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "*"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>事实上，可以省略这里的lambda参数的类型声明，编译器可以从列表的类属性推测出来。</p>
<ul>
<li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li>
<li>Lambda表达式在Java中又称为闭包或匿名函数，所以如果有同事把它叫闭包的时候，不用惊讶。</li>
<li>Lambda方法在编译器内部被翻译成私有方法，并派发 invokedynamic 字节码指令来进行调用。可以使用JDK中的 javap 工具来反编译class文件。使用 javap -p 或 javap -c -v 命令来看一看lambda表达式生成的字节码。大致应该长这样:</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#61AFEF"> lambda$0</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li>lambda表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在lambda内部修改定义在域外的变量。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> primes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">[]{</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">});</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> factor </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">primes</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(element </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> { factor++; });</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compile time error : "local variables referenced from a lambda expression must be final or effectively final" 另外，只是访问它而不作修改是可以的，如下所示:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> primes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">[]{</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">});</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> factor </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">primes</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(element </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(factor</span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF">element); });</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#分类"><span></span></a><a href="#%E5%88%86%E7%B1%BB">#</a> 分类</h2>
<h3><a class="header-anchor" href="#惰性求值方法"><span></span></a><a href="#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">#</a> 惰性求值方法</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(f </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如上示例，这行代码并未做什么实际性的工作，filter只是<strong>描述</strong>了Stream，<strong>没有产生新的集合</strong>。</p>
<p>如果是多个条件组合，可以通过代码块{}</p>
<h3><a class="header-anchor" href="#及早求值方法"><span></span></a><a href="#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">#</a> 及早求值方法</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(f </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">)).</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如上示例，collect最终会从Stream产生新值，拥有终止操作。</p>
<p>理想方式是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果。与建造者模式相似，建造者模式先是使用一系列操作设置属性和配置，最后调用build方法，创建对象。</p>
<h2><a class="header-anchor" href="#stream-parallelstream"><span></span></a><a href="#stream-parallelstream">#</a> stream &amp; parallelStream</h2>
<h3><a class="header-anchor" href="#stream-parallelstream-1"><span></span></a><a href="#stream-parallelstream-1">#</a> stream &amp; parallelStream</h3>
<p>每个Stream都有两种模式: 顺序执行和并行执行。</p>
<p>顺序流:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> people </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> list</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>并行流:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> people </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> list</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">getStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parallel</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>顾名思义，当使用顺序方式去遍历时，每个item读完后再读下一个item。而使用并行去遍历时，数组会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。</p>
<h3><a class="header-anchor" href="#parallelstream原理"><span></span></a><a href="#parallelstream%E5%8E%9F%E7%90%86">#</a> parallelStream原理:</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> originalList </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> someData</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">split1 </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> originalList</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mid)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//将数据分小部分</span></span>
<span class="line"><span style="color:#E06C75">split2 </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> originalList</span><span style="color:#E06C75">(mid</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">end)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">split1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//小部分执行操作</span></span>
<span class="line"><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">split2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> revisedList </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> split1 </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> split2</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//将结果合并</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家对hadoop有稍微了解就知道，里面的 MapReduce 本身就是用于并行处理大数据集的软件框架，其 处理大数据的核心思想就是大而化小，分配到不同机器去运行map，最终通过reduce将所有机器的结果结合起来得到一个最终结果，与MapReduce不同，Stream则是利用多核技术可将大数据通过多核并行处理，而MapReduce则可以分布式的。</p>
<h3><a class="header-anchor" href="#stream与parallelstream性能测试对比"><span></span></a><a href="#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94">#</a> stream与parallelStream性能测试对比</h3>
<p>如果是多核机器，理论上并行流则会比顺序流快上一倍，下面是测试代码</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> t0 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//初始化一个范围100万整数流,求能被2整除的数字，toArray()是终点方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> a[]</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">IntStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">range</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1_000_000</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> p </span><span style="color:#56B6C2">%</span><span style="color:#D19A66"> 2</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> t1 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//和上面功能一样，这里是用并行流来计算</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> b[]</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">IntStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">range</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1_000_000</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">parallel</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> p </span><span style="color:#56B6C2">%</span><span style="color:#D19A66"> 2</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> t2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nanoTime</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//我本机的结果是serial: 0.06s, parallel 0.02s，证明并行流确实比顺序流快</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printf</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"serial: %.2fs, parallel %.2fs%n"</span><span style="color:#ABB2BF">, (t1 </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> t0) </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 1e-9</span><span style="color:#ABB2BF">, (t2 </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> t1) </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 1e-9</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#stream中常用方法如下"><span></span></a><a href="#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B">#</a> Stream中常用方法如下:</h3>
<ul>
<li><code>stream()</code>, <code>parallelStream()</code></li>
<li><code>filter()</code></li>
<li><code>findAny()</code> <code>findFirst()</code></li>
<li><code>sort</code></li>
<li><code>forEach</code> void</li>
<li><code>map(), reduce()</code></li>
<li><code>flatMap()</code> - 将多个Stream连接成一个Stream</li>
<li><code>collect(Collectors.toList())</code></li>
<li><code>distinct</code>, <code>limit</code></li>
<li><code>count</code></li>
<li><code>min</code>, <code>max</code>, <code>summaryStatistics</code></li>
</ul>
<p>看下所有API:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#常用例子"><span></span></a><a href="#%E5%B8%B8%E7%94%A8%E4%BE%8B%E5%AD%90">#</a> 常用例子</h2>
<h3><a class="header-anchor" href="#匿名类简写"><span></span></a><a href="#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99">#</a> 匿名类简写</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Thread</span><span style="color:#E06C75">( () </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"In Java8, Lambda expression rocks !!"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75"> )</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 用法</span></span>
<span class="line"><span style="color:#E06C75">(params) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> expression</span></span>
<span class="line"><span style="color:#E06C75">(params) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> statement</span></span>
<span class="line"><span style="color:#E06C75">(params) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> { statements }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#foreach"><span></span></a><a href="#foreach">#</a> forEach</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// forEach</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> features </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Lambdas"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Default Method"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Stream API"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Date and Time API"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">features</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(n </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(n));</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span>
<span class="line"><span style="color:#E5C07B">features</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#方法引用"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">#</a> 方法引用</h3>
<p><em>构造引用</em></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Supplier&lt;Student&gt; s = () -&gt; new Student();</span></span>
<span class="line"><span style="color:#E5C07B">Supplier</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Student</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Student</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>对象::实例方法 Lambda表达式的(形参列表)与实例方法的(实参列表)类型，个数是对应</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// set.forEach(t -&gt; System.out.println(t));</span></span>
<span class="line"><span style="color:#E5C07B">set</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类名::静态方法</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Stream&lt;Double&gt; stream = Stream.generate(() -&gt; Math.random());</span></span>
<span class="line"><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Double</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">generate</span><span style="color:#ABB2BF">(Math</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">random);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类名::实例方法</code></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//  TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;((s1,s2) -&gt; s1.compareTo(s2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/*  这里如果使用第一句话，编译器会有提示: Can be replaced with Comparator.naturalOrder，这句话告诉我们</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  String已经重写了compareTo()方法，在这里写是多此一举，这里为什么这么写，是因为为了体现下面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  这句编译器的提示: Lambda can be replaced with method reference。好了，下面的这句就是改写成方法引用之后: </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">*/</span></span>
<span class="line"><span style="color:#E5C07B">TreeSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> set </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeSet</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(String</span><span style="color:#C678DD">::</span><span style="color:#E06C75">compareTo)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filter-predicate"><span></span></a><a href="#filter-predicate">#</a> Filter &amp; Predicate</h3>
<p>常规用法</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(args[]){</span></span>
<span class="line"><span style="color:#E5C07B">    List</span><span style="color:#E06C75"> languages </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Java"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Scala"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"C++"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Haskell"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Lisp"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Languages which starts with J :"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"J"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Languages which ends with a "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">endsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Print all languages :"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#D19A66">true</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Print no language : "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#D19A66">false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Print language whose length greater than 4:"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">    filter</span><span style="color:#E06C75">(languages</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (str)</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 4</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> filter</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">List</span><span style="color:#E06C75"> names</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Predicate</span><span style="color:#E06C75"> condition) {</span></span>
<span class="line"><span style="color:#E5C07B">    names</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((name) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">condition</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(name))).</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((name) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(name </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> " "</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个Predicate组合filter</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 可以用and()、or()和xor()逻辑函数来合并Predicate，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> startsWithJ </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> n</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"J"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> fourLetterLong </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> n</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">names</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">startsWithJ</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">and</span><span style="color:#ABB2BF">(fourLetterLong))</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((n) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"nName, which starts with 'J' and four letter long is : "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> n));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#map-reduce"><span></span></a><a href="#map-reduce">#</a> Map&amp;Reduce</h3>
<p>map将集合类(例如列表)元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#E06C75"> costBeforeTax </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">200</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">300</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">400</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">500</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">double</span><span style="color:#E06C75"> bill </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> costBeforeTax</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((cost) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> cost </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> .12</span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF">cost).</span><span style="color:#61AFEF">reduce</span><span style="color:#ABB2BF">((sum, cost) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> sum </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> cost).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Total : "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> bill);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#collectors"><span></span></a><a href="#collectors">#</a> Collectors</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 将字符串换成大写并用逗号链接起来</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> G7 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"USA"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Japan"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"France"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Germany"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Italy"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"U.K."</span><span style="color:#ABB2BF">,</span><span style="color:#98C379">"Canada"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> G7Countries </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> G7</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(x </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">", "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(G7Countries);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Collectors.joining(", ")</li>
<li>Collectors.toList()</li>
<li>Collectors.toSet() ，生成set集合</li>
<li>Collectors.toMap(MemberModel::getUid, Function.identity())</li>
<li>Collectors.toMap(ImageModel::getAid, o -&gt; IMAGE_ADDRESS_PREFIX + o.getUrl())</li>
</ul>
<h3><a class="header-anchor" href="#flatmap"><span></span></a><a href="#flatmap">#</a> flatMap</h3>
<p>将多个Stream连接成一个Stream</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> result</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">),</span><span style="color:#E5C07B">Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">6</span><span style="color:#ABB2BF">)).</span><span style="color:#61AFEF">flatMap</span><span style="color:#ABB2BF">(a</span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>结果: [1, 3, 5, 6]</p>
<h3><a class="header-anchor" href="#distinct"><span></span></a><a href="#distinct">#</a> distinct</h3>
<p>去重</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">LikeDO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> likeDOs</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">LikeDO</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> likeTidList </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> likeDOs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(LikeDO</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getTid)</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">distinct</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#count"><span></span></a><a href="#count">#</a> count</h3>
<p>计总数</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> countOfAdult</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">persons</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                       .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAge</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 18</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                       .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(person </span><span style="color:#C678DD">-&gt;</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Adult</span><span style="color:#ABB2BF">(person))</span></span>
<span class="line"><span style="color:#ABB2BF">                       .</span><span style="color:#61AFEF">count</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#match"><span></span></a><a href="#match">#</a> Match</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> anyStartsWithA </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">anyMatch</span><span style="color:#ABB2BF">((s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(anyStartsWithA);</span><span style="color:#7F848E;font-style:italic">      // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> allStartsWithA </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">allMatch</span><span style="color:#ABB2BF">((s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"a"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(allStartsWithA);</span><span style="color:#7F848E;font-style:italic">      // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">boolean</span><span style="color:#E06C75"> noneStartsWithZ </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">noneMatch</span><span style="color:#ABB2BF">((s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"z"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(noneStartsWithZ);</span><span style="color:#7F848E;font-style:italic">      // true</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#min-max-summarystatistics"><span></span></a><a href="#min-max-summarystatistics">#</a> min,max,summaryStatistics</h3>
<p>最小值，最大值</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lists </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p2"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p3"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p4"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">Person</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(t </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">())).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">a</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果比较器涉及多个条件，比较复杂，可以定制</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B"> Person</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Comparator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">      @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">      public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> compare</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Person</span><span style="color:#E06C75;font-style:italic"> o1</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Person</span><span style="color:#E06C75;font-style:italic"> o2</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">           if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">o1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> o2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">()) </span><span style="color:#C678DD">return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">           if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">o1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> o2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getId</span><span style="color:#ABB2BF">()) </span><span style="color:#C678DD">return</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">           return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">       }</span></span>
<span class="line"><span style="color:#ABB2BF"> }).</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>summaryStatistics</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//获取数字的个数、最小值、最大值、总和以及平均值</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> primes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asList</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">13</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">17</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">19</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">23</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">29</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">IntSummaryStatistics</span><span style="color:#E06C75"> stats </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> primes</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">mapToInt</span><span style="color:#ABB2BF">((x) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> x).</span><span style="color:#61AFEF">summaryStatistics</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Highest prime number in List : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMax</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Lowest prime number in List : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMin</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sum of all prime numbers : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSum</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Average of all prime numbers : "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> stats</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAverage</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#peek"><span></span></a><a href="#peek">#</a> peek</h3>
<p>可以使用peek方法，peek方法可只包含一个空的方法体，只要能设置断点即可，但有些IDE不允许空，可以如下文示例，简单写一个打印逻辑。</p>
<p>注意，调试完后要删掉。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lists </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p1"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p2"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p3"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4L</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"p4"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(lists);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">				 .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(f </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">peek</span><span style="color:#ABB2BF">(t </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">                })</span></span>
<span class="line"><span style="color:#ABB2BF">                .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(list2);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#functionalinterface"><span></span></a><a href="#functionalinterface">#</a> FunctionalInterface</h2>
<h3><a class="header-anchor" href="#理解注解-functioninterface"><span></span></a><a href="#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface">#</a> 理解注解 @FunctionInterface</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * An informative annotation type used to indicate that an interface</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * type declaration is intended to be a &lt;i&gt;functional interface&lt;/i&gt; as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * defined by the Java Language Specification.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Conceptually, a functional interface has exactly one abstract</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * method.  Since {@linkplain java.lang.reflect.Method#isDefault()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * default methods} have an implementation, they are not abstract.  If</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * an interface declares an abstract method overriding one of the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * public methods of {@code java.lang.Object}, that also does</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;em&gt;not&lt;/em&gt; count toward the interface's abstract method count</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * since any implementation of the interface will have an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * implementation from {@code java.lang.Object} or elsewhere.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;p&gt;Note that instances of functional interfaces can be created with</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * lambda expressions, method references, or constructor references.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;p&gt;If a type is annotated with this annotation type, compilers are</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * required to generate an error message unless:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;li&gt; The type is an interface type and not an annotation type, enum, or class.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;li&gt; The annotated type satisfies the requirements of a functional interface.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * &lt;p&gt;However, the compiler will treat any interface meeting the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * definition of a functional interface as a functional interface</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * regardless of whether or not a {@code FunctionalInterface}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * annotation is present on the interface declaration.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @jls 4.3.2. The Class Object</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @jls 9.8 Functional Interfaces</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * @jls 9.4.3 Interface Method Body</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Documented</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Retention</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">RetentionPolicy</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RUNTIME</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Target</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ElementType</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TYPE</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> FunctionalInterface</span><span style="color:#E06C75">{}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>interface做注解的注解类型，被定义成java语言规范</li>
<li>一个被它注解的接口只能有一个抽象方法，有两种例外</li>
<li>第一是接口允许有实现的方法，这种实现的方法是用default关键字来标记的(java反射中java.lang.reflect.Method#isDefault()方法用来判断是否是default方法)</li>
<li>第二如果声明的方法和java.lang.Object中的某个方法一样，它可以不当做未实现的方法，不违背这个原则: 一个被它注解的接口只能有一个抽象方法, 比如: <code>java public interface Comparator&lt;T&gt; { int compare(T o1, T o2); boolean equals(Object obj); } </code></li>
<li>如果一个类型被这个注解修饰，那么编译器会要求这个类型必须满足如下条件:
<ul>
<li>这个类型必须是一个interface，而不是其他的注解类型、枚举enum或者类class</li>
<li>这个类型必须满足function interface的所有要求，如你个包含两个抽象方法的接口增加这个注解，会有编译错误。</li>
</ul>
</li>
<li>编译器会自动把满足function interface要求的接口自动识别为function interface，所以你才不需要对上面示例中的 ITest接口增加@FunctionInterface注解。</li>
</ul>
<h3><a class="header-anchor" href="#自定义函数接口"><span></span></a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">#</a> 自定义函数接口</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">FunctionalInterface</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> IMyInterface</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> study</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.isea.java</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestIMyInterface</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        IMyInterface</span><span style="color:#E06C75"> iMyInterface</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> () </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"I like study"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        iMyInterface</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">study</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#内置四大函数接口"><span></span></a><a href="#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">#</a> 内置四大函数接口</h3>
<ul>
<li>消费型接口: Consumer&lt; T&gt; void accept(T t)有参数，无返回值的抽象方法；</li>
</ul>
<blockquote>
<p><code>比如: map.forEach(BiConsumer&lt;A, T&gt;)</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Consumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> greeter </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Hello, "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">firstName</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">greeter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Luke"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Skywalker"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>供给型接口: <code>Supplier &lt; T&gt; T get()</code> 无参有返回值的抽象方法；</li>
</ul>
<blockquote>
<p><code>以stream().collect(Collector&lt;? super T, A, R&gt; collector)为例:</code></p>
</blockquote>
<p>比如:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Supplier</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> personSupplier </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Person</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">personSupplier</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">   // new Person</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>再如:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 调用方法</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">R</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> R</span><span style="color:#61AFEF"> collect</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collector</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> T</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> R</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> collector)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Collectors.toSet</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#E5C07B">	Collector</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> ?</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#61AFEF"> toSet</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    	return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> CollectorImpl</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">((</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#E06C75">) HashSet</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> Set</span><span style="color:#C678DD">::</span><span style="color:#E06C75">add</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                               (left</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> right) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75"> { </span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAll</span><span style="color:#ABB2BF">(right);</span><span style="color:#C678DD"> return</span><span style="color:#E06C75"> left</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                               CH_UNORDERED_ID)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// CollectorImpl</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Supplier</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> BiConsumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> BinaryOperator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> R</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> finisher</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> characteristics</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">CollectorImpl</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BiConsumer</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BinaryOperator</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              Function</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">R</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> finisher</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Characteristics</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> characteristics) {</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">supplier</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">accumulator</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">combiner</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">finisher</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> finisher</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">characteristics</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> characteristics</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">CollectorImpl</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> supplier</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BiConsumer</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              BinaryOperator</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">              Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Characteristics</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> characteristics) {</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#E06C75">(supplier</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> accumulator</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> combiner</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> castingIdentity</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> characteristics)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// collect()方法实现</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">R</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> R</span><span style="color:#61AFEF"> collect</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collector</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> P_OUT</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> A</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> R</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> collector) {</span></span>
<span class="line"><span style="color:#E5C07B">    A</span><span style="color:#E06C75"> container</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">isParallel</span><span style="color:#E06C75">()</span></span>
<span class="line"><span style="color:#56B6C2">            &amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">characteristics</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">CONCURRENT</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#56B6C2">            &amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isOrdered</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">||</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">characteristics</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNORDERED</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E06C75">        container </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">supplier</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        BiConsumer</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">A</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> ?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> P_OUT</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> accumulator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accumulator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        forEach</span><span style="color:#E06C75">(u </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> accumulator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(container, u)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        container </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> evaluate</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ReduceOps</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">makeRef</span><span style="color:#ABB2BF">(collector)</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">characteristics</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collector</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Characteristics</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">IDENTITY_FINISH</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">           ?</span><span style="color:#E06C75"> (R) container</span></span>
<span class="line"><span style="color:#C678DD">           :</span><span style="color:#E5C07B"> collector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">finisher</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(container);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>断定型接口: <code>Predicate&lt;T&gt; boolean test(T t)</code>:有参，但是返回值类型是固定的boolean</li>
</ul>
<blockquote>
<p><code>比如: steam().filter()中参数就是Predicate</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> predicate </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (s) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"foo"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">              // true</span></span>
<span class="line"><span style="color:#E5C07B">predicate</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">negate</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"foo"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">     // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> nonNull </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Objects</span><span style="color:#C678DD">::</span><span style="color:#E06C75">nonNull</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> isNull </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Objects</span><span style="color:#C678DD">::</span><span style="color:#E06C75">isNull</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> isEmpty </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> String</span><span style="color:#C678DD">::</span><span style="color:#E06C75">isEmpty</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Predicate</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> isNotEmpty </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> isEmpty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">negate</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>函数型接口: Function&lt;T,R&gt; R apply(T t)有参有返回值的抽象方法；</li>
</ul>
<blockquote>
<p><code>比如: steam().map() 中参数就是Function&lt;? super T, ? extends R&gt;；reduce()中参数BinaryOperator&lt;T&gt; (ps: BinaryOperator&lt;T&gt; extends BiFunction&lt;T,T,T&gt;)</code></p>
</blockquote>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> toInteger </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Integer</span><span style="color:#C678DD">::</span><span style="color:#E06C75">valueOf</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">Function</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> backToString </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> toInteger</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">andThen</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">backToString</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">apply</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"123"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">     // "123"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#一些例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</h2>
<ul>
<li>输出 年龄&gt;25的女程序员中名字排名前3位的姓名</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">javaProgrammers</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAge</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 25</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#98C379">"female"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getGender</span><span style="color:#ABB2BF">())))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">((p, p2) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getFirstName</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getFirstName</span><span style="color:#ABB2BF">())))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">          //.forEach(e -&gt; e.setSalary(e.getSalary() / 100 * 5 + e.getSalary()))//涨工资</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((p) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printf</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"%s %s; "</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getFirstName</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLastName</span><span style="color:#ABB2BF">()));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>工资最高的 Java programmer</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Person</span><span style="color:#E06C75"> person </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">((p, p2) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> p2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">()))</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>将 Java programmers 的 first name 存放到 TreeSet</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">TreeSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> javaDevLastName </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getLastName)</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">toCollection</span><span style="color:#ABB2BF">(TreeSet</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>计算付给 Java programmers 的所有money</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> totalSalary </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">parallelStream</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">mapToInt</span><span style="color:#ABB2BF">(p </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getSalary</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">          .</span><span style="color:#61AFEF">sum</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Comparator多属性排序: 先按名字不分大小写排，再按GID倒序排，最后按年龄正序排</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">	List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Person</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> personList </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getTestList</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">	personList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">comparing</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getName, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">CASE_INSENSITIVE_ORDER</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">			.</span><span style="color:#61AFEF">thenComparing</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getGid, (a, b) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(a))</span></span>
<span class="line"><span style="color:#ABB2BF">			.</span><span style="color:#61AFEF">thenComparingInt</span><span style="color:#ABB2BF">(Person</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getAge));</span></span>
<span class="line"><span style="color:#E5C07B">	personList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">stream</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> List</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">Person</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getTestList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#E5C07B"> Lists</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newArrayList</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"301"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">			new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">6</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"303"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">			new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"dai"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"302"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"zhang"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"302"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"zhang"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"301"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">9</span><span style="color:#ABB2BF">),</span></span>
<span class="line"><span style="color:#C678DD">			new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Li"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"301"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 输出结果</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=6]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=10]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=303, age=11]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=302, age=9]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=dai, gid=301, age=10]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=Li, gid=301, age=8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=zhang, gid=302, age=9]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Person [name=zhang, gid=301, age=9]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>处理字符串</li>
</ul>
<p>两个新的方法可在字符串类上使用: join和chars。第一个方法使用指定的分隔符，将任何数量的字符串连接为一个字符串。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">":"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"foobar"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"foo"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"bar"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; foobar:foo:bar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个方法chars从字符串所有字符创建数据流，所以你可以在这些字符上使用流式操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379">"foobar:foo:bar"</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">chars</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">distinct</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">mapToObj</span><span style="color:#ABB2BF">(c </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">((</span><span style="color:#C678DD">char</span><span style="color:#ABB2BF">)c))</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; :abfor</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅仅是字符串，正则表达式模式串也能受益于数据流。我们可以分割任何模式串，并创建数据流来处理它们，而不是将字符串分割为单个字符的数据流，像下面这样:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">":"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">splitAsStream</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"foobar:foo:bar"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(s </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"bar"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">":"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; bar:foobar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，正则模式串可以转换为谓词。这些谓词可以像下面那样用于过滤字符串流:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Pattern</span><span style="color:#E06C75"> pattern </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">".*@gmail</span><span style="color:#56B6C2">\\</span><span style="color:#98C379">.com"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"bob@gmail.com"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"alice@hotmail.com"</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">pattern</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">asPredicate</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">count</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// =&gt; 1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的模式串接受任何以<code>@gmail.com</code>结尾的字符串，并且之后用作Java8的Predicate来过滤电子邮件地址流。</p>
<ul>
<li>Local Cache实现</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestLocalCache</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ConcurrentHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Long</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> cache </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ConcurrentHashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">	static</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> i</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#ABB2BF"> (i </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#ABB2BF"> i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">		if</span><span style="color:#ABB2BF"> (i </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">		return</span><span style="color:#E5C07B"> cache</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">computeIfAbsent</span><span style="color:#ABB2BF">(i, (key) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">			System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Slow calculation of "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">			return</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(i </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(i </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">		});</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#E06C75">	</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// warm up</span></span>
<span class="line"><span style="color:#C678DD">		for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 101</span><span style="color:#ABB2BF">; i++)</span></span>
<span class="line"><span style="color:#E5C07B">	        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#98C379">	            "f("</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> i </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ") = "</span><span style="color:#56B6C2"> +</span><span style="color:#61AFEF"> fibonacci</span><span style="color:#ABB2BF">(i));</span></span>
<span class="line"><span style="color:#ABB2BF">		</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		// read -&gt; cal</span></span>
<span class="line"><span style="color:#C678DD">		long</span><span style="color:#E06C75"> current</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">		System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">fibonacci</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">		System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF">current);</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>`集合--》取元素的一个属性--》去重</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错 Java 内存分析之堆内存和MetaSpace内存</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8CMetaSpace%E5%86%85%E5%AD%98.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8CMetaSpace%E5%86%85%E5%AD%98.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 内存分析之堆内存和MetaSpace内存</source>
      <description>本文以两个简单的例子(堆内存溢出和MetaSpace (元数据) 内存溢出）解释Java 内存溢出的分析过程。 调试排错 Java 内存分析之堆内存和MetaSpace内存 常见的内存溢出问题(内存和MetaSpace内存) Java 堆内存溢出 OutOfMemoryError: Java heap space OutOfMemoryError: G...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文以两个简单的例子(<code>堆内存溢出</code>和<code>MetaSpace (元数据) 内存溢出</code>）解释Java 内存溢出的分析过程。</p>
</blockquote>
<ul>
<li>调试排错 Java 内存分析之堆内存和MetaSpace内存
<ul>
<li>常见的内存溢出问题(内存和MetaSpace内存)
<ul>
<li>Java 堆内存溢出
<ul>
<li><a href="#outofmemoryerror-java-heap-space">OutOfMemoryError: Java heap space</a></li>
<li><a href="#outofmemoryerror-gc-overhead-limit-exceeded">OutOfMemoryError: GC overhead limit exceeded</a></li>
</ul>
</li>
<li><a href="#metaspace-%E5%85%83%E6%95%B0%E6%8D%AE-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA">MetaSpace (元数据) 内存溢出</a></li>
</ul>
</li>
<li>分析案例
<ul>
<li><a href="#%E5%A0%86%E5%86%85%E5%AD%98dump">堆内存dump</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8mat%E5%88%86%E6%9E%90%E5%86%85%E5%AD%98">使用MAT分析内存</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#常见的内存溢出问题-内存和metaspace内存"><span></span></a><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98-%E5%86%85%E5%AD%98%E5%92%8Cmetaspace%E5%86%85%E5%AD%98">#</a> 常见的内存溢出问题(内存和MetaSpace内存)</h2>
<blockquote>
<p>常见的内存溢出问题(内存和MetaSpace内存)。</p>
</blockquote>
<h3><a class="header-anchor" href="#java-堆内存溢出"><span></span></a><a href="#java-%E5%A0%86%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA">#</a> Java 堆内存溢出</h3>
<p>Java 堆内存（Heap Memory)主要有两种形式的错误：</p>
<ol>
<li>OutOfMemoryError: Java heap space</li>
<li>OutOfMemoryError: GC overhead limit exceeded</li>
</ol>
<h4><a class="header-anchor" href="#outofmemoryerror-java-heap-space"><span></span></a><a href="#outofmemoryerror-java-heap-space">#</a> OutOfMemoryError: Java heap space</h4>
<p>在 Java 堆中只要不断的创建对象，并且 <code>GC-Roots</code> 到对象之间存在引用链，这样 <code>JVM</code> 就不会回收对象。</p>
<p>只要将<code>-Xms(最小堆)</code>,<code>-Xmx(最大堆)</code> 设置为一样禁止自动扩展堆内存。</p>
<p>当使用一个 <code>while(true)</code> 循环来不断创建对象就会发生 <code>OutOfMemory</code>，还可以使用 <code>-XX:+HeapDumpOutofMemoryErorr</code> 当发生 OOM 时会自动 dump 堆栈到文件中。</p>
<p>伪代码:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">	List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(</span><span style="color:#D19A66">10</span><span style="color:#E06C75">) </span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">	while</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">true</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#E5C07B">		list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"1"</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当出现 OOM 时可以通过工具来分析 <code>GC-Roots</code> <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/GarbageCollection.md#%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreferrer">引用链在新窗口打开</a> ，查看对象和 <code>GC-Roots</code> 是如何进行关联的，是否存在对象的生命周期过长，或者是这些对象确实改存在的，那就要考虑将堆内存调大了。</p>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Exception in thread "main" java.lang.OutOfMemoryError: Java heap space</span></span>
<span class="line"><span>	at java.util.Arrays.copyOf(Arrays.java:3210)</span></span>
<span class="line"><span>	at java.util.Arrays.copyOf(Arrays.java:3181)</span></span>
<span class="line"><span>	at java.util.ArrayList.grow(ArrayList.java:261)</span></span>
<span class="line"><span>	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)</span></span>
<span class="line"><span>	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:227)</span></span>
<span class="line"><span>	at java.util.ArrayList.add(ArrayList.java:458)</span></span>
<span class="line"><span>	at com.crossoverjie.oom.HeapOOM.main(HeapOOM.java:18)</span></span>
<span class="line"><span>	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span>
<span class="line"><span>	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span>
<span class="line"><span>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span>
<span class="line"><span>	at java.lang.reflect.Method.invoke(Method.java:498)</span></span>
<span class="line"><span>	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Process finished with exit code 1</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>java.lang.OutOfMemoryError: Java heap space</code>表示堆内存溢出。</p>
<h4><a class="header-anchor" href="#outofmemoryerror-gc-overhead-limit-exceeded"><span></span></a><a href="#outofmemoryerror-gc-overhead-limit-exceeded">#</a> OutOfMemoryError: GC overhead limit exceeded</h4>
<p>GC overhead limt exceed检查是Hotspot VM 1.6定义的一个策略，通过统计GC时间来预测是否要OOM了，提前抛出异常，防止OOM发生。Sun 官方对此的定义是：“并行/并发回收器在GC回收时间过长时会抛出OutOfMemroyError。过长的定义是，超过98%的时间用来做GC并且回收了不到2%的堆内存。用来避免内存过小造成应用不能正常工作。“</p>
<p>PS：-Xmx最大内存配置2GB</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testOom1</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">	List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">&gt;&gt;</span><span style="color:#E06C75"> mapList </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">	for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 1000000</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">		Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> map </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">		for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> j</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">				map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">(j), j);</span></span>
<span class="line"><span style="color:#E06C75">		}</span></span>
<span class="line"><span style="color:#E5C07B">		mapList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(map);</span></span>
<span class="line"><span style="color:#E06C75">	}</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的代码执行会：old区占用过多导致频繁Full GC，最终导致GC overhead limit exceed。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> GC</span><span style="color:#E06C75"> overhead limit exceeded</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newNode</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1747</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putVal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">642</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">612</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">tech</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pdai</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">test</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">oom</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">controller</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TestOomController</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">testOom1</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TestOomController</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">33</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[classes</span><span style="color:#56B6C2">/</span><span style="color:#C678DD">:</span><span style="color:#E06C75">na]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reflect</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">NativeMethodAccessorImpl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke0</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Native</span><span style="color:#ABB2BF"> Method)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reflect</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">NativeMethodAccessorImpl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">NativeMethodAccessorImpl</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">62</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reflect</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DelegatingMethodAccessorImpl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DelegatingMethodAccessorImpl</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">43</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reflect</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Method</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">498</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[na</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_181</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">support</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">InvocableHandlerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doInvoke</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InvocableHandlerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">197</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">web</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">support</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">InvocableHandlerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invokeForRequest</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InvocableHandlerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">141</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">web</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mvc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">annotation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ServletInvocableHandlerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invokeAndHandle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ServletInvocableHandlerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">106</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mvc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">annotation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RequestMappingHandlerAdapter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invokeHandlerMethod</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">RequestMappingHandlerAdapter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">895</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mvc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">annotation</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RequestMappingHandlerAdapter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">handleInternal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">RequestMappingHandlerAdapter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">808</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mvc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">method</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AbstractHandlerMethodAdapter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">handle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AbstractHandlerMethodAdapter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">87</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DispatcherServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doDispatch</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DispatcherServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1064</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DispatcherServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doService</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DispatcherServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">963</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FrameworkServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">processRequest</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FrameworkServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">1006</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FrameworkServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doGet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FrameworkServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">898</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">http</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HttpServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">service</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">655</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">4.0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FR</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FrameworkServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">service</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FrameworkServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">883</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">webmvc</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">http</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HttpServlet</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">service</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HttpServlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">764</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">4.0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FR</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catalina</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">core</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">internalDoFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">228</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catalina</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">core</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">163</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">tomcat</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">websocket</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">server</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WsFilter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">WsFilter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">53</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">websocket</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catalina</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">core</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">internalDoFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">190</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catalina</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">core</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">163</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">filter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RequestContextFilter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilterInternal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">RequestContextFilter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">web</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">filter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OncePerRequestFilter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OncePerRequestFilter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">119</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">web</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catalina</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">core</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">internalDoFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">190</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">apache</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">catalina</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">core</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ApplicationFilterChain</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">163</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[tomcat</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">embed</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">core</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">9.0</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">50</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">filter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FormContentFilter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilterInternal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FormContentFilter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">93</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">web</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#E06C75">	at </span><span style="color:#E5C07B">org</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">springframework</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">web</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">filter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OncePerRequestFilter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OncePerRequestFilter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">119</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> ~</span><span style="color:#E06C75">[spring</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">web</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD">:</span><span style="color:#D19A66">5.3</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">9</span><span style="color:#E06C75">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用 <code>-XX:+HeapDumpOutofMemoryErorr</code> 当发生 OOM 时会自动 dump 堆栈到文件中。</p>
<p>JVM还有这样一个参数：<code>-XX:-UseGCOverheadLimit</code> 设置为false可以禁用这个检查。其实这个参数解决不了内存问题，只是把错误的信息延后，替换成 java.lang.OutOfMemoryError: Java heap space。</p>
<h3><a class="header-anchor" href="#metaspace-元数据-内存溢出"><span></span></a><a href="#metaspace-%E5%85%83%E6%95%B0%E6%8D%AE-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA">#</a> MetaSpace (元数据) 内存溢出</h3>
<blockquote>
<p><code>JDK8</code> 中将永久代移除，使用 <code>MetaSpace</code> 来保存类加载之后的类信息，字符串常量池也被移动到 Java 堆。</p>
</blockquote>
<p><code>PermSize</code> 和 <code>MaxPermSize</code> 已经不能使用了，在 JDK8 中配置这两个参数将会发出警告。</p>
<p>JDK 8 中将类信息移到到了本地堆内存(Native Heap)中，将原有的永久代移动到了本地堆中成为 <code>MetaSpace</code> ,如果不指定该区域的大小，JVM 将会动态的调整。</p>
<p>可以使用 <code>-XX:MaxMetaspaceSize=10M</code> 来限制最大元数据。这样当不停的创建类时将会占满该区域并出现 <code>OOM</code>。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#C678DD">	while</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">true</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#E5C07B">		Enhancer</span><span style="color:#E06C75">  enhancer </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Enhancer</span><span style="color:#E06C75">() </span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">		enhancer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setSuperclass</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">HeapOOM</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">		enhancer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setUseCache</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"><span style="color:#E5C07B">		enhancer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setCallback</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> MethodInterceptor</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#ABB2BF">			@</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">			public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> intercept</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Method</span><span style="color:#E06C75;font-style:italic"> method</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">objects</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">MethodProxy</span><span style="color:#E06C75;font-style:italic"> methodProxy</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Throwable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">				return</span><span style="color:#E5C07B"> methodProxy</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(o,objects) ;</span></span>
<span class="line"><span style="color:#ABB2BF">			}</span></span>
<span class="line"><span style="color:#ABB2BF">		});</span></span>
<span class="line"><span style="color:#E5C07B">		enhancer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">	}</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cglib</code> 不停的创建新类，最终会抛出:</p>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Caused by: java.lang.reflect.InvocationTargetException</span></span>
<span class="line"><span>	at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)</span></span>
<span class="line"><span>	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span>
<span class="line"><span>	at java.lang.reflect.Method.invoke(Method.java:498)</span></span>
<span class="line"><span>	at net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:459)</span></span>
<span class="line"><span>	at net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:336)</span></span>
<span class="line"><span>	... 11 more</span></span>
<span class="line"><span>Caused by: java.lang.OutOfMemoryError: Metaspace</span></span>
<span class="line"><span>	at java.lang.ClassLoader.defineClass1(Native Method)</span></span>
<span class="line"><span>	at java.lang.ClassLoader.defineClass(ClassLoader.java:763)</span></span>
<span class="line"><span>	... 16 more</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 这里的 OOM 伴随的是 <code>java.lang.OutOfMemoryError: Metaspace</code> 也就是元数据溢出。</p>
<h2><a class="header-anchor" href="#分析案例"><span></span></a><a href="#%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B">#</a> 分析案例</h2>
<blockquote>
<p>在实际工作中，如何去定位内存泄漏问题呢？</p>
</blockquote>
<h3><a class="header-anchor" href="#堆内存dump"><span></span></a><a href="#%E5%A0%86%E5%86%85%E5%AD%98dump">#</a> 堆内存dump</h3>
<ul>
<li><strong>通过OOM获取</strong></li>
</ul>
<p>即在OutOfMemoryError后获取一份HPROF二进制Heap Dump文件，在jvm中添加参数：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-XX:+HeapDumpOnOutOfMemoryError</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>主动获取</strong></li>
</ul>
<p>在虚拟机添加参数如下，然后在Ctrl+Break组合键即可获取一份Heap Dump</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-XX:+HeapDumpOnCtrlBreak</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>使用HPROF agent</strong></li>
</ul>
<p>使用Agent可以在程序执行结束时或受到SIGOUT信号时生成Dump文件</p>
<p>配置在虚拟机的参数如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-agentlib:hprof</span><span style="color:#98C379">=heap=dump,format=b</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>jmap获取</strong> (常用)</li>
</ul>
<p>jmap可以在cmd里执行，命令如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">jmap</span><span style="color:#D19A66"> -dump:format=b</span><span style="color:#98C379"> file=</span><span style="color:#ABB2BF">&lt;</span><span style="color:#98C379">文件名XX.hpro</span><span style="color:#ABB2BF">f&gt; &lt;</span><span style="color:#98C379">pi</span><span style="color:#ABB2BF">d&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><ul>
<li><strong>使用JConsole</strong></li>
</ul>
<p>Acquire Heap Dump</p>
<ul>
<li><strong>使用JProfile</strong></li>
</ul>
<p>Acquire Heap Dump</p>
<h3><a class="header-anchor" href="#使用mat分析内存"><span></span></a><a href="#%E4%BD%BF%E7%94%A8mat%E5%88%86%E6%9E%90%E5%86%85%E5%AD%98">#</a> 使用MAT分析内存</h3>
<p>MAT 等工具可以看：<a href="">Java 问题排查之JVM可视化工具 - MAT</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>调试排错 Java 内存分析之堆外内存</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 内存分析之堆外内存</source>
      <description>Java 堆外内存分析相对来说是复杂的，美团技术团队的Spring Boot引起的“堆外内存泄漏”排查及经验总结在新窗口打开可以为很多Native Code内存泄漏/占用提供方向性指引。 调试排错 Java 内存分析之堆外内存 背景 排查过程 使用Java层面的工具定位内存区域 使用系统层面的工具定位堆外内存 首先，使用了gperftools去定位问题...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java 堆外内存分析相对来说是复杂的，美团技术团队的<a href="https://tech.meituan.com/2019/01/03/spring-boot-native-memory-leak.html" target="_blank" rel="noopener noreferrer">Spring Boot引起的“堆外内存泄漏”排查及经验总结在新窗口打开</a>可以为很多Native Code内存泄漏/占用提供方向性指引。</p>
</blockquote>
<ul>
<li>调试排错 Java 内存分析之堆外内存
<ul>
<li><a href="#%E8%83%8C%E6%99%AF">背景</a></li>
<li>排查过程
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8java%E5%B1%82%E9%9D%A2%E7%9A%84%E5%B7%A5%E5%85%B7%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F">使用Java层面的工具定位内存区域</a></li>
<li>使用系统层面的工具定位堆外内存
<ul>
<li><a href="#%E9%A6%96%E5%85%88%E4%BD%BF%E7%94%A8%E4%BA%86gperftools%E5%8E%BB%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98">首先，使用了gperftools去定位问题</a></li>
<li><a href="#%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8strace%E5%8E%BB%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">然后，使用strace去追踪系统调用</a></li>
<li><a href="#%E6%8E%A5%E7%9D%80%E4%BD%BF%E7%94%A8gdb%E5%8E%BBdump%E5%8F%AF%E7%96%91%E5%86%85%E5%AD%98">接着，使用GDB去dump可疑内存</a></li>
<li><a href="#%E5%86%8D%E6%AC%A1%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E4%BD%BF%E7%94%A8strace%E5%8E%BB%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">再次，项目启动时使用strace去追踪系统调用</a></li>
<li><a href="#%E6%9C%80%E5%90%8E%E4%BD%BF%E7%94%A8jstack%E5%8E%BB%E6%9F%A5%E7%9C%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BA%BF%E7%A8%8B">最后，使用jstack去查看对应的线程</a></li>
</ul>
</li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B2%A1%E6%9C%89%E9%87%8A%E6%94%BE%E6%8E%89%E5%91%A2">为什么堆外内存没有释放掉呢？</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#背景"><span></span></a><a href="#%E8%83%8C%E6%99%AF">#</a> 背景</h2>
<p>为了更好地实现对项目的管理，我们将组内一个项目迁移到MDP框架（基于Spring Boot），随后我们就发现系统会频繁报出Swap区域使用量过高的异常。笔者被叫去帮忙查看原因，发现配置了4G堆内内存，但是实际使用的物理内存竟然高达7G，确实不正常。JVM参数配置是“-XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M -XX:+AlwaysPreTouch -XX:ReservedCodeCacheSize=128m -XX:InitialCodeCacheSize=128m, -Xss512k -Xmx4g -Xms4g,-XX:+UseG1GC -XX:G1HeapRegionSize=4M”，实际使用的物理内存如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#排查过程"><span></span></a><a href="#%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B">#</a> 排查过程</h2>
<h3><a class="header-anchor" href="#使用java层面的工具定位内存区域"><span></span></a><a href="#%E4%BD%BF%E7%94%A8java%E5%B1%82%E9%9D%A2%E7%9A%84%E5%B7%A5%E5%85%B7%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F">#</a> 使用Java层面的工具定位内存区域</h3>
<blockquote>
<p>使用Java层面的工具可以定位出堆内内存、Code区域或者使用unsafe.allocateMemory和DirectByteBuffer申请的堆外内存</p>
</blockquote>
<p>笔者在项目中添加<code>-XX:NativeMemoryTracking=detailJVM</code>参数重启项目，使用命令<code>jcmd pid VM.native_memory detail</code>查看到的内存分布如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>发现命令显示的committed的内存小于物理内存，因为jcmd命令显示的内存包含堆内内存、Code区域、通过unsafe.allocateMemory和DirectByteBuffer申请的内存，但是不包含其他Native Code（C代码）申请的堆外内存。所以猜测是使用Native Code申请内存所导致的问题。</p>
<p>为了防止误判，笔者使用了pmap查看内存分布，发现大量的64M的地址；而这些地址空间不在jcmd命令所给出的地址空间里面，基本上就断定就是这些64M的内存所导致。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#使用系统层面的工具定位堆外内存"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%B1%82%E9%9D%A2%E7%9A%84%E5%B7%A5%E5%85%B7%E5%AE%9A%E4%BD%8D%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98">#</a> 使用系统层面的工具定位堆外内存</h3>
<p>因为笔者已经基本上确定是Native Code所引起，而Java层面的工具不便于排查此类问题，只能使用系统层面的工具去定位问题。</p>
<h4><a class="header-anchor" href="#首先-使用了gperftools去定位问题"><span></span></a><a href="#%E9%A6%96%E5%85%88-%E4%BD%BF%E7%94%A8%E4%BA%86gperftools%E5%8E%BB%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98">#</a> 首先，使用了gperftools去定位问题</h4>
<p>gperftools的使用方法可以参考gperftools，gperftools的监控如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上图可以看出：使用malloc申请的的内存最高到3G之后就释放了，之后始终维持在700M-800M。笔者第一反应是：难道Native Code中没有使用malloc申请，直接使用mmap/brk申请的？（gperftools原理就使用动态链接的方式替换了操作系统默认的内存分配器（glibc）。）</p>
<h4><a class="header-anchor" href="#然后-使用strace去追踪系统调用"><span></span></a><a href="#%E7%84%B6%E5%90%8E-%E4%BD%BF%E7%94%A8strace%E5%8E%BB%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">#</a> 然后，使用strace去追踪系统调用</h4>
<p>因为使用gperftools没有追踪到这些内存，于是直接使用命令“strace -f -e”brk,mmap,munmap” -p pid”追踪向OS申请内存请求，但是并没有发现有可疑内存申请。strace监控如下图所示:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-5.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#接着-使用gdb去dump可疑内存"><span></span></a><a href="#%E6%8E%A5%E7%9D%80-%E4%BD%BF%E7%94%A8gdb%E5%8E%BBdump%E5%8F%AF%E7%96%91%E5%86%85%E5%AD%98">#</a> 接着，使用GDB去dump可疑内存</h4>
<p>因为使用strace没有追踪到可疑内存申请；于是想着看看内存中的情况。就是直接使用命令gdp -pid pid进入GDB之后，然后使用命令dump memory mem.bin startAddress endAddressdump内存，其中startAddress和endAddress可以从/proc/pid/smaps中查找。然后使用strings mem.bin查看dump的内容，如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-6.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从内容上来看，像是解压后的JAR包信息。读取JAR包信息应该是在项目启动的时候，那么在项目启动之后使用strace作用就不是很大了。所以应该在项目启动的时候使用strace，而不是启动完成之后。</p>
<h4><a class="header-anchor" href="#再次-项目启动时使用strace去追踪系统调用"><span></span></a><a href="#%E5%86%8D%E6%AC%A1-%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E4%BD%BF%E7%94%A8strace%E5%8E%BB%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8">#</a> 再次，项目启动时使用strace去追踪系统调用</h4>
<p>项目启动使用strace追踪系统调用，发现确实申请了很多64M的内存空间，截图如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>使用该mmap申请的地址空间在pmap对应如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#最后-使用jstack去查看对应的线程"><span></span></a><a href="#%E6%9C%80%E5%90%8E-%E4%BD%BF%E7%94%A8jstack%E5%8E%BB%E6%9F%A5%E7%9C%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BA%BF%E7%A8%8B">#</a> 最后，使用jstack去查看对应的线程</h4>
<p>因为strace命令中已经显示申请内存的线程ID。直接使用命令jstack pid去查看线程栈，找到对应的线程栈（注意10进制和16进制转换）如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这里基本上就可以看出问题来了：MCC（美团统一配置中心）使用了Reflections进行扫包，底层使用了Spring Boot去加载JAR。因为解压JAR使用Inflater类，需要用到堆外内存，然后使用Btrace去追踪这个类，栈如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>然后查看使用MCC的地方，发现没有配置扫包路径，默认是扫描所有的包。于是修改代码，配置扫包路径，发布上线后内存问题解决。</p>
<h3><a class="header-anchor" href="#为什么堆外内存没有释放掉呢"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B2%A1%E6%9C%89%E9%87%8A%E6%94%BE%E6%8E%89%E5%91%A2">#</a> 为什么堆外内存没有释放掉呢？</h3>
<p>虽然问题已经解决了，但是有几个疑问：</p>
<ul>
<li>为什么使用旧的框架没有问题？</li>
<li>为什么堆外内存没有释放？</li>
<li>为什么内存大小都是64M，JAR大小不可能这么大，而且都是一样大？</li>
<li>为什么gperftools最终显示使用的的内存大小是700M左右，解压包真的没有使用malloc申请内存吗？</li>
</ul>
<p>带着疑问，笔者直接看了一下<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader" target="_blank" rel="noopener noreferrer">Spring Boot Loader在新窗口打开</a>那一块的源码。发现Spring Boot对Java JDK的InflaterInputStream进行了包装并且使用了Inflater，而Inflater本身用于解压JAR包的需要用到堆外内存。而包装之后的类ZipInflaterInputStream没有释放Inflater持有的堆外内存。于是笔者以为找到了原因，立马向Spring Boot社区反馈了<a href="https://github.com/spring-projects/spring-boot/issues/13935" target="_blank" rel="noopener noreferrer">这个bug在新窗口打开</a>。但是反馈之后，笔者就发现Inflater这个对象本身实现了finalize方法，在这个方法中有调用释放堆外内存的逻辑。也就是说Spring Boot依赖于GC释放堆外内存。</p>
<p>笔者使用jmap查看堆内对象时，发现已经基本上没有Inflater这个对象了。于是就怀疑GC的时候，没有调用finalize。带着这样的怀疑，笔者把Inflater进行包装在Spring Boot Loader里面替换成自己包装的Inflater，在finalize进行打点监控，结果finalize方法确实被调用了。于是笔者又去看了Inflater对应的C代码，发现初始化的使用了malloc申请内存，end的时候也调用了free去释放内存。</p>
<p>此刻，笔者只能怀疑free的时候没有真正释放内存，便把Spring Boot包装的InflaterInputStream替换成Java JDK自带的，发现替换之后，内存问题也得以解决了。</p>
<p>这时，再返过来看gperftools的内存分布情况，发现使用Spring Boot时，内存使用一直在增加，突然某个点内存使用下降了好多（使用量直接由3G降为700M左右）。这个点应该就是GC引起的，内存应该释放了，但是在操作系统层面并没有看到内存变化，那是不是没有释放到操作系统，被内存分配器持有了呢？</p>
<p>继续探究，发现系统默认的内存分配器（glibc 2.12版本）和使用gperftools内存地址分布差别很明显，2.5G地址使用smaps发现它是属于Native Stack。内存地址分布如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>到此，基本上可以确定是内存分配器在捣鬼；搜索了一下glibc 64M，发现glibc从2.11开始对每个线程引入内存池（64位机器大小就是64M内存），原文如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-12.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>按照文中所说去修改MALLOC_ARENA_MAX环境变量，发现没什么效果。查看tcmalloc（gperftools使用的内存分配器）也使用了内存池方式。</p>
<p>为了验证是内存池搞的鬼，笔者就简单写个不带内存池的内存分配器。使用命令<code>gcc zjbmalloc.c -fPIC -shared -o zjbmalloc.so</code>生成动态库，然后使用<code>export LD_PRELOAD=zjbmalloc.so</code>替换掉glibc的内存分配器。其中代码Demo如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379">&lt;sys/mman.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379">&lt;stdlib.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379">&lt;stdio.h&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//作者使用的64位机器，sizeof(size_t)也就是sizeof(long) </span></span>
<span class="line"><span style="color:#C678DD">void*</span><span style="color:#61AFEF"> malloc</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF"> )</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">   long*</span><span style="color:#ABB2BF"> ptr </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> mmap</span><span style="color:#ABB2BF">( </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, size </span><span style="color:#C678DD">+</span><span style="color:#C678DD"> sizeof</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#ABB2BF">), PROT_READ </span><span style="color:#C678DD">|</span><span style="color:#ABB2BF"> PROT_WRITE, MAP_PRIVATE </span><span style="color:#C678DD">|</span><span style="color:#ABB2BF"> MAP_ANONYMOUS, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF"> );</span></span>
<span class="line"><span style="color:#C678DD">   if</span><span style="color:#ABB2BF"> (ptr </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> MAP_FAILED) {</span></span>
<span class="line"><span style="color:#C678DD">  	return</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#C678DD">   *</span><span style="color:#ABB2BF">ptr </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> size;</span><span style="color:#7F848E;font-style:italic">                     // First 8 bytes contain length.</span></span>
<span class="line"><span style="color:#C678DD">   return</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">void*</span><span style="color:#ABB2BF">)(</span><span style="color:#C678DD">&amp;</span><span style="color:#E06C75">ptr</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">]);</span><span style="color:#7F848E;font-style:italic">        // Memory that is after length variable</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#61AFEF">calloc</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">size_t</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD"> void*</span><span style="color:#ABB2BF"> ptr </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> malloc</span><span style="color:#ABB2BF">(n </span><span style="color:#C678DD">*</span><span style="color:#ABB2BF"> size);</span></span>
<span class="line"><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (ptr </span><span style="color:#C678DD">==</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#61AFEF"> memset</span><span style="color:#ABB2BF">(ptr, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, n </span><span style="color:#C678DD">*</span><span style="color:#ABB2BF"> size);</span></span>
<span class="line"><span style="color:#C678DD"> return</span><span style="color:#ABB2BF"> ptr;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#61AFEF">realloc</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">ptr</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (size </span><span style="color:#C678DD">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">	free</span><span style="color:#ABB2BF">(ptr);</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (ptr </span><span style="color:#C678DD">==</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#61AFEF"> malloc</span><span style="color:#ABB2BF">(size);</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#C678DD"> long</span><span style="color:#C678DD"> *</span><span style="color:#ABB2BF">plen </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">long*</span><span style="color:#ABB2BF">)ptr;</span></span>
<span class="line"><span style="color:#ABB2BF"> plen</span><span style="color:#C678DD">--</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                          // Reach top of memory</span></span>
<span class="line"><span style="color:#C678DD"> long</span><span style="color:#ABB2BF"> len </span><span style="color:#C678DD">=</span><span style="color:#C678DD"> *</span><span style="color:#ABB2BF">plen;</span></span>
<span class="line"><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (size </span><span style="color:#C678DD">&lt;=</span><span style="color:#ABB2BF"> len) {</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#ABB2BF"> ptr;</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#C678DD"> void*</span><span style="color:#ABB2BF"> rptr </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> malloc</span><span style="color:#ABB2BF">(size);</span></span>
<span class="line"><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (rptr </span><span style="color:#C678DD">==</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">	free</span><span style="color:#ABB2BF">(ptr);</span></span>
<span class="line"><span style="color:#C678DD">	return</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#ABB2BF"> rptr </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> memcpy</span><span style="color:#ABB2BF">(rptr, ptr, len);</span></span>
<span class="line"><span style="color:#61AFEF"> free</span><span style="color:#ABB2BF">(ptr);</span></span>
<span class="line"><span style="color:#C678DD"> return</span><span style="color:#ABB2BF"> rptr;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> free</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">void*</span><span style="color:#E06C75;font-style:italic"> ptr</span><span style="color:#ABB2BF"> )</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">   if</span><span style="color:#ABB2BF"> (ptr </span><span style="color:#C678DD">==</span><span style="color:#D19A66"> NULL</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">	 return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#C678DD">   long</span><span style="color:#C678DD"> *</span><span style="color:#ABB2BF">plen </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">long*</span><span style="color:#ABB2BF">)ptr;</span></span>
<span class="line"><span style="color:#ABB2BF">   plen</span><span style="color:#C678DD">--</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                          // Reach top of memory</span></span>
<span class="line"><span style="color:#C678DD">   long</span><span style="color:#ABB2BF"> len </span><span style="color:#C678DD">=</span><span style="color:#C678DD"> *</span><span style="color:#ABB2BF">plen;</span><span style="color:#7F848E;font-style:italic">               // Read length</span></span>
<span class="line"><span style="color:#61AFEF">   munmap</span><span style="color:#ABB2BF">((</span><span style="color:#C678DD">void*</span><span style="color:#ABB2BF">)plen, len </span><span style="color:#C678DD">+</span><span style="color:#C678DD"> sizeof</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在自定义分配器当中埋点可以发现其实程序启动之后应用实际申请的堆外内存始终在700M-800M之间，gperftools监控显示内存使用量也是在700M-800M左右。但是从操作系统角度来看进程占用的内存差别很大（这里只是监控堆外内存）。</p>
<p>笔者做了一下测试，使用不同分配器进行不同程度的扫包，占用的内存如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-13.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><strong>为什么自定义的malloc申请800M，最终占用的物理内存在1.7G呢</strong>？</p>
<p>因为自定义内存分配器采用的是mmap分配内存，mmap分配内存按需向上取整到整数个页，所以存在着巨大的空间浪费。通过监控发现最终申请的页面数目在536k个左右，那实际上向系统申请的内存等于512k * 4k（pagesize） = 2G。</p>
<p><strong>为什么这个数据大于1.7G呢</strong>？</p>
<p>因为操作系统采取的是延迟分配的方式，通过mmap向系统申请内存的时候，系统仅仅返回内存地址并没有分配真实的物理内存。只有在真正使用的时候，系统产生一个缺页中断，然后再分配实际的物理Page。</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-14.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>整个内存分配的流程如上图所示。MCC扫包的默认配置是扫描所有的JAR包。在扫描包的时候，Spring Boot不会主动去释放堆外内存，导致在扫描阶段，堆外内存占用量一直持续飙升。当发生GC的时候，Spring Boot依赖于finalize机制去释放了堆外内存；但是glibc为了性能考虑，并没有真正把内存归返到操作系统，而是留下来放入内存池了，导致应用层以为发生了“内存泄漏”。所以修改MCC的配置路径为特定的JAR包，问题解决。笔者在发表这篇文章时，发现<strong>Spring Boot的最新版本（2.0.5.RELEASE）已经做了修改，在ZipInflaterInputStream主动释放了堆外内存不再依赖GC</strong>；所以Spring Boot升级到最新版本，这个问题也可以得到解决。</p>
<h2><a class="header-anchor" href="#参考资料"><span></span></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a> 参考资料</h2>
<ul>
<li>GNU C Library (glibc)</li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr007.html" target="_blank" rel="noopener noreferrer">Native Memory Tracking在新窗口打开</a></li>
<li><a href="https://github.com/gperftools/gperftools" target="_blank" rel="noopener noreferrer">gperftools在新窗口打开</a></li>
<li><a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener noreferrer">Btrace</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-gc-offheap-1.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错 Java 线程分析之线程Dump分析</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%90%E4%B9%8B%E7%BA%BF%E7%A8%8BDump%E5%88%86%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E7%BA%BF%E7%A8%8B%E5%88%86%E6%9E%90%E4%B9%8B%E7%BA%BF%E7%A8%8BDump%E5%88%86%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 线程分析之线程Dump分析</source>
      <description>Thread Dump是非常有用的诊断Java应用问题的工具。 调试排错 Java 线程分析之线程Dump分析 Thread Dump介绍 什么是Thread Dump Thread Dump特点 Thread Dump抓取 Thread Dump分析 Thread Dump信息 Thread状态分析 关键状态分析 关键状态示例 案例分析 问题场景 死...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Thread Dump是非常有用的诊断Java应用问题的工具。</p>
</blockquote>
<ul>
<li>调试排错 Java 线程分析之线程Dump分析
<ul>
<li>Thread Dump介绍
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFthread-dump">什么是Thread Dump</a></li>
<li><a href="#thread-dump%E7%89%B9%E7%82%B9">Thread Dump特点</a></li>
<li><a href="#thread-dump%E6%8A%93%E5%8F%96">Thread Dump抓取</a></li>
</ul>
</li>
<li>Thread Dump分析
<ul>
<li><a href="#thread-dump%E4%BF%A1%E6%81%AF">Thread Dump信息</a></li>
<li><a href="#thread%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90">Thread状态分析</a></li>
<li><a href="#%E5%85%B3%E9%94%AE%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90">关键状态分析</a></li>
<li><a href="#%E5%85%B3%E9%94%AE%E7%8A%B6%E6%80%81%E7%A4%BA%E4%BE%8B">关键状态示例</a></li>
</ul>
</li>
<li>案例分析
<ul>
<li><a href="#%E9%97%AE%E9%A2%98%E5%9C%BA%E6%99%AF">问题场景</a></li>
<li><a href="#%E6%AD%BB%E9%94%81">死锁</a></li>
<li><a href="#%E7%83%AD%E9%94%81">热锁</a></li>
</ul>
</li>
<li><a href="#jvm%E9%87%8D%E8%A6%81%E7%BA%BF%E7%A8%8B">JVM重要线程</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#thread-dump介绍"><span></span></a><a href="#thread-dump%E4%BB%8B%E7%BB%8D">#</a> Thread Dump介绍</h2>
<h3><a class="header-anchor" href="#什么是thread-dump"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AFthread-dump">#</a> 什么是Thread Dump</h3>
<p>Thread Dump是非常有用的诊断Java应用问题的工具。每一个Java虚拟机都有及时生成所有线程在某一点状态的thread-dump的能力，虽然各个 Java虚拟机打印的thread dump略有不同，但是 大多都提供了当前活动线程的快照，及JVM中所有Java线程的堆栈跟踪信息，堆栈信息一般包含完整的类名及所执行的方法，如果可能的话还有源代码的行数。</p>
<h3><a class="header-anchor" href="#thread-dump特点"><span></span></a><a href="#thread-dump%E7%89%B9%E7%82%B9">#</a> Thread Dump特点</h3>
<ul>
<li>能在各种操作系统下使用；</li>
<li>能在各种Java应用服务器下使用；</li>
<li>能在生产环境下使用而不影响系统的性能；</li>
<li>能将问题直接定位到应用程序的代码行上；</li>
</ul>
<h3><a class="header-anchor" href="#thread-dump抓取"><span></span></a><a href="#thread-dump%E6%8A%93%E5%8F%96">#</a> Thread Dump抓取</h3>
<p>一般当服务器挂起，崩溃或者性能低下时，就需要抓取服务器的线程堆栈（Thread Dump）用于后续的分析。在实际运行中，往往一次 dump的信息，还不足以确认问题。为了反映线程状态的动态变化，需要接连多次做thread dump，每次间隔10-20s，建议至少产生三次 dump信息，如果每次 dump都指向同一个问题，我们才确定问题的典型性。</p>
<ul>
<li>操作系统命令获取ThreadDump</li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">ps</span><span style="color:#98C379"> –ef</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">grep</span><span style="color:#98C379"> java</span></span>
<span class="line"><span style="color:#56B6C2">kill</span><span style="color:#D19A66"> -3</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pi</span><span style="color:#ABB2BF">d&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p>
<blockquote>
<p>一定要谨慎, 一步不慎就可能让服务器进程被杀死。kill -9 命令会杀死进程。</p>
</blockquote>
<ul>
<li>JVM 自带的工具获取线程堆栈</li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">jps</span><span style="color:#98C379"> 或</span><span style="color:#98C379"> ps</span><span style="color:#98C379"> –ef</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">grep</span><span style="color:#98C379"> java</span><span style="color:#98C379"> （获取PID）</span></span>
<span class="line"><span style="color:#61AFEF">jstack</span><span style="color:#ABB2BF"> [-l </span><span style="color:#98C379">]</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pi</span><span style="color:#ABB2BF">d&gt; | </span><span style="color:#61AFEF">tee</span><span style="color:#D19A66"> -a</span><span style="color:#98C379"> jstack.log（获取ThreadDump）</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#thread-dump分析"><span></span></a><a href="#thread-dump%E5%88%86%E6%9E%90">#</a> Thread Dump分析</h2>
<h3><a class="header-anchor" href="#thread-dump信息"><span></span></a><a href="#thread-dump%E4%BF%A1%E6%81%AF">#</a> Thread Dump信息</h3>
<ul>
<li>头部信息：时间，JVM信息</li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">2011-11-02</span><span style="color:#98C379"> 19:05:06</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#61AFEF">Full</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> dump</span><span style="color:#98C379"> Java</span><span style="color:#98C379"> HotSpot</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">TM</span><span style="color:#ABB2BF">) </span><span style="color:#98C379">Server</span><span style="color:#98C379"> VM</span><span style="color:#ABB2BF"> (16.3-b01 </span><span style="color:#98C379">mixed</span><span style="color:#98C379"> mode</span><span style="color:#ABB2BF">):</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>线程INFO信息块：</li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">1.</span><span style="color:#98C379"> "Timer-0"</span><span style="color:#98C379"> daemon</span><span style="color:#98C379"> prio=</span><span style="color:#D19A66">10</span><span style="color:#98C379"> tid=</span><span style="color:#D19A66">0xac190c00</span><span style="color:#98C379"> nid=</span><span style="color:#D19A66">0xaef</span><span style="color:#98C379"> in</span><span style="color:#98C379"> Object.wait</span><span style="color:#ABB2BF">() [0xae77d000] </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 线程名称：Timer-0；线程类型：daemon；优先级: 10，默认是5；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># JVM线程id：tid=0xac190c00，JVM内部线程的唯一标识（通过java.lang.Thread.getId()获取，通常用自增方式实现）。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 对应系统线程id（NativeThread ID）：nid=0xaef，和top命令查看的线程pid对应，不过一个是10进制，一个是16进制。（通过命令：top -H -p pid，可以查看该进程的所有线程信息）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 线程状态：in Object.wait()；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 起始栈地址：[0xae77d000]，对象的内存地址，通过JVM内存查看工具，能够看出线程是在哪儿个对象上等待；</span></span>
<span class="line"><span style="color:#61AFEF">2.</span><span style="color:#98C379">  java.lang.Thread.State:</span><span style="color:#98C379"> TIMED_WAITING</span><span style="color:#ABB2BF"> (on </span><span style="color:#98C379">object</span><span style="color:#98C379"> monitor</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">3.</span><span style="color:#98C379">  at</span><span style="color:#98C379"> java.lang.Object.wait</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Native</span><span style="color:#98C379"> Method</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">4.</span><span style="color:#D19A66">  -waiting</span><span style="color:#98C379"> on</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xb3885f6</span><span style="color:#ABB2BF">0&gt; (a </span><span style="color:#98C379">java.util.TaskQueue</span><span style="color:#ABB2BF">)     </span><span style="color:#7F848E;font-style:italic"># 继续wait </span></span>
<span class="line"><span style="color:#61AFEF">5.</span><span style="color:#98C379">  at</span><span style="color:#98C379"> java.util.TimerThread.mainLoop</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Timer.java:509</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">6.</span><span style="color:#D19A66">  -locked</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xb3885f6</span><span style="color:#ABB2BF">0&gt; (a </span><span style="color:#98C379">java.util.TaskQueue</span><span style="color:#ABB2BF">)         </span><span style="color:#7F848E;font-style:italic"># 已经locked</span></span>
<span class="line"><span style="color:#61AFEF">7.</span><span style="color:#98C379">  at</span><span style="color:#98C379"> java.util.TimerThread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Timer.java:462</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">Java</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> statck</span><span style="color:#98C379"> trace：是上面2-7行的信息。到目前为止这是最重要的数据，Java</span><span style="color:#98C379"> stack</span><span style="color:#98C379"> trace提供了大部分信息来精确定位问题根源。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Java thread statck trace详解：</li>
</ul>
<p><strong>堆栈信息应该逆向解读</strong>：程序先执行的是第7行，然后是第6行，依次类推。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-</span><span style="color:#98C379"> locked</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xb3885f6</span><span style="color:#ABB2BF">0&gt; (a </span><span style="color:#98C379">java.util.ArrayList</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">-</span><span style="color:#98C379"> waiting</span><span style="color:#98C379"> on</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xb3885f6</span><span style="color:#ABB2BF">0&gt; (a </span><span style="color:#98C379">java.util.ArrayList</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>也就是说对象先上锁，锁住对象0xb3885f60，然后释放该对象锁，进入waiting状态</strong>。为啥会出现这样的情况呢？看看下面的java代码示例，就会明白：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">synchronized</span><span style="color:#E06C75">(obj) {  </span></span>
<span class="line"><span style="color:#ABB2BF">   .........</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">   obj</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">   .........</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，线程的执行过程，先用 <code>synchronized</code> 获得了这个对象的 Monitor（对应于 <code>locked &lt;0xb3885f60&gt;</code> ）。当执行到 <code>obj.wait()</code>，线程即放弃了 Monitor的所有权，进入 “wait set”队列（对应于 <code>waiting on &lt;0xb3885f60&gt;</code> ）。</p>
<p><strong>在堆栈的第一行信息中，进一步标明了线程在代码级的状态</strong>，例如：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">java.lang.Thread.State:</span><span style="color:#98C379"> TIMED_WAITING</span><span style="color:#ABB2BF"> (parking)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>解释如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">|</span><span style="color:#61AFEF">blocked</span><span style="color:#ABB2BF">|</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#61AFEF">This</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> tried</span><span style="color:#98C379"> to</span><span style="color:#98C379"> enter</span><span style="color:#98C379"> asynchronized</span><span style="color:#98C379"> block,</span><span style="color:#98C379"> but</span><span style="color:#98C379"> the</span><span style="color:#98C379"> lock</span><span style="color:#98C379"> was</span><span style="color:#98C379"> taken</span><span style="color:#98C379"> by</span><span style="color:#98C379"> another</span><span style="color:#98C379"> thread.</span><span style="color:#98C379"> This</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> isblocked</span><span style="color:#98C379"> until</span><span style="color:#98C379"> the</span><span style="color:#98C379"> lock</span><span style="color:#98C379"> gets</span><span style="color:#98C379"> released.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">|</span><span style="color:#61AFEF">blocked</span><span style="color:#ABB2BF"> (on </span><span style="color:#98C379">thin</span><span style="color:#98C379"> lock</span><span style="color:#ABB2BF">)|</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#61AFEF">This</span><span style="color:#98C379"> is</span><span style="color:#98C379"> the</span><span style="color:#98C379"> same</span><span style="color:#98C379"> state</span><span style="color:#98C379"> asblocked,</span><span style="color:#98C379"> but</span><span style="color:#98C379"> the</span><span style="color:#98C379"> lock</span><span style="color:#98C379"> in</span><span style="color:#98C379"> question</span><span style="color:#98C379"> is</span><span style="color:#98C379"> a</span><span style="color:#98C379"> thin</span><span style="color:#98C379"> lock.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">|</span><span style="color:#61AFEF">waiting</span><span style="color:#ABB2BF">|</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#61AFEF">This</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> calledObject.wait</span><span style="color:#ABB2BF">() </span><span style="color:#98C379">on</span><span style="color:#98C379"> an</span><span style="color:#98C379"> object.</span><span style="color:#98C379"> The</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> will</span><span style="color:#98C379"> remain</span><span style="color:#98C379"> there</span><span style="color:#98C379"> until</span><span style="color:#98C379"> some</span><span style="color:#98C379"> otherthread</span><span style="color:#98C379"> sends</span><span style="color:#98C379"> a</span><span style="color:#98C379"> notification</span><span style="color:#98C379"> to</span><span style="color:#98C379"> that</span><span style="color:#98C379"> object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">|</span><span style="color:#61AFEF">sleeping</span><span style="color:#ABB2BF">|</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#61AFEF">This</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> calledjava.lang.Thread.sleep</span><span style="color:#ABB2BF">()</span><span style="color:#98C379">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">|</span><span style="color:#61AFEF">parked</span><span style="color:#ABB2BF">|</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#61AFEF">This</span><span style="color:#98C379"> thread</span><span style="color:#98C379"> calledjava.util.concurrent.locks.LockSupport.park</span><span style="color:#ABB2BF">()</span><span style="color:#98C379">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">|</span><span style="color:#61AFEF">suspended</span><span style="color:#ABB2BF">|</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">&gt; </span><span style="color:#61AFEF">The</span><span style="color:#98C379"> thread's execution wassuspended by java.lang.Thread.suspend() or a JVMTI agent call.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#thread状态分析"><span></span></a><a href="#thread%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90">#</a> Thread状态分析</h3>
<p>线程的状态是一个很重要的东西，因此thread dump中会显示这些状态，通过对这些状态的分析，能够得出线程的运行状况，进而发现可能存在的问题。<strong>线程的状态在Thread.State这个枚举类型中定义</strong>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> enum</span><span style="color:#E5C07B"> State</span><span style="color:#E06C75">   </span></span>
<span class="line"><span style="color:#E06C75">{  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       /** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Thread state for a thread which has not yet started. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       NEW</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">         </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       /** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Thread state for a runnable thread.  A thread in the runnable </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * state is executing in the Java virtual machine but it may </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * be waiting for other resources from the operating system </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * such as processor. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       RUNNABLE</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">         </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       /** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Thread state for a thread blocked waiting for a monitor lock. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * A thread in the blocked state is waiting for a monitor lock </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * to enter a synchronized block/method or  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * reenter a synchronized block/method after calling </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * {</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#E5C07B;font-style:italic"> Object</span><span style="color:#7F848E;font-style:italic">#</span><span style="color:#E06C75;font-style:italic">wait()</span><span style="color:#7F848E;font-style:italic"> Object.wait}. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       BLOCKED</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       /** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Thread state for a waiting thread. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * A thread is in the waiting state due to calling one of the  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * following methods: </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * &lt;ul&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#E5C07B;font-style:italic"> Object</span><span style="color:#7F848E;font-style:italic">#</span><span style="color:#E06C75;font-style:italic">wait()</span><span style="color:#7F848E;font-style:italic"> Object.wait} with no timeout&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#7F848E;font-style:italic"> #</span><span style="color:#E06C75;font-style:italic">join()</span><span style="color:#7F848E;font-style:italic"> Thread.join} with no timeout&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#E5C07B;font-style:italic"> LockSupport</span><span style="color:#7F848E;font-style:italic">#</span><span style="color:#E06C75;font-style:italic">park()</span><span style="color:#7F848E;font-style:italic"> LockSupport.park}&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * &lt;/ul&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * &lt;p&gt;A thread in the waiting state is waiting for another thread to </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * perform a particular action.   </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * on an object is waiting for another thread to call  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * is waiting for a specified thread to terminate. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       WAITING</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">         </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       /** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Thread state for a waiting thread with a specified waiting time. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * A thread is in the timed waiting state due to calling one of  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * the following methods with a specified positive waiting time: </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * &lt;ul&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{@link #sleep Thread.sleep}&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#E5C07B;font-style:italic"> Object</span><span style="color:#7F848E;font-style:italic">#</span><span style="color:#E06C75;font-style:italic">wait(long)</span><span style="color:#7F848E;font-style:italic"> Object.wait} with timeout&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#7F848E;font-style:italic"> #</span><span style="color:#E06C75;font-style:italic">join(long)</span><span style="color:#7F848E;font-style:italic"> Thread.join} with timeout&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        *   &lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * &lt;/ul&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       TIMED_WAITING</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       /** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * Thread state for a terminated thread. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        * The thread has completed execution. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        */</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#D19A66">       TERMINATED</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>NEW：</li>
</ul>
<p>每一个线程，在堆内存中都有一个对应的Thread对象。Thread t = new Thread();当刚刚在堆内存中创建Thread对象，还没有调用t.start()方法之前，线程就处在NEW状态。在这个状态上，线程与普通的java对象没有什么区别，就仅仅是一个堆内存中的对象。</p>
<ul>
<li>RUNNABLE：</li>
</ul>
<p>该状态表示线程具备所有运行条件，在运行队列中准备操作系统的调度，或者正在运行。 这个状态的线程比较正常，但如果线程长时间停留在在这个状态就不正常了，这说明线程运行的时间很长（存在性能问题），或者是线程一直得不得执行的机会（存在线程饥饿的问题）。</p>
<ul>
<li>BLOCKED：</li>
</ul>
<p>线程正在等待获取java对象的监视器(也叫内置锁)，即线程正在等待进入由synchronized保护的方法或者代码块。synchronized用来保证原子性，任意时刻最多只能由一个线程进入该临界区域，其他线程只能排队等待。</p>
<ul>
<li>WAITING：</li>
</ul>
<p>处在该线程的状态，正在等待某个事件的发生，只有特定的条件满足，才能获得执行机会。而产生这个特定的事件，通常都是另一个线程。也就是说，如果不发生特定的事件，那么处在该状态的线程一直等待，不能获取执行的机会。比如：</p>
<p>A线程调用了obj对象的obj.wait()方法，如果没有线程调用obj.notify或obj.notifyAll，那么A线程就没有办法恢复运行； 如果A线程调用了LockSupport.park()，没有别的线程调用LockSupport.unpark(A)，那么A没有办法恢复运行。 TIMED_WAITING：</p>
<p>J.U.C中很多与线程相关类，都提供了限时版本和不限时版本的API。TIMED_WAITING意味着线程调用了限时版本的API，正在等待时间流逝。当等待时间过去后，线程一样可以恢复运行。如果线程进入了WAITING状态，一定要特定的事件发生才能恢复运行；而处在TIMED_WAITING的线程，如果特定的事件发生或者是时间流逝完毕，都会恢复运行。</p>
<ul>
<li>TERMINATED：</li>
</ul>
<p>线程执行完毕，执行完run方法正常返回，或者抛出了运行时异常而结束，线程都会停留在这个状态。这个时候线程只剩下Thread对象了，没有什么用了。</p>
<h3><a class="header-anchor" href="#关键状态分析"><span></span></a><a href="#%E5%85%B3%E9%94%AE%E7%8A%B6%E6%80%81%E5%88%86%E6%9E%90">#</a> 关键状态分析</h3>
<ul>
<li><strong>Wait on condition</strong>：The thread is either sleeping or waiting to be notified by another thread.</li>
</ul>
<p>该状态说明它在等待另一个条件的发生，来把自己唤醒，或者干脆它是调用了 sleep(n)。</p>
<p>此时线程状态大致为以下几种：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">java.lang.Thread.State:</span><span style="color:#98C379"> WAITING</span><span style="color:#ABB2BF"> (parking)：一直等那个条件发生；</span></span>
<span class="line"><span style="color:#61AFEF">java.lang.Thread.State:</span><span style="color:#98C379"> TIMED_WAITING</span><span style="color:#ABB2BF"> (parking或sleeping)：定时的，那个条件不到来，也将定时唤醒自己。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>Waiting for Monitor Entry 和 in Object.wait()</strong>：The thread is waiting to get the lock for an object (some other thread may be holding the lock). This happens if two or more threads try to execute synchronized code. Note that the lock is always for an object and not for individual methods.</li>
</ul>
<p>在多线程的JAVA程序中，实现线程之间的同步，就要说说 Monitor。<strong>Monitor是Java中用以实现线程之间的互斥与协作的主要手段，它可以看成是对象或者Class的锁。每一个对象都有，也仅有一个 Monitor</strong> 。下面这个图，描述了线程和 Monitor之间关系，以及线程的状态转换图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-debug-1.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>如上图，每个Monitor在某个时刻，只能被一个线程拥有，<strong>该线程就是 “ActiveThread”，而其它线程都是 “Waiting Thread”，分别在两个队列“Entry Set”和“Wait Set”里等候</strong>。在“Entry Set”中等待的线程状态是“Waiting for monitor entry”，而在“Wait Set”中等待的线程状态是“in Object.wait()”。</p>
<p>先看“Entry Set”里面的线程。我们称被 synchronized保护起来的代码段为临界区。<strong>当一个线程申请进入临界区时，它就进入了“Entry Set”队列</strong>。对应的 code就像：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">synchronized</span><span style="color:#E06C75">(obj) {</span></span>
<span class="line"><span style="color:#ABB2BF">   .........</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时有两种可能性：</p>
<ul>
<li>该 monitor不被其它线程拥有， Entry Set里面也没有其它等待线程。本线程即成为相应类或者对象的 Monitor的 Owner，执行临界区的代码。</li>
<li>该 monitor被其它线程拥有，本线程在 Entry Set队列中等待。</li>
</ul>
<p>在第一种情况下，线程将处于 “Runnable”的状态，而第二种情况下，线程 DUMP会显示处于 “waiting for monitor entry”。如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">"Thread-0"</span><span style="color:#98C379"> prio=</span><span style="color:#D19A66">10</span><span style="color:#98C379"> tid=</span><span style="color:#D19A66">0x08222eb0</span><span style="color:#98C379"> nid=</span><span style="color:#D19A66">0x9</span><span style="color:#98C379"> waiting</span><span style="color:#98C379"> for</span><span style="color:#98C379"> monitor</span><span style="color:#98C379"> entry</span><span style="color:#ABB2BF"> [0xf927b000..0xf927bdb8] </span></span>
<span class="line"><span style="color:#61AFEF">at</span><span style="color:#98C379"> testthread.WaitThread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">WaitThread.java:39</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF">-</span><span style="color:#98C379"> waiting</span><span style="color:#98C379"> to</span><span style="color:#98C379"> lock</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xef63bf0</span><span style="color:#ABB2BF">8&gt; (a </span><span style="color:#98C379">java.lang.Object</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF">-</span><span style="color:#98C379"> locked</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xef63beb</span><span style="color:#ABB2BF">8&gt; (a </span><span style="color:#98C379">java.util.ArrayList</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF">at</span><span style="color:#98C379"> java.lang.Thread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Thread.java:595</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>临界区的设置，是为了保证其内部的代码执行的原子性和完整性</strong>。但是因为临界区在任何时间只允许线程串行通过，这和我们多线程的程序的初衷是相反的。<strong>如果在多线程的程序中，大量使用 synchronized，或者不适当的使用了它，会造成大量线程在临界区的入口等待，造成系统的性能大幅下降</strong>。如果在线程 DUMP中发现了这个情况，应该审查源码，改进程序。</p>
<p>再看“Wait Set”里面的线程。<strong>当线程获得了 Monitor，进入了临界区之后，如果发现线程继续运行的条件没有满足，它则调用对象（一般就是被 synchronized 的对象）的 wait() 方法，放弃 Monitor，进入 “Wait Set”队列。只有当别的线程在该对象上调用了 notify() 或者 notifyAll()，“Wait Set”队列中线程才得到机会去竞争</strong>，但是只有一个线程获得对象的Monitor，恢复到运行态。在 “Wait Set”中的线程， DUMP中表现为： in Object.wait()。如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">"Thread-1"</span><span style="color:#98C379"> prio=</span><span style="color:#D19A66">10</span><span style="color:#98C379"> tid=</span><span style="color:#D19A66">0x08223250</span><span style="color:#98C379"> nid=</span><span style="color:#D19A66">0xa</span><span style="color:#98C379"> in</span><span style="color:#98C379"> Object.wait</span><span style="color:#ABB2BF">() [0xef47a000..0xef47aa38] </span></span>
<span class="line"><span style="color:#61AFEF"> at</span><span style="color:#98C379"> java.lang.Object.wait</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Native</span><span style="color:#98C379"> Method</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF"> -</span><span style="color:#98C379"> waiting</span><span style="color:#98C379"> on</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xef63beb</span><span style="color:#ABB2BF">8&gt; (a </span><span style="color:#98C379">java.util.ArrayList</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF"> at</span><span style="color:#98C379"> java.lang.Object.wait</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Object.java:474</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF"> at</span><span style="color:#98C379"> testthread.MyWaitThread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">MyWaitThread.java:40</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF"> -</span><span style="color:#98C379"> locked</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">0xef63beb</span><span style="color:#ABB2BF">8&gt; (a </span><span style="color:#98C379">java.util.ArrayList</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF"> at</span><span style="color:#98C379"> java.lang.Thread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Thread.java:595</span><span style="color:#ABB2BF">) </span></span>
<span class="line"><span style="color:#61AFEF">综上，一般CPU很忙时，则关注runnable的线程，CPU很闲时，则关注waiting</span><span style="color:#98C379"> for</span><span style="color:#98C379"> monitor</span><span style="color:#98C379"> entry的线程。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>JDK 5.0 的 Lock</strong></li>
</ul>
<p>上面提到如果 synchronized和 monitor机制运用不当，可能会造成多线程程序的性能问题。在 JDK 5.0中，引入了 Lock机制，从而使开发者能更灵活的开发高性能的并发多线程程序，可以替代以往 JDK中的 synchronized和 Monitor的 机制。但是，<strong>要注意的是，因为 Lock类只是一个普通类，JVM无从得知 Lock对象的占用情况，所以在线程 DUMP中，也不会包含关于 Lock的信息</strong>， 关于死锁等问题，就不如用 synchronized的编程方式容易识别。</p>
<h3><a class="header-anchor" href="#关键状态示例"><span></span></a><a href="#%E5%85%B3%E9%94%AE%E7%8A%B6%E6%80%81%E7%A4%BA%E4%BE%8B">#</a> 关键状态示例</h3>
<ul>
<li><strong>显示BLOCKED状态</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> jstack</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BlockedState</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> object </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#61AFEF">  </span></span>
<span class="line"><span style="color:#ABB2BF">    {  </span></span>
<span class="line"><span style="color:#E5C07B">        Runnable</span><span style="color:#E06C75"> task</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#ABB2BF">() {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#61AFEF">  </span></span>
<span class="line"><span style="color:#ABB2BF">            {  </span></span>
<span class="line"><span style="color:#C678DD">                synchronized</span><span style="color:#ABB2BF"> (object)  </span></span>
<span class="line"><span style="color:#ABB2BF">                {  </span></span>
<span class="line"><span style="color:#C678DD">                    long</span><span style="color:#E06C75"> begin</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">                    long</span><span style="color:#E06C75"> end</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 让线程运行5分钟,会一直持有object的监视器  </span></span>
<span class="line"><span style="color:#C678DD">                    while</span><span style="color:#ABB2BF"> ((end </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> begin) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 5</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 60</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1000</span><span style="color:#ABB2BF">)  </span></span>
<span class="line"><span style="color:#ABB2BF">                    {  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#ABB2BF">                    }  </span></span>
<span class="line"><span style="color:#ABB2BF">                }  </span></span>
<span class="line"><span style="color:#ABB2BF">            }  </span></span>
<span class="line"><span style="color:#ABB2BF">        };  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(task, </span><span style="color:#98C379">"t1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(task, </span><span style="color:#98C379">"t2"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先获取object的线程会执行5分钟，<strong>这5分钟内会一直持有object的监视器，另一个线程无法执行处在BLOCKED状态</strong>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Full</span><span style="color:#E06C75"> thread dump </span><span style="color:#E5C07B">Java</span><span style="color:#61AFEF"> HotSpot</span><span style="color:#E06C75">(TM) </span><span style="color:#E5C07B">Server</span><span style="color:#61AFEF"> VM</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">20.12</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b01 mixed mode)</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#98C379">"DestroyJavaVM"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x00856c00</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x1314</span><span style="color:#E06C75"> waiting on condition [</span><span style="color:#D19A66">0x00000000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> RUNNABLE</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"t2"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x27d7a800</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x1350</span><span style="color:#E06C75"> waiting </span><span style="color:#C678DD">for</span><span style="color:#E06C75"> monitor entry [</span><span style="color:#D19A66">0x2833f000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#61AFEF"> BLOCKED</span><span style="color:#E06C75"> (on object monitor)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">jstack</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BlockedState$1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">BlockedState</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">17</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> waiting to lock </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x1cfcdc00</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">662</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"t1"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x27d79400</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x1338</span><span style="color:#E06C75"> runnable [</span><span style="color:#D19A66">0x282ef000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> RUNNABLE</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">jstack</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BlockedState$1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">BlockedState</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">22</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> locked </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x1cfcdc00</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">662</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过thread dump可以看到：<strong>t2线程确实处在BLOCKED (on object monitor)。waiting for monitor entry 等待进入synchronized保护的区域</strong>。</p>
<ul>
<li><strong>显示WAITING状态</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> jstack</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> WaitingState</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> object </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#61AFEF">  </span></span>
<span class="line"><span style="color:#ABB2BF">    {  </span></span>
<span class="line"><span style="color:#E5C07B">        Runnable</span><span style="color:#E06C75"> task</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#ABB2BF">() {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#61AFEF">  </span></span>
<span class="line"><span style="color:#ABB2BF">            {  </span></span>
<span class="line"><span style="color:#C678DD">                synchronized</span><span style="color:#ABB2BF"> (object)  </span></span>
<span class="line"><span style="color:#ABB2BF">                {  </span></span>
<span class="line"><span style="color:#C678DD">                    long</span><span style="color:#E06C75"> begin</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#C678DD">                    long</span><span style="color:#E06C75"> end</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 让线程运行5分钟,会一直持有object的监视器  </span></span>
<span class="line"><span style="color:#C678DD">                    while</span><span style="color:#ABB2BF"> ((end </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> begin) </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 5</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 60</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1000</span><span style="color:#ABB2BF">)  </span></span>
<span class="line"><span style="color:#ABB2BF">                    {  </span></span>
<span class="line"><span style="color:#C678DD">                        try</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#ABB2BF">                        {  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                            // 进入等待的同时,会进入释放监视器  </span></span>
<span class="line"><span style="color:#E5C07B">                            object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">                        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)  </span></span>
<span class="line"><span style="color:#ABB2BF">                        {  </span></span>
<span class="line"><span style="color:#E5C07B">                            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">                        }  </span></span>
<span class="line"><span style="color:#ABB2BF">                    }  </span></span>
<span class="line"><span style="color:#ABB2BF">                }  </span></span>
<span class="line"><span style="color:#ABB2BF">            }  </span></span>
<span class="line"><span style="color:#ABB2BF">        };  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(task, </span><span style="color:#98C379">"t1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(task, </span><span style="color:#98C379">"t2"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E5C07B">Full</span><span style="color:#E06C75"> thread dump </span><span style="color:#E5C07B">Java</span><span style="color:#61AFEF"> HotSpot</span><span style="color:#E06C75">(TM) </span><span style="color:#E5C07B">Server</span><span style="color:#61AFEF"> VM</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">20.12</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b01 mixed mode)</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"DestroyJavaVM"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x00856c00</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x1734</span><span style="color:#E06C75"> waiting on condition [</span><span style="color:#D19A66">0x00000000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> RUNNABLE</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"t2"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x27d7e000</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x17f4</span><span style="color:#E06C75"> in </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75"> [</span><span style="color:#D19A66">0x2833f000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#61AFEF"> WAITING</span><span style="color:#E06C75"> (on object monitor)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Native</span><span style="color:#ABB2BF"> Method)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> waiting on </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x1cfcdc00</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">485</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">jstack</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WaitingState$1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">WaitingState</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">26</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> locked </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x1cfcdc00</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">662</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"t1"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x27d7d400</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x17f0</span><span style="color:#E06C75"> in </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75"> [</span><span style="color:#D19A66">0x282ef000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#61AFEF"> WAITING</span><span style="color:#E06C75"> (on object monitor)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Native</span><span style="color:#ABB2BF"> Method)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> waiting on </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x1cfcdc00</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">485</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">jstack</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WaitingState$1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">WaitingState</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">26</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> locked </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x1cfcdc00</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">662</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现t1和t2都处在WAITING (on object monitor)，进入等待状态的原因是调用了in Object.wait()。通过J.U.C包下的锁和条件队列，也是这个效果，大家可以自己实践下。</p>
<ul>
<li><strong>显示TIMED_WAITING状态</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> jstack</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.TimeUnit</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.Condition</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.Lock</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.locks.ReentrantLock</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TimedWaitingState</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">{</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // java的显示锁,类似java对象内置的监视器  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Lock</span><span style="color:#E06C75"> lock </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ReentrantLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 锁关联的条件队列(类似于object.wait)  </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Condition</span><span style="color:#E06C75"> condition </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCondition</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#61AFEF">  </span></span>
<span class="line"><span style="color:#ABB2BF">    {  </span></span>
<span class="line"><span style="color:#E5C07B">        Runnable</span><span style="color:#E06C75"> task</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Runnable</span><span style="color:#ABB2BF">() {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#61AFEF">  </span></span>
<span class="line"><span style="color:#ABB2BF">            {  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 加锁,进入临界区  </span></span>
<span class="line"><span style="color:#E5C07B">                lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#ABB2BF">                {  </span></span>
<span class="line"><span style="color:#E5C07B">                    condition</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">await</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">TimeUnit</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MINUTES</span><span style="color:#ABB2BF">);  </span></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)  </span></span>
<span class="line"><span style="color:#ABB2BF">                {  </span></span>
<span class="line"><span style="color:#E5C07B">                    e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">                }  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 解锁,退出临界区  </span></span>
<span class="line"><span style="color:#E5C07B">                lock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">            }  </span></span>
<span class="line"><span style="color:#ABB2BF">        };  </span></span>
<span class="line"><span style="color:#ABB2BF">  </span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(task, </span><span style="color:#98C379">"t1"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(task, </span><span style="color:#98C379">"t2"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#ABB2BF">}</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Full</span><span style="color:#E06C75"> thread dump </span><span style="color:#E5C07B">Java</span><span style="color:#61AFEF"> HotSpot</span><span style="color:#E06C75">(TM) </span><span style="color:#E5C07B">Server</span><span style="color:#61AFEF"> VM</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">20.12</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b01 mixed mode)</span><span style="color:#C678DD">:</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"DestroyJavaVM"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x00856c00</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x169c</span><span style="color:#E06C75"> waiting on condition [</span><span style="color:#D19A66">0x00000000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> RUNNABLE</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"t2"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x27d7d800</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0xc30</span><span style="color:#E06C75"> waiting on condition [</span><span style="color:#D19A66">0x2833f000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#61AFEF"> TIMED_WAITING</span><span style="color:#E06C75"> (parking)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Native</span><span style="color:#ABB2BF"> Method)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> parking to wait </span><span style="color:#C678DD">for</span><span style="color:#56B6C2">  &lt;</span><span style="color:#D19A66">0x1cfce5b8</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">locks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AbstractQueuedSynchronizer$ConditionObject</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">locks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parkNanos</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">196</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">locks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AbstractQueuedSynchronizer$ConditionObject</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">await</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AbstractQueuedSynchronizer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">2116</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">jstack</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TimedWaitingState$1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TimedWaitingState</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">28</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">662</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"t1"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x280d0c00</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x16e0</span><span style="color:#E06C75"> waiting on condition [</span><span style="color:#D19A66">0x282ef000</span><span style="color:#E06C75">]  </span></span>
<span class="line"><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">State</span><span style="color:#C678DD">:</span><span style="color:#61AFEF"> TIMED_WAITING</span><span style="color:#E06C75"> (parking)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">park</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Native</span><span style="color:#ABB2BF"> Method)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#56B6C2">     -</span><span style="color:#E06C75"> parking to wait </span><span style="color:#C678DD">for</span><span style="color:#56B6C2">  &lt;</span><span style="color:#D19A66">0x1cfce5b8</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">locks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AbstractQueuedSynchronizer$ConditionObject</span><span style="color:#E06C75">)  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">locks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parkNanos</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">LockSupport</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">196</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">locks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AbstractQueuedSynchronizer$ConditionObject</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">await</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AbstractQueuedSynchronizer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">2116</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">jstack</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TimedWaitingState$1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TimedWaitingState</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">28</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">  </span></span>
<span class="line"><span style="color:#E06C75">     at </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Thread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">662</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到t1和t2线程都处在java.lang.Thread.State: TIMED_WAITING (parking)，这个parking代表是调用的JUC下的工具类，而不是java默认的监视器。</p>
<h2><a class="header-anchor" href="#案例分析"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">#</a> 案例分析</h2>
<h3><a class="header-anchor" href="#问题场景"><span></span></a><a href="#%E9%97%AE%E9%A2%98%E5%9C%BA%E6%99%AF">#</a> 问题场景</h3>
<ul>
<li><strong>CPU飙高，load高，响应很慢</strong>
<ol>
<li>一个请求过程中多次dump；</li>
<li>对比多次dump文件的runnable线程，如果执行的方法有比较大变化，说明比较正常。如果在执行同一个方法，就有一些问题了；</li>
</ol>
</li>
<li><strong>查找占用CPU最多的线程</strong>
<ol>
<li>使用命令：top -H -p pid（pid为被测系统的进程号），找到导致CPU高的线程ID，对应thread dump信息中线程的nid，只不过一个是十进制，一个是十六进制；</li>
<li>在thread dump中，根据top命令查找的线程id，查找对应的线程堆栈信息；</li>
</ol>
</li>
<li><strong>CPU使用率不高但是响应很慢</strong></li>
</ul>
<p>进行dump，查看是否有很多thread struck在了i/o、数据库等地方，定位瓶颈原因；</p>
<ul>
<li><strong>请求无法响应</strong></li>
</ul>
<p>多次dump，对比是否所有的runnable线程都一直在执行相同的方法，如果是的，恭喜你，锁住了！</p>
<h3><a class="header-anchor" href="#死锁"><span></span></a><a href="#%E6%AD%BB%E9%94%81">#</a> 死锁</h3>
<p>死锁经常表现为程序的停顿，或者不再响应用户的请求。从操作系统上观察，对应进程的CPU占用率为零，很快会从top或prstat的输出中消失。</p>
<p>比如在下面这个示例中，是个较为典型的死锁情况：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379">"Thread-1"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x00acc490</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0xe50</span><span style="color:#E06C75"> waiting </span><span style="color:#C678DD">for</span><span style="color:#E06C75"> monitor entry [</span><span style="color:#D19A66">0x02d3f000</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#ABB2BF">..</span><span style="color:#FFFFFF">0x02d3fd68</span><span style="color:#E06C75">] </span></span>
<span class="line"><span style="color:#E06C75">at </span><span style="color:#E5C07B">deadlockthreads</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TestThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TestThread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">31</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75"> waiting to lock </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x22c19f18</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">) </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75"> locked </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x22c19f20</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"Thread-0"</span><span style="color:#E06C75"> prio</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#E06C75"> tid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0x00accdb0</span><span style="color:#E06C75"> nid</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0xdec</span><span style="color:#E06C75"> waiting </span><span style="color:#C678DD">for</span><span style="color:#E06C75"> monitor entry [</span><span style="color:#D19A66">0x02cff000</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#ABB2BF">..</span><span style="color:#FFFFFF">0x02cff9e8</span><span style="color:#E06C75">] </span></span>
<span class="line"><span style="color:#E06C75">at </span><span style="color:#E5C07B">deadlockthreads</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TestThread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">run</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">TestThread</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">java</span><span style="color:#C678DD">:</span><span style="color:#D19A66">31</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75"> waiting to lock </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x22c19f20</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">) </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75"> locked </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0x22c19f18</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JAVA 5中加强了对死锁的检测。<strong>线程 Dump中可以直接报告出 Java级别的死锁</strong>，如下所示：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Found</span><span style="color:#E06C75"> one Java</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">level deadlock</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">=============================</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#98C379">"Thread-1"</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">waiting to lock monitor </span><span style="color:#D19A66">0x0003f334</span><span style="color:#E06C75"> (object </span><span style="color:#D19A66">0x22c19f18</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">which is held by </span><span style="color:#98C379">"Thread-0"</span><span style="color:#E06C75"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379">"Thread-0"</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">waiting to lock monitor </span><span style="color:#D19A66">0x0003f314</span><span style="color:#E06C75"> (object </span><span style="color:#D19A66">0x22c19f20</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> a </span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">which is held by </span><span style="color:#98C379">"Thread-1"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#热锁"><span></span></a><a href="#%E7%83%AD%E9%94%81">#</a> 热锁</h3>
<p>热锁，也往往是导致系统性能瓶颈的主要因素。其表现特征为：<strong>由于多个线程对临界区，或者锁的竞争</strong>，可能出现：</p>
<ul>
<li><strong>频繁的线程的上下文切换</strong>：从操作系统对线程的调度来看，当线程在等待资源而阻塞的时候，操作系统会将之切换出来，放到等待的队列，当线程获得资源之后，调度算法会将这个线程切换进去，放到执行队列中。</li>
<li><strong>大量的系统调用</strong>：因为线程的上下文切换，以及热锁的竞争，或者临界区的频繁的进出，都可能导致大量的系统调用。</li>
<li><strong>大部分CPU开销用在“系统态”</strong>：线程上下文切换，和系统调用，都会导致 CPU在 “系统态 ”运行，换而言之，虽然系统很忙碌，但是CPU用在 “用户态 ”的比例较小，应用程序得不到充分的 CPU资源。</li>
<li><strong>随着CPU数目的增多，系统的性能反而下降</strong>。因为CPU数目多，同时运行的线程就越多，可能就会造成更频繁的线程上下文切换和系统态的CPU开销，从而导致更糟糕的性能。</li>
</ul>
<p>上面的描述，都是一个 scalability（可扩展性）很差的系统的表现。从整体的性能指标看，由于线程热锁的存在，程序的响应时间会变长，吞吐量会降低。</p>
<p><strong>那么，怎么去了解 “热锁 ”出现在什么地方呢</strong>？</p>
<p>一个重要的方法是 结合操作系统的各种工具观察系统资源使用状况，以及收集Java线程的DUMP信息，看线程都阻塞在什么方法上，了解原因，才能找到对应的解决方法。</p>
<h2><a class="header-anchor" href="#jvm重要线程"><span></span></a><a href="#jvm%E9%87%8D%E8%A6%81%E7%BA%BF%E7%A8%8B">#</a> JVM重要线程</h2>
<p>JVM运行过程中产生的一些比较重要的线程罗列如下：</p>
<p>| 线程名称                        | 解释说明                                                     |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-debug-1.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错 Java 问题排查之JVM可视化工具</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BJVM%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BJVM%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之JVM可视化工具</source>
      <description>本文主要梳理常见的JVM可视化的分析工具，主要包括JConsole, Visual VM, Vusial GC, JProfile 和 MAT等。@pdai 调试排错 Java 问题排查之JVM可视化工具 JConsole Visual VM Visual GC JProfile 核心组件 运行测试 Eclipse Memory Analyzer (M...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要梳理常见的JVM可视化的分析工具，主要包括JConsole, Visual VM, Vusial GC, JProfile 和 MAT等。@pdai</p>
</blockquote>
<ul>
<li>调试排错 Java 问题排查之JVM可视化工具
<ul>
<li><a href="#jconsole">JConsole</a></li>
<li><a href="#visual-vm">Visual VM</a></li>
<li><a href="#visual-gc">Visual GC</a></li>
<li>JProfile
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6">核心组件</a></li>
<li><a href="#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">运行测试</a></li>
</ul>
</li>
<li><a href="#eclipse-memory-analyzer-mat">Eclipse Memory Analyzer (MAT)</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#jconsole"><span></span></a><a href="#jconsole">#</a> JConsole</h2>
<blockquote>
<p>Jconsole （Java Monitoring and Management Console），JDK自带的基于JMX的可视化监视、管理工具。 官方文档可以参考<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/management/jconsole.html" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a></p>
</blockquote>
<ul>
<li><strong>找到jconsole工具</strong></li>
</ul>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">pdai@MacBook-Pro</span><span style="color:#98C379"> bin</span><span style="color:#98C379"> %</span><span style="color:#98C379"> ls</span></span>
<span class="line"><span style="color:#61AFEF">jaotc</span><span style="color:#98C379">		jcmd</span><span style="color:#98C379">		jinfo</span><span style="color:#98C379">		jshell</span><span style="color:#98C379">		rmid</span></span>
<span class="line"><span style="color:#61AFEF">jar</span><span style="color:#98C379">		jconsole</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">这里</span><span style="color:#ABB2BF">)	</span><span style="color:#98C379">jjs</span><span style="color:#98C379">		jstack</span><span style="color:#98C379">		rmiregistry</span></span>
<span class="line"><span style="color:#61AFEF">jarsigner</span><span style="color:#98C379">	jdb</span><span style="color:#98C379">		jlink</span><span style="color:#98C379">		jstat</span><span style="color:#98C379">		serialver</span></span>
<span class="line"><span style="color:#61AFEF">java</span><span style="color:#98C379">		jdeprscan</span><span style="color:#98C379">	jmap</span><span style="color:#98C379">		jstatd</span><span style="color:#98C379">		unpack200</span></span>
<span class="line"><span style="color:#61AFEF">javac</span><span style="color:#98C379">		jdeps</span><span style="color:#98C379">		jmod</span><span style="color:#98C379">		keytool</span></span>
<span class="line"><span style="color:#61AFEF">javadoc</span><span style="color:#98C379">		jhsdb</span><span style="color:#98C379">		jps</span><span style="color:#98C379">		pack200</span></span>
<span class="line"><span style="color:#61AFEF">javap</span><span style="color:#98C379">		jimage</span><span style="color:#98C379">		jrunscript</span><span style="color:#98C379">	rmic</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>打开jconsole</strong></li>
</ul>
<p>选择</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-0.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>查看概述、内存、线程、类、VM概要、MBean</strong></li>
</ul>
<p>概述</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>内存</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>线程</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>类</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>VM概要</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>MBean</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#visual-vm"><span></span></a><a href="#visual-vm">#</a> Visual VM</h2>
<blockquote>
<p>VisualVM 是一款免费的，集成了多个 JDK 命令行工具的可视化工具，它能为您提供强大的分析能力，对 Java 应用程序做性能分析和调优。这些功能包括生成和分析海量数据、跟踪内存泄漏、监控垃圾回收器、执行内存和 CPU 分析，同时它还支持在 MBeans 上进行浏览和操作。</p>
</blockquote>
<p>Overview</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-visualvm-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>Monitor</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-visualvm-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>线程</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-visualvm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>Sampler</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-visualvm-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#visual-gc"><span></span></a><a href="#visual-gc">#</a> Visual GC</h2>
<blockquote>
<p>visual gc 是 visualvm 中的图形化查看 gc 状况的插件。官方文档可以参考<a href="https://www.oracle.com/java/technologies/visual-garbage-collection-monitoring-tool.html" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a></p>
</blockquote>
<p>比如我在IDEA中使用visual GC 插件来看GC状况。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#jprofile"><span></span></a><a href="#jprofile">#</a> JProfile</h2>
<blockquote>
<p>Profiler 是一个商业的主要用于检查和跟踪系统（限于Java开发的）的性能的工具。JProfiler可以通过时时的监控系统的内存使用情况，随时监视垃圾回收，线程运行状况等手段，从而很好的监视JVM运行情况及其性能。</p>
</blockquote>
<p>JProfiler 是一个全功能的Java剖析工具（profiler），专用于分析J2SE和J2EE应用程序。它把CPU、执行绪和内存的剖析组合在一个强大的应用中。 JProfiler可提供许多IDE整合和应用服务器整合用途。JProfiler直觉式的GUI让你可以找到效能瓶颈、抓出内存漏失(memory leaks)、并解决执行绪的问题。它让你得以对heap walker作资源回收器的root analysis，可以轻易找出内存漏失；heap快照（snapshot）模式让未被参照（reference）的对象、稍微被参照的对象、或在终结（finalization）队列的对象都会被移除；整合精灵以便剖析浏览器的Java外挂功能。</p>
<h3><a class="header-anchor" href="#核心组件"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6">#</a> 核心组件</h3>
<p>JProfiler 包含用于采集目标 JVM 分析数据的 JProfiler agent、用于可视化分析数据的 JProfiler UI、提供各种功能的命令行工具，它们之间的关系如下图所示。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-18.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>JProfiler agent</strong></li>
</ul>
<p>JProfiler agent 是一个本地库，它可以在 JVM 启动时通过参数<code>-agentpath:&lt;path to native library&gt;</code>进行加载或者在程序运行时通过<a href="http://lovestblog.cn/blog/2014/06/18/jvm-attach/" target="_blank" rel="noopener noreferrer">JVM Attach 机制在新窗口打开</a>进行加载。Agent 被成功加载后，会设置 JVMTI 环境，监听虚拟机产生的事件，如类加载、线程创建等。例如，当它监听到类加载事件后，会给这些类注入用于执行度量操作的字节码。</p>
<ul>
<li><strong>JProfiler UI</strong></li>
</ul>
<p>JProfiler UI 是一个可独立部署的组件，它通过 socket 和 agent 建立连接。这意味着不论目标 JVM 运行在本地还是远端，JProfiler UI 和 agent 间的通信机制都是一样的。</p>
<p>JProfiler UI 的主要功能是展示通过 agent 采集上来的分析数据，此外还可以通过它控制 agent 的采集行为，将快照保存至磁盘，展示保存的快照。</p>
<ul>
<li><strong>命令行工具</strong></li>
</ul>
<p>JProfiler 提供了一系列命令行工具以实现不同的功能。</p>
<ol>
<li>jpcontroller - 用于控制 agent 的采集行为。它通过 agent 注册的 JProfiler MBean 向 agent 传递命令。</li>
<li>jpenable - 用于将 agent 加载到一个正在运行的 JVM 上。</li>
<li>jpdump - 用于获取正在运行的 JVM 的堆快照。</li>
<li>jpexport &amp; jpcompare - 用于从保存的快照中提取数据并创建 HTML 报告。</li>
</ol>
<h3><a class="header-anchor" href="#运行测试"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">#</a> 运行测试</h3>
<p><strong>我们运行一个SpringBoot测试工程，选择attach到JVM</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>选择指定的进程</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><strong>设置数据采集模式</strong></p>
<p>JProfier 提供两种数据采集模式 Sampling 和 Instrumentation。</p>
<ul>
<li>Sampling - 适合于不要求数据完全精确的场景。优点是对系统性能的影响较小，缺点是某些特性不支持（如方法级别的统计信息）。</li>
<li>Instrumentation - 完整功能模式，统计信息也是精确的。缺点是如果需要分析的类比较多，对应用性能影响较大。为了降低影响，往往需要和 Filter 一起使用。</li>
</ul>
<p>由于我们需要获取方法级别的统计信息，这里选择了 Instrumentation 模式。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>概览</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>内存</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>实时内存分布（类对象）</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>dump 堆内存</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>dump完会直接打开显示</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>线程存储</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>导出HTML报告</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>CPU 调用树</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-14.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>线程历史</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-15.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>JEE &amp; 探针</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-16.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>MBeans</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-jprofile-17.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#eclipse-memory-analyzer-mat"><span></span></a><a href="#eclipse-memory-analyzer-mat">#</a> Eclipse Memory Analyzer (MAT)</h2>
<blockquote>
<p>MAT 是一种快速且功能丰富的 Java 堆分析器，可帮助你发现内存泄漏并减少内存消耗。 MAT在的堆内存分析问题使用极为广泛，需要重点掌握。</p>
</blockquote>
<p>可以在<a href="https://www.eclipse.org/mat/" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a>下载， 官方文档可以看<a href="http://help.eclipse.org/latest/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a></p>
<ul>
<li><strong>Overview</strong></li>
</ul>
<p>包含内存分布，以及潜在的问题推测</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-mat-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>Histogram</strong></li>
</ul>
<p>可以列出内存中的对象，对象的个数以及大小。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-mat-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>具体需要重点理解如下两个概念，可参考<a href="http://help.eclipse.org/latest/index.jsp?topic=/org.eclipse.mat.ui.help/welcome.html" target="_blank" rel="noopener noreferrer">官网文档在新窗口打开</a>的解释</p>
<ol>
<li>Shallow Heap ：一个对象内存的消耗大小，不包含对其他对象的引用</li>
<li>Retained Heap ：是shallow Heap的总和，也就是该对象被GC之后所能回收到内存的总和</li>
</ol>
<ul>
<li><strong>Dominator Tree</strong></li>
</ul>
<p>可以列出那个线程，以及线程下面的那些对象占用的空间。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-mat-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>Top consumers</strong></li>
</ul>
<p>通过图形列出最大的object。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-mat-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>Leak Suspects</strong></li>
</ul>
<p>自动分析潜在可能的泄漏。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-mat-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-tool-0.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错 Java 问题排查之Linux命令</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BLinux%E5%91%BD%E4%BB%A4.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8BLinux%E5%91%BD%E4%BB%A4.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之Linux命令</source>
      <description>Java 在线问题排查主要分两篇：本文是第一篇，通过linux常用命令排查。 调试排错 Java 问题排查之Linux命令 文本操作 文本查找 - grep 文本分析 - awk 文本处理 - sed 文件操作 文件监听 - tail 文件查找 - find pgm 查看网络和进程 查看所有网络接口的属性 查看防火墙设置 查看路由表 netstat 查...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java 在线问题排查主要分两篇：本文是第一篇，通过linux常用命令排查。</p>
</blockquote>
<ul>
<li>调试排错 Java 问题排查之Linux命令
<ul>
<li>文本操作
<ul>
<li>[文本查找 - grep](#文本查找</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>调试排错 Java 问题排查之使用IDEA本地调试和远程调试</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E4%BD%BF%E7%94%A8IDEA%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E4%BD%BF%E7%94%A8IDEA%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之使用IDEA本地调试和远程调试</source>
      <description>Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化；并且在实际的排错过程中，还会用到Remote Debug。IDEA 相比 Eclipse/STS效率更高，本文主要介绍基于IDEA的Debug和Remote Debug的技巧。 调试排错 Java 问题排查之使用ID...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化；并且在实际的排错过程中，还会用到Remote Debug。IDEA 相比 Eclipse/STS效率更高，本文主要介绍基于IDEA的Debug和Remote Debug的技巧。</p>
</blockquote>
<ul>
<li>调试排错 Java 问题排查之使用IDEA本地调试和远程调试
<ul>
<li><a href="#debug%E5%BC%80%E7%AF%87">Debug开篇</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E5%BF%AB%E6%8D%B7%E9%94%AE">基本用法&amp;快捷键</a></li>
<li><a href="#%E5%8F%98%E9%87%8F%E6%9F%A5%E7%9C%8B">变量查看</a></li>
<li><a href="#%E8%AE%A1%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F">计算表达式</a></li>
<li><a href="#%E6%99%BA%E8%83%BD%E6%AD%A5%E5%85%A5">智能步入</a></li>
<li><a href="#%E6%96%AD%E7%82%B9%E6%9D%A1%E4%BB%B6%E8%AE%BE%E7%BD%AE">断点条件设置</a></li>
<li><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95">多线程调试</a></li>
<li><a href="#%E5%9B%9E%E9%80%80%E6%96%AD%E7%82%B9">回退断点</a></li>
<li><a href="#%E4%B8%AD%E6%96%ADdebug">中断Debug</a></li>
<li>远程调试(Remote Debug)
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E7%89%B9%E5%AE%9Ajvm%E5%8F%82%E6%95%B0%E8%BF%90%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81">使用特定JVM参数运行服务端代码</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8debug%E7%AB%AF%E5%8F%A3">本地连接远程服务器debug端口</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E6%96%AD%E7%82%B9%E5%BC%80%E5%A7%8B%E8%B0%83%E8%AF%95">设置断点，开始调试</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#debug开篇"><span></span></a><a href="#debug%E5%BC%80%E7%AF%87">#</a> Debug开篇</h2>
<blockquote>
<p>首先看下IDEA中Debug模式下的界面。</p>
</blockquote>
<p>如下是在IDEA中启动Debug模式，进入断点后的界面，我这里是Windows，可能和Mac的图标等会有些不一样。就简单说下图中标注的8个地方：</p>
<ul>
<li>① 以Debug模式启动服务，左边的一个按钮则是以Run模式启动。在开发中，我一般会直接启动Debug模式，方便随时调试代码。</li>
<li>② 断点：在左边行号栏单击左键，或者快捷键Ctrl+F8 打上/取消断点，断点行的颜色可自己去设置。</li>
<li>③ Debug窗口：访问请求到达第一个断点后，会自动激活Debug窗口。如果没有自动激活，可以去设置里设置，如图1.2。</li>
<li>④ 调试按钮：一共有8个按钮，调试的主要功能就对应着这几个按钮，鼠标悬停在按钮上可以查看对应的快捷键。在菜单栏Run里可以找到同样的对应的功能，如图1.4。</li>
<li>⑤ 服务按钮：可以在这里关闭/启动服务，设置断点等。</li>
<li>⑥ 方法调用栈：这里显示了该线程调试所经过的所有方法，勾选右上角的[Show All Frames]按钮，就不会显示其它类库的方法了，否则这里会有一大堆的方法。</li>
<li>⑦ Variables：在变量区可以查看当前断点之前的当前方法内的变量。</li>
<li>⑧ Watches：查看变量，可以将Variables区中的变量拖到Watches中查看</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>在设置里勾选Show debug window on breakpoint，则请求进入到断点后自动激活Debug窗口</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如果你的IDEA底部没有显示工具栏或状态栏，可以在View里打开，显示出工具栏会方便我们使用。可以自己去尝试下这四个选项。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>在菜单栏Run里有调试对应的功能，同时可以查看对应的快捷键。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#基本用法-快捷键"><span></span></a><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-%E5%BF%AB%E6%8D%B7%E9%94%AE">#</a> 基本用法&amp;快捷键</h2>
<p>Debug调试的功能主要对应着图一中4和5两组按钮：</p>
<ul>
<li><strong>首先说第一组按钮，共8个按钮</strong>，从左到右依次如下：</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><code>Show Execution Point</code> (Alt + F10)：如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行。</li>
<li><code>Step Over</code> (F8)：步过，一行一行地往下走，如果这一行上有方法不会进入方法。</li>
<li><code>Step Into</code> (F7)：步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法，如第25行的put方法。</li>
<li><code>Force Step Into</code> (Alt + Shift + F7)：强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</li>
<li><code>Step Out</code> (Shift + F8)：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</li>
<li><code>Drop Frame</code> (默认无)：回退断点，后面章节详细说明。</li>
<li><code>Run to Cursor</code> (Alt + F9)：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</li>
<li><code>Evaluate Expression</code> (Alt + F8)：计算表达式，后面章节详细说明。</li>
<li><strong>第二组按钮，共7个按钮</strong>，从上到下依次如下：</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><code>Rerun 'xxxx'</code>：重新运行程序，会关闭服务后重新启动程序。</li>
<li><code>Update 'tech' application</code> (Ctrl + F5)：更新程序，一般在你的代码有改动后可执行这个功能。而这个功能对应的操作则是在服务配置里，如图2.3。</li>
<li><code>Resume Program</code> (F9)：恢复程序，比如，你在第20行和25行有两个断点，当前运行至第20行，按F9，则运行到下一个断点(即第25行)，再按F9，则运行完整个流程，因为后面已经没有断点了。</li>
<li><code>Pause Program</code>：暂停程序，启用Debug。目前没发现具体用法。</li>
<li><code>Stop 'xxx'</code> (Ctrl + F2)：连续按两下，关闭程序。有时候你会发现关闭服务再启动时，报端口被占用，这是因为没完全关闭服务的原因，你就需要查杀所有JVM进程了。</li>
<li><code>View Breakpoints</code> (Ctrl + Shift + F8)：查看所有断点，后面章节会涉及到。</li>
<li><code>Mute Breakpoints</code>：哑的断点，选择这个后，所有断点变为灰色，断点失效，按F9则可以直接运行完程序。再次点击，断点变为红色，有效。如果只想使某一个断点失效，可以在断点上右键取消Enabled，则该行断点失效。</li>
<li><strong>更新程序</strong></li>
</ul>
<p><code>On 'Update' actions</code>，执行更新操作时所做的事情，一般选择<code>'Update classes and resources'</code>，即更新类和资源文件。</p>
<p>一般配合热部署插件会更好用，如JRebel，这样就不用每次更改代码后还要去重新启动服务。如何激活JRebel，在最后章节附上。</p>
<p>下面的<code>On frame deactivation</code>，在IDEA窗口失去焦点时触发，即一般你从idea切换到浏览器的时候，idea会自动帮你做的事情，一般可以设置Do nothing，频繁切换会比较消耗资源的。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#变量查看"><span></span></a><a href="#%E5%8F%98%E9%87%8F%E6%9F%A5%E7%9C%8B">#</a> 变量查看</h2>
<blockquote>
<p>在Debug过程中，跟踪查看变量的变化是非常必要的，这里就简单说下IDEA中可以查看变量的几个地方，相信大部分人都了解。</p>
</blockquote>
<ul>
<li>如下，在IDEA中，参数所在行后面会显示当前变量的值。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>光标悬停到参数上，显示当前变量信息。点击打开详情如下图。我一般会使用这种方式，快捷方便。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>在Variables里查看，这里显示当前方法里的所有变量。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-12.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>在Watches里，点击New Watch，输入需要查看的变量。或者可以从Variables里拖到Watche里查看。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-13.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如果你发现你没有Watches，可能在下图所在的地方。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-14.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-15.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#计算表达式"><span></span></a><a href="#%E8%AE%A1%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a> 计算表达式</h2>
<blockquote>
<p>在前面提到的计算表达式如下图的按钮，Evaluate Expression (Alt + F8) 。可以使用这个操作在调试过程中计算某个表达式的值，而不用再去打印信息。</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-16.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>按Alt + F8或按钮，或者，你可以选中某个表达式再Alt + F8，弹出计算表达式的窗口，如下，回车或点击Evaluate计算表达式的值。</li>
</ul>
<p>这个表达式不仅可以是一般变量或参数，也可以是方法，当你的一行代码中调用了几个方法时，就可以通过这种方式查看查看某个方法的返回值。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-17.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>设置变量，在计算表达式的框里，可以改变变量的值，这样有时候就能很方便我们去调试各种值的情况了不是。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-18.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#智能步入"><span></span></a><a href="#%E6%99%BA%E8%83%BD%E6%AD%A5%E5%85%A5">#</a> 智能步入</h2>
<blockquote>
<p>想想，一行代码里有好几个方法，怎么只选择某一个方法进入。之前提到过使用Step Into (Alt + F7) 或者 Force Step Into (Alt + Shift + F7)进入到方法内部，但这两个操作会根据方法调用顺序依次进入，这比较麻烦。</p>
</blockquote>
<p>那么智能步入就很方便了，智能步入，这个功能在Run里可以看到，Smart Step Into (Shift + F7)，如下图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-19.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>按Shift + F7，会自动定位到当前断点行，并列出需要进入的方法，如图5.2，点击方法进入方法内部。</p>
<p>如果只有一个方法，则直接进入，类似Force Step Into。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-20.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#断点条件设置"><span></span></a><a href="#%E6%96%AD%E7%82%B9%E6%9D%A1%E4%BB%B6%E8%AE%BE%E7%BD%AE">#</a> 断点条件设置</h2>
<blockquote>
<p>通过设置断点条件，在满足条件时，才停在断点处，否则直接运行。</p>
</blockquote>
<p>通常，当我们在遍历一个比较大的集合或数组时，在循环内设置了一个断点，难道我们要一个一个去看变量的值？那肯定很累，说不定你还错过这个值得重新来一次。</p>
<ul>
<li>在断点上右键直接<strong>设置当前断点的条件</strong>，如下图设置exist为true时断点才生效。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-21.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>
<p>点击View Breakpoints (Ctrl + Shift + F8)，查看所有断点</p>
<p>。</p>
<ul>
<li>Java Line Breakpoints 显示了所有的断点，在右边勾选Condition，设置断点的条件。</li>
<li>勾选Log message to console，则会将当前断点行输出到控制台，如图6.3</li>
<li>勾选Evaluate and log，可以在执行这行代码是计算表达式的值，并将结果输出到控制台。</li>
</ul>
</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-22.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-23.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>
<p>再说说右边的Filters过滤</p>
<p>，这些一般情况下不常用，简单说下意思。</p>
<ul>
<li>Instance filters：实例过滤，输入实例ID(如下图中的实例ID)，但是我这里没有成功，不知道什么原因，知道的朋友留个言。</li>
<li>Class filters：类过滤，根据类名过滤，同样没有成功....</li>
<li>Pass count：用于循环中，如果断点在循环中，可以设置该值，循环多少次后停在断点处，之后的循环都会停在断点处。</li>
</ul>
</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-25.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-26.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>异常断点，通过设置异常断点，在程序中出现需要拦截的异常时，会自动定位到异常行</strong>。</li>
</ul>
<p>如下图，点击+号添加Java Exception Breakpoints，添加异常断点。然后输入需要断点的异常类</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-27.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>之后可以在Java Exception Breakpoints里看到添加的异常断点。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-28.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这里添加了一个NullPointerException异常断点，出现空指针异常后，自动定位在空指针异常行。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-29.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#多线程调试"><span></span></a><a href="#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%B0%83%E8%AF%95">#</a> 多线程调试</h2>
<blockquote>
<p>一般情况下我们调试的时候是在一个线程中的，一步一步往下走。但有时候你会发现在Debug的时候，想发起另外一个请求都无法进行了？</p>
</blockquote>
<p>那是因为IDEA在Debug时默认阻塞级别是ALL，会阻塞其它线程，只有在当前调试线程走完时才会走其它线程。可以在View Breakpoints里选择Thread，如图7.1，然后点击Make Default设置为默认选项。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-30.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>切换线程，在下图中Frames的下拉列表里，可以切换当前的线程，如下我这里有两个Debug的线程，切换另外一个则进入另一个Debug的线程。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-31.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#回退断点"><span></span></a><a href="#%E5%9B%9E%E9%80%80%E6%96%AD%E7%82%B9">#</a> 回退断点</h2>
<blockquote>
<p>在调试的时候，想要重新走一下流程而不用再次发起一个请求？</p>
</blockquote>
<ul>
<li>首先认识下这个<strong>方法调用栈</strong>，如图首先请求进入DemoController的insertDemo方法，然后调用insert方法，其它的invoke我们且先不管，最上面的方法是当前断点所在的方法。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-32.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>断点回退</strong></li>
</ul>
<p>所谓的断点回退，其实就是回退到上一个方法调用的开始处，在IDEA里测试无法一行一行地回退或回到到上一个断点处，而是回到上一个方法。</p>
<p>回退的方式有两种，一种是Drop Frame按钮，按调用的方法逐步回退，包括三方类库的其它方法</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-33.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>取消Show All Frames按钮会显示三方类库的方法</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-34.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>第二种方式，在调用栈方法上选择要回退的方法，右键选择Drop Frame，回退到该方法的上一个方法调用处，此时再按F9(Resume Program)，可以看到程序进入到该方法的断点处了。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-35.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>但有一点需要注意，断点回退只能重新走一下流程，之前的某些参数/数据的状态已经改变了的是无法回退到之前的状态的，如对象、集合、更新了数据库数据等等。</p>
<h2><a class="header-anchor" href="#中断debug"><span></span></a><a href="#%E4%B8%AD%E6%96%ADdebug">#</a> 中断Debug</h2>
<blockquote>
<p>想要在Debug的时候，中断请求，不要再走剩余的流程了？</p>
</blockquote>
<p>有些时候，我们看到传入的参数有误后，不想走后面的流程了，怎么中断这次请求呢(后面的流程要删除数据库数据呢....)，难道要关闭服务重新启动程序？嗯，我以前也是这么干的。</p>
<p>确切的说，我也没发现可以直接中断请求的方式(除了关闭服务)，但可以通过Force Return，即强制返回来避免后续的流程，如图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-36.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>点击Force Return，弹出Return Value的窗口，我这个方法的返回类型为Map，所以，我这里直接返回 results，来强制返回，从而不再进行后续的流程。或者你可以<code>new HashMap&lt;&gt;()</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-37.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#远程调试-remote-debug"><span></span></a><a href="#%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95-remote-debug">#</a> 远程调试(Remote Debug)</h2>
<blockquote>
<p>有时候，本地调试的时候没有问题，打包部署到测试环境的时候却爆出一堆莫名其妙的问题，这时该怎么办呢？</p>
</blockquote>
<h3><a class="header-anchor" href="#使用特定jvm参数运行服务端代码"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E7%89%B9%E5%AE%9Ajvm%E5%8F%82%E6%95%B0%E8%BF%90%E8%A1%8C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A3%E7%A0%81">#</a> 使用特定JVM参数运行服务端代码</h3>
<p>要让远程服务器运行的代码支持远程调试，则启动的时候必须加上特定的JVM参数，这些参数是：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-Xdebug</span><span style="color:#D19A66"> -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=${</span><span style="color:#E06C75">debug_port</span><span style="color:#D19A66">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>其中的<code>${debug_port}</code>是用户自定义的，为debug端口，本例以5555端口为例。</p>
<p>本人在这里踩过一个坑，必须要说一下。在使用公司内部的自动化部署平台NDP进行应用部署时，该平台号称支持远程调试，只需要在某个配置页面配置一下调试端口号（没有填写任何IP相关的信息），并且重新发布一下应用即可。事实上也可以发现，上述JVM参数中唯一可变的就是${debug_port}。但是实际在本地连接时发现却始终连不上5555 的调试端口，仔细排查才发现，下面截取了NDP发布的应用所有JVM参数列表中与远程调试相关的JVM启动参数如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-Xdebug</span><span style="color:#D19A66"> -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=127.0.0.1:5555</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>将address设置为127.0.0.1:5555，表示将调试端口限制为本地访问，远程无法访问，这个应该是NDP平台的一个bug，我们在自己设置JVM的启动参数时也需要格外注意。</p>
<p>如果只是临时调试，在端口号前面不要加上限制访问的IP地址，调试完成之后，将上述JVM参数去除掉之后重新发布下，防范开放远程调试端口可能带来的安全风险。</p>
<h3><a class="header-anchor" href="#本地连接远程服务器debug端口"><span></span></a><a href="#%E6%9C%AC%E5%9C%B0%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8debug%E7%AB%AF%E5%8F%A3">#</a> 本地连接远程服务器debug端口</h3>
<p>打开Intellij IDEA，在顶部靠右的地方选择”Edit Configurations…”，进去之后点击+号，选择”Remote”，按照下图的只是填写红框内的内容，其中Name填写名称，这里为remote webserver，host为远程代码运行的机器的ip/hostname，port为上一步指定的debug_port，本例是5555。然后点击Apply，最后点击OK即可</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-41.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>现在在上一步选择”Edit Configurations…”的下拉框的位置选择上一步创建的remote webserver，然后点击右边的debug按钮(长的像臭虫那个)，看控制台日志，如果出现类似“Connected to the target VM, address: ‘xx.xx.xx.xx:5555’, transport: ‘socket’”的字样，就表示连接成功过了。我这里实际显示的内容如下：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">Connected</span><span style="color:#98C379"> to</span><span style="color:#98C379"> the</span><span style="color:#98C379"> target</span><span style="color:#98C379"> VM,</span><span style="color:#98C379"> address:</span><span style="color:#98C379"> '10.185.0.192:15555',</span><span style="color:#98C379"> transport:</span><span style="color:#98C379"> 'socket'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#设置断点-开始调试"><span></span></a><a href="#%E8%AE%BE%E7%BD%AE%E6%96%AD%E7%82%B9-%E5%BC%80%E5%A7%8B%E8%B0%83%E8%AF%95">#</a> 设置断点，开始调试</h3>
<p>远程debug模式已经开启，现在可以在需要调试的代码中打断点了，比如：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-42.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如图中所示，如果断点内有√，则表示选取的断点正确。</p>
<p>现在在本地发送一个到远程服务器的请求，看本地控制台的bug界面，划到debugger这个标签，可以看到当前远程服务的内部状态（各种变量）已经全部显示出来了，并且在刚才设置了断点的地方，也显示了该行的变量值。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-43.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>备注：需要注意的是，用于远程debug的代码必须与远程部署的代码完全一致，不能发生任何的修改，否则打上的断点将无法命中，切记切记。</p>
</blockquote>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
<ul>
<li>前面9个部分，主要总结自 <a href="https://www.cnblogs.com/diaobiyong/p/10682996.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/diaobiyong/p/10682996.html</a></li>
<li>远程调试，主要整理自 <a href="https://www.jianshu.com/p/302dc10217c0" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/302dc10217c0</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-debug-idea-1.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错 Java 问题排查之工具单</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%B7%A5%E5%85%B7%E5%8D%95.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%B7%A5%E5%85%B7%E5%8D%95.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之工具单</source>
      <description>Java 在线问题排查主要分两篇：本文是第二篇，通过java调试/排查工具进行问题定位。 调试排错 Java 问题排查之工具单 Java 调试入门工具 jps jstack jinfo jmap jstat jdb CHLSDB Java 调试进阶工具 btrace Greys Arthas javOSize JProfiler 其它工具 dmesg ...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java 在线问题排查主要分两篇：本文是第二篇，通过java调试/排查工具进行问题定位。</p>
</blockquote>
<ul>
<li>调试排错 Java 问题排查之工具单
<ul>
<li>Java 调试入门工具
<ul>
<li><a href="#jps">jps</a></li>
<li><a href="#jstack">jstack</a></li>
<li><a href="#jinfo">jinfo</a></li>
<li><a href="#jmap">jmap</a></li>
<li><a href="#jstat">jstat</a></li>
<li><a href="#jdb">jdb</a></li>
<li><a href="#chlsdb">CHLSDB</a></li>
</ul>
</li>
<li>Java 调试进阶工具
<ul>
<li><a href="#btrace">btrace</a></li>
<li><a href="#greys">Greys</a></li>
<li><a href="#arthas">Arthas</a></li>
<li><a href="#javosize">javOSize</a></li>
<li><a href="#jprofiler">JProfiler</a></li>
</ul>
</li>
<li>其它工具
<ul>
<li><a href="#dmesg">dmesg</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-调试入门工具"><span></span></a><a href="#java-%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8%E5%B7%A5%E5%85%B7">#</a> Java 调试入门工具</h2>
<h3><a class="header-anchor" href="#jps"><span></span></a><a href="#jps">#</a> jps</h3>
<blockquote>
<p>jps是jdk提供的一个查看当前java进程的小工具， 可以看做是JavaVirtual Machine Process Status Tool的缩写。</p>
</blockquote>
<p>jps常用命令</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">jps</span><span style="color:#7F848E;font-style:italic"> # 显示进程的ID 和 类的名称</span></span>
<span class="line"><span style="color:#61AFEF">jps</span><span style="color:#98C379"> –l</span><span style="color:#7F848E;font-style:italic"> # 输出输出完全的包名，应用主类名，jar的完全路径名 </span></span>
<span class="line"><span style="color:#61AFEF">jps</span><span style="color:#98C379"> –v</span><span style="color:#7F848E;font-style:italic"> # 输出jvm参数</span></span>
<span class="line"><span style="color:#61AFEF">jps</span><span style="color:#98C379"> –q</span><span style="color:#7F848E;font-style:italic"> # 显示java进程号</span></span>
<span class="line"><span style="color:#61AFEF">jps</span><span style="color:#D19A66"> -m</span><span style="color:#7F848E;font-style:italic"> # main 方法</span></span>
<span class="line"><span style="color:#61AFEF">jps</span><span style="color:#D19A66"> -l</span><span style="color:#98C379"> xxx.xxx.xx.xx</span><span style="color:#7F848E;font-style:italic"> # 远程查看</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jps参数</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-q：仅输出VM标识符，不包括classname,jar</span><span style="color:#98C379"> name,arguments</span><span style="color:#98C379"> in</span><span style="color:#98C379"> main</span><span style="color:#98C379"> method</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF">-m：输出main</span><span style="color:#98C379"> method的参数</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF">-l：输出完全的包名，应用主类名，jar的完全路径名</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF">-v：输出jvm参数</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF">-V：输出通过flag文件传递到JVM中的参数(.hotspotrc文件或-XX:Flags</span><span style="color:#98C379">=所指定的文件</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#61AFEF">-Joption：传递参数到vm,例如:-J-Xms512m</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jps原理</p>
<blockquote>
<p>java程序在启动以后，会在java.io.tmpdir指定的目录下，就是临时文件夹里，生成一个类似于hsperfdata_User的文件夹，这个文件夹里（在Linux中为/tmp/hsperfdata_{userName}/），有几个文件，名字就是java进程的pid，因此列出当前运行的java进程，只是把这个目录里的文件名列一下而已。 至于系统的参数什么，就可以解析这几个文件获得。</p>
</blockquote>
<p>更多请参考 <a href="https://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jps.html" target="_blank" rel="noopener noreferrer">jps - Java Virtual Machine Process Status Tool在新窗口打开</a></p>
<h3><a class="header-anchor" href="#jstack"><span></span></a><a href="#jstack">#</a> jstack</h3>
<blockquote>
<p>jstack是jdk自带的线程堆栈分析工具，使用该命令可以查看或导出 Java 应用程序中线程堆栈信息。</p>
</blockquote>
<p>jstack常用命令:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 基本</span></span>
<span class="line"><span style="color:#61AFEF">jstack</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># java和native c/c++框架的所有栈信息</span></span>
<span class="line"><span style="color:#61AFEF">jstack</span><span style="color:#D19A66"> -m</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 额外的锁信息列表，查看是否死锁</span></span>
<span class="line"><span style="color:#61AFEF">jstack</span><span style="color:#D19A66"> -l</span><span style="color:#D19A66"> 2815</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jstack参数：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">-l</span><span style="color:#98C379"> 长列表.</span><span style="color:#98C379"> 打印关于锁的附加信息,例如属于java.util.concurrent</span><span style="color:#98C379"> 的</span><span style="color:#98C379"> ownable</span><span style="color:#98C379"> synchronizers列表.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">-F</span><span style="color:#98C379"> 当’jstack</span><span style="color:#ABB2BF"> [-l] pid’没有相应的时候强制打印栈信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">-m</span><span style="color:#98C379"> 打印java和native</span><span style="color:#98C379"> c/c++框架的所有栈信息.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">-h</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">-help</span><span style="color:#98C379"> 打印帮助信息</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多请参考: <a href="https://www.jianshu.com/p/025cb069cb69" target="_blank" rel="noopener noreferrer">jvm 性能调优工具之 jstack在新窗口打开</a></p>
<h3><a class="header-anchor" href="#jinfo"><span></span></a><a href="#jinfo">#</a> jinfo</h3>
<blockquote>
<p>jinfo 是 JDK 自带的命令，可以用来查看正在运行的 java 应用程序的扩展参数，包括Java System属性和JVM命令行参数；也可以动态的修改正在运行的 JVM 一些参数。当系统崩溃时，jinfo可以从core文件里面知道崩溃的Java应用程序的配置信息</p>
</blockquote>
<p>jinfo常用命令:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 输出当前 jvm 进程的全部参数和系统属性</span></span>
<span class="line"><span style="color:#61AFEF">jinfo</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 输出所有的参数</span></span>
<span class="line"><span style="color:#61AFEF">jinfo</span><span style="color:#D19A66"> -flags</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 查看指定的 jvm 参数的值</span></span>
<span class="line"><span style="color:#61AFEF">jinfo</span><span style="color:#D19A66"> -flag</span><span style="color:#98C379"> PrintGC</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 开启/关闭指定的JVM参数</span></span>
<span class="line"><span style="color:#61AFEF">jinfo</span><span style="color:#D19A66"> -flag</span><span style="color:#98C379"> +PrintGC</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 设置flag的参数</span></span>
<span class="line"><span style="color:#61AFEF">jinfo</span><span style="color:#D19A66"> -flag</span><span style="color:#98C379"> name=value</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 输出当前 jvm 进行的全部的系统属性</span></span>
<span class="line"><span style="color:#61AFEF">jinfo</span><span style="color:#D19A66"> -sysprops</span><span style="color:#D19A66"> 2815</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jinfo参数：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">no</span><span style="color:#98C379"> option</span><span style="color:#98C379"> 输出全部的参数和系统属性</span></span>
<span class="line"><span style="color:#61AFEF">-flag</span><span style="color:#98C379"> name</span><span style="color:#98C379"> 输出对应名称的参数</span></span>
<span class="line"><span style="color:#61AFEF">-flag</span><span style="color:#ABB2BF"> [+|</span><span style="color:#61AFEF">-]name</span><span style="color:#98C379"> 开启或者关闭对应名称的参数</span></span>
<span class="line"><span style="color:#61AFEF">-flag</span><span style="color:#98C379"> name=value</span><span style="color:#98C379"> 设定对应名称的参数</span></span>
<span class="line"><span style="color:#61AFEF">-flags</span><span style="color:#98C379"> 输出全部的参数</span></span>
<span class="line"><span style="color:#61AFEF">-sysprops</span><span style="color:#98C379"> 输出系统属性</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多请参考：<a href="https://www.jianshu.com/p/8d8aef212b25" target="_blank" rel="noopener noreferrer">jvm 性能调优工具之 jinfo在新窗口打开</a></p>
<h3><a class="header-anchor" href="#jmap"><span></span></a><a href="#jmap">#</a> jmap</h3>
<blockquote>
<p>命令jmap是一个多功能的命令。它可以生成 java 程序的 dump 文件， 也可以查看堆内对象示例的统计信息、查看 ClassLoader 的信息以及 finalizer 队列。</p>
</blockquote>
<p>两个用途</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic"># 查看堆的情况</span></span>
<span class="line"><span style="color:#61AFEF">jmap</span><span style="color:#D19A66"> -heap</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># dump</span></span>
<span class="line"><span style="color:#61AFEF">jmap</span><span style="color:#D19A66"> -dump:live,format=b,file=/tmp/heap2.bin</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"><span style="color:#61AFEF">jmap</span><span style="color:#D19A66"> -dump:format=b,file=/tmp/heap3.bin</span><span style="color:#D19A66"> 2815</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># 查看堆的占用</span></span>
<span class="line"><span style="color:#61AFEF">jmap</span><span style="color:#D19A66"> -histo</span><span style="color:#D19A66"> 2815</span><span style="color:#ABB2BF"> | </span><span style="color:#61AFEF">head</span><span style="color:#D19A66"> -10</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jmap参数</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">no</span><span style="color:#98C379"> option：</span><span style="color:#98C379"> 查看进程的内存映像信息,类似</span><span style="color:#98C379"> Solaris</span><span style="color:#98C379"> pmap</span><span style="color:#98C379"> 命令。</span></span>
<span class="line"><span style="color:#61AFEF">heap：</span><span style="color:#98C379"> 显示Java堆详细信息</span></span>
<span class="line"><span style="color:#61AFEF">histo[:live]：</span><span style="color:#98C379"> 显示堆中对象的统计信息</span></span>
<span class="line"><span style="color:#61AFEF">clstats：打印类加载器信息</span></span>
<span class="line"><span style="color:#61AFEF">finalizerinfo：</span><span style="color:#98C379"> 显示在F-Queue队列等待Finalizer线程执行finalizer方法的对象</span></span>
<span class="line"><span style="color:#61AFEF">dump:</span><span style="color:#ABB2BF">&lt;dump-options&gt;：生成堆转储快照</span></span>
<span class="line"><span style="color:#61AFEF">F：</span><span style="color:#98C379"> 当-dump没有响应时，使用-dump或者-histo参数.</span><span style="color:#98C379"> 在这个模式下,live子参数无效.</span></span>
<span class="line"><span style="color:#61AFEF">help：打印帮助信息</span></span>
<span class="line"><span style="color:#61AFEF">J</span><span style="color:#ABB2BF">&lt;flag&gt;：指定传递给运行jmap的JVM的参数</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多请参考：<a href="https://www.jianshu.com/p/a4ad53179df3" target="_blank" rel="noopener noreferrer">jvm 性能调优工具之 jmap在新窗口打开</a> 和 <a href="https://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jmap.html" target="_blank" rel="noopener noreferrer">jmap - Memory Map在新窗口打开</a></p>
<h3><a class="header-anchor" href="#jstat"><span></span></a><a href="#jstat">#</a> jstat</h3>
<p>jstat参数众多，但是使用一个就够了</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">jstat</span><span style="color:#D19A66"> -gcutil</span><span style="color:#D19A66"> 2815</span><span style="color:#D19A66"> 1000</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#jdb"><span></span></a><a href="#jdb">#</a> jdb</h3>
<p>jdb可以用来预发debug,假设你预发的java_home是/opt/java/，远程调试端口是8000.那么</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">jdb</span><span style="color:#D19A66"> -attach</span><span style="color:#D19A66"> 8000</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>出现以上代表jdb启动成功。后续可以进行设置断点进行调试。</p>
<p>具体参数可见oracle官方说明<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html" target="_blank" rel="noopener noreferrer">jdb - The Java Debugger在新窗口打开</a></p>
<h3><a class="header-anchor" href="#chlsdb"><span></span></a><a href="#chlsdb">#</a> CHLSDB</h3>
<p>CHLSDB感觉很多情况下可以看到更好玩的东西，不详细叙述了。 查询资料听说jstack和jmap等工具就是基于它的。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">java</span><span style="color:#D19A66"> -classpath</span><span style="color:#98C379"> /opt/taobao/java/lib/sa-jdi.jar</span><span style="color:#98C379"> sun.jvm.hotspot.CLHSDB</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>更详细的可见R大此贴 <a href="http://rednaxelafx.iteye.com/blog/1847971" target="_blank" rel="noopener noreferrer">http://rednaxelafx.iteye.com/blog/1847971</a></p>
<h2><a class="header-anchor" href="#java-调试进阶工具"><span></span></a><a href="#java-%E8%B0%83%E8%AF%95%E8%BF%9B%E9%98%B6%E5%B7%A5%E5%85%B7">#</a> Java 调试进阶工具</h2>
<h3><a class="header-anchor" href="#btrace"><span></span></a><a href="#btrace">#</a> btrace</h3>
<p>首当其冲的要说的是btrace。真是生产环境&amp;预发的排查问题大杀器。 简介什么的就不说了。直接上代码干</p>
<ul>
<li>查看当前谁调用了ArrayList的add方法，同时只打印当前ArrayList的size大于500的线程调用栈</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">OnMethod</span><span style="color:#E06C75">(</span><span style="color:#D19A66">clazz</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "java.util.ArrayList"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> method</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"add"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> location</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">Location</span><span style="color:#E06C75">(</span><span style="color:#D19A66">value</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Kind</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">CALL</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> clazz</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "/./"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> method</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "/./"</span><span style="color:#E06C75">))</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> m</span><span style="color:#E06C75">(</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">ProbeClassName</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> probeClass</span><span style="color:#ABB2BF">,</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">ProbeMethodName</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> probeMethod</span><span style="color:#ABB2BF">,</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">TargetInstance</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> instance</span><span style="color:#ABB2BF">,</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">TargetMethodOrField</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> method) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">getInt</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">field</span><span style="color:#E06C75">(</span><span style="color:#98C379">"java.util.ArrayList"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "size"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> instance) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 479</span><span style="color:#E06C75">){</span></span>
<span class="line"><span style="color:#61AFEF">        println</span><span style="color:#E06C75">(</span><span style="color:#98C379">"check who ArrayList.add method:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> probeClass </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "#"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> probeMethod  </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", method:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> method </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", size:"</span><span style="color:#56B6C2"> +</span><span style="color:#61AFEF"> getInt</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">field</span><span style="color:#E06C75">(</span><span style="color:#98C379">"java.util.ArrayList"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "size"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> instance))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        jstack</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        println</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        println</span><span style="color:#E06C75">(</span><span style="color:#98C379">"==========================="</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        println</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>监控当前服务方法被调用时返回的值以及请求的参数</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">OnMethod</span><span style="color:#E06C75">(</span><span style="color:#D19A66">clazz</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "com.taobao.sellerhome.transfer.biz.impl.C2CApplyerServiceImpl"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> method</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"nav"</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> location</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">Location</span><span style="color:#E06C75">(</span><span style="color:#D19A66">value</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Kind</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RETURN</span><span style="color:#E06C75">))</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mt</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> userId</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> current</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> relation</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> check</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> redirectUrl</span><span style="color:#ABB2BF">,</span><span style="color:#ABB2BF"> @</span><span style="color:#E5C07B">Return</span><span style="color:#E5C07B"> AnyType</span><span style="color:#E06C75"> result) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">    println</span><span style="color:#E06C75">(</span><span style="color:#98C379">"parameter# userId:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> userId </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", current:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> current </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", relation:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> relation </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", check:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> check </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", redirectUrl:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> redirectUrl </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ", result:"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> result)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>btrace 具体可以参考这里：<a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener noreferrer">https://github.com/btraceio/btrace</a></p>
<p>注意:</p>
<ul>
<li>经过观察，1.3.9的release输出不稳定，要多触发几次才能看到正确的结果</li>
<li>正则表达式匹配trace类时范围一定要控制，否则极有可能出现跑满CPU导致应用卡死的情况</li>
<li>由于是字节码注入的原理，想要应用恢复到正常情况，需要重启应用。</li>
</ul>
<h3><a class="header-anchor" href="#greys"><span></span></a><a href="#greys">#</a> Greys</h3>
<p>Greys是@杜琨的大作吧。说几个挺棒的功能(部分功能和btrace重合):</p>
<ul>
<li><code>sc -df xxx</code>: 输出当前类的详情,包括源码位置和classloader结构</li>
<li><code>trace class method</code>: 打印出当前方法调用的耗时情况，细分到每个方法, 对排查方法性能时很有帮助。</li>
</ul>
<h3><a class="header-anchor" href="#arthas"><span></span></a><a href="#arthas">#</a> Arthas</h3>
<blockquote>
<p>Arthas是基于Greys。</p>
</blockquote>
<p>具体请参考：<a href="">调试排错 - Java应用在线调试Arthas</a></p>
<h3><a class="header-anchor" href="#javosize"><span></span></a><a href="#javosize">#</a> javOSize</h3>
<p>就说一个功能:</p>
<ul>
<li><code>classes</code>：通过修改了字节码，改变了类的内容，即时生效。 所以可以做到快速的在某个地方打个日志看看输出，缺点是对代码的侵入性太大。但是如果自己知道自己在干嘛，的确是不错的玩意儿。</li>
</ul>
<p>其他功能Greys和btrace都能很轻易做的到，不说了。</p>
<p>更多请参考：<a href="http://www.javosize.com/" target="_blank" rel="noopener noreferrer">官网在新窗口打开</a></p>
<h3><a class="header-anchor" href="#jprofiler"><span></span></a><a href="#jprofiler">#</a> JProfiler</h3>
<p>之前判断许多问题要通过JProfiler，但是现在Greys和btrace基本都能搞定了。再加上出问题的基本上都是生产环境(网络隔离)，所以基本不怎么使用了，但是还是要标记一下。</p>
<p>更多请参考：<a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="noopener noreferrer">官网在新窗口打开</a></p>
<h2><a class="header-anchor" href="#其它工具"><span></span></a><a href="#%E5%85%B6%E5%AE%83%E5%B7%A5%E5%85%B7">#</a> 其它工具</h2>
<h3><a class="header-anchor" href="#dmesg"><span></span></a><a href="#dmesg">#</a> dmesg</h3>
<p>如果发现自己的java进程悄无声息的消失了，几乎没有留下任何线索，那么dmesg一发，很有可能有你想要的。</p>
<p>sudo dmesg|grep -i kill|less 去找关键字oom_killer。找到的结果类似如下:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">[6710782.021013] java invoked oom-killer: </span><span style="color:#E06C75">gfp_mask</span><span style="color:#56B6C2">=</span><span style="color:#98C379">0xd0,</span><span style="color:#E06C75"> order</span><span style="color:#56B6C2">=</span><span style="color:#98C379">0,</span><span style="color:#E06C75"> oom_adj</span><span style="color:#56B6C2">=</span><span style="color:#98C379">0,</span><span style="color:#E06C75"> oom_scoe_adj</span><span style="color:#56B6C2">=</span><span style="color:#98C379">0</span></span>
<span class="line"><span style="color:#ABB2BF">[6710782.070639] [</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">ffffffff81118898</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">] ? oom_kill_process+0x68/0x140 </span></span>
<span class="line"><span style="color:#ABB2BF">[6710782.257588] Task in /LXC011175068174 killed as a result of limit of /LXC011175068174 </span></span>
<span class="line"><span style="color:#ABB2BF">[6710784.698347] Memory cgroup out of memory: Kill process 215701 (</span><span style="color:#61AFEF">java</span><span style="color:#ABB2BF">) score 854 or sacrifice child </span></span>
<span class="line"><span style="color:#ABB2BF">[6710784.707978] Killed process 215701, UID 679, (</span><span style="color:#61AFEF">java</span><span style="color:#ABB2BF">) total-vm:11017300kB, anon-rss:7152432kB, file-rss:1232kB</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上表明，对应的java进程被系统的OOM Killer给干掉了，得分为854. 解释一下OOM killer（Out-Of-Memory killer），该机制会监控机器的内存资源消耗。当机器内存耗尽前，该机制会扫描所有的进程（按照一定规则计算，内存占用，时间等），挑选出得分最高的进程，然后杀死，从而保护机器。</p>
<p>dmesg日志时间转换公式: log实际时间=格林威治1970-01-01+(当前时间秒数-系统启动至今的秒数+dmesg打印的log时间)秒数：</p>
<p>date -d "1970-01-01 UTC <code>echo "$(date +%s)-$(cat /proc/uptime|cut -f 1 -d' ')+12288812.926194"|bc </code> seconds" 剩下的，就是看看为什么内存这么大，触发了OOM-Killer了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>调试排错 Java 问题排查之应用在线调试Arthas</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%BA%94%E7%94%A8%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95Arthas.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%20%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E4%B9%8B%E5%BA%94%E7%94%A8%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95Arthas.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java 问题排查之应用在线调试Arthas</source>
      <description>本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经几万个点赞了，深受开发者喜爱。 调试排错 Java 问题排查之应用在线调试Arthas Arthas简介 Arthas是什么 Arthas能解决什么问题 Arthas资源推荐 Arthas基于了哪些工具上发展而来 同类工具有哪些 Arthas入门 Arthas 上手前 Arthas 安装 ...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经几万个点赞了，深受开发者喜爱。</p>
</blockquote>
<ul>
<li>调试排错 Java 问题排查之应用在线调试Arthas
<ul>
<li>Arthas简介
<ul>
<li><a href="#arthas%E6%98%AF%E4%BB%80%E4%B9%88">Arthas是什么</a></li>
<li><a href="#arthas%E8%83%BD%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98">Arthas能解决什么问题</a></li>
<li><a href="#arthas%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90">Arthas资源推荐</a></li>
<li><a href="#arthas%E5%9F%BA%E4%BA%8E%E4%BA%86%E5%93%AA%E4%BA%9B%E5%B7%A5%E5%85%B7%E4%B8%8A%E5%8F%91%E5%B1%95%E8%80%8C%E6%9D%A5">Arthas基于了哪些工具上发展而来</a></li>
<li><a href="#%E5%90%8C%E7%B1%BB%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B">同类工具有哪些</a></li>
</ul>
</li>
<li>Arthas入门
<ul>
<li><a href="#arthas-%E4%B8%8A%E6%89%8B%E5%89%8D">Arthas 上手前</a></li>
<li><a href="#arthas-%E5%AE%89%E8%A3%85">Arthas 安装</a></li>
<li>Arthas 官方案例展示
<ul>
<li><a href="#dashboard">Dashboard</a></li>
<li><a href="#thread">Thread</a></li>
<li><a href="#jad">jad</a></li>
<li><a href="#mc">mc</a></li>
<li><a href="#redefine">redefine</a></li>
<li><a href="#sc">sc</a></li>
<li><a href="#stack">stack</a></li>
<li><a href="#trace">Trace</a></li>
<li><a href="#watch">Watch</a></li>
<li><a href="#monitor">Monitor</a></li>
<li><a href="#time-tunneltt">Time Tunnel(tt)</a></li>
<li><a href="#classloader">Classloader</a></li>
<li><a href="#web-console">Web Console</a></li>
</ul>
</li>
<li>Arthas 命令集
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4">基础命令</a></li>
<li><a href="#jvm%E7%9B%B8%E5%85%B3">jvm相关</a></li>
<li><a href="#classclassloader%E7%9B%B8%E5%85%B3">class/classloader相关</a></li>
<li><a href="#monitorwatchtrace%E7%9B%B8%E5%85%B3">monitor/watch/trace相关</a></li>
<li><a href="#options">options</a></li>
<li><a href="#%E7%AE%A1%E9%81%93">管道</a></li>
<li><a href="#%E5%90%8E%E5%8F%B0%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1">后台异步任务</a></li>
<li><a href="#web-console-1">Web Console</a></li>
<li><a href="#%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E5%9B%9E%E6%8A%A5">用户数据回报</a></li>
<li><a href="#%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7">其他特性</a></li>
</ul>
</li>
</ul>
</li>
<li>Arthas场景实战
<ul>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%9C%80%E7%B9%81%E5%BF%99%E7%9A%84%E7%BA%BF%E7%A8%8B%E4%BB%A5%E5%8F%8A%E6%98%AF%E5%90%A6%E6%9C%89%E9%98%BB%E5%A1%9E%E6%83%85%E5%86%B5%E5%8F%91%E7%94%9F">查看最繁忙的线程，以及是否有阻塞情况发生?</a></li>
<li><a href="#%E7%A1%AE%E8%AE%A4%E6%9F%90%E4%B8%AA%E7%B1%BB%E6%98%AF%E5%90%A6%E5%B7%B2%E8%A2%AB%E7%B3%BB%E7%BB%9F%E5%8A%A0%E8%BD%BD">确认某个类是否已被系统加载?</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E4%B8%80%E4%B8%AAclass%E7%B1%BB%E7%9A%84%E6%BA%90%E7%A0%81%E4%BF%A1%E6%81%AF">如何查看一个class类的源码信息?</a></li>
<li><a href="#%E9%87%8D%E8%A6%81%E5%A6%82%E4%BD%95%E8%B7%9F%E8%B8%AA%E6%9F%90%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E5%85%A5%E5%8F%82">重要：如何跟踪某个方法的返回值、入参.... ?</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%9C%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E4%BF%A1%E6%81%AF">如何看方法调用栈的信息?</a></li>
<li><a href="#%E9%87%8D%E8%A6%81%E6%89%BE%E5%88%B0%E6%9C%80%E8%80%97%E6%97%B6%E7%9A%84%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8">重要：找到最耗时的方法调用?</a></li>
<li><a href="#%E9%87%8D%E8%A6%81%E5%A6%82%E4%BD%95%E4%B8%B4%E6%97%B6%E6%9B%B4%E6%94%B9%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C">重要：如何临时更改代码运行?</a></li>
<li><a href="#%E6%88%91%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E6%9F%90%E4%B8%AA%E6%96%B9%E6%B3%95%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98">我如何测试某个方法的性能问题?</a></li>
<li><a href="#%E6%9B%B4%E5%A4%9A">更多</a></li>
</ul>
</li>
<li><a href="#arthas%E6%BA%90%E7%A0%81">Arthas源码</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#arthas简介"><span></span></a><a href="#arthas%E7%AE%80%E4%BB%8B">#</a> Arthas简介</h2>
<blockquote>
<p>在学习Arthas之前，推荐先看上一篇美团技术团队的<a href="">Java 动态调试技术原理及实践</a>，这样你会对它最底层技术有个了解。可以看下文中最后有个对比图：Greys(Arthas也是基于它做的二次开发)和Java-debug-tool。</p>
</blockquote>
<h3><a class="header-anchor" href="#arthas是什么"><span></span></a><a href="#arthas%E6%98%AF%E4%BB%80%E4%B9%88">#</a> Arthas是什么</h3>
<p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>
<h3><a class="header-anchor" href="#arthas能解决什么问题"><span></span></a><a href="#arthas%E8%83%BD%E8%A7%A3%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98">#</a> Arthas能解决什么问题</h3>
<p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p>
<ul>
<li>这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?</li>
<li>我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况?</li>
<li>有什么办法可以监控到JVM的实时运行状态?</li>
</ul>
<p><code>Arthas</code>支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>
<h3><a class="header-anchor" href="#arthas资源推荐"><span></span></a><a href="#arthas%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90">#</a> Arthas资源推荐</h3>
<ul>
<li><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener noreferrer">用户文档在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn" target="_blank" rel="noopener noreferrer">官方在线教程(推荐)在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/quick-start.html" target="_blank" rel="noopener noreferrer">快速入门在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/advanced-use.html" target="_blank" rel="noopener noreferrer">进阶使用在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/commands.html" target="_blank" rel="noopener noreferrer">命令列表在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/web-console.html" target="_blank" rel="noopener noreferrer">WebConsole在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/docker.html" target="_blank" rel="noopener noreferrer">Docker在新窗口打开</a></li>
<li><a href="https://github.com/alibaba/arthas/issues?q=label%3Auser-case" target="_blank" rel="noopener noreferrer">用户案例在新窗口打开</a></li>
<li><a href="https://github.com/alibaba/arthas/issues?utf8=%E2%9C%93&amp;q=label%3Aquestion-answered+" target="_blank" rel="noopener noreferrer">常见问题在新窗口打开</a></li>
</ul>
<h3><a class="header-anchor" href="#arthas基于了哪些工具上发展而来"><span></span></a><a href="#arthas%E5%9F%BA%E4%BA%8E%E4%BA%86%E5%93%AA%E4%BA%9B%E5%B7%A5%E5%85%B7%E4%B8%8A%E5%8F%91%E5%B1%95%E8%80%8C%E6%9D%A5">#</a> Arthas基于了哪些工具上发展而来</h3>
<ul>
<li><a href="https://github.com/oldmanpushcart/greys-anatomy" target="_blank" rel="noopener noreferrer">greys-anatomy在新窗口打开</a>: Arthas代码基于Greys二次开发而来，非常感谢Greys之前所有的工作，以及Greys原作者对Arthas提出的意见和建议！</li>
<li><a href="https://github.com/termd/termd" target="_blank" rel="noopener noreferrer">termd在新窗口打开</a>: Arthas的命令行实现基于termd开发，是一款优秀的命令行程序开发框架，感谢termd提供了优秀的框架。</li>
<li><a href="https://github.com/crashub/crash" target="_blank" rel="noopener noreferrer">crash在新窗口打开</a>: Arthas的文本渲染功能基于crash中的文本渲染功能开发，可以从<a href="https://github.com/crashub/crash/tree/1.3.2/shell" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a>看到源码，感谢crash在这方面所做的优秀工作。</li>
<li><a href="https://github.com/eclipse-vertx/vert.x/tree/master/src/main/java/io/vertx/core/cli" target="_blank" rel="noopener noreferrer">cli在新窗口打开</a>: Arthas的命令行界面基于vert.x提供的cli库进行开发，感谢vert.x在这方面做的优秀工作。</li>
<li><a href="https://github.com/skalogs/SkaETL/tree/master/compiler" target="_blank" rel="noopener noreferrer">compiler在新窗口打开</a> Arthas里的内存编绎器代码来源</li>
<li><a href="https://commons.apache.org/proper/commons-net/" target="_blank" rel="noopener noreferrer">Apache Commons Net在新窗口打开</a> Arthas里的Telnet Client代码来源</li>
<li><code>JavaAgent</code>：运行在 main方法之前的拦截器，它内定的方法名叫 premain ，也就是说先执行 premain 方法然后再执行 main 方法</li>
<li><code>ASM</code>：一个通用的Java字节码操作和分析框架。它可以用于修改现有的类或直接以二进制形式动态生成类。ASM提供了一些常见的字节码转换和分析算法，可以从它们构建定制的复杂转换和代码分析工具。ASM提供了与其他Java字节码框架类似的功能，但是主要关注性能。因为它被设计和实现得尽可能小和快，所以非常适合在动态系统中使用(当然也可以以静态方式使用，例如在编译器中)</li>
</ul>
<h3><a class="header-anchor" href="#同类工具有哪些"><span></span></a><a href="#%E5%90%8C%E7%B1%BB%E5%B7%A5%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B">#</a> 同类工具有哪些</h3>
<ul>
<li>BTrace</li>
<li>美团 Java-debug-tool</li>
<li><a href="https://github.com/qunarcorp/bistoury" target="_blank" rel="noopener noreferrer">去哪儿Bistoury: 一个集成了Arthas的项目在新窗口打开</a></li>
<li><a href="https://github.com/XhinLiang/arthas" target="_blank" rel="noopener noreferrer">一个使用MVEL脚本的fork在新窗口打开</a></li>
</ul>
<h2><a class="header-anchor" href="#arthas入门"><span></span></a><a href="#arthas%E5%85%A5%E9%97%A8">#</a> Arthas入门</h2>
<h3><a class="header-anchor" href="#arthas-上手前"><span></span></a><a href="#arthas-%E4%B8%8A%E6%89%8B%E5%89%8D">#</a> Arthas 上手前</h3>
<p>推荐先在线使用下arthas：<a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn" target="_blank" rel="noopener noreferrer">官方在线教程(推荐)在新窗口打开</a></p>
<h3><a class="header-anchor" href="#arthas-安装"><span></span></a><a href="#arthas-%E5%AE%89%E8%A3%85">#</a> Arthas 安装</h3>
<p>下载<code>arthas-boot.jar</code>，然后用<code>java -jar</code>的方式启动：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">curl</span><span style="color:#D19A66"> -O</span><span style="color:#98C379"> https://alibaba.github.io/arthas/arthas-boot.jar</span></span>
<span class="line"><span style="color:#61AFEF">java</span><span style="color:#D19A66"> -jar</span><span style="color:#98C379"> arthas-boot.jar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#arthas-官方案例展示"><span></span></a><a href="#arthas-%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B%E5%B1%95%E7%A4%BA">#</a> Arthas 官方案例展示</h3>
<h4><a class="header-anchor" href="#dashboard"><span></span></a><a href="#dashboard">#</a> Dashboard</h4>
<ul>
<li><a href="https://alibaba.github.io/arthas/dashboard" target="_blank" rel="noopener noreferrer">https://alibaba.github.io/arthas/dashboard</a></li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-arthas-dashboard.png" alt="dashboard" tabindex="0" loading="lazy"><figcaption>dashboard</figcaption></figure>
<h4><a class="header-anchor" href="#thread"><span></span></a><a href="#thread">#</a> Thread</h4>
<p>一目了然的了解系统的状态，哪些线程比较占cpu? 他们到底在做什么?</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> thread</span><span style="color:#D19A66"> -n</span><span style="color:#D19A66"> 3</span></span>
<span class="line"><span style="color:#61AFEF">"as-command-execute-daemon"</span><span style="color:#98C379"> Id=</span><span style="color:#D19A66">29</span><span style="color:#98C379"> cpuUsage=75%</span><span style="color:#98C379"> RUNNABLE</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> sun.management.ThreadImpl.dumpThreads0</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Native</span><span style="color:#98C379"> Method</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> sun.management.ThreadImpl.getThreadInfo</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ThreadImpl.java:440</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> com.taobao.arthas.core.command.monitor200.ThreadCommand</span><span style="color:#E06C75;font-style:italic">$1</span><span style="color:#98C379">.action</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ThreadCommand.java:58</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> com.taobao.arthas.core.command.handler.AbstractCommandHandler.execute</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">AbstractCommandHandler.java:238</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> com.taobao.arthas.core.command.handler.DefaultCommandHandler.handleCommand</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">DefaultCommandHandler.java:67</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> com.taobao.arthas.core.server.ArthasServer</span><span style="color:#E06C75;font-style:italic">$4</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ArthasServer.java:276</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.util.concurrent.ThreadPoolExecutor.runWorker</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ThreadPoolExecutor.java:1145</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.util.concurrent.ThreadPoolExecutor</span><span style="color:#E06C75">$Worker</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ThreadPoolExecutor.java:615</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.lang.Thread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Thread.java:745</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">    Number</span><span style="color:#98C379"> of</span><span style="color:#98C379"> locked</span><span style="color:#98C379"> synchronizers</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">    -</span><span style="color:#98C379"> java.util.concurrent.ThreadPoolExecutor</span><span style="color:#E06C75">$Worker</span><span style="color:#98C379">@6cd0b6f8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">"as-session-expire-daemon"</span><span style="color:#98C379"> Id=</span><span style="color:#D19A66">25</span><span style="color:#98C379"> cpuUsage=24%</span><span style="color:#98C379"> TIMED_WAITING</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.lang.Thread.sleep</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Native</span><span style="color:#98C379"> Method</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> com.taobao.arthas.core.server.DefaultSessionManager</span><span style="color:#E06C75;font-style:italic">$2</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">DefaultSessionManager.java:85</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">"Reference Handler"</span><span style="color:#98C379"> Id=</span><span style="color:#D19A66">2</span><span style="color:#98C379"> cpuUsage=0%</span><span style="color:#98C379"> WAITING</span><span style="color:#98C379"> on</span><span style="color:#98C379"> java.lang.ref.Reference</span><span style="color:#E06C75">$Lock</span><span style="color:#98C379">@69ba0f27</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.lang.Object.wait</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Native</span><span style="color:#98C379"> Method</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    -</span><span style="color:#98C379">  waiting</span><span style="color:#98C379"> on</span><span style="color:#98C379"> java.lang.ref.Reference</span><span style="color:#E06C75">$Lock</span><span style="color:#98C379">@69ba0f27</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.lang.Object.wait</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Object.java:503</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">    at</span><span style="color:#98C379"> java.lang.ref.Reference</span><span style="color:#E06C75">$ReferenceHandler</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Reference.java:133</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#jad"><span></span></a><a href="#jad">#</a> jad</h4>
<p>对类进行反编译:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">$ jad </span><span style="color:#E5C07B">javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">servlet</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Servlet</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">ClassLoader</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#56B6C2">+-</span><span style="color:#E5C07B">java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">net</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">URLClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">6108b2d7</span></span>
<span class="line"><span style="color:#56B6C2">  +-</span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Launcher$AppClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">18b4aac2</span></span>
<span class="line"><span style="color:#56B6C2">    +-</span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Launcher$ExtClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">1ddf84b8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">Location</span><span style="color:#C678DD">:</span></span>
<span class="line"><span style="color:#56B6C2">/</span><span style="color:#E06C75">Users</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">xxx</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">work</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">test</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">servlet</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">api</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * Decompiled with CFR 0_122.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> javax.servlet</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> javax.servlet.ServletConfig</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> javax.servlet.ServletException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> javax.servlet.ServletRequest</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> javax.servlet.ServletResponse</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> Servlet</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> init</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ServletConfig</span><span style="color:#E06C75;font-style:italic"> var1</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> ServletConfig</span><span style="color:#61AFEF"> getServletConfig</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> service</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ServletRequest</span><span style="color:#E06C75;font-style:italic"> var1</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ServletResponse</span><span style="color:#E06C75;font-style:italic"> var2</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ServletException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getServletInfo</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> destroy</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#mc"><span></span></a><a href="#mc">#</a> mc</h4>
<p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code>。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">mc</span><span style="color:#98C379"> /tmp/Test.java</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#redefine"><span></span></a><a href="#redefine">#</a> redefine</h4>
<p>加载外部的<code>.class</code>文件，redefine jvm已加载的类。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">redefine</span><span style="color:#98C379"> /tmp/Test.class</span></span>
<span class="line"><span style="color:#61AFEF">redefine</span><span style="color:#D19A66"> -c</span><span style="color:#98C379"> 327a647b</span><span style="color:#98C379"> /tmp/Test.class</span><span style="color:#98C379"> /tmp/Test</span><span style="color:#56B6C2">\$</span><span style="color:#98C379">Inner.class</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#sc"><span></span></a><a href="#sc">#</a> sc</h4>
<p>查找JVM中已经加载的类</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> sc</span><span style="color:#D19A66"> -d</span><span style="color:#98C379"> org.springframework.web.context.support.XmlWebApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF"> class-info</span><span style="color:#98C379">        org.springframework.web.context.support.XmlWebApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF"> code-source</span><span style="color:#98C379">       /Users/xxx/work/test/WEB-INF/lib/spring-web-3.2.11.RELEASE.jar</span></span>
<span class="line"><span style="color:#61AFEF"> name</span><span style="color:#98C379">              org.springframework.web.context.support.XmlWebApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF"> isInterface</span><span style="color:#D19A66">       false</span></span>
<span class="line"><span style="color:#61AFEF"> isAnnotation</span><span style="color:#D19A66">      false</span></span>
<span class="line"><span style="color:#61AFEF"> isEnum</span><span style="color:#D19A66">            false</span></span>
<span class="line"><span style="color:#61AFEF"> isAnonymousClass</span><span style="color:#D19A66">  false</span></span>
<span class="line"><span style="color:#61AFEF"> isArray</span><span style="color:#D19A66">           false</span></span>
<span class="line"><span style="color:#61AFEF"> isLocalClass</span><span style="color:#D19A66">      false</span></span>
<span class="line"><span style="color:#61AFEF"> isMemberClass</span><span style="color:#D19A66">     false</span></span>
<span class="line"><span style="color:#61AFEF"> isPrimitive</span><span style="color:#D19A66">       false</span></span>
<span class="line"><span style="color:#61AFEF"> isSynthetic</span><span style="color:#D19A66">       false</span></span>
<span class="line"><span style="color:#61AFEF"> simple-name</span><span style="color:#98C379">       XmlWebApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF"> modifier</span><span style="color:#98C379">          public</span></span>
<span class="line"><span style="color:#61AFEF"> annotation</span></span>
<span class="line"><span style="color:#61AFEF"> interfaces</span></span>
<span class="line"><span style="color:#61AFEF"> super-class</span><span style="color:#98C379">       +-org.springframework.web.context.support.AbstractRefreshableWebApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF">                     +-org.springframework.context.support.AbstractRefreshableConfigApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF">                       +-org.springframework.context.support.AbstractRefreshableApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF">                         +-org.springframework.context.support.AbstractApplicationContext</span></span>
<span class="line"><span style="color:#61AFEF">                           +-org.springframework.core.io.DefaultResourceLoader</span></span>
<span class="line"><span style="color:#61AFEF">                             +-java.lang.Object</span></span>
<span class="line"><span style="color:#61AFEF"> class-loader</span><span style="color:#98C379">      +-org.apache.catalina.loader.ParallelWebappClassLoader</span></span>
<span class="line"><span style="color:#61AFEF">                     +-java.net.URLClassLoader@6108b2d7</span></span>
<span class="line"><span style="color:#61AFEF">                       +-sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span style="color:#61AFEF">                         +-sun.misc.Launcher$ExtClassLoader@1ddf84b8</span></span>
<span class="line"><span style="color:#61AFEF"> classLoaderHash</span><span style="color:#D19A66">   25131501</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#stack"><span></span></a><a href="#stack">#</a> stack</h4>
<p>查看方法 <code>test.arthas.TestStack#doGet</code> 的调用堆栈：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> stack</span><span style="color:#98C379"> test.arthas.TestStack</span><span style="color:#98C379"> doGet</span></span>
<span class="line"><span style="color:#61AFEF">Press</span><span style="color:#98C379"> Ctrl+C</span><span style="color:#98C379"> to</span><span style="color:#98C379"> abort.</span></span>
<span class="line"><span style="color:#61AFEF">Affect(class-cnt:1</span><span style="color:#98C379"> ,</span><span style="color:#98C379"> method-cnt:1</span><span style="color:#ABB2BF">) cost in 286 ms.</span></span>
<span class="line"><span style="color:#E06C75">ts</span><span style="color:#56B6C2">=</span><span style="color:#98C379">2018-09-18</span><span style="color:#61AFEF"> 10:11:45</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">thread_name</span><span style="color:#56B6C2">=</span><span style="color:#98C379">http-bio-8080-exec-10</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">id</span><span style="color:#56B6C2">=</span><span style="color:#98C379">d9</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">is_daemon</span><span style="color:#56B6C2">=</span><span style="color:#98C379">true</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">priority</span><span style="color:#56B6C2">=</span><span style="color:#98C379">5</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">TCCL</span><span style="color:#56B6C2">=</span><span style="color:#98C379">org.apache.catalina.loader.ParallelWebappClassLoader@25131501</span></span>
<span class="line"><span style="color:#61AFEF">    @test.arthas.TestStack.doGet</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> javax.servlet.http.HttpServlet.service</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">HttpServlet.java:624</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> javax.servlet.http.HttpServlet.service</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">HttpServlet.java:731</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.ApplicationFilterChain.internalDoFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ApplicationFilterChain.java:303</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.ApplicationFilterChain.doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ApplicationFilterChain.java:208</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.tomcat.websocket.server.WsFilter.doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">WsFilter.java:52</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.ApplicationFilterChain.internalDoFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ApplicationFilterChain.java:241</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.ApplicationFilterChain.doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ApplicationFilterChain.java:208</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.ApplicationFilterChain.internalDoFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ApplicationFilterChain.java:241</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.ApplicationFilterChain.doFilter</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ApplicationFilterChain.java:208</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.StandardWrapperValve.invoke</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">StandardWrapperValve.java:220</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.StandardContextValve.invoke</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">StandardContextValve.java:110</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2">        ...</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.StandardHostValve.invoke</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">StandardHostValve.java:169</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.valves.ErrorReportValve.invoke</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ErrorReportValve.java:103</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.core.StandardEngineValve.invoke</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">StandardEngineValve.java:116</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.catalina.connector.CoyoteAdapter.service</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">CoyoteAdapter.java:451</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.coyote.http11.AbstractHttp11Processor.process</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">AbstractHttp11Processor.java:1121</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.coyote.AbstractProtocol</span><span style="color:#E06C75">$AbstractConnectionHandler</span><span style="color:#98C379">.process</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">AbstractProtocol.java:637</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.tomcat.util.net.JIoEndpoint</span><span style="color:#E06C75">$SocketProcessor</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">JIoEndpoint.java:316</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> java.util.concurrent.ThreadPoolExecutor.runWorker</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ThreadPoolExecutor.java:1142</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> java.util.concurrent.ThreadPoolExecutor</span><span style="color:#E06C75">$Worker</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ThreadPoolExecutor.java:617</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> org.apache.tomcat.util.threads.TaskThread</span><span style="color:#E06C75">$WrappingRunnable</span><span style="color:#98C379">.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">TaskThread.java:61</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">        at</span><span style="color:#98C379"> java.lang.Thread.run</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">Thread.java:745</span><span style="color:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#trace"><span></span></a><a href="#trace">#</a> Trace</h4>
<p>观察方法执行的时候哪个子调用比较慢:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-arthas-trace.png" alt="trace" tabindex="0" loading="lazy"><figcaption>trace</figcaption></figure>
<h4><a class="header-anchor" href="#watch"><span></span></a><a href="#watch">#</a> Watch</h4>
<p>观察方法 <code>test.arthas.TestWatch#doGet</code> 执行的入参，仅当方法抛出异常时才输出。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> watch</span><span style="color:#98C379"> test.arthas.TestWatch</span><span style="color:#98C379"> doGet</span><span style="color:#98C379"> {params[0],</span><span style="color:#98C379"> throwExp}</span><span style="color:#D19A66"> -e</span></span>
<span class="line"><span style="color:#61AFEF">Press</span><span style="color:#98C379"> Ctrl+C</span><span style="color:#98C379"> to</span><span style="color:#98C379"> abort.</span></span>
<span class="line"><span style="color:#61AFEF">Affect(class-cnt:1</span><span style="color:#98C379"> ,</span><span style="color:#98C379"> method-cnt:1</span><span style="color:#ABB2BF">) cost in 65 ms.</span></span>
<span class="line"><span style="color:#E06C75">ts</span><span style="color:#56B6C2">=</span><span style="color:#98C379">2018-09-18</span><span style="color:#61AFEF"> 10:26:28</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75">result</span><span style="color:#56B6C2">=</span><span style="color:#98C379">@ArrayList[</span></span>
<span class="line"><span style="color:#61AFEF">    @RequestFacade[org.apache.catalina.connector.RequestFacade@79f922b2],</span></span>
<span class="line"><span style="color:#61AFEF">    @NullPointerException[java.lang.NullPointerException],</span></span>
<span class="line"><span style="color:#ABB2BF">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#monitor"><span></span></a><a href="#monitor">#</a> Monitor</h4>
<p>监控某个特殊方法的调用统计数据，包括总调用次数，平均rt，成功率等信息，每隔5秒输出一次。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> monitor</span><span style="color:#D19A66"> -c</span><span style="color:#D19A66"> 5</span><span style="color:#98C379"> org.apache.dubbo.demo.provider.DemoServiceImpl</span><span style="color:#98C379"> sayHello</span></span>
<span class="line"><span style="color:#61AFEF">Press</span><span style="color:#98C379"> Ctrl+C</span><span style="color:#98C379"> to</span><span style="color:#98C379"> abort.</span></span>
<span class="line"><span style="color:#61AFEF">Affect(class-cnt:1</span><span style="color:#98C379"> ,</span><span style="color:#98C379"> method-cnt:1</span><span style="color:#ABB2BF">) cost in 109 ms.</span></span>
<span class="line"><span style="color:#61AFEF"> timestamp</span><span style="color:#98C379">            class</span><span style="color:#98C379">                                           method</span><span style="color:#98C379">    total</span><span style="color:#98C379">  success</span><span style="color:#98C379">  fail</span><span style="color:#98C379">  avg-rt</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ms</span><span style="color:#ABB2BF">)  </span><span style="color:#98C379">fail-rate</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-arthas-dashboard.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错 Java动态调试技术原理</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20Java%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错 Java动态调试技术原理</source>
      <description>本文转载自 美团技术团队胡健的Java 动态调试技术原理及实践在新窗口打开, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。 调试排错 Java动态调试技术原理 简介 Agent的实现模式 通过Java Instrumentation API 启动时加载Agent 参数解析 执行加载操作 instrument动...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文转载自 美团技术团队胡健的<a href="https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html" target="_blank" rel="noopener noreferrer">Java 动态调试技术原理及实践在新窗口打开</a>, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。</p>
</blockquote>
<ul>
<li>调试排错 Java动态调试技术原理
<ul>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li>Agent的实现模式
<ul>
<li><a href="#%E9%80%9A%E8%BF%87java-instrumentation-api">通过Java Instrumentation API</a></li>
</ul>
</li>
<li>启动时加载Agent
<ul>
<li><a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90">参数解析</a></li>
<li><a href="#%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E6%93%8D%E4%BD%9C">执行加载操作</a></li>
<li><a href="#instrument%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93">instrument动态链接库</a></li>
</ul>
</li>
<li>运行时加载Agent
<ul>
<li><a href="#attachlistener">AttachListener</a></li>
<li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent%E7%9A%84%E5%AE%9E%E7%8E%B0">运行时加载Agent的实现</a></li>
<li><a href="#load%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AE%9E%E7%8E%B0">load命令的实现</a></li>
</ul>
</li>
<li><a href="#%E5%8A%A8%E6%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E4%BF%AE%E6%94%B9%E7%9A%84%E9%99%90%E5%88%B6">动态字节码修改的限制</a></li>
<li><a href="#%E9%87%8D%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82">重定义类字节码的实现细节</a></li>
<li>Java-debug-tool
<ul>
<li><a href="#java-debug-tool%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84">Java-debug-tool整体架构</a></li>
<li>Java-debug-tool的字节码增强方案
<ul>
<li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA">字节码增强</a></li>
<li><a href="#advice%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">Advice的工作方式</a></li>
</ul>
</li>
<li>Java-debug-tool的命令设计与实现
<ul>
<li><a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">命令执行</a></li>
<li><a href="#%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%A7%86%E5%9B%BE">获取方法执行视图</a></li>
</ul>
</li>
<li><a href="#java-debug-tool%E4%B8%8E%E5%90%8C%E7%B1%BB%E4%BA%A7%E5%93%81%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90">Java-debug-tool与同类产品对比分析</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#简介"><span></span></a><a href="#%E7%AE%80%E4%BB%8B">#</a> 简介</h2>
<p>断点调试是我们最常使用的调试手段，它可以获取到方法执行过程中的变量信息，并可以观察到方法的执行路径。但断点调试会在断点位置停顿，使得整个应用停止响应。在线上停顿应用是致命的，动态调试技术给了我们创造新的调试模式的想象空间。本文将研究Java语言中的动态调试技术，首先概括Java动态调试所涉及的技术基础，接着介绍我们在Java动态调试领域的思考及实践，通过结合实际业务场景，设计并实现了一种具备动态性的断点调试工具Java-debug-tool，显著提高了故障排查效率。</p>
<p>JVMTI (JVM Tool Interface)是Java虚拟机对外提供的Native编程接口，通过JVMTI，外部进程可以获取到运行时JVM的诸多信息，比如线程、GC等。Agent是一个运行在目标JVM的特定程序，它的职责是负责从目标JVM中获取数据，然后将数据传递给外部进程。加载Agent的时机可以是目标JVM启动之时，也可以是在目标JVM运行时进行加载，而在目标JVM运行时进行Agent加载具备动态性，对于时机未知的Debug场景来说非常实用。下面将详细分析Java Agent技术的实现细节。</p>
<h2><a class="header-anchor" href="#agent的实现模式"><span></span></a><a href="#agent%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%BC%8F">#</a> Agent的实现模式</h2>
<p>JVMTI是一套Native接口，在Java SE 5之前，要实现一个Agent只能通过编写Native代码来实现。从Java SE 5开始，可以使用Java的Instrumentation接口(java.lang.instrument)来编写Agent。无论是通过Native的方式还是通过Java Instrumentation接口的方式来编写Agent，它们的工作都是借助JVMTI来进行完成，下面介绍通过Java Instrumentation接口编写Agent的方法。</p>
<h3><a class="header-anchor" href="#通过java-instrumentation-api"><span></span></a><a href="#%E9%80%9A%E8%BF%87java-instrumentation-api">#</a> 通过Java Instrumentation API</h3>
<ul>
<li>实现Agent启动方法</li>
</ul>
<p>Java Agent支持目标JVM启动时加载，也支持在目标JVM运行时加载，这两种不同的加载模式会使用不同的入口函数，如果需要在目标JVM启动的同时加载Agent，那么可以选择实现下面的方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> premain</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> agentArgs</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Instrumentation</span><span style="color:#E06C75"> inst)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">2</span><span style="color:#E06C75">] </span><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> premain</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> agentArgs)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM将首先寻找[1]，如果没有发现[1]，再寻找[2]。如果希望在目标JVM运行时加载Agent，则需要实现下面的方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">1</span><span style="color:#E06C75">] </span><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> agentmain</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> agentArgs</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Instrumentation</span><span style="color:#E06C75"> inst)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">2</span><span style="color:#E06C75">] </span><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> agentmain</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> agentArgs)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两组方法的第一个参数AgentArgs是随同 “– javaagent”一起传入的程序参数，如果这个字符串代表了多个参数，就需要自己解析这些参数。inst是Instrumentation类型的对象，是JVM自动传入的，我们可以拿这个参数进行类增强等操作。</p>
<ul>
<li>指定Main-Class</li>
</ul>
<p>Agent需要打包成一个jar包，在ManiFest属性中指定“Premain-Class”或者“Agent-Class”：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">Premain</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">Class</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> class</span></span>
<span class="line"><span style="color:#E06C75">Agent</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">Class</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> class</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>挂载到目标JVM</li>
</ul>
<p>将编写的Agent打成jar包后，就可以挂载到目标JVM上去了。如果选择在目标JVM启动时加载Agent，则可以使用 “-javaagent:[=]“，具体的使用方法可以使用“Java -Help”来查看。如果想要在运行时挂载Agent到目标JVM，就需要做一些额外的开发了。</p>
<p>com.sun.tools.attach.VirtualMachine 这个类代表一个JVM抽象，可以通过这个类找到目标JVM，并且将Agent挂载到目标JVM上。下面是使用com.sun.tools.attach.VirtualMachine进行动态挂载Agent的一般实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> attachAgentToTargetJVM</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B">        List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">VirtualMachineDescriptor</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> virtualMachineDescriptors </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> VirtualMachine</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">list</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        VirtualMachineDescriptor</span><span style="color:#E06C75"> targetVM </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">VirtualMachineDescriptor</span><span style="color:#E06C75"> descriptor </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> virtualMachineDescriptors) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">descriptor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">id</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">configure</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPid</span><span style="color:#ABB2BF">())</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                targetVM </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> descriptor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (targetVM </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"could not find the target jvm by process id:"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> configure</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPid</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E5C07B">        VirtualMachine</span><span style="color:#E06C75"> virtualMachine </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            virtualMachine </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> VirtualMachine</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">attach</span><span style="color:#ABB2BF">(targetVM);</span></span>
<span class="line"><span style="color:#E5C07B">            virtualMachine</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadAgent</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{agent}"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"{params}"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (virtualMachine </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                virtualMachine</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">detach</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过指定的进程ID找到目标JVM，然后通过Attach挂载到目标JVM上，执行加载Agent操作。VirtualMachine的Attach方法就是用来将Agent挂载到目标JVM上去的，而Detach则是将Agent从目标JVM卸载。关于Agent是如何挂载到目标JVM上的具体技术细节，将在下文中进行分析。</p>
<h2><a class="header-anchor" href="#启动时加载agent"><span></span></a><a href="#%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BDagent">#</a> 启动时加载Agent</h2>
<h3><a class="header-anchor" href="#参数解析"><span></span></a><a href="#%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90">#</a> 参数解析</h3>
<p>创建JVM时，JVM会进行参数解析，即解析那些用来配置JVM启动的参数，比如堆大小、GC等；本文主要关注解析的参数为-agentlib、 -agentpath、 -javaagent，这几个参数用来指定Agent，JVM会根据这几个参数加载Agent。下面来分析一下JVM是如何解析这几个参数的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // -agentlib and -agentpath</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">match_option</span><span style="color:#E06C75">(option</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "-agentlib:"</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">tail) </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#E06C75">          (is_absolute_path </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> match_option</span><span style="color:#E06C75">(option</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "-agentpath:"</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">tail))) {</span></span>
<span class="line"><span style="color:#C678DD">      if</span><span style="color:#E06C75">(tail </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NULL) {</span></span>
<span class="line"><span style="color:#C678DD">        const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> pos </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> strchr</span><span style="color:#E06C75">(tail</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> '='</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size_t len </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (pos </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> NULL) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> strlen</span><span style="color:#E06C75">(tail) </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> pos </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> tail</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> strncpy</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">NEW_C_HEAP_ARRAY</span><span style="color:#E06C75">(</span><span style="color:#C678DD">char</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> len </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mtArguments)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> tail</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> len)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        name[len] </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> '</span><span style="color:#56B6C2">\0</span><span style="color:#98C379">'</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        char</span><span style="color:#56B6C2"> *</span><span style="color:#E06C75">options </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> NULL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75">(pos </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NULL) {</span></span>
<span class="line"><span style="color:#E06C75">          options </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">strdup_check_oom</span><span style="color:#E06C75">(pos </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mtArguments)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">#</span><span style="color:#C678DD">if</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">valid_jdwp_agent</span><span style="color:#E06C75">(name</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> is_absolute_path)) {</span></span>
<span class="line"><span style="color:#61AFEF">          jio_fprintf</span><span style="color:#E06C75">(defaultStream</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">error_stream</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">            "Debugging agents are not supported in this VM</span><span style="color:#56B6C2">\n</span><span style="color:#98C379">"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">          return</span><span style="color:#E06C75"> JNI_ERR</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">#endif </span><span style="color:#7F848E;font-style:italic">// !INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#61AFEF">        add_init_agent</span><span style="color:#E06C75">(name</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> options</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> is_absolute_path)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">      }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // -javaagent</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">match_option</span><span style="color:#E06C75">(option</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "-javaagent:"</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">tail)) {</span></span>
<span class="line"><span style="color:#E06C75">#</span><span style="color:#C678DD">if</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#61AFEF">      jio_fprintf</span><span style="color:#E06C75">(defaultStream</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">error_stream</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        "Instrumentation agents are not supported in this VM</span><span style="color:#56B6C2">\n</span><span style="color:#98C379">"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#E06C75"> JNI_ERR</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">#</span><span style="color:#C678DD">else</span></span>
<span class="line"><span style="color:#C678DD">      if</span><span style="color:#E06C75"> (tail </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NULL) {</span></span>
<span class="line"><span style="color:#E06C75">        size_t length </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> strlen</span><span style="color:#E06C75">(tail) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        char</span><span style="color:#56B6C2"> *</span><span style="color:#E06C75">options </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> NEW_C_HEAP_ARRAY</span><span style="color:#E06C75">(</span><span style="color:#C678DD">char</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> length</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mtArguments)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        jio_snprintf</span><span style="color:#E06C75">(options</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> length</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "%s"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> tail)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        add_init_agent</span><span style="color:#E06C75">(</span><span style="color:#98C379">"instrument"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> options</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // java agents need module java.instrument</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">create_numbered_property</span><span style="color:#E06C75">(</span><span style="color:#98C379">"jdk.module.addmods"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "java.instrument"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> addmods_count</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#C678DD">          return</span><span style="color:#E06C75"> JNI_ENOMEM</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">      }</span></span>
<span class="line"><span style="color:#E06C75">#endif </span><span style="color:#7F848E;font-style:italic">// !INCLUDE_JVMTI</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码片段截取自hotspot/src/share/vm/runtime/arguments.cpp中的 Arguments::parse_each_vm_init_arg(const JavaVMInitArgs* args, bool* patch_mod_javabase, Flag::Flags origin) 函数，该函数用来解析一个具体的JVM参数。这段代码的主要功能是解析出需要加载的Agent路径，然后调用add_init_agent函数进行解析结果的存储。下面先看一下add_init_agent函数的具体实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // -agentlib and -agentpath arguments</span></span>
<span class="line"><span style="color:#C678DD">  static</span><span style="color:#E5C07B"> AgentLibraryList</span><span style="color:#E06C75"> _agentList</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add_init_agent</span><span style="color:#E06C75">(</span><span style="color:#C678DD">const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> name</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> options</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> bool absolute_path)</span></span>
<span class="line"><span style="color:#E06C75">    { </span><span style="color:#E5C07B">_agentList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> AgentLibrary</span><span style="color:#ABB2BF">(name, options, absolute_path, NULL));</span><span style="color:#E06C75"> }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AgentLibraryList是一个简单的链表结构，add_init_agent函数将解析好的、需要加载的Agent添加到这个链表中，等待后续的处理。</p>
<p>这里需要注意，解析-javaagent参数有一些特别之处，这个参数用来指定一个我们通过Java Instrumentation API来编写的Agent，Java Instrumentation API底层依赖的是JVMTI，对-JavaAgent的处理也说明了这一点，在调用add_init_agent函数时第一个参数是“instrument”，关于加载Agent这个问题在下一小节进行展开。到此，我们知道在启动JVM时指定的Agent已经被JVM解析完存放在了一个链表结构中。下面来分析一下JVM是如何加载这些Agent的。</p>
<h3><a class="header-anchor" href="#执行加载操作"><span></span></a><a href="#%E6%89%A7%E8%A1%8C%E5%8A%A0%E8%BD%BD%E6%93%8D%E4%BD%9C">#</a> 执行加载操作</h3>
<p>在创建JVM进程的函数中，解析完JVM参数之后，下面的这段代码和加载Agent相关：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // Launch -agentlib/-agentpath and converted -Xrun agents</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (Arguments</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">init_agents_at_startup</span><span style="color:#E06C75">()) {</span></span>
<span class="line"><span style="color:#61AFEF">    create_vm_init_agents</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#C678DD">  static</span><span style="color:#E06C75"> bool </span><span style="color:#61AFEF">init_agents_at_startup</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">_agentList</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">is_empty</span><span style="color:#ABB2BF">();</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">  }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当JVM判断出上一小节中解析出来的Agent不为空的时候，就要去调用函数create_vm_init_agents来加载Agent，下面来分析一下create_vm_init_agents函数是如何加载Agent的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#E06C75"> Threads</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">create_vm_init_agents</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">  AgentLibrary</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> agent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  for</span><span style="color:#E06C75"> (agent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Arguments</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">agents</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> agent </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NULL</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> agent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">next</span><span style="color:#E06C75">()) {</span></span>
<span class="line"><span style="color:#E5C07B">    OnLoadEntry_t</span><span style="color:#E06C75">  on_load_entry </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> lookup_agent_on_load</span><span style="color:#E06C75">(agent)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (on_load_entry </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> NULL) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      // Invoke the Agent_OnLoad function</span></span>
<span class="line"><span style="color:#E06C75">      jint err </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">*</span><span style="color:#E06C75">on_load_entry)(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">main_vm</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">options</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> NULL)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>create_vm_init_agents这个函数通过遍历Agent链表来逐个加载Agent。通过这段代码可以看出，首先通过lookup_agent_on_load来加载Agent并且找到Agent_OnLoad函数，这个函数是Agent的入口函数。如果没找到这个函数，则认为是加载了一个不合法的Agent，则什么也不做，否则调用这个函数，这样Agent的代码就开始执行起来了。对于使用Java Instrumentation API来编写Agent的方式来说，在解析阶段观察到在add_init_agent函数里面传递进去的是一个叫做”instrument”的字符串，其实这是一个动态链接库。在Linux里面，<a href="http://xn--libinstrument-2h1us8wmmp987bfm3n.so" target="_blank" rel="noopener noreferrer">这个库叫做libinstrument.so</a>，在BSD系统中叫做libinstrument.dylib，该动态链接库在{JAVA_HOME}/jre/lib/目录下。</p>
<h3><a class="header-anchor" href="#instrument动态链接库"><span></span></a><a href="#instrument%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93">#</a> instrument动态链接库</h3>
<p>libinstrument用来支持使用Java Instrumentation API来编写Agent，在libinstrument中有一个非常重要的类称为：JPLISAgent(Java Programming Language Instrumentation Services Agent)，它的作用是初始化所有通过Java Instrumentation API编写的Agent，并且也承担着通过JVMTI实现Java Instrumentation中暴露API的责任。</p>
<p>我们已经知道，在JVM启动的时候，JVM会通过-javaagent参数加载Agent。最开始加载的是libinstrument动态链接库，然后在动态链接库里面找到JVMTI的入口方法：Agent_OnLoad。下面就来分析一下在libinstrument动态链接库中，Agent_OnLoad函数是怎么实现的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">JNIEXPORT</span><span style="color:#E06C75"> jint </span><span style="color:#E5C07B">JNICALL</span></span>
<span class="line"><span style="color:#61AFEF">DEF_Agent_OnLoad</span><span style="color:#E06C75">(JavaVM </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">vm</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2"> *</span><span style="color:#E06C75">tail</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> void</span><span style="color:#56B6C2"> *</span><span style="color:#E06C75"> reserved) {</span></span>
<span class="line"><span style="color:#E06C75">    initerror </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> createNewJPLISAgent</span><span style="color:#E06C75">(vm</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">agent)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ( initerror </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> JPLIS_INIT_ERROR_NONE ) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">parseArgumentTail</span><span style="color:#E06C75">(tail</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">jarfile</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">options) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">            fprintf</span><span style="color:#E06C75">(stderr</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "-javaagent: memory allocation failure.</span><span style="color:#56B6C2">\n</span><span style="color:#98C379">"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> JNI_ERR</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        attributes </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> readAttributes</span><span style="color:#E06C75">(jarfile)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        premainClass </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getAttribute</span><span style="color:#E06C75">(attributes</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "Premain-Class"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* Save the jarfile name */</span></span>
<span class="line"><span style="color:#E06C75">        agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">mJarfile </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> jarfile</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * Convert JAR attributes into agent capabilities</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         */</span></span>
<span class="line"><span style="color:#61AFEF">        convertCapabilityAttributes</span><span style="color:#E06C75">(attributes</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> agent)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * Track (record) the agent class name and options data</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         */</span></span>
<span class="line"><span style="color:#E06C75">        initerror </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> recordCommandLineData</span><span style="color:#E06C75">(agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> premainClass</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> options)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码片段是经过精简的libinstrument中Agent_OnLoad实现的，大概的流程就是：先创建一个JPLISAgent，然后将ManiFest中设定的一些参数解析出来， 比如(Premain-Class)等。创建了JPLISAgent之后，调用initializeJPLISAgent对这个Agent进行初始化操作。跟进initializeJPLISAgent看一下是如何初始化的：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">JPLISInitializationError</span><span style="color:#61AFEF"> initializeJPLISAgent</span><span style="color:#E06C75">(JPLISAgent </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> JavaVM </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">vm</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jvmtiEnv </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jvmtienv) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* check what capabilities are available */</span></span>
<span class="line"><span style="color:#61AFEF">    checkCapabilities</span><span style="color:#E06C75">(agent)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* check phase - if live phase then we don't need the VMInit event */</span></span>
<span class="line"><span style="color:#E06C75">    jvmtierror </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jvmtienv)</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">GetPhase</span><span style="color:#E06C75">(jvmtienv</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">phase)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* now turn on the VMInit event */</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ( jvmtierror </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> JVMTI_ERROR_NONE ) {</span></span>
<span class="line"><span style="color:#E06C75">        jvmtiEventCallbacks callbacks</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        memset</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">callbacks</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> sizeof</span><span style="color:#E06C75">(callbacks))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        callbacks</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">VMInit</span><span style="color:#56B6C2"> =</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">eventHandlerVMInit</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        jvmtierror </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jvmtienv)</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">SetEventCallbacks</span><span style="color:#E06C75">(jvmtienv</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">callbacks</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF">sizeof</span><span style="color:#E06C75">(callbacks))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ( jvmtierror </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> JVMTI_ERROR_NONE ) {</span></span>
<span class="line"><span style="color:#E06C75">        jvmtierror </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jvmtienv)</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">SetEventNotificationMode</span><span style="color:#E06C75">(jvmtienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">JVMTI_ENABLE</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">JVMTI_EVENT_VM_INIT</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">NULL)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (jvmtierror </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> JVMTI_ERROR_NONE)</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> JPLIS_INIT_ERROR_NONE </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> JPLIS_INIT_ERROR_FAILURE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们关注callbacks.VMInit = &amp;eventHandlerVMInit;这行代码，这里设置了一个VMInit事件的回调函数，表示在JVM初始化的时候会回调eventHandlerVMInit函数。下面来看一下这个函数的实现细节，猜测就是在这里调用了Premain方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#E5C07B"> JNICALL</span><span style="color:#61AFEF">  eventHandlerVMInit</span><span style="color:#E06C75">( jvmtiEnv </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jvmtienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">JNIEnv </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">jthread thread) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">   // ...</span></span>
<span class="line"><span style="color:#E06C75">   success </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> processJavaStart</span><span style="color:#E06C75">( environment</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">mAgent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jnienv)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // ...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75">jboolean  </span><span style="color:#61AFEF">processJavaStart</span><span style="color:#E06C75">(JPLISAgent </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">JNIEnv </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jnienv) {</span></span>
<span class="line"><span style="color:#E06C75">    result </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> createInstrumentationImpl</span><span style="color:#E06C75">(jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> agent)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *  Load the Java agent, and call the premain.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ( result ) {</span></span>
<span class="line"><span style="color:#E06C75">        result </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> startJavaAgent</span><span style="color:#E06C75">(agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">mAgentClassName</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">mOptionsString</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">mPremainCaller)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#E06C75">jboolean </span><span style="color:#61AFEF">startJavaAgent</span><span style="color:#E06C75">( JPLISAgent </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">JNIEnv </span><span style="color:#56B6C2">*</span><span style="color:#E06C75">jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD">const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2"> *</span><span style="color:#E06C75">classname</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD">const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2"> *</span><span style="color:#E06C75">optionsString</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">jmethodID agentMainMethod) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // ...  </span></span>
<span class="line"><span style="color:#61AFEF">  invokeJavaAgentMainMethod</span><span style="color:#E06C75">(jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">agent</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">mInstrumentationImpl</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">agentMainMethod</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> classNameObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">optionsStringObject)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // ...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，Instrument已经实例化，invokeJavaAgentMainMethod这个方法将我们的premain方法执行起来了。接着，我们就可以根据Instrument实例来做我们想要做的事情了。</p>
<h2><a class="header-anchor" href="#运行时加载agent"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent">#</a> 运行时加载Agent</h2>
<p>比起JVM启动时加载Agent，运行时加载Agent就比较有诱惑力了，因为运行时加载Agent的能力给我们提供了很强的动态性，我们可以在需要的时候加载Agent来进行一些工作。因为是动态的，我们可以按照需求来加载所需要的Agent，下面来分析一下动态加载Agent的相关技术细节。</p>
<h3><a class="header-anchor" href="#attachlistener"><span></span></a><a href="#attachlistener">#</a> AttachListener</h3>
<p>Attach机制通过Attach Listener线程来进行相关事务的处理，下面来看一下Attach Listener线程是如何初始化的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Starts the Attach Listener thread</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#E06C75"> AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">init</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // 创建线程相关部分代码被去掉了</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#C678DD"> char</span><span style="color:#E06C75"> thread_name[] </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Attach Listener"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">  Handle</span><span style="color:#E06C75"> string </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> java_lang_String</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">create_from_str</span><span style="color:#E06C75">(thread_name</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> THREAD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#E5C07B">MutexLocker</span><span style="color:#61AFEF"> mu</span><span style="color:#E06C75">(Threads_lock)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    JavaThread</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> listener_thread </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> JavaThread</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">attach_listener_thread_entry)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，一个线程启动之后都需要指定一个入口来执行代码，Attach Listener线程的入口是attach_listener_thread_entry，下面看一下这个函数的具体实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> attach_listener_thread_entry</span><span style="color:#E06C75">(JavaThread</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> thread</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> TRAPS) {</span></span>
<span class="line"><span style="color:#E06C75">  AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">set_initialized</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">      AttachOperation</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> op </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">dequeue</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      // find the function to dispatch too</span></span>
<span class="line"><span style="color:#E06C75">      AttachOperationFunctionInfo</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> info </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> NULL</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">      for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> funcs[i]</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> NULL</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> funcs[i]</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">strcmp</span><span style="color:#E06C75">(op</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">name</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> name) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">          info </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">(funcs[i])</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">       // dispatch to the function that implements this operation</span></span>
<span class="line"><span style="color:#E06C75">        res </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (info</span><span style="color:#C678DD">-&gt;</span><span style="color:#E06C75">func)(op</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">st)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //...</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个函数执行逻辑，大概是这样的：</p>
<ul>
<li>拉取一个需要执行的任务：AttachListener::dequeue。</li>
<li>查询匹配的命令处理函数。</li>
<li>执行匹配到的命令执行函数。</li>
</ul>
<p>其中第二步里面存在一个命令函数表，整个表如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#E5C07B"> AttachOperationFunctionInfo</span><span style="color:#E06C75"> funcs[] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"agentProperties"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">  get_agent_properties }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"datadump"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">         data_dump }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"dumpheap"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">         dump_heap }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"load"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">             load_agent }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"properties"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">       get_system_properties }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"threaddump"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">       thread_dump }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"inspectheap"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">      heap_inspection }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"setflag"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">          set_flag }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"printflag"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">        print_flag }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { </span><span style="color:#98C379">"jcmd"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">             jcmd }</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  { NULL</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">               NULL }</span></span>
<span class="line"><span style="color:#E06C75">}</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于加载Agent来说，命令就是“load”。现在，我们知道了Attach Listener大概的工作模式，但是还是不太清楚任务从哪来，这个秘密就藏在AttachListener::dequeue这行代码里面，接下来我们来分析一下dequeue这个函数：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">LinuxAttachOperation</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> LinuxAttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">dequeue</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">  for</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">;;</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // wait for client to connect</span></span>
<span class="line"><span style="color:#E06C75">    struct sockaddr addr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    socklen_t len </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> sizeof</span><span style="color:#E06C75">(addr)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    RESTARTABLE</span><span style="color:#E06C75">(</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">accept</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">listener</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">addr</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">len)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> s)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // get the credentials of the peer and check the effective uid/guid</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // - check with jeff on this.</span></span>
<span class="line"><span style="color:#E06C75">    struct ucred cred_info</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    socklen_t optlen </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> sizeof</span><span style="color:#E06C75">(cred_info)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">getsockopt</span><span style="color:#E06C75">(s</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> SOL_SOCKET</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> SO_PEERCRED</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">void</span><span style="color:#56B6C2">*</span><span style="color:#E06C75">)</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">cred_info</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">optlen) </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">      ::</span><span style="color:#61AFEF">close</span><span style="color:#E06C75">(s)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">      continue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // peer credential look okay so we read the request</span></span>
<span class="line"><span style="color:#E06C75">    LinuxAttachOperation</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> op </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read_request</span><span style="color:#E06C75">(s)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> op</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是Linux上的实现，不同的操作系统实现方式不太一样。上面的代码表面，Attach Listener在某个端口监听着，通过accept来接收一个连接，然后从这个连接里面将请求读取出来，然后将请求包装成一个AttachOperation类型的对象，之后就会从表里查询对应的处理函数，然后进行处理。</p>
<p>Attach Listener使用一种被称为“懒加载”的策略进行初始化，也就是说，JVM启动的时候Attach Listener并不一定会启动起来。下面我们来分析一下这种“懒加载”策略的具体实现方案。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // Start Attach Listener if +StartAttachListener or it can't be started lazily</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">DisableAttachMechanism) {</span></span>
<span class="line"><span style="color:#E06C75">    AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">vm_start</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (StartAttachListener </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">init_at_startup</span><span style="color:#E06C75">()) {</span></span>
<span class="line"><span style="color:#E06C75">      AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">init</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Attach Listener is started lazily except in the case when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// +ReduseSignalUsage is used</span></span>
<span class="line"><span style="color:#E06C75">bool AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">init_at_startup</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (ReduceSignalUsage) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码截取自create_vm函数，DisableAttachMechanism、StartAttachListener和ReduceSignalUsage这三个变量默认都是false，所以AttachListener::init();这行代码不会在create_vm的时候执行，而vm_start会执行。下面来看一下这个函数的实现细节：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#E06C75"> AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">vm_start</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">  char</span><span style="color:#E06C75"> fn[UNIX_PATH_MAX]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  struct stat64 st</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  int</span><span style="color:#E06C75"> ret</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  int</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> snprintf</span><span style="color:#E06C75">(fn</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> UNIX_PATH_MAX</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "%s/.java_pid%d"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">           os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">get_temp_directory</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">current_process_id</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">  assert</span><span style="color:#E06C75">(n </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)UNIX_PATH_MAX</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "java_pid file name buffer overflow"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">  RESTARTABLE</span><span style="color:#E06C75">(</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">stat64</span><span style="color:#E06C75">(fn</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">st)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ret)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (ret </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">    ret </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> ::</span><span style="color:#61AFEF">unlink</span><span style="color:#E06C75">(fn)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (ret </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">      log_debug</span><span style="color:#E06C75">(attach)(</span><span style="color:#98C379">"Failed to remove stale attach pid file at %s"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fn)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是在Linux上的实现，是将/tmp/目录下的.java_pid{pid}文件删除，后面在创建Attach Listener线程的时候会创建出来这个文件。上面说到，AttachListener::init()这行代码不会在create_vm的时候执行，这行代码的实现已经在上文中分析了，就是创建Attach Listener线程，并监听其他JVM的命令请求。现在来分析一下这行代码是什么时候被调用的，也就是“懒加载”到底是怎么加载起来的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // Signal Dispatcher needs to be started before VMInit event is posted</span></span>
<span class="line"><span style="color:#E06C75">  os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">signal_init</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是create_vm中的一段代码，看起来跟信号相关，其实Attach机制就是使用信号来实现“懒加载“的。下面我们来仔细地分析一下这个过程。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">signal_init</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">ReduceSignalUsage) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Setup JavaThread for processing signals</span></span>
<span class="line"><span style="color:#E06C75">    EXCEPTION_MARK</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    Klass</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> SystemDictionary</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">resolve_or_fail</span><span style="color:#E06C75">(vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">java_lang_Thread</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> CHECK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    instanceKlassHandle </span><span style="color:#61AFEF">klass</span><span style="color:#E06C75"> (THREAD</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> k)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    instanceHandle thread_oop </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> klass</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">allocate_instance_handle</span><span style="color:#E06C75">(CHECK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#C678DD"> char</span><span style="color:#E06C75"> thread_name[] </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Signal Dispatcher"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Handle</span><span style="color:#E06C75"> string </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> java_lang_String</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">create_from_str</span><span style="color:#E06C75">(thread_name</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> CHECK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Initialize thread_oop to put it into the system threadGroup</span></span>
<span class="line"><span style="color:#E5C07B">    Handle</span><span style="color:#61AFEF"> thread_group</span><span style="color:#E06C75"> (THREAD</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> Universe</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">system_thread_group</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    JavaValue</span><span style="color:#61AFEF"> result</span><span style="color:#E06C75">(T_VOID)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    JavaCalls</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">call_special</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">result</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> thread_oop</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">klass</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">object_initializer_name</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">threadgroup_string_void_signature</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                           thread_group</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">string</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">CHECK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    KlassHandle</span><span style="color:#61AFEF"> group</span><span style="color:#E06C75">(THREAD</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> SystemDictionary</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">ThreadGroup_klass</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    JavaCalls</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">call_special</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">result</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">thread_group</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">group</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">add_method_name</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">thread_void_signature</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">thread_oop</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">CHECK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">signal_init_pd</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    { </span><span style="color:#E5C07B">MutexLocker</span><span style="color:#61AFEF"> mu</span><span style="color:#E06C75">(Threads_lock)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">      JavaThread</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> signal_thread </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> JavaThread</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">signal_thread_entry)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // ...</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Handle ^BREAK</span></span>
<span class="line"><span style="color:#E06C75">    os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">signal</span><span style="color:#E06C75">(SIGBREAK</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">user_handler</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM创建了一个新的进程来实现信号处理，这个线程叫“Signal Dispatcher”，一个线程创建之后需要有一个入口，“Signal Dispatcher”的入口是signal_thread_entry：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这段代码截取自signal_thread_entry函数，截取中的内容是和Attach机制信号处理相关的代码。这段代码的意思是，当接收到“SIGBREAK”信号，就执行接下来的代码，这个信号是需要Attach到JVM上的信号发出来，这个后面会再分析。我们先来看一句关键的代码：AttachListener::is_init_trigger()：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">bool AttachListener</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">is_init_trigger</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">init_at_startup</span><span style="color:#E06C75">() </span><span style="color:#56B6C2">||</span><span style="color:#61AFEF"> is_initialized</span><span style="color:#E06C75">()) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // initialized at startup or already initialized</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#C678DD">  char</span><span style="color:#E06C75"> fn[PATH_MAX</span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">  sprintf</span><span style="color:#E06C75">(fn</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> ".attach_pid%d"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">current_process_id</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  int</span><span style="color:#E06C75"> ret</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  struct stat64 st</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">  RESTARTABLE</span><span style="color:#E06C75">(</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">stat64</span><span style="color:#E06C75">(fn</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">st)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ret)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (ret </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">    log_trace</span><span style="color:#E06C75">(attach)(</span><span style="color:#98C379">"Failed to find attach file: %s, trying alternate"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fn)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    snprintf</span><span style="color:#E06C75">(fn</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> sizeof</span><span style="color:#E06C75">(fn)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "%s/.attach_pid%d"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">get_temp_directory</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> os</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">current_process_id</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    RESTARTABLE</span><span style="color:#E06C75">(</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">stat64</span><span style="color:#E06C75">(fn</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75">st)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ret)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (ret </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // simple check to avoid starting the attach mechanism when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // a bogus user creates the file</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">st</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">st_uid</span><span style="color:#56B6C2"> ==</span><span style="color:#61AFEF"> geteuid</span><span style="color:#E06C75">()) {</span></span>
<span class="line"><span style="color:#61AFEF">      init</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先检查了一下是否在JVM启动时启动了Attach Listener，或者是否已经启动过。如果没有，才继续执行，在/tmp目录下创建一个叫做.attach_pid%d的文件，然后执行AttachListener的init函数，这个函数就是用来创建Attach Listener线程的函数，上面已经提到多次并进行了分析。到此，我们知道Attach机制的奥秘所在，也就是Attach Listener线程的创建依靠Signal Dispatcher线程，Signal Dispatcher是用来处理信号的线程，当Signal Dispatcher线程接收到“SIGBREAK”信号之后，就会执行初始化Attach Listener的工作。</p>
<h3><a class="header-anchor" href="#运行时加载agent的实现"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8A%A0%E8%BD%BDagent%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> 运行时加载Agent的实现</h3>
<p>我们继续分析，到底是如何将一个Agent挂载到运行着的目标JVM上，在上文中提到了一段代码，用来进行运行时挂载Agent，可以参考上文中展示的关于“attachAgentToTargetJvm”方法的代码。这个方法里面的关键是调用VirtualMachine的attach方法进行Agent挂载的功能。下面我们就来分析一下VirtualMachine的attach方法具体是怎么实现的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> VirtualMachine</span><span style="color:#61AFEF"> attach</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> var0) throws AttachNotSupportedException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IOException {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (var0 </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"id cannot be null"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        List</span><span style="color:#E06C75"> var1 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> AttachProvider</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">providers</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">var1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AttachNotSupportedException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"no providers installed"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            AttachNotSupportedException</span><span style="color:#E06C75"> var2 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            Iterator</span><span style="color:#E06C75"> var3 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> var1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">var3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                AttachProvider</span><span style="color:#E06C75"> var4 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (AttachProvider)</span><span style="color:#E5C07B">var3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E5C07B"> var4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">attachVirtualMachine</span><span style="color:#ABB2BF">(var0);</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">AttachNotSupportedException</span><span style="color:#E06C75;font-style:italic"> var6</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                    var2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> var6</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#E06C75"> var2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法通过attachVirtualMachine方法进行attach操作，在MacOS系统中，AttachProvider的实现类是BsdAttachProvider。我们来看一下BsdAttachProvider的attachVirtualMachine方法是如何实现的：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> VirtualMachine</span><span style="color:#61AFEF"> attachVirtualMachine</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> var1) throws AttachNotSupportedException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IOException {</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkAttachPermission</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">testAttachable</span><span style="color:#ABB2BF">(var1);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BsdVirtualMachine</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> var1)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#61AFEF">BsdVirtualMachine</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">AttachProvider</span><span style="color:#E06C75"> var1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> var2) throws AttachNotSupportedException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> IOException {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> var3 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(var2);</span></span>
<span class="line"><span style="color:#E5C07B">    this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">path</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">findSocketFile</span><span style="color:#ABB2BF">(var3);</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">path</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> var4 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(tmpdir</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> ".attach_pid"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> var3)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        createAttachFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">var4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPath</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">            sendQuitTo</span><span style="color:#E06C75">(var3)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> var5 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> var6 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 200L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> var8 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">attachTimeout</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75"> var6)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(var6);</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> var21</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                    ;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E5C07B">                this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">path</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">findSocketFile</span><span style="color:#ABB2BF">(var3);</span></span>
<span class="line"><span style="color:#ABB2BF">                ++</span><span style="color:#E06C75">var5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">while</span><span style="color:#E06C75">(var5 </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> var8 </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">path</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            var4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">delete</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> var24 </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> socket</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    connect</span><span style="color:#E06C75">(var24</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">path</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> findSocketFile</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> var1) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> var2 </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> ".java_pid"</span><span style="color:#56B6C2"> +</span><span style="color:#E06C75"> var1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    File</span><span style="color:#E06C75"> var3 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#E06C75">(tmpdir</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> var2)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> var3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">exists</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> var3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getPath</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> :</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>findSocketFile方法用来查询目标JVM上是否已经启动了Attach Listener，它通过检查”tmp/“目录下是否存在java_pid{pid}来进行实现。如果已经存在了，则说明Attach机制已经准备就绪，可以接受客户端的命令了，这个时候客户端就可以通过connect连接到目标JVM进行命令的发送，比如可以发送“load”命令来加载Agent。如果java_pid{pid}文件还不存在，则需要通过sendQuitTo方法向目标JVM发送一个“SIGBREAK”信号，让它初始化Attach Listener线程并准备接受客户端连接。可以看到，发送了信号之后客户端会循环等待java_pid{pid}这个文件，之后再通过connect连接到目标JVM上。</p>
<h3><a class="header-anchor" href="#load命令的实现"><span></span></a><a href="#load%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> load命令的实现</h3>
<p>下面来分析一下，“load”命令在JVM层面的实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#E06C75"> jint </span><span style="color:#61AFEF">load_agent</span><span style="color:#E06C75">(AttachOperation</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> op</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> outputStream</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> out) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // get agent name and options</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> agent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> op</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">arg</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> absParam </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> op</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">arg</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  const</span><span style="color:#C678DD"> char</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> options </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> op</span><span style="color:#C678DD">-&gt;</span><span style="color:#61AFEF">arg</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // If loading a java agent then need to ensure that the java.instrument module is loaded</span></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">strcmp</span><span style="color:#E06C75">(agent</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "instrument"</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">    Thread</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> THREAD </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> Thread</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">current</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ResourceMark</span><span style="color:#61AFEF"> rm</span><span style="color:#E06C75">(THREAD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    HandleMark</span><span style="color:#61AFEF"> hm</span><span style="color:#E06C75">(THREAD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    JavaValue</span><span style="color:#61AFEF"> result</span><span style="color:#E06C75">(T_OBJECT)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Handle</span><span style="color:#E06C75"> h_module_name </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> java_lang_String</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">create_from_str</span><span style="color:#E06C75">(</span><span style="color:#98C379">"java.instrument"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> THREAD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    JavaCalls</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">call_static</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">result</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">SystemDictionary</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">module_Modules_klass</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">loadModule_name</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                           vmSymbols</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">loadModule_signature</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">h_module_name</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">THREAD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#E06C75"> JvmtiExport</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">load_agent_library</span><span style="color:#E06C75">(agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> absParam</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> options</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> out)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数先确保加载了java.instrument模块，之后真正执行Agent加载的函数是 load_agent_library ,这个函数的套路就是加载Agent动态链接库，如果是通过Java instrument API实现的Agent，则加载的是libinstrument动态链接库，然后通过libinstrument里面的代码实现运行agentmain方法的逻辑，这一部分内容和libinstrument实现premain方法运行的逻辑其实差不多，这里不再做分析。至此，我们对Java Agent技术已经有了一个全面而细致的了解。</p>
<h2><a class="header-anchor" href="#动态字节码修改的限制"><span></span></a><a href="#%E5%8A%A8%E6%80%81%E5%AD%97%E8%8A%82%E7%A0%81%E4%BF%AE%E6%94%B9%E7%9A%84%E9%99%90%E5%88%B6">#</a> 动态字节码修改的限制</h2>
<p>上文中已经详细分析了Agent技术的实现，我们使用Java Instrumentation API来完成动态类修改的功能，在Instrumentation接口中，通过addTransformer方法来增加一个类转换器，类转换器由类ClassFileTransformer接口实现。ClassFileTransformer接口中唯一的方法transform用于实现类转换，当类被加载的时候，就会调用transform方法，进行类转换。在运行时，我们可以通过Instrumentation的redefineClasses方法进行类重定义，在方法上有一段注释需要特别注意：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">     *</span><span style="color:#E5C07B"> The</span><span style="color:#E06C75"> redefinition may change method bodies</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> the constant pool and attributes</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#56B6C2">     *</span><span style="color:#E5C07B"> The</span><span style="color:#E06C75"> redefinition must not add</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> remove or rename fields or methods</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> change the</span></span>
<span class="line"><span style="color:#56B6C2">     *</span><span style="color:#E06C75"> signatures of methods</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> or change </span><span style="color:#E5C07B">inheritance</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">  These</span><span style="color:#E06C75"> restrictions maybe be</span></span>
<span class="line"><span style="color:#56B6C2">     *</span><span style="color:#E06C75"> lifted in future </span><span style="color:#E5C07B">versions</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">  The</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> file</span><span style="color:#E06C75"> bytes are not checked, verified and installed</span></span>
<span class="line"><span style="color:#E06C75">     * until after the transformations have been applied, if the resultant bytes are in</span></span>
<span class="line"><span style="color:#E06C75">     * error this method will throw an exception.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面提到，我们不可以增加、删除或者重命名字段和方法，改变方法的签名或者类的继承关系。认识到这一点很重要，当我们通过ASM获取到增强的字节码之后，如果增强后的字节码没有遵守这些规则，那么调用redefineClasses方法来进行类的重定义就会失败。那redefineClasses方法具体是怎么实现类的重定义的呢? 它对运行时的JVM会造成什么样的影响呢? 下面来分析redefineClasses的实现细节。</p>
<h2><a class="header-anchor" href="#重定义类字节码的实现细节"><span></span></a><a href="#%E9%87%8D%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82">#</a> 重定义类字节码的实现细节</h2>
<p>上文中我们提到，libinstrument动态链接库中，JPLISAgent不仅实现了Agent入口代码执行的路由，而且还是Java代码与JVMTI之间的一道桥梁。我们在Java代码中调用Java Instrumentation API的redefineClasses，其实会调用libinstrument中的相关代码，我们来分析一下这条路径。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> redefineClasses</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ClassDefinition</span><span style="color:#ABB2BF">...</span><span style="color:#E5C07B"> var1</span><span style="color:#E06C75">) throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isRedefineClassesSupported</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> UnsupportedOperationException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"redefineClasses is not supported in this environment"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (var1 </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"null passed as 'definitions' in redefineClasses"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> var2 </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> var2 </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> var1</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">var2) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (var1[var2] </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"element of 'definitions' is null in redefineClasses"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">var1</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">redefineClasses0</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mNativeAgent</span><span style="color:#ABB2BF">, var1);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> redefineClasses0</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> var1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> ClassDefinition</span><span style="color:#E06C75">[] var3) throws ClassNotFoundException</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是InstrumentationImpl中的redefineClasses实现，该方法的具体实现依赖一个Native方法redefineClasses()，我们可以在libinstrument中找到这个Native方法的实现：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">JNIEXPORT</span><span style="color:#C678DD"> void</span><span style="color:#E5C07B"> JNICALL</span><span style="color:#E5C07B"> Java_sun_instrument_InstrumentationImpl_redefineClasses0</span></span>
<span class="line"><span style="color:#E06C75">  (JNIEnv </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject implThis</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobjectArray classDefinitions) {</span></span>
<span class="line"><span style="color:#61AFEF">    redefineClasses</span><span style="color:#E06C75">(jnienv</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> (JPLISAgent</span><span style="color:#56B6C2">*</span><span style="color:#E06C75">)(intptr_t)agent</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> classDefinitions)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redefineClasses这个函数的实现比较复杂，代码很长。下面是一段关键的代码片段：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以看到，其实是调用了JVMTI的RetransformClasses函数来完成类的重定义细节。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// class_count - pre-checked to be greater than or equal to 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// class_definitions - pre-checked for NULL</span></span>
<span class="line"><span style="color:#E06C75">jvmtiError JvmtiEnv</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">RedefineClasses</span><span style="color:#E06C75">(jint class_count</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> const</span><span style="color:#E06C75"> jvmtiClassDefinition</span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> class_definitions) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//TODO: add locking</span></span>
<span class="line"><span style="color:#E5C07B">  VM_RedefineClasses</span><span style="color:#61AFEF"> op</span><span style="color:#E06C75">(class_count</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> class_definitions</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jvmti_class_load_kind_redefine)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  VMThread</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">execute</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">op)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">op</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">check_error</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#7F848E;font-style:italic">/* end RedefineClasses */</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重定义类的请求会被JVM包装成一个VM_RedefineClasses类型的VM_Operation，VM_Operation是JVM内部的一些操作的基类，包括GC操作等。VM_Operation由VMThread来执行，新的VM_Operation操作会被添加到VMThread的运行队列中去，VMThread会不断从队列里面拉取VM_Operation并调用其doit等函数执行具体的操作。VM_RedefineClasses函数的流程较为复杂，下面是VM_RedefineClasses的大致流程：</p>
<ul>
<li>加载新的字节码，合并常量池，并且对新的字节码进行校验工作</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // Load the caller's new class definition(s) into _scratch_classes.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // Constant pool merging work is done here as needed. Also calls</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // compare_and_normalize_class_versions() to verify the class</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // definition(s).</span></span>
<span class="line"><span style="color:#E06C75">  jvmtiError </span><span style="color:#61AFEF">load_new_class_versions</span><span style="color:#E06C75">(TRAPS)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>清除方法上的断点</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // Remove all breakpoints in methods of this class</span></span>
<span class="line"><span style="color:#E06C75">  JvmtiBreakpoints</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> jvmti_breakpoints </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> JvmtiCurrentBreakpoints</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">get_jvmti_breakpoints</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">  jvmti_breakpoints</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clearall_in_class_at_safepoint</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">the_class</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>JIT逆优化</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">  // Deoptimize all compiled code that depends on this class</span></span>
<span class="line"><span style="color:#61AFEF">  flush_dependent_code</span><span style="color:#E06C75">(the_class</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> THREAD)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>进行字节码替换工作，需要进行更新类itable/vtable等操作</li>
<li>进行类重定义通知</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">  SystemDictionary</span><span style="color:#C678DD">::</span><span style="color:#61AFEF">notice_modification</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>VM_RedefineClasses实现比较复杂的，详细实现可以参考 <a href="https://github.com/pandening/openjdk/blob/0301fc792ffd3c7b506ef78887af250e0e3ae09e/src/hotspot/share/prims/jvmtiEnv.cpp#L456" target="_blank" rel="noopener noreferrer">RedefineClasses在新窗口打开</a>的实现。</p>
<h2><a class="header-anchor" href="#java-debug-tool"><span></span></a><a href="#java-debug-tool">#</a> Java-debug-tool</h2>
<p>Java-debug-tool是一个使用Java Instrument API来实现的动态调试工具，它通过在目标JVM上启动一个TcpServer来和调试客户端通信。调试客户端通过命令行来发送调试命令给TcpServer，TcpServer中有专门用来处理命令的handler，handler处理完命令之后会将结果发送回客户端，客户端通过处理将调试结果展示出来。下面将详细介绍Java-debug-tool的整体设计和实现。</p>
<h3><a class="header-anchor" href="#java-debug-tool整体架构"><span></span></a><a href="#java-debug-tool%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84">#</a> Java-debug-tool整体架构</h3>
<p>Java-debug-tool包括一个Java Agent和一个用于处理调试命令的核心API，核心API通过一个自定义的类加载器加载进来，以保证目标JVM的类不会被污染。整体上Java-debug-tool的设计是一个Client-Server的架构，命令客户端需要完整的完成一个命令之后才能继续执行下一个调试命令。Java-debug-tool支持多人同时进行调试，下面是整体架构图：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>下面对每一层做简单介绍：</p>
<ul>
<li>交互层：负责将程序员的输入转换成调试交互协议，并且将调试信息呈现出来。</li>
<li>连接管理层：负责管理客户端连接，从连接中读调试协议数据并解码，对调试结果编码并将其写到连接中去；同时将那些超时未活动的连接关闭。</li>
<li>业务逻辑层：实现调试命令处理，包括命令分发、数据收集、数据处理等过程。</li>
<li>基础实现层：Java-debug-tool实现的底层依赖，通过Java Instrumentation提供的API进行类查找、类重定义等能力，Java Instrumentation底层依赖JVMTI来完成具体的功能。</li>
</ul>
<p>在Agent被挂载到目标JVM上之后，Java-debug-tool会安排一个Spy在目标JVM内活动，这个Spy负责将目标JVM内部的相关调试数据转移到命令处理模块，命令处理模块会处理这些数据，然后给客户端返回调试结果。命令处理模块会增强目标类的字节码来达到数据获取的目的，多个客户端可以共享一份增强过的字节码，无需重复增强。下面从Java-debug-tool的字节码增强方案、命令设计与实现等角度详细说明。</p>
<h3><a class="header-anchor" href="#java-debug-tool的字节码增强方案"><span></span></a><a href="#java-debug-tool%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA%E6%96%B9%E6%A1%88">#</a> Java-debug-tool的字节码增强方案</h3>
<p>Java-debug-tool使用字节码增强来获取到方法运行时的信息，比如方法入参、出参等，可以在不同的字节码位置进行增强，这种行为可以称为“插桩”，每个“桩”用于获取数据并将他转储出去。Java-debug-tool具备强大的插桩能力，不同的桩负责获取不同类别的数据，下面是Java-debug-tool目前所支持的“桩”：</p>
<ul>
<li>方法进入点：用于获取方法入参信息。</li>
<li>Fields获取点1：在方法执行前获取到对象的字段信息。</li>
<li>变量存储点：获取局部变量信息。</li>
<li>Fields获取点2：在方法退出前获取到对象的字段信息。</li>
<li>方法退出点：用于获取方法返回值。</li>
<li>抛出异常点：用于获取方法抛出的异常信息。</li>
<li>通过上面这些代码桩，Java-debug-tool可以收集到丰富的方法执行信息，经过处理可以返回更加可视化的调试结果。</li>
</ul>
<h4><a class="header-anchor" href="#字节码增强"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA">#</a> 字节码增强</h4>
<p>Java-debug-tool在实现上使用了ASM工具来进行字节码增强，并且每个插桩点都可以进行配置，如果不想要什么信息，则没必要进行对应的插桩操作。这种可配置的设计是非常有必要的，因为有时候我们仅仅是想要知道方法的入参和出参，但Java-debug-tool却给我们返回了所有的调试信息，这样我们就得在众多的输出中找到我们所关注的内容。如果可以进行配置，则除了入参点和出参点外其他的桩都不插，那么就可以快速看到我们想要的调试数据，这种设计的本质是为了让调试者更加专注。下面是Java-debug-tool的字节码增强工作方式：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如图所示，当调试者发出调试命令之后，Java-debug-tool会识别命令并判断是否需要进行字节码增强，如果命令需要增强字节码，则判断当前类+当前方法是否已经被增强过。上文已经提到，字节码替换是有一定损耗的，这种具有损耗的操作发生的次数越少越好，所以字节码替换操作会被记录起来，后续命令直接使用即可，不需要重复进行字节码增强，字节码增强还涉及多个调试客户端的协同工作问题，当一个客户端增强了一个类的字节码之后，这个客户端就锁定了该字节码，其他客户端变成只读，无法对该类进行字节码增强，只有当持有锁的客户端主动释放锁或者断开连接之后，其他客户端才能继续增强该类的字节码。</p>
<p>字节码增强模块收到字节码增强请求之后，会判断每个增强点是否需要插桩，这个判断的根据就是上文提到的插桩配置，之后字节码增强模块会生成新的字节码，Java-debug-tool将执行字节码替换操作，之后就可以进行调试数据收集了。</p>
<p>经过字节码增强之后，原来的方法中会插入收集运行时数据的代码，这些代码在方法被调用的时候执行，获取到诸如方法入参、局部变量等信息，这些信息将传递给数据收集装置进行处理。数据收集的工作通过Advice完成，每个客户端同一时间只能注册一个Advice到Java-debug-tool调试模块上，多个客户端可以同时注册自己的Advice到调试模块上。Advice负责收集数据并进行判断，如果当前数据符合调试命令的要求，Java-debug-tool就会卸载这个Advice，Advice的数据就会被转移到Java-debug-tool的命令结果处理模块进行处理，并将结果发送到客户端。</p>
<h4><a class="header-anchor" href="#advice的工作方式"><span></span></a><a href="#advice%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">#</a> Advice的工作方式</h4>
<p>Advice是调试数据收集器，不同的调试策略会对应不同的Advice。Advice是工作在目标JVM的线程内部的，它需要轻量级和高效，意味着Advice不能做太过于复杂的事情，它的核心接口“match”用来判断本次收集到的调试数据是否满足调试需求。如果满足，那么Java-debug-tool就会将其卸载，否则会继续让他收集调试数据，这种“加载Advice” -&gt; “卸载Advice”的工作模式具备很好的灵活性。</p>
<p>关于Advice，需要说明的另外一点就是线程安全，因为它加载之后会运行在目标JVM的线程中，目标JVM的方法极有可能是多线程访问的，这也就是说，Advice需要有能力处理多个线程同时访问方法的能力，如果Advice处理不当，则可能会收集到杂乱无章的调试数据。下面的图片展示了Advice和Java-debug-tool调试分析模块、目标方法执行以及调试客户端等模块的关系。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>Advice的首次挂载由Java-debug-tool的命令处理器完成，当一次调试数据收集完成之后，调试数据处理模块会自动卸载Advice，然后进行判断，如果调试数据符合Advice的策略，则直接将数据交由数据处理模块进行处理，否则会清空调试数据，并再次将Advice挂载到目标方法上去，等待下一次调试数据。非首次挂载由调试数据处理模块进行，它借助Advice按需取数据，如果不符合需求，则继续挂载Advice来获取数据，否则对调试数据进行处理并返回给客户端。</p>
<h3><a class="header-anchor" href="#java-debug-tool的命令设计与实现"><span></span></a><a href="#java-debug-tool%E7%9A%84%E5%91%BD%E4%BB%A4%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0">#</a> Java-debug-tool的命令设计与实现</h3>
<h4><a class="header-anchor" href="#命令执行"><span></span></a><a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">#</a> 命令执行</h4>
<p>上文已经完整的描述了Java-debug-tool的设计以及核心技术方案，本小节将详细介绍Java-debug-tool的命令设计与实现。首先需要将一个调试命令的执行流程描述清楚，下面是一张用来表示命令请求处理流程的图片：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>上图简单的描述了Java-debug-tool的命令处理方式，客户端连接到服务端之后，会进行一些协议解析、协议认证、协议填充等工作，之后将进行命令分发。服务端如果发现客户端的命令不合法，则会立即返回错误信息，否则再进行命令处理。命令处理属于典型的三段式处理，前置命令处理、命令处理以及后置命令处理，同时会对命令处理过程中的异常信息进行捕获处理，三段式处理的好处是命令处理被拆成了多个阶段，多个阶段负责不同的职责。前置命令处理用来做一些命令权限控制的工作，并填充一些类似命令处理开始时间戳等信息，命令处理就是通过字节码增强，挂载Advice进行数据收集，再经过数据处理来产生命令结果的过程，后置处理则用来处理一些连接关闭、字节码解锁等事项。</p>
<p>Java-debug-tool允许客户端设置一个命令执行超时时间，超过这个时间则认为命令没有结果，如果客户端没有设置自己的超时时间，就使用默认的超时时间进行超时控制。Java-debug-tool通过设计了两阶段的超时检测机制来实现命令执行超时功能：首先，第一阶段超时触发，则Java-debug-tool会友好的警告命令处理模块处理时间已经超时，需要立即停止命令执行，这允许命令自己做一些现场清理工作，当然需要命令执行线程自己感知到这种超时警告；当第二阶段超时触发，则Java-debug-tool认为命令必须结束执行，会强行打断命令执行线程。超时机制的目的是为了不让命令执行太长时间，命令如果长时间没有收集到调试数据，则应该停止执行，并思考是否调试了一个错误的方法。当然，超时机制还可以定期清理那些因为未知原因断开连接的客户端持有的调试资源，比如字节码锁。</p>
<h4><a class="header-anchor" href="#获取方法执行视图"><span></span></a><a href="#%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%A7%86%E5%9B%BE">#</a> 获取方法执行视图</h4>
<p>Java-debug-tool通过下面的信息来向调试者呈现出一次方法执行的视图：</p>
<ul>
<li>正在调试的方法信息。</li>
<li>方法调用堆栈。</li>
<li>调试耗时，包括对目标JVM造成的STW时间。</li>
<li>方法入参，包括入参的类型及参数值。</li>
<li>方法的执行路径。</li>
<li>代码执行耗时。</li>
<li>局部变量信息。</li>
<li>方法返回结果。</li>
<li>方法抛出的异常。</li>
<li>对象字段值快照。</li>
</ul>
<p>下图展示了Java-debug-tool获取到正在运行的方法的执行视图的信息。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#java-debug-tool与同类产品对比分析"><span></span></a><a href="#java-debug-tool%E4%B8%8E%E5%90%8C%E7%B1%BB%E4%BA%A7%E5%93%81%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90">#</a> Java-debug-tool与同类产品对比分析</h3>
<p>Java-debug-tool的同类产品主要是greys，其他类似的工具大部分都是基于greys进行的二次开发，所以直接选择greys来和Java-debug-tool进行对比。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>本文详细剖析了Java动态调试关键技术的实现细节，并介绍了我们基于Java动态调试技术结合实际故障排查场景进行的一点探索实践；动态调试技术为研发人员进行线上问题排查提供了一种新的思路，我们基于动态调试技术解决了传统断点调试存在的问题，使得可以将断点调试这种技术应用在线上，以线下调试的思维来进行线上调试，提高问题排查效率。</p>
<h2><a class="header-anchor" href="#参考文献"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">#</a> 参考文献</h2>
<ul>
<li><a href="https://asm.ow2.io/asm4-guide.pdf" target="_blank" rel="noopener noreferrer">ASM 4 guide在新窗口打开</a></li>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html" target="_blank" rel="noopener noreferrer">Java Virtual Machine Specification在新窗口打开</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html" target="_blank" rel="noopener noreferrer">JVM Tool Interface在新窗口打开</a></li>
<li><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener noreferrer">alibaba arthas在新窗口打开</a></li>
<li><a href="https://github.com/pandening/openjdk" target="_blank" rel="noopener noreferrer">openjdk</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-agent-1.png" type="image/png"/>
    </item>
    <item>
      <title>AIO 异步IO详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/AIO%20%E5%BC%82%E6%AD%A5IO%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/AIO%20%E5%BC%82%E6%AD%A5IO%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">AIO 异步IO详解</source>
      <description>本文主要对异步IO和Java中对AIO的支持详解。 AIO 异步IO详解 异步IO JAVA对AIO的支持 JAVA AIO框架简析 代码实例 要点讲解 还有改进可能 为什么还有Netty 参考文章 # 异步IO 上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对异步IO和Java中对AIO的支持详解。</p>
</blockquote>
<ul>
<li>AIO 异步IO详解
<ul>
<li><a href="#%E5%BC%82%E6%AD%A5io">异步IO</a></li>
<li>JAVA对AIO的支持
<ul>
<li><a href="#java-aio%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90">JAVA AIO框架简析</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B">代码实例</a></li>
<li><a href="#%E8%A6%81%E7%82%B9%E8%AE%B2%E8%A7%A3">要点讲解</a></li>
<li><a href="#%E8%BF%98%E6%9C%89%E6%94%B9%E8%BF%9B%E5%8F%AF%E8%83%BD">还有改进可能</a></li>
</ul>
</li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%9C%89netty">为什么还有Netty</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#异步io"><span></span></a><a href="#%E5%BC%82%E6%AD%A5io">#</a> 异步IO</h2>
<p>上面两篇文章中，我们分别讲解了阻塞式同步IO、非阻塞式同步IO、多路复用IO 这三种IO模型，以及JAVA对于这三种IO模型的支持。重点说明了IO模型是由操作系统提供支持，且这三种IO模型都是同步IO，都是采用的“应用程序不询问我，我绝不会主动通知”的方式。</p>
<p>异步IO则是采用“订阅-通知”模式: 即应用程序向操作系统注册IO监听，然后继续做自己的事情。当操作系统发生IO事件，并且准备好数据后，在主动通知应用程序，触发相应的函数:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>和同步IO一样，异步IO也是由操作系统进行支持的。微软的windows系统提供了一种异步IO技术: IOCP(I/O Completion Port，I/O完成端口)；</p>
<p>Linux下由于没有这种异步IO技术，所以使用的是epoll(上文介绍过的一种多路复用IO技术的实现)对异步IO进行模拟。</p>
<h2><a class="header-anchor" href="#java对aio的支持"><span></span></a><a href="#java%E5%AF%B9aio%E7%9A%84%E6%94%AF%E6%8C%81">#</a> JAVA对AIO的支持</h2>
<h3><a class="header-anchor" href="#java-aio框架简析"><span></span></a><a href="#java-aio%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90">#</a> JAVA AIO框架简析</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这里通过这个结构分析要告诉各位读者JAVA AIO中类设计和操作系统的相关性</p>
<p>在文中我们一再说明JAVA AIO框架在windows下使用windows IOCP技术，在Linux下使用epoll多路复用IO技术模拟异步IO，这个从JAVA AIO框架的部分类设计上就可以看出来。例如框架中，在Windows下负责实现套接字通道的具体类是“sun.nio.ch.WindowsAsynchronousSocketChannelImpl”，其引用的IOCP类型文档注释如是:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">* Windows implementation of AsynchronousChannelGroup encapsulating an I/O </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">* completion port. </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">*/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您感兴趣，当然可以去看看全部完整代码(建议从“java.nio.channels.spi.AsynchronousChannelProvider”这个类看起)。</p>
<p>特别说明一下，请注意图中的“java.nio.channels.NetworkChannel”接口，这个接口同样被JAVA NIO框架实现了，如下图所示:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#代码实例"><span></span></a><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B">#</a> 代码实例</h3>
<p>下面，我们通过一个代码示例，来讲解JAVA AIO框架的具体使用，先上代码，在针对代码编写和运行中的要点进行讲解:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> test</span><span style="color:#FFFFFF">AS</span><span style="color:#C678DD">ocket</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.UnsupportedEncodingException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.net.InetSocketAddress</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.ByteBuffer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.AsynchronousChannelGroup</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.AsynchronousServerSocketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.AsynchronousSocketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.nio.channels.CompletionHandler</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.ExecutorService</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.Executors</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.apache.commons.logging.Log</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.apache.commons.logging.LogFactory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.apache.log4j.BasicConfigurator</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SocketServer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        BasicConfigurator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configure</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> waitObject </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> args</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> Exception</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 对于使用的线程池技术，我一定要多说几句</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 1、Executors是线程池生成工具，通过这个工具我们可以很轻松的生成“固定大小的线程池”、“调度池”、“可伸缩线程数量的池”。具体请看API Doc</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 2、当然您也可以通过ThreadPoolExecutor直接生成池。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 3、这个线程池是用来得到操作系统的“IO事件通知”的，不是用来进行“得到IO数据后的业务处理的”。要进行后者的操作，您可以再使用一个池(最好不要混用)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 4、您也可以不使用线程池(不推荐)，如果决定不使用线程池，直接AsynchronousServerSocketChannel.open()就行了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * */</span></span>
<span class="line"><span style="color:#E5C07B">        ExecutorService</span><span style="color:#E06C75"> threadPool</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newFixedThreadPool</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">20</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        AsynchronousChannelGroup</span><span style="color:#E06C75"> group</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> AsynchronousChannelGroup</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">withThreadPool</span><span style="color:#ABB2BF">(threadPool);</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> AsynchronousServerSocketChannel</span><span style="color:#E06C75"> serverSocket</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> AsynchronousServerSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(group);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //设置要监听的端口“0.0.0.0”代表本机所有IP设备</span></span>
<span class="line"><span style="color:#E5C07B">        serverSocket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"0.0.0.0"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">83</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //为AsynchronousServerSocketChannel注册监听，注意只是为AsynchronousServerSocketChannel通道注册监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //并不包括为 随后客户端和服务器 socketchannel通道注册的监听</span></span>
<span class="line"><span style="color:#E5C07B">        serverSocket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> ServerSocketChannelHandle</span><span style="color:#ABB2BF">(serverSocket));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //等待，以便观察现象(这个和要讲解的原理本身没有任何关系，只是为了保证守护线程不会退出)</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF">(waitObject) {</span></span>
<span class="line"><span style="color:#E5C07B">            waitObject</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wait</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 这个处理器类，专门用来响应 ServerSocketChannel 的事件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> ServerSocketChannelHandle</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> CompletionHandler</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">AsynchronousSocketChannel</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Void</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Log</span><span style="color:#E06C75"> LOGGER </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> LogFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLog</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ServerSocketChannelHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> AsynchronousServerSocketChannel</span><span style="color:#E06C75"> serverSocketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> serverSocketChannel</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ServerSocketChannelHandle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AsynchronousServerSocketChannel</span><span style="color:#E06C75;font-style:italic"> serverSocketChannel</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">serverSocketChannel</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> serverSocketChannel;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 注意，我们分别观察 this、socketChannel、attachment三个对象的id。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 来观察不同客户端连接到达时，这三个对象的变化，以说明ServerSocketChannelHandle的监听模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> completed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AsynchronousSocketChannel</span><span style="color:#E06C75;font-style:italic"> socketChannel</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Void</span><span style="color:#E06C75;font-style:italic"> attachment</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ServerSocketChannelHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"completed(AsynchronousSocketChannel result, ByteBuffer attachment)"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //每次都要重新注册监听(一次注册，一次响应)，但是由于“文件状态标示符”是独享的，所以不需要担心有“漏掉的”事件</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">serverSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(attachment, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //为这个新的socketChannel注册“read”事件，以便操作系统在收到数据并准备好后，主动通知应用程序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //在这里，由于我们要将这个客户端多次传输的数据累加起来一起处理，所以我们将一个stringbuffer对象作为一个“附件”依附在这个channel上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //</span></span>
<span class="line"><span style="color:#E5C07B">        ByteBuffer</span><span style="color:#E06C75"> readBuffer</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">50</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(readBuffer, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> StringBuffer</span><span style="color:#ABB2BF">(), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> SocketChannelReadHandle</span><span style="color:#ABB2BF">(socketChannel , readBuffer));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* (non-Javadoc)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * @see java.nio.channels.CompletionHandler#failed(java.lang.Throwable, java.lang.Object)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> failed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> exc</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Void</span><span style="color:#E06C75;font-style:italic"> attachment</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ServerSocketChannelHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"failed(Throwable exc, ByteBuffer attachment)"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 负责对每一个socketChannel的数据获取事件进行监听。&lt;p&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 重要的说明: 一个socketchannel都会有一个独立工作的SocketChannelReadHandle对象(CompletionHandler接口的实现)，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 其中又都将独享一个“文件状态标示”对象FileDescriptor、</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 一个独立的由程序员定义的Buffer缓存(这里我们使用的是ByteBuffer)、</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 所以不用担心在服务器端会出现“窜对象”这种情况，因为JAVA AIO框架已经帮您组织好了。&lt;p&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 但是最重要的，用于生成channel的对象: AsynchronousChannelProvider是单例模式，无论在哪组socketchannel，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 对是一个对象引用(但这没关系，因为您不会直接操作这个AsynchronousChannelProvider对象)。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> yinwenjie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> SocketChannelReadHandle</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> CompletionHandler</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> StringBuffer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Log</span><span style="color:#E06C75"> LOGGER </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> LogFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLog</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> AsynchronousSocketChannel</span><span style="color:#E06C75"> socketChannel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 专门用于进行这个通道数据缓存操作的ByteBuffer&lt;br&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 当然，您也可以作为CompletionHandler的attachment形式传入。&lt;br&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 这是，在这段示例代码中，attachment被我们用来记录所有传送过来的Stringbuffer了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#E06C75"> byteBuffer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> SocketChannelReadHandle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AsynchronousSocketChannel</span><span style="color:#E06C75;font-style:italic"> socketChannel</span><span style="color:#ABB2BF"> , </span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#E06C75;font-style:italic"> byteBuffer</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> socketChannel;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> byteBuffer;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* (non-Javadoc)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * @see java.nio.channels.CompletionHandler#completed(java.lang.Object, java.lang.Object)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> completed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#E06C75;font-style:italic"> result</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StringBuffer</span><span style="color:#E06C75;font-style:italic"> historyContext</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //如果条件成立，说明客户端主动终止了TCP套接字，这时服务端终止就可以了</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(result </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"completed(Integer result, Void attachment) : 然后我们来取出通道中准备好的值"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 实际上，由于我们从Integer result知道了本次channel从操作系统获取数据总长度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 所以实际上，我们不需要切换成“读模式”的，但是为了保证编码的规范性，还是建议进行切换。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 另外，无论是JAVA AIO框架还是JAVA NIO框架，都会出现“buffer的总容量”小于“当前从操作系统获取到的总数据量”，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * 但区别是，JAVA AIO框架中，我们不需要专门考虑处理这样的情况，因为JAVA AIO框架已经帮我们做了处理(做成了多次通知)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">         * */</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">contexts</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(contexts, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, result);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> nowContent</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(contexts , </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF"> , result , </span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            historyContext</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(nowContent);</span></span>
<span class="line"><span style="color:#E5C07B">            SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"================目前的传输结果: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> historyContext);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">UnsupportedEncodingException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //如果条件成立，说明还没有接收到“结束标记”</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">historyContext</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">indexOf</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"over"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //=========================================================================</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //          和上篇文章的代码相同，我们以“over”符号作为客户端完整信息的标记</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //=========================================================================</span></span>
<span class="line"><span style="color:#E5C07B">        SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"=======收到完整信息，开始处理业务========="</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        historyContext </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //还要继续监听(一次监听一次通知)</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">byteBuffer</span><span style="color:#ABB2BF">, historyContext, </span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* (non-Javadoc)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * @see java.nio.channels.CompletionHandler#failed(java.lang.Throwable, java.lang.Object)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> failed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> exc</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StringBuffer</span><span style="color:#E06C75;font-style:italic"> historyContext</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">info</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"=====发现客户端异常关闭，服务器将关闭TCP通道"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">socketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            SocketChannelReadHandle</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">LOGGER</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">error</span><span style="color:#ABB2BF">(e);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#要点讲解"><span></span></a><a href="#%E8%A6%81%E7%82%B9%E8%AE%B2%E8%A7%A3">#</a> 要点讲解</h3>
<p>注意在JAVA NIO框架中，我们说到了一个重要概念“selector”(选择器)。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”(选择器)了，改由channel通道直接到操作系统注册监听。</p>
<p>JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”(服务器监听通道)、“AsynchronousSocketChannel”(socket套接字通道)。但是无论哪种通道他们都有独立的fileDescriptor(文件标识符)、attachment(附件，附件可以使任意对象，类似“通道上下文”)，并被独立的SocketChannelReadHandle类实例引用。我们通过debug操作来看看它们的引用结构:</p>
<p>在测试过程中，我们启动了两个客户端(客户端用什么语言来写都行，用阻塞或者非阻塞方式也都行，只要是支持 TCP Socket套接字的就行，然后我们观察服务器端对这两个客户端通道的处理情况:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-3-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以看到，在服务器端分别为客户端1和客户端2创建的两个WindowsAsynchronousSocketChannelImpl对象为:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>客户端1: WindowsAsynchronousSocketChannelImpl: 760 | FileDescriptor: 762</p>
<p>客户端2: WindowsAsynchronousSocketChannelImpl: 792 | FileDescriptor: 797</p>
<p>接下来，我们让两个客户端发送信息到服务器端，并观察服务器端的处理情况。客户端1发来的消息和客户端2发来的消息，在服务器端的处理情况如下图所示:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>客户端1: WindowsAsynchronousSocketChannelImpl: 760 | FileDescriptor: 762 | SocketChannelReadHandle: 803 | HeapByteBuffer: 808</p>
<p>客户端2: WindowsAsynchronousSocketChannelImpl: 792 | FileDescriptor: 797 | SocketChannelReadHandle: 828 | HeapByteBuffer: 833</p>
<p>可以明显看到，服务器端处理每一个客户端通道所使用的SocketChannelReadHandle(处理器)对象都是独立的，并且所引用的SocketChannel对象都是独立的。</p>
<p>JAVA NIO和JAVA AIO框架，除了因为操作系统的实现不一样而去掉了Selector外，其他的重要概念都是存在的，例如上文中提到的Channel的概念，还有演示代码中使用的Buffer缓存方式。实际上JAVA NIO和JAVA AIO框架您可以看成是一套完整的“高并发IO处理”的实现。</p>
<h3><a class="header-anchor" href="#还有改进可能"><span></span></a><a href="#%E8%BF%98%E6%9C%89%E6%94%B9%E8%BF%9B%E5%8F%AF%E8%83%BD">#</a> 还有改进可能</h3>
<p>当然，以上代码是示例代码，目标是为了让您了解JAVA AIO框架的基本使用。所以它还有很多改造的空间，例如:</p>
<p>在生产环境下，我们需要记录这个通道上“用户的登录信息”。那么这个需求可以使用JAVA AIO中的“附件”功能进行实现。</p>
<p>记住JAVA AIO 和 JAVA NIO 框架都是要使用线程池的(当然您也可以不用)，线程池的使用原则，一定是只有业务处理部分才使用，使用后马上结束线程的执行(还回线程池或者消灭它)。JAVA AIO框架中还有一个线程池，是拿给“通知处理器”使用的，这是因为JAVA AIO框架是基于“订阅-通知”模型的，“订阅”操作可以由主线程完成，但是您总不能要求在应用程序中并发的“通知”操作也在主线程上完成吧_。</p>
<p>最好的改进方式，当然就是使用Netty或者Mina咯。</p>
<h2><a class="header-anchor" href="#为什么还有netty"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%9C%89netty">#</a> 为什么还有Netty</h2>
<ul>
<li>那么有的读者可能就会问，既然JAVA NIO / JAVA AIO已经实现了各主流操作系统的底层支持，那么为什么现在主流的JAVA NIO技术会是Netty和MINA呢? 答案很简单: 因为更好用，这里举几个方面的例子:</li>
<li>虽然JAVA NIO 和 JAVA AIO框架提供了 多路复用IO/异步IO的支持，但是并没有提供上层“信息格式”的良好封装。例如前两者并没有提供针对 Protocol Buffer、JSON这些信息格式的封装，但是Netty框架提供了这些数据格式封装(基于责任链模式的编码和解码功能)</li>
<li>要编写一个可靠的、易维护的、高性能的(注意它们的排序)NIO/AIO 服务器应用。除了框架本身要兼容实现各类操作系统的实现外。更重要的是它应该还要处理很多上层特有服务，例如: 客户端的权限、还有上面提到的信息格式封装、简单的数据读取。这些Netty框架都提供了响应的支持。</li>
<li>JAVA NIO框架存在一个poll/epoll bug: Selector doesn’t block on Selector.select(timeout)，不能block意味着CPU的使用率会变成100%(这是底层JNI的问题，上层要处理这个异常实际上也好办)。当然这个bug只有在Linux内核上才能重现。</li>
<li>这个问题在JDK 1.7版本中还没有被完全解决: <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719%E3%80%82%E8%99%BD%E7%84%B6Netty" target="_blank" rel="noopener noreferrer">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719。虽然Netty</a> 4.0中也是基于JAVA NIO框架进行封装的(上文中已经给出了Netty中NioServerSocketChannel类的介绍)，但是Netty已经将这个bug进行了处理。</li>
<li>其他原因，用过Netty后，您就可以自己进行比较了。</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-aio-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 之 BIO 详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E4%B9%8B%20BIO%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E4%B9%8B%20BIO%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 之 BIO 详解</source>
      <description>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。 IO 之 BIO 详解 几个重要概念 传统的BIO通信方式简介...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态。</p>
</blockquote>
<ul>
<li>IO 之 BIO 详解
<ul>
<li><a href="#%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5">几个重要概念</a></li>
<li>传统的BIO通信方式简介
<ul>
<li><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84bio%E7%9A%84%E9%97%AE%E9%A2%98">传统的BIO的问题</a></li>
<li>[多线程方式 - 伪异步方式](#多线程方式</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-bio-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 分类(传输，操作)</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%88%86%E7%B1%BB(%E4%BC%A0%E8%BE%93%EF%BC%8C%E6%93%8D%E4%BD%9C).html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%88%86%E7%B1%BB(%E4%BC%A0%E8%BE%93%EF%BC%8C%E6%93%8D%E4%BD%9C).html</guid>
      <source url="https://cactusli.net/rss.xml">IO 分类(传输，操作)</source>
      <description>本文主要从传输方式和数据操作两个方面分析Java IO的分类。 IO 分类(传输，操作) IO理解分类 - 从传输方式上 字节流 字符流 字节流和字符流的区别 字节转字符Input/OutputStreamReader/Writer IO理解分类 - 从数据操作上 文件(file) [数组(]) 管道操作 基本数据类型 缓冲操作 打印 对象序列化反序列...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要从<code>传输方式</code>和<code>数据操作</code>两个方面分析Java IO的分类。</p>
</blockquote>
<ul>
<li>IO 分类(传输，操作)
<ul>
<li>IO理解分类 - 从传输方式上
<ul>
<li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81">字节流</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E6%B5%81">字符流</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E5%92%8C%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB">字节流和字符流的区别</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E8%BD%AC%E5%AD%97%E7%AC%A6inputoutputstreamreaderwriter">字节转字符Input/OutputStreamReader/Writer</a></li>
</ul>
</li>
<li>IO理解分类 - 从数据操作上
<ul>
<li><a href="#%E6%96%87%E4%BB%B6file">文件(file)</a></li>
<li>[数组(<a href="#%E6%95%B0%E7%BB%84">])</a></li>
<li><a href="#%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C">管道操作</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本数据类型</a></li>
<li><a href="#%E7%BC%93%E5%86%B2%E6%93%8D%E4%BD%9C">缓冲操作</a></li>
<li><a href="#%E6%89%93%E5%8D%B0">打印</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">对象序列化反序列化</a></li>
<li><a href="#%E8%BD%AC%E6%8D%A2">转换</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#io理解分类-从传输方式上"><span></span></a><a href="#io%E7%90%86%E8%A7%A3%E5%88%86%E7%B1%BB-%E4%BB%8E%E4%BC%A0%E8%BE%93%E6%96%B9%E5%BC%8F%E4%B8%8A">#</a> IO理解分类 - 从传输方式上</h2>
<p>从数据传输方式或者说是运输方式角度看，可以将 IO 类分为:</p>
<ul>
<li>字节流</li>
<li>字符流</li>
</ul>
<p><code>字节</code>是个计算机看的，<code>字符</code>才是给人看的</p>
<h3><a class="header-anchor" href="#字节流"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E6%B5%81">#</a> 字节流</h3>
<p>(整体结构如下，部分派生类有缺失)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-1-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#字符流"><span></span></a><a href="#%E5%AD%97%E7%AC%A6%E6%B5%81">#</a> 字符流</h3>
<p>(整体结构如下，部分派生类有缺失)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-2-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#字节流和字符流的区别"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E5%92%8C%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> 字节流和字符流的区别</h3>
<ul>
<li>字节流读取单个字节，字符流读取单个字符(一个字符根据编码的不同，对应的字节也不同，如 UTF-8 编码中文汉字是 3 个字节，GBK编码中文汉字是 2 个字节。)</li>
<li>字节流用来处理二进制文件(图片、MP3、视频文件)，字符流用来处理文本文件(可以看做是特殊的二进制文件，使用了某种编码，人可以阅读)。</li>
</ul>
<blockquote>
<p>简而言之，字节是给计算机看的，字符才是给人看的。</p>
</blockquote>
<h3><a class="header-anchor" href="#字节转字符input-outputstreamreader-writer"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E8%BD%AC%E5%AD%97%E7%AC%A6input-outputstreamreader-writer">#</a> 字节转字符Input/OutputStreamReader/Writer</h3>
<p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</p>
<p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。</p>
<ul>
<li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li>
<li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li>
<li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节。</li>
</ul>
<p>UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端。</p>
<p>Java 使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#io理解分类-从数据操作上"><span></span></a><a href="#io%E7%90%86%E8%A7%A3%E5%88%86%E7%B1%BB-%E4%BB%8E%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E4%B8%8A">#</a> IO理解分类 - 从数据操作上</h2>
<p>从数据来源或者说是操作对象角度看，IO 类可以分为:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#文件-file"><span></span></a><a href="#%E6%96%87%E4%BB%B6-file">#</a> 文件(file)</h3>
<p>FileInputStream、FileOutputStream、FileReader、FileWriter</p>
<h3><a class="header-anchor" href="#数组"><span></span></a><a href="#%E6%95%B0%E7%BB%84">#</a> 数组([])</h3>
<ul>
<li>字节数组(byte[]): ByteArrayInputStream、ByteArrayOutputStream</li>
<li>字符数组(char[]): CharArrayReader、CharArrayWriter</li>
</ul>
<h3><a class="header-anchor" href="#管道操作"><span></span></a><a href="#%E7%AE%A1%E9%81%93%E6%93%8D%E4%BD%9C">#</a> 管道操作</h3>
<p>PipedInputStream、PipedOutputStream、PipedReader、PipedWriter</p>
<h3><a class="header-anchor" href="#基本数据类型"><span></span></a><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">#</a> 基本数据类型</h3>
<p>DataInputStream、DataOutputStream</p>
<h3><a class="header-anchor" href="#缓冲操作"><span></span></a><a href="#%E7%BC%93%E5%86%B2%E6%93%8D%E4%BD%9C">#</a> 缓冲操作</h3>
<p>BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</p>
<h3><a class="header-anchor" href="#打印"><span></span></a><a href="#%E6%89%93%E5%8D%B0">#</a> 打印</h3>
<p>PrintStream、PrintWriter</p>
<h3><a class="header-anchor" href="#对象序列化反序列化"><span></span></a><a href="#%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">#</a> 对象序列化反序列化</h3>
<p>ObjectInputStream、ObjectOutputStream</p>
<h3><a class="header-anchor" href="#转换"><span></span></a><a href="#%E8%BD%AC%E6%8D%A2">#</a> 转换</h3>
<p>InputStreamReader、OutputStreamWriter</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-category-1-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 常见类使用</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%B8%B8%E8%A7%81%E7%B1%BB%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%B8%B8%E8%A7%81%E7%B1%BB%E4%BD%BF%E7%94%A8.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 常见类使用</source>
      <description>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。 IO 常见类使用 IO常见类的使用 File相关 字节流相关 实现逐行输出文本文件的内容 序列化 &amp; Serializable &amp; transient Java 中的网络支持: InetAddress URL Sockets Datagram 常见问题 参...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。</p>
</blockquote>
<ul>
<li>IO 常见类使用
<ul>
<li>IO常见类的使用
<ul>
<li><a href="#file%E7%9B%B8%E5%85%B3">File相关</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3">字节流相关</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">实现逐行输出文本文件的内容</a></li>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96--serializable--transient">序列化 &amp; Serializable &amp; transient</a></li>
<li>Java 中的网络支持:
<ul>
<li><a href="#inetaddress">InetAddress</a></li>
<li><a href="#url">URL</a></li>
<li><a href="#sockets">Sockets</a></li>
<li><a href="#datagram">Datagram</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#io常见类的使用"><span></span></a><a href="#io%E5%B8%B8%E8%A7%81%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8">#</a> IO常见类的使用</h2>
<p>Java 的 I/O 大概可以分成以下几类:</p>
<ul>
<li>磁盘操作: File</li>
<li>字节操作: InputStream 和 OutputStream</li>
<li>字符操作: Reader 和 Writer</li>
<li>对象操作: Serializable</li>
<li>网络操作: Socket</li>
</ul>
<h3><a class="header-anchor" href="#file相关"><span></span></a><a href="#file%E7%9B%B8%E5%85%B3">#</a> File相关</h3>
<p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。</p>
<p>递归地列出一个目录下所有文件:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> listAllFiles</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">File</span><span style="color:#E06C75"> dir) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (dir </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">exists</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isFile</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">File</span><span style="color:#E06C75"> file </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> dir</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">listFiles</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">        listAllFiles</span><span style="color:#E06C75">(file)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#字节流相关"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3">#</a> 字节流相关</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> copyFile</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> src</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> dist) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> in </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(src)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    FileOutputStream</span><span style="color:#E06C75"> out </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#E06C75">(dist)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    byte</span><span style="color:#E06C75">[] buffer </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[</span><span style="color:#D19A66">20</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 1024</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // read() 最多读取 buffer.length 个字节</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回的是实际读取的个数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回 -1 的时候表示读到 eof，即文件尾</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">)</span><span style="color:#56B6C2"> !=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#实现逐行输出文本文件的内容"><span></span></a><a href="#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">#</a> 实现逐行输出文本文件的内容</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFileContent</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> filePath) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    FileReader</span><span style="color:#E06C75"> fileReader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileReader</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> bufferedReader </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(fileReader)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> line</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((line </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> bufferedReader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(line);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在调用 BufferedReader 的 close() 方法时会去调用 Reader 的 close() 方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 因此只要一个 close() 调用即可</span></span>
<span class="line"><span style="color:#E5C07B">    bufferedReader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#序列化-serializable-transient"><span></span></a><a href="#%E5%BA%8F%E5%88%97%E5%8C%96-serializable-transient">#</a> 序列化 &amp; Serializable &amp; transient</h3>
<p>序列化就是将一个对象转换成字节序列，方便存储和传输。</p>
<ul>
<li>序列化: ObjectOutputStream.writeObject()</li>
<li>反序列化: ObjectInputStream.readObject()</li>
</ul>
<p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p>
<p><strong>Serializable</strong></p>
<p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> ClassNotFoundException {</span></span>
<span class="line"><span style="color:#E5C07B">    A</span><span style="color:#E06C75"> a1 </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> A</span><span style="color:#E06C75">(</span><span style="color:#D19A66">123</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "abc"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> objectFile </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "file/a1"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    ObjectOutputStream</span><span style="color:#E06C75"> objectOutputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ObjectOutputStream</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#E06C75">(objectFile))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    objectOutputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeObject</span><span style="color:#ABB2BF">(a1);</span></span>
<span class="line"><span style="color:#E5C07B">    objectOutputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    ObjectInputStream</span><span style="color:#E06C75"> objectInputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ObjectInputStream</span><span style="color:#E06C75">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(objectFile))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    A</span><span style="color:#E06C75"> a2 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (A) </span><span style="color:#E5C07B">objectInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readObject</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    objectInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(a2);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> A</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> y</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">    A</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">x</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">y</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> y;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "x = "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> x </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "  "</span><span style="color:#56B6C2"> +</span><span style="color:#98C379"> "y = "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> y;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>transient</strong></p>
<p>transient 关键字可以使一些属性不会被序列化。</p>
<p>ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] elementData</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#java-中的网络支持"><span></span></a><a href="#java-%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%AF%E6%8C%81">#</a> Java 中的网络支持:</h3>
<ul>
<li>InetAddress: 用于表示网络上的硬件资源，即 IP 地址；</li>
<li>URL: 统一资源定位符；</li>
<li>Sockets: 使用 TCP 协议实现网络通信；</li>
<li>Datagram: 使用 UDP 协议实现网络通信。</li>
</ul>
<h4><a class="header-anchor" href="#inetaddress"><span></span></a><a href="#inetaddress">#</a> InetAddress</h4>
<p>没有公有的构造函数，只能通过静态方法来创建实例。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">InetAddress</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByName</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF"> host);</span></span>
<span class="line"><span style="color:#E5C07B">InetAddress</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByAddress</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] address);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#url"><span></span></a><a href="#url">#</a> URL</h4>
<p>可以直接从 URL 中读取字节流数据。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    URL</span><span style="color:#E06C75"> url </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> URL</span><span style="color:#E06C75">(</span><span style="color:#98C379">"http://www.baidu.com"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 字节流 */</span></span>
<span class="line"><span style="color:#E5C07B">    InputStream</span><span style="color:#E06C75"> is </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> url</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">openStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 字符流 */</span></span>
<span class="line"><span style="color:#E5C07B">    InputStreamReader</span><span style="color:#E06C75"> isr </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InputStreamReader</span><span style="color:#E06C75">(is</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "utf-8"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 提供缓存功能 */</span></span>
<span class="line"><span style="color:#E5C07B">    BufferedReader</span><span style="color:#E06C75"> br </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedReader</span><span style="color:#E06C75">(isr)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> line</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> ((line </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> br</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(line);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">    br</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#sockets"><span></span></a><a href="#sockets">#</a> Sockets</h4>
<ul>
<li>ServerSocket: 服务器端类</li>
<li>Socket: 客户端类</li>
<li>服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h4><a class="header-anchor" href="#datagram"><span></span></a><a href="#datagram">#</a> Datagram</h4>
<ul>
<li>DatagramSocket: 通信类</li>
<li>DatagramPacket: 数据包类</li>
</ul>
<h2><a class="header-anchor" href="#常见问题"><span></span></a><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">#</a> 常见问题</h2>
<ul>
<li>Java 字节读取流的read方法返回int的原因</li>
</ul>
<p><a href="https://blog.csdn.net/congwiny/article/details/18922847" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/congwiny/article/details/18922847</a></p>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>IO 模型 Unix IO 模型</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%A8%A1%E5%9E%8B%20Unix%20IO%20%E6%A8%A1%E5%9E%8B.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%A8%A1%E5%9E%8B%20Unix%20IO%20%E6%A8%A1%E5%9E%8B.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 模型 Unix IO 模型</source>
      <description>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。 IO 模型 Unix IO 模型 Unix IO 模型简介 阻塞式 I/O 非阻塞式 I/O I/O 复用 信号驱动 I/O 异步 I/O I/O 模型比较 同步 I/O 与异步 I/O 五大 I/O 模型比较 IO多路复用 IO多路复用工作模式 ...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫。</p>
</blockquote>
<ul>
<li>IO 模型 Unix IO 模型
<ul>
<li>Unix IO 模型简介
<ul>
<li><a href="#%E9%98%BB%E5%A1%9E%E5%BC%8F-io">阻塞式 I/O</a></li>
<li><a href="#%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F-io">非阻塞式 I/O</a></li>
<li><a href="#io-%E5%A4%8D%E7%94%A8">I/O 复用</a></li>
<li><a href="#%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8-io">信号驱动 I/O</a></li>
<li><a href="#%E5%BC%82%E6%AD%A5-io">异步 I/O</a></li>
</ul>
</li>
<li>I/O 模型比较
<ul>
<li><a href="#%E5%90%8C%E6%AD%A5-io-%E4%B8%8E%E5%BC%82%E6%AD%A5-io">同步 I/O 与异步 I/O</a></li>
<li><a href="#%E4%BA%94%E5%A4%A7-io-%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83">五大 I/O 模型比较</a></li>
</ul>
</li>
<li>IO多路复用
<ul>
<li>IO多路复用工作模式
<ul>
<li><a href="#1-lt-%E6%A8%A1%E5%BC%8F">1. LT 模式</a></li>
<li><a href="#2-et-%E6%A8%A1%E5%BC%8F">2. ET 模式</a></li>
</ul>
</li>
<li>应用场景
<ul>
<li><a href="#1-select-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">1. select 应用场景</a></li>
<li><a href="#2-poll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">2. poll 应用场景</a></li>
<li><a href="#3-epoll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">3. epoll 应用场景</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#unix-io-模型简介"><span></span></a><a href="#unix-io-%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B">#</a> Unix IO 模型简介</h2>
<p>一个输入操作通常包括两个阶段:</p>
<ul>
<li>等待数据准备好</li>
<li>从内核向进程复制数据</li>
</ul>
<p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p>
<p>Unix 下有五种 I/O 模型:</p>
<ul>
<li>阻塞式 I/O</li>
<li>非阻塞式 I/O</li>
<li>I/O 复用(select 和 poll)</li>
<li>信号驱动式 I/O(SIGIO)</li>
<li>异步 I/O(AIO)</li>
</ul>
<h3><a class="header-anchor" href="#阻塞式-i-o"><span></span></a><a href="#%E9%98%BB%E5%A1%9E%E5%BC%8F-i-o">#</a> 阻塞式 I/O</h3>
<p>应用进程被阻塞，直到数据复制到应用进程缓冲区中才返回。</p>
<p>应该注意到，在阻塞的过程中，其它程序还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其他程序还可以执行，因此不消耗 CPU 时间，这种模型的执行效率会比较高。</p>
<p>下图中，recvfrom 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">ssize_t</span><span style="color:#61AFEF"> recvfrom</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> sockfd</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> void</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">buf</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> flags</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> struct</span><span style="color:#E06C75"> sockaddr </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">src_addr</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> socklen_t</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">addrlen</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492928416812_4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-0.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#非阻塞式-i-o"><span></span></a><a href="#%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F-i-o">#</a> 非阻塞式 I/O</h3>
<p>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询(polling)。</p>
<p>由于 CPU 要处理更多的系统调用，因此这种模型是比较低效的。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492929000361_5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#i-o-复用"><span></span></a><a href="#i-o-%E5%A4%8D%E7%94%A8">#</a> I/O 复用</h3>
<p>使用 select 或者 poll 等待数据，并且可以等待多个套接字中的任何一个变为可读，这一过程会被阻塞，当某一个套接字可读时返回。之后再使用 recvfrom 把数据从内核复制到进程中。</p>
<p>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为 Event Driven I/O，即事件驱动 I/O。</p>
<p>如果一个 Web 服务器没有 I/O 复用，那么每一个 Socket 连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。并且相比于多进程和多线程技术，I/O 复用不需要进程线程创建和切换的开销，系统开销更小。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492929444818_6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#信号驱动-i-o"><span></span></a><a href="#%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8-i-o">#</a> 信号驱动 I/O</h3>
<p>应用进程使用 sigaction 系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送 SIGIO 信号，应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。</p>
<p>相比于非阻塞式 I/O 的轮询方式，信号驱动 I/O 的 CPU 利用率更高。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492929553651_7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#异步-i-o"><span></span></a><a href="#%E5%BC%82%E6%AD%A5-i-o">#</a> 异步 I/O</h3>
<p>进行 aio_read 系统调用会立即返回，应用进程继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p>
<p>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492930243286_8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>或者网友提供的</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-model-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#i-o-模型比较"><span></span></a><a href="#i-o-%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83">#</a> I/O 模型比较</h2>
<h3><a class="header-anchor" href="#同步-i-o-与异步-i-o"><span></span></a><a href="#%E5%90%8C%E6%AD%A5-i-o-%E4%B8%8E%E5%BC%82%E6%AD%A5-i-o">#</a> 同步 I/O 与异步 I/O</h3>
<ul>
<li>同步 I/O: 应用进程在调用 recvfrom 操作时会阻塞。</li>
<li>异步 I/O: 不会阻塞。</li>
</ul>
<p>阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O 都是同步 I/O，虽然非阻塞式 I/O 和信号驱动 I/O 在等待数据阶段不会阻塞，但是在之后的将数据从内核复制到应用进程这个操作会阻塞。</p>
<h3><a class="header-anchor" href="#五大-i-o-模型比较"><span></span></a><a href="#%E4%BA%94%E5%A4%A7-i-o-%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83">#</a> 五大 I/O 模型比较</h3>
<p>前四种 I/O 模型的主要区别在于第一个阶段，而第二个阶段是一样的: 将数据从内核复制到应用进程过程中，应用进程会被阻塞。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1492928105791_3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#io多路复用"><span></span></a><a href="#io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">#</a> IO多路复用</h2>
<blockquote>
<p>IO多路复用最为重要，后面的文章<a href="">Java NIO - IO多路复用详解</a>将对IO多路复用，Ractor模型以及Java NIO对其的支持作详解。</p>
</blockquote>
<p>这里主要概要性的理解: IO多路复用工作模式和应用。</p>
<h3><a class="header-anchor" href="#io多路复用工作模式"><span></span></a><a href="#io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F">#</a> IO多路复用工作模式</h3>
<p>epoll 的描述符事件有两种触发模式: LT(level trigger)和 ET(edge trigger)。</p>
<h4><a class="header-anchor" href="#_1-lt-模式"><span></span></a><a href="#_1-lt-%E6%A8%A1%E5%BC%8F">#</a> 1. LT 模式</h4>
<p>当 epoll_wait() 检测到描述符事件到达时，将此事件通知进程，进程可以不立即处理该事件，下次调用 epoll_wait() 会再次通知进程。是默认的一种模式，并且同时支持 Blocking 和 No-Blocking。</p>
<h4><a class="header-anchor" href="#_2-et-模式"><span></span></a><a href="#_2-et-%E6%A8%A1%E5%BC%8F">#</a> 2. ET 模式</h4>
<p>和 LT 模式不同的是，通知之后进程必须立即处理事件，下次再调用 epoll_wait() 时不会再得到事件到达的通知。</p>
<p>很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。只支持 No-Blocking，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p>
<h3><a class="header-anchor" href="#应用场景"><span></span></a><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 应用场景</h3>
<p>很容易产生一种错觉认为只要用 epoll 就可以了，select 和 poll 都已经过时了，其实它们都有各自的使用场景。</p>
<h4><a class="header-anchor" href="#_1-select-应用场景"><span></span></a><a href="#_1-select-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 1. select 应用场景</h4>
<p>select 的 timeout 参数精度为 1ns，而 poll 和 epoll 为 1ms，因此 select 更加适用于实时要求更高的场景，比如核反应堆的控制。</p>
<p>select 可移植性更好，几乎被所有主流平台所支持。</p>
<h4><a class="header-anchor" href="#_2-poll-应用场景"><span></span></a><a href="#_2-poll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 2. poll 应用场景</h4>
<p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p>
<p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p>
<p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且epoll 的描述符存储在内核，不容易调试。</p>
<h4><a class="header-anchor" href="#_3-epoll-应用场景"><span></span></a><a href="#_3-epoll-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 3. epoll 应用场景</h4>
<p>只需要运行在 Linux 平台上，并且有非常大量的描述符需要同时轮询，而且这些连接最好是长连接。</p>
<h2><a class="header-anchor" href="#参考资料"><span></span></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a> 参考资料</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/1492928416812_4.png" type="image/png"/>
    </item>
    <item>
      <title>IO 源码解析之 InputStream</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20InputStream.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20InputStream.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 源码解析之 InputStream</source>
      <description>本文主要从JDK 11 源码角度分析InputStream。 IO 源码解析之 InputStream InputStream 类实现关系 InputStream 抽象类 源码实现 InputStream FilterInputStream ByteArrayInputStream BufferedInputStream 参考文章 # InputStr...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要从<strong>JDK 11 源码</strong>角度分析InputStream。</p>
</blockquote>
<ul>
<li>IO 源码解析之 InputStream
<ul>
<li><a href="#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">InputStream 类实现关系</a></li>
<li><a href="#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">InputStream 抽象类</a></li>
<li>源码实现
<ul>
<li><a href="#inputstream">InputStream</a></li>
<li><a href="#filterinputstream">FilterInputStream</a></li>
<li><a href="#bytearrayinputstream">ByteArrayInputStream</a></li>
<li><a href="#bufferedinputstream">BufferedInputStream</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#inputstream-类实现关系"><span></span></a><a href="#inputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">#</a> InputStream 类实现关系</h2>
<blockquote>
<p>InputStream是输入字节流，具体的实现类层次结构如下：</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#inputstream-抽象类"><span></span></a><a href="#inputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> InputStream 抽象类</h2>
<p>InputStream 类重要方法设计如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 读取下一个字节，如果没有则返回-1</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[]) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[]</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> off</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> len) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">readAllBytes</span><span style="color:#E06C75">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">readNBytes</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75">[] b</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> off</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> n) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 返回可读的字节数量</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 读取完，关闭流，释放资源</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> readlimit) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 重置读取位置为上次 mark 标记的位置</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 判断当前流是否支持标记流，和上面两个方法配套使用</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#E06C75">() </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75"> out)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#源码实现"><span></span></a><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</h2>
<blockquote>
<p>梳理部分InputStream及其实现类的源码分析。</p>
</blockquote>
<h3><a class="header-anchor" href="#inputstream"><span></span></a><a href="#inputstream">#</a> InputStream</h3>
<p>InputStream抽象类源码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> InputStream</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Closeable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当使用skip方法时，最大的buffer size大小</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_SKIP_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2048</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 默认的buffer size</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> DEFAULT_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 8192</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK11中增加了一个nullInputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> InputStream</span><span style="color:#61AFEF"> nullInputStream</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InputStream</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> closed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF"> ()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readAllBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"len &lt; 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">requireNonNull</span><span style="color:#ABB2BF">(out);</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">                closed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        };</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取下一个字节的数据，如果没有则返回-1</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将读取到的数据放在 byte 数组中，该方法实际上调用read(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的; 此方法会一直阻止，直到输入数据可用、检测到stream结尾或引发异常为止。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 检查边界</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 读取下一个字节</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">// 读到stream末尾，则返回读取的字节数量为-1</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        b[off] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">)c;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // i用来记录取了多少个字节</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 循环读取</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#ABB2BF"> (; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len ; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF">                c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (c </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span><span style="color:#7F848E;font-style:italic">// 读到stream末尾，则break</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">                b[off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> i] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">)c;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> ee</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 返回读取到的字节个数</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> i;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK9新增：读取 InputStream 中的所有剩余字节，调用readNBytes(Integer.MAX_VALUE)方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readAllBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK11更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 边界检查</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"len &lt; 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[]&gt; </span><span style="color:#E06C75">bufs</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 缓存每次读取到的内容放到bufs，最后组装成result</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">result</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; </span><span style="color:#7F848E;font-style:italic">// 最后读取到的内容</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> total</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> remaining</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> len; </span><span style="color:#7F848E;font-style:italic">// 剩余字节长度</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buf</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(remaining, DEFAULT_BUFFER_SIZE)];</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nread</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 读取到结束为止，读取大小n可能大于或小于缓冲区大小</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(buf, nread,</span></span>
<span class="line"><span style="color:#E5C07B">                    Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> nread, remaining))) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                nread </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> n; </span></span>
<span class="line"><span style="color:#ABB2BF">                remaining </span><span style="color:#56B6C2">-=</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nread </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (MAX_BUFFER_SIZE </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> total </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> nread) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Required array size too large"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">                total </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> nread;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (result </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                    result </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> buf;</span></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (bufs </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">                        bufs </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#E5C07B">                        bufs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"><span style="color:#E5C07B">                    bufs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(buf);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果读不到内容（返回-1）或者没有剩余的字节，则跳出循环</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">while</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> remaining </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (bufs </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (result </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> result</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> ==</span><span style="color:#ABB2BF"> total </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#ABB2BF">                result </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(result, total);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 组装最后的result</span></span>
<span class="line"><span style="color:#ABB2BF">        result </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[total];</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> offset</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        remaining </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> total;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">b</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> bufs) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> count</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">, remaining);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, result, offset, count);</span></span>
<span class="line"><span style="color:#ABB2BF">            offset </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">            remaining </span><span style="color:#56B6C2">-=</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK9新增：从输入流读取请求的字节数并保存在byte数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> readNBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> count</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(b, off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> n, len </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> n);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (count </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            n </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> remaining</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> nr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(MAX_SKIP_BUFFER_SIZE, remaining);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">skipBuffer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (remaining </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            nr </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(skipBuffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, (</span><span style="color:#C678DD">int</span><span style="color:#ABB2BF">)</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(size, remaining));</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nr </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">            remaining </span><span style="color:#56B6C2">-=</span><span style="color:#ABB2BF"> nr;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> remaining;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 返回可读的字节数量</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取完，关闭流，释放资源</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 标记读取位置，下次还可以从这里开始读取，使用前要看当前流是否支持，可以使用 markSupport() 方法判断</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readlimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置读取位置为上次 mark 标记的位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"mark/reset not supported"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 判断当前流是否支持标记流，和上面两个方法配套使用。默认是false，由子类方法重写</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK9新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">requireNonNull</span><span style="color:#ABB2BF">(out, </span><span style="color:#98C379">"out"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> transferred</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[DEFAULT_BUFFER_SIZE];</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> read</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> ((read </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, DEFAULT_BUFFER_SIZE)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, read);</span></span>
<span class="line"><span style="color:#ABB2BF">            transferred </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> read;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> transferred;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>总结下JDK9的更新点</p>
</blockquote>
<p>类 java.io.InputStream 中增加了新的方法来读取和复制 InputStream 中包含的数据。</p>
<ul>
<li><code>readAllBytes</code>：读取 InputStream 中的所有剩余字节。</li>
<li><code>readNBytes</code>： 从 InputStream 中读取指定数量的字节到数组中。</li>
<li><code>transferTo</code>：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中 。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestInputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> InputStream</span><span style="color:#E06C75"> inputStream</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CONTENT </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Hello World"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Before</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setUp</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#56B6C2"> =</span></span>
<span class="line"><span style="color:#E5C07B">            TestInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getResourceAsStream</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/input.txt"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testReadAllBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> content</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readAllBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#61AFEF">        assertEquals</span><span style="color:#ABB2BF">(CONTENT, content);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testReadNBytes</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">data</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readNBytes</span><span style="color:#ABB2BF">(data, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        assertEquals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Hello"</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(data));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testTransferTo</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> ByteArrayOutputStream</span><span style="color:#E06C75"> outputStream</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferTo</span><span style="color:#ABB2BF">(outputStream);</span></span>
<span class="line"><span style="color:#61AFEF">        assertEquals</span><span style="color:#ABB2BF">(CONTENT, </span><span style="color:#E5C07B">outputStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong><code>read(byte[], int, int)</code> 和 <code>readNBytes(byte[], int, int)</code>看似是实现的相同功能，为何会设计readNBytes方法呢</strong>？</li>
</ul>
<p>这个问题可以参看<a href="https://stackoverflow.com/questions/53754387/java-read-vs-readnbytes-of-the-inputstream-instance" target="_blank" rel="noopener noreferrer">这里在新窗口打开</a></p>
<ol>
<li>read(byte[], int, int)是尝试读到最多len个bytes，但是<strong>读取到的内容长度可能是小于len</strong>的。</li>
<li>readNBytes(byte[], int, int) 会一直（while循环）查找直到stream尾为止</li>
</ol>
<p>举个例子：如果文本内容是<code>12345&lt;end&gt;</code>, read(s,0,10)是允许返回<code>123</code>的, 而readNbytes(s,0,10)会一直（while循环）查找直到stream尾为止，并返回<code>12345</code>.</p>
<blockquote>
<p>补充下JDK11为什么会增加nullInputStream方法的设计？即空对象模式</p>
</blockquote>
<ul>
<li><strong>空对象模式</strong></li>
</ul>
<p>举个例子：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyParser</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Parser</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Action</span><span style="color:#E06C75"> NO_ACTION </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Action</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomething</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">/* do nothing */</span><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#E06C75">  }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> Action</span><span style="color:#61AFEF"> findAction</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> userInput</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> ( </span><span style="color:#7F848E;font-style:italic">/* we can't find any actions */</span><span style="color:#ABB2BF"> ) {</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#ABB2BF"> NO_ACTION;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后便<strong>可以始终可以这么调用，而不用再判断空了</strong></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">ParserFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParser</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">findAction</span><span style="color:#ABB2BF">(someInput).</span><span style="color:#61AFEF">doSomething</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filterinputstream"><span></span></a><a href="#filterinputstream">#</a> FilterInputStream</h3>
<p>FilterInputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FilterInputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> InputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 被装饰的inputStream</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> InputStream</span><span style="color:#E06C75"> in</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，注入被装饰的inputStream</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#61AFEF"> FilterInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InputStream</span><span style="color:#E06C75;font-style:italic"> in</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">in</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 本质是调用被装饰的inputStream的方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">skip</span><span style="color:#ABB2BF">(n);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">available</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readlimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">mark</span><span style="color:#ABB2BF">(readlimit);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">reset</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> in</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">markSupported</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么被装饰的inputStream是volatile类型的</strong>？</p>
<p>请参看： <a href="">关键字: volatile详解</a></p>
<h3><a class="header-anchor" href="#bytearrayinputstream"><span></span></a><a href="#bytearrayinputstream">#</a> ByteArrayInputStream</h3>
<p>ByteArrayInputStream源码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ByteArrayInputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> InputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 内部保存的byte 数组</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取下一个字节的数组下标，byte[pos]就是read获取的下个字节</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> pos</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // mark的数组下标位置</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> mark </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 保存的有效byte的个数</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ByteArrayInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> buf</span><span style="color:#ABB2BF">[])</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">buf</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> buf;              </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pos</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">count</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造方法，带offset的</span></span>
<span class="line"><span style="color:#C678DD">     public</span><span style="color:#61AFEF"> ByteArrayInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> buf</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> offset</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> length</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {                </span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">buf</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> buf;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">pos</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> offset;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">count</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(offset </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> length, </span><span style="color:#E5C07B">buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">mark</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> offset;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 从流中读取下一个字节，没有读取到返回 -1</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> count) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> (buf[pos++] </span><span style="color:#56B6C2">&amp;</span><span style="color:#D19A66"> 0xff</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">:</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 从第 off 位置读取&lt;b&gt;最多(实际可能小于)&lt;/b&gt; len 长度字节的数据放到 byte 数组中，流是以 -1 来判断是否读取结束的</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 边界检查</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (b </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> ||</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> off) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> count) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> avail) {</span></span>
<span class="line"><span style="color:#ABB2BF">            len </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> avail;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 从buf拷贝到byte 数组b中</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(buf, pos, b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 跳过指定个数的字节不读取</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> k</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> k) {</span></span>
<span class="line"><span style="color:#ABB2BF">            k </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> ?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> k;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> k;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 还有稍稍byte在buffer中未读取，即总的count 减去 当前byte位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 支持mark所以返回true</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 在流中当前位置mark, readAheadLimit参数未使用    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readAheadLimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {            </span></span>
<span class="line"><span style="color:#ABB2BF">        mark </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置流，即回到mark的位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> mark;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭ByteArrayInputStream不会产生任何动作</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> { </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#bufferedinputstream"><span></span></a><a href="#bufferedinputstream">#</a> BufferedInputStream</h3>
<p>BufferedInputStream源码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BufferedInputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> FilterInputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 默认的buffer大小</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> DEFAULT_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 8192</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 内部保存在byte 数组中</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭流的方法可能是异步的，所以使用原子AtomicReferenceFieldUpdater提供CAS无锁方式（可以解决CAS的ABA问题）来保证</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> AtomicReferenceFieldUpdater</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">BufferedInputStream</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[]</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> bufUpdater </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E5C07B">        AtomicReferenceFieldUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newUpdater</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">BufferedInputStream</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,  </span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[].</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"buf"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 有效byte的大小</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当前位置</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> pos</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 最后一次，调用mark方法，标记的位置</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> markpos </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 该变量惟一入口就是mark(int readLimit)，好比调用方法mark(1024)，那么后面读取的数据若是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 超过了1024字节，那么这次mark就为无效标记，子类能够选择抛弃该mark标记，从头开始。不过具体实现</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 跟具体的子类有关，在BufferedInputStream中，会抛弃mark标记，从新将markpos赋值为-1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> marklimit</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取被装饰的stream</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> InputStream</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        InputStream</span><span style="color:#E06C75"> input</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (input </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> input;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 获取实际内部的buffer数组</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] getBufIfOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> buf;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (buffer </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> buffer;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，buffer是8kb</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InputStream</span><span style="color:#E06C75;font-style:italic"> in</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">(in, DEFAULT_BUFFER_SIZE);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，指定buffer大小</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedInputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">InputStream</span><span style="color:#E06C75;font-style:italic"> in</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(in);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (size </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Buffer size &lt;= 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 用更多的数据填充缓冲区,考虑到shuffling和其他处理标记的技巧，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * 假设它是由同步方法调用的。该方法还假设所有数据已经被读入，因此pos &gt;count。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fill</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    	// 得到内部缓冲区buffer</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getBufIfOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 没有mark的情况下， pos为0</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            pos </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;            </span><span style="color:#7F848E;font-style:italic">/* no mark: throw away the buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // pos &gt;= buffer.length  buffer已经被读取完了 </span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">)  </span><span style="color:#7F848E;font-style:italic">/* no room left in buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        	// markpos &gt; 0  有标记，标记处在缓存中间</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {  </span><span style="color:#7F848E;font-style:italic">/* can throw away early part of the buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            	// 把buffer中，markpos到pos的部分移动到0-sz处，pos设置为sz，markpos为0</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> sz</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> pos </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> markpos;</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(buffer, markpos, buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, sz);</span></span>
<span class="line"><span style="color:#ABB2BF">                pos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> sz;</span></span>
<span class="line"><span style="color:#ABB2BF">                markpos </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // markpos已经为0了，marklimit比buffer.length小，再读取buffer已经没有地方了</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#ABB2BF"> marklimit) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            	// 清空缓存，清空标记，markpos为-1，pos为0</span></span>
<span class="line"><span style="color:#ABB2BF">                markpos </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;   </span><span style="color:#7F848E;font-style:italic">/* buffer got too big, invalidate mark */</span></span>
<span class="line"><span style="color:#ABB2BF">                pos </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;        </span><span style="color:#7F848E;font-style:italic">/* drop buffer contents */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // markpos已经为0了，marklimit比buffer.length大，而buffer.length已经最大了，不能扩容</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#ABB2BF"> MAX_BUFFER_SIZE) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Required array size too large"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">               // markpos已经为0了，marklimit比buffer.length大</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {            </span><span style="color:#7F848E;font-style:italic">/* grow buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            	// 建立一个长度为min(2*pos,marklimit,MAX_BUFFER_SIZE),的缓存数组，然后把原来0-pos移动到新数组的0-pos处</span></span>
<span class="line"><span style="color:#C678DD">                int</span><span style="color:#E06C75"> nsz</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&lt;=</span><span style="color:#ABB2BF"> MAX_BUFFER_SIZE </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#ABB2BF">                        pos </span><span style="color:#56B6C2">*</span><span style="color:#D19A66"> 2</span><span style="color:#C678DD"> :</span><span style="color:#ABB2BF"> MAX_BUFFER_SIZE;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (nsz </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> marklimit)</span></span>
<span class="line"><span style="color:#ABB2BF">                    nsz </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> marklimit;</span></span>
<span class="line"><span style="color:#C678DD">                byte</span><span style="color:#E06C75"> nbuf</span><span style="color:#ABB2BF">[] </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[nsz];</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, nbuf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, pos);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 用bufUpdater替换buffer</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">bufUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, buffer, nbuf)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // Can't replace buf if there was an async close.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // Note: This would need to be changed if fill()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // is ever made accessible to multiple threads.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // But for now, the only way CAS can fail is via close.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // assert buf == null;</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">                buffer </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> nbuf;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 当前读取上限count为pos</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 从内部的输入流，读取pos到buffer.length部分，读取的字节数加到count</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer, pos, </span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> pos);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            count </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取byte</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 说明当前buf[]数组大小不够了，须要fill()</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> count) {</span></span>
<span class="line"><span style="color:#61AFEF">            fill</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 说明没有读取到任何数据</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (pos </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> count)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getBufIfOpen</span><span style="color:#ABB2BF">()[pos++] </span><span style="color:#56B6C2">&amp;</span><span style="color:#D19A66"> 0xff</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Read characters into a portion of an array, reading from the underlying</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * stream at most once if necessary.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read1</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 当写入指定数组b的长度大小超过BufferedInputStream中核心缓存数组buf[]的大小而且 markpos &lt; 0，那么就直接从数据流中读取数据给b数组，而不经过buf[]缓存数组，避免buf[]数组急剧增大</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;=</span><span style="color:#61AFEF"> getBufIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(b, off, len);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#61AFEF">            fill</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            avail </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> cnt</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> avail </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getBufIfOpen</span><span style="color:#ABB2BF">(), pos, b, off, cnt);</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> cnt;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> cnt;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 读取到byte数组b中</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        throws</span><span style="color:#E5C07B"> IOException</span></span>
<span class="line"><span style="color:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#61AFEF">        getBufIfOpen</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// Check for closed stream</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> ((off </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len) </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len))) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (;;) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> nread</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> read1</span><span style="color:#ABB2BF">(b, off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> n, len </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> n);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (nread </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> nread </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">            n </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> nread;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&gt;=</span><span style="color:#ABB2BF"> len)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // if not closed but no bytes available, return</span></span>
<span class="line"><span style="color:#E5C07B">            InputStream</span><span style="color:#E06C75"> input</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (input </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> input</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">available</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 跳过n个</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> skip</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> n</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        getBufIfOpen</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// Check for closed stream</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // If no mark position set then don't keep in buffer</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">skip</span><span style="color:#ABB2BF">(n);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Fill in buffer to save bytes for reset</span></span>
<span class="line"><span style="color:#61AFEF">            fill</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            avail </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> skipped</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (avail </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> n) </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> avail </span><span style="color:#C678DD">:</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> skipped;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> skipped;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // buf[]数组剩余字节数+输入流中剩余字节数</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> available</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> count </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> avail</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getInIfOpen</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">available</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> avail)</span></span>
<span class="line"><span style="color:#C678DD">                    ?</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span></span>
<span class="line"><span style="color:#C678DD">                    :</span><span style="color:#ABB2BF"> n </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> avail;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 标记位置，marklimit只有在这里才可以被赋值，readlimit表示mark()方法执行后，最多可以从流中读取的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 若是超过该字节大小，那么在fill()的时候，就会认为此mark()标记无效，从新将 markpos = -1，pos = 0</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> mark</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> readlimit</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        marklimit </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> readlimit;</span></span>
<span class="line"><span style="color:#ABB2BF">        markpos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> pos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置位置</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        getBufIfOpen</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// 如果已经close, 则直接报错</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (markpos </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Resetting to invalid mark"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        pos </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> markpos;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 支持mark, 所以返回true</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> markSupported</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 通过AtomicReferenceFieldUpdater的CAS无锁方式close</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> ( (buffer </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> buf) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">bufUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, buffer, </span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">)) {</span></span>
<span class="line"><span style="color:#E5C07B">                InputStream</span><span style="color:#E06C75"> input</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> in;</span></span>
<span class="line"><span style="color:#ABB2BF">                in </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (input </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#E5C07B">                    input</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // Else retry in case a new buf was CASed in fill()</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AtomicReferenceFieldUpdater具体可以参考：<a href="">JUC原子类: CAS, Unsafe和原子类详解</a></p>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/io-inputstream-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 源码解析之 OutputStream</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20OutputStream.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20OutputStream.html</guid>
      <source url="https://cactusli.net/rss.xml">IO 源码解析之 OutputStream</source>
      <description>本文主要从JDK 11源码角度分析 OutputStream。 @pdai IO 源码解析之 OutputStream OutputStream 类实现关系 OutputStream 抽象类 源码实现 OutputStream FilterOutputStream ByteArrayOutputStream BufferedOutputStream 参...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要从JDK 11源码角度分析 OutputStream。 @pdai</p>
</blockquote>
<ul>
<li>IO 源码解析之 OutputStream
<ul>
<li><a href="#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">OutputStream 类实现关系</a></li>
<li><a href="#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">OutputStream 抽象类</a></li>
<li>源码实现
<ul>
<li><a href="#outputstream">OutputStream</a></li>
<li><a href="#filteroutputstream">FilterOutputStream</a></li>
<li><a href="#bytearrayoutputstream">ByteArrayOutputStream</a></li>
<li><a href="#bufferedoutputstream">BufferedOutputStream</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#outputstream-类实现关系"><span></span></a><a href="#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">#</a> OutputStream 类实现关系</h2>
<blockquote>
<p>OutputStream是输出字节流，具体的实现类层次结构如下：</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#outputstream-抽象类"><span></span></a><a href="#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> OutputStream 抽象类</h2>
<p>OutputStream 类重要方法设计如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法。</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b[]</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> off</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#E06C75">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#E06C75">()</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#源码实现"><span></span></a><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</h2>
<blockquote>
<p>梳理部分OutputStream及其实现类的源码分析。</p>
</blockquote>
<h3><a class="header-anchor" href="#outputstream"><span></span></a><a href="#outputstream">#</a> OutputStream</h3>
<p>OutputStream抽象类源码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Closeable</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Flushable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // JDK11中增加了一个nullOutputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#61AFEF"> nullOutputStream</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutputStream</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> closed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureOpen</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Stream closed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">                ensureOpen</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">                closed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        };</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        write</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 检查边界合理性</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // len == 0 的情况已经在如下的for循环中隐式处理了</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF"> ; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len ; i++) {</span></span>
<span class="line"><span style="color:#61AFEF">            write</span><span style="color:#ABB2BF">(b[off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> i]);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>补充下JDK11为什么会增加nullOutputStream方法的设计？即空对象模式</p>
</blockquote>
<ul>
<li><strong>空对象模式</strong></li>
</ul>
<p>举个例子：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyParser</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Parser</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Action</span><span style="color:#E06C75"> NO_ACTION </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Action</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomething</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">/* do nothing */</span><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#E06C75">  }</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> Action</span><span style="color:#61AFEF"> findAction</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> userInput</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> ( </span><span style="color:#7F848E;font-style:italic">/* we can't find any actions */</span><span style="color:#ABB2BF"> ) {</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#ABB2BF"> NO_ACTION;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后便<strong>可以始终可以这么调用，而不用再判断空了</strong></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">ParserFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParser</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">findAction</span><span style="color:#ABB2BF">(someInput).</span><span style="color:#61AFEF">doSomething</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filteroutputstream"><span></span></a><a href="#filteroutputstream">#</a> FilterOutputStream</h3>
<p>FilterOutputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> FilterOutputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 被装饰的实际outputStream</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#E06C75"> out</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当前stream是否已经被close</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> closed</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // close stream时加锁，防止其它线程同时close</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> closeLock </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化构造函数，传入被装饰的实际outputStream</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FilterOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> out;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入数据，本质调用被装饰outputStream的方法</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(b);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将数组中的所有字节写入</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        write</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 一个个写入</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> ((off </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> len </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> off)) </span><span style="color:#56B6C2">|</span><span style="color:#ABB2BF"> (off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len)) </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF"> ; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> len ; i++) {</span></span>
<span class="line"><span style="color:#61AFEF">            write</span><span style="color:#ABB2BF">(b[off </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> i]);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // 强制刷新，将缓冲中的数据写入; 本质调用被装饰outputStream的方法</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flush</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 关闭Stream</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果已经close, 直接退出</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 加锁处理，如果已经有线程正在closing则退出；</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#ABB2BF"> (closeLock) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">            closed </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // close前调用flush</span></span>
<span class="line"><span style="color:#E5C07B">        Throwable</span><span style="color:#E06C75"> flushException</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">            flush</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            flushException </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> e;</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#ABB2BF"> e;</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (flushException </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                    out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> closeException</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                   // evaluate possible precedence of flushException over closeException</span></span>
<span class="line"><span style="color:#C678DD">                   if</span><span style="color:#ABB2BF"> ((flushException </span><span style="color:#C678DD">instanceof</span><span style="color:#ABB2BF"> ThreadDeath) </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2">                       !</span><span style="color:#ABB2BF">(closeException </span><span style="color:#C678DD">instanceof</span><span style="color:#ABB2BF"> ThreadDeath)) {</span></span>
<span class="line"><span style="color:#E5C07B">                       flushException</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addSuppressed</span><span style="color:#ABB2BF">(closeException);</span></span>
<span class="line"><span style="color:#C678DD">                       throw</span><span style="color:#ABB2BF"> (ThreadDeath) flushException;</span></span>
<span class="line"><span style="color:#ABB2BF">                   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#ABB2BF"> (flushException </span><span style="color:#56B6C2">!=</span><span style="color:#ABB2BF"> closeException) {</span></span>
<span class="line"><span style="color:#E5C07B">                        closeException</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addSuppressed</span><span style="color:#ABB2BF">(flushException);</span></span>
<span class="line"><span style="color:#ABB2BF">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                    throw</span><span style="color:#ABB2BF"> closeException;</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@pdai: 对比下JDK8中，close方法是没有加锁处理的。这种情况下你可以看JDK8源码中，直接利用java7的try with resources方式，优雅的调用flush方法后对out进行关闭。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#E06C75">() throws IOException {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75"> ostream </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> out) {</span></span>
<span class="line"><span style="color:#61AFEF">        flush</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#bytearrayoutputstream"><span></span></a><a href="#bytearrayoutputstream">#</a> ByteArrayOutputStream</h3>
<p>ByteArrayOutputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ByteArrayOutputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> OutputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 实际的byte数组</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 数组中实际有效的byte的个数</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化默认构造，初始化byte数组大小为32</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">32</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 初始化byte的大小</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (size </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Negative initial size: "</span></span>
<span class="line"><span style="color:#56B6C2">                                               +</span><span style="color:#ABB2BF"> size);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 扩容，确保它至少可以容纳由最小容量参数指定的元素数</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureCapacity</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (minCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">            grow</span><span style="color:#ABB2BF">(minCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 扩容的实质方法，确保它至少可以容纳由最小容量参数指定的元素数</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> grow</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> oldCapacity</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> newCapacity</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> oldCapacity </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> minCapacity;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#ABB2BF">(minCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(buf, newCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// overflow</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> (minCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> MAX_ARRAY_SIZE) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E5C07B">            Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#ABB2BF">            MAX_ARRAY_SIZE;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入，写入前确保byte数据长度</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacity</span><span style="color:#ABB2BF">(count </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        buf[count] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">) b;</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">+=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Objects</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">checkFromIndexSize</span><span style="color:#ABB2BF">(off, len, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacity</span><span style="color:#ABB2BF">(count </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> len);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(b, off, buf, count, len);</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeBytes</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[])</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        write</span><span style="color:#ABB2BF">(b, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 重置，显然将实际有效的byte数量置为0</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> reset</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] toByteArray</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(buf, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 长度，即count</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> size</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> count;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 转成string</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 转成string，指定的字符集</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> charsetName</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        throws</span><span style="color:#E5C07B"> UnsupportedEncodingException</span></span>
<span class="line"><span style="color:#ABB2BF">    {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count, charsetName);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#E06C75;font-style:italic"> charset</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count, charset);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 弃用</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Deprecated</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> hibyte</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(buf, hibyte, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 对byte 数组而言，close没啥实质意义，所以空实现</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> close</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#bufferedoutputstream"><span></span></a><a href="#bufferedoutputstream">#</a> BufferedOutputStream</h3>
<p>BufferedOutputStream 源码如下</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> BufferedOutputStream</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> FilterOutputStream</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Buffered outputStream底层也是byte数组</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> buf[]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 大小，buf[0]到buf[count-1]是实际存储的bytes</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 构造函数，被装饰的outputStream，以及默认buf大小是8192</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">(out, </span><span style="color:#D19A66">8192</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> BufferedOutputStream</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">OutputStream</span><span style="color:#E06C75;font-style:italic"> out</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(out);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (size </span><span style="color:#56B6C2">&lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Buffer size &lt;= 0"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[size];</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /** Flush the internal buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 内部的flush方法，将buffer中的有效bytes(count是有效的bytes大小)通过被装饰的outputStream写入</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flushBuffer</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (count </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buf, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, count);</span></span>
<span class="line"><span style="color:#ABB2BF">            count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 写入byte</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 当buffer满了以后，flush buffer</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (count </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#61AFEF">            flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        buf[count++] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">)b;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> write</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75;font-style:italic"> b</span><span style="color:#ABB2BF">[], </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> off</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 如果请求长度已经超过输出缓冲区的大小，直接刷新输出缓冲区，然后直接写入数据。</span></span>
<span class="line"><span style="color:#61AFEF">            flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(b, off, len);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (len </span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> buf</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> -</span><span style="color:#ABB2BF"> count) {</span></span>
<span class="line"><span style="color:#61AFEF">            flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(b, off, buf, count, len);</span></span>
<span class="line"><span style="color:#ABB2BF">        count </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> len;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // flush方法，需要先将buffer中写入，最后在调用被装饰outputStream的flush方法</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> flush</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#61AFEF">        flushBuffer</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flush</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png" type="image/png"/>
    </item>
    <item>
      <title>IO 设计模式(装饰者模式)</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F).html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F).html</guid>
      <source url="https://cactusli.net/rss.xml">IO 设计模式(装饰者模式)</source>
      <description>Java I/O 使用了装饰者模式来实现。 # 装饰者模式 请参考装饰者模式详解 装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java I/O 使用了装饰者模式来实现。</p>
</blockquote>
<h2><a class="header-anchor" href="#装饰者模式"><span></span></a><a href="#%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F">#</a> 装饰者模式</h2>
<p>请参考<a href="">装饰者模式详解</a></p>
<p>装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/137c593d-0a9e-47b8-a9e6-b71f540b82dd.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#io-装饰者模式"><span></span></a><a href="#io-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F">#</a> IO 装饰者模式</h2>
<p>以 InputStream 为例，</p>
<ul>
<li>InputStream 是抽象组件；</li>
<li>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；</li>
<li>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ioNio.png" alt="ioNio" tabindex="0" loading="lazy"><figcaption>ioNio</figcaption></figure>
<p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">FileInputStream</span><span style="color:#E06C75"> fileInputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(filePath)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">BufferedInputStream</span><span style="color:#E06C75"> bufferedInputStream </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> BufferedInputStream</span><span style="color:#E06C75">(fileInputStream)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/137c593d-0a9e-47b8-a9e6-b71f540b82dd.png" type="image/png"/>
    </item>
    <item>
      <title>Java IO 体系详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/Java%20IO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/Java%20IO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java IO 体系详解</source>
      <description>本文主要梳理Java IO/NIO/AIO的知识体系。 Java IO 体系详解 知识体系 相关文章 参考文章 # 知识体系 imgimg # 相关文章 A. Java进阶 - IO框架之知识体系：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。@pdai Java IO/NIO/AIO - Overview 本文主要梳理Java I...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:35:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要梳理Java IO/NIO/AIO的知识体系。</p>
</blockquote>
<ul>
<li>Java IO 体系详解
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">相关文章</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-overview2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#相关文章"><span></span></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">#</a> 相关文章</h2>
<blockquote>
<p><strong>A. Java进阶 - IO框架之知识体系</strong>：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。@pdai</p>
</blockquote>
<ul>
<li>Java IO/NIO/AIO - Overview
<ul>
<li>本文主要梳理Java IO/NIO/AIO的知识体系</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>B. Java进阶 - IO框架之基础IO</strong>：其次对Java基础IO框架进行梳理，包括其分类，使用和源码详解。@pdai</p>
</blockquote>
<ul>
<li>Java IO - 分类(传输，操作)
<ul>
<li>本文主要从<code>传输方式</code>和<code>数据操作</code>两个方面分析Java IO的分类</li>
</ul>
</li>
<li>Java IO - 设计模式(装饰者模式)
<ul>
<li>Java I/O 使用了装饰者模式来实现</li>
</ul>
</li>
<li>Java IO - 源码: InputStream
<ul>
<li>本文主要从JDK源码角度分析InputStream</li>
</ul>
</li>
<li>Java IO - 源码: OutputStream
<ul>
<li>本文主要从JDK源码角度分析 OutputStream</li>
</ul>
</li>
<li>Java IO - 常见类使用
<ul>
<li>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>C. Java进阶 - IO框架之NIO/AIO等</strong>：然后再对Unix IO模型学习，引入到Java BIO/NIO/AIO相关知识详解。@pdai</p>
</blockquote>
<ul>
<li>IO 模型 - Unix IO 模型
<ul>
<li>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫</li>
</ul>
</li>
<li>Java IO - BIO 详解
<ul>
<li>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态</li>
</ul>
</li>
<li>Java NIO - 基础详解
<ul>
<li>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O</li>
</ul>
</li>
<li>Java NIO - IO多路复用详解
<ul>
<li>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持</li>
</ul>
</li>
<li>Java AIO - 异步IO详解
<ul>
<li>本文主要对异步IO和Java中对AIO的支持详解。@pdai</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>D. Java进阶 - IO框架之开源框架</strong>：最后再对常用的开源框架进行分析和详解。@pdai</p>
</blockquote>
<ul>
<li><a href="">Java NIO - 零拷贝实现</a>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。</li>
<li><a href="">Java N(A)IO - 框架: Netty</a>
<ul>
<li>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-overview2.png" type="image/png"/>
    </item>
    <item>
      <title>N(A)IO 框架 Netty</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/N(A)IO%20%E6%A1%86%E6%9E%B6%20Netty.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/N(A)IO%20%E6%A1%86%E6%9E%B6%20Netty.html</guid>
      <source url="https://cactusli.net/rss.xml">N(A)IO 框架 Netty</source>
      <description>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等。 N(A)IO 框架 Netty NIO框架 比较好的基于NIO的开源...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等。</p>
</blockquote>
<ul>
<li>N(A)IO 框架 Netty
<ul>
<li><a href="#nio%E6%A1%86%E6%9E%B6">NIO框架</a></li>
<li>比较好的基于NIO的开源框架(Netty)
<ul>
<li><a href="#%E4%BC%98%E7%82%B9">优点</a></li>
<li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#nio框架"><span></span></a><a href="#nio%E6%A1%86%E6%9E%B6">#</a> NIO框架</h2>
<p>目前流行的NIO框架非常的多。在论坛上、互联网上大家讨论和使用最多的有以下几种:</p>
<ul>
<li>原生JAVA NIO框架:</li>
</ul>
<p>JAVA NIO通信框架基于多路复用IO原理，我们将详细讲解它的工作原理。</p>
<ul>
<li>APACHE MINA 2:</li>
</ul>
<p>是一个网络应用程序框架，用来帮助用户简单地开发高性能和高可扩展性的网络应用程序。它提供了一个通过Java NIO在不同的传输例如TCP/IP和UDP/IP上抽象的事件驱动的异步API。</p>
<ul>
<li>NETTY 4/5:</li>
</ul>
<p>Netty是由JBOSS提供的一个java开源框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。我们将讲解NETTY 4 的工作原理。另外说一句: MINA和NETTY的主要作者是同一人Trustin Lee。</p>
<ul>
<li>Grizzly:</li>
</ul>
<p>Grizzly是一种应用程序框架，专门解决编写成千上万用户访问服务器时候产生的各种问题。使用JAVA NIO作为基础，并隐藏其编程的复杂性。</p>
<h2><a class="header-anchor" href="#比较好的基于nio的开源框架-netty"><span></span></a><a href="#%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%E5%9F%BA%E4%BA%8Enio%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6-netty">#</a> 比较好的基于NIO的开源框架(Netty)</h2>
<h3><a class="header-anchor" href="#优点"><span></span></a><a href="#%E4%BC%98%E7%82%B9">#</a> 优点</h3>
<ul>
<li>api简单，开发门槛低</li>
<li>功能强大，内置了多种编码、解码功能</li>
<li>与其它业界主流的NIO框架对比，netty的综合性能最优</li>
<li>社区活跃，使用广泛，经历过很多商业应用项目的考验</li>
<li>定制能力强，可以对框架进行灵活的扩展</li>
</ul>
<h3><a class="header-anchor" href="#例子"><span></span></a><a href="#%E4%BE%8B%E5%AD%90">#</a> 例子</h3>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">     &lt;</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;org.jboss.netty&lt;/</span><span style="color:#E06C75">groupId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">     &lt;</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;netty&lt;/</span><span style="color:#E06C75">artifactId</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">     &lt;</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;3.2.5.Final&lt;/</span><span style="color:#E06C75">version</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">&lt;/</span><span style="color:#E06C75">dependency</span><span style="color:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>服务端。接收客户端请求并将内容打印出来，同时发送一个消息收到回执。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NettyServer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> HEADER_LENGTH </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> bind</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> port</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ServerBootstrap</span><span style="color:#E06C75"> b</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ServerBootstrap</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> NioServerSocketChannelFactory</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">(),</span></span>
<span class="line"><span style="color:#E5C07B">                                                                                  Executors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newCachedThreadPool</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 构造对应的pipeline</span></span>
<span class="line"><span style="color:#E5C07B">        b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setPipelineFactory</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> ChannelPipelineFactory</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            public</span><span style="color:#E5C07B"> ChannelPipeline</span><span style="color:#61AFEF"> getPipeline</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                ChannelPipeline</span><span style="color:#E06C75"> pipelines</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Channels</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">pipeline</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                pipelines</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addLast</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">MessageHandler</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">(), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> MessageHandler</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#ABB2BF"> pipelines;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 监听端口号</span></span>
<span class="line"><span style="color:#E5C07B">        b</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(port));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 处理消息</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MessageHandler</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> SimpleChannelHandler</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> messageReceived</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ChannelHandlerContext</span><span style="color:#E06C75;font-style:italic"> ctx</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">MessageEvent</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 接收客户端请求</span></span>
<span class="line"><span style="color:#E5C07B">            ChannelBuffer</span><span style="color:#E06C75"> buffer</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (ChannelBuffer) </span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> message</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readableBytes</span><span style="color:#ABB2BF">()).</span><span style="color:#61AFEF">array</span><span style="color:#ABB2BF">(), </span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;服务端&gt;收到内容="</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> message);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 给客户端发送回执</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">body</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "服务端已收到"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">header</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(HEADER_LENGTH).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">putInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">array</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Channels</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ctx</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">ChannelBuffers</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wrappedBuffer</span><span style="color:#ABB2BF">(header, body));</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;服务端&gt;发送回执,time="</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentTimeMillis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#61AFEF"> NettyServer</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1088</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        ;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>客户端。向服务端发送一个请求，然后打印服务端响应的内容。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NettyClient</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#E06C75"> readHeader  </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#E06C75"> writeHeader </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> SocketChannel</span><span style="color:#E06C75">    channel</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> sendMessage</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">body</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建客户端通道</span></span>
<span class="line"><span style="color:#ABB2BF">        channel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> SocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">socket</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">setSoTimeout</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">60000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">connect</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AddressUtils</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getHostIp</span><span style="color:#ABB2BF">(), </span><span style="color:#D19A66">1088</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 客户端发请求</span></span>
<span class="line"><span style="color:#61AFEF">        writeWithHeader</span><span style="color:#ABB2BF">(channel, body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 接收服务端响应的信息</span></span>
<span class="line"><span style="color:#E5C07B">        readHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        read</span><span style="color:#ABB2BF">(channel, readHeader);</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> bodyLen</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> readHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInt</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        ByteBuffer</span><span style="color:#E06C75"> bodyBuf</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(bodyLen).</span><span style="color:#61AFEF">order</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteOrder</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">BIG_ENDIAN</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#61AFEF">        read</span><span style="color:#ABB2BF">(channel, bodyBuf);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;客户端&gt;收到响应内容: "</span><span style="color:#56B6C2"> +</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">bodyBuf</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">array</span><span style="color:#ABB2BF">(), </span><span style="color:#98C379">"UTF-8"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ",长度:"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> bodyLen);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeWithHeader</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannel</span><span style="color:#E06C75;font-style:italic"> channel</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">body</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        writeHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        writeHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        writeHeader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // channel.write(writeHeader);</span></span>
<span class="line"><span style="color:#E5C07B">        channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wrap</span><span style="color:#ABB2BF">(body));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> read</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannel</span><span style="color:#E06C75;font-style:italic"> channel</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#E06C75;font-style:italic"> buffer</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasRemaining</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> r</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> channel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (r </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"end of stream when reading header"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> body</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "客户发的测试请求！"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#61AFEF"> NettyClient</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">sendMessage</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
    </item>
    <item>
      <title>NIO 之 IO多路复用详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%20IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">NIO 之 IO多路复用详解</source>
      <description>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。@pdai NIO 之 IO多路复用详解 现实场景 典型的多路复用IO实现 Reactor模型和Proactor模型 传统IO模型 Reactor事件驱动模型 Reactor模型----业务处理与IO分离 Reactor模型----并发读写 Reactor模型示例 JAVA对多路复...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持。@pdai</p>
</blockquote>
<ul>
<li>NIO 之 IO多路复用详解
<ul>
<li><a href="#%E7%8E%B0%E5%AE%9E%E5%9C%BA%E6%99%AF">现实场景</a></li>
<li><a href="#%E5%85%B8%E5%9E%8B%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8io%E5%AE%9E%E7%8E%B0">典型的多路复用IO实现</a></li>
<li>Reactor模型和Proactor模型
<ul>
<li><a href="#%E4%BC%A0%E7%BB%9Fio%E6%A8%A1%E5%9E%8B">传统IO模型</a></li>
<li><a href="#reactor%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B">Reactor事件驱动模型</a></li>
<li>[Reactor模型</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-reactor-1.png" type="image/png"/>
    </item>
    <item>
      <title>NIO 之零拷贝实现</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%B9%8B%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0.html</guid>
      <source url="https://cactusli.net/rss.xml">NIO 之零拷贝实现</source>
      <description>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。@pdai</p>
</blockquote>
<ul>
<li>NIO 之零拷贝实现
<ul>
<li>Java NIO零拷贝
<ul>
<li><a href="#mappedbytebuffer">MappedByteBuffer</a></li>
<li><a href="#directbytebuffer">DirectByteBuffer</a></li>
<li><a href="#filechannel">FileChannel</a></li>
</ul>
</li>
<li>其它的零拷贝实现
<ul>
<li><a href="#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D">Netty零拷贝</a></li>
<li><a href="#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94">RocketMQ和Kafka对比</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-nio零拷贝"><span></span></a><a href="#java-nio%E9%9B%B6%E6%8B%B7%E8%B4%9D">#</a> Java NIO零拷贝</h2>
<p>在 Java NIO 中的<strong>通道（Channel）*<em>就相当于操作系统的*<em>内核空间</em></em>（kernel space）的缓冲区，而</strong>缓冲区**（Buffer）对应的相当于操作系统的<strong>用户空间</strong>（user space）中的<strong>用户缓冲区</strong>（user buffer）。</p>
<ul>
<li><strong>通道</strong>（Channel）是全双工的（双向传输），它既可能是读缓冲区（read buffer），也可能是网络缓冲区（socket buffer）。</li>
<li><strong>缓冲区</strong>（Buffer）分为堆内存（HeapBuffer）和堆外内存（DirectBuffer），这是通过 malloc() 分配出来的用户态内存。</li>
</ul>
<p>堆外内存（DirectBuffer）在使用后需要应用程序手动回收，而堆内存（HeapBuffer）的数据在 GC 时可能会被自动回收。因此，在使用 HeapBuffer 读写数据时，为了避免缓冲区数据因为 GC 而丢失，NIO 会先把 HeapBuffer 内部的数据拷贝到一个临时的 DirectBuffer 中的本地内存（native memory），这个拷贝涉及到 <code>sun.misc.Unsafe.copyMemory()</code> 的调用，背后的实现原理与 <code>memcpy()</code> 类似。 最后，将临时生成的 DirectBuffer 内部的数据的内存地址传给 I/O 调用函数，这样就避免了再去访问 Java 对象处理 I/O 读写。</p>
<h3><a class="header-anchor" href="#mappedbytebuffer"><span></span></a><a href="#mappedbytebuffer">#</a> MappedByteBuffer</h3>
<p>MappedByteBuffer 是 NIO 基于**内存映射（mmap）**这种零拷贝方式的提供的一种实现，它继承自 ByteBuffer。FileChannel 定义了一个 map() 方法，它可以把一个文件从 position 位置开始的 size 大小的区域映射为内存映像文件。抽象方法 map() 方法在 FileChannel 中的定义如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#E5C07B"> MappedByteBuffer</span><span style="color:#61AFEF"> map</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">MapMode</span><span style="color:#E06C75"> mode</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> size)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>mode</strong>：限定内存映射区域（MappedByteBuffer）对内存映像文件的访问模式，包括只可读（READ_ONLY）、可读可写（READ_WRITE）和写时拷贝（PRIVATE）三种模式。</li>
<li><strong>position</strong>：文件映射的起始地址，对应内存映射区域（MappedByteBuffer）的首地址。</li>
<li><strong>size</strong>：文件映射的字节长度，从 position 往后的字节数，对应内存映射区域（MappedByteBuffer）的大小。</li>
</ul>
<p>MappedByteBuffer 相比 ByteBuffer 新增了 fore()、load() 和 isLoad() 三个重要的方法：</p>
<ul>
<li><strong>fore()</strong>：对于处于 READ_WRITE 模式下的缓冲区，把对缓冲区内容的修改强制刷新到本地文件。</li>
<li><strong>load()</strong>：将缓冲区的内容载入物理内存中，并返回这个缓冲区的引用。</li>
<li><strong>isLoaded()</strong>：如果缓冲区的内容在物理内存中，则返回 true，否则返回 false。</li>
</ul>
<p>下面给出一个利用 MappedByteBuffer 对文件进行读写的使用示例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CONTENT </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Zero copy implemented by MappedByteBuffer"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> FILE_NAME </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/mmap.txt"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CHARSET </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "UTF-8"</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>写文件数据</strong>：打开文件通道 fileChannel 并提供读权限、写权限和数据清空权限，通过 fileChannel 映射到一个可写的内存缓冲区 mappedByteBuffer，将目标数据写入 mappedByteBuffer，通过 <code>force()</code> 方法把缓冲区更改的内容强制写入本地文件。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> writeToFileByMappedByteBuffer</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getResource</span><span style="color:#ABB2BF">(FILE_NAME).</span><span style="color:#61AFEF">getPath</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">    byte</span><span style="color:#E06C75">[] bytes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CONTENT</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(CHARSET));</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fileChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(path, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">            StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WRITE</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUNCATE_EXISTING</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        MappedByteBuffer</span><span style="color:#E06C75"> mappedByteBuffer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(READ_WRITE, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">bytes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (mappedByteBuffer </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            mappedByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(bytes);</span></span>
<span class="line"><span style="color:#E5C07B">            mappedByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">force</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>读文件数据</strong>：打开文件通道 fileChannel 并提供只读权限，通过 fileChannel 映射到一个只可读的内存缓冲区 mappedByteBuffer，读取 mappedByteBuffer 中的字节数组即可得到文件数据。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> readFromFileByMappedByteBuffer</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getResource</span><span style="color:#ABB2BF">(FILE_NAME).</span><span style="color:#61AFEF">getPath</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> length </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CONTENT</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(CHARSET)).</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fileChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(path, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        MappedByteBuffer</span><span style="color:#E06C75"> mappedByteBuffer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(READ_ONLY, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, length);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (mappedByteBuffer </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#E06C75">[] bytes </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75">[length]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            mappedByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(bytes);</span></span>
<span class="line"><span style="color:#E5C07B">            String</span><span style="color:#E06C75"> content </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> String</span><span style="color:#E06C75">(bytes</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> StandardCharsets</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UTF_8</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">            assertEquals</span><span style="color:#E06C75">(content</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "Zero copy implemented by MappedByteBuffer"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍 <code>map()</code> 方法的<strong>底层实现原理</strong>。<code>map()</code> 方法是 <code>java.nio.channels.FileChannel</code> 的抽象方法，由子类 <code>sun.nio.ch.FileChannelImpl.java</code> 实现，下面是和内存映射相关的核心代码：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> MappedByteBuffer</span><span style="color:#61AFEF"> map</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">MapMode</span><span style="color:#E06C75"> mode</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> size) throws IOException {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> pagePosition </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(position </span><span style="color:#56B6C2">%</span><span style="color:#E06C75"> allocationGranularity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> mapPosition </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> position </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> pagePosition</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> mapSize </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> pagePosition</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        addr </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> map0</span><span style="color:#E06C75">(imode</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapPosition</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapSize)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">gc</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">interrupt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            addr </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> map0</span><span style="color:#E06C75">(imode</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapPosition</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapSize)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic"> y</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IOException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Map failed"</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> y)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> isize </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Unmapper</span><span style="color:#E06C75"> um </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Unmapper</span><span style="color:#E06C75">(addr</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mapSize</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> isize</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mfd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">writable) </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (imode </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> MAP_RO)) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Util</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newMappedByteBufferR</span><span style="color:#ABB2BF">(isize, addr </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> pagePosition, mfd, um);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Util</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newMappedByteBuffer</span><span style="color:#ABB2BF">(isize, addr </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> pagePosition, mfd, um);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map() 方法通过本地方法 map0() 为文件分配一块虚拟内存，作为它的内存映射区域，然后返回这块内存映射区域的起始地址。</p>
<ul>
<li>文件映射需要在 Java 堆中创建一个 MappedByteBuffer 的实例。如果第一次文件映射导致 OOM，则手动触发垃圾回收，休眠 100ms 后再尝试映射，如果失败则抛出异常。</li>
<li>通过 Util 的 newMappedByteBuffer （可读可写）方法或者 newMappedByteBufferR（仅读） 方法方法反射创建一个 DirectByteBuffer 实例，其中 DirectByteBuffer 是 MappedByteBuffer 的子类。</li>
</ul>
<p><code>map()</code> 方法返回的是内存映射区域的起始地址，通过（<strong>起始地址 + 偏移量</strong>）就可以获取指定内存的数据。这样一定程度上替代了 <code>read()</code> 或 <code>write()</code> 方法，底层直接采用 <code>sun.misc.Unsafe</code>类的 <code>getByte()</code> 和 <code>putByte()</code> 方法对数据进行读写。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> map0</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> prot</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> mapSize) throws IOException</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>上面是本地方法（native method）map0 的定义，它通过 JNI（Java Native Interface）调用底层 C 的实现，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_map0）的实现位于 JDK 源码包下的 <code>native/sun/nio/ch/FileChannelImpl.c</code>这个源文件里面。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">JNIEXPORT jlong JNICALL</span></span>
<span class="line"><span style="color:#61AFEF">Java_sun_nio_ch_FileChannelImpl_map0</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">JNIEnv </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">env</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">this</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                     jint </span><span style="color:#E06C75;font-style:italic">prot</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">off</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">len</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#C678DD"> *</span><span style="color:#ABB2BF">mapAddress </span><span style="color:#C678DD">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    jobject fdo </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">*</span><span style="color:#ABB2BF">env)-&gt;</span><span style="color:#61AFEF">GetObjectField</span><span style="color:#ABB2BF">(env, this, chan_fd);</span></span>
<span class="line"><span style="color:#ABB2BF">    jint fd </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> fdval</span><span style="color:#ABB2BF">(env, fdo);</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#ABB2BF"> protections </span><span style="color:#C678DD">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#ABB2BF"> flags </span><span style="color:#C678DD">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (prot </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> sun_nio_ch_FileChannelImpl_MAP_RO) {</span></span>
<span class="line"><span style="color:#ABB2BF">        protections </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF">        flags </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> MAP_SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (prot </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> sun_nio_ch_FileChannelImpl_MAP_RW) {</span></span>
<span class="line"><span style="color:#ABB2BF">        protections </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> PROT_WRITE </span><span style="color:#C678DD">|</span><span style="color:#ABB2BF"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF">        flags </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> MAP_SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (prot </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> sun_nio_ch_FileChannelImpl_MAP_PV) {</span></span>
<span class="line"><span style="color:#ABB2BF">        protections </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF">  PROT_WRITE </span><span style="color:#C678DD">|</span><span style="color:#ABB2BF"> PROT_READ;</span></span>
<span class="line"><span style="color:#ABB2BF">        flags </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> MAP_PRIVATE;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    mapAddress </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> mmap64</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#D19A66">        0</span><span style="color:#ABB2BF">,</span><span style="color:#7F848E;font-style:italic">                    /* Let OS decide location */</span></span>
<span class="line"><span style="color:#ABB2BF">        len,</span><span style="color:#7F848E;font-style:italic">                  /* Number of bytes to map */</span></span>
<span class="line"><span style="color:#ABB2BF">        protections,</span><span style="color:#7F848E;font-style:italic">          /* File permissions */</span></span>
<span class="line"><span style="color:#ABB2BF">        flags,</span><span style="color:#7F848E;font-style:italic">                /* Changes are shared */</span></span>
<span class="line"><span style="color:#ABB2BF">        fd,</span><span style="color:#7F848E;font-style:italic">                   /* File descriptor of mapped file */</span></span>
<span class="line"><span style="color:#ABB2BF">        off);</span><span style="color:#7F848E;font-style:italic">                 /* Offset into file */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (mapAddress </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> MAP_FAILED) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (errno </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> ENOMEM) {</span></span>
<span class="line"><span style="color:#61AFEF">            JNU_ThrowOutOfMemoryError</span><span style="color:#ABB2BF">(env, </span><span style="color:#98C379">"Map failed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF"> IOS_THROWN;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> handle</span><span style="color:#ABB2BF">(env, </span><span style="color:#C678DD">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Map failed"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> ((jlong) (</span><span style="color:#C678DD">unsigned</span><span style="color:#C678DD"> long</span><span style="color:#ABB2BF">) mapAddress);</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 map0() 函数最终是通过 <code>mmap64()</code> 这个函数对 Linux 底层内核发出内存映射的调用， <code>mmap64()</code> 函数的原型如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/mman.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#61AFEF">mmap64</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">void</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">addr</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> len</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> prot</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> flags</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> fd</span><span style="color:#ABB2BF">,</span><span style="color:#56B6C2"> off64_t</span><span style="color:#E06C75;font-style:italic"> offset</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面详细介绍一下 <code>mmap64()</code> 函数各个参数的含义以及参数可选值：</p>
<ul>
<li>
<p><code>addr</code>：文件在用户进程空间的内存映射区中的起始地址，是一个建议的参数，通常可设置为 0 或 NULL，此时由内核去决定真实的起始地址。当 + flags 为 MAP_FIXED 时，addr 就是一个必选的参数，即需要提供一个存在的地址。</p>
</li>
<li>
<p><code>len</code>：文件需要进行内存映射的字节长度</p>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>prot</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>：控制用户进程对内存映射区的访问权限</p>
<ul>
<li><code>PROT_READ</code>：读权限</li>
<li><code>PROT_WRITE</code>：写权限</li>
<li><code>PROT_EXEC</code>：执行权限</li>
<li><code>PROT_NONE</code>：无权限</li>
</ul>
</li>
<li>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>flags</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>：控制内存映射区的修改是否被多个进程共享</p>
<ul>
<li><code>MAP_PRIVATE</code>：对内存映射区数据的修改不会反映到真正的文件，数据修改发生时采用写时复制机制</li>
<li><code>MAP_SHARED</code>：对内存映射区的修改会同步到真正的文件，修改对共享此内存映射区的进程是可见的</li>
<li><code>MAP_FIXED</code>：不建议使用，这种模式下 addr 参数指定的必须的提供一个存在的 addr 参数</li>
</ul>
</li>
<li>
<p><code>fd</code>：文件描述符。每次 map 操作会导致文件的引用计数加 1，每次 unmap 操作或者结束进程会导致引用计数减 1</p>
</li>
<li>
<p><code>offset</code>：文件偏移量。进行映射的文件位置，从文件起始地址向后的位移量</p>
</li>
</ul>
<p>下面总结一下 MappedByteBuffer 的特点和不足之处：</p>
<ul>
<li><strong>MappedByteBuffer 使用是堆外的虚拟内存</strong>，因此分配（map）的内存大小不受 JVM 的 -Xmx 参数限制，但是也是有大小限制的。 如果当文件超出 Integer.MAX_VALUE 字节限制时，可以通过 position 参数重新 map 文件后面的内容。</li>
<li><strong>MappedByteBuffer 在处理大文件时性能的确很高，但也存内存占用、文件关闭不确定等问题</strong>，被其打开的文件只有在垃圾回收的才会被关闭，而且这个时间点是不确定的。</li>
<li>MappedByteBuffer 提供了文件映射内存的 mmap() 方法，也提供了释放映射内存的 unmap() 方法。然而 unmap() 是 FileChannelImpl 中的私有方法，无法直接显示调用。因此，<strong>用户程序需要通过 Java 反射的调用 sun.misc.Cleaner 类的 clean() 方法手动释放映射占用的内存区域</strong>。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> clean</span><span style="color:#E06C75">(</span><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> buffer) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B">    AccessController</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doPrivileged</span><span style="color:#ABB2BF">((</span><span style="color:#E5C07B">PrivilegedAction</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">Void</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">) () </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Method</span><span style="color:#E06C75"> getCleanerMethod</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"cleaner"</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]);</span></span>
<span class="line"><span style="color:#E5C07B">            getCleanerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAccessible</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            Cleaner</span><span style="color:#E06C75"> cleaner</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Cleaner) </span><span style="color:#E5C07B">getCleanerMethod</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">invoke</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]);</span></span>
<span class="line"><span style="color:#E5C07B">            cleaner</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#directbytebuffer"><span></span></a><a href="#directbytebuffer">#</a> DirectByteBuffer</h3>
<p>DirectByteBuffer 的对象引用位于 Java 内存模型的堆里面，JVM 可以对 DirectByteBuffer 的对象进行内存分配和回收管理，一般使用 DirectByteBuffer 的静态方法 allocateDirect() 创建 DirectByteBuffer 实例并分配内存。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#61AFEF"> allocateDirect</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> capacity) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DirectByteBuffer</span><span style="color:#E06C75">(capacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DirectByteBuffer 内部的字节缓冲区位在于堆外的（用户态）直接内存，它是通过 Unsafe 的本地方法 allocateMemory() 进行内存分配，底层调用的是操作系统的 malloc() 函数。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">DirectByteBuffer</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> cap) {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    boolean</span><span style="color:#E06C75"> pa </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> VM</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isDirectMemoryPageAligned</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">pageSize</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1L</span><span style="color:#ABB2BF">, (</span><span style="color:#C678DD">long</span><span style="color:#ABB2BF">)cap </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> (pa </span><span style="color:#C678DD">?</span><span style="color:#ABB2BF"> ps </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">reserveMemory</span><span style="color:#ABB2BF">(size, cap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> base </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        base </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocateMemory</span><span style="color:#ABB2BF">(size);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">OutOfMemoryError</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unreserveMemory</span><span style="color:#ABB2BF">(size, cap);</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setMemory</span><span style="color:#ABB2BF">(base, size, (</span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">) </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (pa </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (base </span><span style="color:#56B6C2">%</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E06C75">        address </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ps </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> (base </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (ps </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        address </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> base</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    cleaner </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Cleaner</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Deallocator</span><span style="color:#ABB2BF">(base, size, cap));</span></span>
<span class="line"><span style="color:#E06C75">    att </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，初始化 DirectByteBuffer 时还会创建一个 Deallocator 线程，并通过 Cleaner 的 freeMemory() 方法来对直接内存进行回收操作，freeMemory() 底层调用的是操作系统的 free() 函数。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Deallocator</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Runnable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#E06C75"> unsafe </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> address</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> capacity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#61AFEF"> Deallocator</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> address</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> size</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> capacity</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        assert</span><span style="color:#ABB2BF"> (address </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">address</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> address;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">size</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> size;</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">capacity</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> capacity;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (address </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#E5C07B">        unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">freeMemory</span><span style="color:#ABB2BF">(address);</span></span>
<span class="line"><span style="color:#ABB2BF">        address </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Bits</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unreserveMemory</span><span style="color:#ABB2BF">(size, capacity);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于使用 DirectByteBuffer 分配的是系统本地的内存，不在 JVM 的管控范围之内，因此直接内存的回收和堆内存的回收不同，直接内存如果使用不当，很容易造成 OutOfMemoryError。</p>
<p>说了这么多，那么 DirectByteBuffer 和零拷贝有什么关系？前面有提到在 MappedByteBuffer 进行内存映射时，它的 map() 方法会通过 Util.newMappedByteBuffer() 来创建一个缓冲区实例，初始化的代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">static</span><span style="color:#E5C07B"> MappedByteBuffer</span><span style="color:#61AFEF"> newMappedByteBuffer</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FileDescriptor</span><span style="color:#E06C75"> fd</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                            Runnable</span><span style="color:#E06C75"> unmapper) {</span></span>
<span class="line"><span style="color:#E5C07B">    MappedByteBuffer</span><span style="color:#E06C75"> dbb</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (directByteBufferConstructor </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        initDBBConstructor</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        dbb </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (MappedByteBuffer)</span><span style="color:#E5C07B">directByteBufferConstructor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#E5C07B"> Object</span><span style="color:#ABB2BF">[] { </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Integer</span><span style="color:#ABB2BF">(size), </span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Long</span><span style="color:#ABB2BF">(addr), fd, unmapper });</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">InstantiationException</span><span style="color:#E06C75"> | </span><span style="color:#E5C07B">IllegalAccessException</span><span style="color:#E06C75"> | </span><span style="color:#E5C07B">InvocationTargetException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InternalError</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> dbb</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> initDBBRConstructor</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    AccessController</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doPrivileged</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> PrivilegedAction</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Void</span><span style="color:#ABB2BF">&gt;() {</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#E5C07B"> Void</span><span style="color:#61AFEF"> run</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">cl</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"java.nio.DirectByteBufferR"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                Constructor</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">ctor</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredConstructor</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#C678DD">                    new</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;[] { </span><span style="color:#E5C07B">int</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">long</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">FileDescriptor</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                    Runnable</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF"> });</span></span>
<span class="line"><span style="color:#E5C07B">                ctor</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setAccessible</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">                directByteBufferRConstructor </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ctor;</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">ClassNotFoundException</span><span style="color:#ABB2BF"> | </span><span style="color:#E5C07B">NoSuchMethodException</span><span style="color:#ABB2BF"> |</span></span>
<span class="line"><span style="color:#E5C07B">                     IllegalArgumentException</span><span style="color:#ABB2BF"> | </span><span style="color:#E5C07B">ClassCastException</span><span style="color:#E06C75;font-style:italic"> x</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InternalError</span><span style="color:#ABB2BF">(x);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">        }});</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DirectByteBuffer 是 MappedByteBuffer 的具体实现类。实际上，Util.newMappedByteBuffer() 方法通过反射机制获取 DirectByteBuffer 的构造器，然后创建一个 DirectByteBuffer 的实例，对应的是一个单独用于内存映射的构造方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">protected</span><span style="color:#61AFEF"> DirectByteBuffer</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> FileDescriptor</span><span style="color:#E06C75"> fd</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Runnable</span><span style="color:#E06C75"> unmapper) {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#E06C75">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> cap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> fd)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    address </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    cleaner </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Cleaner</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">create</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, unmapper);</span></span>
<span class="line"><span style="color:#E06C75">    att </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，除了允许分配操作系统的直接内存以外，DirectByteBuffer 本身也具有文件内存映射的功能，这里不做过多说明。我们需要关注的是，DirectByteBuffer 在 MappedByteBuffer 的基础上提供了内存映像文件的随机读取 get() 和写入 write() 的操作。</p>
<ul>
<li>内存映像文件的随机读操作</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">nextGetIndex</span><span style="color:#ABB2BF">()))</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">checkIndex</span><span style="color:#ABB2BF">(i)))</span><span style="color:#E06C75">))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>内存映像文件的随机写操作</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#C678DD">byte</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#E5C07B">    unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">nextPutIndex</span><span style="color:#ABB2BF">()), ((x)));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> byte</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#E5C07B">    unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putByte</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">ix</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">checkIndex</span><span style="color:#ABB2BF">(i)), ((x)));</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内存映像文件的随机读写都是借助 ix() 方法实现定位的， ix() 方法通过内存映射空间的内存首地址（address）和给定偏移量 i 计算出指针地址，然后由 unsafe 类的 get() 和 put() 方法和对指针指向的数据进行读取或写入。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> ix</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> address </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> ((</span><span style="color:#C678DD">long</span><span style="color:#E06C75">)i </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filechannel"><span></span></a><a href="#filechannel">#</a> FileChannel</h3>
<p>FileChannel 是一个用于文件读写、映射和操作的通道，同时它在并发环境下是线程安全的，基于 FileInputStream、FileOutputStream 或者 RandomAccessFile 的 getChannel() 方法可以创建并打开一个文件通道。FileChannel 定义了 transferFrom() 和 transferTo() 两个抽象方法，它通过在通道和通道之间建立连接实现数据传输的。</p>
<ul>
<li><code>transferTo()</code>：通过 FileChannel 把文件里面的源数据写入一个 WritableByteChannel 的目的通道。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WritableByteChannel</span><span style="color:#E06C75"> target)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>transferFrom()</code>：把一个源通道 ReadableByteChannel 中的数据读取到当前 FileChannel 的文件里面。</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> abstract</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferFrom</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">ReadableByteChannel</span><span style="color:#E06C75"> src</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> count)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面给出 FileChannel 利用 transferTo() 和 transferFrom() 方法进行数据传输的使用示例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CONTENT </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "Zero copy implemented by FileChannel"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> SOURCE_FILE </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/source.txt"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> TARGET_FILE </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "/target.txt"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> CHARSET </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> "UTF-8"</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先在类加载根路径下创建 source.txt 和 target.txt 两个文件，对源文件 source.txt 文件写入初始化数据。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Before</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setup</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Path</span><span style="color:#E06C75"> source </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getClassPath</span><span style="color:#ABB2BF">(SOURCE_FILE));</span></span>
<span class="line"><span style="color:#C678DD">    byte</span><span style="color:#E06C75">[] bytes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> CONTENT</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Charset</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forName</span><span style="color:#ABB2BF">(CHARSET));</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fromChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">(source, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">            StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">WRITE</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">StandardOpenOption</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUNCATE_EXISTING</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">wrap</span><span style="color:#ABB2BF">(bytes));</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 transferTo() 方法而言，目的通道 toChannel 可以是任意的单向字节写通道 WritableByteChannel；而对于 transferFrom() 方法而言，源通道 fromChannel 可以是任意的单向字节读通道 ReadableByteChannel。其中，FileChannel、SocketChannel 和 DatagramChannel 等通道实现了 WritableByteChannel 和 ReadableByteChannel 接口，都是同时支持读写的双向通道。为了方便测试，下面给出基于 FileChannel 完成 channel-to-channel 的数据传输示例。</p>
<p>通过 transferTo() 将 fromChannel 中的数据拷贝到 toChannel</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fromChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(SOURCE_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">         FileChannel</span><span style="color:#E06C75"> toChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(TARGET_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> position </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> offset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferTo</span><span style="color:#ABB2BF">(position, offset, toChannel);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 transferFrom() 将 fromChannel 中的数据拷贝到 toChannel</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Test</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> transferFrom</span><span style="color:#E06C75">() throws Exception {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">FileChannel</span><span style="color:#E06C75"> fromChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(SOURCE_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">         FileChannel</span><span style="color:#E06C75"> toChannel </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> RandomAccessFile</span><span style="color:#E06C75">(</span></span>
<span class="line"><span style="color:#61AFEF">             getClassPath</span><span style="color:#E06C75">(TARGET_FILE)</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "rw"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> position </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        long</span><span style="color:#E06C75"> offset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fromChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        toChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferFrom</span><span style="color:#ABB2BF">(fromChannel, position, offset);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍 transferTo() 和 transferFrom() 方法的底层实现原理，这两个方法也是 java.nio.channels.FileChannel 的抽象方法，由子类 sun.nio.ch.FileChannelImpl.java 实现。transferTo() 和 transferFrom() 底层都是基于 sendfile 实现数据传输的，其中 FileChannelImpl.java 定义了 3 个常量，用于标示当前操作系统的内核是否支持 sendfile 以及 sendfile 的相关特性。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> transferSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> pipeSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> fileSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>transferSupported</code>：用于标记当前的系统内核是否支持 sendfile() 调用，默认为 true。</li>
<li><code>pipeSupported</code>：用于标记当前的系统内核是否支持文件描述符（fd）基于管道（pipe）的 sendfile() 调用，默认为 true。</li>
<li><code>fileSupported</code>：用于标记当前的系统内核是否支持文件描述符（fd）基于文件（file）的 sendfile() 调用，默认为 true。</li>
</ul>
<p>下面以 transferTo() 的源码实现为例。FileChannelImpl 首先执行 transferToDirectly() 方法，以 sendfile 的零拷贝方式尝试数据拷贝。如果系统内核不支持 sendfile，进一步执行 transferToTrustedChannel() 方法，以 mmap 的零拷贝方式进行内存映射，这种情况下目的通道必须是 FileChannelImpl 或者 SelChImpl 类型。如果以上两步都失败了，则执行 transferToArbitraryChannel() 方法，基于传统的 I/O 方式完成读写，具体步骤是初始化一个临时的 DirectBuffer，将源通道 FileChannel 的数据读取到 DirectBuffer，再写入目的通道 WritableByteChannel 里面。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferTo</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WritableByteChannel</span><span style="color:#E06C75"> target)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 计算文件的大小</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> sz </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> size</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 校验起始位置</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (position </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> sz)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> icount </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">min</span><span style="color:#ABB2BF">(count, </span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 校验偏移量</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((sz </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> position) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> icount)</span></span>
<span class="line"><span style="color:#E06C75">        icount </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(sz </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> position)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> transferToDirectly</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> transferToTrustedChannel</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target)) </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> transferToArbitraryChannel</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来重点分析一下 transferToDirectly() 方法的实现，也就是 transferTo() 通过 sendfile 实现零拷贝的精髓所在。可以看到，transferToDirectlyInternal() 方法先获取到目的通道 WritableByteChannel 的文件描述符 targetFD，获取同步锁然后执行 transferToDirectlyInternal() 方法。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferToDirectly</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> WritableByteChannel</span><span style="color:#E06C75"> target)</span></span>
<span class="line"><span style="color:#E06C75">        throws IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 省略从target获取targetFD的过程</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">nd</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferToDirectlyNeedsPositionLock</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        synchronized</span><span style="color:#E06C75"> (positionLock) {</span></span>
<span class="line"><span style="color:#C678DD">            long</span><span style="color:#E06C75"> pos </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> position</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#61AFEF"> transferToDirectlyInternal</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                        target</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> targetFD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">                position</span><span style="color:#E06C75">(pos)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> transferToDirectlyInternal</span><span style="color:#E06C75">(position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> target</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> targetFD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终由 transferToDirectlyInternal() 调用本地方法 transferTo0() ，尝试以 sendfile 的方式进行数据传输。如果系统内核完全不支持 sendfile，比如 Windows 操作系统，则返回 UNSUPPORTED 并把 transferSupported 标识为 false。如果系统内核不支持 sendfile 的一些特性，比如说低版本的 Linux 内核不支持 DMA gather copy 操作，则返回 UNSUPPORTED_CASE 并把 pipeSupported 或者 fileSupported 标识为 false。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> transferToDirectlyInternal</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                        WritableByteChannel</span><span style="color:#E06C75"> target</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                                        FileDescriptor</span><span style="color:#E06C75"> targetFD) throws IOException {</span></span>
<span class="line"><span style="color:#C678DD">    assert</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">nd</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">transferToDirectlyNeedsPositionLock</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> ||</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">holdsLock</span><span style="color:#ABB2BF">(positionLock);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> n </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> ti </span><span style="color:#56B6C2">=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#61AFEF">        begin</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        ti </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> threads</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isOpen</span><span style="color:#E06C75">())</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            n </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> transferTo0</span><span style="color:#E06C75">(fd</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> icount</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> targetFD)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((n </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">INTERRUPTED</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> isOpen</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED_CASE</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (target </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> SinkChannelImpl)</span></span>
<span class="line"><span style="color:#E06C75">                pipeSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (target </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> FileChannelImpl)</span></span>
<span class="line"><span style="color:#E06C75">                fileSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED_CASE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            transferSupported </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">UNSUPPORTED</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> IOStatus</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">normalize</span><span style="color:#ABB2BF">(n);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        threads</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(ti);</span></span>
<span class="line"><span style="color:#61AFEF">        end</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">&gt;</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本地方法（native method）transferTo0() 通过 JNI（Java Native Interface）调用底层 C 的函数，这个 native 函数（Java_sun_nio_ch_FileChannelImpl_transferTo0）同样位于 JDK 源码包下的 native/sun/nio/ch/FileChannelImpl.c 源文件里面。JNI 函数 Java_sun_nio_ch_FileChannelImpl_transferTo0() 基于条件编译对不同的系统进行预编译，下面是 JDK 基于 Linux 系统内核对 transferTo() 提供的调用封装。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">#if</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__linux__</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">||</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__solaris__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/sendfile.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">_AIX</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">_ALLBSD_SOURCE</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/uio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">#define</span><span style="color:#61AFEF"> lseek64</span><span style="color:#ABB2BF"> lseek</span></span>
<span class="line"><span style="color:#C678DD">#define</span><span style="color:#61AFEF"> mmap64</span><span style="color:#ABB2BF"> mmap</span></span>
<span class="line"><span style="color:#C678DD">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">JNIEXPORT jlong JNICALL</span></span>
<span class="line"><span style="color:#61AFEF">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">JNIEnv </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">env</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">this</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                            jobject </span><span style="color:#E06C75;font-style:italic">srcFDO</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                            jlong </span><span style="color:#E06C75;font-style:italic">position</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">count</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">                                            jobject </span><span style="color:#E06C75;font-style:italic">dstFDO</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF">    jint srcFD </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> fdval</span><span style="color:#ABB2BF">(env, srcFDO);</span></span>
<span class="line"><span style="color:#ABB2BF">    jint dstFD </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> fdval</span><span style="color:#ABB2BF">(env, dstFDO);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">#if</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__linux__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2">    off64_t</span><span style="color:#ABB2BF"> offset </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">off64_t</span><span style="color:#ABB2BF">)position;</span></span>
<span class="line"><span style="color:#ABB2BF">    jlong n </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> sendfile64</span><span style="color:#ABB2BF">(dstFD, srcFD, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">offset, (</span><span style="color:#C678DD">size_t</span><span style="color:#ABB2BF">)count);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> n;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__solaris__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    result </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> sendfilev64</span><span style="color:#ABB2BF">(dstFD, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">sfv, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">numBytes);    </span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#C678DD">#elif</span><span style="color:#C678DD"> defined</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">__APPLE__</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    result </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> sendfile</span><span style="color:#ABB2BF">(srcFD, dstFD, position, </span><span style="color:#C678DD">&amp;</span><span style="color:#ABB2BF">numBytes, </span><span style="color:#D19A66">NULL</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#ABB2BF"> result;</span></span>
<span class="line"><span style="color:#C678DD">#endif</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 Linux、Solaris 以及 Apple 系统而言，transferTo0() 函数底层会执行 sendfile64 这个系统调用完成零拷贝操作，sendfile64() 函数的原型如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">#include</span><span style="color:#98C379"> &lt;sys/sendfile.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">ssize_t</span><span style="color:#61AFEF"> sendfile64</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> out_fd</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75;font-style:italic"> in_fd</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> off_t</span><span style="color:#C678DD"> *</span><span style="color:#E06C75;font-style:italic">offset</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> size_t</span><span style="color:#E06C75;font-style:italic"> count</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面简单介绍一下 sendfile64() 函数各个参数的含义：</p>
<ul>
<li><code>out_fd</code>：待写入的文件描述符</li>
<li><code>in_fd</code>：待读取的文件描述符</li>
<li><code>offset</code>：指定 in_fd 对应文件流的读取位置，如果为空，则默认从起始位置开始</li>
<li><code>count</code>：指定在文件描述符 in_fd 和 out_fd 之间传输的字节数</li>
</ul>
<p>在 Linux 2.6.3 之前，out_fd 必须是一个 socket，而从 Linux 2.6.3 以后，out_fd 可以是任何文件。也就是说，sendfile64() 函数不仅可以进行网络文件传输，还可以对本地文件实现零拷贝操作。</p>
<h2><a class="header-anchor" href="#其它的零拷贝实现"><span></span></a><a href="#%E5%85%B6%E5%AE%83%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%AE%9E%E7%8E%B0">#</a> 其它的零拷贝实现</h2>
<h3><a class="header-anchor" href="#netty零拷贝"><span></span></a><a href="#netty%E9%9B%B6%E6%8B%B7%E8%B4%9D">#</a> Netty零拷贝</h3>
<p>Netty 中的零拷贝和上面提到的操作系统层面上的零拷贝不太一样, 我们所说的 Netty 零拷贝完全是基于（Java 层面）用户态的，它的更多的是偏向于数据操作优化这样的概念，具体表现在以下几个方面：</p>
<p>Netty 通过 DefaultFileRegion 类对 java.nio.channels.FileChannel 的 tranferTo() 方法进行包装，在文件传输时可以将文件缓冲区的数据直接发送到目的通道（Channel）</p>
<p>ByteBuf 可以通过 wrap 操作把字节数组、ByteBuf、ByteBuffer 包装成一个 ByteBuf 对象, 进而避免了拷贝操作 ByteBuf 支持 slice 操作, 因此可以将 ByteBuf 分解为多个共享同一个存储区域的 ByteBuf，避免了内存的拷贝 Netty 提供了 CompositeByteBuf 类，它可以将多个 ByteBuf 合并为一个逻辑上的 ByteBuf，避免了各个 ByteBuf 之间的拷贝 其中第 1 条属于操作系统层面的零拷贝操作，后面 3 条只能算用户层面的数据操作优化。</p>
<h3><a class="header-anchor" href="#rocketmq和kafka对比"><span></span></a><a href="#rocketmq%E5%92%8Ckafka%E5%AF%B9%E6%AF%94">#</a> RocketMQ和Kafka对比</h3>
<p>RocketMQ 选择了 mmap + write 这种零拷贝方式，适用于业务级消息这种小块文件的数据持久化和传输；而 Kafka 采用的是 sendfile 这种零拷贝方式，适用于系统日志消息这种高吞吐量的大块文件的数据持久化和传输。但是值得注意的一点是，Kafka 的索引文件使用的是 mmap + write 方式，数据文件使用的是 sendfile 方式。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-io-copy-11.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>NIO 体系详解</title>
      <link>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/IO-NIO-AIO/NIO%20%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">NIO 体系详解</source>
      <description>的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。 NIO 体系详解 流与块 通道与缓冲区 1. 通道 2. 缓冲区 缓冲区状态变量 文件 NIO 实例 选择器 1. 创建选择器 2. 将通道注册到选择器上 3. 监听事件 4. 获取到达的事件 5. 事件循环 套接字 NIO 实例...</description>
      <category>Java</category>
      <pubDate>Mon, 11 Mar 2024 14:36:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O。</p>
</blockquote>
<ul>
<li>NIO 体系详解
<ul>
<li><a href="#%E6%B5%81%E4%B8%8E%E5%9D%97">流与块</a></li>
<li>通道与缓冲区
<ul>
<li><a href="#1-%E9%80%9A%E9%81%93">1. 通道</a></li>
<li><a href="#2-%E7%BC%93%E5%86%B2%E5%8C%BA">2. 缓冲区</a></li>
</ul>
</li>
<li><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F">缓冲区状态变量</a></li>
<li><a href="#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B">文件 NIO 实例</a></li>
<li>选择器
<ul>
<li><a href="#1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8">1. 创建选择器</a></li>
<li><a href="#2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A">2. 将通道注册到选择器上</a></li>
<li><a href="#3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">3. 监听事件</a></li>
<li><a href="#4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6">4. 获取到达的事件</a></li>
<li><a href="#5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">5. 事件循环</a></li>
</ul>
</li>
<li><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B">套接字 NIO 实例</a></li>
<li><a href="#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">内存映射文件</a></li>
<li><a href="#%E5%AF%B9%E6%AF%94">对比</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<p>Standard IO是对字节流的读写，在进行IO之前，首先创建一个流对象，流对象进行读写操作都是按字节 ，一个字节一个字节的来读或写。而NIO把IO抽象成块，类似磁盘的读写，每次IO操作的单位都是一个块，块被读入内存之后就是一个byte[]，NIO一次可以读或写多个字节。</p>
<h2><a class="header-anchor" href="#流与块"><span></span></a><a href="#%E6%B5%81%E4%B8%8E%E5%9D%97">#</a> 流与块</h2>
<p>I/O 与 NIO 最重要的区别是数据打包和传输的方式，I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p>
<p>面向流的 I/O 一次处理一个字节数据: 一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的 I/O 通常相当慢。</p>
<p>面向块的 I/O 一次处理一个数据块，按块处理数据比按流处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p>
<p>I/O 包和 NIO 已经很好地集成了，<a href="http://java.io" target="_blank" rel="noopener noreferrer">java.io</a>.* 已经以 NIO 为基础重新实现了，所以现在它可以利用 NIO 的一些特性。例如，<a href="http://java.io" target="_blank" rel="noopener noreferrer">java.io</a>.* 包中的一些类包含以块的形式读写数据的方法，这使得即使在面向流的系统中，处理速度也会更快。</p>
<h2><a class="header-anchor" href="#通道与缓冲区"><span></span></a><a href="#%E9%80%9A%E9%81%93%E4%B8%8E%E7%BC%93%E5%86%B2%E5%8C%BA">#</a> 通道与缓冲区</h2>
<h3><a class="header-anchor" href="#_1-通道"><span></span></a><a href="#_1-%E9%80%9A%E9%81%93">#</a> 1. 通道</h3>
<p>通道 Channel 是对原 I/O 包中的流的模拟，可以通过它读取和写入数据。</p>
<p>通道与流的不同之处在于，流只能在一个方向上移动(一个流必须是 InputStream 或者 OutputStream 的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p>
<p>通道包括以下类型:</p>
<ul>
<li>FileChannel: 从文件中读写数据；</li>
<li>DatagramChannel: 通过 UDP 读写网络中数据；</li>
<li>SocketChannel: 通过 TCP 读写网络中数据；</li>
<li>ServerSocketChannel: 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li>
</ul>
<h3><a class="header-anchor" href="#_2-缓冲区"><span></span></a><a href="#_2-%E7%BC%93%E5%86%B2%E5%8C%BA">#</a> 2. 缓冲区</h3>
<p>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。</p>
<p>缓冲区实质上是一个数组，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读/写进程。</p>
<p>缓冲区包括以下类型:</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>ShortBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>FloatBuffer</li>
<li>DoubleBuffer</li>
</ul>
<h2><a class="header-anchor" href="#缓冲区状态变量"><span></span></a><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F">#</a> 缓冲区状态变量</h2>
<ul>
<li>capacity: 最大容量；</li>
<li>position: 当前已经读写的字节数；</li>
<li>limit: 还可以读写的字节数。</li>
</ul>
<p>状态变量的改变过程举例:</p>
<p>① 新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/80804f52-8815-4096-b506-48eef3eed5c6.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/952e06bd-5a65-4cab-82e4-dd1536462f38.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/b5bdcbe2-b958-4aef-9151-6ad963cb28b4.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/67bf5487-c45d-49b6-b9c0-a058d8c68902.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h2><a class="header-anchor" href="#文件-nio-实例"><span></span></a><a href="#%E6%96%87%E4%BB%B6-nio-%E5%AE%9E%E4%BE%8B">#</a> 文件 NIO 实例</h2>
<p>以下展示了使用 NIO 快速复制文件的实例:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fastCopy</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> src</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> dist) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获得源文件的输入字节流 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileInputStream</span><span style="color:#E06C75"> fin </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#E06C75">(src)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获取输入字节流的文件通道 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileChannel</span><span style="color:#E06C75"> fcin </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获取目标文件的输出字节流 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileOutputStream</span><span style="color:#E06C75"> fout </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#E06C75">(dist)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 获取输出字节流的通道 */</span></span>
<span class="line"><span style="color:#E5C07B">    FileChannel</span><span style="color:#E06C75"> fcout </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getChannel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /* 为缓冲区分配 1024 个字节 */</span></span>
<span class="line"><span style="color:#E5C07B">    ByteBuffer</span><span style="color:#E06C75"> buffer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocateDirect</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">true</span><span style="color:#E06C75">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 从输入通道中读取数据到缓冲区中 */</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fcin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* read() 返回 -1 表示 EOF */</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (r </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 切换读写 */</span></span>
<span class="line"><span style="color:#E5C07B">        buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 把缓冲区的内容写入输出文件中 */</span></span>
<span class="line"><span style="color:#E5C07B">        fcout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#E06C75">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /* 清空缓冲区 */</span></span>
<span class="line"><span style="color:#E5C07B">        buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#选择器"><span></span></a><a href="#%E9%80%89%E6%8B%A9%E5%99%A8">#</a> 选择器</h2>
<p>NIO 常常被叫做非阻塞 IO，主要是因为 NIO 在网络通信中的非阻塞特性被广泛使用。</p>
<p>NIO 实现了 IO 多路复用中的 Reactor 模型，一个线程 Thread 使用一个选择器 Selector 通过轮询的方式去监听多个通道 Channel 上的事件，从而让一个线程就可以处理多个事件。</p>
<p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件还未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p>
<p>因为创建和切换线程的开销很大，因此使用一个线程来处理多个事件而不是一个线程处理一个事件具有更好的性能。</p>
<p>应该注意的是，只有套接字 Channel 才能配置为非阻塞，而 FileChannel 不能，为 FileChannel 配置非阻塞也没有意义。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/4d930e22-f493-49ae-8dff-ea21cd6895dc.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#_1-创建选择器"><span></span></a><a href="#_1-%E5%88%9B%E5%BB%BA%E9%80%89%E6%8B%A9%E5%99%A8">#</a> 1. 创建选择器</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Selector</span><span style="color:#E06C75"> selector </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_2-将通道注册到选择器上"><span></span></a><a href="#_2-%E5%B0%86%E9%80%9A%E9%81%93%E6%B3%A8%E5%86%8C%E5%88%B0%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8A">#</a> 2. 将通道注册到选择器上</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">ServerSocketChannel</span><span style="color:#E06C75"> ssChannel </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ServerSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configureBlocking</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">register</span><span style="color:#ABB2BF">(selector, </span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_ACCEPT</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通道必须配置为非阻塞模式，否则使用选择器就没有任何意义了，因为如果通道在某个事件上被阻塞，那么服务器就不能响应其它事件，必须等待这个事件处理完毕才能去处理其它事件，显然这和选择器的作用背道而驰。</p>
<p>在将通道注册到选择器上时，还需要指定要注册的具体事件，主要有以下几类:</p>
<ul>
<li>SelectionKey.OP_CONNECT</li>
<li>SelectionKey.OP_ACCEPT</li>
<li>SelectionKey.OP_READ</li>
<li>SelectionKey.OP_WRITE</li>
</ul>
<p>它们在 SelectionKey 的定义如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_READ </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_WRITE </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_CONNECT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> OP_ACCEPT </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 4</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出每个事件可以被当成一个位域，从而组成事件集整数。例如:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> interestSet </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_READ</span><span style="color:#56B6C2"> |</span><span style="color:#E5C07B"> SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_WRITE</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_3-监听事件"><span></span></a><a href="#_3-%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">#</a> 3. 监听事件</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> num </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">select</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>使用 select() 来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p>
<h3><a class="header-anchor" href="#_4-获取到达的事件"><span></span></a><a href="#_4-%E8%8E%B7%E5%8F%96%E5%88%B0%E8%BE%BE%E7%9A%84%E4%BA%8B%E4%BB%B6">#</a> 4. 获取到达的事件</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keys </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">selectedKeys</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keyIterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keys</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    SelectionKey</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAcceptable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // ...</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isReadable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // ...</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#_5-事件循环"><span></span></a><a href="#_5-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">#</a> 5. 事件循环</h3>
<p>因为一次 select() 调用不能处理完所有的事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">while</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">true</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> num </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">select</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keys </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">selectedKeys</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> keyIterator </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keys</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        SelectionKey</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAcceptable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // ...</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isReadable</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // ...</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E5C07B">        keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#套接字-nio-实例"><span></span></a><a href="#%E5%A5%97%E6%8E%A5%E5%AD%97-nio-%E5%AE%9E%E4%BE%8B">#</a> 套接字 NIO 实例</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NIOServer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Selector</span><span style="color:#E06C75"> selector</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ServerSocketChannel</span><span style="color:#E06C75"> ssChannel</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ServerSocketChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">open</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configureBlocking</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">register</span><span style="color:#ABB2BF">(selector, </span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_ACCEPT</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ServerSocket</span><span style="color:#E06C75"> serverSocket</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ssChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">socket</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        InetSocketAddress</span><span style="color:#E06C75"> address</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> InetSocketAddress</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"127.0.0.1"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8888</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        serverSocket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">bind</span><span style="color:#ABB2BF">(address);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">select</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">keys</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> selector</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">selectedKeys</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">keyIterator</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> keys</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hasNext</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                SelectionKey</span><span style="color:#E06C75"> key</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">next</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isAcceptable</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                    ServerSocketChannel</span><span style="color:#E06C75"> ssChannel1</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (ServerSocketChannel) </span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">channel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 服务器会为每个新连接创建一个 SocketChannel</span></span>
<span class="line"><span style="color:#E5C07B">                    SocketChannel</span><span style="color:#E06C75"> sChannel</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ssChannel1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                    sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">configureBlocking</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 这个新连接主要用于从客户端读取数据</span></span>
<span class="line"><span style="color:#E5C07B">                    sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">register</span><span style="color:#ABB2BF">(selector, </span><span style="color:#E5C07B">SelectionKey</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">OP_READ</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">                } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isReadable</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                    SocketChannel</span><span style="color:#E06C75"> sChannel</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (SocketChannel) </span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">channel</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">                    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">readDataFromSocketChannel</span><span style="color:#ABB2BF">(sChannel));</span></span>
<span class="line"><span style="color:#E5C07B">                    sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">                keyIterator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> readDataFromSocketChannel</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">SocketChannel</span><span style="color:#E06C75;font-style:italic"> sChannel</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        ByteBuffer</span><span style="color:#E06C75"> buffer</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ByteBuffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">allocate</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        StringBuilder</span><span style="color:#E06C75"> data</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuilder</span><span style="color:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">            buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> n</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sChannel</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer);</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> (n </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flip</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> limit</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            char</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">dst</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> char</span><span style="color:#ABB2BF">[limit];</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; i </span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF"> limit; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF">                dst[i] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">char</span><span style="color:#ABB2BF">) </span><span style="color:#E5C07B">buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(i);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            data</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(dst);</span></span>
<span class="line"><span style="color:#E5C07B">            buffer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> data</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> NIOClient</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        Socket</span><span style="color:#E06C75"> socket</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Socket</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"127.0.0.1"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8888</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        OutputStream</span><span style="color:#E06C75"> out</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> socket</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getOutputStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> s</span><span style="color:#56B6C2"> =</span><span style="color:#98C379"> "hello world"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#内存映射文件"><span></span></a><a href="#%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">#</a> 内存映射文件</h2>
<p>内存映射文件 I/O 是一种读和写文件数据的方法，它可以比常规的基于流或者基于通道的 I/O 快得多。</p>
<p>向内存映射文件写入可能是危险的，只是改变数组的单个元素这样的简单操作，就可能会直接修改磁盘上的文件。修改数据与将数据保存到磁盘是没有分开的。</p>
<p>下面代码行将文件的前 1024 个字节映射到内存中，map() 方法返回一个 MappedByteBuffer，它是 ByteBuffer 的子类。因此，可以像使用其他任何 ByteBuffer 一样使用新映射的缓冲区，操作系统会在需要时负责执行映射。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">MappedByteBuffer</span><span style="color:#E06C75"> mbb </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> fc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">FileChannel</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MapMode</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">READ_WRITE</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1024</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#对比"><span></span></a><a href="#%E5%AF%B9%E6%AF%94">#</a> 对比</h2>
<p>NIO 与普通 I/O 的区别主要有以下两点:</p>
<ul>
<li>NIO 是非阻塞的</li>
<li>NIO 面向块，I/O 面向流</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/1bea398f-17a7-4f67-a90b-9e2d243eaa9a.png" type="image/png"/>
    </item>
    <item>
      <title>GC 垃圾回收器之CMS GC问题分析与解决</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BCMS%20GC%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BCMS%20GC%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收器之CMS GC问题分析与解决</source>
      <description>本文整理自美团技术团队在新窗口打开, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。 GC 垃圾回收器之CMS GC问题分析与解决 写在前面</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文整理自<a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html" target="_blank" rel="noopener noreferrer">美团技术团队在新窗口打开</a>, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。</p>
</blockquote>
<ul>
<li>
<p>GC 垃圾回收器之CMS GC问题分析与解决</p>
<ul>
<li>
<ol>
<li>写在前面</li>
</ol>
</li>
</ul>
<!-- more -->
<ul>
<li>
<p><a href="#11-%E5%BC%95%E8%A8%80">1.1 引言</a></p>
</li>
<li>
<p><a href="#12-%E6%A6%82%E8%A7%88">1.2 概览</a></p>
</li>
<li>
<ol start="2">
<li>GC 基础</li>
</ol>
<ul>
<li><a href="#21-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">2.1 基础概念</a></li>
<li><a href="#22-jvm-%E5%86%85%E5%AD%98%E5%88%92%E5%88%86">2.2 JVM 内存划分</a></li>
<li><a href="#23-%E5%88%86%E9%85%8D%E5%AF%B9%E8%B1%A1">2.3 分配对象</a></li>
<li>2.4 收集对象
<ul>
<li><a href="#241-%E8%AF%86%E5%88%AB%E5%9E%83%E5%9C%BE">2.4.1 识别垃圾</a></li>
<li><a href="#242-%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95">2.4.2 收集算法</a></li>
</ul>
</li>
<li>2.5 收集器
<ul>
<li><a href="#251-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E5%99%A8">2.5.1 分代收集器</a></li>
<li><a href="#252-%E5%88%86%E5%8C%BA%E6%94%B6%E9%9B%86%E5%99%A8">2.5.2 分区收集器</a></li>
<li><a href="#253-%E5%B8%B8%E7%94%A8%E6%94%B6%E9%9B%86%E5%99%A8">2.5.3 常用收集器</a></li>
<li><a href="#254-%E5%85%B6%E4%BB%96%E6%94%B6%E9%9B%86%E5%99%A8">2.5.4 其他收集器</a></li>
</ul>
</li>
<li>2.6 常用工具
<ul>
<li><a href="#261-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF">2.6.1 命令行终端</a></li>
<li><a href="#262-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">2.6.2 可视化界面</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="3">
<li>GC 问题判断</li>
</ol>
<ul>
<li>3.1 判断 GC 有没有问题？
<ul>
<li><a href="#311-%E8%AE%BE%E5%AE%9A%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86">3.1.1 设定评价标准</a></li>
<li><a href="#312-%E8%AF%BB%E6%87%82-gc-cause">3.1.2 读懂 GC Cause</a></li>
</ul>
</li>
<li><a href="#32-%E5%88%A4%E6%96%AD%E6%98%AF%E4%B8%8D%E6%98%AF-gc-%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98">3.2 判断是不是 GC 引发的问题？</a></li>
<li>3.3 问题分类导读
<ul>
<li><a href="#331-mutator-%E7%B1%BB%E5%9E%8B">3.3.1 Mutator 类型</a></li>
<li><a href="#332-gc-%E9%97%AE%E9%A2%98%E5%88%86%E7%B1%BB">3.3.2 GC 问题分类</a></li>
<li><a href="#333-%E6%8E%92%E6%9F%A5%E9%9A%BE%E5%BA%A6">3.3.3 排查难度</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="4">
<li>常见场景分析与解决</li>
</ol>
<ul>
<li>4.1 场景一：动态扩容引起的空间震荡
<ul>
<li><a href="#411-%E7%8E%B0%E8%B1%A1">4.1.1 现象</a></li>
<li><a href="#412-%E5%8E%9F%E5%9B%A0">4.1.2 原因</a></li>
<li><a href="#413-%E7%AD%96%E7%95%A5">4.1.3 策略</a></li>
<li><a href="#414-%E5%B0%8F%E7%BB%93">4.1.4 小结</a></li>
</ul>
</li>
<li>4.2 场景二：显式 GC 的去与留
<ul>
<li><a href="#421-%E7%8E%B0%E8%B1%A1">4.2.1 现象</a></li>
<li><a href="#422-%E5%8E%9F%E5%9B%A0">4.2.2 原因</a></li>
<li><a href="#423-%E7%AD%96%E7%95%A5">4.2.3 策略</a></li>
<li><a href="#424-%E5%B0%8F%E7%BB%93">4.2.4 小结</a></li>
</ul>
</li>
<li>4.3 场景三：MetaSpace 区 OOM
<ul>
<li><a href="#431-%E7%8E%B0%E8%B1%A1">4.3.1 现象</a></li>
<li><a href="#432-%E5%8E%9F%E5%9B%A0">4.3.2 原因</a></li>
<li><a href="#433-%E7%AD%96%E7%95%A5">4.3.3 策略</a></li>
<li><a href="#434-%E5%B0%8F%E7%BB%93">4.3.4 小结</a></li>
</ul>
</li>
<li>4.4 场景四：过早晋升 *
<ul>
<li><a href="#441-%E7%8E%B0%E8%B1%A1">4.4.1 现象</a></li>
<li><a href="#442-%E5%8E%9F%E5%9B%A0">4.4.2 原因</a></li>
<li><a href="#443-%E7%AD%96%E7%95%A5">4.4.3 策略</a></li>
<li><a href="#444-%E5%B0%8F%E7%BB%93">4.4.4 小结</a></li>
<li><a href="#445-%E5%8A%A0%E9%A4%90">4.4.5 加餐</a></li>
</ul>
</li>
<li>4.5 场景五：CMS Old GC 频繁*
<ul>
<li><a href="#451-%E7%8E%B0%E8%B1%A1">4.5.1 现象</a></li>
<li><a href="#452-%E5%8E%9F%E5%9B%A0">4.5.2 原因</a></li>
<li><a href="#453-%E7%AD%96%E7%95%A5">4.5.3 策略</a></li>
<li><a href="#454-%E5%B0%8F%E7%BB%93">4.5.4 小结</a></li>
</ul>
</li>
<li>4.6 场景六：单次 CMS Old GC 耗时长*
<ul>
<li><a href="#461-%E7%8E%B0%E8%B1%A1">4.6.1 现象</a></li>
<li><a href="#462-%E5%8E%9F%E5%9B%A0">4.6.2 原因</a></li>
<li><a href="#463-%E7%AD%96%E7%95%A5">4.6.3 策略</a></li>
<li><a href="#464-%E5%B0%8F%E7%BB%93">4.6.4 小结</a></li>
</ul>
</li>
<li>4.7 场景七：内存碎片&amp;收集器退化
<ul>
<li><a href="#471-%E7%8E%B0%E8%B1%A1">4.7.1 现象</a></li>
<li><a href="#472-%E5%8E%9F%E5%9B%A0">4.7.2 原因</a></li>
<li><a href="#473-%E7%AD%96%E7%95%A5">4.7.3 策略</a></li>
<li><a href="#474-%E5%B0%8F%E7%BB%93">4.7.4 小结</a></li>
</ul>
</li>
<li>4.8 场景八：堆外内存 OOM
<ul>
<li><a href="#481-%E7%8E%B0%E8%B1%A1">4.8.1 现象</a></li>
<li><a href="#482-%E5%8E%9F%E5%9B%A0">4.8.2 原因</a></li>
<li><a href="#483-%E7%AD%96%E7%95%A5">4.8.3 策略</a></li>
<li><a href="#484-%E5%B0%8F%E7%BB%93">4.8.4 小结</a></li>
</ul>
</li>
<li>4.9 场景九：JNI 引发的 GC 问题
<ul>
<li><a href="#491-%E7%8E%B0%E8%B1%A1">4.9.1 现象</a></li>
<li><a href="#492-%E5%8E%9F%E5%9B%A0">4.9.2 原因</a></li>
<li><a href="#493-%E7%AD%96%E7%95%A5">4.9.3 策略</a></li>
<li><a href="#494-%E5%B0%8F%E7%BB%93">4.9.4 小结</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="5">
<li>总结</li>
</ol>
<ul>
<li><a href="#51-%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8Bsop">5.1 处理流程（SOP）</a></li>
<li><a href="#52-%E6%A0%B9%E5%9B%A0%E9%B1%BC%E9%AA%A8%E5%9B%BE">5.2 根因鱼骨图</a></li>
<li><a href="#53-%E8%B0%83%E4%BC%98%E5%BB%BA%E8%AE%AE">5.3 调优建议</a></li>
</ul>
</li>
<li>
<p><a href="#6-%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E">6. 写在最后</a></p>
</li>
<li>
<p><a href="#7-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">7. 参考资料</a></p>
</li>
<li>
<p><a href="#8-%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B">8. 作者简介</a></p>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#_1-写在前面"><span></span></a><a href="#_1-%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2">#</a> 1. 写在前面</h2>
<blockquote>
<p>本文主要针对 Hotspot VM 中“CMS + ParNew”组合的一些使用场景进行总结。重点通过部分源码对根因进行分析以及对排查方法进行总结，排查过程会省略较多，另外本文专业术语较多，有一定的阅读门槛，如未介绍清楚，还请自行查阅相关材料。</p>
</blockquote>
<h3><a class="header-anchor" href="#_1-1-引言"><span></span></a><a href="#_1-1-%E5%BC%95%E8%A8%80">#</a> 1.1 引言</h3>
<p>自 Sun 发布 Java 语言以来，开始使用 GC 技术来进行内存自动管理，避免了手动管理带来的悬挂指针（Dangling Pointer）问题，很大程度上提升了开发效率，从此 GC 技术也一举成名。GC 有着非常悠久的历史，1960 年有着“Lisp 之父”和“人工智能之父”之称的 John McCarthy 就在论文中发布了 GC 算法，60 年以来， GC 技术的发展也突飞猛进，但不管是多么前沿的收集器也都是基于三种基本算法的组合或应用，也就是说 GC 要解决的根本问题这么多年一直都没有变过。笔者认为，在不太远的将来， GC 技术依然不会过时，比起日新月异的新技术，GC 这门古典技术更值得我们学习。</p>
<p>目前，互联网上 Java 的 GC 资料要么是主要讲解理论，要么就是针对单一场景的 GC 问题进行了剖析，对整个体系总结的资料少之又少。前车之鉴，后事之师，美团的几位工程师搜集了内部各种 GC 问题的分析文章，并结合个人的理解做了一些总结，希望能起到“抛砖引玉”的作用，文中若有错误之处，还请大家不吝指正。</p>
<p>GC 问题处理能力能不能系统性掌握？一些影响因素都是互为因果的问题该怎么分析？比如一个服务 RT 突然上涨，有 GC 耗时增大、线程 Block 增多、慢查询增多、CPU 负载高四个表象，到底哪个是诱因？如何判断 GC 有没有问题？使用 CMS 有哪些常见问题？如何判断根因是什么？如何解决或避免这些问题？阅读完本文，相信你将会对 CMS GC 的问题处理有一个系统性的认知，更能游刃有余地解决这些问题，下面就让我们开始吧！</p>
<h3><a class="header-anchor" href="#_1-2-概览"><span></span></a><a href="#_1-2-%E6%A6%82%E8%A7%88">#</a> 1.2 概览</h3>
<p>想要系统性地掌握 GC 问题处理，笔者这里给出一个学习路径，整体文章的框架也是按照这个结构展开，主要分四大步。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><strong>建立知识体系</strong>： 从 JVM 的内存结构到垃圾收集的算法和收集器，学习 GC 的基础知识，掌握一些常用的 GC 问题分析工具。</p>
<p><strong>确定评价指标</strong>： 了解基本 GC 的评价方法，摸清如何设定独立系统的指标，以及在业务场景中判断 GC 是否存在问题的手段。</p>
<p><strong>场景调优实践</strong>： 运用掌握的知识和系统评价指标，分析与解决九种 CMS 中常见 GC 问题场景。</p>
<p><strong>总结优化经验</strong>： 对整体过程做总结并提出笔者的几点建议，同时将总结到的经验完善到知识体系之中。</p>
<h2><a class="header-anchor" href="#_2-gc-基础"><span></span></a><a href="#_2-gc-%E5%9F%BA%E7%A1%80">#</a> 2. GC 基础</h2>
<p>在正式开始前，先做些简要铺垫，介绍下 JVM 内存划分、收集算法、收集器等常用概念介绍，基础比较好的同学可以直接跳过这部分。</p>
<h3><a class="header-anchor" href="#_2-1-基础概念"><span></span></a><a href="#_2-1-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">#</a> 2.1 基础概念</h3>
<ul>
<li><strong>GC</strong>： GC 本身有三种语义，下文需要根据具体场景带入不同的语义：
<ul>
<li><strong>Garbage Collection</strong>：垃圾收集技术，名词。</li>
<li><strong>Garbage Collector</strong>：垃圾收集器，名词。</li>
<li><strong>Garbage Collecting</strong>：垃圾收集动作，动词。</li>
</ul>
</li>
<li><strong>Mutator</strong>： 生产垃圾的角色，也就是我们的应用程序，垃圾制造者，通过 Allocator 进行 allocate 和 free。</li>
<li><strong>TLAB</strong>： Thread Local Allocation Buffer 的简写，基于 CAS 的独享线程（Mutator Threads）可以优先将对象分配在 Eden 中的一块内存，因为是 Java 线程独享的内存区没有锁竞争，所以分配速度更快，每个 TLAB 都是一个线程独享的。</li>
<li><strong>Card Table</strong>： 中文翻译为卡表，主要是用来标记卡页的状态，每个卡表项对应一个卡页。当卡页中一个对象引用有写操作时，写屏障将会标记对象所在的卡表状态改为 dirty，卡表的本质是用来解决跨代引用的问题。具体怎么解决的可以参考 StackOverflow 上的这个问题 <a href="https://stackoverflow.com/questions/19154607/how-actually-card-table-and-writer-barrier-works" target="_blank" rel="noopener noreferrer">how-actually-card-table-and-writer-barrier-works在新窗口打开</a>，或者研读一下 cardTableRS.app 中的源码。</li>
</ul>
<h3><a class="header-anchor" href="#_2-2-jvm-内存划分"><span></span></a><a href="#_2-2-jvm-%E5%86%85%E5%AD%98%E5%88%92%E5%88%86">#</a> 2.2 JVM 内存划分</h3>
<p>从 JCP（Java Community Process）的官网中可以看到，目前 Java 版本最新已经到了 Java 16，未来的 Java 17 以及现在的 Java 11 和 Java 8 是 LTS 版本，JVM 规范也在随着迭代在变更，由于本文主要讨论 CMS，此处还是放 Java 8 的内存结构。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>GC 主要工作在 Heap 区和 MetaSpace 区（上图蓝色部分），在 Direct Memory 中，如果使用的是 DirectByteBuffer，那么在分配内存不够时则是 GC 通过 Cleaner#clean 间接管理。</p>
<p>任何自动内存管理系统都会面临的步骤：为新对象分配空间，然后收集垃圾对象空间，下面我们就展开介绍一下这些基础知识。</p>
<h3><a class="header-anchor" href="#_2-3-分配对象"><span></span></a><a href="#_2-3-%E5%88%86%E9%85%8D%E5%AF%B9%E8%B1%A1">#</a> 2.3 分配对象</h3>
<p>Java 中对象地址操作主要使用 Unsafe 调用了 C 的 allocate 和 free 两个方法，分配方法有两种：</p>
<ul>
<li><strong>空闲链表</strong>（free list）： 通过额外的存储记录空闲的地址，将随机 IO 变为顺序 IO，但带来了额外的空间消耗。</li>
<li><strong>碰撞指针</strong>（bump pointer）： 通过一个指针作为分界点，需要分配内存时，仅需把指针往空闲的一端移动与对象大小相等的距离，分配效率较高，但使用场景有限。</li>
</ul>
<h3><a class="header-anchor" href="#_2-4-收集对象"><span></span></a><a href="#_2-4-%E6%94%B6%E9%9B%86%E5%AF%B9%E8%B1%A1">#</a> 2.4 收集对象</h3>
<h4><a class="header-anchor" href="#_2-4-1-识别垃圾"><span></span></a><a href="#_2-4-1-%E8%AF%86%E5%88%AB%E5%9E%83%E5%9C%BE">#</a> 2.4.1 识别垃圾</h4>
<p><strong>引用计数法</strong>（Reference Counting）： 对每个对象的引用进行计数，每当有一个地方引用它时计数器 +1、引用失效则 -1，引用的计数放到对象头中，大于 0 的对象被认为是存活对象。虽然循环引用的问题可通过 Recycler 算法解决，但是在多线程环境下，引用计数变更也要进行昂贵的同步操作，性能较低，早期的编程语言会采用此算法。</p>
<p><strong>可达性分析</strong>，又称引用链法（Tracing GC）： 从 GC Root 开始进行对象搜索，可以被搜索到的对象即为可达对象，此时还不足以判断对象是否存活/死亡，需要经过多次标记才能更加准确地确定，整个连通图之外的对象便可以作为垃圾被回收掉。目前 Java 中主流的虚拟机均采用此算法。</p>
<blockquote>
<p>备注：引用计数法是可以处理循环引用问题的，下次面试时不要再这么说啦~ ~</p>
</blockquote>
<h4><a class="header-anchor" href="#_2-4-2-收集算法"><span></span></a><a href="#_2-4-2-%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95">#</a> 2.4.2 收集算法</h4>
<p>自从有自动内存管理出现之时就有的一些收集算法，不同的收集器也是在不同场景下进行组合。</p>
<p><strong>Mark-Sweep</strong>（标记-清除）： 回收过程主要分为两个阶段，第一阶段为追踪（Tracing）阶段，即从 GC Root 开始遍历对象图，并标记（Mark）所遇到的每个对象，第二阶段为清除（Sweep）阶段，即回收器检查堆中每一个对象，并将所有未被标记的对象进行回收，整个过程不会发生对象移动。整个算法在不同的实现中会使用三色抽象（Tricolour Abstraction）、位图标记（BitMap）等技术来提高算法的效率，存活对象较多时较高效。</p>
<p><strong>Mark-Compact</strong> （标记-整理）： 这个算法的主要目的就是解决在非移动式回收器中都会存在的碎片化问题，也分为两个阶段，第一阶段与 Mark-Sweep 类似，第二阶段则会对存活对象按照整理顺序（Compaction Order）进行整理。主要实现有双指针（Two-Finger）回收算法、滑动回收（Lisp2）算法和引线整理（Threaded Compaction）算法等。</p>
<p><strong>Copying</strong>（复制）： 将空间分为两个大小相同的 From 和 To 两个半区，同一时间只会使用其中一个，每次进行回收时将一个半区的存活对象通过复制的方式转移到另一个半区。有递归（Robert R. Fenichel 和 Jerome C. Yochelson提出）和迭代（Cheney 提出）算法，以及解决了前两者递归栈、缓存行等问题的近似优先搜索算法。复制算法可以通过碰撞指针的方式进行快速地分配内存，但是也存在着空间利用率不高的缺点，另外就是存活对象比较大时复制的成本比较高。</p>
<p>三种算法在是否移动对象、空间和时间方面的一些对比，假设存活对象数量为 <em>L</em>、堆空间大小为 <em>H</em>，则：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>把 mark、sweep、compaction、copying 这几种动作的耗时放在一起看，大致有这样的关系：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-4.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>虽然 compaction 与 copying 都涉及移动对象，但取决于具体算法，compaction 可能要先计算一次对象的目标地址，然后修正指针，最后再移动对象。copying 则可以把这几件事情合为一体来做，所以可以快一些。另外，还需要留意 GC 带来的开销不能只看 Collector 的耗时，还得看 Allocator 。如果能保证内存没碎片，分配就可以用 pointer bumping 方式，只需要挪一个指针就完成了分配，非常快。而如果内存有碎片就得用 freelist 之类的方式管理，分配速度通常会慢一些。</p>
<h3><a class="header-anchor" href="#_2-5-收集器"><span></span></a><a href="#_2-5-%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5 收集器</h3>
<p>目前在 Hotspot VM 中主要有分代收集和分区收集两大类，具体可以看下面的这个图，不过未来会逐渐向分区收集发展。在美团内部，有部分业务尝试用了 ZGC（感兴趣的同学可以学习下这篇文章 <a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>），其余基本都停留在 CMS 和 G1 上。另外在 JDK11 后提供了一个不执行任何垃圾回收动作的回收器 Epsilon（A No-Op Garbage Collector）用作性能分析。另外一个就是 Azul 的 Zing JVM，其 C4（Concurrent Continuously Compacting Collector）收集器也在业内有一定的影响力。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-5.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>备注：值得一提的是，早些年国内 GC 技术的布道者 RednaxelaFX （江湖人称 R 大）也曾就职于 Azul，本文的一部分材料也参考了他的一些文章。</p>
</blockquote>
<h4><a class="header-anchor" href="#_2-5-1-分代收集器"><span></span></a><a href="#_2-5-1-%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.1 分代收集器</h4>
<ul>
<li><strong>ParNew</strong>： 一款多线程的收集器，采用复制算法，主要工作在 Young 区，可以通过 <code>-XX:ParallelGCThreads</code> 参数来控制收集的线程数，整个过程都是 STW 的，常与 CMS 组合使用。</li>
<li><strong>CMS</strong>： 以获取最短回收停顿时间为目标，采用“标记-清除”算法，分 4 大步进行垃圾收集，其中初始标记和重新标记会 STW ，多数应用于互联网站或者 B/S 系统的服务器端上，JDK9 被标记弃用，JDK14 被删除，详情可见 <a href="https://openjdk.java.net/jeps/363" target="_blank" rel="noopener noreferrer">JEP 363在新窗口打开</a>。</li>
</ul>
<h4><a class="header-anchor" href="#_2-5-2-分区收集器"><span></span></a><a href="#_2-5-2-%E5%88%86%E5%8C%BA%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.2 分区收集器</h4>
<ul>
<li><strong>G1</strong>： 一种服务器端的垃圾收集器，应用在多处理器和大容量内存环境中，在实现高吞吐量的同时，尽可能地满足垃圾收集暂停时间的要求。</li>
<li><strong>ZGC</strong>： JDK11 中推出的一款低延迟垃圾回收器，适用于大内存低延迟服务的内存管理和回收，SPECjbb 2015 基准测试，在 128G 的大堆下，最大停顿时间才 1.68 ms，停顿时间远胜于 G1 和 CMS。</li>
<li><strong>Shenandoah</strong>： 由 Red Hat 的一个团队负责开发，与 G1 类似，基于 Region 设计的垃圾收集器，但不需要 Remember Set 或者 Card Table 来记录跨 Region 引用，停顿时间和堆的大小没有任何关系。停顿时间与 ZGC 接近，下图为与 CMS 和 G1 等收集器的 benchmark。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-6.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-5-3-常用收集器"><span></span></a><a href="#_2-5-3-%E5%B8%B8%E7%94%A8%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.3 常用收集器</h4>
<p>目前使用最多的是 CMS 和 G1 收集器，二者都有分代的概念，主要内存结构如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-5-4-其他收集器"><span></span></a><a href="#_2-5-4-%E5%85%B6%E4%BB%96%E6%94%B6%E9%9B%86%E5%99%A8">#</a> 2.5.4 其他收集器</h4>
<p>以上仅列出常见收集器，除此之外还有很多，如 Metronome、Stopless、Staccato、Chicken、Clover 等实时回收器，Sapphire、Compressor、Pauseless 等并发复制/整理回收器，Doligez-Leroy-Conthier 等标记整理回收器，由于篇幅原因，不在此一一介绍。</p>
<h3><a class="header-anchor" href="#_2-6-常用工具"><span></span></a><a href="#_2-6-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">#</a> 2.6 常用工具</h3>
<p>工欲善其事，必先利其器，此处列出一些笔者常用的工具，具体情况大家可以自由选择，本文的问题都是使用这些工具来定位和分析的。</p>
<h4><a class="header-anchor" href="#_2-6-1-命令行终端"><span></span></a><a href="#_2-6-1-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF">#</a> 2.6.1 命令行终端</h4>
<ul>
<li>标准终端类：jps、jinfo、jstat、jstack、jmap</li>
<li>功能整合类：jcmd、vjtools、arthas、greys</li>
</ul>
<h4><a class="header-anchor" href="#_2-6-2-可视化界面"><span></span></a><a href="#_2-6-2-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2">#</a> 2.6.2 可视化界面</h4>
<ul>
<li>简易：JConsole、JVisualvm、HA、GCHisto、GCViewer</li>
<li>进阶：MAT、JProfiler</li>
<li>命令行推荐 <a href="">arthas</a> ，可视化界面推荐 JProfiler，此外还有一些在线的平台 gceasy、heaphero、fastthread ，美团内部的 Scalpel（一款自研的 JVM 问题诊断工具，暂时未开源）也比较好用。</li>
</ul>
<h2><a class="header-anchor" href="#_3-gc-问题判断"><span></span></a><a href="#_3-gc-%E9%97%AE%E9%A2%98%E5%88%A4%E6%96%AD">#</a> 3. GC 问题判断</h2>
<p>在做 GC 问题排查和优化之前，我们需要先来明确下到底是不是 GC 直接导致的问题，或者应用代码导致的 GC 异常，最终出现问题。</p>
<h3><a class="header-anchor" href="#_3-1-判断-gc-有没有问题"><span></span></a><a href="#_3-1-%E5%88%A4%E6%96%AD-gc-%E6%9C%89%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98">#</a> 3.1 判断 GC 有没有问题？</h3>
<h4><a class="header-anchor" href="#_3-1-1-设定评价标准"><span></span></a><a href="#_3-1-1-%E8%AE%BE%E5%AE%9A%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86">#</a> 3.1.1 设定评价标准</h4>
<p>评判 GC 的两个核心指标：</p>
<ul>
<li><strong>延迟（Latency）</strong>： 也可以理解为最大停顿时间，即垃圾收集过程中一次 STW 的最长时间，越短越好，一定程度上可以接受频次的增大，GC 技术的主要发展方向。</li>
<li><strong>吞吐量（Throughput）</strong>： 应用系统的生命周期内，由于 GC 线程会占用 Mutator 当前可用的 CPU 时钟周期，吞吐量即为 Mutator 有效花费的时间占系统总运行时间的百分比，例如系统运行了 100 min，GC 耗时 1 min，则系统吞吐量为 99%，吞吐量优先的收集器可以接受较长的停顿。</li>
</ul>
<p>目前各大互联网公司的系统基本都更追求低延时，避免一次 GC 停顿的时间过长对用户体验造成损失，衡量指标需要结合一下应用服务的 SLA，主要如下两点来判断：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-8.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>简而言之，即为一次停顿的时间不超过应用服务的 TP9999，GC 的吞吐量不小于 99.99%。举个例子，假设某个服务 A 的 TP9999 为 80 ms，平均 GC 停顿为 30 ms，那么该服务的最大停顿时间最好不要超过 80 ms，GC 频次控制在 5 min 以上一次。如果满足不了，那就需要调优或者通过更多资源来进行并联冗余。（大家可以先停下来，看看监控平台上面的 gc.meantime 分钟级别指标，如果超过了 6 ms 那单机 GC 吞吐量就达不到 4 个 9 了。）</p>
<blockquote>
<p>备注：除了这两个指标之外还有 Footprint（资源量大小测量）、反应速度等指标，互联网这种实时系统追求低延迟，而很多嵌入式系统则追求 Footprint。</p>
</blockquote>
<h4><a class="header-anchor" href="#_3-1-2-读懂-gc-cause"><span></span></a><a href="#_3-1-2-%E8%AF%BB%E6%87%82-gc-cause">#</a> 3.1.2 读懂 GC Cause</h4>
<p>拿到 GC 日志，我们就可以简单分析 GC 情况了，通过一些工具，我们可以比较直观地看到 Cause 的分布情况，如下图就是使用 gceasy 绘制的图表：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，我们很清晰的就能知道是什么原因引起的 GC，以及每次的时间花费情况，但是要分析 GC 的问题，先要读懂 GC Cause，即 JVM 什么样的条件下选择进行 GC 操作，具体 Cause 的分类可以看一下 Hotspot 源码：<code>src/share/vm/gc/shared/gcCause.hpp 和 src/share/vm/gc/shared/gcCause.cpp</code> 中。</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#C678DD"> char*</span><span style="color:#E5C07B"> GCCause</span><span style="color:#ABB2BF">::</span><span style="color:#61AFEF">to_string</span><span style="color:#ABB2BF">(GCCause::</span><span style="color:#E5C07B">Cause</span><span style="color:#E06C75;font-style:italic"> cause</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">  switch</span><span style="color:#ABB2BF"> (cause) {</span></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _java_lang_system_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "System.gc()"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _full_gc_alot:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "FullGCAlot"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _scavenge_alot:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "ScavengeAlot"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _allocation_profiler:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Allocation Profiler"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _jvmti_force_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "JvmtiEnv ForceGarbageCollection"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _gc_locker:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "GCLocker Initiated GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _heap_inspection:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Heap Inspection Initiated GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _heap_dump:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Heap Dump Initiated GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _wb_young_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "WhiteBox Initiated Young GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _wb_conc_mark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "WhiteBox Initiated Concurrent Mark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _wb_full_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "WhiteBox Initiated Full GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _no_gc:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "No GC"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _allocation_failure:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Allocation Failure"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _tenured_generation_full:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Tenured Generation Full"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _metadata_GC_threshold:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Metadata GC Threshold"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _metadata_GC_clear_soft_refs:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Metadata GC Clear Soft References"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_generation_full:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Generation Full"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_initial_mark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Initial Mark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_final_remark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Final Remark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _cms_concurrent_mark:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "CMS Concurrent Mark"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _old_generation_expanded_on_last_scavenge:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Old Generation Expanded On Last Scavenge"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _old_generation_too_full_to_scavenge:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Old Generation Too Full To Scavenge"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _adaptive_size_policy:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Ergonomics"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _g1_inc_collection_pause:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "G1 Evacuation Pause"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _g1_humongous_allocation:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "G1 Humongous Allocation"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _dcmd_gc_run:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "Diagnostic Command"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    case</span><span style="color:#ABB2BF"> _last_gc_cause:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "ILLEGAL VALUE - last gc cause - ILLEGAL VALUE"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    default</span><span style="color:#ABB2BF">:</span></span>
<span class="line"><span style="color:#C678DD">      return</span><span style="color:#98C379"> "unknown GCCause"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#61AFEF">  ShouldNotReachHere</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点需要关注的几个GC Cause：</p>
<ul>
<li><code>System.gc()</code>： 手动触发GC操作。</li>
<li><code>CMS</code>： CMS GC 在执行过程中的一些动作，重点关注 CMS Initial Mark 和 CMS Final Remark 两个 STW 阶段。</li>
<li><code>Promotion Failure</code>： Old 区没有足够的空间分配给 Young 区晋升的对象（即使总可用内存足够大）。</li>
<li><code>Concurrent Mode Failure</code>： CMS GC 运行期间，Old 区预留的空间不足以分配给新的对象，此时收集器会发生退化，严重影响 GC 性能，下面的一个案例即为这种场景。</li>
<li><code>GCLocker Initiated GC</code>： 如果线程执行在 JNI 临界区时，刚好需要进行 GC，此时 GC Locker 将会阻止 GC 的发生，同时阻止其他线程进入 JNI 临界区，直到最后一个线程退出临界区时触发一次 GC。</li>
</ul>
<p>什么时机使用这些 Cause 触发回收，大家可以看一下 CMS 的代码，这里就不讨论了，具体在 <code>/src/hotspot/share/gc/cms/concurrentMarkSweepGeneration.cpp</code> 中。</p>
<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">bool</span><span style="color:#E5C07B"> CMSCollector</span><span style="color:#ABB2BF">::</span><span style="color:#61AFEF">shouldConcurrentCollect</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#61AFEF">  LogTarget</span><span style="color:#ABB2BF">(Trace, gc) log;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  if</span><span style="color:#ABB2BF"> (_full_gc_requested) {</span></span>
<span class="line"><span style="color:#E5C07B">    log</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">print</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"CMSCollector: collect because of explicit  gc request (or GCLocker)"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">  FreelistLocker </span><span style="color:#61AFEF">x</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/cms-gc-1.png" type="image/png"/>
    </item>
    <item>
      <title>GC 垃圾回收器之G1详解</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BG1%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BG1%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收器之G1详解</source>
      <description>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。 G...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。</p>
</blockquote>
<ul>
<li>
<p>GC 垃圾回收器之G1详解</p>
<ul>
<li>
<p><a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a></p>
</li>
<li>
<ol start="2">
<li>G1的内存模型</li>
</ol>
<ul>
<li>2.1 分区概念
<ul>
<li><a href="#211-%E5%88%86%E5%8C%BAregion">2.1.1 分区Region</a></li>
<li><a href="#212-%E5%8D%A1%E7%89%87card">2.1.2 卡片Card</a></li>
<li><a href="#213-%E5%A0%86heap">2.1.3 堆Heap</a></li>
</ul>
</li>
<li>2.2 分代模型
<ul>
<li><a href="#221-%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86">2.2.1 分代垃圾收集</a></li>
<li><a href="#222-%E6%9C%AC%E5%9C%B0%E5%88%86%E9%85%8D%E7%BC%93%E5%86%B2-local-allocation-buffer-lab">2.2.2 本地分配缓冲 Local allocation buffer (Lab)</a></li>
</ul>
</li>
<li>2.3 分区模型
<ul>
<li><a href="#231-%E5%B7%A8%E5%BD%A2%E5%AF%B9%E8%B1%A1humongous-region">2.3.1 巨形对象Humongous Region</a></li>
<li><a href="#232-%E5%B7%B2%E8%AE%B0%E5%BF%86%E9%9B%86%E5%90%88remember-set-rset">2.3.2 已记忆集合Remember Set (RSet)</a></li>
<li><a href="#233-per-region-table-prt">2.3.3 Per Region Table (PRT)</a></li>
</ul>
</li>
<li>2.4 收集集合 (CSet)
<ul>
<li><a href="#241-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-young-collection">2.4.1 年轻代收集集合 CSet of Young Collection</a></li>
<li><a href="#242-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-mixed-collection">2.4.2 混合收集集合 CSet of Mixed Collection</a></li>
<li><a href="#243-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95">2.4.3 并发标记算法（三色标记法）</a></li>
<li><a href="#244-%E6%BC%8F%E6%A0%87%E9%97%AE%E9%A2%98">2.4.4 漏标问题</a></li>
</ul>
</li>
</ul>
</li>
<li>
<ol start="3">
<li>G1的活动周期</li>
</ol>
<ul>
<li><a href="#31-g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%B4%BB%E5%8A%A8%E6%B1%87%E6%80%BB">3.1 G1垃圾收集活动汇总</a></li>
<li>3.2 RSet的维护
<ul>
<li><a href="#321-%E6%A0%85%E6%A0%8Fbarrier">3.2.1 栅栏Barrier</a></li>
<li><a href="#322-%E8%B5%B7%E5%A7%8B%E5%BF%AB%E7%85%A7%E7%AE%97%E6%B3%95snapshot-at-the-beginning-satb">3.2.2 起始快照算法Snapshot at the beginning (SATB)</a></li>
<li><a href="#323-%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E7%BA%BF%E7%A8%8Bconcurrence-refinement-threads">3.2.3 并发优化线程Concurrence Refinement Threads</a></li>
</ul>
</li>
<li>3.3 并发标记周期 Concurrent Marking Cycle
<ul>
<li><a href="#331-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%BA%BF%E7%A8%8B-concurrent-marking-threads">3.3.1 并发标记线程 Concurrent Marking Threads</a></li>
<li><a href="#332-%E5%88%9D%E5%A7%8B%E6%A0%87%E8%AE%B0-initial-mark">3.3.2 初始标记 Initial Mark</a></li>
<li><a href="#333-%E6%A0%B9%E5%88%86%E5%8C%BA%E6%89%AB%E6%8F%8F-root-region-scanning">3.3.3 根分区扫描 Root Region Scanning</a></li>
<li><a href="#334-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0-concurrent-marking">3.3.4 并发标记 Concurrent Marking</a></li>
<li><a href="#335-%E5%AD%98%E6%B4%BB%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97-live-data-accounting">3.3.5 存活数据计算 Live Data Accounting</a></li>
<li><a href="#336-%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0-remark">3.3.6 重新标记 Remark</a></li>
<li><a href="#337-%E6%B8%85%E9%99%A4-cleanup">3.3.7 清除 Cleanup</a></li>
</ul>
</li>
<li>3.4 年轻代收集/混合收集周期
<ul>
<li><a href="#341-gc%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E6%95%B0">3.4.1 GC工作线程数</a></li>
<li><a href="#342-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-young-collection">3.4.2 年轻代收集 Young Collection</a></li>
</ul>
</li>
<li>3.5 并发标记周期后的年轻代收集 Young Collection Following Concurrent Marking Cycle
<ul>
<li><a href="#351-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E5%91%A8%E6%9C%9F-mixed-collection-cycle">3.5.1 混合收集周期 Mixed Collection Cycle</a></li>
<li><a href="#352-%E8%BD%AC%E7%A7%BB%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%8B%85%E4%BF%9D%E6%9C%BA%E5%88%B6-full-gc">3.5.2 转移失败的担保机制 Full GC</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="#4-%E6%80%BB%E7%BB%93">4. 总结</a></p>
</li>
<li>
<p><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></p>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#_1-概述"><span></span></a><a href="#_1-%E6%A6%82%E8%BF%B0">#</a> 1. 概述</h2>
<p>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。G1是一个分代的，增量的，并行与并发的标记-复制垃圾回收器。它的设计目标是为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。G1回收器和CMS比起来，有以下不同：</p>
<ul>
<li>G1垃圾回收器是<strong>compacting</strong>的，因此其回收得到的空间是连续的。这避免了CMS回收器因为不连续空间所造成的问题。如需要更大的堆空间，更多的floating garbage。连续空间意味着G1垃圾回收器可以不必采用空闲链表的内存分配方式，而可以直接采用bump-the-pointer的方式；</li>
<li>G1回收器的内存与CMS回收器要求的内存模型有极大的不同。G1将内存划分一个个固定大小的region，每个region可以是年轻代、老年代的一个。<strong>内存的回收是以region作为基本单位的</strong>；</li>
<li>G1还有一个及其重要的特性：<strong>软实时</strong>（soft real-time）。所谓的实时垃圾回收，是指在要求的时间内完成垃圾回收。“软实时”则是指，用户可以指定垃圾回收时间的限时，G1会努力在这个时限内完成垃圾回收，但是G1并不担保每次都能在这个时限内完成垃圾回收。通过设定一个合理的目标，可以让达到90%以上的垃圾回收时间都在这个时限内。</li>
</ul>
<h2><a class="header-anchor" href="#_2-g1的内存模型"><span></span></a><a href="#_2-g1%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">#</a> 2. G1的内存模型</h2>
<h3><a class="header-anchor" href="#_2-1-分区概念"><span></span></a><a href="#_2-1-%E5%88%86%E5%8C%BA%E6%A6%82%E5%BF%B5">#</a> 2.1 分区概念</h3>
<p>G1分区示意图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-1.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-1-1-分区region"><span></span></a><a href="#_2-1-1-%E5%88%86%E5%8C%BAregion">#</a> 2.1.1 分区Region</h4>
<p>G1采用了分区(Region)的思路，将整个堆空间分成若干个大小相等的内存区域，每次分配对象空间将逐段地使用内存。因此，在堆的使用上，G1并不要求对象的存储一定是物理上连续的，只要逻辑上连续即可；每个分区也不会确定地为某个代服务，可以按需在年轻代和老年代之间切换。启动时可以通过参数-XX:G1HeapRegionSize=n可指定分区大小(1MB~32MB，且必须是2的幂)，默认将整堆划分为2048个分区。</p>
<h4><a class="header-anchor" href="#_2-1-2-卡片card"><span></span></a><a href="#_2-1-2-%E5%8D%A1%E7%89%87card">#</a> 2.1.2 卡片Card</h4>
<p>在每个分区内部又被分成了若干个大小为512 Byte卡片(Card)，标识堆内存最小可用粒度所有分区的卡片将会记录在全局卡片表(Global Card Table)中，分配的对象会占用物理上连续的若干个卡片，当查找对分区内对象的引用时便可通过记录卡片来查找该引用对象(见RSet)。每次对内存的回收，都是对指定分区的卡片进行处理。</p>
<h4><a class="header-anchor" href="#_2-1-3-堆heap"><span></span></a><a href="#_2-1-3-%E5%A0%86heap">#</a> 2.1.3 堆Heap</h4>
<p>G1同样可以通过-Xms/-Xmx来指定堆空间大小。当发生年轻代收集或混合收集时，通过计算GC与应用的耗费时间比，自动调整堆空间大小。如果GC频率太高，则通过增加堆尺寸，来减少GC频率，相应地GC占用的时间也随之降低；目标参数-XX:GCTimeRatio即为GC与应用的耗费时间比，G1默认为9，而CMS默认为99，因为CMS的设计原则是耗费在GC上的时间尽可能的少。另外，当空间不足，如对象空间分配或转移失败时，G1会首先尝试增加堆空间，如果扩容失败，则发起担保的Full GC。Full GC后，堆尺寸计算结果也会调整堆空间。</p>
<h3><a class="header-anchor" href="#_2-2-分代模型"><span></span></a><a href="#_2-2-%E5%88%86%E4%BB%A3%E6%A8%A1%E5%9E%8B">#</a> 2.2 分代模型</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-2.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-2-1-分代垃圾收集"><span></span></a><a href="#_2-2-1-%E5%88%86%E4%BB%A3%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86">#</a> 2.2.1 分代垃圾收集</h4>
<p>分代垃圾收集可以将关注点集中在最近被分配的对象上，而无需整堆扫描，避免长命对象的拷贝，同时独立收集有助于降低响应时间。虽然分区使得内存分配不再要求紧凑的内存空间，但G1依然使用了分代的思想。与其他垃圾收集器类似，G1将内存在逻辑上划分为年轻代和老年代，其中年轻代又划分为Eden空间和Survivor空间。但年轻代空间并不是固定不变的，当现有年轻代分区占满时，JVM会分配新的空闲分区加入到年轻代空间。</p>
<p>整个年轻代内存会在初始空间<code>-XX:G1NewSizePercent</code>(默认整堆5%)与最大空间(默认60%)之间动态变化，且由参数目标暂停时间<code>-XX:MaxGCPauseMillis</code>(默认200ms)、需要扩缩容的大小以<code>-XX:G1MaxNewSizePercent</code>及分区的已记忆集合(RSet)计算得到。当然，G1依然可以设置固定的年轻代大小(参数-XX:NewRatio、-Xmn)，但同时暂停目标将失去意义。</p>
<h4><a class="header-anchor" href="#_2-2-2-本地分配缓冲-local-allocation-buffer-lab"><span></span></a><a href="#_2-2-2-%E6%9C%AC%E5%9C%B0%E5%88%86%E9%85%8D%E7%BC%93%E5%86%B2-local-allocation-buffer-lab">#</a> 2.2.2 本地分配缓冲 Local allocation buffer (Lab)</h4>
<p>值得注意的是，由于分区的思想，每个线程均可以"认领"某个分区用于线程本地的内存分配，而不需要顾及分区是否连续。因此，每个应用线程和GC线程都会独立的使用分区，进而减少同步时间，提升GC效率，这个分区称为本地分配缓冲区(Lab)。</p>
<p>其中，应用线程可以独占一个本地缓冲区(TLAB)来创建的对象，而大部分都会落入Eden区域(巨型对象或分配失败除外)，因此TLAB的分区属于Eden空间；而每次垃圾收集时，每个GC线程同样可以独占一个本地缓冲区(GCLAB)用来转移对象，每次回收会将对象复制到Suvivor空间或老年代空间；对于从Eden/Survivor空间晋升(Promotion)到Survivor/老年代空间的对象，同样有GC独占的本地缓冲区进行操作，该部分称为晋升本地缓冲区(PLAB)。</p>
<h3><a class="header-anchor" href="#_2-3-分区模型"><span></span></a><a href="#_2-3-%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B">#</a> 2.3 分区模型</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-3.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>G1对内存的使用以分区(Region)为单位，而对对象的分配则以卡片(Card)为单位。</p>
<h4><a class="header-anchor" href="#_2-3-1-巨形对象humongous-region"><span></span></a><a href="#_2-3-1-%E5%B7%A8%E5%BD%A2%E5%AF%B9%E8%B1%A1humongous-region">#</a> 2.3.1 巨形对象Humongous Region</h4>
<p>一个大小达到甚至超过分区大小一半的对象称为巨型对象(Humongous Object)。当线程为巨型分配空间时，不能简单在TLAB进行分配，因为巨型对象的移动成本很高，而且有可能一个分区不能容纳巨型对象。因此，巨型对象会直接在老年代分配，所占用的连续空间称为巨型分区(Humongous Region)。G1内部做了一个优化，一旦发现没有引用指向巨型对象，则可直接在年轻代收集周期中被回收。</p>
<p>巨型对象会独占一个、或多个连续分区，其中第一个分区被标记为开始巨型(StartsHumongous)，相邻连续分区被标记为连续巨型(ContinuesHumongous)。由于无法享受Lab带来的优化，并且确定一片连续的内存空间需要扫描整堆，因此确定巨型对象开始位置的成本非常高，如果可以，应用程序应避免生成巨型对象。</p>
<h4><a class="header-anchor" href="#_2-3-2-已记忆集合remember-set-rset"><span></span></a><a href="#_2-3-2-%E5%B7%B2%E8%AE%B0%E5%BF%86%E9%9B%86%E5%90%88remember-set-rset">#</a> 2.3.2 已记忆集合Remember Set (RSet)</h4>
<p>在串行和并行收集器中，GC通过整堆扫描，来确定对象是否处于可达路径中。然而G1为了避免STW式的整堆扫描，在每个分区记录了一个已记忆集合(RSet)，内部类似一个反向指针，记录引用分区内对象的卡片索引。当要回收该分区时，通过扫描分区的RSet，来确定引用本分区内的对象是否存活，进而确定本分区内的对象存活情况。</p>
<p>事实上，并非所有的引用都需要记录在RSet中，如果一个分区确定需要扫描，那么无需RSet也可以无遗漏的得到引用关系。那么引用源自本分区的对象，当然不用落入RSet中；同时，G1 GC每次都会对年轻代进行整体收集，因此引用源自年轻代的对象，也不需要在RSet中记录。最后只有老年代的分区可能会有RSet记录，这些分区称为拥有RSet分区(an RSet’s owning region)。</p>
<h4><a class="header-anchor" href="#_2-3-3-per-region-table-prt"><span></span></a><a href="#_2-3-3-per-region-table-prt">#</a> 2.3.3 Per Region Table (PRT)</h4>
<p>RSet在内部使用Per Region Table(PRT)记录分区的引用情况。由于RSet的记录要占用分区的空间，如果一个分区非常"受欢迎"，那么RSet占用的空间会上升，从而降低分区的可用空间。G1应对这个问题采用了改变RSet的密度的方式，在PRT中将会以三种模式记录引用：</p>
<ul>
<li>稀少：直接记录引用对象的卡片索引</li>
<li>细粒度：记录引用对象的分区索引</li>
<li>粗粒度：只记录引用情况，每个分区对应一个比特位</li>
</ul>
<p>由上可知，粗粒度的PRT只是记录了引用数量，需要通过整堆扫描才能找出所有引用，因此扫描速度也是最慢的。</p>
<h3><a class="header-anchor" href="#_2-4-收集集合-cset"><span></span></a><a href="#_2-4-%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset">#</a> 2.4 收集集合 (CSet)</h3>
<p>CSet收集示意图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-4.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>收集集合(CSet)代表每次GC暂停时回收的一系列目标分区。在任意一次收集暂停中，CSet所有分区都会被释放，内部存活的对象都会被转移到分配的空闲分区中。因此无论是年轻代收集，还是混合收集，工作的机制都是一致的。年轻代收集CSet只容纳年轻代分区，而混合收集会通过启发式算法，在老年代候选回收分区中，筛选出回收收益最高的分区添加到CSet中。</p>
<p>候选老年代分区的CSet准入条件，可以通过活跃度阈值-XX:G1MixedGCLiveThresholdPercent(默认85%)进行设置，从而拦截那些回收开销巨大的对象；同时，每次混合收集可以包含候选老年代分区，可根据CSet对堆的总大小占比-XX:G1OldCSetRegionThresholdPercent(默认10%)设置数量上限。</p>
<p>由上述可知，G1的收集都是根据CSet进行操作的，年轻代收集与混合收集没有明显的不同，最大的区别在于两种收集的触发条件。</p>
<h4><a class="header-anchor" href="#_2-4-1-年轻代收集集合-cset-of-young-collection"><span></span></a><a href="#_2-4-1-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-young-collection">#</a> 2.4.1 年轻代收集集合 CSet of Young Collection</h4>
<p>应用线程不断活动后，年轻代空间会被逐渐填满。当JVM分配对象到Eden区域失败(Eden区已满)时，便会触发一次STW式的年轻代收集。在年轻代收集中，Eden分区存活的对象将被拷贝到Survivor分区；原有Survivor分区存活的对象，将根据任期阈值(tenuring threshold)分别晋升到PLAB中，新的survivor分区和老年代分区。而原有的年轻代分区将被整体回收掉。</p>
<p>同时，年轻代收集还负责维护对象的年龄(存活次数)，辅助判断老化(tenuring)对象晋升的时候是到Survivor分区还是到老年代分区。年轻代收集首先先将晋升对象尺寸总和、对象年龄信息维护到年龄表中，再根据年龄表、Survivor尺寸、Survivor填充容量-XX:TargetSurvivorRatio(默认50%)、最大任期阈值-XX:MaxTenuringThreshold(默认15)，计算出一个恰当的任期阈值，凡是超过任期阈值的对象都会被晋升到老年代。</p>
<h4><a class="header-anchor" href="#_2-4-2-混合收集集合-cset-of-mixed-collection"><span></span></a><a href="#_2-4-2-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E9%9B%86%E5%90%88-cset-of-mixed-collection">#</a> 2.4.2 混合收集集合 CSet of Mixed Collection</h4>
<p>年轻代收集不断活动后，老年代的空间也会被逐渐填充。当老年代占用空间超过整堆比IHOP阈值-XX:InitiatingHeapOccupancyPercent(默认45%)时，G1就会启动一次混合垃圾收集周期。为了满足暂停目标，G1可能不能一口气将所有的候选分区收集掉，因此G1可能会产生连续多次的混合收集与应用线程交替执行，每次STW的混合收集与年轻代收集过程相类似。</p>
<p>为了确定包含到年轻代收集集合CSet的老年代分区，JVM通过参数混合周期的最大总次数-XX:G1MixedGCCountTarget(默认8)、堆废物百分比-XX:G1HeapWastePercent(默认5%)。通过候选老年代分区总数与混合周期最大总次数，确定每次包含到CSet的最小分区数量；根据堆废物百分比，当收集达到参数时，不再启动新的混合收集。而每次添加到CSet的分区，则通过计算得到的GC效率进行安排。</p>
<h4><a class="header-anchor" href="#_2-4-3-并发标记算法-三色标记法"><span></span></a><a href="#_2-4-3-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95-%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B3%95">#</a> 2.4.3 并发标记算法（三色标记法）</h4>
<p>CMS和G1在并发标记时使用的是同一个算法：三色标记法，使用白灰黑三种颜色标记对象。白色是未标记；灰色自身被标记，引用的对象未标记；黑色自身与引用对象都已标记。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>GC 开始前所有对象都是白色，GC 一开始所有根能够直达的对象被压到栈中，待搜索，此时颜色是灰色。然后灰色对象依次从栈中取出搜索子对象，子对象也会被涂为灰色，入栈。当其所有的子对象都涂为灰色之后该对象被涂为黑色。当 GC 结束之后灰色对象将全部没了，剩下黑色的为存活对象，白色的为垃圾。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-5-1.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#_2-4-4-漏标问题"><span></span></a><a href="#_2-4-4-%E6%BC%8F%E6%A0%87%E9%97%AE%E9%A2%98">#</a> 2.4.4 漏标问题</h4>
<p>在remark过程中，黑色指向了白色，如果不对黑色重新扫描，则会漏标。会把白色D对象当作没有新引用指向从而回收掉。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>并发标记过程中，Mutator删除了所有从灰色到白色的引用，会产生漏标。此时白色对象应该被回收</p>
<p>产生漏标问题的条件有两个：</p>
<ul>
<li>黑色对象指向了白色对象</li>
<li>灰色对象指向白色对象的引用消失</li>
</ul>
<p>所以要解决漏标问题，打破两个条件之一即可：</p>
<ul>
<li><strong>跟踪黑指向白的增加</strong> incremental update：增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。CMS采用该方法。</li>
<li><strong>记录灰指向白的消失</strong> SATB snapshot at the beginning：关注引用的删除，当灰–&gt;白消失时，要把这个 引用 推到GC的堆栈，保证白还能被GC扫描到。G1采用该方法。</li>
</ul>
<p><strong>为什么G1采用SATB而不用incremental update</strong>？</p>
<p>因为采用incremental update把黑色重新标记为灰色后，之前扫描过的还要再扫描一遍，效率太低。G1有RSet与SATB相配合。Card Table里记录了RSet，RSet里记录了其他对象指向自己的引用，这样就不需要再扫描其他区域，只要扫描RSet就可以了。</p>
<p>也就是说 灰色–&gt;白色 引用消失时，如果没有 黑色–&gt;白色，引用会被push到堆栈，下次扫描时拿到这个引用，由于有RSet的存在，不需要扫描整个堆去查找指向白色的引用，效率比较高。SATB配合RSet浑然天成。</p>
<h2><a class="header-anchor" href="#_3-g1的活动周期"><span></span></a><a href="#_3-g1%E7%9A%84%E6%B4%BB%E5%8A%A8%E5%91%A8%E6%9C%9F">#</a> 3. G1的活动周期</h2>
<h3><a class="header-anchor" href="#_3-1-g1垃圾收集活动汇总"><span></span></a><a href="#_3-1-g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E6%B4%BB%E5%8A%A8%E6%B1%87%E6%80%BB">#</a> 3.1 G1垃圾收集活动汇总</h3>
<p>G1垃圾收集活动周期图</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-7.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#_3-2-rset的维护"><span></span></a><a href="#_3-2-rset%E7%9A%84%E7%BB%B4%E6%8A%A4">#</a> 3.2 RSet的维护</h3>
<p>由于不能整堆扫描，又需要计算分区确切的活跃度，因此，G1需要一个增量式的完全标记并发算法，通过维护RSet，得到准确的分区引用信息。在G1中，RSet的维护主要来源两个方面：写栅栏(Write Barrier)和并发优化线程(Concurrence Refinement Threads)</p>
<h4><a class="header-anchor" href="#_3-2-1-栅栏barrier"><span></span></a><a href="#_3-2-1-%E6%A0%85%E6%A0%8Fbarrier">#</a> 3.2.1 栅栏Barrier</h4>
<p>栅栏代码示意</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-8.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>我们首先介绍一下栅栏(Barrier)的概念。栅栏是指在原生代码片段中，当某些语句被执行时，栅栏代码也会被执行。而G1主要在赋值语句中，使用写前栅栏(Pre-Write Barrrier)和写后栅栏(Post-Write Barrrier)。事实上，写栅栏的指令序列开销非常昂贵，应用吞吐量也会根据栅栏复杂度而降低。</p>
<p><strong>写前栅栏 Pre-Write Barrrier</strong></p>
<p>即将执行一段赋值语句时，等式左侧对象将修改引用到另一个对象，那么等式左侧对象原先引用的对象所在分区将因此丧失一个引用，那么JVM就需要在赋值语句生效之前，记录丧失引用的对象。JVM并不会立即维护RSet，而是通过批量处理，在将来RSet更新(见SATB)。</p>
<p><strong>写后栅栏 Post-Write Barrrier</strong></p>
<p>当执行一段赋值语句后，等式右侧对象获取了左侧对象的引用，那么等式右侧对象所在分区的RSet也应该得到更新。同样为了降低开销，写后栅栏发生后，RSet也不会立即更新，同样只是记录此次更新日志，在将来批量处理(见Concurrence Refinement Threads)。</p>
<h4><a class="header-anchor" href="#_3-2-2-起始快照算法snapshot-at-the-beginning-satb"><span></span></a><a href="#_3-2-2-%E8%B5%B7%E5%A7%8B%E5%BF%AB%E7%85%A7%E7%AE%97%E6%B3%95snapshot-at-the-beginning-satb">#</a> 3.2.2 起始快照算法Snapshot at the beginning (SATB)</h4>
<p>Taiichi Tuasa贡献的增量式完全并发标记算法起始快照算法(SATB)，主要针对标记-清除垃圾收集器的并发标记阶段，非常适合G1的分区块的堆结构，同时解决了CMS的主要烦恼：重新标记暂停时间长带来的潜在风险。</p>
<p>SATB会创建一个对象图，相当于堆的逻辑快照，从而确保并发标记阶段所有的垃圾对象都能通过快照被鉴别出来。当赋值语句发生时，应用将会改变了它的对象图，那么JVM需要记录被覆盖的对象。因此写前栅栏会在引用变更前，将值记录在SATB日志或缓冲区中。每个线程都会独占一个SATB缓冲区，初始有256条记录空间。当空间用尽时，线程会分配新的SATB缓冲区继续使用，而原有的缓冲去则加入全局列表中。最终在并发标记阶段，并发标记线程(Concurrent Marking Threads)在标记的同时，还会定期检查和处理全局缓冲区列表的记录，然后根据标记位图分片的标记位，扫描引用字段来更新RSet。此过程又称为并发标记/SATB写前栅栏。</p>
<h4><a class="header-anchor" href="#_3-2-3-并发优化线程concurrence-refinement-threads"><span></span></a><a href="#_3-2-3-%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E7%BA%BF%E7%A8%8Bconcurrence-refinement-threads">#</a> 3.2.3 并发优化线程Concurrence Refinement Threads</h4>
<p>G1中使用基于Urs Hölzle的快速写栅栏，将栅栏开销缩减到2个额外的指令。栅栏将会更新一个card table type的结构来跟踪代间引用。</p>
<p>当赋值语句发生后，写后栅栏会先通过G1的过滤技术判断是否是跨分区的引用更新，并将跨分区更新对象的卡片加入缓冲区序列，即更新日志缓冲区或脏卡片队列。与SATB类似，一旦日志缓冲区用尽，则分配一个新的日志缓冲区，并将原来的缓冲区加入全局列表中。</p>
<p>并发优化线程(Concurrence Refinement Threads)，只专注扫描日志缓冲区记录的卡片来维护更新RSet，线程最大数目可通过<code>-XX:G1ConcRefinementThreads</code>(默认等于<code>-XX:ParellelGCThreads</code>)设置。并发优化线程永远是活跃的，一旦发现全局列表有记录存在，就开始并发处理。如果记录增长很快或者来不及处理，那么通过阈值<code>-X:G1ConcRefinementGreenZone/-XX:G1ConcRefinementYellowZone/-XX:G1ConcRefinementRedZone</code>，G1会用分层的方式调度，使更多的线程处理全局列表。如果并发优化线程也不能跟上缓冲区数量，则Mutator线程(Java应用线程)会挂起应用并被加进来帮助处理，直到全部处理完。因此，必须避免此类场景出现。</p>
<h3><a class="header-anchor" href="#_3-3-并发标记周期-concurrent-marking-cycle"><span></span></a><a href="#_3-3-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E5%91%A8%E6%9C%9F-concurrent-marking-cycle">#</a> 3.3 并发标记周期 Concurrent Marking Cycle</h3>
<p>并发标记周期是G1中非常重要的阶段，这个阶段将会为混合收集周期识别垃圾最多的老年代分区。整个周期完成根标记、识别所有(可能)存活对象，并计算每个分区的活跃度，从而确定GC效率等级。</p>
<p>当达到IHOP阈值<code>-XX:InitiatingHeapOccupancyPercent</code>(老年代占整堆比，默认45%)时，便会触发并发标记周期。整个并发标记周期将由初始标记(Initial Mark)、根分区扫描(Root Region Scanning)、并发标记(Concurrent Marking)、重新标记(Remark)、清除(Cleanup)几个阶段组成。其中，初始标记(随年轻代收集一起活动)、重新标记、清除是STW的，而并发标记如果来不及标记存活对象，则可能在并发标记过程中，G1又触发了几次年轻代收集。</p>
<h4><a class="header-anchor" href="#_3-3-1-并发标记线程-concurrent-marking-threads"><span></span></a><a href="#_3-3-1-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E7%BA%BF%E7%A8%8B-concurrent-marking-threads">#</a> 3.3.1 并发标记线程 Concurrent Marking Threads</h4>
<p>并发标记位图过程</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>要标记存活的对象，每个分区都需要创建位图(Bitmap)信息来存储标记数据，来确定标记周期内被分配的对象。G1采用了两个位图Previous Bitmap、Next Bitmap，来存储标记数据，Previous位图存储上次的标记数据，Next位图在标记周期内不断变化更新，同时Previous位图的标记数据也越来越过时，当标记周期结束后Next位图便替换Previous位图，成为上次标记的位图。同时，每个分区通过顶部开始标记(TAMS)，来记录已标记过的内存范围。同样的，G1使用了两个顶部开始标记Previous TAMS(PTAMS)、Next TAMS(NTAMS)，记录已标记的范围。</p>
<p>在并发标记阶段，G1会根据参数<code>-XX:ConcGCThreads</code>(默认GC线程数的1/4，即<code>-XX:ParallelGCThreads/4</code>)，分配并发标记线程(Concurrent Marking Threads)，进行标记活动。每个并发线程一次只扫描一个分区，并通过"手指"指针的方式优化获取分区。并发标记线程是爆发式的，在给定的时间段拼命干活，然后休息一段时间，再拼命干活。</p>
<p>每个并发标记周期，在初始标记STW的最后，G1会分配一个空的Next位图和一个指向分区顶部(Top)的NTAMS标记。Previous位图记录的上次标记数据，上次的标记位置，即PTAMS，在PTAMS与分区底部(Bottom)的范围内，所有的存活对象都已被标记。那么，在PTAMS与Top之间的对象都将是隐式存活(Implicitly Live)对象。在并发标记阶段，Next位图吸收了Previous位图的标记数据，同时每个分区都会有新的对象分配，则Top与NTAMS分离，前往更高的地址空间。在并发标记的一次标记中，并发标记线程将找出NTAMS与PTAMS之间的所有存活对象，将标记数据存储在Next位图中。同时，在NTAMS与Top之间的对象即成为已标记对象。如此不断地更新Next位图信息，并在清除阶段与Previous位图交换角色。</p>
<h4><a class="header-anchor" href="#_3-3-2-初始标记-initial-mark"><span></span></a><a href="#_3-3-2-%E5%88%9D%E5%A7%8B%E6%A0%87%E8%AE%B0-initial-mark">#</a> 3.3.2 初始标记 Initial Mark</h4>
<p>初始标记(Initial Mark)负责标记所有能被直接可达的根对象(原生栈对象、全局对象、JNI对象)，根是对象图的起点，因此初始标记需要将Mutator线程(Java应用线程)暂停掉，也就是需要一个STW的时间段。事实上，当达到IHOP阈值时，G1并不会立即发起并发标记周期，而是等待下一次年轻代收集，利用年轻代收集的STW时间段，完成初始标记，这种方式称为借道(Piggybacking)。在初始标记暂停中，分区的NTAMS都被设置到分区顶部Top，初始标记是并发执行，直到所有的分区处理完。</p>
<h4><a class="header-anchor" href="#_3-3-3-根分区扫描-root-region-scanning"><span></span></a><a href="#_3-3-3-%E6%A0%B9%E5%88%86%E5%8C%BA%E6%89%AB%E6%8F%8F-root-region-scanning">#</a> 3.3.3 根分区扫描 Root Region Scanning</h4>
<p>在初始标记暂停结束后，年轻代收集也完成的对象复制到Survivor的工作，应用线程开始活跃起来。此时为了保证标记算法的正确性，所有新复制到Survivor分区的对象，都需要被扫描并标记成根，这个过程称为根分区扫描(Root Region Scanning)，同时扫描的Suvivor分区也被称为根分区(Root Region)。根分区扫描必须在下一次年轻代垃圾收集启动前完成(并发标记的过程中，可能会被若干次年轻代垃圾收集打断)，因为每次GC会产生新的存活对象集合。</p>
<h4><a class="header-anchor" href="#_3-3-4-并发标记-concurrent-marking"><span></span></a><a href="#_3-3-4-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0-concurrent-marking">#</a> 3.3.4 并发标记 Concurrent Marking</h4>
<p>和应用线程并发执行，并发标记线程在并发标记阶段启动，由参数<code>-XX:ConcGCThreads</code>(默认GC线程数的1/4，即<code>-XX:ParallelGCThreads/4</code>)控制启动数量，每个线程每次只扫描一个分区，从而标记出存活对象图。在这一阶段会处理Previous/Next标记位图，扫描标记对象的引用字段。同时，并发标记线程还会定期检查和处理STAB全局缓冲区列表的记录，更新对象引用信息。参数<code>-XX:+ClassUnloadingWithConcurrentMark</code>会开启一个优化，如果一个类不可达(不是对象不可达)，则在重新标记阶段，这个类就会被直接卸载。所有的标记任务必须在堆满前就完成扫描，如果并发标记耗时很长，那么有可能在并发标记过程中，又经历了几次年轻代收集。如果堆满前没有完成标记任务，则会触发担保机制，经历一次长时间的串行Full GC。</p>
<h4><a class="header-anchor" href="#_3-3-5-存活数据计算-live-data-accounting"><span></span></a><a href="#_3-3-5-%E5%AD%98%E6%B4%BB%E6%95%B0%E6%8D%AE%E8%AE%A1%E7%AE%97-live-data-accounting">#</a> 3.3.5 存活数据计算 Live Data Accounting</h4>
<p>存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。</p>
<h4><a class="header-anchor" href="#_3-3-6-重新标记-remark"><span></span></a><a href="#_3-3-6-%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0-remark">#</a> 3.3.6 重新标记 Remark</h4>
<p>重新标记(Remark)是最后一个标记阶段。在该阶段中，G1需要一个暂停的时间，去处理剩下的SATB日志缓冲区和所有更新，找出所有未被访问的存活对象，同时安全完成存活数据计算。这个阶段也是并行执行的，通过参数-XX:ParallelGCThread可设置GC暂停时可用的GC线程数。同时，引用处理也是重新标记阶段的一部分，所有重度使用引用对象(弱引用、软引用、虚引用、最终引用)的应用都会在引用处理上产生开销。</p>
<h4><a class="header-anchor" href="#_3-3-7-清除-cleanup"><span></span></a><a href="#_3-3-7-%E6%B8%85%E9%99%A4-cleanup">#</a> 3.3.7 清除 Cleanup</h4>
<p>紧挨着重新标记阶段的清除(Clean)阶段也是STW的。Previous/Next标记位图、以及PTAMS/NTAMS，都会在清除阶段交换角色。清除阶段主要执行以下操作：</p>
<ul>
<li><strong>RSet梳理</strong>，启发式算法会根据活跃度和RSet尺寸对分区定义不同等级，同时RSet数理也有助于发现无用的引用。参数<code>-XX:+PrintAdaptiveSizePolicy</code>可以开启打印启发式算法决策细节；</li>
<li><strong>整理堆分区</strong>，为混合收集周期识别回收收益高(基于释放空间和暂停目标)的老年代分区集合；</li>
<li><strong>识别所有空闲分区</strong>，即发现无存活对象的分区。该分区可在清除阶段直接回收，无需等待下次收集周期。</li>
</ul>
<h3><a class="header-anchor" href="#_3-4-年轻代收集-混合收集周期"><span></span></a><a href="#_3-4-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E5%91%A8%E6%9C%9F">#</a> 3.4 年轻代收集/混合收集周期</h3>
<p>年轻代收集和混合收集周期，是G1回收空间的主要活动。当应用运行开始时，堆内存可用空间还比较大，只会在年轻代满时，触发年轻代收集；随着老年代内存增长，当到达IHOP阈值<code>-XX:InitiatingHeapOccupancyPercent</code>(老年代占整堆比，默认45%)时，G1开始着手准备收集老年代空间。首先经历并发标记周期，识别出高收益的老年代分区，前文已述。但随后G1并不会马上开始一次混合收集，而是让应用线程先运行一段时间，等待触发一次年轻代收集。在这次STW中，G1将保准整理混合收集周期。接着再次让应用线程运行，当接下来的几次年轻代收集时，将会有老年代分区加入到CSet中，即触发混合收集，这些连续多次的混合收集称为混合收集周期(Mixed Collection Cycle)。</p>
<h4><a class="header-anchor" href="#_3-4-1-gc工作线程数"><span></span></a><a href="#_3-4-1-gc%E5%B7%A5%E4%BD%9C%E7%BA%BF%E7%A8%8B%E6%95%B0">#</a> 3.4.1 GC工作线程数</h4>
<p>GC工作线程数 <code>-XX:ParallelGCThreads</code></p>
<p>JVM可以通过参数<code>-XX:ParallelGCThreads</code>进行指定GC工作的线程数量。参数<code>-XX:ParallelGCThreads</code>默认值并不是固定的，而是根据当前的CPU资源进行计算。如果用户没有指定，且CPU小于等于8，则默认与CPU核数相等；若CPU大于8，则默认JVM会经过计算得到一个小于CPU核数的线程数；当然也可以人工指定与CPU核数相等。</p>
<h4><a class="header-anchor" href="#_3-4-2-年轻代收集-young-collection"><span></span></a><a href="#_3-4-2-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-young-collection">#</a> 3.4.2 年轻代收集 Young Collection</h4>
<p>每次收集过程中，既有并行执行的活动，也有串行执行的活动，但都可以是多线程的。在并行执行的任务中，如果某个任务过重，会导致其他线程在等待某项任务的处理，需要对这些地方进行优化。</p>
<p><strong>并行活动</strong></p>
<ul>
<li><code>外部根分区扫描 Ext Root Scanning</code>：此活动对堆外的根(JVM系统目录、VM数据结构、JNI线程句柄、硬件寄存器、全局变量、线程对栈根)进行扫描，发现那些没有加入到暂停收集集合CSet中的对象。如果系统目录(单根)拥有大量加载的类，最终可能其他并行活动结束后，该活动依然没有结束而带来的等待时间。</li>
<li><code>更新已记忆集合 Update RS</code>：并发优化线程会对脏卡片的分区进行扫描更新日志缓冲区来更新RSet，但只会处理全局缓冲列表。作为补充，所有被记录但是还没有被优化线程处理的剩余缓冲区，会在该阶段处理，变成已处理缓冲区(Processed Buffers)。为了限制花在更新RSet的时间，可以设置暂停占用百分比-XX:G1RSetUpdatingPauseTimePercent(默认10%，即-XX:MaxGCPauseMills/10)。值得注意的是，如果更新日志缓冲区更新的任务不降低，单纯地减少RSet的更新时间，会导致暂停中被处理的缓冲区减少，将日志缓冲区更新工作推到并发优化线程上，从而增加对Java应用线程资源的争夺。</li>
<li><code>RSet扫描 Scan RS</code>：在收集当前CSet之前，考虑到分区外的引用，必须扫描CSet分区的RSet。如果RSet发生粗化，则会增加RSet的扫描时间。开启诊断模式-XX:UnlockDiagnosticVMOptions后，通过参数-XX:+G1SummarizeRSetStats可以确定并发优化线程是否能够及时处理更新日志缓冲区，并提供更多的信息，来帮助为RSet粗化总数提供窗口。参数-XX：G1SummarizeRSetStatsPeriod=n可设置RSet的统计周期，即经历多少此GC后进行一次统计</li>
<li><code>代码根扫描 Code Root Scanning</code>：对代码根集合进行扫描，扫描JVM编译后代码Native Method的引用信息(nmethod扫描)，进行RSet扫描。事实上，只有CSet分区中的RSet有强代码根时，才会做nmethod扫描，查找对CSet的引用。</li>
<li><code>转移和回收 Object Copy</code>：通过选定的CSet以及CSet分区完整的引用集，将执行暂停时间的主要部分：CSet分区存活对象的转移、CSet分区空间的回收。通过工作窃取机制来负载均衡地选定复制对象的线程，并且复制和扫描对象被转移的存活对象将拷贝到每个GC线程分配缓冲区GCLAB。G1会通过计算，预测分区复制所花费的时间，从而调整年轻代的尺寸。</li>
<li><code>终止 Termination</code>：完成上述任务后，如果任务队列已空，则工作线程会发起终止要求。如果还有其他线程继续工作，空闲的线程会通过工作窃取机制尝试帮助其他线程处理。而单独执行根分区扫描的线程，如果任务过重，最终会晚于终止。</li>
<li><code>GC外部的并行活动 GC Worker Other</code>：该部分并非GC的活动，而是JVM的活动导致占用了GC暂停时间(例如JNI编译)。</li>
</ul>
<p><strong>串行活动</strong></p>
<ul>
<li><code>代码根更新 Code Root Fixup</code>：根据转移对象更新代码根。</li>
<li><code>代码根清理 Code Root Purge</code>：清理代码根集合表。</li>
<li><code>清除全局卡片标记 Clear CT</code>：在任意收集周期会扫描CSet与RSet记录的PRT，扫描时会在全局卡片表中进行标记，防止重复扫描。在收集周期的最后将会清除全局卡片表中的已扫描标志。</li>
<li><code>选择下次收集集合 Choose CSet</code>：该部分主要用于并发标记周期后的年轻代收集、以及混合收集中，在这些收集过程中，由于有老年代候选分区的加入，往往需要对下次收集的范围做出界定；但单纯的年轻代收集中，所有收集的分区都会被收集，不存在选择。</li>
<li><code>引用处理 Ref Proc</code>：主要针对软引用、弱引用、虚引用、final引用、JNI引用。当Ref Proc占用时间过多时，可选择使用参数<code>-XX:ParallelRefProcEnabled</code>激活多线程引用处理。G1希望应用能小心使用软引用，因为软引用会一直占据内存空间直到空间耗尽时被Full GC回收掉；即使未发生Full GC，软引用对内存的占用，也会导致GC次数的增加。</li>
<li><code>引用排队 Ref Enq</code>：此项活动可能会导致RSet的更新，此时会通过记录日志，将关联的卡片标记为脏卡片。</li>
<li><code>卡片重新脏化 Redirty Cards</code>：重新脏化卡片。</li>
<li><code>回收空闲巨型分区 Humongous Reclaim</code>：G1做了一个优化：通过查看所有根对象以及年轻代分区的RSet，如果确定RSet中巨型对象没有任何引用，则说明G1发现了一个不可达的巨型对象，该对象分区会被回收。</li>
<li><code>释放分区 Free CSet</code>：回收CSet分区的所有空间，并加入到空闲分区中。</li>
<li><code>其他活动 Other</code>：GC中可能还会经历其他耗时很小的活动，如修复JNI句柄等。</li>
</ul>
<h3><a class="header-anchor" href="#_3-5-并发标记周期后的年轻代收集-young-collection-following-concurrent-marking-cycle"><span></span></a><a href="#_3-5-%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0%E5%91%A8%E6%9C%9F%E5%90%8E%E7%9A%84%E5%B9%B4%E8%BD%BB%E4%BB%A3%E6%94%B6%E9%9B%86-young-collection-following-concurrent-marking-cycle">#</a> 3.5 并发标记周期后的年轻代收集 Young Collection Following Concurrent Marking Cycle</h3>
<p>当G1发起并发标记周期之后，并不会马上开始混合收集。G1会先等待下一次年轻代收集，然后在该收集阶段中，确定下次混合收集的CSet(Choose CSet)。</p>
<h4><a class="header-anchor" href="#_3-5-1-混合收集周期-mixed-collection-cycle"><span></span></a><a href="#_3-5-1-%E6%B7%B7%E5%90%88%E6%94%B6%E9%9B%86%E5%91%A8%E6%9C%9F-mixed-collection-cycle">#</a> 3.5.1 混合收集周期 Mixed Collection Cycle</h4>
<p>单次的混合收集与年轻代收集并无二致。根据暂停目标，老年代的分区可能不能一次暂停收集中被处理完，G1会发起连续多次的混合收集，称为混合收集周期(Mixed Collection Cycle)。G1会计算每次加入到CSet中的分区数量、混合收集进行次数，并且在上次的年轻代收集、以及接下来的混合收集中，G1会确定下次加入CSet的分区集(Choose CSet)，并且确定是否结束混合收集周期。</p>
<h4><a class="header-anchor" href="#_3-5-2-转移失败的担保机制-full-gc"><span></span></a><a href="#_3-5-2-%E8%BD%AC%E7%A7%BB%E5%A4%B1%E8%B4%A5%E7%9A%84%E6%8B%85%E4%BF%9D%E6%9C%BA%E5%88%B6-full-gc">#</a> 3.5.2 转移失败的担保机制 Full GC</h4>
<p>转移失败(Evacuation Failure)是指当G1无法在堆空间中申请新的分区时，G1便会触发担保机制，执行一次STW式的、单线程的Full GC。Full GC会对整堆做标记清除和压缩，最后将只包含纯粹的存活对象。参数-XX:G1ReservePercent(默认10%)可以保留空间，来应对晋升模式下的异常情况，最大占用整堆50%，更大也无意义。</p>
<p>G1在以下场景中会触发Full GC，同时会在日志中记录to-space-exhausted以及Evacuation Failure：</p>
<ul>
<li>从年轻代分区拷贝存活对象时，无法找到可用的空闲分区</li>
<li>从老年代分区转移存活对象时，无法找到可用的空闲分区</li>
<li>分配巨型对象时在老年代无法找到足够的连续分区</li>
</ul>
<p>由于G1的应用场合往往堆内存都比较大，所以Full GC的收集代价非常昂贵，应该避免Full GC的发生。</p>
<h2><a class="header-anchor" href="#_4-总结"><span></span></a><a href="#_4-%E6%80%BB%E7%BB%93">#</a> 4. 总结</h2>
<p>G1是一款非常优秀的垃圾收集器，不仅适合堆内存大的应用，同时也简化了调优的工作。通过主要的参数初始和最大堆空间、以及最大容忍的GC暂停目标，就能得到不错的性能；同时，我们也看到G1对内存空间的浪费较高，但通过<strong>首先收集尽可能多的垃圾</strong>(Garbage First)的设计原则，可以及时发现过期对象，从而让内存占用处于合理的水平。</p>
<p>虽然G1也有类似CMS的收集动作：初始标记、并发标记、重新标记、清除、转移回收，并且也以一个串行收集器做担保机制，但单纯地以类似前三种的过程描述显得并不是很妥当。</p>
<ul>
<li>G1的设计原则是"<strong>首先收集尽可能多的垃圾</strong>(Garbage First)"。因此，G1并不会等内存耗尽(串行、并行)或者快耗尽(CMS)的时候开始垃圾收集，而是在内部采用了启发式算法，在老年代找出具有高收集收益的分区进行收集。同时G1可以根据用户设置的暂停时间目标自动调整年轻代和总堆大小，暂停目标越短年轻代空间越小、总空间就越大；</li>
<li>G1采用内存分区(Region)的思路，将内存划分为一个个相等大小的内存分区，回收时则以分区为单位进行回收，存活的对象复制到另一个空闲分区中。由于都是以相等大小的分区为单位进行操作，因此G1天然就是一种压缩方案(局部压缩)；</li>
<li>G1虽然也是分代收集器，但整个内存分区不存在物理上的年轻代与老年代的区别，也不需要完全独立的survivor(to space)堆做复制准备。G1只有逻辑上的分代概念，或者说每个分区都可能随G1的运行在不同代之间前后切换；</li>
<li>G1的收集都是STW的，但年轻代和老年代的收集界限比较模糊，采用了混合(mixed)收集的方式。即每次收集既可能只收集年轻代分区(年轻代收集)，也可能在收集年轻代的同时，包含部分老年代分区(混合收集)，这样即使堆内存很大时，也可以限制收集范围，从而降低停顿。</li>
</ul>
<h2><a class="header-anchor" href="#参考资料"><span></span></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a> 参考资料</h2>
<ul>
<li>Charlie H, Monica B, Poonam P, Bengt R. Java Performance Companion</li>
<li>周志明. 深入理解JVM虚拟机</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-gc-g1-1.jpeg" type="image/jpeg"/>
    </item>
    <item>
      <title>GC 垃圾回收器之ZGC详解</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BZGC%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B9%8BZGC%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收器之ZGC详解</source>
      <description>GC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于大内存低延迟服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章新一代垃圾回收器ZGC的探索与实践在新窗口打开比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>GC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于<strong>大内存低延迟</strong>服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章<a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC相关的知识体系。</p>
</blockquote>
<ul>
<li>GC 垃圾回收器之ZGC详解
<ul>
<li><a href="#zgc%E6%A6%82%E8%BF%B0">ZGC概述</a></li>
<li>GC之痛
<ul>
<li>CMS与G1停顿时间瓶颈
<ul>
<li><a href="#%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">标记阶段停顿分析</a></li>
<li><a href="#%E6%B8%85%E7%90%86%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">清理阶段停顿分析</a></li>
<li><a href="#%E5%A4%8D%E5%88%B6%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">复制阶段停顿分析</a></li>
</ul>
</li>
</ul>
</li>
<li>ZGC原理
<ul>
<li><a href="#%E5%85%A8%E5%B9%B6%E5%8F%91%E7%9A%84zgc">全并发的ZGC</a></li>
<li>ZGC关键技术
<ul>
<li><a href="#%E7%9D%80%E8%89%B2%E6%8C%87%E9%92%88">着色指针</a></li>
<li><a href="#%E8%AF%BB%E5%B1%8F%E9%9A%9C">读屏障</a></li>
</ul>
</li>
<li><a href="#zgc%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E6%BC%94%E7%A4%BA">ZGC并发处理演示</a></li>
</ul>
</li>
<li>ZGC调优实践
<ul>
<li>调优基础知识
<ul>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E9%87%8D%E8%A6%81%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">理解ZGC重要配置参数</a></li>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E8%A7%A6%E5%8F%91%E6%97%B6%E6%9C%BA">理解ZGC触发时机</a></li>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E6%97%A5%E5%BF%97">理解ZGC日志</a></li>
<li><a href="#%E7%90%86%E8%A7%A3zgc%E5%81%9C%E9%A1%BF%E5%8E%9F%E5%9B%A0">理解ZGC停顿原因</a></li>
</ul>
</li>
<li>调优案例
<ul>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%80%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E4%B8%AD%E6%B5%81%E9%87%8F%E7%AA%81%E5%A2%9E%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">案例一：秒杀活动中流量突增，出现性能毛刺</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%BA%8C%E5%8E%8B%E6%B5%8B%E6%97%B6%E6%B5%81%E9%87%8F%E9%80%90%E6%B8%90%E5%A2%9E%E5%A4%A7%E5%88%B0%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E5%90%8E%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">案例二：压测时，流量逐渐增大到一定程度后，出现性能毛刺</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%89-%E5%8D%95%E6%AC%A1gc%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B430ms%E4%B8%8E%E9%A2%84%E6%9C%9F%E5%81%9C%E9%A1%BF10ms%E5%B7%A6%E5%8F%B3%E6%9C%89%E8%BE%83%E5%A4%A7%E5%B7%AE%E8%B7%9D">案例三： 单次GC停顿时间30ms，与预期停顿10ms左右有较大差距</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E5%9B%9B%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF%E5%8D%95%E6%AC%A1gc%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF%E9%87%8D%E5%90%AF%E5%90%8E%E6%81%A2%E5%A4%8D">案例四：服务启动后，运行时间越长，单次GC时间越长，重启后恢复</a></li>
</ul>
</li>
</ul>
</li>
<li>升级ZGC效果
<ul>
<li><a href="#%E5%BB%B6%E8%BF%9F%E9%99%8D%E4%BD%8E">延迟降低</a></li>
<li><a href="#%E5%90%9E%E5%90%90%E4%B8%8B%E9%99%8D">吞吐下降</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#zgc概述"><span></span></a><a href="#zgc%E6%A6%82%E8%BF%B0">#</a> ZGC概述</h2>
<blockquote>
<p>ZGC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器，它的设计目标包括：</p>
</blockquote>
<ul>
<li>停顿时间不超过10ms；</li>
<li>停顿时间不会随着堆的大小，或者活跃对象的大小而增加（对程序吞吐量影响小于15%）；</li>
<li>支持8MB~4TB级别的堆（未来支持16TB）。</li>
</ul>
<p>从设计目标来看，我们知道ZGC适用于<strong>大内存低延迟</strong>服务的内存管理和回收。本文主要介绍ZGC在低延时场景中的应用和卓越表现，文章内容主要分为四部分：</p>
<ol>
<li><strong>GC之痛</strong>：介绍实际业务中遇到的GC痛点，并分析CMS收集器和G1收集器停顿时间瓶颈；</li>
<li><strong>ZGC原理</strong>：分析ZGC停顿时间比G1或CMS更短的本质原因，以及背后的技术原理；</li>
<li><strong>ZGC调优实践</strong>：重点分享对ZGC调优的理解，并分析若干个实际调优案例；</li>
<li><strong>升级ZGC效果</strong>：展示在生产环境应用ZGC取得的效果。</li>
</ol>
<h2><a class="header-anchor" href="#gc之痛"><span></span></a><a href="#gc%E4%B9%8B%E7%97%9B">#</a> GC之痛</h2>
<blockquote>
<p>很多低延迟高可用Java服务的系统可用性经常受GC停顿的困扰。GC停顿指垃圾回收期间STW（Stop The World），当STW时，所有应用线程停止活动，等待GC停顿结束。</p>
</blockquote>
<p>以美团风控服务为例，部分上游业务要求风控服务65ms内返回结果，并且可用性要达到99.99%。但因为GC停顿，我们未能达到上述可用性目标。当时使用的是CMS垃圾回收器，单次Young GC 40ms，一分钟10次，接口平均响应时间30ms。通过计算可知，有（40ms + 30ms) * 10次 / 60000ms = 1.12%的请求的响应时间会增加0 ~ 40ms不等，其中30ms * 10次 / 60000ms = 0.5%的请求响应时间会增加40ms。可见，GC停顿对响应时间的影响较大。为了降低GC停顿对系统可用性的影响，我们从降低单次GC时间和降低GC频率两个角度出发进行了调优，还测试过G1垃圾回收器，但这三项措施均未能降低GC对服务可用性的影响。</p>
<h3><a class="header-anchor" href="#cms与g1停顿时间瓶颈"><span></span></a><a href="#cms%E4%B8%8Eg1%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B4%E7%93%B6%E9%A2%88">#</a> CMS与G1停顿时间瓶颈</h3>
<blockquote>
<p>在介绍ZGC之前，首先回顾一下CMS和G1的GC过程以及停顿时间的瓶颈。CMS新生代的Young GC、G1和ZGC都基于标记-复制算法，但算法具体实现的不同就导致了巨大的性能差异。</p>
</blockquote>
<p>标记-复制算法应用在CMS新生代（ParNew是CMS默认的新生代垃圾回收器）和G1垃圾回收器中。标记-复制算法可以分为三个阶段：</p>
<ul>
<li><strong>标记阶段</strong>，即从GC Roots集合开始，标记活跃对象；</li>
<li><strong>转移阶段</strong>，即把活跃对象复制到新的内存地址上；</li>
<li><strong>重定位阶段</strong>，因为转移导致对象的地址发生了变化，在重定位阶段，所有指向对象旧地址的指针都要调整到对象新的地址上。</li>
</ul>
<p>下面以G1为例，通过G1中标记-复制算法过程（G1的Young GC和Mixed GC均采用该算法），分析G1停顿耗时的主要瓶颈。G1垃圾回收周期如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>G1的混合回收过程可以分为标记阶段、清理阶段和复制阶段。</p>
<h4><a class="header-anchor" href="#标记阶段停顿分析"><span></span></a><a href="#%E6%A0%87%E8%AE%B0%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">#</a> 标记阶段停顿分析</h4>
<ul>
<li><strong>初始标记阶段</strong>：初始标记阶段是指从GC Roots出发标记全部直接子节点的过程，该阶段是STW的。由于GC Roots数量不多，通常该阶段耗时非常短。</li>
<li><strong>并发标记阶段</strong>：并发标记阶段是指从GC Roots开始对堆中对象进行可达性分析，找出存活对象。该阶段是并发的，即应用线程和GC线程可以同时活动。并发标记耗时相对长很多，但因为不是STW，所以我们不太关心该阶段耗时的长短。</li>
<li><strong>再标记阶段</strong>：重新标记那些在并发标记阶段发生变化的对象。该阶段是STW的。</li>
</ul>
<h4><a class="header-anchor" href="#清理阶段停顿分析"><span></span></a><a href="#%E6%B8%85%E7%90%86%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">#</a> 清理阶段停顿分析</h4>
<ul>
<li><strong>清理阶段</strong>清点出有存活对象的分区和没有存活对象的分区，该阶段不会清理垃圾对象，也不会执行存活对象的复制。该阶段是STW的。</li>
</ul>
<h4><a class="header-anchor" href="#复制阶段停顿分析"><span></span></a><a href="#%E5%A4%8D%E5%88%B6%E9%98%B6%E6%AE%B5%E5%81%9C%E9%A1%BF%E5%88%86%E6%9E%90">#</a> 复制阶段停顿分析</h4>
<ul>
<li><strong>复制算法</strong>中的转移阶段需要分配新内存和复制对象的成员变量。转移阶段是STW的，其中内存分配通常耗时非常短，但对象成员变量的复制耗时有可能较长，这是因为复制耗时与存活对象数量与对象复杂度成正比。对象越复杂，复制耗时越长。</li>
</ul>
<p>四个STW过程中，初始标记因为只标记GC Roots，耗时较短。再标记因为对象数少，耗时也较短。清理阶段因为内存分区数量少，耗时也较短。转移阶段要处理所有存活的对象，耗时会较长。因此，<strong>G1停顿时间的瓶颈主要是标记-复制中的转移阶段STW</strong>。为什么转移阶段不能和标记阶段一样并发执行呢？主要是G1未能解决转移过程中准确定位对象地址的问题。</p>
<p>G1的Young GC和CMS的Young GC，其标记-复制全过程STW，这里不再详细阐述。</p>
<h2><a class="header-anchor" href="#zgc原理"><span></span></a><a href="#zgc%E5%8E%9F%E7%90%86">#</a> ZGC原理</h2>
<h3><a class="header-anchor" href="#全并发的zgc"><span></span></a><a href="#%E5%85%A8%E5%B9%B6%E5%8F%91%E7%9A%84zgc">#</a> 全并发的ZGC</h3>
<blockquote>
<p>与CMS中的ParNew和G1类似，<strong>ZGC也采用标记-复制算法</strong>，不过ZGC对该算法做了重大改进：<strong>ZGC在标记、转移和重定位阶段几乎都是并发</strong>的，这是ZGC实现停顿时间小于10ms目标的最关键原因。</p>
</blockquote>
<p>ZGC垃圾回收周期如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>ZGC只有三个STW阶段：初始标记，再标记，初始转移。其中，初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短；再标记阶段STW时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC几乎所有暂停都只依赖于GC Roots集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全STW的，且停顿时间随存活对象的大小增加而增加。</p>
<h3><a class="header-anchor" href="#zgc关键技术"><span></span></a><a href="#zgc%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF">#</a> ZGC关键技术</h3>
<p>ZGC通过着色指针和读屏障技术，解决了转移过程中准确访问对象的问题，实现了并发转移。大致原理描述如下：并发转移中“并发”意味着GC线程在转移对象的过程中，应用线程也在不停地访问对象。假设对象发生转移，但对象地址未及时更新，那么应用线程可能访问到旧地址，从而造成错误。而在ZGC中，应用线程访问对象将触发“读屏障”，如果发现对象被移动了，那么“读屏障”会把读出来的指针更新到对象的新地址上，这样应用线程始终访问的都是对象的新地址。那么，JVM是如何判断对象被移动过呢？就是利用对象引用的地址，即着色指针。下面介绍着色指针和读屏障技术细节。</p>
<h4><a class="header-anchor" href="#着色指针"><span></span></a><a href="#%E7%9D%80%E8%89%B2%E6%8C%87%E9%92%88">#</a> 着色指针</h4>
<blockquote>
<p>着色指针是一种将信息存储在指针中的技术。</p>
</blockquote>
<p>ZGC仅支持64位系统，它把64位虚拟地址空间划分为多个子空间，如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>其中，[0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。</p>
<p>当应用程序创建对象时，首先在堆空间申请一个虚拟地址，但该虚拟地址并不会映射到真正的物理地址。ZGC同时会为该对象在M0、M1和Remapped地址空间分别申请一个虚拟地址，且这三个虚拟地址对应同一个物理地址，但这三个空间在同一时间有且只有一个空间有效。ZGC之所以设置三个虚拟地址空间，是因为它使用“空间换时间”思想，去降低GC停顿时间。“空间换时间”中的空间是虚拟空间，而不是真正的物理空间。后续章节将详细介绍这三个空间的切换过程。</p>
<p>与上述地址空间划分相对应，ZGC实际仅使用64位地址空间的第041位，而第4245位存储元数据，第47~63位固定为0。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>ZGC将对象存活信息存储在42~45位中，这与传统的垃圾回收并将对象存活信息放在对象头中完全不同。</p>
<h4><a class="header-anchor" href="#读屏障"><span></span></a><a href="#%E8%AF%BB%E5%B1%8F%E9%9A%9C">#</a> 读屏障</h4>
<blockquote>
<p>读屏障是JVM向应用代码插入一小段代码的技术。当应用线程从堆中读取对象引用时，就会执行这段代码。需要注意的是，仅“从堆中读取对象引用”才会触发这段代码。</p>
</blockquote>
<p>读屏障示例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> obj</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FieldA</span><span style="color:#7F848E;font-style:italic">   // 从堆中读取引用，需要加入屏障</span></span>
<span class="line"><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B">Load</span><span style="color:#E06C75"> barrier</span><span style="color:#56B6C2">&gt;</span></span>
<span class="line"><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> o  </span><span style="color:#7F848E;font-style:italic">// 无需加入屏障，因为不是从堆中读取引用</span></span>
<span class="line"><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">dosomething</span><span style="color:#ABB2BF">()</span><span style="color:#7F848E;font-style:italic"> // 无需加入屏障，因为不是从堆中读取引用</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">  obj</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">FieldB</span><span style="color:#7F848E;font-style:italic">  //无需加入屏障，因为不是对象引用</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ZGC中读屏障的代码作用：在对象标记和转移过程中，用于确定对象的引用地址是否满足条件，并作出相应动作。</p>
<h3><a class="header-anchor" href="#zgc并发处理演示"><span></span></a><a href="#zgc%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E6%BC%94%E7%A4%BA">#</a> ZGC并发处理演示</h3>
<p>接下来详细介绍ZGC一次垃圾回收周期中地址视图的切换过程：</p>
<ul>
<li><strong>初始化</strong>：ZGC初始化之后，整个内存空间的地址视图被设置为Remapped。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。</li>
<li><strong>并发标记阶段</strong>：第一次进入标记阶段时视图为M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从Remapped调整为M0。所以，在标记阶段结束之后，对象的地址要么是M0视图，要么是Remapped。如果对象的地址是M0视图，那么说明对象是活跃的；如果对象的地址是Remapped视图，说明对象是不活跃的。</li>
<li><strong>并发转移阶段</strong>：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被GC转移线程或者应用线程访问过，那么就将对象的地址视图从M0调整为Remapped。</li>
</ul>
<p>其实，在标记阶段存在两个地址视图M0和M1，上面的过程显示只用了一个地址视图。<strong>之所以设计成两个，是为了区别前一次标记和当前标记</strong>。也即，第二次进入并发标记阶段后，地址视图调整为M1，而非M0。</p>
<p>着色指针和读屏障技术不仅应用在并发转移阶段，还应用在并发标记阶段：将对象设置为已标记，传统的垃圾回收器需要进行一次内存访问，并将对象存活信息放在对象头中；而在ZGC中，只需要设置指针地址的第42~45位即可，并且因为是寄存器访问，所以速度比访问内存更快。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#zgc调优实践"><span></span></a><a href="#zgc%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5">#</a> ZGC调优实践</h2>
<blockquote>
<p>ZGC不是“银弹”，需要根据服务的具体特点进行调优。网络上能搜索到实战经验较少，调优理论需自行摸索，我们在此阶段也耗费了不少时间，最终才达到理想的性能。本文的一个目的是列举一些使用ZGC时常见的问题，帮助大家使用ZGC提高服务可用性。</p>
</blockquote>
<h3><a class="header-anchor" href="#调优基础知识"><span></span></a><a href="#%E8%B0%83%E4%BC%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">#</a> 调优基础知识</h3>
<h4><a class="header-anchor" href="#理解zgc重要配置参数"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E9%87%8D%E8%A6%81%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">#</a> 理解ZGC重要配置参数</h4>
<blockquote>
<p>以我们服务在生产环境中ZGC参数配置为例，说明各个参数的作用：</p>
</blockquote>
<p>重要参数配置样例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">Xms10G </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">Xmx10G</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ReservedCodeCacheSize</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">256m </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">InitialCodeCacheSize</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">256m </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">UnlockExperimentalVMOptions </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">UseZGC</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ConcGCThreads</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">2</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ParallelGCThreads</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">6</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ZCollectionInterval</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">120</span><span style="color:#56B6C2"> -</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#E06C75">ZAllocationSpikeTolerance</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">UnlockDiagnosticVMOptions </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">XX</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">ZProactive</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#56B6C2">-</span><span style="color:#E06C75">Xlog</span><span style="color:#C678DD">:</span><span style="color:#E06C75">safepoint</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">classhisto</span><span style="color:#56B6C2">*=</span><span style="color:#E06C75">trace</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">age</span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">gc</span><span style="color:#56B6C2">*=</span><span style="color:#E06C75">info</span><span style="color:#C678DD">:</span><span style="color:#E06C75">file</span><span style="color:#56B6C2">=/</span><span style="color:#E06C75">opt</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">logs</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">logs</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">gc</span><span style="color:#56B6C2">-%</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">log</span><span style="color:#C678DD">:</span><span style="color:#E06C75">time</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">tid</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">tags</span><span style="color:#C678DD">:</span><span style="color:#E06C75">filecount</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">filesize</span><span style="color:#56B6C2">=</span><span style="color:#E06C75">50m</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>-Xms -Xmx</code>：堆的最大内存和最小内存，这里都设置为10G，程序的堆内存将保持10G不变。</li>
<li><code>-XX:ReservedCodeCacheSize -XX:InitialCodeCacheSize</code>：设置CodeCache的大小， JIT编译的代码都放在CodeCache中，一般服务64m或128m就已经足够。我们的服务因为有一定特殊性，所以设置的较大，后面会详细介绍。</li>
<li><code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code>：启用ZGC的配置。</li>
<li><code>-XX:ConcGCThreads</code>：并发回收垃圾的线程。默认是总核数的12.5%，8核CPU默认是1。调大后GC变快，但会占用程序运行时的CPU资源，吞吐会受到影响。</li>
<li><code>-XX:ParallelGCThreads</code>：STW阶段使用线程数，默认是总核数的60%。</li>
<li><code>-XX:ZCollectionInterval</code>：ZGC发生的最小时间间隔，单位秒。</li>
<li><code>-XX:ZAllocationSpikeTolerance</code>：ZGC触发自适应算法的修正系数，默认2，数值越大，越早的触发ZGC。</li>
<li><code>-XX:+UnlockDiagnosticVMOptions -XX:-ZProactive</code>：是否启用主动回收，默认开启，这里的配置表示关闭。</li>
<li><code>-Xlog</code>：设置GC日志中的内容、格式、位置以及每个日志的大小。</li>
</ul>
<h4><a class="header-anchor" href="#理解zgc触发时机"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E8%A7%A6%E5%8F%91%E6%97%B6%E6%9C%BA">#</a> 理解ZGC触发时机</h4>
<blockquote>
<p>相比于CMS和G1的GC触发机制，ZGC的GC触发机制有很大不同。ZGC的核心特点是并发，GC过程中一直有新的对象产生。如何保证在GC完成之前，新产生的对象不会将堆占满，是ZGC参数调优的第一大目标。因为在ZGC中，当垃圾来不及回收将堆占满时，会导致正在运行的线程停顿，持续时间可能长达秒级之久。</p>
</blockquote>
<p>ZGC有多种GC触发机制，总结如下：</p>
<ul>
<li><strong>阻塞内存分配请求触发</strong>：当垃圾来不及回收，垃圾将堆占满时，会导致部分线程阻塞。我们应当避免出现这种触发方式。日志中关键字是“Allocation Stall”。</li>
<li><strong>基于分配速率的自适应算法</strong>：最主要的GC触发方式，其算法原理可简单描述为”ZGC根据近期的对象分配速率以及GC时间，计算出当内存占用达到什么阈值时触发下一次GC”。自适应算法的详细理论可参考彭成寒《新一代垃圾回收器ZGC设计与实现》一书中的内容。通过ZAllocationSpikeTolerance参数控制阈值大小，该参数默认2，数值越大，越早的触发GC。我们通过调整此参数解决了一些问题。日志中关键字是“Allocation Rate”。</li>
<li><strong>基于固定时间间隔</strong>：通过ZCollectionInterval控制，适合应对突增流量场景。流量平稳变化时，自适应算法可能在堆使用率达到95%以上才触发GC。流量突增时，自适应算法触发的时机可能会过晚，导致部分线程阻塞。我们通过调整此参数解决流量突增场景的问题，比如定时活动、秒杀等场景。日志中关键字是“Timer”。</li>
<li><strong>主动触发规则</strong>：类似于固定间隔规则，但时间间隔不固定，是ZGC自行算出来的时机，我们的服务因为已经加了基于固定时间间隔的触发机制，所以通过-ZProactive参数将该功能关闭，以免GC频繁，影响服务可用性。 日志中关键字是“Proactive”。</li>
<li><strong>预热规则</strong>：服务刚启动时出现，一般不需要关注。日志中关键字是“Warmup”。</li>
<li><strong>外部触发</strong>：代码中显式调用System.gc()触发。 日志中关键字是“System.gc()”。</li>
<li><strong>元数据分配触发</strong>：元数据区不足时导致，一般不需要关注。 日志中关键字是“Metadata GC Threshold”。</li>
</ul>
<h4><a class="header-anchor" href="#理解zgc日志"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E6%97%A5%E5%BF%97">#</a> 理解ZGC日志</h4>
<p>一次完整的GC过程，需要注意的点已在图中标出。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>注意：该日志过滤了进入安全点的信息。正常情况，在一次GC过程中还穿插着进入安全点的操作。</p>
<p>GC日志中每一行都注明了GC过程中的信息，关键信息如下：</p>
<ul>
<li><strong>Start</strong>：开始GC，并标明的GC触发的原因。上图中触发原因是自适应算法。</li>
<li><strong>Phase-Pause Mark Start</strong>：初始标记，会STW。</li>
<li><strong>Phase-Pause Mark End</strong>：再次标记，会STW。</li>
<li><strong>Phase-Pause Relocate Start</strong>：初始转移，会STW。</li>
<li><strong>Heap信息</strong>：记录了GC过程中Mark、Relocate前后的堆大小变化状况。High和Low记录了其中的最大值和最小值，我们一般关注High中Used的值，如果达到100%，在GC过程中一定存在内存分配不足的情况，需要调整GC的触发时机，更早或者更快地进行GC。</li>
<li><strong>GC信息统计</strong>：可以定时的打印垃圾收集信息，观察10秒内、10分钟内、10个小时内，从启动到现在的所有统计信息。利用这些统计信息，可以排查定位一些异常点。</li>
</ul>
<p>日志中内容较多，关键点已用红线标出，含义较好理解，更详细的解释大家可以自行在网上查阅资料。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#理解zgc停顿原因"><span></span></a><a href="#%E7%90%86%E8%A7%A3zgc%E5%81%9C%E9%A1%BF%E5%8E%9F%E5%9B%A0">#</a> 理解ZGC停顿原因</h4>
<p>我们在实战过程中共发现了6种使程序停顿的场景，分别如下：</p>
<ul>
<li><strong>GC时，初始标记</strong>：日志中Pause Mark Start。</li>
<li><strong>GC时，再标记</strong>：日志中Pause Mark End。</li>
<li><strong>GC时，初始转移</strong>：日志中Pause Relocate Start。</li>
<li><strong>内存分配阻塞</strong>：当内存不足时线程会阻塞等待GC完成，关键字是”Allocation Stall”。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li><strong>安全点</strong>：所有线程进入到安全点后才能进行GC，ZGC定期进入安全点判断是否需要GC。先进入安全点的线程需要等待后进入安全点的线程直到所有线程挂起。</li>
<li><strong>dump线程、内存</strong>：比如jstack、jmap命令。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#调优案例"><span></span></a><a href="#%E8%B0%83%E4%BC%98%E6%A1%88%E4%BE%8B">#</a> 调优案例</h3>
<p>我们维护的服务名叫Zeus，它是美团的规则平台，常用于风控场景中的规则管理。规则运行是基于开源的表达式执行引擎Aviator。Aviator内部将每一条表达式转化成Java的一个类，通过调用该类的接口实现表达式逻辑。</p>
<p>Zeus服务内的规则数量超过万条，且每台机器每天的请求量几百万。这些客观条件导致Aviator生成的类和方法会产生很多的ClassLoader和CodeCache，这些在使用ZGC时都成为过GC的性能瓶颈。接下来介绍两类调优案例。</p>
<blockquote>
<p><strong>第一类：内存分配阻塞，系统停顿可达到秒级</strong></p>
</blockquote>
<h4><a class="header-anchor" href="#案例一-秒杀活动中流量突增-出现性能毛刺"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E4%B8%80-%E7%A7%92%E6%9D%80%E6%B4%BB%E5%8A%A8%E4%B8%AD%E6%B5%81%E9%87%8F%E7%AA%81%E5%A2%9E-%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">#</a> 案例一：秒杀活动中流量突增，出现性能毛刺</h4>
<p>日志信息：对比出现性能毛刺时间点的GC日志和业务日志，发现JVM停顿了较长时间，且停顿时GC日志中有大量的“Allocation Stall”日志。</p>
<p>分析：这种案例多出现在“自适应算法”为主要GC触发机制的场景中。ZGC是一款并发的垃圾回收器，GC线程和应用线程同时活动，在GC过程中，还会产生新的对象。GC完成之前，新产生的对象将堆占满，那么应用线程可能因为申请内存失败而导致线程阻塞。当秒杀活动开始，大量请求打入系统，但自适应算法计算的GC触发间隔较长，导致GC触发不及时，引起了内存分配阻塞，导致停顿。</p>
<p>解决方法：</p>
<p>（1）开启”基于固定时间间隔“的GC触发机制：-XX:ZCollectionInterval。比如调整为5秒，甚至更短。 （2）增大修正系数-XX:ZAllocationSpikeTolerance，更早触发GC。ZGC采用正态分布模型预测内存分配速率，模型修正系数ZAllocationSpikeTolerance默认值为2，值越大，越早的触发GC，Zeus中所有集群设置的是5。</p>
<h4><a class="header-anchor" href="#案例二-压测时-流量逐渐增大到一定程度后-出现性能毛刺"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E4%BA%8C-%E5%8E%8B%E6%B5%8B%E6%97%B6-%E6%B5%81%E9%87%8F%E9%80%90%E6%B8%90%E5%A2%9E%E5%A4%A7%E5%88%B0%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E5%90%8E-%E5%87%BA%E7%8E%B0%E6%80%A7%E8%83%BD%E6%AF%9B%E5%88%BA">#</a> 案例二：压测时，流量逐渐增大到一定程度后，出现性能毛刺</h4>
<p>日志信息：平均1秒GC一次，两次GC之间几乎没有间隔。</p>
<p>分析：GC触发及时，但内存标记和回收速度过慢，引起内存分配阻塞，导致停顿。</p>
<p>解决方法：增大-XX:ConcGCThreads， 加快并发标记和回收速度。ConcGCThreads默认值是核数的1/8，8核机器，默认值是1。该参数影响系统吞吐，如果GC间隔时间大于GC周期，不建议调整该参数。</p>
<blockquote>
<p><strong>第二类：GC Roots 数量大，单次GC停顿时间长</strong></p>
</blockquote>
<h4><a class="header-anchor" href="#案例三-单次gc停顿时间30ms-与预期停顿10ms左右有较大差距"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E4%B8%89-%E5%8D%95%E6%AC%A1gc%E5%81%9C%E9%A1%BF%E6%97%B6%E9%97%B430ms-%E4%B8%8E%E9%A2%84%E6%9C%9F%E5%81%9C%E9%A1%BF10ms%E5%B7%A6%E5%8F%B3%E6%9C%89%E8%BE%83%E5%A4%A7%E5%B7%AE%E8%B7%9D">#</a> 案例三： 单次GC停顿时间30ms，与预期停顿10ms左右有较大差距</h4>
<p>日志信息：观察ZGC日志信息统计，“Pause Roots ClassLoaderDataGraph”一项耗时较长。</p>
<p>分析：dump内存文件，发现系统中有上万个ClassLoader实例。我们知道ClassLoader属于GC Roots一部分，且ZGC停顿时间与GC Roots成正比，GC Roots数量越大，停顿时间越久。再进一步分析，ClassLoader的类名表明，这些ClassLoader均由Aviator组件生成。分析Aviator源码，发现Aviator对每一个表达式新生成类时，会创建一个ClassLoader，这导致了ClassLoader数量巨大的问题。在更高Aviator版本中，该问题已经被修复，即仅创建一个ClassLoader为所有表达式生成类。</p>
<p>解决方法：升级Aviator组件版本，避免生成多余的ClassLoader。</p>
<h4><a class="header-anchor" href="#案例四-服务启动后-运行时间越长-单次gc时间越长-重启后恢复"><span></span></a><a href="#%E6%A1%88%E4%BE%8B%E5%9B%9B-%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E-%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF-%E5%8D%95%E6%AC%A1gc%E6%97%B6%E9%97%B4%E8%B6%8A%E9%95%BF-%E9%87%8D%E5%90%AF%E5%90%8E%E6%81%A2%E5%A4%8D">#</a> 案例四：服务启动后，运行时间越长，单次GC时间越长，重启后恢复</h4>
<p>日志信息：观察ZGC日志信息统计，“Pause Roots CodeCache”的耗时会随着服务运行时间逐渐增长。</p>
<p>分析：CodeCache空间用于存放Java热点代码的JIT编译结果，而CodeCache也属于GC Roots一部分。通过添加-XX:+PrintCodeCacheOnCompilation参数，打印CodeCache中的被优化的方法，发现大量的Aviator表达式代码。定位到根本原因，每个表达式都是一个类中一个方法。随着运行时间越长，执行次数增加，这些方法会被JIT优化编译进入到Code Cache中，导致CodeCache越来越大。</p>
<p>解决方法：JIT有一些参数配置可以调整JIT编译的条件，但对于我们的问题都不太适用。我们最终通过业务优化解决，删除不需要执行的Aviator表达式，从而避免了大量Aviator方法进入CodeCache中。</p>
<p>值得一提的是，我们并不是在所有这些问题都解决后才全量部署所有集群。即使开始有各种各样的毛刺，但计算后发现，有各种问题的ZGC也比之前的CMS对服务可用性影响小。所以从开始准备使用ZGC到全量部署，大概用了2周的时间。在之后的3个月时间里，我们边做业务需求，边跟进这些问题，最终逐个解决了上述问题，从而使ZGC在各个集群上达到了一个更好表现。</p>
<h2><a class="header-anchor" href="#升级zgc效果"><span></span></a><a href="#%E5%8D%87%E7%BA%A7zgc%E6%95%88%E6%9E%9C">#</a> 升级ZGC效果</h2>
<h3><a class="header-anchor" href="#延迟降低"><span></span></a><a href="#%E5%BB%B6%E8%BF%9F%E9%99%8D%E4%BD%8E">#</a> 延迟降低</h3>
<p>TP(Top Percentile)是一项衡量系统延迟的指标：TP999表示99.9%请求都能被响应的最小耗时；TP99表示99%请求都能被响应的最小耗时。</p>
<p>在Zeus服务不同集群中，ZGC在低延迟（TP999 &lt; 200ms）场景中收益较大：</p>
<ul>
<li>TP999：下降12142ms，下降幅度18%74%。</li>
<li>TP99：下降528ms，下降幅度10%47%。</li>
</ul>
<p>超低延迟（TP999 &lt; 20ms）和高延迟（TP999 &gt; 200ms）服务收益不大，原因是这些服务的响应时间瓶颈不是GC，而是外部依赖的性能。</p>
<h3><a class="header-anchor" href="#吞吐下降"><span></span></a><a href="#%E5%90%9E%E5%90%90%E4%B8%8B%E9%99%8D">#</a> 吞吐下降</h3>
<p>对吞吐量优先的场景，ZGC可能并不适合。例如，Zeus某离线集群原先使用CMS，升级ZGC后，系统吞吐量明显降低。究其原因有二：</p>
<ul>
<li>第一，ZGC是单代垃圾回收器，而CMS是分代垃圾回收器。单代垃圾回收器每次处理的对象更多，更耗费CPU资源；</li>
<li>第二，ZGC使用读屏障，读屏障操作需耗费额外的计算资源。</li>
</ul>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>ZGC作为下一代垃圾回收器，性能非常优秀。ZGC垃圾回收过程几乎全部是并发，实际STW停顿时间极短，不到10ms。这得益于其采用的着色指针和读屏障技术。</p>
<p>Zeus在升级JDK 11+ZGC中，通过将风险和问题分类，然后各个击破，最终顺利实现了升级目标，GC停顿也几乎不再影响系统可用性。</p>
<p>最后推荐大家升级ZGC，Zeus系统因为业务特点，遇到了较多问题，而风控其他团队在升级时都非常顺利。</p>
<h2><a class="header-anchor" href="#参考文献"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">#</a> 参考文献</h2>
<ul>
<li><a href="https://wiki.openjdk.java.net/display/zgc/Main" target="_blank" rel="noopener noreferrer">ZGC官网</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-zgc-1.png" type="image/png"/>
    </item>
    <item>
      <title>GC 垃圾回收基础知识</title>
      <link>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html</guid>
      <source url="https://cactusli.net/rss.xml">GC 垃圾回收基础知识</source>
      <description>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 GC 垃圾回收基础知识 判断一个对象是否可被回收 1. 引用计数算法 2. 可达性分析算法 3. 方法区的回收 4. finalize() 引用类型 1. 强引用 2. 软引用...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</p>
</blockquote>
<ul>
<li>GC 垃圾回收基础知识
<ul>
<li>判断一个对象是否可被回收
<ul>
<li><a href="#1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E7%AE%97%E6%B3%95">1. 引用计数算法</a></li>
<li><a href="#2-%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95">2. 可达性分析算法</a></li>
<li><a href="#3-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9B%9E%E6%94%B6">3. 方法区的回收</a></li>
<li><a href="#4-finalize">4. finalize()</a></li>
</ul>
</li>
<li>引用类型
<ul>
<li><a href="#1-%E5%BC%BA%E5%BC%95%E7%94%A8">1. 强引用</a></li>
<li><a href="#2-%E8%BD%AF%E5%BC%95%E7%94%A8">2. 软引用</a></li>
<li><a href="#3-%E5%BC%B1%E5%BC%95%E7%94%A8">3. 弱引用</a></li>
<li><a href="#4-%E8%99%9A%E5%BC%95%E7%94%A8">4. 虚引用</a></li>
</ul>
</li>
<li>垃圾回收算法
<ul>
<li>[1. 标记 - 清除](#1-标记</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/0635cbe8.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之 Java 内存模型引入</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%BC%95%E5%85%A5.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之 Java 内存模型引入</source>
      <description>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面JMM详解, JVM 内存结构详解, Java 对象模型详解等铺垫。 JVM 基础之 Java 内存模型引入 JMM引入 从堆栈说起 堆栈里面放了什么? 线程栈如何访问堆上对象? 线程栈访问堆...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</p>
</blockquote>
<ul>
<li>JVM 基础之 Java 内存模型引入
<ul>
<li>JMM引入
<ul>
<li><a href="#%E4%BB%8E%E5%A0%86%E6%A0%88%E8%AF%B4%E8%B5%B7">从堆栈说起</a></li>
<li><a href="#%E5%A0%86%E6%A0%88%E9%87%8C%E9%9D%A2%E6%94%BE%E4%BA%86%E4%BB%80%E4%B9%88">堆栈里面放了什么? </a></li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E5%A6%82%E4%BD%95%E8%AE%BF%E9%97%AE%E5%A0%86%E4%B8%8A%E5%AF%B9%E8%B1%A1">线程栈如何访问堆上对象? </a></li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E6%A0%88%E8%AE%BF%E9%97%AE%E5%A0%86%E7%A4%BA%E4%BE%8B">线程栈访问堆示例</a></li>
</ul>
</li>
<li>JMM与硬件内存结构关系
<ul>
<li><a href="#%E7%A1%AC%E4%BB%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B">硬件内存结构简介</a></li>
<li>[JMM与硬件内存连接 - 引入](#jmm与硬件内存连接</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-memory-model-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之 Java 内存模型详解</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%20Java%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之 Java 内存模型详解</source>
      <description>本文主要转载自 Info 上深入理解Java内存模型在新窗口打开, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系。 JVM 基础之 Java 内存模型详解...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要转载自 Info 上<a href="https://www.infoq.cn/article/java_memory_model/" target="_blank" rel="noopener noreferrer">深入理解Java内存模型在新窗口打开</a>, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系。</p>
</blockquote>
<ul>
<li>JVM 基础之 Java 内存模型详解
<ul>
<li>基础
<ul>
<li><a href="#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%86%E7%B1%BB">并发编程模型的分类</a></li>
<li><a href="#java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8A%BD%E8%B1%A1">Java 内存模型的抽象</a></li>
<li><a href="#%E9%87%8D%E6%8E%92%E5%BA%8F">重排序</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E5%99%A8%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E6%8C%87%E4%BB%A4">处理器重排序与内存屏障指令</a></li>
<li><a href="#happens-before">happens-before</a></li>
</ul>
</li>
<li>重排序
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96%E6%80%A7">数据依赖性</a></li>
<li><a href="#as-if-serial-%E8%AF%AD%E4%B9%89">as-if-serial 语义</a></li>
<li><a href="#%E7%A8%8B%E5%BA%8F%E9%A1%BA%E5%BA%8F%E8%A7%84%E5%88%99">程序顺序规则</a></li>
<li><a href="#%E9%87%8D%E6%8E%92%E5%BA%8F%E5%AF%B9%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BD%B1%E5%93%8D">重排序对多线程的影响</a></li>
</ul>
</li>
<li>顺序一致性
<ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%AB%9E%E4%BA%89%E4%B8%8E%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E4%BF%9D%E8%AF%81">数据竞争与顺序一致性保证</a></li>
<li><a href="#%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">顺序一致性内存模型</a></li>
<li><a href="#%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E6%95%88%E6%9E%9C">同步程序的顺序一致性效果</a></li>
<li><a href="#%E6%9C%AA%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E7%89%B9%E6%80%A7">未同步程序的执行特性</a></li>
</ul>
</li>
<li>总结
<ul>
<li><a href="#%E5%A4%84%E7%90%86%E5%99%A8%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">处理器内存模型</a></li>
<li><a href="#jmm%E5%A4%84%E7%90%86%E5%99%A8%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">JMM，处理器内存模型与顺序一致性内存模型之间的关系</a></li>
<li><a href="#jmm-%E7%9A%84%E8%AE%BE%E8%AE%A1">JMM 的设计</a></li>
<li><a href="#jmm-%E7%9A%84%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7%E4%BF%9D%E8%AF%81">JMM 的内存可见性保证</a></li>
<li><a href="#jsr-133-%E5%AF%B9%E6%97%A7%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BF%AE%E8%A1%A5">JSR-133 对旧内存模型的修补</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#基础"><span></span></a><a href="#%E5%9F%BA%E7%A1%80">#</a> 基础</h2>
<h3><a class="header-anchor" href="#并发编程模型的分类"><span></span></a><a href="#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%88%86%E7%B1%BB">#</a> 并发编程模型的分类</h3>
<p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p>
<p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写 - 读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p>
<p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p>
<p>Java 的并发采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的 Java 程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p>
<h3><a class="header-anchor" href="#java-内存模型的抽象"><span></span></a><a href="#java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%8A%BD%E8%B1%A1">#</a> Java 内存模型的抽象</h3>
<p>在 java 中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java 语言规范称之为 formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>
<p>Java 线程之间的通信由 Java 内存模型（本文简称为 JMM）控制，JMM 决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java 内存模型的抽象示意图如下：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：</p>
<ul>
<li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li>
<li>然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。</li>
</ul>
<p>下面通过示意图来说明这两个步骤：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，本地内存 A 和 B 有主内存中共享变量 x 的副本。假设初始时，这三个内存中的 x 值都为 0。线程 A 在执行时，把更新后的 x 值（假设值为 1）临时存放在自己的本地内存 A 中。当线程 A 和线程 B 需要通信时，线程 A 首先会把自己本地内存中修改后的 x 值刷新到主内存中，此时主内存中的 x 值变为了 1。随后，线程 B 到主内存中去读取线程 A 更新后的 x 值，此时线程 B 的本地内存的 x 值也变为了 1。</p>
<p>从整体来看，这两个步骤实质上是线程 A 在向线程 B 发送消息，而且这个通信过程必须要经过主内存。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 java 程序员提供内存可见性保证。</p>
<h3><a class="header-anchor" href="#重排序"><span></span></a><a href="#%E9%87%8D%E6%8E%92%E5%BA%8F">#</a> 重排序</h3>
<p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p>
<ul>
<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>
<li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>
<li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>
</ul>
<p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p>
<p>JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>
<h3><a class="header-anchor" href="#处理器重排序与内存屏障指令"><span></span></a><a href="#%E5%A4%84%E7%90%86%E5%99%A8%E9%87%8D%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E6%8C%87%E4%BB%A4">#</a> 处理器重排序与内存屏障指令</h3>
<p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读 / 写操作的执行顺序，不一定与内存实际发生的读 / 写操作顺序一致！为了具体说明，请看下面示例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Processor A</span></span>
<span class="line"><span style="color:#E06C75">a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //A1  </span></span>
<span class="line"><span style="color:#E06C75">x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //A2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Processor B</span></span>
<span class="line"><span style="color:#E06C75">b </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //B1  </span></span>
<span class="line"><span style="color:#E06C75">y </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //B2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 初始状态：a = b = 0；处理器允许执行后得到结果：x = y = 0</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设处理器 A 和处理器 B 按程序的顺序并行执行内存访问，最终却可能得到 x = y = 0 的结果。具体的原因如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这里处理器 A 和处理器 B 可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到 x = y = 0 的结果。</p>
<p>从内存操作实际发生的顺序来看，直到处理器 A 执行 A3 来刷新自己的写缓存区，写操作 A1 才算真正执行了。虽然处理器 A 执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器 A 的内存操作顺序被重排序了（处理器 B 的情况和处理器 A 一样，这里就不赘述了）。</p>
<p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写 - 读操做重排序。</p>
<p>下面是常见处理器允许的重排序类型的列表：</p>
<p>|           | Load-Load | Load-Store | Store-Store | Store-Load | 数据依赖 |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jmm-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之JVM 内存结构</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJVM%20%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJVM%20%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之JVM 内存结构</source>
      <description>imgimg 运行时数据区 一、程序计数器 1.1 作用 1.2 概述 二、虚拟机栈 2.1 概述 2.2 栈的存储单位 2.3 栈运行原理 2.4 栈帧的内部结构 三、本地方法栈 3.1 本地方法接口 3.2 本地方法栈（Native Method Stack） 四、堆内存 4.1 内存划分 4.2 设置堆内存大小和 OOM 4.3 对象在堆中的生命...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/007S8ZIlly1gg9kuge8ovj32150tt7cd.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA">运行时数据区</a></p>
<p><a href="#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">一、程序计数器</a></p>
<ul>
<li><a href="">1.1 作用</a></li>
<li><a href="">1.2 概述</a></li>
</ul>
<p><a href="">二、虚拟机栈</a></p>
<ul>
<li><a href="">2.1 概述</a></li>
<li><a href="">2.2 栈的存储单位</a></li>
<li><a href="">2.3 栈运行原理</a></li>
<li><a href="">2.4 栈帧的内部结构</a></li>
</ul>
<p><a href="">三、本地方法栈</a></p>
<ul>
<li><a href="">3.1 本地方法接口</a></li>
<li><a href="">3.2 本地方法栈（Native Method Stack）</a></li>
</ul>
<p><a href="">四、堆内存</a></p>
<ul>
<li><a href="">4.1 内存划分</a></li>
<li><a href="">4.2 设置堆内存大小和 OOM</a></li>
<li><a href="">4.3 对象在堆中的生命周期</a></li>
<li><a href="">4.4 对象的分配过程</a></li>
<li><a href="">4.5 GC 垃圾回收简介</a></li>
<li><a href="">4.6 TLAB</a></li>
<li><a href="">4.7 堆是分配对象存储的唯一选择吗</a></li>
</ul>
<p><a href="">五、方法区</a></p>
<ul>
<li><a href="">5.1 解惑</a></li>
<li><a href="">5.2 设置方法区内存的大小</a></li>
<li><a href="">5.3 方法区内部结构</a></li>
<li><a href="">5.4 运行时常量池</a></li>
<li><a href="">5.5 方法区在 JDK6、7、8中的演进细节</a></li>
<li><a href="">5.6 方法区的垃圾回收</a></li>
</ul>
<h2><a class="header-anchor" href="#运行时数据区"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA">#</a> 运行时数据区</h2>
<p>内存是非常重要的系统资源，是硬盘和 CPU 的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM 内存布局规定了 Java 在运行过程中内存申请、分配、管理的策略，保证了 JVM 的高效稳定运行。不同的 JVM 对于内存的划分方式和管理机制存在着部分差异。</p>
<p>下图是 JVM 整体架构，中间部分就是 Java 虚拟机定义的各种运行时数据区域。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc6fz21n8kj30u00wpn5v.jpg" alt="jvm-framework" tabindex="0" loading="lazy"><figcaption>jvm-framework</figcaption></figure>
<p>Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程一一对应的数据区域会随着线程开始和结束而创建和销毁。</p>
<ul>
<li><strong>线程私有</strong>：程序计数器、虚拟机栈、本地方法区</li>
<li><strong>线程共享</strong>：堆、方法区, 堆外内存（Java7的永久代或JDK8的元空间、代码缓存）</li>
</ul>
<blockquote>
<p>下面我们就来一一解读下这些内存区域，先从最简单的入手</p>
</blockquote>
<h2><a class="header-anchor" href="#一、程序计数器"><span></span></a><a href="#%E4%B8%80%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">#</a> 一、程序计数器</h2>
<p>程序计数寄存器（<strong>Program Counter Register</strong>），Register 的命名源于 CPU 的寄存器，寄存器存储指令相关的线程信息，CPU 只有把数据装载到寄存器才能够运行。</p>
<p>这里，并非是广义上所指的物理寄存器，叫程序计数器（或PC计数器或指令计数器）会更加贴切，并且也不容易引起一些不必要的误会。<strong>JVM 中的 PC 寄存器是对物理 PC 寄存器的一种抽象模拟</strong>。</p>
<p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的<strong>行号指示器</strong>。</p>
<h3><a class="header-anchor" href="#_1-1-作用"><span></span></a><a href="#_1-1-%E4%BD%9C%E7%94%A8">#</a> 1.1 作用</h3>
<p>PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc5kmznm1sj31m50u0wph.jpg" alt="jvm-pc-counter" tabindex="0" loading="lazy"><figcaption>jvm-pc-counter</figcaption></figure>
<p>（分析：进入class文件所在目录，执行 <code>javap -v xx.class</code> 反解析（或者通过 IDEA 插件 <code>Jclasslib</code> 直接查看，上图），可以看到当前类对应的Code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等信息。）</p>
<p>关于类的字节码相关可以看：<a href="">JVM基础 - 类字节码详解</a></p>
<h3><a class="header-anchor" href="#_1-2-概述"><span></span></a><a href="#_1-2-%E6%A6%82%E8%BF%B0">#</a> 1.2 概述</h3>
<blockquote>
<p>通过下面两个问题，理解下PC计数器</p>
</blockquote>
<ul>
<li><strong>使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？</strong></li>
</ul>
<p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p>
<ul>
<li><strong>PC寄存器为什么会被设定为线程私有的？</strong></li>
</ul>
<p>多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU会不停的做任务切换，这样必然会导致经常中断或恢复。为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为每个线程都分配了一个PC寄存器，每个线程都独立计算，不会互相影响。</p>
<blockquote>
<p>相关总结如下：</p>
</blockquote>
<ul>
<li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域</li>
<li>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致</li>
<li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值（undefined）</li>
<li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</li>
<li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li>
<li><strong>它是唯一一个在 JVM 规范中没有规定任何 <code>OutOfMemoryError</code> 情况的区域</strong></li>
</ul>
<h2><a class="header-anchor" href="#二、虚拟机栈"><span></span></a><a href="#%E4%BA%8C%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">#</a> 二、虚拟机栈</h2>
<h3><a class="header-anchor" href="#_2-1-概述"><span></span></a><a href="#_2-1-%E6%A6%82%E8%BF%B0">#</a> 2.1 概述</h3>
<blockquote>
<p>Java 虚拟机栈(Java Virtual Machine Stacks)，早期也叫 Java 栈。每个线程在创建的时候都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame），对应着一次次 Java 方法调用，是线程私有的，生命周期和线程一致。</p>
</blockquote>
<p><strong>作用</strong>：主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</li>
<li>JVM 直接对虚拟机栈的操作只有两个：每个方法执行，伴随着<strong>入栈</strong>（进栈/压栈），方法执行结束<strong>出栈</strong></li>
<li><strong>栈不存在垃圾回收问题</strong></li>
</ul>
<p><strong>栈中可能出现的异常</strong>：</p>
<p>Java 虚拟机规范允许 <strong>Java虚拟机栈的大小是动态的或者是固定不变的</strong></p>
<ul>
<li>如果采用固定大小的 Java 虚拟机栈，那每个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 <strong>StackOverflowError</strong> 异常</li>
<li>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个<strong>OutOfMemoryError</strong>异常</li>
</ul>
<p>可以通过参数<code>-Xss</code>来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p>
<p>官方提供的参考工具，可查一些参数和操作：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html#BGBCIEFC" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html#BGBCIEFC</a></p>
<h3><a class="header-anchor" href="#_2-2-栈的存储单位"><span></span></a><a href="#_2-2-%E6%A0%88%E7%9A%84%E5%AD%98%E5%82%A8%E5%8D%95%E4%BD%8D">#</a> 2.2 栈的存储单位</h3>
<p>栈中存储什么？</p>
<ul>
<li>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧（Stack Frame）的格式存在</strong></li>
<li>在这个线程上正在执行的每个方法都各自有对应的一个栈帧</li>
<li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</li>
</ul>
<h3><a class="header-anchor" href="#_2-3-栈运行原理"><span></span></a><a href="#_2-3-%E6%A0%88%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86">#</a> 2.3 栈运行原理</h3>
<ul>
<li>JVM 直接对 Java 栈的操作只有两个，对栈帧的<strong>压栈</strong>和<strong>出栈</strong>，遵循“先进后出/后进先出”原则</li>
<li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（<strong>栈顶栈帧</strong>）是有效的，这个栈帧被称为<strong>当前栈帧</strong>（Current Frame），与当前栈帧对应的方法就是<strong>当前方法</strong>（Current Method），定义这个方法的类就是<strong>当前类</strong>（Current Class）</li>
<li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作</li>
<li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前栈帧</li>
<li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧中引用另外一个线程的栈帧</li>
<li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧</li>
<li>Java 方法有两种返回函数的方式，<strong>一种是正常的函数返回，使用 return 指令，另一种是抛出异常，不管用哪种方式，都会导致栈帧被弹出</strong></li>
</ul>
<p>IDEA 在 debug 时候，可以在 debug 窗口看到 Frames 中各种方法的压栈和出栈情况</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc9lezaxrbj319v0u0k4w.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#_2-4-栈帧的内部结构"><span></span></a><a href="#_2-4-%E6%A0%88%E5%B8%A7%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84">#</a> 2.4 栈帧的内部结构</h3>
<p>每个<strong>栈帧</strong>（Stack Frame）中存储着：</p>
<ul>
<li>局部变量表（Local Variables）</li>
<li>操作数栈（Operand Stack）(或称为表达式栈)</li>
<li>动态链接（Dynamic Linking）：指向运行时常量池的方法引用</li>
<li>方法返回地址（Return Address）：方法正常退出或异常退出的地址</li>
<li>一些附加信息</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc8tjehg8bj318m0lbtbu.jpg" alt="jvm-stack-frame" tabindex="0" loading="lazy"><figcaption>jvm-stack-frame</figcaption></figure>
<p>继续深抛栈帧中的五部分~~</p>
<h4><a class="header-anchor" href="#_2-4-1-局部变量表"><span></span></a><a href="#_2-4-1-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8">#</a> 2.4.1. 局部变量表</h4>
<ul>
<li>局部变量表也被称为局部变量数组或者本地变量表</li>
<li>是一组变量值存储空间，<strong>主要用于存储方法参数和定义在方法体内的局部变量</strong>，包括编译器可知的各种 Java 虚拟机<strong>基本数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此相关的位置）和 <strong>returnAddress</strong> 类型（指向了一条字节码指令的地址，已被异常表取代）</li>
<li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此<strong>不存在数据安全问题</strong></li>
<li><strong>局部变量表所需要的容量大小是编译期确定下来的</strong>，并保存在方法的 Code 属性的 <code>maximum local variables</code> 数据项中。在方法运行期间是不会改变局部变量表的大小的</li>
<li>方法嵌套调用的次数由栈的大小决定。一般来说，<strong>栈越大，方法嵌套调用次数越多</strong>。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</li>
<li><strong>局部变量表中的变量只在当前方法调用中有效</strong>。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</li>
<li>参数值的存放总是在局部变量数组的 index0 开始，到数组长度 -1 的索引结束</li>
</ul>
<h5><a class="header-anchor" href="#槽-slot"><span></span></a><a href="#%E6%A7%BD-slot">#</a> 槽 Slot</h5>
<ul>
<li>局部变量表最基本的存储单元是 Slot（变量槽）</li>
<li>在局部变量表中，32 位以内的类型只占用一个 Slot(包括returnAddress类型)，64 位的类型（long和double）占用两个连续的 Slot
<ul>
<li>byte、short、char 在存储前被转换为int，boolean也被转换为int，0 表示 false，非 0 表示 true</li>
<li>long 和 double 则占据两个 Slot</li>
</ul>
</li>
<li>JVM 会为局部变量表中的每一个 Slot 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值，索引值的范围从 0 开始到局部变量表最大的 Slot 数量</li>
<li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<strong>按照顺序被复制</strong>到局部变量表中的每一个 Slot 上</li>
<li><strong>如果需要访问局部变量表中一个 64bit 的局部变量值时，只需要使用前一个索引即可</strong>。（比如：访问 long 或 double 类型变量，不允许采用任何方式单独访问其中的某一个 Slot）</li>
<li>如果当前帧是由构造方法或实例方法创建的，那么该对象引用 this 将会存放在 index 为 0 的 Slot 处，其余的参数按照参数表顺序继续排列（这里就引出一个问题：静态方法中为什么不可以引用 this，就是因为this 变量不存在于当前方法的局部变量表中）</li>
<li><strong>栈帧中的局部变量表中的槽位是可以重用的</strong>，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而<strong>达到节省资源的目的</strong>。（下图中，this、a、b、c 理论上应该有 4 个变量，c 复用了 b 的槽）</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gc9s12g5wlj31li0owdm9.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>在栈帧中，与性能调优关系最为密切的就是局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递</li>
<li><strong>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</strong></li>
</ul>
<h4><a class="header-anchor" href="#_2-4-2-操作数栈"><span></span></a><a href="#_2-4-2-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88">#</a> 2.4.2. 操作数栈</h4>
<ul>
<li>每个独立的栈帧中除了包含局部变量表之外，还包含一个<strong>后进先出</strong>（Last-In-First-Out）的操作数栈，也可以称为<strong>表达式栈</strong>（Expression Stack）</li>
<li><strong>操作数栈，在方法执行过程中，根据字节码指令，往操作数栈中写入数据或提取数据，即入栈（push）、出栈（pop）</strong></li>
<li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。比如，执行复制、交换、求和等操作</li>
</ul>
<h5><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h5>
<ul>
<li>操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</strong></li>
<li>操作数栈就是 JVM 执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，<strong>此时这个方法的操作数栈是空的</strong></li>
<li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的 Code 属性的 <code>max_stack</code> 数据项中</li>
<li>栈中的任何一个元素都可以是任意的 Java 数据类型
<ul>
<li>32bit 的类型占用一个栈单位深度</li>
<li>64bit 的类型占用两个栈单位深度</li>
</ul>
</li>
<li>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问</li>
<li><strong>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中</strong>，并更新 PC 寄存器中下一条需要执行的字节码指令</li>
<li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证</li>
<li>另外，我们说<strong>Java虚拟机的解释引擎是基于栈的执行引擎</strong>，其中的栈指的就是操作数栈</li>
</ul>
<h5><a class="header-anchor" href="#栈顶缓存-top-of-stack-cashing"><span></span></a><a href="#%E6%A0%88%E9%A1%B6%E7%BC%93%E5%AD%98-top-of-stack-cashing">#</a> 栈顶缓存（Top-of-stack-Cashing）</h5>
<p>HotSpot 的执行引擎采用的并非是基于寄存器的架构，但这并不代表 HotSpot VM 的实现并没有间接利用到寄存器资源。寄存器是物理 CPU 中的组成部分之一，它同时也是 CPU 中非常重要的高速存储资源。一般来说，寄存器的读/写速度非常迅速，甚至可以比内存的读/写速度快上几十倍不止，不过寄存器资源却非常有限，不同平台下的CPU 寄存器数量是不同和不规律的。寄存器主要用于缓存本地机器指令、数值和下一条需要被执行的指令地址等数据。</p>
<p>基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读/写次数。由于操作数是存储在内存中的，因此频繁的执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM 设计者们提出了栈顶缓存技术，<strong>将栈顶元素全部缓存在物理 CPU 的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率</strong></p>
<h4><a class="header-anchor" href="#_2-4-3-动态链接-指向运行时常量池的方法引用"><span></span></a><a href="#_2-4-3-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5-%E6%8C%87%E5%90%91%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">#</a> 2.4.3. 动态链接（指向运行时常量池的方法引用）</h4>
<ul>
<li><strong>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用</strong>。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接(Dynamic Linking)。</li>
<li>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为<strong>符号引用</strong>（Symbolic Reference）保存在 Class 文件的常量池中。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong></li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/0082zybply1gca4k4gndgj31d20o2td0.jpg" alt="jvm-dynamic-linking" tabindex="0" loading="lazy"><figcaption>jvm-dynamic-linking</figcaption></figure>
<h5><a class="header-anchor" href="#jvm-是如何执行方法调用的"><span></span></a><a href="#jvm-%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84">#</a> JVM 是如何执行方法调用的</h5>
<p>方法调用不同于方法执行，方法调用阶段的唯一任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。Class 文件的编译过程中不包括传统编译器中的连接步骤，一切方法调用在 Class文件里面存储的都是<strong>符号引用</strong>，而不是方法在实际运行时内存布局中的入口地址（<strong>直接引用</strong>）。也就是需要在类加载阶段，甚至到运行期才能确定目标方法的直接引用。</p>
<blockquote>
<p>【这一块内容，除了方法调用，还包括解析、分派（静态分派、动态分派、单分派与多分派），这里先不介绍，后续再挖】</p>
</blockquote>
<p>在 JVM 中，将符号引用转换为调用方法的直接引用与方法的绑定机制有关</p>
<ul>
<li><strong>静态链接</strong>：当一个字节码文件被装载进 JVM 内部时，如果被调用的<strong>目标方法在编译期可知</strong>，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</li>
<li><strong>动态链接</strong>：如果被调用的方法在编译期无法被确定下来，也就是说，只能在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接</li>
</ul>
<p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。<strong>绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次</strong>。</p>
<ul>
<li>早期绑定：<strong>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时</strong>，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</li>
<li>晚期绑定：如果被调用的方法在编译器无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式就被称为晚期绑定。</li>
</ul>
<h5><a class="header-anchor" href="#虚方法和非虚方法"><span></span></a><a href="#%E8%99%9A%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%9E%E8%99%9A%E6%96%B9%E6%B3%95">#</a> 虚方法和非虚方法</h5>
<ul>
<li>如果方法在编译器就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法，比如静态方法、私有方法、final 方法、实例构造器、父类方法都是非虚方法</li>
<li>其他方法称为虚方法</li>
</ul>
<h5><a class="header-anchor" href="#虚方法表"><span></span></a><a href="#%E8%99%9A%E6%96%B9%E6%B3%95%E8%A1%A8">#</a> 虚方法表</h5>
<p>在面向对象编程中，会频繁的使用到动态分派，如果每次动态分派都要重新在类的方法元数据中搜索合适的目标有可能会影响到执行效率。为了提高性能，JVM 采用在类的方法区建立一个虚方法表（virtual method table），使用索引表来代替查找。非虚方法不会出现在表中。</p>
<p>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p>
<p>虚方法表会在类加载的连接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM 会把该类的方法表也初始化完毕。</p>
<h4><a class="header-anchor" href="#_2-4-4-方法返回地址-return-address"><span></span></a><a href="#_2-4-4-%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80-return-address">#</a> 2.4.4. 方法返回地址（return address）</h4>
<p>用来存放调用该方法的 PC 寄存器的值。</p>
<p>一个方法的结束，有两种方式</p>
<ul>
<li>正常执行完成</li>
<li>出现未处理的异常，非正常退出</li>
</ul>
<p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的 PC 计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定的，栈帧中一般不会保存这部分信息。</p>
<p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p>
<ol>
<li>
<p>执行引擎遇到任意一个方法返回的字节码指令，会有返回值传递给上层的方法调用者，简称<strong>正常完成出口</strong></p>
<p>一个方法的正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定</p>
<p>在字节码指令中，返回指令包含 ireturn(当返回值是 boolean、byte、char、short 和 int 类型时使用)、lreturn、freturn、dreturn 以及 areturn，另外还有一个 return 指令供声明为 void 的方法、实例初始化方法、类和接口的初始化方法使用。</p>
</li>
<li>
<p>在方法执行的过程中遇到了异常，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称<strong>异常完成出口</strong></p>
<p>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</p>
</li>
</ol>
<p>本质上，<strong>方法的退出就是当前栈帧出栈的过程</strong>。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p>
<p>正常完成出口和异常完成出口的区别在于：<strong>通过异常完成出口退出的不会给他的上层调用者产生任何的返回值</strong></p>
<h4><a class="header-anchor" href="#_2-4-5-附加信息"><span></span></a><a href="#_2-4-5-%E9%99%84%E5%8A%A0%E4%BF%A1%E6%81%AF">#</a> 2.4.5. 附加信息</h4>
<p>栈帧中还允许携带与 Java 虚拟机实现相关的一些附加信息。例如，对程序调试提供支持的信息，但这些信息取决于具体的虚拟机实现。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/007S8ZIlly1gg9kuge8ovj32150tt7cd.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>JVM 基础之Java 类加载机制</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJava%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8BJava%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之Java 类加载机制</source>
      <description>这篇文章将带你深入理解Java 类加载机制。 JVM 基础之Java 类加载机制 类的生命周期 类的加载: 查找并加载类的二进制数据 连接 验证: 确保被加载的类的正确性 准备: 为类的静态变量分配内存，并将其初始化为默认值 解析: 把类中的符号引用转换为直接引用 初始化 使用 卸载 类加载器， JVM类加载机制 类加载器的层次 寻找类加载器 类的加载...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>这篇文章将带你深入理解Java 类加载机制。</p>
</blockquote>
<ul>
<li>JVM 基础之Java 类加载机制
<ul>
<li>类的生命周期
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD-%E6%9F%A5%E6%89%BE%E5%B9%B6%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE">类的加载: 查找并加载类的二进制数据</a></li>
<li>连接
<ul>
<li><a href="#%E9%AA%8C%E8%AF%81-%E7%A1%AE%E4%BF%9D%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">验证: 确保被加载的类的正确性</a></li>
<li><a href="#%E5%87%86%E5%A4%87-%E4%B8%BA%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E5%B9%B6%E5%B0%86%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA%E9%BB%98%E8%AE%A4%E5%80%BC">准备: 为类的静态变量分配内存，并将其初始化为默认值</a></li>
<li><a href="#%E8%A7%A3%E6%9E%90-%E6%8A%8A%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8">解析: 把类中的符号引用转换为直接引用</a></li>
</ul>
</li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li>
<li><a href="#%E5%8D%B8%E8%BD%BD">卸载</a></li>
</ul>
</li>
<li>类加载器， JVM类加载机制
<ul>
<li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1">类加载器的层次</a></li>
<li><a href="#%E5%AF%BB%E6%89%BE%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">寻找类加载器</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD">类的加载</a></li>
</ul>
</li>
<li><a href="#jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">JVM类加载机制</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">自定义类加载器</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#类的生命周期"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">#</a> 类的生命周期</h2>
<p>其中类加载的过程包括了<code>加载</code>、<code>验证</code>、<code>准备</code>、<code>解析</code>、<code>初始化</code>五个阶段。在这五个阶段中，<code>加载</code>、<code>验证</code>、<code>准备</code>和<code>初始化</code>这四个阶段发生的顺序是确定的，<em>而<code>解析</code>阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定(也成为动态绑定或晚期绑定)</em>。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#类的加载-查找并加载类的二进制数据"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD-%E6%9F%A5%E6%89%BE%E5%B9%B6%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE">#</a> 类的加载: 查找并加载类的二进制数据</h3>
<p>加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情:</p>
<ul>
<li>通过一个类的全限定名来获取其定义的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_1.png" alt="java_jvm_classload_1" tabindex="0" loading="lazy"><figcaption>java_jvm_classload_1</figcaption></figure>
<p>相对于类加载的其他阶段而言，<em>加载阶段(准确地说，是加载阶段获取类的二进制字节流的动作)是可控性最强的阶段</em>，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</p>
<p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个<code>java.lang.Class</code>类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>
<p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p>
<blockquote>
<p>加载.class文件的方式</p>
</blockquote>
<ul>
<li>从本地系统中直接加载</li>
<li>通过网络下载.class文件</li>
<li>从zip，jar等归档文件中加载.class文件</li>
<li>从专有数据库中提取.class文件</li>
<li>将Java源文件动态编译为.class文件</li>
</ul>
<h3><a class="header-anchor" href="#连接"><span></span></a><a href="#%E8%BF%9E%E6%8E%A5">#</a> 连接</h3>
<h4><a class="header-anchor" href="#验证-确保被加载的类的正确性"><span></span></a><a href="#%E9%AA%8C%E8%AF%81-%E7%A1%AE%E4%BF%9D%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7">#</a> 验证: 确保被加载的类的正确性</h4>
<p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作:</p>
<ul>
<li><code>文件格式验证</code>: 验证字节流是否符合Class文件格式的规范；例如: 是否以<code>0xCAFEBABE</code>开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li>
<li><code>元数据验证</code>: 对字节码描述的信息进行语义分析(注意: 对比<code>javac</code>编译阶段的语义分析)，以保证其描述的信息符合Java语言规范的要求；例如: 这个类是否有父类，除了<code>java.lang.Object</code>之外。</li>
<li><code>字节码验证</code>: 通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li>
<li><code>符号引用验证</code>: 确保解析动作能正确执行。</li>
</ul>
<blockquote>
<p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，<em>如果所引用的类经过反复验证，那么可以考虑采用<code>-Xverifynone</code>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</em></p>
</blockquote>
<h4><a class="header-anchor" href="#准备-为类的静态变量分配内存-并将其初始化为默认值"><span></span></a><a href="#%E5%87%86%E5%A4%87-%E4%B8%BA%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98-%E5%B9%B6%E5%B0%86%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA%E9%BB%98%E8%AE%A4%E5%80%BC">#</a> 准备: 为类的静态变量分配内存，并将其初始化为默认值</h4>
<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，<strong>这些内存都将在方法区中分配</strong>。对于该阶段有以下几点需要注意:</p>
<ul>
<li>
<p>这时候进行内存分配的仅包括类变量(<code>static</code>)，而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>
</li>
<li>
<p>这里所设置的初始值通常情况下是数据类型默认的零值(如<code>0</code>、<code>0L</code>、<code>null</code>、<code>false</code>等)，而不是被在Java代码中被显式地赋予的值。</p>
<p>假设一个类变量的定义为: <code>public static int value = 3</code>；那么变量value在准备阶段过后的初始值为<code>0</code>，而不是<code>3</code>，因为这时候尚未开始执行任何Java方法，而把value赋值为3的<code>put static</code>指令是在程序编译后，存放于类构造器<code>&lt;clinit&gt;()</code>方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</p>
</li>
</ul>
<blockquote>
<p>这里还需要注意如下几点</p>
</blockquote>
<ul>
<li>对基本数据类型来说，对于类变量(static)和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。</li>
<li>对于同时被<code>static</code>和<code>final</code>修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。</li>
<li>对于引用数据类型<code>reference</code>来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即<code>null</code>。</li>
<li>如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。</li>
<li>如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。假设上面的类变量value被定义为: <code> public static final int value = 3；</code>编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。我们可以理解为<code>static final</code>常量在编译期就将其结果放入了调用它的类的常量池中</li>
</ul>
<h4><a class="header-anchor" href="#解析-把类中的符号引用转换为直接引用"><span></span></a><a href="#%E8%A7%A3%E6%9E%90-%E6%8A%8A%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8">#</a> 解析: 把类中的符号引用转换为直接引用</h4>
<p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对<code>类</code>或<code>接口</code>、<code>字段</code>、<code>类方法</code>、<code>接口方法</code>、<code>方法类型</code>、<code>方法句柄</code>和<code>调用点</code>限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。</p>
<p><code>直接引用</code>就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>
<h3><a class="header-anchor" href="#初始化"><span></span></a><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 初始化</h3>
<p>初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式:</p>
<ul>
<li>声明类变量是指定初始值</li>
<li>使用静态代码块为类变量指定初始值</li>
</ul>
<p><strong>JVM初始化步骤</strong></p>
<ul>
<li>假如这个类还没有被加载和连接，则程序先加载并连接该类</li>
<li>假如该类的直接父类还没有被初始化，则先初始化其直接父类</li>
<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>
</ul>
<p><strong>类初始化时机</strong>: 只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种:</p>
<ul>
<li>创建类的实例，也就是new的方式</li>
<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射(如Class.forName("com.pdai.jvm.Test"))</li>
<li>初始化某个类的子类，则其父类也会被初始化</li>
<li>Java虚拟机启动时被标明为启动类的类(Java Test)，直接使用java.exe命令来运行某个主类</li>
</ul>
<h3><a class="header-anchor" href="#使用"><span></span></a><a href="#%E4%BD%BF%E7%94%A8">#</a> 使用</h3>
<p>类访问方法区内的数据结构的接口， 对象是Heap区的数据。</p>
<h3><a class="header-anchor" href="#卸载"><span></span></a><a href="#%E5%8D%B8%E8%BD%BD">#</a> 卸载</h3>
<p><strong>Java虚拟机将结束生命周期的几种情况</strong></p>
<ul>
<li>执行了System.exit()方法</li>
<li>程序正常执行结束</li>
<li>程序在执行过程中遇到了异常或错误而异常终止</li>
<li>由于操作系统出现错误而导致Java虚拟机进程终止</li>
</ul>
<h2><a class="header-anchor" href="#类加载器-jvm类加载机制"><span></span></a><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">#</a> 类加载器， JVM类加载机制</h2>
<h3><a class="header-anchor" href="#类加载器的层次"><span></span></a><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1">#</a> 类加载器的层次</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p>注意: 这里父类加载器并不是通过继承关系来实现的，而是采用组合实现的。</p>
</blockquote>
<blockquote>
<p>站在Java虚拟机的角度来讲，只存在两种不同的类加载器: 启动类加载器: 它使用C++实现(这里仅限于<code>Hotspot</code>，也就是JDK1.5之后默认的虚拟机，有很多其他的虚拟机是用Java语言实现的)，是虚拟机自身的一部分；所有其他的类加载器: 这些类加载器都由Java语言实现，独立于虚拟机之外，并且全部继承自抽象类<code>java.lang.ClassLoader</code>，这些类加载器需要由启动类加载器加载到内存中之后才能去加载其他的类。</p>
</blockquote>
<p><strong>站在Java开发人员的角度来看，类加载器可以大致划分为以下三类</strong> :</p>
<p><code>启动类加载器</code>: Bootstrap ClassLoader，负责加载存放在JDK\jre\lib(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库(如rt.jar，所有的<code>java.*</code>开头的类均被Bootstrap ClassLoader加载)。启动类加载器是无法被Java程序直接引用的。</p>
<p><code>扩展类加载器</code>: Extension ClassLoader，该加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载JDK\jre\lib\ext目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库(如j<code>avax.*</code>开头的类)，开发者可以直接使用扩展类加载器。</p>
<p><code>应用程序类加载器</code>: Application ClassLoader，该类加载器由<code>sun.misc.Launcher$AppClassLoader</code>来实现，它负责加载用户类路径(ClassPath)所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
<p>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为JVM自带的ClassLoader只是懂得从本地文件系统加载标准的java class文件，因此如果编写了自己的ClassLoader，便可以做到如下几点:</p>
<ul>
<li>在执行非置信代码之前，自动验证数字签名。</li>
<li>动态地创建符合用户特定需要的定制化构建类。</li>
<li>从特定的场所取得java class，例如数据库中和网络中。</li>
</ul>
<h3><a class="header-anchor" href="#寻找类加载器"><span></span></a><a href="#%E5%AF%BB%E6%89%BE%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">#</a> 寻找类加载器</h3>
<p>寻找类加载器小例子如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.pdai.jvm.classloader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ClassLoaderTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">     public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ClassLoader</span><span style="color:#E06C75"> loader</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getContextClassLoader</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(loader);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">loader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParent</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">loader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getParent</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getParent</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Launcher$AppClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">64fef26a</span></span>
<span class="line"><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">misc</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Launcher$ExtClassLoader</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">1ddd40f3</span></span>
<span class="line"><span style="color:#D19A66">null</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的结果可以看出，并没有获取到<code>ExtClassLoader</code>的父Loader，原因是<code>BootstrapLoader</code>(引导类加载器)是用C语言实现的，找不到一个确定的返回父Loader的方式，于是就返回<code>null</code>。</p>
<h3><a class="header-anchor" href="#类的加载"><span></span></a><a href="#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD">#</a> 类的加载</h3>
<p>类加载有三种方式:</p>
<p>1、命令行启动应用时候由JVM初始化加载</p>
<p>2、通过Class.forName()方法动态加载</p>
<p>3、通过ClassLoader.loadClass()方法动态加载</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.pdai.jvm.classloader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> loaderTest</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ClassNotFoundException</span><span style="color:#ABB2BF"> { </span></span>
<span class="line"><span style="color:#E5C07B">                ClassLoader</span><span style="color:#E06C75"> loader</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> HelloWorld</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClassLoader</span><span style="color:#ABB2BF">(); </span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(loader); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //使用ClassLoader.loadClass()来加载类，不会执行初始化块 </span></span>
<span class="line"><span style="color:#E5C07B">                loader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Test2"</span><span style="color:#ABB2BF">); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //使用Class.forName()来加载类，默认会执行初始化块 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//                Class.forName("Test2"); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //使用Class.forName()来加载类，并指定ClassLoader，初始化时不执行静态块 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//                Class.forName("Test2", false, loader); </span></span>
<span class="line"><span style="color:#ABB2BF">        }</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test2</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#C678DD">        static</span><span style="color:#E06C75"> { </span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"静态初始化块执行了！"</span><span style="color:#ABB2BF">);</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E06C75">        } </span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别切换加载方式，会有不同的输出结果。</p>
<blockquote>
<p>Class.forName()和ClassLoader.loadClass()区别?</p>
<ul>
<li>Class.forName(): 将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；</li>
<li>ClassLoader.loadClass(): 只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。</li>
<li>Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。</li>
</ul>
</blockquote>
<h2><a class="header-anchor" href="#jvm类加载机制"><span></span></a><a href="#jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6">#</a> JVM类加载机制</h2>
<ul>
<li><code>全盘负责</code>，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>
<li><code>父类委托</code>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>
<li><code>缓存机制</code>，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</li>
<li><code>双亲委派机制</code>, 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</li>
</ul>
<p><strong>双亲委派机制过程？</strong></p>
<ol>
<li>当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。</li>
<li>当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。</li>
<li>如果BootStrapClassLoader加载失败(例如在$JAVA_HOME/jre/lib里未查找到该class)，会使用ExtClassLoader来尝试加载；</li>
<li>若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。</li>
</ol>
<p><strong>双亲委派代码实现</strong></p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> loadClass</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> name)throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#61AFEF"> loadClass</span><span style="color:#E06C75">(name</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> synchronized</span><span style="color:#E5C07B"> Class</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> loadClass</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75"> name</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> resolve)throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 首先判断该类型是否已经被加载</span></span>
<span class="line"><span style="color:#E5C07B">            Class</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> findLoadedClass</span><span style="color:#E06C75">(name)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (c </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span></span>
<span class="line"><span style="color:#C678DD">                try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (parent </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                         //如果存在父类加载器，就委派给父类加载器加载</span></span>
<span class="line"><span style="color:#E06C75">                        c </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> parent</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(name, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">                    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    //如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法native Class findBootstrapClass(String name)</span></span>
<span class="line"><span style="color:#E06C75">                        c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> findBootstrapClass0</span><span style="color:#E06C75">(name)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ClassNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                 // 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span></span>
<span class="line"><span style="color:#E06C75">                    c </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> findClass</span><span style="color:#E06C75">(name)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (resolve) {</span></span>
<span class="line"><span style="color:#61AFEF">                resolveClass</span><span style="color:#E06C75">(c)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>双亲委派优势</strong></p>
<ul>
<li>系统类防止内存中出现多份同样的字节码</li>
<li>保证Java程序安全稳定运行</li>
</ul>
<h2><a class="header-anchor" href="#自定义类加载器"><span></span></a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">#</a> 自定义类加载器</h2>
<p>通常情况下，我们都是直接使用系统类加载器。但是，有的时候，我们也需要自定义类加载器。比如应用是通过网络来传输 Java 类的字节码，为保证安全性，这些字节码经过了加密处理，这时系统类加载器就无法对其进行加载，这样则需要自定义类加载器来实现。自定义类加载器一般都是继承自 ClassLoader 类，从上面对 loadClass 方法来分析来看，我们只需要重写 findClass 方法即可。下面我们通过一个示例来演示自定义类加载器的流程:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">package</span><span style="color:#C678DD"> com.pdai.jvm.classloader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.io.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyClassLoader</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> ClassLoader</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#E5C07B"> Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> findClass</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> ClassNotFoundException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">classData</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> loadClassData</span><span style="color:#ABB2BF">(name);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (classData </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ClassNotFoundException</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">else</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#61AFEF"> defineClass</span><span style="color:#ABB2BF">(name, classData, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">classData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] loadClassData</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> className</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> fileName</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> root </span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> File</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">separatorChar</span></span>
<span class="line"><span style="color:#56B6C2">                +</span><span style="color:#E5C07B"> className</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">replace</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'.'</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">File</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">separatorChar</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> ".class"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            InputStream</span><span style="color:#E06C75"> ins</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileInputStream</span><span style="color:#ABB2BF">(fileName);</span></span>
<span class="line"><span style="color:#E5C07B">            ByteArrayOutputStream</span><span style="color:#E06C75"> baos</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ByteArrayOutputStream</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> bufferSize</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 1024</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">buffer</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#C678DD"> byte</span><span style="color:#ABB2BF">[bufferSize];</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> length</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> ((length </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> ins</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">read</span><span style="color:#ABB2BF">(buffer)) </span><span style="color:#56B6C2">!=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                baos</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(buffer, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, length);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> baos</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toByteArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IOException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getRoot</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> root;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> setRoot</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> root</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">root</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> root;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">  {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        MyClassLoader</span><span style="color:#E06C75"> classLoader</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyClassLoader</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        classLoader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setRoot</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"D:</span><span style="color:#56B6C2">\\</span><span style="color:#98C379">temp"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">testClass</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">            testClass </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> classLoader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"com.pdai.jvm.classloader.Test2"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            Object</span><span style="color:#E06C75"> object</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> testClass</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getClassLoader</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">ClassNotFoundException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InstantiationException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">IllegalAccessException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义类加载器的核心在于对字节码文件的获取，如果是加密的字节码则需要在该类中对文件进行解密。由于这里只是演示，我并未对class文件进行加密，因此没有解密的过程。</p>
<p><strong>这里有几点需要注意</strong> :</p>
<p>1、这里传递的文件名需要是类的全限定性名称，即<code>com.pdai.jvm.classloader.Test2</code>格式的，因为 defineClass 方法是按这种格式进行处理的。</p>
<p>2、最好不要重写loadClass方法，因为这样容易破坏双亲委托模式。</p>
<p>3、这类Test 类本身可以被 AppClassLoader 类加载，因此我们不能把com/pdai/jvm/classloader/Test2.class 放在类路径下。否则，由于双亲委托机制的存在，会直接导致该类由 AppClassLoader 加载，而不会通过我们自定义类加载器来加载。</p>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_jvm_classload_2.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之字节码的增强技术</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之字节码的增强技术</source>
      <description>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。 JVM 基础之字节码的增强技术 字节码增强技术 ASM ASM API 核心API 树形API 直接利用ASM实现AOP ASM工具 Ja...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。</p>
</blockquote>
<ul>
<li>JVM 基础之字节码的增强技术
<ul>
<li>字节码增强技术
<ul>
<li>ASM
<ul>
<li>ASM API
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83api">核心API</a></li>
<li><a href="#%E6%A0%91%E5%BD%A2api">树形API</a></li>
</ul>
</li>
<li><a href="#%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8asm%E5%AE%9E%E7%8E%B0aop">直接利用ASM实现AOP</a></li>
<li><a href="#asm%E5%B7%A5%E5%85%B7">ASM工具</a></li>
</ul>
</li>
<li><a href="#javassist">Javassist</a></li>
</ul>
</li>
<li>运行时类的重载
<ul>
<li><a href="#%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA">问题引出</a></li>
<li><a href="#instrument">Instrument</a></li>
<li><a href="#jvmti--agent--attach-api">JVMTI &amp; Agent &amp; Attach API</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">使用场景</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">参考文献</a></li>
<li><a href="#%E4%BD%9C%E8%80%85%E7%AE%80%E4%BB%8B">作者简介</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#字节码增强技术"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA%E6%8A%80%E6%9C%AF">#</a> 字节码增强技术</h2>
<p>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#asm"><span></span></a><a href="#asm">#</a> ASM</h3>
<p>对于需要手动操纵字节码的需求，可以使用ASM，它可以直接生产 .class字节码文件，也可以在类被加载入JVM之前动态修改类行为（如下图17所示）。ASM的应用场景有AOP（Cglib就是基于ASM）、热部署、修改其他jar包中的类等。当然，涉及到如此底层的步骤，实现起来也比较麻烦。接下来，本文将介绍ASM的两种API，并用ASM来实现一个比较粗糙的AOP。但在此之前，为了让大家更快地理解ASM的处理流程，强烈建议读者先对访问者模式进行了解。简单来说，访问者模式主要用于修改或操作一些数据结构比较稳定的数据，而通过第一章，我们知道字节码文件的结构是由JVM固定的，所以很适合利用访问者模式对字节码文件进行修改。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#asm-api"><span></span></a><a href="#asm-api">#</a> ASM API</h4>
<h5><a class="header-anchor" href="#核心api"><span></span></a><a href="#%E6%A0%B8%E5%BF%83api">#</a> 核心API</h5>
<p>ASM Core API可以类比解析XML文件中的SAX方式，不需要把这个类的整个结构读取进来，就可以用流式的方法来处理字节码文件。好处是非常节约内存，但是编程难度较大。然而出于性能考虑，一般情况下编程都使用Core API。在Core API中有以下几个关键类：</p>
<ul>
<li>ClassReader：用于读取已经编译好的.class文件。</li>
<li>ClassWriter：用于重新构建编译后的类，如修改类名、属性以及方法，也可以生成新的类的字节码文件。</li>
<li>各种Visitor类：如上所述，CoreAPI根据字节码从上到下依次处理，对于字节码文件中不同的区域有不同的Visitor，比如用于访问方法的MethodVisitor、用于访问类变量的FieldVisitor、用于访问注解的AnnotationVisitor等。为了实现AOP，重点要使用的是MethodVisitor。</li>
</ul>
<h5><a class="header-anchor" href="#树形api"><span></span></a><a href="#%E6%A0%91%E5%BD%A2api">#</a> 树形API</h5>
<p>ASM Tree API可以类比解析XML文件中的DOM方式，把整个类的结构读取到内存中，缺点是消耗内存多，但是编程比较简单。TreeApi不同于CoreAPI，TreeAPI通过各种Node类来映射字节码的各个区域，类比DOM节点，就可以很好地理解这种编程方式。</p>
<h4><a class="header-anchor" href="#直接利用asm实现aop"><span></span></a><a href="#%E7%9B%B4%E6%8E%A5%E5%88%A9%E7%94%A8asm%E5%AE%9E%E7%8E%B0aop">#</a> 直接利用ASM实现AOP</h4>
<p>利用ASM的CoreAPI来增强类。这里不纠结于AOP的专业名词如切片、通知，只实现在方法调用前、后增加逻辑，通俗易懂且方便理解。首先定义需要被增强的Base类：其中只包含一个process()方法，方法内输出一行“process”。增强后，我们期望的是，方法执行前输出“start”，之后输出”end”。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Base</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> process</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了利用ASM实现AOP，需要定义两个类：一个是MyClassVisitor类，用于对字节码的visit以及修改；另一个是Generator类，在这个类中定义ClassReader和ClassWriter，其中的逻辑是，classReader读取字节码，然后交给MyClassVisitor类处理，处理完成后由ClassWriter写字节码并将旧的字节码替换掉。Generator类较简单，我们先看一下它的实现，如下所示，然后重点解释MyClassVisitor类。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassReader</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassVisitor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassWriter</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Generator</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> Exception</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//读取</span></span>
<span class="line"><span style="color:#E5C07B">        ClassReader</span><span style="color:#E06C75"> classReader</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ClassReader</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"meituan/bytecode/asm/Base"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        ClassWriter</span><span style="color:#E06C75"> classWriter</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> ClassWriter</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassWriter</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">COMPUTE_MAXS</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //处理</span></span>
<span class="line"><span style="color:#E5C07B">        ClassVisitor</span><span style="color:#E06C75"> classVisitor</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyClassVisitor</span><span style="color:#ABB2BF">(classWriter);</span></span>
<span class="line"><span style="color:#E5C07B">        classReader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">accept</span><span style="color:#ABB2BF">(classVisitor, </span><span style="color:#E5C07B">ClassReader</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">SKIP_DEBUG</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">data</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> classWriter</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toByteArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //输出</span></span>
<span class="line"><span style="color:#E5C07B">        File</span><span style="color:#E06C75"> f</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"operation-server/target/classes/meituan/bytecode/asm/Base.class"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        FileOutputStream</span><span style="color:#E06C75"> fout</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> FileOutputStream</span><span style="color:#ABB2BF">(f);</span></span>
<span class="line"><span style="color:#E5C07B">        fout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(data);</span></span>
<span class="line"><span style="color:#E5C07B">        fout</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">close</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"now generator cc success!!!!!"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyClassVisitor继承自ClassVisitor，用于对字节码的观察。它还包含一个内部类MyMethodVisitor，继承自MethodVisitor用于对类内方法的观察，它的整体代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.ClassVisitor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.MethodVisitor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> org.objectweb.asm.Opcodes</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> MyClassVisitor</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> ClassVisitor</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> MyClassVisitor</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassVisitor</span><span style="color:#E06C75;font-style:italic"> cv</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        super</span><span style="color:#ABB2BF">(ASM5, cv);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> visit</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> version</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> access</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> signature</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                      String</span><span style="color:#E06C75;font-style:italic"> superName</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">interfaces</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        cv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visit</span><span style="color:#ABB2BF">(version, access, name, signature, superName, interfaces);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> MethodVisitor</span><span style="color:#61AFEF"> visitMethod</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> access</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> desc</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> signature</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">exceptions</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        MethodVisitor</span><span style="color:#E06C75"> mv</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitMethod</span><span style="color:#ABB2BF">(access, name, desc, signature,</span></span>
<span class="line"><span style="color:#ABB2BF">                exceptions);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //Base类中有两个方法：无参构造以及process方法，这里不增强构造方法</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"&lt;init&gt;"</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#ABB2BF"> mv </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#ABB2BF">            mv </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> MyMethodVisitor</span><span style="color:#ABB2BF">(mv);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> mv;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    class</span><span style="color:#E5C07B"> MyMethodVisitor</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> MethodVisitor</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#61AFEF"> MyMethodVisitor</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">MethodVisitor</span><span style="color:#E06C75;font-style:italic"> mv</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            super</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ASM5</span><span style="color:#ABB2BF">, mv);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> visitCode</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            super</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitCode</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitFieldInsn</span><span style="color:#ABB2BF">(GETSTATIC, </span><span style="color:#98C379">"java/lang/System"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"out"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Ljava/io/PrintStream;"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitLdcInsn</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"start"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitMethodInsn</span><span style="color:#ABB2BF">(INVOKEVIRTUAL, </span><span style="color:#98C379">"java/io/PrintStream"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"println"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"(Ljava/lang/String;)V"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">        public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> visitInsn</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> opcode</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#ABB2BF"> ((opcode </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">IRETURN</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> opcode </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">RETURN</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#56B6C2">                    ||</span><span style="color:#ABB2BF"> opcode </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> Opcodes</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">ATHROW</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //方法在返回之前，打印"end"</span></span>
<span class="line"><span style="color:#E5C07B">                mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitFieldInsn</span><span style="color:#ABB2BF">(GETSTATIC, </span><span style="color:#98C379">"java/lang/System"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"out"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"Ljava/io/PrintStream;"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitLdcInsn</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"end"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">                mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitMethodInsn</span><span style="color:#ABB2BF">(INVOKEVIRTUAL, </span><span style="color:#98C379">"java/io/PrintStream"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"println"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"(Ljava/lang/String;)V"</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">false</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#E5C07B">            mv</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">visitInsn</span><span style="color:#ABB2BF">(opcode);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用这个类就可以实现对字节码的修改。详细解读其中的代码，对字节码做修改的步骤是：</p>
<ul>
<li>首先通过MyClassVisitor类中的visitMethod方法，判断当前字节码读到哪一个方法了。跳过构造方法 <code>&lt;init&gt;</code> 后，将需要被增强的方法交给内部类MyMethodVisitor来进行处理。</li>
<li>接下来，进入内部类MyMethodVisitor中的visitCode方法，它会在ASM开始访问某一个方法的Code区时被调用，重写visitCode方法，将AOP中的前置逻辑就放在这里。 MyMethodVisitor继续读取字节码指令，每当ASM访问到无参数指令时，都会调用MyMethodVisitor中的visitInsn方法。我们判断了当前指令是否为无参数的“return”指令，如果是就在它的前面添加一些指令，也就是将AOP的后置逻辑放在该方法中。</li>
<li>综上，重写MyMethodVisitor中的两个方法，就可以实现AOP了，而重写方法时就需要用ASM的写法，手动写入或者修改字节码。通过调用methodVisitor的visitXXXXInsn()方法就可以实现字节码的插入，XXXX对应相应的操作码助记符类型，比如mv.visitLdcInsn(“end”)对应的操作码就是ldc “end”，即将字符串“end”压入栈。 完成这两个visitor类后，运行Generator中的main方法完成对Base类的字节码增强，增强后的结果可以在编译后的target文件夹中找到Base.class文件进行查看，可以看到反编译后的代码已经改变了。然后写一个测试类MyTest，在其中new Base()，并调用base.process()方法，可以看到下图右侧所示的AOP实现效果：</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h4><a class="header-anchor" href="#asm工具"><span></span></a><a href="#asm%E5%B7%A5%E5%85%B7">#</a> ASM工具</h4>
<p>利用ASM手写字节码时，需要利用一系列visitXXXXInsn()方法来写对应的助记符，所以需要先将每一行源代码转化为一个个的助记符，然后通过ASM的语法转换为visitXXXXInsn()这种写法。第一步将源码转化为助记符就已经够麻烦了，不熟悉字节码操作集合的话，需要我们将代码编译后再反编译，才能得到源代码对应的助记符。第二步利用ASM写字节码时，如何传参也很令人头疼。ASM社区也知道这两个问题，所以提供了工具<a href="https://plugins.jetbrains.com/plugin/5918-asm-bytecode-outline" target="_blank" rel="noopener noreferrer">ASM ByteCode Outline在新窗口打开</a>。</p>
<p>安装后，右键选择“Show Bytecode Outline”，在新标签页中选择“ASMified”这个tab，如图19所示，就可以看到这个类中的代码对应的ASM写法了。图中上下两个红框分别对应AOP中的前置逻辑于后置逻辑，将这两块直接复制到visitor中的visitMethod()以及visitInsn()方法中，就可以了。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#javassist"><span></span></a><a href="#javassist">#</a> Javassist</h3>
<p>ASM是在指令层次上操作字节码的，阅读上文后，我们的直观感受是在指令层次上操作字节码的框架实现起来比较晦涩。故除此之外，我们再简单介绍另外一类框架：强调源代码层次操作字节码的框架Javassist。</p>
<p>利用Javassist实现字节码增强时，可以无须关注字节码刻板的结构，其优点就在于编程简单。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构或者动态生成类。其中最重要的是ClassPool、CtClass、CtMethod、CtField这四个类：</p>
<ul>
<li>CtClass（compile-time class）：编译时类信息，它是一个class文件在代码中的抽象表现形式，可以通过一个类的全限定名来获取一个CtClass对象，用来表示这个类文件。</li>
<li>ClassPool：从开发视角来看，ClassPool是一张保存CtClass信息的HashTable，key为类名，value为类名对应的CtClass对象。当我们需要对某个类进行修改时，就是通过pool.getCtClass(“className”)方法从pool中获取到相应的CtClass。</li>
<li>CtMethod、CtField：这两个比较好理解，对应的是类中的方法和属性。</li>
</ul>
<p>了解这四个类后，我们可以写一个小Demo来展示Javassist简单、快速的特点。我们依然是对Base中的process()方法做增强，在方法调用前后分别输出”start”和”end”，实现代码如下。我们需要做的就是从pool中获取到相应的CtClass对象和其中的方法，然后执行method.insertBefore和insertAfter方法，参数为要插入的Java代码，再以字符串的形式传入即可，实现起来也极为简单。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> com.meituan.mtrace.agent.javassist.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> JavassistTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> NotFoundException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> CannotCompileException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IllegalAccessException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> InstantiationException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        ClassPool</span><span style="color:#E06C75"> cp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ClassPool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDefault</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        CtClass</span><span style="color:#E06C75"> cc</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cp</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"meituan.bytecode.javassist.Base"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        CtMethod</span><span style="color:#E06C75"> m</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertBefore</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">start</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertAfter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">end</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Class</span><span style="color:#E06C75"> c</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toClass</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeFile</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/Users/zen/projects"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Base</span><span style="color:#E06C75"> h</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Base)</span><span style="color:#E5C07B">c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        h</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#运行时类的重载"><span></span></a><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B1%BB%E7%9A%84%E9%87%8D%E8%BD%BD">#</a> 运行时类的重载</h2>
<h3><a class="header-anchor" href="#问题引出"><span></span></a><a href="#%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA">#</a> 问题引出</h3>
<p>上一章重点介绍了两种不同类型的字节码操作框架，且都利用它们实现了较为粗糙的AOP。其实，为了方便大家理解字节码增强技术，在上文中我们避重就轻将ASM实现AOP的过程分为了两个main方法：第一个是利用MyClassVisitor对已编译好的class文件进行修改，第二个是new对象并调用。这期间并不涉及到JVM运行时对类的重加载，而是在第一个main方法中，通过ASM对已编译类的字节码进行替换，在第二个main方法中，直接使用已替换好的新类信息。另外在Javassist的实现中，我们也只加载了一次Base类，也不涉及到运行时重加载类。</p>
<p>如果我们在一个JVM中，先加载了一个类，然后又对其进行字节码增强并重新加载会发生什么呢？模拟这种情况，只需要我们在上文中Javassist的Demo中main()方法的第一行添加Base b=new Base()，即在增强前就先让JVM加载Base类，然后在执行到c.toClass()方法时会抛出错误，如下图20所示。跟进c.toClass()方法中，我们会发现它是在最后调用了ClassLoader的native方法defineClass()时报错。也就是说，JVM是不允许在运行时动态重载一个类的。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>显然，如果只能在类加载前对类进行强化，那字节码增强技术的使用场景就变得很窄了。我们期望的效果是：在一个持续运行并已经加载了所有类的JVM中，还能利用字节码增强技术对其中的类行为做替换并重新加载。为了模拟这种情况，我们将Base类做改写，在其中编写main方法，每五秒调用一次process()方法，在process()方法中输出一行“process”。</p>
<p>我们的目的就是，在JVM运行中的时候，将process()方法做替换，在其前后分别打印“start”和“end”。也就是在运行中时，每五秒打印的内容由”process”变为打印”start process end”。那如何解决JVM不允许运行时重加载类信息的问题呢？为了达到这个目的，我们接下来一一来介绍需要借助的Java类库。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.lang.management.ManagementFactory</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Base</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> name</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ManagementFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getRuntimeMXBean</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getName</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#E06C75"> s</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">split</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"@"</span><span style="color:#ABB2BF">)[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //打印当前Pid</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"pid:"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">s);</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">5000L</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">                break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#61AFEF">            process</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> process</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#instrument"><span></span></a><a href="#instrument">#</a> Instrument</h3>
<p>instrument是JVM提供的一个可以修改已加载类的类库，专门为Java语言编写的插桩服务提供支持。它需要依赖JVMTI的Attach API机制实现，JVMTI这一部分，我们将在下一小节进行介绍。在JDK 1.6以前，instrument只能在JVM刚启动开始加载类时生效，而在JDK 1.6之后，instrument支持了在运行时对类定义的修改。要使用instrument的类修改功能，我们需要实现它提供的ClassFileTransformer接口，定义一个类文件转换器。接口中的transform()方法会在类文件被加载时调用，而在transform方法里，我们可以利用上文中的ASM或Javassist对传入的字节码进行改写或替换，生成新的字节码数组后返回。</p>
<p>我们定义一个实现了ClassFileTransformer接口的类TestTransformer，依然在其中利用Javassist对Base类中的process()方法进行增强，在前后分别打印“start”和“end”，代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.lang.instrument.ClassFileTransformer</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestTransformer</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> ClassFileTransformer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> byte</span><span style="color:#61AFEF">[] transform</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#E06C75;font-style:italic"> loader</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> className</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Class</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">classBeingRedefined</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">ProtectionDomain</span><span style="color:#E06C75;font-style:italic"> protectionDomain</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">byte</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">classfileBuffer</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Transforming "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> className);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            ClassPool</span><span style="color:#E06C75"> cp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ClassPool</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDefault</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            CtClass</span><span style="color:#E06C75"> cc</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cp</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"meituan.bytecode.jvmti.Base"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            CtMethod</span><span style="color:#E06C75"> m</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredMethod</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"process"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertBefore</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">start</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">insertAfter</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"{ System.out.println(</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">end</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">); }"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E5C07B"> cc</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toBytecode</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在有了Transformer，那么它要如何注入到正在运行的JVM呢？还需要定义一个Agent，借助Agent的能力将Instrument注入到JVM中。我们将在下一小节介绍Agent，现在要介绍的是Agent中用到的另一个类Instrumentation。在JDK 1.6之后，Instrumentation可以做启动后的Instrument、本地代码（Native Code）的Instrument，以及动态改变Classpath等等。我们可以向Instrumentation中添加上文中定义的Transformer，并指定要被重加载的类，代码如下所示。这样，当Agent被Attach到一个JVM中时，就会执行类字节码替换并重载入JVM的操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.lang.instrument.Instrumentation</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestAgent</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> agentmain</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> args</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Instrumentation</span><span style="color:#E06C75;font-style:italic"> inst</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //指定我们自己定义的Transformer，在其中利用Javassist做字节码替换</span></span>
<span class="line"><span style="color:#E5C07B">        inst</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addTransformer</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> TestTransformer</span><span style="color:#ABB2BF">(), </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //重定义类并载入新的字节码</span></span>
<span class="line"><span style="color:#E5C07B">            inst</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">retransformClasses</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Base</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Agent Load Done."</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"agent load failed!"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#jvmti-agent-attach-api"><span></span></a><a href="#jvmti-agent-attach-api">#</a> JVMTI &amp; Agent &amp; Attach API</h3>
<p>上一小节中，我们给出了Agent类的代码，追根溯源需要先介绍JPDA（Java Platform Debugger Architecture）。如果JVM启动时开启了JPDA，那么类是允许被重新加载的。在这种情况下，已被加载的旧版本类信息可以被卸载，然后重新加载新版本的类。正如JDPA名称中的Debugger，JDPA其实是一套用于调试Java程序的标准，任何JDK都必须实现该标准。</p>
<p>JPDA定义了一整套完整的体系，它将调试体系分为三部分，并规定了三者之间的通信接口。三部分由低到高分别是Java 虚拟机工具接口（JVMTI），Java 调试协议（JDWP）以及 Java 调试接口（JDI），三者之间的关系如下图所示：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>现在回到正题，我们可以借助JVMTI的一部分能力，帮助动态重载类信息。JVM TI（JVM TOOL INTERFACE，JVM工具接口）是JVM提供的一套对JVM进行操作的工具接口。通过JVMTI，可以实现对JVM的多种操作，它通过接口注册各种事件勾子，在JVM事件触发时，同时触发预定义的勾子，以实现对各个JVM事件的响应，事件包括类文件加载、异常产生与捕获、线程启动和结束、进入和退出临界区、成员变量修改、GC开始和结束、方法调用进入和退出、临界区竞争与等待、VM启动与退出等等。</p>
<p>而Agent就是JVMTI的一种实现，Agent有两种启动方式，一是随Java进程启动而启动，经常见到的java -agentlib就是这种方式；二是运行时载入，通过attach API，将模块（jar包）动态地Attach到指定进程id的Java进程内。</p>
<p>Attach API 的作用是提供JVM进程间通信的能力，比如说我们为了让另外一个JVM进程把线上服务的线程Dump出来，会运行jstack或jmap的进程，并传递pid的参数，告诉它要对哪个进程进行线程Dump，这就是Attach API做的事情。在下面，我们将通过Attach API的loadAgent()方法，将打包好的Agent jar包动态Attach到目标JVM上。具体实现起来的步骤如下：</p>
<ul>
<li>定义Agent，并在其中实现AgentMain方法，如上一小节中定义的代码块7中的TestAgent类；</li>
<li>然后将TestAgent类打成一个包含MANIFEST.MF的jar包，其中MANIFEST.MF文件中将Agent-Class属性指定为TestAgent的全限定名，如下图所示；</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>最后利用Attach API，将我们打包好的jar包Attach到指定的JVM pid上，代码如下：</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> com.sun.tools.attach.VirtualMachine</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Attacher</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> AttachNotSupportedException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> IOException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AgentLoadException</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> AgentInitializationException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 传入目标 JVM pid</span></span>
<span class="line"><span style="color:#E5C07B">        VirtualMachine</span><span style="color:#E06C75"> vm</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> VirtualMachine</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">attach</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"39333"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        vm</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadAgent</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"/Users/zen/operation_server_jar/operation-server.jar"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>由于在MANIFEST.MF中指定了Agent-Class，所以在Attach后，目标JVM在运行时会走到TestAgent类中定义的agentmain()方法，而在这个方法中，我们利用Instrumentation，将指定类的字节码通过定义的类转化器TestTransformer做了Base类的字节码替换（通过javassist），并完成了类的重新加载。由此，我们达成了“在JVM运行时，改变类的字节码并重新载入类信息”的目的。</li>
</ul>
<p>以下为运行时重新载入类的效果：先运行Base中的main()方法，启动一个JVM，可以在控制台看到每隔五秒输出一次”process”。接着执行Attacher中的main()方法，并将上一个JVM的pid传入。此时回到上一个main()方法的控制台，可以看到现在每隔五秒输出”process”前后会分别输出”start”和”end”，也就是说完成了运行时的字节码增强，并重新载入了这个类。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#使用场景"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> 使用场景</h3>
<p>至此，字节码增强技术的可使用范围就不再局限于JVM加载类前了。通过上述几个类库，我们可以在运行时对JVM中的类进行修改并重载了。通过这种手段，可以做的事情就变得很多了：</p>
<ul>
<li>热部署：不部署服务而对线上服务做修改，可以做打点、增加日志等操作。</li>
<li>Mock：测试时候对某些服务做Mock。</li>
<li>性能诊断工具：比如bTrace就是利用Instrument，实现无侵入地跟踪一个正在运行的JVM，监控到类和方法级别的状态信息。</li>
</ul>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>字节码增强技术相当于是一把打开运行时JVM的钥匙，利用它可以动态地对运行中的程序做修改，也可以跟踪JVM运行中程序的状态。此外，我们平时使用的动态代理、AOP也与字节码增强密切相关，它们实质上还是利用各种手段生成符合规范的字节码文件。综上所述，掌握字节码增强后可以高效地定位并快速修复一些棘手的问题（如线上性能问题、方法出现不可控的出入参需要紧急加日志等问题），也可以在开发中减少冗余代码，大大提高开发效率。</p>
<h2><a class="header-anchor" href="#参考文献"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">#</a> 参考文献</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-class-enhancer-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 基础之类字节码详解</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 基础之类字节码详解</source>
      <description>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行。 JVM 基础之类字节码详解 多语言编译为字节码在JVM运行 Java字节码文件 Class文件的结构属性 从一个例子开始 反编译字节码文件 字节码文件信息 常量池 方法表集合 类名 再看两个示例 分析try-catch-finally kotlin 函数扩展的实现 参考文章 # ...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行。</p>
</blockquote>
<ul>
<li>JVM 基础之类字节码详解
<ul>
<li><a href="#%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E4%B8%BA%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8jvm%E8%BF%90%E8%A1%8C">多语言编译为字节码在JVM运行</a></li>
<li>Java字节码文件
<ul>
<li><a href="#class%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E5%B1%9E%E6%80%A7">Class文件的结构属性</a></li>
<li><a href="#%E4%BB%8E%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%BC%80%E5%A7%8B">从一个例子开始</a></li>
<li><a href="#%E5%8F%8D%E7%BC%96%E8%AF%91%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6">反编译字节码文件</a></li>
<li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF">字节码文件信息</a></li>
<li><a href="#%E5%B8%B8%E9%87%8F%E6%B1%A0">常量池</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E8%A1%A8%E9%9B%86%E5%90%88">方法表集合</a></li>
<li><a href="#%E7%B1%BB%E5%90%8D">类名</a></li>
</ul>
</li>
<li>再看两个示例
<ul>
<li><a href="#%E5%88%86%E6%9E%90try-catch-finally">分析try-catch-finally</a></li>
<li><a href="#kotlin-%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95%E7%9A%84%E5%AE%9E%E7%8E%B0">kotlin 函数扩展的实现</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#多语言编译为字节码在jvm运行"><span></span></a><a href="#%E5%A4%9A%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91%E4%B8%BA%E5%AD%97%E8%8A%82%E7%A0%81%E5%9C%A8jvm%E8%BF%90%E8%A1%8C">#</a> 多语言编译为字节码在JVM运行</h2>
<p>计算机是不能直接运行java代码的，必须要先运行java虚拟机，再由java虚拟机运行编译后的java代码。这个编译后的java代码，就是本文要介绍的java字节码。</p>
<p>为什么jvm不能直接运行java代码呢，这是因为在cpu层面看来计算机中所有的操作都是一个个指令的运行汇集而成的，java是高级语言，只有人类才能理解其逻辑，计算机是无法识别的，所以java代码必须要先编译成字节码文件，jvm才能正确识别代码转换后的指令并将其运行。</p>
<ul>
<li>Java代码间接翻译成字节码，储存字节码的文件再交由运行于不同平台上的JVM虚拟机去读取执行，从而实现一次编写，到处运行的目的。</li>
<li>JVM也不再只支持Java，由此衍生出了许多基于JVM的编程语言，如Groovy, Scala, Koltin等等。</li>
</ul>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-class-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#java字节码文件"><span></span></a><a href="#java%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6">#</a> Java字节码文件</h2>
<p>class文件本质上是一个以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑的排列在class文件中。jvm根据其特定的规则解析该二进制数据，从而得到相关信息。</p>
<p>Class文件采用一种伪结构来存储数据，它有两种类型：无符号数和表。这里暂不详细的讲。</p>
<p>本文将通过简单的java例子编译后的文件来理解。</p>
<h3><a class="header-anchor" href="#class文件的结构属性"><span></span></a><a href="#class%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E5%B1%9E%E6%80%A7">#</a> Class文件的结构属性</h3>
<p>在理解之前先从整体看下java字节码文件包含了哪些类型的数据：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-class-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#从一个例子开始"><span></span></a><a href="#%E4%BB%8E%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%BC%80%E5%A7%8B">#</a> 从一个例子开始</h3>
<p>下面以一个简单的例子来逐步讲解字节码。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//Main.java</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Main</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> inc</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> m </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以下命令, 可以在当前所在路径下生成一个Main.class文件。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">javac</span><span style="color:#98C379"> Main.java</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>以文本的形式打开生成的class文件，内容如下:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">cafe</span><span style="color:#98C379"> babe</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0034</span><span style="color:#D19A66"> 0013</span><span style="color:#98C379"> 0a00</span><span style="color:#D19A66"> 0400</span><span style="color:#98C379"> 0f09</span></span>
<span class="line"><span style="color:#61AFEF">0003</span><span style="color:#D19A66"> 0010</span><span style="color:#D19A66"> 0700</span><span style="color:#D19A66"> 1107</span><span style="color:#D19A66"> 0012</span><span style="color:#D19A66"> 0100</span><span style="color:#98C379"> 016d</span><span style="color:#D19A66"> 0100</span></span>
<span class="line"><span style="color:#61AFEF">0149</span><span style="color:#D19A66"> 0100</span><span style="color:#98C379"> 063c</span><span style="color:#98C379"> 696e</span><span style="color:#D19A66"> 6974</span><span style="color:#98C379"> 3e01</span><span style="color:#D19A66"> 0003</span><span style="color:#D19A66"> 2829</span></span>
<span class="line"><span style="color:#61AFEF">5601</span><span style="color:#D19A66"> 0004</span><span style="color:#98C379"> 436f</span><span style="color:#D19A66"> 6465</span><span style="color:#D19A66"> 0100</span><span style="color:#98C379"> 0f4c</span><span style="color:#98C379"> 696e</span><span style="color:#98C379"> 654e</span></span>
<span class="line"><span style="color:#61AFEF">756d</span><span style="color:#D19A66"> 6265</span><span style="color:#D19A66"> 7254</span><span style="color:#D19A66"> 6162</span><span style="color:#98C379"> 6c65</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0369</span><span style="color:#98C379"> 6e63</span></span>
<span class="line"><span style="color:#61AFEF">0100</span><span style="color:#D19A66"> 0328</span><span style="color:#D19A66"> 2949</span><span style="color:#D19A66"> 0100</span><span style="color:#98C379"> 0a53</span><span style="color:#98C379"> 6f75</span><span style="color:#D19A66"> 7263</span><span style="color:#D19A66"> 6546</span></span>
<span class="line"><span style="color:#61AFEF">696c</span><span style="color:#D19A66"> 6501</span><span style="color:#D19A66"> 0009</span><span style="color:#98C379"> 4d61</span><span style="color:#98C379"> 696e</span><span style="color:#98C379"> 2e6a</span><span style="color:#D19A66"> 6176</span><span style="color:#98C379"> 610c</span></span>
<span class="line"><span style="color:#61AFEF">0007</span><span style="color:#D19A66"> 0008</span><span style="color:#98C379"> 0c00</span><span style="color:#D19A66"> 0500</span><span style="color:#D19A66"> 0601</span><span style="color:#D19A66"> 0010</span><span style="color:#98C379"> 636f</span><span style="color:#98C379"> 6d2f</span></span>
<span class="line"><span style="color:#61AFEF">7268</span><span style="color:#D19A66"> 7974</span><span style="color:#98C379"> 686d</span><span style="color:#98C379"> 372f</span><span style="color:#98C379"> 4d61</span><span style="color:#98C379"> 696e</span><span style="color:#D19A66"> 0100</span><span style="color:#98C379"> 106a</span></span>
<span class="line"><span style="color:#61AFEF">6176</span><span style="color:#98C379"> 612f</span><span style="color:#98C379"> 6c61</span><span style="color:#98C379"> 6e67</span><span style="color:#98C379"> 2f4f</span><span style="color:#98C379"> 626a</span><span style="color:#D19A66"> 6563</span><span style="color:#D19A66"> 7400</span></span>
<span class="line"><span style="color:#61AFEF">2100</span><span style="color:#D19A66"> 0300</span><span style="color:#D19A66"> 0400</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0200</span><span style="color:#D19A66"> 0500</span><span style="color:#D19A66"> 0600</span></span>
<span class="line"><span style="color:#61AFEF">0000</span><span style="color:#D19A66"> 0200</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0700</span><span style="color:#D19A66"> 0800</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0900</span><span style="color:#D19A66"> 0000</span></span>
<span class="line"><span style="color:#61AFEF">1d00</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0000</span><span style="color:#98C379"> 052a</span><span style="color:#98C379"> b700</span><span style="color:#98C379"> 01b1</span><span style="color:#D19A66"> 0000</span></span>
<span class="line"><span style="color:#61AFEF">0001</span><span style="color:#98C379"> 000a</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0006</span><span style="color:#D19A66"> 0001</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0003</span><span style="color:#D19A66"> 0001</span></span>
<span class="line"><span style="color:#61AFEF">000b</span><span style="color:#98C379"> 000c</span><span style="color:#D19A66"> 0001</span><span style="color:#D19A66"> 0009</span><span style="color:#D19A66"> 0000</span><span style="color:#98C379"> 001f</span><span style="color:#D19A66"> 0002</span><span style="color:#D19A66"> 0001</span></span>
<span class="line"><span style="color:#61AFEF">0000</span><span style="color:#D19A66"> 0007</span><span style="color:#98C379"> 2ab4</span><span style="color:#D19A66"> 0002</span><span style="color:#D19A66"> 0460</span><span style="color:#98C379"> ac00</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0100</span></span>
<span class="line"><span style="color:#61AFEF">0a00</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0600</span><span style="color:#D19A66"> 0100</span><span style="color:#D19A66"> 0000</span><span style="color:#D19A66"> 0800</span><span style="color:#D19A66"> 0100</span><span style="color:#98C379"> 0d00</span></span>
<span class="line"><span style="color:#61AFEF">0000</span><span style="color:#D19A66"> 0200</span><span style="color:#98C379"> 0e</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>文件开头的4个字节("cafe babe")称之为 <code>魔数</code>，唯有以"cafe babe"开头的class文件方可被虚拟机所接受，这4个字节就是字节码文件的身份识别。</li>
<li>0000是编译器jdk版本的次版本号0，0034转化为十进制是52,是主版本号，java的版本号从45开始，除1.0和1.1都是使用45.x外,以后每升一个大版本，版本号加一。也就是说，编译生成该class文件的jdk版本为1.8.0。</li>
</ul>
<p>通过java -version命令稍加验证, 可得结果。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">Java</span><span style="color:#E06C75">(TM) </span><span style="color:#E5C07B">SE</span><span style="color:#E5C07B"> Runtime</span><span style="color:#61AFEF"> Environment</span><span style="color:#E06C75"> (build </span><span style="color:#D19A66">1.8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0_131</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b11)</span></span>
<span class="line"><span style="color:#E5C07B">Java</span><span style="color:#61AFEF"> HotSpot</span><span style="color:#E06C75">(TM) </span><span style="color:#D19A66">64</span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">Bit</span><span style="color:#E5C07B"> Server</span><span style="color:#61AFEF"> VM</span><span style="color:#E06C75"> (build </span><span style="color:#D19A66">25.131</span><span style="color:#56B6C2">-</span><span style="color:#E06C75">b11</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> mixed mode)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>继续往下是常量池... 知道是这么分析的就可以了，然后我们通过工具反编译字节码文件继续去看。</p>
<h3><a class="header-anchor" href="#反编译字节码文件"><span></span></a><a href="#%E5%8F%8D%E7%BC%96%E8%AF%91%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6">#</a> 反编译字节码文件</h3>
<blockquote>
<p>使用到java内置的一个反编译工具javap可以反编译字节码文件, 用法: <code>javap &lt;options&gt; &lt;classes&gt;</code></p>
</blockquote>
<p>其中<code>&lt;options&gt;</code>选项包括:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">  -help</span><span style="color:#D19A66">  --help</span><span style="color:#D19A66">  -</span><span style="color:#ABB2BF">?</span><span style="color:#98C379">        输出此用法消息</span></span>
<span class="line"><span style="color:#61AFEF">  -version</span><span style="color:#98C379">                 版本信息</span></span>
<span class="line"><span style="color:#61AFEF">  -v</span><span style="color:#D19A66">  -verbose</span><span style="color:#98C379">             输出附加信息</span></span>
<span class="line"><span style="color:#61AFEF">  -l</span><span style="color:#98C379">                       输出行号和本地变量表</span></span>
<span class="line"><span style="color:#61AFEF">  -public</span><span style="color:#98C379">                  仅显示公共类和成员</span></span>
<span class="line"><span style="color:#61AFEF">  -protected</span><span style="color:#98C379">               显示受保护的/公共类和成员</span></span>
<span class="line"><span style="color:#61AFEF">  -package</span><span style="color:#98C379">                 显示程序包/受保护的/公共类</span></span>
<span class="line"><span style="color:#61AFEF">                           和成员</span><span style="color:#ABB2BF"> (默认)</span></span>
<span class="line"><span style="color:#61AFEF">  -p</span><span style="color:#D19A66">  -private</span><span style="color:#98C379">             显示所有类和成员</span></span>
<span class="line"><span style="color:#61AFEF">  -c</span><span style="color:#98C379">                       对代码进行反汇编</span></span>
<span class="line"><span style="color:#61AFEF">  -s</span><span style="color:#98C379">                       输出内部类型签名</span></span>
<span class="line"><span style="color:#61AFEF">  -sysinfo</span><span style="color:#98C379">                 显示正在处理的类的</span></span>
<span class="line"><span style="color:#61AFEF">                           系统信息</span><span style="color:#ABB2BF"> (路径, </span><span style="color:#98C379">大小,</span><span style="color:#98C379"> 日期,</span><span style="color:#98C379"> MD5</span><span style="color:#98C379"> 散列</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#61AFEF">  -constants</span><span style="color:#98C379">               显示最终常量</span></span>
<span class="line"><span style="color:#61AFEF">  -classpath</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pat</span><span style="color:#ABB2BF">h&gt;        </span><span style="color:#98C379">指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#61AFEF">  -cp</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pat</span><span style="color:#ABB2BF">h&gt;               </span><span style="color:#98C379">指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#61AFEF">  -bootclasspath</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">pat</span><span style="color:#ABB2BF">h&gt;    </span><span style="color:#98C379">覆盖引导类文件的位置</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入命令<code>javap -verbose -p Main.class</code>查看输出内容:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">Classfile </span><span style="color:#56B6C2">/</span><span style="color:#E06C75">E</span><span style="color:#C678DD">:</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaCode</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">TestProj</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">out</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">production</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">TestProj</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">com</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">rhythm7</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">Main</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span></span>
<span class="line"><span style="color:#E5C07B">  Last</span><span style="color:#E06C75"> modified </span><span style="color:#D19A66">2018</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">4</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">7</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> size </span><span style="color:#D19A66">362</span><span style="color:#E06C75"> bytes</span></span>
<span class="line"><span style="color:#E5C07B">  MD5</span><span style="color:#E06C75"> checksum 4aed8540b098992663b7ba08c65312de</span></span>
<span class="line"><span style="color:#E5C07B">  Compiled</span><span style="color:#E06C75"> from </span><span style="color:#98C379">"Main.java"</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> com</span><span style="color:#E06C75">.rhythm7.Main</span></span>
<span class="line"><span style="color:#E06C75">  minor version: 0</span></span>
<span class="line"><span style="color:#E06C75">  major version: 52</span></span>
<span class="line"><span style="color:#E06C75">  flags: ACC_PUBLIC, ACC_SUPER</span></span>
<span class="line"><span style="color:#E06C75">Constant pool:</span></span>
<span class="line"><span style="color:#E06C75">   #1 = Methodref          #4.#18         </span><span style="color:#7F848E;font-style:italic">// java/lang/Object."&lt;init&gt;":()V</span></span>
<span class="line"><span style="color:#E06C75">   #2 = Fieldref           #3.#19         </span><span style="color:#7F848E;font-style:italic">// com/rhythm7/Main.m:I</span></span>
<span class="line"><span style="color:#E06C75">   #3 = Class              #20            </span><span style="color:#7F848E;font-style:italic">// com/rhythm7/Main</span></span>
<span class="line"><span style="color:#E06C75">   #4 = Class              #21            </span><span style="color:#7F848E;font-style:italic">// java/lang/Object</span></span>
<span class="line"><span style="color:#E06C75">   #5 = Utf8               m</span></span>
<span class="line"><span style="color:#E06C75">   #6 = Utf8               I</span></span>
<span class="line"><span style="color:#E06C75">   #7 = Utf8               </span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">init</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#E06C75">   #8 = Utf8               ()V</span></span>
<span class="line"><span style="color:#E06C75">   #9 = Utf8               Code</span></span>
<span class="line"><span style="color:#E06C75">  #10 = Utf8               LineNumberTable</span></span>
<span class="line"><span style="color:#E06C75">  #11 = Utf8               LocalVariableTable</span></span>
<span class="line"><span style="color:#E06C75">  #12 = Utf8               this</span></span>
<span class="line"><span style="color:#E06C75">  #13 = Utf8               Lcom/rhythm7/Main;</span></span>
<span class="line"><span style="color:#E06C75">  #14 = Utf8               inc</span></span>
<span class="line"><span style="color:#E06C75">  #15 = Utf8               ()I</span></span>
<span class="line"><span style="color:#E06C75">  #16 = Utf8               SourceFile</span></span>
<span class="line"><span style="color:#E06C75">  #17 = Utf8               Main.java</span></span>
<span class="line"><span style="color:#E06C75">  #18 = NameAndType        #7:#8          </span><span style="color:#7F848E;font-style:italic">// "&lt;init&gt;":()V</span></span>
<span class="line"><span style="color:#E06C75">  #19 = NameAndType        #5:#6          </span><span style="color:#7F848E;font-style:italic">// m:I</span></span>
<span class="line"><span style="color:#E06C75">  #20 = Utf8               com/rhythm7/Main</span></span>
<span class="line"><span style="color:#E06C75">  #21 = Utf8               java/lang/Object</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">  private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    descriptor</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> I</span></span>
<span class="line"><span style="color:#E06C75">    flags</span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> ACC_PRIVATE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> com.rhythm7.Main</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">    descriptor: ()V</span></span>
<span class="line"><span style="color:#61AFEF">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#61AFEF">    Code:</span></span>
<span class="line"><span style="color:#61AFEF">      stack=1, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#61AFEF">         0: aload_0</span></span>
<span class="line"><span style="color:#61AFEF">         1: invokespecial #1                  </span><span style="color:#7F848E;font-style:italic">// Method java/lang/Object."&lt;init&gt;":()V</span></span>
<span class="line"><span style="color:#61AFEF">         4: return</span></span>
<span class="line"><span style="color:#61AFEF">      LineNumberTable:</span></span>
<span class="line"><span style="color:#61AFEF">        line 3: 0</span></span>
<span class="line"><span style="color:#61AFEF">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#61AFEF">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#61AFEF">            0       5     0  this   Lcom/rhythm7/Main</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> inc</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">    descriptor: ()I</span></span>
<span class="line"><span style="color:#61AFEF">    flags: ACC_PUBLIC</span></span>
<span class="line"><span style="color:#61AFEF">    Code:</span></span>
<span class="line"><span style="color:#61AFEF">      stack=2, locals=1, args_size=1</span></span>
<span class="line"><span style="color:#61AFEF">         0: aload_0</span></span>
<span class="line"><span style="color:#61AFEF">         1: getfield      #2                  </span><span style="color:#7F848E;font-style:italic">// Field m:I</span></span>
<span class="line"><span style="color:#61AFEF">         4: iconst_1</span></span>
<span class="line"><span style="color:#61AFEF">         5: iadd</span></span>
<span class="line"><span style="color:#61AFEF">         6: ireturn</span></span>
<span class="line"><span style="color:#61AFEF">      LineNumberTable:</span></span>
<span class="line"><span style="color:#61AFEF">        line 8: 0</span></span>
<span class="line"><span style="color:#61AFEF">      LocalVariableTable:</span></span>
<span class="line"><span style="color:#61AFEF">        Start  Length  Slot  Name   Signature</span></span>
<span class="line"><span style="color:#61AFEF">            0       7     0  this   Lcom/rhythm7/Main</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#E06C75">SourceFile</span><span style="color:#C678DD">:</span><span style="color:#98C379"> "Main.java"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#字节码文件信息"><span></span></a><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF">#</a> 字节码文件信息</h3>
<p>开头的7行信息包括:Class文件当前所在位置，最后修改时间，文件大小，MD5值，编译自哪个文件，类的全限定名，jdk次版本号，主版本号。</p>
<p>然后紧接着的是该类的访问标志：ACC_PUBLIC, ACC_SUPER，访问标志的含义如下:</p>
<p>| 标志名称       | 标志值 | 含义                                                         |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-class-1.png" type="image/png"/>
    </item>
    <item>
      <title>JVM 相关知识体系详解</title>
      <link>https://cactusli.net/posts/Java/JVM/JVM%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/JVM%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JVM 相关知识体系详解</source>
      <description>本系列将给大家构建JVM核心知识点全局知识体系。 JVM 相关知识体系详解 知识体系 学习要点 参考文章 # 知识体系 imgimg # 学习要点 不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 16:07:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本系列将给大家构建JVM核心知识点全局知识体系。</p>
</blockquote>
<ul>
<li>JVM 相关知识体系详解
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li><a href="#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9">学习要点</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#学习要点"><span></span></a><a href="#%E5%AD%A6%E4%B9%A0%E8%A6%81%E7%82%B9">#</a> 学习要点</h2>
<blockquote>
<p>不同的虚拟机实现方式上也有差别，如果没有特别指出，这里的JVM指的是sun的HotSpot；不同的JDK版本略有差别，这里主要以1.8为主，具体差异请看各个章节中详解。下图主要表示的逻辑关系，用来将所有知识点放到一张图里，帮助你理解。</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<blockquote>
<p><strong>A. Java进阶 - JVM相关 知识体系</strong>： 首先按照上述<code>学习思路</code>，理解总体知识点在全局上与知识体系之间的对应关系。</p>
</blockquote>
<ul>
<li><a href="">JVM 相关知识体系</a></li>
</ul>
<blockquote>
<p><strong>B. Java进阶 - JVM相关 类加载</strong>： 然后理解类字节码和类的加载机制。</p>
</blockquote>
<ul>
<li>JVM基础 - 类字节码详解
<ul>
<li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li>
</ul>
</li>
<li>JVM基础 - 字节码的增强技术
<ul>
<li>在上文中，着重介绍了字节码的结构，这为我们了解字节码增强技术的实现打下了基础。字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。接下来，我们将从最直接操纵字节码的实现方式开始深入进行剖析。</li>
</ul>
</li>
<li>JVM基础 - Java 类加载机制
<ul>
<li>这篇文章将带你深入理解Java 类加载机制</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>C. Java进阶 - JVM相关 内存结构</strong>： 因为类字节码是加载到JVM内存结构中的，所以紧接着理解JVM内存结构。</p>
</blockquote>
<ul>
<li>JVM基础 - JVM内存结构
<ul>
<li>本文主要对JVM 内存结构进行讲解，注意不要和Java内存模型混淆了</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>D. Java进阶 - JVM相关 JMM</strong>： 然后通过理解JVM与硬件之间的联系，理解Java 通过其内存模型保证数据线程安全等，这是JVM在并发上底层的支持。</p>
</blockquote>
<ul>
<li>JVM基础 - Java 内存模型引入
<ul>
<li>很多人都无法区分Java内存模型和JVM内存结构，以及Java内存模型与物理内存之间的关系。本文从堆栈角度引入JMM，然后介绍JMM和物理内存之间的关系, 为后面<code>JMM详解</code>, <code>JVM 内存结构详解</code>, <code>Java 对象模型详解</code>等铺垫。</li>
</ul>
</li>
<li>JVM基础 - Java 内存模型详解
<ul>
<li>本文主要转载自 Info 上<a href="https://www.infoq.cn/article/java_memory_model/" target="_blank" rel="noopener noreferrer">深入理解Java内存模型在新窗口打开</a>, 作者程晓明。这篇文章对JMM讲的很清楚了，大致分三部分：重排序与顺序一致性；三个同步原语（lock，volatile，final）的内存语义，重排序规则及在处理器中的实现；java 内存模型的设计，及其与处理器内存模型和顺序一致性内存模型的关系</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>E. Java进阶 - JVM相关 GC</strong>： 再者理解下Java GC机制，如何回收内存等。</p>
</blockquote>
<ul>
<li>GC - Java 垃圾回收基础知识
<ul>
<li>垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。</li>
</ul>
</li>
<li>GC - Java 垃圾回收器之G1详解
<ul>
<li>G1垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器。同优秀的CMS垃圾回收器一样，G1也是关注最小时延的垃圾回收器，也同样适合大尺寸堆内存的垃圾收集，官方在ZGC还没有出现时也推荐使用G1来代替选择CMS。G1最大的特点是引入分区的思路，弱化了分代的概念，合理利用垃圾收集各个周期的资源，解决了其他收集器甚至CMS的众多缺陷。</li>
</ul>
</li>
<li>GC - Java 垃圾回收器之ZGC详解
<ul>
<li>ZGC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器, 是JDK 11+ 最为重要的更新之一，适用于<strong>大内存低延迟</strong>服务的内存管理和回收。在梳理相关知识点时，发现美团技术团队分享的文章<a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html" target="_blank" rel="noopener noreferrer">新一代垃圾回收器ZGC的探索与实践在新窗口打开</a>比较完善（包含G1收集器停顿时间瓶颈，原理，优化等）, 这里分享给你，帮你构建ZGC相关的知识体系</li>
</ul>
</li>
<li>GC - Java 垃圾回收器之CMS GC问题分析与解决
<ul>
<li>本文整理自<a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html" target="_blank" rel="noopener noreferrer">美团技术团队在新窗口打开</a>, 这篇文章将可以帮助你构建CMS GC相关问题解决的知识体系，分享给你。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>F. Java进阶 - JVM相关 排错调优</strong>： 最后围绕着调试和排错，分析理解JVM调优参数，动态字节码技术及动态在线调试的原理；学会使用常用的调工具和在线动态调试工具等。</p>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-jvm-debug.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ul>
<li>调试排错 - JVM 调优参数
<ul>
<li>本文对JVM涉及的常见的调优参数和垃圾回收参数进行阐述</li>
</ul>
</li>
<li>调试排错 - Java 内存分析之堆内存和MetaSpace内存
<ul>
<li>本文以两个简单的例子(<code>堆内存溢出</code>和<code>MetaSpace (元数据) 内存溢出</code>）解释Java 内存溢出的分析过程</li>
</ul>
</li>
<li>调试排错 - Java 内存分析之堆外内存
<ul>
<li>Java 堆外内存分析相对来说是复杂的，美团技术团队的<a href="https://tech.meituan.com/2019/01/03/spring-boot-native-memory-leak.html" target="_blank" rel="noopener noreferrer">Spring Boot引起的“堆外内存泄漏”排查及经验总结在新窗口打开</a>可以为很多Native Code内存泄漏/占用提供方向性指引。</li>
</ul>
</li>
<li>调试排错 - Java 线程分析之线程Dump分析
<ul>
<li>Thread Dump是非常有用的诊断Java应用问题的工具。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之Linux命令
<ul>
<li>Java 在线问题排查之通过linux常用命令排查。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之工具单
<ul>
<li>Java 在线问题排查之通过java调试/排查工具进行问题定位。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之JVM可视化工具
<ul>
<li>本文主要梳理常见的JVM可视化的分析工具，主要包括JConsole, Visual VM, Vusial GC, JProfile 和 MAT等。</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之应用在线调试Arthas
<ul>
<li>本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经1.7万个点赞了，深受开发者喜爱。具体解决在线问题，比如：</li>
<li>这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?</li>
<li>我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况?</li>
<li>有什么办法可以监控到JVM的实时运行状态?</li>
</ul>
</li>
<li>调试排错 - Java 问题排查之使用IDEA本地调试和远程调试
<ul>
<li>Debug用来追踪代码的运行流程，通常在程序运行过程中出现异常，启用Debug模式可以分析定位异常发生的位置，以及在运行过程中参数的变化；并且在实际的排错过程中，还会用到Remote Debug。IDEA 相比 Eclipse/STS效率更高，本文主要介绍基于IDEA的Debug和Remote Debug的技巧。</li>
</ul>
</li>
<li>调试排错 - Java动态调试技术原理
<ul>
<li>本文转载自 美团技术团队胡健的<a href="https://tech.meituan.com/2019/11/07/java-dynamic-debugging-technology.html" target="_blank" rel="noopener noreferrer">Java 动态调试技术原理及实践在新窗口打开</a>, 通过学习java agent方式进行动态调试了解目前很多大厂开源的一些基于此的调试工具。</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%AD%A6%E4%B9%A0%E6%96%87%E7%8C%AE">#</a> 参考文章</h2>
<ul>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5" target="_blank" rel="noopener noreferrer">Java虚拟机规范（Java SE 8）在新窗口打开</a></li>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf" target="_blank" rel="noopener noreferrer">JSR-133: JavaTM Memory Model and Thread Specification</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/jvm-overview.png" type="image/png"/>
    </item>
    <item>
      <title>调试排错之 JVM 调优参数</title>
      <link>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20JVM%20%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0.html</link>
      <guid>https://cactusli.net/posts/Java/JVM/%E8%B0%83%E8%AF%95%E6%8E%92%E9%94%99%20JVM%20%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0.html</guid>
      <source url="https://cactusli.net/rss.xml">调试排错之 JVM 调优参数</source>
      <description>本文对JVM涉及的常见的调优参数和垃圾回收参数进行阐述。 调试排错之 JVM 调优参数 jvm参数 垃圾回收 # jvm参数 -Xms 堆最小值 -Xmx 堆最大堆值。-Xms与-Xmx 的单位默认字节都是以k、m做单位的。 通常这两个配置参数相等，避免每次空间不足，动态扩容带来的影响。 -Xmn 新生代大小 -Xss 每个线程池的堆栈大小。在jdk5...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 17:08:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文对JVM涉及的常见的调优参数和垃圾回收参数进行阐述。</p>
</blockquote>
<ul>
<li>调试排错之 JVM 调优参数
<ul>
<li><a href="#jvm%E5%8F%82%E6%95%B0">jvm参数</a></li>
<li><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">垃圾回收</a></li>
</ul>
</li>
</ul>
<h3><a class="header-anchor" href="#jvm参数"><span></span></a><a href="#jvm%E5%8F%82%E6%95%B0">#</a> jvm参数</h3>
<ul>
<li>-Xms</li>
</ul>
<p>堆最小值</p>
<ul>
<li>-Xmx</li>
</ul>
<p>堆最大堆值。-Xms与-Xmx 的单位默认字节都是以k、m做单位的。</p>
<p>通常这两个配置参数相等，避免每次空间不足，动态扩容带来的影响。</p>
<ul>
<li>-Xmn</li>
</ul>
<p>新生代大小</p>
<ul>
<li>-Xss</li>
</ul>
<p>每个线程池的堆栈大小。在jdk5以上的版本，每个线程堆栈大小为1m，jdk5以前的版本是每个线程池大小为256k。一般在相同物理内存下，如果减少－xss值会产生更大的线程数，但不同的操作系统对进程内线程数是有限制的，是不能无限生成。</p>
<ul>
<li>-XX:NewRatio</li>
</ul>
<p>设置新生代与老年代比值，-XX:NewRatio=4 表示新生代与老年代所占比例为1:4 ，新生代占比整个堆的五分之一。如果设置了-Xmn的情况下，该参数是不需要在设置的。</p>
<ul>
<li>-XX:PermSize</li>
</ul>
<p>设置持久代初始值，默认是物理内存的六十四分之一</p>
<ul>
<li>-XX:MaxPermSize</li>
</ul>
<p>设置持久代最大值，默认是物理内存的四分之一</p>
<ul>
<li>-XX:MaxTenuringThreshold</li>
</ul>
<p>新生代中对象存活次数，默认15。(若对象在eden区，经历一次MinorGC后还活着，则被移动到Survior区，年龄加1。以后，对象每次经历MinorGC，年龄都加1。达到阀值，则移入老年代)</p>
<ul>
<li>-XX:SurvivorRatio</li>
</ul>
<p>Eden区与Subrvivor区大小的比值，如果设置为8，两个Subrvivor区与一个Eden区的比值为2:8，一个Survivor区占整个新生代的十分之一</p>
<ul>
<li>-XX:+UseFastAccessorMethods</li>
</ul>
<p>原始类型快速优化</p>
<ul>
<li>-XX:+AggressiveOpts</li>
</ul>
<p>编译速度加快</p>
<ul>
<li>-XX:PretenureSizeThreshold</li>
</ul>
<p>对象超过多大值时直接在老年代中分配</p>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>说明: </span></span>
<span class="line"><span>整个堆大小的计算公式: JVM 堆大小 ＝ 年轻代大小＋年老代大小＋持久代大小。</span></span>
<span class="line"><span>增大新生代大小就会减少对应的年老代大小，设置-Xmn值对系统性能影响较大，所以如果设置新生代大小的调整，则需要严格的测试调整。而新生代是用来存放新创建的对象，大小是随着堆大小增大和减少而有相应的变化，默认值是保持堆大小的十五分之一，-Xmn参数就是设置新生代的大小，也可以通过-XX:NewRatio来设置新生代与年老代的比例，java 官方推荐配置为3:8。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>新生代的特点就是内存中的对象更新速度快，在短时间内容易产生大量的无用对象，如果在这个参数时就需要考虑垃圾回收器设置参数也需要调整。推荐使用: 复制清除算法和并行收集器进行垃圾回收，而新生代的垃圾回收叫做初级回收。</span></span>
<span class="line"><span>StackOverflowError和OutOfMemoryException。当线程中的请求的栈的深度大于最大可用深度，就会抛出前者；若内存空间不够，无法创建新的线程，则会抛出后者。栈的大小直接决定了函数的调用最大深度，栈越大，函数嵌套可调用次数就越多。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>经验</strong> :</p>
<ol>
<li>Xmn用于设置新生代的大小。过小会增加Minor GC频率，过大会减小老年代的大小。一般设为整个堆空间的1/4或1/3.</li>
<li>XX:SurvivorRatio用于设置新生代中survivor空间(from/to)和eden空间的大小比例； XX:TargetSurvivorRatio表示，当经历Minor GC后，survivor空间占有量(百分比)超过它的时候，就会压缩进入老年代(当然，如果survivor空间不够，则直接进入老年代)。默认值为50%。</li>
<li>为了性能考虑，一开始尽量将新生代对象留在新生代，避免新生的大对象直接进入老年代。因为新生对象大部分都是短期的，这就造成了老年代的内存浪费，并且回收代价也高(Full GC发生在老年代和方法区Perm).</li>
<li>当Xms=Xmx，可以使得堆相对稳定，避免不停震荡</li>
<li>一般来说，MaxPermSize设为64MB可以满足绝大多数的应用了。若依然出现方法区溢出，则可以设为128MB。若128MB还不能满足需求，那么就应该考虑程序优化了，减少<strong>动态类</strong>的产生。</li>
</ol>
<h3><a class="header-anchor" href="#垃圾回收"><span></span></a><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">#</a> 垃圾回收</h3>
<p><strong>垃圾回收算法</strong> :</p>
<ul>
<li>引用计数法: 会有循环引用的问题，古老的方法；</li>
<li>Mark-Sweep: 标记清除。根可达判断，最大的问题是空间碎片(清除垃圾之后剩下不连续的内存空间)；</li>
<li>Copying: 复制算法。对于短命对象来说有用，否则需要复制大量的对象，效率低。<strong>如Java的新生代堆空间中就是使用了它(survivor空间的from和to区)；</strong></li>
<li>Mark-Compact: 标记整理。对于老年对象来说有用，无需复制，不会产生内存碎片</li>
</ul>
<p><strong>GC考虑的指标</strong></p>
<ul>
<li>吞吐量: 应用耗时和实际耗时的比值；</li>
<li>停顿时间: 垃圾回收的时候，由于Stop the World，应用程序的所有线程会挂起，造成应用停顿。</li>
</ul>
<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>吞吐量和停顿时间是互斥的。</span></span>
<span class="line"><span>对于后端服务(比如后台计算任务)，吞吐量优先考虑(并行垃圾回收)；</span></span>
<span class="line"><span>对于前端应用，RT响应时间优先考虑，减少垃圾收集时的停顿时间，适用场景是Web系统(并发垃圾回收)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回收器的JVM参数</strong></p>
<ul>
<li>-XX:+UseSerialGC</li>
</ul>
<p>串行垃圾回收，现在基本很少使用。</p>
<ul>
<li>-XX:+UseParNewGC</li>
</ul>
<p>新生代使用并行，老年代使用串行；</p>
<ul>
<li>-XX:+UseConcMarkSweepGC</li>
</ul>
<p>新生代使用并行，老年代使用CMS(一般都是使用这种方式)，CMS是Concurrent Mark Sweep的缩写，并发标记清除，一看就是老年代的算法，所以，它可以作为老年代的垃圾回收器。CMS不是独占式的，它关注停顿时间</p>
<ul>
<li>-XX:ParallelGCThreads</li>
</ul>
<p>指定并行的垃圾回收线程的数量，最好等于CPU数量</p>
<ul>
<li>-XX:+DisableExplicitGC</li>
</ul>
<p>禁用System.gc()，因为它会触发Full GC，这是很浪费性能的，JVM会在需要GC的时候自己触发GC。</p>
<ul>
<li>-XX:CMSFullGCsBeforeCompaction</li>
</ul>
<p>在多少次GC后进行内存压缩，这个是因为并行收集器不对内存空间进行压缩的，所以运行一段时间后会产生很多碎片，使得运行效率降低。</p>
<ul>
<li>-XX:+CMSParallelRemarkEnabled</li>
</ul>
<p>降低标记停顿</p>
<ul>
<li>-XX:+UseCMSCompactAtFullCollection</li>
</ul>
<p>在每一次Full GC时对老年代区域碎片整理，因为CMS是不会移动内存的，因此会非常容易出现碎片导致内存不够用的</p>
<ul>
<li>-XX:+UseCmsInitiatingOccupancyOnly</li>
</ul>
<p>使用手动触发或者自定义触发cms 收集，同时也会禁止hostspot 自行触发CMS GC</p>
<ul>
<li>-XX:CMSInitiatingOccupancyFraction</li>
</ul>
<p>使用CMS作为垃圾回收，使用70%后开始CMS收集</p>
<ul>
<li>-XX:CMSInitiatingPermOccupancyFraction</li>
</ul>
<p>设置perm gen使用达到多少％比时触发垃圾回收，默认是92%</p>
<ul>
<li>-XX:+CMSIncrementalMode</li>
</ul>
<p>设置为增量模式</p>
<ul>
<li>-XX:+CmsClassUnloadingEnabled</li>
</ul>
<p>CMS是不会默认对永久代进行垃圾回收的，设置此参数则是开启</p>
<ul>
<li>-XX:+PrintGCDetails</li>
</ul>
<p>开启详细GC日志模式，日志的格式是和所使用的算法有关</p>
<ul>
<li>-XX:+PrintGCDateStamps</li>
</ul>
<p>将时间和日期也加入到GC日志中</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 JRE精简</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JRE%E7%B2%BE%E7%AE%80.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JRE%E7%B2%BE%E7%AE%80.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 JRE精简</source>
      <description>理解Java8 JRE精简需理解几个问题: 为什么精简Java8 JRE，及好处是啥? 在不同平台上如何编译等? Java8 JRE精简 JRE精简好处 概念 使用工具开发的效果 JDEPS工具使用 在linux上构建profile 编译后compact大致的占用空间 总结 Oracle公司如期发布了Java 8正式版！没有让广大javaer失望。对于...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java8 JRE精简需理解几个问题:</p>
<ul>
<li>为什么精简Java8 JRE，及好处是啥?</li>
<li>在不同平台上如何编译等?</li>
</ul>
</blockquote>
<ul>
<li>Java8 JRE精简
<ul>
<li><a href="#jre%E7%B2%BE%E7%AE%80%E5%A5%BD%E5%A4%84">JRE精简好处</a></li>
<li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li>
<li>使用工具开发的效果
<ul>
<li><a href="#jdeps%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8">JDEPS工具使用</a></li>
<li><a href="#%E5%9C%A8linux%E4%B8%8A%E6%9E%84%E5%BB%BAprofile">在linux上构建profile</a></li>
<li><a href="#%E7%BC%96%E8%AF%91%E5%90%8Ecompact%E5%A4%A7%E8%87%B4%E7%9A%84%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4">编译后compact大致的占用空间</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<p>Oracle公司如期发布了Java 8正式版！没有让广大javaer失望。对于一个人来说，18岁是人生的转折点，从稚嫩走向成熟，法律意味着你是完全民事行为能力人，不再收益于未成年人保护法，到今年为止，java也走过了18年，java8是一个新的里程碑，带来了前所未有的诸多特性，lambda表达式，Stream API，新的Date time api，多核并发支持，重大安全问题改进等，相信java会越来越好，丰富的类库以及庞大的开源生态环境是其他语言所不具备的，说起丰富的类库，很多同学就吐槽了，java该减肥了，确实是该减肥，java8有个很好的特性，即JEP161(<a href="http://openjdk.java.net/jeps/161" target="_blank" rel="noopener noreferrer">http://openjdk.java.net/jeps/161</a> ),该特性定义了Java SE平台规范的一些子集，使java应用程序不需要整个JRE平台即可部署和运行在小型设备上。开发人员可以基于目标硬件的可用资源选择一个合适的JRE运行环境。</p>
<h2><a class="header-anchor" href="#jre精简好处"><span></span></a><a href="#jre%E7%B2%BE%E7%AE%80%E5%A5%BD%E5%A4%84">#</a> JRE精简好处</h2>
<ul>
<li>更小的Java环境需要更少的计算资源。</li>
<li>一个较小的运行时环境可以更好的优化性能和启动时间。</li>
<li>消除未使用的代码从安全的角度总是好的。</li>
<li>这些打包的应用程序可以下载速度更快。</li>
</ul>
<h2><a class="header-anchor" href="#概念"><span></span></a><a href="#%E6%A6%82%E5%BF%B5">#</a> 概念</h2>
<p>紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是compact1&lt;compact2&lt;compact3,他们包含的API如下图所示</p>
<p>使用javac根据profile编译应用程序</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">javac</span><span style="color:#98C379"> –bootclasspath,</span><span style="color:#98C379"> or</span><span style="color:#98C379"> javac</span><span style="color:#98C379"> –profile</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>如果不符合compact的api，则报错。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> javac</span><span style="color:#D19A66"> -profile</span><span style="color:#98C379"> compact2</span><span style="color:#98C379"> Test.java</span></span>
<span class="line"><span style="color:#61AFEF">Test.java:7:</span><span style="color:#98C379"> error:</span><span style="color:#98C379"> ThreadMXBean</span><span style="color:#98C379"> is</span><span style="color:#98C379"> not</span><span style="color:#98C379"> available</span><span style="color:#98C379"> in</span><span style="color:#98C379"> profile</span><span style="color:#98C379"> 'compact2'</span></span>
<span class="line"><span style="color:#61AFEF"> ThreadMXBean</span><span style="color:#98C379"> bean</span><span style="color:#98C379"> =</span><span style="color:#98C379"> ManagementFactory.getThreadMXBean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF"> ^</span></span>
<span class="line"><span style="color:#61AFEF">Test.java:7:</span><span style="color:#98C379"> error:</span><span style="color:#98C379"> ManagementFactory</span><span style="color:#98C379"> is</span><span style="color:#98C379"> not</span><span style="color:#98C379"> available</span><span style="color:#98C379"> in</span><span style="color:#98C379"> profile</span><span style="color:#98C379"> 'compact2'</span></span>
<span class="line"><span style="color:#61AFEF"> ThreadMXBean</span><span style="color:#98C379"> bean</span><span style="color:#98C379"> =</span><span style="color:#98C379"> ManagementFactory.getThreadMXBean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">                     ^</span></span>
<span class="line"><span style="color:#61AFEF">2</span><span style="color:#98C379"> errors</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jre-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#使用工具开发的效果"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E7%9A%84%E6%95%88%E6%9E%9C">#</a> 使用工具开发的效果</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jre-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#jdeps工具使用"><span></span></a><a href="#jdeps%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8">#</a> JDEPS工具使用</h3>
<p>java8新增一个工具，用来分析应用程序所依赖的profile，有三个参数比较常用 -p，-v，-r</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.Set</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.HashSet</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Deps</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">random</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">    Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">set</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#56B6C2">**************</span><span style="color:#E06C75"> PROFILE </span><span style="color:#56B6C2">********************</span></span>
<span class="line"><span style="color:#E06C75">jdeps </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">P</span><span style="color:#E5C07B"> Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#56B6C2">   &lt;</span><span style="color:#E06C75">unnamed</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#E06C75">                                            compact1</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          compact1</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          compact1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2">**************</span><span style="color:#E06C75"> VERBOSE </span><span style="color:#56B6C2">********************</span></span>
<span class="line"><span style="color:#E06C75">jdeps </span><span style="color:#56B6C2">-</span><span style="color:#E06C75">v </span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#61AFEF">   Deps</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">PrintStream</span><span style="color:#E06C75">                                </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Math</span><span style="color:#E06C75">                                     </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75">                                   </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">                                   </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">System</span><span style="color:#E06C75">                                   </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">HashSet</span><span style="color:#E06C75">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2">**************</span><span style="color:#E06C75"> RECURSIVE </span><span style="color:#56B6C2">********************</span></span>
<span class="line"><span style="color:#E06C75">jdeps </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B">R</span><span style="color:#E5C07B"> Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75"> </span></span>
<span class="line"><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#56B6C2">   &lt;</span><span style="color:#E06C75">unnamed</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Deps</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#E06C75">                                            </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#56B6C2">/</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#E5C07B">   javax</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">crypto</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">io</span><span style="color:#E06C75">                                            </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reflect</span><span style="color:#E06C75">                                  </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">net</span><span style="color:#E06C75">                                           </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nio</span><span style="color:#E06C75">                                           </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cert</span><span style="color:#E06C75">                                 </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">spec</span><span style="color:#E06C75">                                 </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">concurrent</span><span style="color:#E06C75">                               </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">regex</span><span style="color:#E06C75">                                    </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">zip</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">auth</span><span style="color:#E06C75">                                </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jca</span><span style="color:#E5C07B">                                   JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E5C07B">                                  JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">validator</span><span style="color:#E5C07B">                             JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">   javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">interfaces</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">math</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#E06C75">                                      </span></span>
<span class="line"><span style="color:#E5C07B">   javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">spec</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">lang</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">math</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">spec</span><span style="color:#E06C75">                                 </span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> java</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">util</span><span style="color:#E06C75">                                          </span></span>
<span class="line"><span style="color:#56B6C2">/</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#C678DD"> -&gt;</span><span style="color:#56B6C2"> /</span><span style="color:#E06C75">Library</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Java</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">JavaVirtualMachines</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jdk1</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">8</span><span style="color:#ABB2BF">.</span><span style="color:#FFFFFF">0</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jdk</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Contents</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">Home</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">jre</span><span style="color:#56B6C2">/</span><span style="color:#E06C75">lib</span><span style="color:#56B6C2">/</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span></span>
<span class="line"><span style="color:#E5C07B">   java</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">security</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#E5C07B">                                       JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">   sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">security</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">util</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">rt</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#E5C07B">                                       JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">interfaces</span><span style="color:#E5C07B">                            JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">      -&gt;</span><span style="color:#E5C07B"> javax</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">crypto</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">spec</span><span style="color:#E5C07B">                                  JDK</span><span style="color:#E06C75"> internal </span><span style="color:#61AFEF">API</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">jce</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">jar</span><span style="color:#E06C75">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#在linux上构建profile"><span></span></a><a href="#%E5%9C%A8linux%E4%B8%8A%E6%9E%84%E5%BB%BAprofile">#</a> 在linux上构建profile</h3>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> hg</span><span style="color:#98C379"> clone</span><span style="color:#98C379"> http://hg.openjdk.java.net/jdk8/jdk8/</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> cd</span><span style="color:#98C379"> jdk8</span></span>
<span class="line"><span style="color:#61AFEF">$</span><span style="color:#98C379"> make</span><span style="color:#98C379"> images</span><span style="color:#98C379"> profiles</span><span style="color:#98C379"> :</span><span style="color:#ABB2BF"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"># Finished profiles (build time 00:00:27)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jre-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 JavaFx 2.0</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JavaFx%202.0.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20JavaFx%202.0.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 JavaFx 2.0</source>
      <description>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。与android这方面确实有点相似性。@pdai Java8 JavaFx 2.0...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。与android这方面确实有点相似性。@pdai</p>
</blockquote>
<ul>
<li>Java8 JavaFx 2.0
<ul>
<li><a href="#javafx%E5%8E%86%E5%8F%B2">JavaFX历史</a></li>
<li>JavaFx8的新特性
<ul>
<li><a href="#%E5%85%A8%E6%96%B0%E7%8E%B0%E4%BB%A3%E4%B8%BB%E9%A2%98modena">全新现代主题: Modena</a></li>
<li><a href="#javafx-3d">JavaFX 3D</a></li>
<li><a href="#%E5%AF%8C%E6%96%87%E6%9C%AC">富文本</a></li>
<li><a href="#treetableview">TreeTableView</a></li>
<li><a href="#%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6datepicker">日期控件DatePicker</a></li>
<li><a href="#%E7%94%A8%E4%BA%8E-css-%E7%BB%93%E6%9E%84%E7%9A%84%E5%85%AC%E5%85%B1-api">用于 CSS 结构的公共 API</a></li>
<li><a href="#webview-%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD">WebView 增强功能</a></li>
<li><a href="#javafx-scene-builder-20">JavaFX Scene Builder 2.0</a></li>
</ul>
</li>
<li><a href="#javafx-8%E5%BC%80%E5%8F%912048%E6%B8%B8%E6%88%8F">JavaFX 8开发2048游戏</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#javafx历史"><span></span></a><a href="#javafx%E5%8E%86%E5%8F%B2">#</a> JavaFX历史</h2>
<p>跟java在服务器端和web端成绩相比，桌面一直是java的软肋，于是Sun公司在2008年推出JavaFX，弥补桌面软件的缺陷，请看下图JavaFX一路走过来的改进</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-javafx-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上图看出，一开始推出时候，开发者需使用一种名为JavaFX Script的静态的、声明式的编程语言来开发JavaFX应用程序。因为JavaFX Script将会被编译为Java bytecode，程序员可以使用Java代码代替。</p>
<p>JavaFX 2.0之后的版本摒弃了JavaFX Script语言，而作为一个Java API来使用。因此使用JavaFX平台实现的应用程序将直接通过标准Java代码来实现。</p>
<p>JavaFX 2.0 包含非常丰富的 UI 控件、图形和多媒体特性用于简化可视化应用的开发，WebView可直接在应用中嵌入网页；另外 2.0 版本允许使用 FXML 进行 UI 定义，这是一个脚本化基于 XML 的标识语言。</p>
<p>从JDK 7u6开始，JavaFx就与JDK捆绑在一起了，JavaFX团队称，下一个版本将是8.0，目前所有的工作都已经围绕8.0库进行。这是因为JavaFX将捆绑在Java 8中，因此该团队决定跳过几个版本号，迎头赶上Java 8。</p>
<h2><a class="header-anchor" href="#javafx8的新特性"><span></span></a><a href="#javafx8%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">#</a> JavaFx8的新特性</h2>
<h4><a class="header-anchor" href="#全新现代主题-modena"><span></span></a><a href="#%E5%85%A8%E6%96%B0%E7%8E%B0%E4%BB%A3%E4%B8%BB%E9%A2%98-modena">#</a> 全新现代主题: Modena</h4>
<p>新的Modena主题来替换原来的Caspian主题。不过在Application的start()方法中，可以通过setUserAgentStylesheet(STYLESHEET_CASPIAN)来继续使用Caspian主题。</p>
<p>参考<a href="http://fxexperience.com/2013/03/modena-theme-update/" target="_blank" rel="noopener noreferrer">http://fxexperience.com/2013/03/modena-theme-update/</a></p>
<h4><a class="header-anchor" href="#javafx-3d"><span></span></a><a href="#javafx-3d">#</a> JavaFX 3D</h4>
<p>在JavaFX8中提供了3D图像处理API，包括Shape3D (Box, Cylinder, MeshView, Sphere子类),SubScene, Material, PickResult, LightBase (AmbientLight 和PointLight子类),SceneAntialiasing等。Camera类也得到了更新。从JavaDoc中可以找到更多信息。</p>
<h4><a class="header-anchor" href="#富文本"><span></span></a><a href="#%E5%AF%8C%E6%96%87%E6%9C%AC">#</a> 富文本</h4>
<p>强化了富文本的支持</p>
<h4><a class="header-anchor" href="#treetableview"><span></span></a><a href="#treetableview">#</a> TreeTableView</h4>
<h4><a class="header-anchor" href="#日期控件datepicker"><span></span></a><a href="#%E6%97%A5%E6%9C%9F%E6%8E%A7%E4%BB%B6datepicker">#</a> 日期控件DatePicker</h4>
<p>增加日期控件</p>
<h4><a class="header-anchor" href="#用于-css-结构的公共-api"><span></span></a><a href="#%E7%94%A8%E4%BA%8E-css-%E7%BB%93%E6%9E%84%E7%9A%84%E5%85%AC%E5%85%B1-api">#</a> 用于 CSS 结构的公共 API</h4>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">CSS 样式设置是 JavaFX 的一项主要特性</span></span>
<span class="line"><span style="color:#E06C75">CSS 已专门在私有 API 中实现(</span><span style="color:#E5C07B">com</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">sun</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">javafx</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">css</span><span style="color:#E06C75"> 软件包)</span></span>
<span class="line"><span style="color:#E06C75">多种工具(例如 </span><span style="color:#E5C07B">Scene</span><span style="color:#E06C75"> Builder)需要 CSS 公共 </span><span style="color:#E5C07B">API</span></span>
<span class="line"><span style="color:#E06C75">开发人员将能够定义自定义 CSS 样式</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#webview-增强功能"><span></span></a><a href="#webview-%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD">#</a> WebView 增强功能</h4>
<ul>
<li>Nashorn JavaScript 引擎 <a href="https://blogs.oracle.com/nashorn/entry/open_for_business" target="_blank" rel="noopener noreferrer">https://blogs.oracle.com/nashorn/entry/open_for_business</a></li>
<li>WebSocket <a href="http://javafx-jira.kenai.com/browse/RT-14947" target="_blank" rel="noopener noreferrer">http://javafx-jira.kenai.com/browse/RT-14947</a></li>
<li>Web Workers <a href="http://javafx-jira.kenai.com/browse/RT-9782" target="_blank" rel="noopener noreferrer">http://javafx-jira.kenai.com/browse/RT-9782</a></li>
</ul>
<h4><a class="header-anchor" href="#javafx-scene-builder-2-0"><span></span></a><a href="#javafx-scene-builder-2-0">#</a> JavaFX Scene Builder 2.0</h4>
<p>可视化工具，加速JavaFX图形界面的开发，下载地址</p>
<p>JavaFX Scene Builder如同NetBeans一般，通过拖拽的方式配置界面，待完成界面之後，保存为FXML格式文件，此文件以XML描述物件配置，再交由JavaFX程式处理，因此可減少直接以JavaFX编写界面的困難度。</p>
<p>JavaFX Scene Builder 2.0新增JavaFX Theme预览功能，菜单「Preview」→「JavaFX Theme」选择不同的主題，包括:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">Modena</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#61AFEF"> Touch</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#E5C07B"> High</span><span style="color:#E06C75"> Contrast – </span><span style="color:#E5C07B">Black</span><span style="color:#E06C75"> on </span><span style="color:#61AFEF">White</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#E5C07B"> High</span><span style="color:#E06C75"> Contrast – </span><span style="color:#E5C07B">White</span><span style="color:#E06C75"> on </span><span style="color:#61AFEF">Black</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Modena</span><span style="color:#E5C07B"> High</span><span style="color:#E06C75"> Contrast – </span><span style="color:#E5C07B">Yellow</span><span style="color:#E06C75"> on </span><span style="color:#61AFEF">Black</span><span style="color:#E06C75"> (FX8)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#61AFEF">Caspian</span><span style="color:#E06C75"> (FX2)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Caspian</span><span style="color:#61AFEF"> Embedded</span><span style="color:#E06C75"> (FX2)</span><span style="color:#ABB2BF">.</span></span>
<span class="line"><span style="color:#E5C07B">Caspian</span><span style="color:#E5C07B"> Embedded</span><span style="color:#61AFEF"> QVGA</span><span style="color:#E06C75"> (FX2)</span><span style="color:#ABB2BF">.</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#javafx-8开发2048游戏"><span></span></a><a href="#javafx-8%E5%BC%80%E5%8F%912048%E6%B8%B8%E6%88%8F">#</a> JavaFX 8开发2048游戏</h2>
<p>2048虽然不像前段时间那么火了，但个人还是非常喜欢玩2048，空闲时间都忍不住来一发，感谢 Gabriele Cirulli 发明了这了不起 (并且会上瘾)的2048游戏，因为是用MIT协议开源出来，各种语言版本的2048游戏横空出世，下图是用JavaFX 8来开发的一款2048。</p>
<p>所用到的技术</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Lambda</span><span style="color:#E06C75"> expressions</span></span>
<span class="line"><span style="color:#E5C07B">Stream</span><span style="color:#E5C07B"> API</span></span>
<span class="line"><span style="color:#E06C75">JavaFX </span><span style="color:#D19A66">8</span></span>
<span class="line"><span style="color:#E5C07B">JavaFX</span><span style="color:#E5C07B"> CSS</span><span style="color:#E06C75"> basics</span></span>
<span class="line"><span style="color:#E5C07B">JavaFX</span><span style="color:#E06C75"> animationsfx2048相关类的说明</span></span>
<span class="line"><span style="color:#E06C75">Game2048</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">游戏主类</span></span>
<span class="line"><span style="color:#E06C75">GameManager</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">包含游戏界面布局(Board)以及</span><span style="color:#61AFEF">Grid的操作</span><span style="color:#E06C75">(GridOperator)</span></span>
<span class="line"><span style="color:#E06C75">Board</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">包含labels ，分数，grid ，</span><span style="color:#E5C07B">Tile</span></span>
<span class="line"><span style="color:#E06C75">Tile</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">游戏中的数字块</span></span>
<span class="line"><span style="color:#E06C75">GridOperator</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Grid操作类</span></span>
<span class="line"><span style="color:#E06C75">Location</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">Direction 位置帮助类</span></span>
<span class="line"><span style="color:#E06C75">RecordManager，SessionManager，纪录游戏分数，会话类</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是源码地址，<a href="http://xn--git-y28d6owz84kksflna244b34fk1ap82c3u4eyqyd.oschina.net/benhail/javase8-sample/tree/master/src/main/java/javase8sample/chapter13/javafx8/fx2048" target="_blank" rel="noopener noreferrer">大家感兴趣的可以去学习下git.oschina.net/benhail/javase8-sample/tree/master/src/main/java/javase8sample/chapter13/javafx8/fx2048</a></p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>比起AWT和SWING，JavaFX的优势很明显，各大主流IDE已经支持JavaFX的开发了，最佳的工具莫过于NetBeans，且随着lambda带来的好处，JavaFX的事件处理简洁了不少，以前需要写匿名函数类。另外JavaFX开源以来，JavaFX的生态环境也越来越活跃了，包括各种教程，嵌入式尝试，还有一些开源项目，比如: ControlsFX，JRebirth，DataFX Flow，mvvmFX，TestFX 等等。还有JavaFX是可以运行在Android和ios上面，这个很赞！</p>
<p>好了，总结到这里也差不多了，在RIA平台上面，有HTML5、Flex和微软的Sliverlight，JavaFX能否表现优秀，在于大家的各位，只要我们多用JavaFX，那么JavaFX也会越来越优秀，任何语言都是这样, THE END .</p>
<h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-javafx-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 LocalDate&amp;LocalDateTime</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20LocalDate_LocalDateTime.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20LocalDate_LocalDateTime.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 LocalDate&amp;LocalDateTime</source>
      <description>理解时间和日期库需要理解如下问题: Java8之前的Date有哪些槽点? Java8之前使用哪些常用的第三方时间库? Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么? 其它语言时间库? Java8 LocalDate&amp;LocalDateTime Java8之前的Date有哪些槽点 槽点一 槽点二 槽点三 槽点四 Java8时间...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解时间和日期库需要理解如下问题:</p>
<ul>
<li>Java8之前的Date有哪些槽点?</li>
<li>Java8之前使用哪些常用的第三方时间库?</li>
<li>Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?</li>
<li>其它语言时间库?</li>
</ul>
</blockquote>
<ul>
<li>Java8 LocalDate&amp;LocalDateTime
<ul>
<li>Java8之前的Date有哪些槽点
<ul>
<li><a href="#%E6%A7%BD%E7%82%B9%E4%B8%80">槽点一</a></li>
<li><a href="#%E6%A7%BD%E7%82%B9%E4%BA%8C">槽点二</a></li>
<li><a href="#%E6%A7%BD%E7%82%B9%E4%B8%89">槽点三</a></li>
<li><a href="#%E6%A7%BD%E7%82%B9%E5%9B%9B">槽点四</a></li>
</ul>
</li>
<li>Java8时间和日期
<ul>
<li><a href="#%E7%B1%BB%E6%A6%82%E8%A7%88">类概览</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E6%A6%82%E8%A7%88">方法概览</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E6%97%B6%E9%97%B4">其它语言时间</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java8之前的date有哪些槽点"><span></span></a><a href="#java8%E4%B9%8B%E5%89%8D%E7%9A%84date%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A7%BD%E7%82%B9">#</a> Java8之前的Date有哪些槽点</h2>
<blockquote>
<p>Tiago Fernandez做过一次投票，选举最烂的JAVA API，排第一的EJB2.X，第二的就是日期API。</p>
</blockquote>
<h4><a class="header-anchor" href="#槽点一"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E4%B8%80">#</a> 槽点一</h4>
<p>最开始的时候，Date既要承载日期信息，又要做日期之间的转换，还要做不同日期格式的显示，职责较繁杂(不懂单一职责，你妈妈知道吗? 纯属恶搞~哈哈)</p>
<p>后来从JDK 1.1 开始，这三项职责分开了:</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">使用Calendar类实现日期和时间字段之间转换；</span></span>
<span class="line"><span style="color:#61AFEF">使用DateFormat类来格式化和分析日期字符串；</span></span>
<span class="line"><span style="color:#61AFEF">而Date只用来承载日期和时间信息。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原有Date中的相应方法已废弃。不过，无论是Date，还是Calendar，都用着太不方便了，这是API没有设计好的地方。</p>
<h4><a class="header-anchor" href="#槽点二"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E4%BA%8C">#</a> 槽点二</h4>
<p>坑爹的year和month</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Date</span><span style="color:#E06C75"> date </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Date</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2012</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(date);</span></span>
<span class="line"><span style="color:#E06C75">输出Thu Feb </span><span style="color:#D19A66">01</span><span style="color:#D19A66"> 00</span><span style="color:#C678DD">:</span><span style="color:#D19A66">00</span><span style="color:#C678DD">:</span><span style="color:#D19A66">00</span><span style="color:#E06C75"> CST </span><span style="color:#D19A66">3912</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察输出结果，year是2012+1900，而month，月份参数我不是给了1吗? 怎么输出二月(Feb)了?</p>
<p>应该曾有人告诉你，如果你要设置日期，应该使用 java.util.Calendar，像这样…</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Calendar</span><span style="color:#E06C75"> calendar </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">8</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写又不对了，calendar的month也是从0开始的，表达8月份应该用7这个数字，要么就干脆用枚举</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">AUGUST</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>注意上面的代码，Calendar年份的传值不需要减去1900(当然月份的定义和Date还是一样)，这种不一致真是让人抓狂！</p>
<p>有些人可能知道，Calendar相关的API是IBM捐出去的，所以才导致不一致。</p>
<h4><a class="header-anchor" href="#槽点三"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E4%B8%89">#</a> 槽点三</h4>
<p>java.util.Date与java.util.Calendar中的所有属性都是可变的</p>
<p>下面的代码，计算两个日期之间的天数….</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B">    Calendar</span><span style="color:#E06C75"> birth </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    birth</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">set</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1975</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAY</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">26</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    Calendar</span><span style="color:#E06C75"> now </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getInstance</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">daysBetween</span><span style="color:#ABB2BF">(birth, now));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">daysBetween</span><span style="color:#ABB2BF">(birth, now));</span><span style="color:#7F848E;font-style:italic"> // 显示 0? </span></span>
<span class="line"><span style="color:#E06C75"> }  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> daysBetween</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#E06C75"> begin</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Calendar</span><span style="color:#E06C75"> end) {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> daysBetween </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">begin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">before</span><span style="color:#ABB2BF">(end)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        begin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DAY_OF_MONTH</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        daysBetween</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> daysBetween</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>daysBetween有点问题，如果连续计算两个Date实例的话，第二次会取得0，因为Calendar状态是可变的，考虑到重复计算的场合，最好复制一个新的Calendar</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> daysBetween</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#E06C75"> begin</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Calendar</span><span style="color:#E06C75"> end) {</span></span>
<span class="line"><span style="color:#E5C07B">    Calendar</span><span style="color:#E06C75"> calendar </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Calendar) </span><span style="color:#E5C07B">begin</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clone</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> // 复制</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> daysBetween </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">before</span><span style="color:#ABB2BF">(end)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        calendar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Calendar</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">DAY_OF_MONTH</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        daysBetween</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> daysBetween</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#槽点四"><span></span></a><a href="#%E6%A7%BD%E7%82%B9%E5%9B%9B">#</a> 槽点四</h4>
<p>SimpleDateTimeFormat是非线程安全的。</p>
<h2><a class="header-anchor" href="#java8时间和日期"><span></span></a><a href="#java8%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F">#</a> Java8时间和日期</h2>
<h3><a class="header-anchor" href="#类概览"><span></span></a><a href="#%E7%B1%BB%E6%A6%82%E8%A7%88">#</a> 类概览</h3>
<p>Java 8仍然延用了ISO的日历体系，并且与它的前辈们不同，java.time包中的类是不可变且线程安全的。新的时间及日期API位于java.time包中，下面是里面的一些关键的类:</p>
<ul>
<li>Instant——它代表的是时间戳</li>
<li>LocalDate——不包含具体时间的日期，比如2014-01-14。它可以用来存储生日，周年纪念日，入职日期等。</li>
<li>LocalTime——它代表的是不含日期的时间</li>
<li>LocalDateTime——它包含了日期及时间，不过还是没有偏移信息或者说时区。</li>
<li>ZonedDateTime——这是一个包含时区的完整的日期时间，偏移量是以UTC/格林威治时间为基准的。</li>
</ul>
<p>新的库还增加了ZoneOffset及Zoned，可以为时区提供更好的支持。有了新的DateTimeFormatter之后日期的解析及格式化也变得焕然一新了。</p>
<h3><a class="header-anchor" href="#方法概览"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E6%A6%82%E8%A7%88">#</a> 方法概览</h3>
<p>该包的API提供了大量相关的方法，这些方法一般有一致的方法前缀:</p>
<ul>
<li>of: 静态工厂方法。</li>
<li>parse: 静态工厂方法，关注于解析。</li>
<li>get: 获取某些东西的值。</li>
<li>is: 检查某些东西的是否是true。</li>
<li>with: 不可变的setter等价物。</li>
<li>plus: 加一些量到某个对象。</li>
<li>minus: 从某个对象减去一些量。</li>
<li>to: 转换到另一个类型。</li>
<li>at: 把这个对象与另一个对象组合起来，例如: date.atTime(time)。</li>
</ul>
<h2><a class="header-anchor" href="#一些例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TimeIntroduction</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testClock</span><span style="color:#ABB2BF">()</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //时钟提供给我们用于访问某个特定 时区的 瞬时时间、日期 和 时间的。  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemUTC</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//系统默认UTC时钟(当前瞬时时间 System.currentTimeMillis())  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//每次调用将返回当前瞬时时间(UTC)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemDefaultZone</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//系统默认时区时钟(当前瞬时时间)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c31</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">system</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Europe/Paris"</span><span style="color:#ABB2BF">)); </span><span style="color:#7F848E;font-style:italic">//巴黎时区  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c31</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//每次调用将返回当前瞬时时间(UTC)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c32</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">system</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Asia/Shanghai"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//上海时区  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c32</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//每次调用将返回当前瞬时时间(UTC)  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c4</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fixed</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Asia/Shanghai"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//固定上海时区时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c4</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//不变 即时钟时钟在那一个点不动  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> c5</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">offset</span><span style="color:#ABB2BF">(c1, </span><span style="color:#E5C07B">Duration</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofSeconds</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">)); </span><span style="color:#7F848E;font-style:italic">//相对于系统默认时钟两秒的时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">c5</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">millis</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testInstant</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //瞬时时间 相当于以前的System.currentTimeMillis()  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEpochSecond</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//精确到秒 得到相对于1970-01-01 00:00:00 UTC的一个时间  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant1</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toEpochMilli</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//精确到毫秒  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> clock1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemUTC</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获取系统UTC默认时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(clock1);</span><span style="color:#7F848E;font-style:italic">//得到时钟的瞬时时间  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant2</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toEpochMilli</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> clock2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">fixed</span><span style="color:#ABB2BF">(instant1, </span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemDefault</span><span style="color:#ABB2BF">()); </span><span style="color:#7F848E;font-style:italic">//固定瞬时时间时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant3</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(clock2);</span><span style="color:#7F848E;font-style:italic">//得到时钟的瞬时时间  </span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">instant3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toEpochMilli</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//equals instant1  </span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> testLocalDateTime</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //使用默认时区时钟瞬时时间创建 Clock.systemDefaultZone() --&gt;即相对于 ZoneId.systemDefault()默认时区  </span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> now</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(now);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//自定义时区  </span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> now2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Europe/Paris"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(now2);</span><span style="color:#7F848E;font-style:italic">//会以相应的时区显示日期  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//自定义时钟  </span></span>
<span class="line"><span style="color:#E5C07B">        Clock</span><span style="color:#E06C75"> clock</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Clock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">system</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Asia/Dhaka"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> now3</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(clock);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(now3);</span><span style="color:#7F848E;font-style:italic">//会以相应的时区显示日期  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//不需要写什么相对时间 如java.util.Date 年是相对于1900 月是从0开始  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//2013-12-31 23:59  </span></span>
<span class="line"><span style="color:#ABB2BF">		</span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> d1</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">12</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">31</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">23</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">59</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//年月日 时分秒 纳秒  </span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> d2</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2013</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">12</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">31</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">23</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">59</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">59</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">11</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//使用瞬时时间 + 时区  </span></span>
<span class="line"><span style="color:#E5C07B">        Instant</span><span style="color:#E06C75"> instant</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        LocalDateTime</span><span style="color:#E06C75"> d3</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> LocalDateTime</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofInstant</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Instant</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">now</span><span style="color:#ABB2BF">(), </span><span style="color:#E5C07B">ZoneId</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">systemDefault</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(d3);</span></span>
<span class="line"><span style="color:#ABB2BF">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">		//解析String</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java8 Optional类深度解析</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20Optional%E7%B1%BB%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20Optional%E7%B1%BB%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 Optional类深度解析</source>
      <description>对Java 8 Optional类进行深度解析。 Java 8 - Optional类深度解析 Optional类包含的方法 of ofNullable isPresent get ifPresent orElse orElseGet orElseThrow map flatMap filter 一些例子 参考 身为一名Java程序员，大家可能都有这样...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>对Java 8 Optional类进行深度解析。</p>
</blockquote>
<ul>
<li>Java 8 - Optional类深度解析
<ul>
<li>Optional类包含的方法
<ul>
<li><a href="#of">of</a></li>
<li><a href="#ofnullable">ofNullable</a></li>
<li><a href="#ispresent">isPresent</a></li>
<li><a href="#get">get</a></li>
<li><a href="#ifpresent">ifPresent</a></li>
<li><a href="#orelse">orElse</a></li>
<li><a href="#orelseget">orElseGet</a></li>
<li><a href="#orelsethrow">orElseThrow</a></li>
<li><a href="#map">map</a></li>
<li><a href="#flatmap">flatMap</a></li>
<li><a href="#filter">filter</a></li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>身为一名Java程序员，大家可能都有这样的经历: 调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。这正是一些类似Guava的外部API试图解决的问题。一些JVM编程语言比如Scala、Ceylon等已经将对在核心API中解决了这个问题。在我的前一篇文章中，介绍了Scala是如何解决了这个问题。</p>
</blockquote>
<p>新版本的Java，比如Java 8引入了一个新的Optional类。Optional类的Javadoc描述如下:</p>
<blockquote>
<p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
</blockquote>
<h2><a class="header-anchor" href="#optional类包含的方法"><span></span></a><a href="#optional%E7%B1%BB%E5%8C%85%E5%90%AB%E7%9A%84%E6%96%B9%E6%B3%95">#</a> Optional类包含的方法</h2>
<h3><a class="header-anchor" href="#of"><span></span></a><a href="#of">#</a> of</h3>
<blockquote>
<p>为非null的值创建一个Optional。</p>
</blockquote>
<p>of方法通过工厂方法创建Optional类。需要注意的是，创建对象时传入的参数不能为null。如果传入参数为null，则抛出NullPointerException 。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//调用工厂方法创建Optional实例</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> name </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sanaulla"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//传入参数为null，抛出NullPointerException.</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> someNull </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#ofnullable"><span></span></a><a href="#ofnullable">#</a> ofNullable</h3>
<blockquote>
<p>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。</p>
</blockquote>
<p>ofNullable与of方法相似，唯一的区别是可以接受参数为null的情况。示例如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//下面创建了一个不包含任何值的Optional实例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//例如，值为'null'</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#E06C75"> empty </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofNullable</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#ispresent"><span></span></a><a href="#ispresent">#</a> isPresent</h3>
<p>非常容易理解</p>
<blockquote>
<p>如果值存在返回true，否则返回false。</p>
</blockquote>
<p>类似下面的代码:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//isPresent方法用来检查Optional实例中是否包含值</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPresent</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //在Optional实例内调用get()返回已存在的值</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span><span style="color:#7F848E;font-style:italic">//输出Sanaulla</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get</h3>
<blockquote>
<p>如果Optional有值则将其返回，否则抛出NoSuchElementException。</p>
</blockquote>
<p>上面的示例中，get方法用来得到Optional实例中的值。下面我们看一个抛出NoSuchElementException的例子:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//执行下面的代码会输出: No value present </span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //在空的Optional实例上调用get()，抛出NoSuchElementException</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NoSuchElementException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#ifpresent"><span></span></a><a href="#ifpresent">#</a> ifPresent</h3>
<blockquote>
<p>如果Optional实例有值则为其调用consumer，否则不做处理</p>
</blockquote>
<p>要理解ifPresent方法，首先需要了解Consumer类。简答地说，Consumer类包含一个抽象方法。该抽象方法对传入的值进行处理，但没有返回值。Java8支持不用接口直接通过lambda表达式传入参数。</p>
<p>如果Optional实例有值，调用ifPresent()可以接受接口段或lambda表达式。类似下面的代码:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//ifPresent方法接受lambda表达式作为参数。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//lambda表达式对Optional的值调用consumer进行处理。</span></span>
<span class="line"><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The length of the value is: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">});</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#orelse"><span></span></a><a href="#orelse">#</a> orElse</h3>
<blockquote>
<p>如果有值则将其返回，否则返回指定的其它值。</p>
</blockquote>
<p>如果Optional实例有值则将其返回，否则返回orElse方法传入的参数。示例如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//如果值不为null，orElse方法返回Optional实例的值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//如果为null，返回传入的消息。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: There is no value present!</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is no value present!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: Sanaulla</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is some value!"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#orelseget"><span></span></a><a href="#orelseget">#</a> orElseGet</h3>
<blockquote>
<p>orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值。示例如下:</p>
</blockquote>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//orElseGet与orElse方法类似，区别在于orElse传入的是默认值，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//orElseGet可以接受一个lambda表达式生成默认值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: Default Value</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: Sanaulla</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#orelsethrow"><span></span></a><a href="#orelsethrow">#</a> orElseThrow</h3>
<blockquote>
<p>如果有值则将其返回，否则抛出supplier接口创建的异常。</p>
</blockquote>
<p>在orElseGet方法中，我们传入一个Supplier接口。然而，在orElseThrow中我们可以传入一个lambda表达式或方法，如果值不存在来抛出异常。示例如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //orElseThrow与orElse方法类似。与返回默认值不同，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //orElseThrow会抛出lambda表达式或方法生成的异常 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">  empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseThrow</span><span style="color:#ABB2BF">(ValueAbsentException</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //输出: No value present in the Optional instance</span></span>
<span class="line"><span style="color:#E5C07B">  System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ValueAbsentException定义如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> ValueAbsentException</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Throwable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> ValueAbsentException</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#61AFEF"> ValueAbsentException</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> msg</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    super</span><span style="color:#ABB2BF">(msg);</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">  @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> getMessage</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#98C379"> "No value present in the Optional instance"</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#map"><span></span></a><a href="#map">#</a> map</h3>
<p>map方法文档说明如下:</p>
<blockquote>
<p>如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</p>
</blockquote>
<p>map方法用来对Optional实例的值执行一系列操作。通过一组实现了Function接口的lambda表达式传入操作。如果你不熟悉Function接口，可以参考我的这篇博客。map方法示例如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//map方法执行传入的lambda表达式参数对Optional实例的值进行修改。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//为lambda表达式的返回值创建新的Optional实例作为map方法的返回值。</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> upperName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#flatmap"><span></span></a><a href="#flatmap">#</a> flatMap</h3>
<blockquote>
<p>如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map(Funtion)方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</p>
</blockquote>
<p>flatMap方法与map方法类似，区别在于mapping函数的返回值不同。map方法的mapping函数返回值可以是任何类型T，而flatMap方法的mapping函数必须是Optional。</p>
<p>参照map函数，使用flatMap重写的示例如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//flatMap与map(Function)非常类似，区别在于传入方法的lambda表达式的返回类型。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//map方法中的lambda表达式返回值可以是任意类型，在map函数返回之前会包装为Optional。 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//但flatMap方法中的lambda表达式返回值必须是Optionl实例。 </span></span>
<span class="line"><span style="color:#E06C75">upperName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flatMap</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//输出SANAULLA</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#filter"><span></span></a><a href="#filter">#</a> filter</h3>
<p>filter个方法通过传入限定条件对Optional实例的值进行过滤。文档描述如下:</p>
<blockquote>
<p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</p>
</blockquote>
<p>读到这里，可能你已经知道如何为filter方法传入一段代码。是的，这里可以传入一个lambda表达式。对于filter函数我们应该传入实现了Predicate接口的lambda表达式。如果你不熟悉Predicate接口，可以参考这篇文章。</p>
<p>现在我来看看filter的各种用法，下面的示例介绍了满足限定条件和不满足两种情况:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//filter方法检查给定的Option值是否满足某些条件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//如果满足则返回同一个Option实例，否则返回空Optional。</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> longName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">longName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic">//输出Sanaulla</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//另一个例子是Optional值不满足filter指定的条件。</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> anotherName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sana"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> shortName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> anotherName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//输出: name长度不足6字符</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">shortName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#一些例子"><span></span></a><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</h2>
<ul>
<li>一个综合例子</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OptionalDemo</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //创建Optional实例，也可以通过方法返回值得到。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">name</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sanaulla"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //创建没有值的Optional实例，例如值为'null'</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#E06C75"> empty</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofNullable</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //isPresent方法用来检查Optional实例是否有值。</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isPresent</span><span style="color:#ABB2BF">()) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //调用get()返回Optional值。</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //在Optional实例上调用get()抛出NoSuchElementException。</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">NoSuchElementException</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //ifPresent方法接受lambda表达式参数。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //如果Optional值不为空，lambda表达式会处理并在其上执行操作。</span></span>
<span class="line"><span style="color:#E5C07B">    name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The length of the value is: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //如果有值orElse方法会返回Optional实例，否则返回传入的错误信息。</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is no value present!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"There is some value!"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //orElseGet与orElse类似，区别在于传入的默认值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //orElseGet接受lambda表达式生成默认值。</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseGet</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#98C379"> "Default Value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //orElseThrow与orElse方法类似，区别在于返回值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      //orElseThrow抛出由传入的lambda表达式/方法生成异常。</span></span>
<span class="line"><span style="color:#E5C07B">      empty</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElseThrow</span><span style="color:#ABB2BF">(ValueAbsentException</span><span style="color:#C678DD">::new</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Throwable</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">      System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">ex</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //map方法通过传入的lambda表达式修改Optonal实例默认值。 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //lambda表达式返回值会包装为Optional实例。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">upperName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //flatMap与map(Funtion)非常相似，区别在于lambda表达式的返回值。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //map方法的lambda表达式返回值可以是任何类型，但是返回值会包装成Optional实例。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //但是flatMap方法的lambda返回值总是Optional类型。</span></span>
<span class="line"><span style="color:#ABB2BF">    upperName </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">flatMap</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUpperCase</span><span style="color:#ABB2BF">()));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">upperName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"No value found"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //filter方法检查Optiona值是否满足给定条件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //如果满足返回Optional实例值，否则返回空Optional。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">longName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> name</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">longName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //另一个示例，Optional值不满足给定条件。</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">anotherName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Sana"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    Optional</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">shortName</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> anotherName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">((value) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">length</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 6</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">shortName</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">orElse</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"The name is less than 6 characters"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码输出如下:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">No</span><span style="color:#98C379"> value</span><span style="color:#98C379"> present</span></span>
<span class="line"><span style="color:#61AFEF">The</span><span style="color:#98C379"> length</span><span style="color:#98C379"> of</span><span style="color:#98C379"> the</span><span style="color:#98C379"> value</span><span style="color:#98C379"> is:</span><span style="color:#D19A66"> 8</span></span>
<span class="line"><span style="color:#61AFEF">There</span><span style="color:#98C379"> is</span><span style="color:#98C379"> no</span><span style="color:#98C379"> value</span><span style="color:#98C379"> present!</span></span>
<span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">Default</span><span style="color:#98C379"> Value</span></span>
<span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">No</span><span style="color:#98C379"> value</span><span style="color:#98C379"> present</span><span style="color:#98C379"> in</span><span style="color:#98C379"> the</span><span style="color:#98C379"> Optional</span><span style="color:#98C379"> instance</span></span>
<span class="line"><span style="color:#61AFEF">SANAULLA</span></span>
<span class="line"><span style="color:#61AFEF">SANAULLA</span></span>
<span class="line"><span style="color:#61AFEF">Sanaulla</span></span>
<span class="line"><span style="color:#61AFEF">The</span><span style="color:#98C379"> name</span><span style="color:#98C379"> is</span><span style="color:#98C379"> less</span><span style="color:#98C379"> than</span><span style="color:#D19A66"> 6</span><span style="color:#98C379"> characters</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>在 Java 8 中提高 Null 的安全性</li>
</ul>
<p>假设我们有一个像这样的类层次结构:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Outer</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Nested</span><span style="color:#E06C75"> nested</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Nested</span><span style="color:#61AFEF"> getNested</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> nested;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Nested</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Inner</span><span style="color:#E06C75"> inner</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Inner</span><span style="color:#61AFEF"> getInner</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> inner;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Inner</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> foo</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#61AFEF"> getFoo</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> foo;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决这种结构的深层嵌套路径是有点麻烦的。我们必须编写一堆 null 检查来确保不会导致一个 NullPointerException:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Outer</span><span style="color:#E06C75"> outer </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Outer</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">if</span><span style="color:#E06C75"> (outer </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> outer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nested</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> outer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nested</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inner</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">outer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">nested</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">inner</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">foo</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过利用 Java 8 的 Optional 类型来摆脱所有这些 null 检查。map 方法接收一个 Function 类型的 lambda 表达式，并自动将每个 function 的结果包装成一个 Optional 对象。这使我们能够在一行中进行多个 map 操作。Null 检查是在底层自动处理的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Outer</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Outer</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getNested)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Nested</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getInner)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Inner</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">getFoo)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种实现相同作用的方式就是通过利用一个 supplier 函数来解决嵌套路径的问题:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Outer</span><span style="color:#E06C75"> obj </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Outer</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">resolve</span><span style="color:#E06C75">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> obj</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getNested</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getInner</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getFoo</span><span style="color:#ABB2BF">()</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">ifPresent</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 obj.getNested().getInner().getFoo()) 可能会抛出一个 NullPointerException 异常。在这种情况下，该异常将会被捕获，而该方法会返回 Optional.empty()。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> Optional</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> resolve</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Supplier</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">T</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> resolver) {</span></span>
<span class="line"><span style="color:#C678DD">    try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        T</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> resolver</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ofNullable</span><span style="color:#ABB2BF">(result);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NullPointerException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> Optional</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">empty</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请记住，这两个解决方案可能没有传统 null 检查那么高的性能。不过在大多数情况下不会有太大问题。</p>
<h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 StampedLock</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20StampedLock.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20StampedLock.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 StampedLock</source>
      <description>本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。 Java8 StampedLock synchronized Lock StampedLock StampedLock与ReadWriteLock性能对比 总结 参考 # synchronized 在java5之前...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。</p>
</blockquote>
<ul>
<li>Java8 StampedLock
<ul>
<li><a href="#synchronized">synchronized</a></li>
<li><a href="#lock">Lock</a></li>
<li><a href="#stampedlock">StampedLock</a></li>
<li><a href="#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">StampedLock与ReadWriteLock性能对比</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#synchronized"><span></span></a><a href="#synchronized">#</a> synchronized</h2>
<p>在java5之前，实现同步主要是使用synchronized。它是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p>
<p>有四种不同的同步块:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">实例方法</span></span>
<span class="line"><span style="color:#E06C75">静态方法</span></span>
<span class="line"><span style="color:#E06C75">实例方法中的同步块</span></span>
<span class="line"><span style="color:#E06C75">静态方法中的同步块</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家对此应该不陌生，所以不多讲了，以下是代码示例</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">synchronized</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">this</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// do operation</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结: 在多线程并发编程中Synchronized一直是元老级角色，很多人都会称呼它为重量级锁，但是随着Java SE1.6对Synchronized进行了各种优化之后，性能上也有所提升。</p>
<h2><a class="header-anchor" href="#lock"><span></span></a><a href="#lock">#</a> Lock</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">rwlock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">lock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// do operation</span></span>
<span class="line"><span style="color:#E06C75">} </span><span style="color:#C678DD">finally</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">	rwlock</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是Java 5在java.util.concurrent.locks新增的一个API。</p>
<p>Lock是一个接口，核心方法是lock()，unlock()，tryLock()，实现类有ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock；</p>
<p>ReentrantReadWriteLock, ReentrantLock 和synchronized锁都有相同的内存语义。</p>
<p>与synchronized不同的是，Lock完全用Java写成，在java这个层面是无关JVM实现的。Lock提供更灵活的锁机制，很多synchronized 没有提供的许多特性，比如锁投票，定时锁等候和中断锁等候，但因为lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</p>
<p>下面是Lock的一个代码示例</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> y</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> StampedLock</span><span style="color:#E06C75"> sl </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StampedLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> move</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// an exclusively locked method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">       x </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF">       y </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockWrite</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  	//下面看看乐观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   double</span><span style="color:#61AFEF"> distanceFromOrigin</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// A read-only method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryOptimisticRead</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获得一个乐观读锁</span></span>
<span class="line"><span style="color:#C678DD">     double</span><span style="color:#E06C75"> currentX</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x, currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">//将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#C678DD">     if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">validate</span><span style="color:#ABB2BF">(stamp)) { </span><span style="color:#7F848E;font-style:italic">//检查发出乐观读锁后同时是否有其他写锁发生? </span></span>
<span class="line"><span style="color:#ABB2BF">        stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//如果没有，我们再次获得一个读悲观锁</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">          currentX </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> x; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">          currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">     return</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sqrt</span><span style="color:#ABB2BF">(currentX </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentX </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> currentY </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	//下面是悲观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> moveIfAtOrigin</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// upgrade</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // Could instead start with optimistic, not read mode</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">       while</span><span style="color:#ABB2BF"> (x </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> y </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//循环，检查当前状态是否符合</span></span>
<span class="line"><span style="color:#C678DD">         long</span><span style="color:#E06C75"> ws</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryConvertToWriteLock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//将读锁转为写锁</span></span>
<span class="line"><span style="color:#C678DD">         if</span><span style="color:#ABB2BF"> (ws </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//这是确认转为写锁是否成功</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ws; </span><span style="color:#7F848E;font-style:italic">//如果成功 替换票据</span></span>
<span class="line"><span style="color:#ABB2BF">           x </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newX; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#ABB2BF">           y </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newY; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#C678DD">           break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#C678DD">         else</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">//如果不能成功转换为写锁</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//我们显式释放读锁</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//显式直接进行写锁 然后再通过循环再试</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#ABB2BF">       }</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//释放读锁或写锁</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结: 比synchronized更灵活、更具可伸缩性的锁定机制，但不管怎么说还是synchronized代码要更容易书写些</p>
<h2><a class="header-anchor" href="#stampedlock"><span></span></a><a href="#stampedlock">#</a> StampedLock</h2>
<p>它是java8在java.util.concurrent.locks新增的一个API。</p>
<p>ReentrantReadWriteLock 在沒有任何读写锁时，才可以取得写入锁，这可用于实现了悲观读取(Pessimistic Reading)，即如果执行中进行读取时，经常可能有另一执行要写入的需求，为了保持同步，ReentrantReadWriteLock 的读取锁定就可派上用场。</p>
<p>然而，如果读取执行情况很多，写入很少的情况下，使用 ReentrantReadWriteLock 可能会使写入线程遭遇饥饿(Starvation)问题，也就是写入线程迟迟无法竞争到锁定而一直处于等待状态。</p>
<p>StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p>
<p>所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施(重新读取变更信息，或者抛出异常) ，这一个小小改进，可大幅度提高程序的吞吐量！！</p>
<p>下面是java doc提供的StampedLock一个例子</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Point</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> double</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> y</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> StampedLock</span><span style="color:#E06C75"> sl </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StampedLock</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> move</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> deltaY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// an exclusively locked method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">       x </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF">       y </span><span style="color:#56B6C2">+=</span><span style="color:#ABB2BF"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockWrite</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  //下面看看乐观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   double</span><span style="color:#61AFEF"> distanceFromOrigin</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// A read-only method</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryOptimisticRead</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获得一个乐观读锁</span></span>
<span class="line"><span style="color:#C678DD">     double</span><span style="color:#E06C75"> currentX</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> x, currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">//将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#C678DD">     if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">validate</span><span style="color:#ABB2BF">(stamp)) { </span><span style="color:#7F848E;font-style:italic">//检查发出乐观读锁后同时是否有其他写锁发生? </span></span>
<span class="line"><span style="color:#ABB2BF">        stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//如果没有，我们再次获得一个读悲观锁</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">          currentX </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> x; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">          currentY </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> y; </span><span style="color:#7F848E;font-style:italic">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#C678DD">     return</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sqrt</span><span style="color:#ABB2BF">(currentX </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentX </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> currentY </span><span style="color:#56B6C2">*</span><span style="color:#ABB2BF"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	//下面是悲观读锁案例</span></span>
<span class="line"><span style="color:#C678DD">   void</span><span style="color:#61AFEF"> moveIfAtOrigin</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newX</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">double</span><span style="color:#E06C75;font-style:italic"> newY</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">// upgrade</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     // Could instead start with optimistic, not read mode</span></span>
<span class="line"><span style="color:#C678DD">     long</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLock</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">     try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">       while</span><span style="color:#ABB2BF"> (x </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> y </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0.0</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//循环，检查当前状态是否符合</span></span>
<span class="line"><span style="color:#C678DD">         long</span><span style="color:#E06C75"> ws</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">tryConvertToWriteLock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//将读锁转为写锁</span></span>
<span class="line"><span style="color:#C678DD">         if</span><span style="color:#ABB2BF"> (ws </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0L</span><span style="color:#ABB2BF">) { </span><span style="color:#7F848E;font-style:italic">//这是确认转为写锁是否成功</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> ws; </span><span style="color:#7F848E;font-style:italic">//如果成功 替换票据</span></span>
<span class="line"><span style="color:#ABB2BF">           x </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newX; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#ABB2BF">           y </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> newY; </span><span style="color:#7F848E;font-style:italic">//进行状态改变</span></span>
<span class="line"><span style="color:#C678DD">           break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#C678DD">         else</span><span style="color:#ABB2BF"> { </span><span style="color:#7F848E;font-style:italic">//如果不能成功转换为写锁</span></span>
<span class="line"><span style="color:#E5C07B">           sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlockRead</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//我们显式释放读锁</span></span>
<span class="line"><span style="color:#ABB2BF">           stamp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">writeLock</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//显式直接进行写锁 然后再通过循环再试</span></span>
<span class="line"><span style="color:#ABB2BF">         }</span></span>
<span class="line"><span style="color:#ABB2BF">       }</span></span>
<span class="line"><span style="color:#ABB2BF">     } </span><span style="color:#C678DD">finally</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">       sl</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">unlock</span><span style="color:#ABB2BF">(stamp); </span><span style="color:#7F848E;font-style:italic">//释放读锁或写锁</span></span>
<span class="line"><span style="color:#ABB2BF">     }</span></span>
<span class="line"><span style="color:#ABB2BF">   }</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结:</p>
<p>StampedLock要比ReentrantReadWriteLock更加廉价，也就是消耗比较小。</p>
<h2><a class="header-anchor" href="#stampedlock与readwritelock性能对比"><span></span></a><a href="#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">#</a> StampedLock与ReadWriteLock性能对比</h2>
<p>是和ReadWritLock相比，在一个线程情况下，是读速度其4倍左右，写是1倍。</p>
<p>下图是六个线程情况下，读性能是其几十倍，写性能也是近10倍左右:</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<ul>
<li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定；</li>
<li>ReentrantLock、ReentrantReadWriteLock,、StampedLock都是对象层面的锁定，要保证锁定一定会被释放，就必须将unLock()放到finally{}中；</li>
<li>StampedLock 对吞吐量有巨大的改进，特别是在读线程越来越多的场景下；</li>
<li>StampedLock有一个复杂的API，对于加锁操作，很容易误用其他方法;</li>
<li>当只有少量竞争者的时候，synchronized是一个很好的通用的锁实现;</li>
<li>当线程增长能够预估，ReentrantLock是一个很好的通用的锁实现;</li>
</ul>
<p>StampedLock 可以说是Lock的一个很好的补充，吞吐量以及性能上的提升足以打动很多人了，但并不是说要替代之前Lock的东西，毕竟他还是有些应用场景的，起码API比StampedLock容易入手。</p>
<h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 其它更新,字符串&amp;base64等</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0_%E5%AD%97%E7%AC%A6%E4%B8%B2_base64%E7%AD%89.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0_%E5%AD%97%E7%AC%A6%E4%B8%B2_base64%E7%AD%89.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 其它更新,字符串&amp;base64等</source>
      <description>本文对Java 8 其它更新介绍和解读。 Java8 其它更新,字符串&amp;base64等 处理数值 处理文件 查找文件 读写文件 java.util.Random java.util.Base64 参考 # 处理数值 Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer: int可表示最多2 ** 32个数...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文对Java 8 其它更新介绍和解读。</p>
</blockquote>
<ul>
<li>Java8 其它更新,字符串&amp;base64等
<ul>
<li><a href="#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC">处理数值</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6">处理文件</a></li>
<li><a href="#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">查找文件</a></li>
<li><a href="#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">读写文件</a></li>
<li><a href="#javautilrandom">java.util.Random</a></li>
<li><a href="#javautilbase64">java.util.Base64</a></li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#处理数值"><span></span></a><a href="#%E5%A4%84%E7%90%86%E6%95%B0%E5%80%BC">#</a> 处理数值</h2>
<p>Java8添加了对无符号数的额外支持。Java中的数值总是有符号的，例如，让我们来观察Integer:</p>
<p>int可表示最多2 ** 32个数。Java中的数值默认为有符号的，所以最后一个二进制数字表示符号(0为正数，1为负数)。所以从十进制的0开始，最大的有符号正整数为2 ** 31 - 1。</p>
<p>你可以通过Integer.MAX_VALUE来访问它:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">      // 2147483647</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> +</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // -2147483648</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java8添加了解析无符号整数的支持，让我们看看它如何工作:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">long</span><span style="color:#E06C75"> maxUnsignedInt </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">1l</span><span style="color:#56B6C2"> &lt;&lt;</span><span style="color:#D19A66"> 32</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> string </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">(maxUnsignedInt);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> unsignedInt </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseUnsignedInt</span><span style="color:#ABB2BF">(string, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> string2 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toUnsignedString</span><span style="color:#ABB2BF">(unsignedInt, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像你看到的那样，现在可以将最大的无符号数2 ** 32 - 1解析为整数。而且你也可以将这个数值转换回无符号数的字符串表示。</p>
<p>这在之前不可能使用parseInt完成，就像这个例子展示的那样:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(string, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">NumberFormatException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">err</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"could not parse signed int of "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> maxUnsignedInt);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个数值不可解析为有符号整数，因为它超出了最大范围2 ** 31 - 1。 算术运算</p>
<p>Math工具类新增了一些方法来处理数值溢出。这是什么意思呢? 我们已经看到了所有数值类型都有最大值。所以当算术运算的结果不能被它的大小装下时，会发生什么呢?</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">      // 2147483647</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> +</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">  // -2147483648</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>就像你看到的那样，发生了整数溢出，这通常是我们不愿意看到的。</p>
<p>Java8添加了严格数学运算的支持来解决这个问题。Math扩展了一些方法，它们全部以exact结尾，例如addExact。当运算结果不能被数值类型装下时，这些方法通过抛出ArithmeticException异常来合理地处理溢出。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addExact</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ArithmeticException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">err</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // =&gt; integer overflow</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当尝试通过toIntExact将长整数转换为整数时，可能会抛出同样的异常:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toIntExact</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Long</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">ArithmeticException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">err</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMessage</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // =&gt; integer overflow</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#处理文件"><span></span></a><a href="#%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6">#</a> 处理文件</h2>
<p>Files工具类首次在Java7中引入，作为NIO的一部分。JDK8 API添加了一些额外的方法，它们可以将文件用于函数式数据流。让我们深入探索一些代码示例。 列出文件</p>
<p>Files.list方法将指定目录的所有路径转换为数据流，便于我们在文件系统的内容上使用类似filter和sorted的流操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Path</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">list</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">))</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> joined </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(path </span><span style="color:#C678DD">-&gt;</span><span style="color:#56B6C2"> !</span><span style="color:#E5C07B">path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"."</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"; "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"List: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> joined);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子列出了当前工作目录的所有文件，之后将每个路径都映射为它的字符串表示。之后结果被过滤、排序，最后连接为一个字符串。如果你还不熟悉函数式数据流，你应该阅读我的Java8数据流教程。</p>
<p>你可能已经注意到，数据流的创建包装在try-with语句中。数据流实现了AutoCloseable，并且这里我们需要显式关闭数据流，因为它基于IO操作。</p>
<blockquote>
<p>返回的数据流是DirectoryStream的封装。如果需要及时处理文件资源，就应该使用try-with结构来确保在流式操作完成后，数据流的close方法被调用。</p>
</blockquote>
<h2><a class="header-anchor" href="#查找文件"><span></span></a><a href="#%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">#</a> 查找文件</h2>
<p>下面的例子演示了如何查找在目录及其子目录下的文件:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> start </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> maxDepth </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Path</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">find</span><span style="color:#ABB2BF">(start, maxDepth, (path, attr) </span><span style="color:#C678DD">-&gt;</span></span>
<span class="line"><span style="color:#E5C07B">        String</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">valueOf</span><span style="color:#ABB2BF">(path).</span><span style="color:#61AFEF">endsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">".js"</span><span style="color:#ABB2BF">))</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> joined </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"; "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Found: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> joined);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>find方法接受三个参数: 目录路径start是起始点，maxDepth定义了最大搜索深度。第三个参数是一个匹配谓词，定义了搜索的逻辑。上面的例子中，我们搜索了所有JavaScirpt文件(以.js结尾的文件名)。</p>
<p>我们可以使用Files.walk方法来完成相同的行为。这个方法会遍历每个文件，而不需要传递搜索谓词。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> start </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">""</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> maxDepth </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Path</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">walk</span><span style="color:#ABB2BF">(start, maxDepth)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    String</span><span style="color:#E06C75"> joined </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">valueOf)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(path </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">endsWith</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">".js"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">sorted</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">joining</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"; "</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"walk(): "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> joined);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，我们使用了流式操作filter来完成和上个例子相同的行为。</p>
<h2><a class="header-anchor" href="#读写文件"><span></span></a><a href="#%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">#</a> 读写文件</h2>
<p>将文本文件读到内存，以及向文本文件写入字符串在Java 8 中是简单的任务。不需要再去摆弄读写器了。Files.readAllLines从指定的文件把所有行读进字符串列表中。你可以简单地修改这个列表，并且将它通过Files.write写到另一个文件中:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> lines </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readAllLines</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">lines</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print('foobar');"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1-modified.js"</span><span style="color:#ABB2BF">), lines);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意这些方法对内存并不十分高效，因为整个文件都会读进内存。文件越大，所用的堆区也就越大。</p>
<p>你可以使用Files.lines方法来作为内存高效的替代。这个方法读取每一行，并使用函数式数据流来对其流式处理，而不是一次性把所有行都读进内存。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Stream</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> stream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">lines</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">))</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">    stream</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(line </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> line</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(String</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">trim)</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你需要更多的精细控制，你需要构造一个新的BufferedReader来代替:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newBufferedReader</span><span style="color:#ABB2BF">(path)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">reader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你需要写入文件时，简单地构造一个BufferedWriter来代替:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/output.js"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">BufferedWriter</span><span style="color:#E06C75"> writer </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newBufferedWriter</span><span style="color:#ABB2BF">(path)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">    writer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">write</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print('Hello World');"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BufferedReader也可以访问函数式数据流。lines方法在它所有行上面构建数据流:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Path</span><span style="color:#E06C75"> path </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Paths</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"res/nashorn1.js"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">try</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">BufferedReader</span><span style="color:#E06C75"> reader </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Files</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newBufferedReader</span><span style="color:#ABB2BF">(path)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> countPrints </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> reader</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">lines</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(line </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> line</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">contains</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"print"</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">        .</span><span style="color:#61AFEF">count</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">    System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(countPrints);</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前为止你可以看到Java8提供了三个简单的方法来读取文本文件的每一行，使文件处理更加便捷。</p>
<p>不幸的是你需要显式使用try-with语句来关闭文件流，这会使示例代码有些凌乱。我期待函数式数据流可以在调用类似count和collect时可以自动关闭，因为你不能在相同数据流上调用终止操作两次。</p>
<h2><a class="header-anchor" href="#java-util-random"><span></span></a><a href="#java-util-random">#</a> java.util.Random</h2>
<p>在Java8中java.util.Random类的一个非常明显的变化就是新增了返回随机数流(random Stream of numbers)的一些方法。</p>
<p>下面的代码是创建一个无穷尽的double类型的数字流，这些数字在0(包括0)和1(不包含1)之间。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> doubleStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubles</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码是创建一个无穷尽的int类型的数字流，这些数字在0(包括0)和100(不包括100)之间。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">IntStream</span><span style="color:#E06C75"> intStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">ints</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这些无穷尽的数字流用来做什么呢? 接下来，我通过一些案例来分析。记住，这些无穷大的数字流只能通过某种方式被截断(limited)。</p>
<p>示例1: 创建10个随机的整数流并打印出来:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">intStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">println);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>示例2: 创建100个随机整数:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">    List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> randomBetween0And99 </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> intStream</span></span>
<span class="line"><span style="color:#ABB2BF">                                       .</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">100</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">                                       .</span><span style="color:#61AFEF">boxed</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">                                       .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collectors</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toList</span><span style="color:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于高斯伪随机数(gaussian pseudo-random values)来说，random.doubles()方法所创建的流不能等价于高斯伪随机数，然而，如果用java8所提供的功能是非常容易实现的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> gaussianStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">generate</span><span style="color:#ABB2BF">(random</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">nextGaussian).</span><span style="color:#61AFEF">mapToDouble</span><span style="color:#ABB2BF">(e </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> e);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我使用了Stream.generate api，并传入Supplier 类的对象作为参数，这个对象是通过调用Random类中的方法 nextGaussian()创建另一个高斯伪随机数。</p>
<p>接下来，我们来对double类型的伪随机数流和double类型的高斯伪随机数流做一个更加有意思的事情，那就是获得两个流的随机数的分配情况。预期的结果是: double类型的伪随机数是均匀的分配的，而double类型的高斯伪随机数应该是正态分布的。</p>
<p>通过下面的代码，我生成了一百万个伪随机数，这是通过java8提供的api实现的:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> doubleStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> random</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doubles</span><span style="color:#ABB2BF">(</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">1.0</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">LinkedHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Range</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> rangeCountMap </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> doubleStream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000000</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">boxed</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">of)</span></span>
<span class="line"><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">emptyRangeCountMap, (m, e) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, </span><span style="color:#E5C07B">m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(e) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">), Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">mergeRangeCountMaps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">rangeCountMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((k, v) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">from</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> v));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的运行结果如下:</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">    -1</span><span style="color:#D19A66">      49730</span></span>
<span class="line"><span style="color:#61AFEF">    -0.9</span><span style="color:#D19A66">    49931</span></span>
<span class="line"><span style="color:#61AFEF">    -0.8</span><span style="color:#D19A66">    50057</span></span>
<span class="line"><span style="color:#61AFEF">    -0.7</span><span style="color:#D19A66">    50060</span></span>
<span class="line"><span style="color:#61AFEF">    -0.6</span><span style="color:#D19A66">    49963</span></span>
<span class="line"><span style="color:#61AFEF">    -0.5</span><span style="color:#D19A66">    50159</span></span>
<span class="line"><span style="color:#61AFEF">    -0.4</span><span style="color:#D19A66">    49921</span></span>
<span class="line"><span style="color:#61AFEF">    -0.3</span><span style="color:#D19A66">    49962</span></span>
<span class="line"><span style="color:#61AFEF">    -0.2</span><span style="color:#D19A66">    50231</span></span>
<span class="line"><span style="color:#61AFEF">    -0.1</span><span style="color:#D19A66">    49658</span></span>
<span class="line"><span style="color:#61AFEF">    0</span><span style="color:#D19A66">       50177</span></span>
<span class="line"><span style="color:#61AFEF">    0.1</span><span style="color:#D19A66">     49861</span></span>
<span class="line"><span style="color:#61AFEF">    0.2</span><span style="color:#D19A66">     49947</span></span>
<span class="line"><span style="color:#61AFEF">    0.3</span><span style="color:#D19A66">     50157</span></span>
<span class="line"><span style="color:#61AFEF">    0.4</span><span style="color:#D19A66">     50414</span></span>
<span class="line"><span style="color:#61AFEF">    0.5</span><span style="color:#D19A66">     50006</span></span>
<span class="line"><span style="color:#61AFEF">    0.6</span><span style="color:#D19A66">     50038</span></span>
<span class="line"><span style="color:#61AFEF">    0.7</span><span style="color:#D19A66">     49962</span></span>
<span class="line"><span style="color:#61AFEF">    0.8</span><span style="color:#D19A66">     50071</span></span>
<span class="line"><span style="color:#61AFEF">    0.9</span><span style="color:#D19A66">     49695</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了类比，我们再生成一百万个高斯伪随机数:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Random</span><span style="color:#E06C75"> random </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Random</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">DoubleStream</span><span style="color:#E06C75"> gaussianStream </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Stream</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">generate</span><span style="color:#ABB2BF">(random</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">nextGaussian).</span><span style="color:#61AFEF">mapToDouble</span><span style="color:#ABB2BF">(e </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> e);</span></span>
<span class="line"><span style="color:#E5C07B">LinkedHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Range</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> gaussianRangeCountMap </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#E06C75">    gaussianStream</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">filter</span><span style="color:#ABB2BF">(e </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> (e </span><span style="color:#56B6C2">&gt;=</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1.0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#ABB2BF"> e </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 1.0</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">limit</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000000</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">boxed</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">of)</span></span>
<span class="line"><span style="color:#ABB2BF">            .</span><span style="color:#61AFEF">collect</span><span style="color:#ABB2BF">(Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">emptyRangeCountMap, (m, e) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, </span><span style="color:#E5C07B">m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(e) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">), Ranges</span><span style="color:#C678DD">::</span><span style="color:#ABB2BF">mergeRangeCountMaps);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">gaussianRangeCountMap</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">forEach</span><span style="color:#ABB2BF">((k, v) </span><span style="color:#C678DD">-&gt;</span><span style="color:#E5C07B"> System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">from</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379"> "</span><span style="color:#56B6C2">\t</span><span style="color:#98C379">"</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> v));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码输出的结果恰恰与我们预期结果相吻合，即: double类型的伪随机数是均匀的分配的，而double类型的高斯伪随机数应该是正态分布的。</p>
<p>附: 完整代码可点击这里获取 <a href="https://gist.github.com/bijukunjummen/8129250" target="_blank" rel="noopener noreferrer">https://gist.github.com/bijukunjummen/8129250</a></p>
<p>译文链接: <a href="http://www.importnew.com/9672.html" target="_blank" rel="noopener noreferrer">http://www.importnew.com/9672.html</a></p>
<h2><a class="header-anchor" href="#java-util-base64"><span></span></a><a href="#java-util-base64">#</a> java.util.Base64</h2>
<blockquote>
<p>Java8中java.util.Base64性能比较高，推荐使用。请参考:</p>
<ul>
<li>性能对比: <a href="https://wizardforcel.gitbooks.io/java8-new-features/content/11.html" target="_blank" rel="noopener noreferrer">https://wizardforcel.gitbooks.io/java8-new-features/content/11.html</a></li>
<li>源代码: <a href="http://git.oschina.net/benhail/javase8-sample" target="_blank" rel="noopener noreferrer">http://git.oschina.net/benhail/javase8-sample</a></li>
</ul>
</blockquote>
<p>该类提供了一套静态方法获取下面三种BASE64编解码器:</p>
<p>1)Basic编码: 是标准的BASE64编码，用于处理常规的需求</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 编码</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> asB64 </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"some string"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(asB64);</span><span style="color:#7F848E;font-style:italic"> // 输出为: c29tZSBzdHJpbmc=</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 解码</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75">[] asBytes </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDecoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">decode</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"c29tZSBzdHJpbmc="</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> String</span><span style="color:#ABB2BF">(asBytes, </span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">));</span><span style="color:#7F848E;font-style:italic"> // 输出为: some string</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)URL编码: 使用下划线替换URL里面的反斜线“/”</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> urlEncoded </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUrlEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"subjects?abcd"</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Using URL Alphabet: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> urlEncoded);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 输出为:</span></span>
<span class="line"><span style="color:#E5C07B">Using</span><span style="color:#E5C07B"> URL</span><span style="color:#E06C75"> Alphabet</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> c3ViamVjdHM_YWJjZA</span><span style="color:#56B6C2">==</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3)MIME编码: 使用基本的字母数字产生BASE64输出，而且对MIME格式友好: 每一行输出不超过76个字符，而且每行以“\r\n”符结束。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">StringBuilder</span><span style="color:#E06C75"> sb </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> StringBuilder</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> t </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">t) {</span></span>
<span class="line"><span style="color:#E5C07B">  sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">append</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">UUID</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">randomUUID</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75">[] toEncode </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> sb</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">getBytes</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"utf-8"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">String</span><span style="color:#E06C75"> mimeEncoded </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Base64</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getMimeEncoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">encodeToString</span><span style="color:#ABB2BF">(toEncode);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(mimeEncoded);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#参考"><span></span></a><a href="#%E5%8F%82%E8%80%83">#</a> 参考</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 新特性知识体系</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E6%96%B0%E7%89%B9%E6%80%A7%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 新特性知识体系</source>
      <description>Java 8 新特性详解汇总。 Java 新特性的增加都是来源于 JSR或者JEP JSR论坛: https://jcp.org/en/jsr/detail?id=335 Java8 新特性知识体系 知识体系 相关文章 函数编程 Optional类 default方法 类型注解 重复注解 类型推断 JRE 精简 LocalDate/LocalDateT...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Java 8 新特性详解汇总。</p>
<ul>
<li>Java 新特性的增加都是来源于 JSR或者JEP</li>
<li>JSR论坛: <a href="https://jcp.org/en/jsr/detail?id=335" target="_blank" rel="noopener noreferrer">https://jcp.org/en/jsr/detail?id=335</a></li>
</ul>
</blockquote>
<ul>
<li>Java8 新特性知识体系
<ul>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li>相关文章
<ul>
<li><a href="#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B">函数编程</a></li>
<li><a href="#optional%E7%B1%BB">Optional类</a></li>
<li><a href="#default%E6%96%B9%E6%B3%95">default方法</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">类型注解</a></li>
<li><a href="#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">重复注解</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD">类型推断</a></li>
<li><a href="#jre-%E7%B2%BE%E7%AE%80">JRE 精简</a></li>
<li><a href="#localdatelocaldatetime">LocalDate/LocalDateTime</a></li>
<li><a href="#javafx">JavaFX</a></li>
<li><a href="#permgen%E7%A7%BB%E9%99%A4">PermGen移除</a></li>
<li><a href="#stampedlock">StampedLock</a></li>
<li><a href="#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0">其它更新</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-overview.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#相关文章"><span></span></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0">#</a> 相关文章</h2>
<h3><a class="header-anchor" href="#函数编程"><span></span></a><a href="#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B">#</a> 函数编程</h3>
<blockquote>
<p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p>
</blockquote>
<ul>
<li>Lambda 表达式的特点</li>
<li>Lambda 表达式使用和Stream下的接口</li>
<li>函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.</li>
<li>Comparator排序为例贯穿所有知识点。</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 函数编程</a></p>
<h3><a class="header-anchor" href="#optional类"><span></span></a><a href="#optional%E7%B1%BB">#</a> Optional类</h3>
<blockquote>
<p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
</blockquote>
<ul>
<li>Optional类的意义</li>
<li>Optional类有哪些常用的方法</li>
<li>Optional举例贯穿所有知识点</li>
<li>多重类嵌套Null值判断</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - Optional类</a></p>
<h3><a class="header-anchor" href="#default方法"><span></span></a><a href="#default%E6%96%B9%E6%B3%95">#</a> default方法</h3>
<blockquote>
<p>默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java 8的lambdas表达式时，提供给我们一个平滑的过渡体验。</p>
</blockquote>
<ul>
<li>为什么会出现默认方法?</li>
<li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li>
<li>多重实现的默认方法冲突怎么办?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - default方法</a></p>
<h3><a class="header-anchor" href="#类型注解"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">#</a> 类型注解</h3>
<blockquote>
<p>那充满争议的类型注解究竟是什么? 复杂还是便捷?</p>
</blockquote>
<ul>
<li>注解在JDK哪个版本中出现的，可以在哪些地方用注解?</li>
<li>什么是类型注解?</li>
<li>类型注解的作用是什么?</li>
<li>为什么会出现类型注解(JSR308)?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 类型注解</a></p>
<h3><a class="header-anchor" href="#重复注解"><span></span></a><a href="#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">#</a> 重复注解</h3>
<ul>
<li>Java8之前对重复注解是怎么做的?</li>
<li>Java8对重复注解添加了什么支持?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 重复注解</a></p>
<h3><a class="header-anchor" href="#类型推断"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD">#</a> 类型推断</h3>
<blockquote>
<p>导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。</p>
</blockquote>
<ul>
<li>什么是泛型?</li>
<li>Java7对泛型推断做了哪些优化?</li>
<li>Java8对此有做了哪些优化?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 类型推断优化</a></p>
<h3><a class="header-anchor" href="#jre-精简"><span></span></a><a href="#jre-%E7%B2%BE%E7%AE%80">#</a> JRE 精简</h3>
<blockquote>
<p>模块化特性是javaer所期待的特性, 一个占用资源少的JRE运行环境，紧凑的JRE特性的出现，能带来以后的物联网的发展，甚至还是会有大量的java应用程序出现在物联网上面。</p>
</blockquote>
<ul>
<li>为什么精简Java8 JRE，及好处是啥?</li>
<li>紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是?</li>
<li>在不同平台上如何编译等?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - JRE精简</a></p>
<h3><a class="header-anchor" href="#localdate-localdatetime"><span></span></a><a href="#localdate-localdatetime">#</a> LocalDate/LocalDateTime</h3>
<blockquote>
<p>Date/Calendar槽点, java8对其进行了重写。</p>
</blockquote>
<ul>
<li>Java8之前的Date有哪些槽点? (Calendar的所有属性都是可变的，SimpleDateFormat的线程不安全性等)</li>
<li>Java8之前使用哪些常用的第三方时间库?</li>
<li>Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?</li>
<li>其它语言时间库?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - LocalDate/LocalDateTime</a></p>
<h3><a class="header-anchor" href="#javafx"><span></span></a><a href="#javafx">#</a> JavaFX</h3>
<blockquote>
<p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。</p>
</blockquote>
<ul>
<li>javaFX发展历程?</li>
<li>Java8对其增加了哪些特性?</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - JavaFX</a></p>
<h3><a class="header-anchor" href="#permgen移除"><span></span></a><a href="#permgen%E7%A7%BB%E9%99%A4">#</a> PermGen移除</h3>
<blockquote>
<p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域。PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p>
</blockquote>
<ul>
<li>Java8之前 “java.lang.OutOfMemoryError: PermGen space”是怎么引起的，怎么解决的?</li>
<li>新增加的元空间(Metaspace)包含哪些东西，画出图</li>
<li>元空间(Metaspace)和PermGen对比</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 移除Permgen</a></p>
<h3><a class="header-anchor" href="#stampedlock"><span></span></a><a href="#stampedlock">#</a> StampedLock</h3>
<ul>
<li>为什么会引入StampedLock</li>
<li>用Lock写悲观锁和乐观锁举例</li>
<li>用StampedLock写悲观锁和乐观锁举例</li>
<li>性能对比</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - StampedLock</a></p>
<h3><a class="header-anchor" href="#其它更新"><span></span></a><a href="#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0">#</a> 其它更新</h3>
<ul>
<li>Java8 还有哪些其它更新
<ul>
<li>字符串</li>
<li>Base64</li>
<li>Random</li>
<li>Nashorn</li>
<li>...</li>
</ul>
</li>
</ul>
<p>详细分析请参看: <a href="">Java 8 - 其它更新</a></p>
<h2><a class="header-anchor" href="#参考文档"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">#</a> 参考文档</h2>
<blockquote>
<p>主要参考自以下文档:</p>
</blockquote>
<ul>
<li>Java 8 教程汇总 <a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html" target="_blank" rel="noopener noreferrer">https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-overview.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 移除Permgen</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%A7%BB%E9%99%A4Permgen.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%A7%BB%E9%99%A4Permgen.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 移除Permgen</source>
      <description>本文主要介绍PermGen space，及Java 8 - 移除Permgen。 Java8 移除Permgen PermGen space简单介绍 元空间(MetaSpace)一种新的内存空间诞生 PermGen vs. Metaspace 运行时比较 JDK 1.7 @64-bit – PermGen 耗尽测试 JDK 1.8 @64-bit – ...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要介绍PermGen space，及Java 8 - 移除Permgen。</p>
</blockquote>
<ul>
<li>Java8 移除Permgen
<ul>
<li><a href="#permgen-space%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">PermGen space简单介绍</a></li>
<li><a href="#%E5%85%83%E7%A9%BA%E9%97%B4metaspace%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%9E%E7%94%9F">元空间(MetaSpace)一种新的内存空间诞生</a></li>
<li>PermGen vs. Metaspace 运行时比较
<ul>
<li><a href="#jdk-17-64-bit-%E2%80%93-permgen-%E8%80%97%E5%B0%BD%E6%B5%8B%E8%AF%95">JDK 1.7 @64-bit – PermGen 耗尽测试</a></li>
<li><a href="#jdk-18-64-bit-%E2%80%93-metaspace%E5%A4%A7%E5%B0%8F%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E6%B5%8B%E8%AF%95">JDK 1.8 @64-bit – Metaspace大小动态调整测试</a></li>
<li><a href="#jdk-18-64-bit-%E2%80%93-metaspace-%E5%8F%97%E9%99%90%E6%B5%8B%E8%AF%95">JDK 1.8 @64-bit – Metaspace 受限测试</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>很多开发者都在其系统中见过“java.lang.OutOfMemoryError: PermGen space”这一问题。这往往是由类加载器相关的内存泄漏以及新类加载器的创建导致的，通常出现于代码热部署时。相对于正式产品，该问题在开发机上出现的频率更高，在产品中最常见的“问题”是默认值太低了。常用的解决方法是将其设置为256MB或更高。</p>
</blockquote>
<h2><a class="header-anchor" href="#permgen-space简单介绍"><span></span></a><a href="#permgen-space%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D">#</a> PermGen space简单介绍</h2>
<p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域，说说为什么会内存益出: 这一部分用于存放Class和Meta的信息,Class在被 Load的时候被放入PermGen space区域，它和和存放Instance的Heap区域不同,所以如果你的APP会LOAD很多CLASS的话,就很可能出现PermGen space错误。这种错误常见在web服务器对JSP进行pre compile的时候。</p>
<p>JVM 种类有很多，比如 Oralce-Sun Hotspot, Oralce JRockit, IBM J9, Taobao JVM(淘宝好样的！)等等。当然武林盟主是Hotspot了，这个毫无争议。需要注意的是，PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p>
<h2><a class="header-anchor" href="#元空间-metaspace-一种新的内存空间诞生"><span></span></a><a href="#%E5%85%83%E7%A9%BA%E9%97%B4-metaspace-%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E8%AF%9E%E7%94%9F">#</a> 元空间(MetaSpace)一种新的内存空间诞生</h2>
<p>JDK8 HotSpot JVM 将移除永久区，使用本地内存来存储类元数据信息并称之为: 元空间(Metaspace)；这与Oracle JRockit 和IBM JVM’s很相似，如下图所示</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>这意味着不会再有java.lang.OutOfMemoryError: PermGen问题，也不再需要你进行调优及监控内存空间的使用……但请等等，这么说还为时过早。在默认情况下，这些改变是透明的，接下来我们的展示将使你知道仍然要关注类元数据内存的占用。请一定要牢记，这个新特性也不能神奇地消除类和类加载器导致的内存泄漏。</p>
<p>java8中metaspace总结如下:</p>
<ul>
<li>PermGen 空间的状况</li>
</ul>
<p>这部分内存空间将全部移除。</p>
<p>JVM的参数: PermSize 和 MaxPermSize 会被忽略并给出警告(如果在启用时设置了这两个参数)。</p>
<ul>
<li>Metaspace 内存分配模型</li>
</ul>
<p>大部分类元数据都在本地内存中分配。</p>
<p>用于描述类元数据的“klasses”已经被移除。</p>
<ul>
<li>Metaspace 容量</li>
</ul>
<p>默认情况下，类元数据只受可用的本地内存限制(容量取决于是32位或是64位操作系统的可用虚拟内存大小)。</p>
<p>新参数(MaxMetaspaceSize)用于限制本地内存分配给类元数据的大小。如果没有指定这个参数，元空间会在运行时根据需要动态调整。</p>
<ul>
<li>Metaspace 垃圾回收</li>
</ul>
<p>对于僵死的类及类加载器的垃圾回收将在元数据使用达到“MaxMetaspaceSize”参数的设定值时进行。</p>
<p>适时地监控和调整元空间对于减小垃圾回收频率和减少延时是很有必要的。持续的元空间垃圾回收说明，可能存在类、类加载器导致的内存泄漏或是大小设置不合适。</p>
<ul>
<li>Java 堆内存的影响</li>
</ul>
<p>一些杂项数据已经移到Java堆空间中。升级到JDK8之后，会发现Java堆 空间有所增长。</p>
<ul>
<li>Metaspace 监控</li>
</ul>
<p>元空间的使用情况可以从HotSpot1.8的详细GC日志输出中得到。</p>
<p>Jstat 和 JVisualVM两个工具，在使用b75版本进行测试时，已经更新了，但是还是能看到老的PermGen空间的出现。</p>
<p>前面已经从理论上充分说明，下面让我们通过“泄漏”程序进行新内存空间的观察……</p>
<h2><a class="header-anchor" href="#permgen-vs-metaspace-运行时比较"><span></span></a><a href="#permgen-vs-metaspace-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%AF%94%E8%BE%83">#</a> PermGen vs. Metaspace 运行时比较</h2>
<p>为了更好地理解Metaspace内存空间的运行时行为，</p>
<p>将进行以下几种场景的测试:</p>
<ul>
<li>使用JDK1.7运行Java程序，监控并耗尽默认设定的85MB大小的PermGen内存空间。</li>
<li>使用JDK1.8运行Java程序，监控新Metaspace内存空间的动态增长和垃圾回收过程。</li>
<li>使用JDK1.8运行Java程序，模拟耗尽通过“MaxMetaspaceSize”参数设定的128MB大小的Metaspace内存空间。</li>
</ul>
<p>首先建立了一个模拟PermGen OOM的代码</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> ClassA</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD"> public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> method</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">  // do nothing</span></span>
<span class="line"><span style="color:#ABB2BF"> }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个简单的ClassA，把他编译成class字节码放到D: /classes下面，测试代码中用URLClassLoader来加载此类型上面类编译成class</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * 模拟PermGen OOM</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * </span><span style="color:#C678DD;font-style:italic">@author</span><span style="color:#7F848E;font-style:italic"> benhail</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> OOMTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //准备url</span></span>
<span class="line"><span style="color:#E5C07B">            URL</span><span style="color:#E06C75"> url</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> File</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"D:/classes"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">toURI</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">toURL</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">            URL</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75">urls</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> {url};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //获取有关类型加载的JMX接口</span></span>
<span class="line"><span style="color:#E5C07B">            ClassLoadingMXBean</span><span style="color:#E06C75"> loadingBean</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> ManagementFactory</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClassLoadingMXBean</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //用于缓存类加载器</span></span>
<span class="line"><span style="color:#E5C07B">            List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">classLoaders</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">ClassLoader</span><span style="color:#ABB2BF">&gt;();</span></span>
<span class="line"><span style="color:#C678DD">            while</span><span style="color:#ABB2BF"> (</span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //加载类型并缓存类加载器实例</span></span>
<span class="line"><span style="color:#E5C07B">                ClassLoader</span><span style="color:#E06C75"> classLoader</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> URLClassLoader</span><span style="color:#ABB2BF">(urls);</span></span>
<span class="line"><span style="color:#E5C07B">                classLoaders</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(classLoader);</span></span>
<span class="line"><span style="color:#E5C07B">                classLoader</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">loadClass</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"ClassA"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                //显示数量信息(共加载过的类型数目，当前还有效的类型数目，已经被卸载的类型数目)</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"total: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> loadingBean</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getTotalLoadedClassCount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"active: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> loadingBean</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getLoadedClassCount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">                System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"unloaded: "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> loadingBean</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnloadedClassCount</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#ABB2BF">        } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚拟机器参数设置如下: -verbose -verbose:gc</p>
<p>设置-verbose参数是为了获取类型加载和卸载的信息</p>
<p>设置-verbose:gc是为了获取垃圾收集的相关信息</p>
<h3><a class="header-anchor" href="#jdk-1-7-64-bit-–-permgen-耗尽测试"><span></span></a><a href="#jdk-1-7-64-bit-%E2%80%93-permgen-%E8%80%97%E5%B0%BD%E6%B5%8B%E8%AF%95">#</a> JDK 1.7 @64-bit – PermGen 耗尽测试</h3>
<p>Java1.7的PermGen默认空间为85 MB(或者可以通过-XX:MaxPermSize=XXXm指定)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以从上面的JVisualVM的截图看出: 当加载超过6万个类之后，PermGen被耗尽。我们也能通过程序和GC的输出观察耗尽的过程。</p>
<p>程序输出(摘取了部分)</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2">......</span></span>
<span class="line"><span style="color:#ABB2BF">[Loaded ClassA from file:/D:/classes/]</span></span>
<span class="line"><span style="color:#61AFEF">total:</span><span style="color:#D19A66"> 64887</span></span>
<span class="line"><span style="color:#61AFEF">active:</span><span style="color:#D19A66"> 64887</span></span>
<span class="line"><span style="color:#61AFEF">unloaded:</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF">[GC 245041K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">213978K(</span><span style="color:#D19A66">536768</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0597188</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[Full GC 213978K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211425K(</span><span style="color:#D19A66">644992</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.6456638</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[GC 211425K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211425K(</span><span style="color:#D19A66">656448</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0086696</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[Full GC 211425K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211411K(</span><span style="color:#D19A66">731008</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.6924754</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[GC 211411K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">211411K(</span><span style="color:#D19A66">726528</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0088992</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#56B6C2">...............</span></span>
<span class="line"><span style="color:#61AFEF">java.lang.OutOfMemoryError:</span><span style="color:#98C379"> PermGen</span><span style="color:#98C379"> space</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#jdk-1-8-64-bit-–-metaspace大小动态调整测试"><span></span></a><a href="#jdk-1-8-64-bit-%E2%80%93-metaspace%E5%A4%A7%E5%B0%8F%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E6%B5%8B%E8%AF%95">#</a> JDK 1.8 @64-bit – Metaspace大小动态调整测试</h3>
<p>Java的Metaspace空间: 不受限制 (默认)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>从上面的截图可以看到，JVM Metaspace进行了动态扩展，本地内存的使用由20MB增长到646MB，以满足程序中不断增长的类数据内存占用需求。我们也能观察到JVM的垃圾回收事件—试图销毁僵死的类或类加载器对象。但是，由于我们程序的泄漏，JVM别无选择只能动态扩展Metaspace内存空间。程序加载超过10万个类，而没有出现OOM事件。</p>
<h3><a class="header-anchor" href="#jdk-1-8-64-bit-–-metaspace-受限测试"><span></span></a><a href="#jdk-1-8-64-bit-%E2%80%93-metaspace-%E5%8F%97%E9%99%90%E6%B5%8B%E8%AF%95">#</a> JDK 1.8 @64-bit – Metaspace 受限测试</h3>
<p>Java的Metaspace空间: 128MB(-XX:MaxMetaspaceSize=128m)</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>可以从上面的JVisualVM的截图看出: 当加载超过2万个类之后，Metaspace被耗尽；与JDK1.7运行时非常相似。我们也能通过程序和GC的输出观察耗尽的过程。另一个有趣的现象是，保留的原生内存占用量是设定的最大大小两倍之多。这可能表明，如果可能的话，可微调元空间容量大小策略，来避免本地内存的浪费。</p>
<p>从Java程序的输出中看到如下异常。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">[Loaded ClassA from file:/D:/classes/]</span></span>
<span class="line"><span style="color:#61AFEF">total:</span><span style="color:#D19A66"> 21393</span></span>
<span class="line"><span style="color:#61AFEF">active:</span><span style="color:#D19A66"> 21393</span></span>
<span class="line"><span style="color:#61AFEF">unloaded:</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#ABB2BF">[GC (</span><span style="color:#E06C75">Metadata</span><span style="color:#E06C75"> GC</span><span style="color:#E06C75"> Threshold</span><span style="color:#ABB2BF">) 64306K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">57010K(</span><span style="color:#D19A66">111616</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.0145502</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#ABB2BF">[Full GC (</span><span style="color:#E06C75">Metadata</span><span style="color:#E06C75"> GC</span><span style="color:#E06C75"> Threshold</span><span style="color:#ABB2BF">) 57010K-</span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF">56810K(</span><span style="color:#D19A66">122368</span><span style="color:#ABB2BF">K), </span><span style="color:#D19A66">0.1068084</span><span style="color:#ABB2BF"> secs]</span></span>
<span class="line"><span style="color:#61AFEF">java.lang.OutOfMemoryError:</span><span style="color:#98C379"> Metaspace</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在设置了MaxMetaspaceSize的情况下，该空间的内存仍然会耗尽，进而引发“java.lang.OutOfMemoryError: Metadata space”错误。因为类加载器的泄漏仍然存在，而通常Java又不希望无限制地消耗本机内存，因此设置一个类似于MaxPermSize的限制看起来也是合理的。</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<ul>
<li>之前不管是不是需要，JVM都会吃掉那块空间……如果设置得太小，JVM会死掉；如果设置得太大，这块内存就被JVM浪费了。理论上说，现在你完全可以不关注这个，因为JVM会在运行时自动调校为“合适的大小”；</li>
<li>提高Full GC的性能，在Full GC期间，Metadata到Metadata pointers之间不需要扫描了，别小看这几纳秒时间；</li>
<li>隐患就是如果程序存在内存泄露，像OOMTest那样，不停的扩展metaspace的空间，会导致机器的内存不足，所以还是要有必要的调试和监控。</li>
</ul>
<h2><a class="header-anchor" href="#参考文章"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</h2>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java8-jvm-1.png" type="image/png"/>
    </item>
    <item>
      <title>Java8 类型推断优化</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 类型推断优化</source>
      <description>理解Java 8 类型推断需理解几个问题: 什么是泛型 Java7对泛型推断做了哪些优化 Java8对此有做了哪些优化 Java8 类型推断优化 简单理解泛型 泛型的尴尬 java7的泛型类型推断改进 Java8的泛型类型推断改进 总结 # 简单理解泛型 泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 类型推断需理解几个问题:</p>
<ul>
<li>什么是泛型</li>
<li>Java7对泛型推断做了哪些优化</li>
<li>Java8对此有做了哪些优化</li>
</ul>
</blockquote>
<ul>
<li>Java8 类型推断优化
<ul>
<li><a href="#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">简单理解泛型</a></li>
<li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC">泛型的尴尬</a></li>
<li><a href="#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">java7的泛型类型推断改进</a></li>
<li><a href="#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">Java8的泛型类型推断改进</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#简单理解泛型"><span></span></a><a href="#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">#</a> 简单理解泛型</h2>
<p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。</p>
<p>理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> box </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Apple</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">box</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Apple</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">Apple</span><span style="color:#E06C75"> apple </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> box</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码自身已表达的很清楚: box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Apple</span><span style="color:#E06C75"> apple </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (Apple)</span><span style="color:#E5C07B">box</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#泛型的尴尬"><span></span></a><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC">#</a> 泛型的尴尬</h2>
<p>泛型的最大优点是提供了程序的类型安全同时可以向后兼容，但也有尴尬的地方，就是每次定义时都要写明泛型的类型，这样显示指定不仅感觉有些冗长，最主要是很多程序员不熟悉泛型，因此很多时候不能够给出正确的类型参数，现在通过编译器自动推断泛型的参数类型，能够减少这样的情况，并提高代码可读性。</p>
<h2><a class="header-anchor" href="#java7的泛型类型推断改进"><span></span></a><a href="#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">#</a> java7的泛型类型推断改进</h2>
<p>在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> myMap </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>你可能觉得:老子在声明变量的的时候已经指明了参数类型，为毛还要在初始化对象时再指定? 幸好，在Java SE 7中，这种方式得以改进，现在你可以使用如下语句进行声明并赋值:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> myMap </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //注意后面的"&lt;&gt;"</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>在这条语句中，编译器会根据变量声明时的泛型类型自动推断出实例化HashMap时的泛型类型。再次提醒一定要注意new HashMap后面的“&lt;&gt;”，只有加上这个“&lt;&gt;”才表示是自动类型推断，否则就是非泛型类型的HashMap，并且在使用编译器编译源代码时会给出一个警告提示。</p>
<p>但是: Java SE 7在创建泛型实例时的类型推断是有限制的: 只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。例如: 下面的例子在java 7无法正确编译(但现在在java8里面可以编译，因为根据方法参数来自动推断泛型的类型):</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> list </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"A"</span><span style="color:#ABB2BF">);</span><span style="color:#7F848E;font-style:italic">// 由于addAll期望获得Collection&lt;? extends String&gt;类型的参数，因此下面的语句无法通过</span></span>
<span class="line"><span style="color:#E5C07B">list</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAll</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;&gt;());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#java8的泛型类型推断改进"><span></span></a><a href="#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">#</a> Java8的泛型类型推断改进</h2>
<p>java8里面泛型的目标类型推断主要2个:</p>
<p>1.支持通过方法上下文推断泛型目标类型</p>
<p>2.支持在方法调用链路当中，泛型类型推断传递到最后一个方法</p>
<p>让我们看看官网的例子</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">   static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> nil</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { ... };</span></span>
<span class="line"><span style="color:#C678DD">   static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> cons</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Z</span><span style="color:#E06C75;font-style:italic"> head</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Z</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">tail</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { ... };</span></span>
<span class="line"><span style="color:#E5C07B">   E</span><span style="color:#61AFEF"> head</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> { ... }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据JEP101的特性，我们在调用上面方法的时候可以这样写</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//通过方法赋值的目标参数来自动推断泛型的类型</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nil</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//而不是显示的指定类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//List&lt;String&gt; l = List.&lt;String&gt;nil();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//通过前面方法参数类型推断泛型的类型</span></span>
<span class="line"><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cons</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">42</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">List</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">nil</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//而不是显示的指定类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">//List.cons(42, List.&lt;Integer&gt;nil());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>以上是JEP101的特性内容了，Java作为静态语言的代表者，可以说类型系统相当丰富。导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。 虽然说是小进步，但对于我们天天写代码的程序员，肯定能带来巨大的作用，至少心情更愉悦了</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 类型注解</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 类型注解</source>
      <description>理解Java 8 类型注解需理解几个问题: 注解在JDK哪个版本中出现的，可以在哪些地方用注解? 什么是类型注解? 类型注解的作用是什么? 为什么会出现类型注解(JSR308)? Java8 类型注解 什么是类型注解 类型注解的作用 类型注解向下兼容的解决方案 关于JSR 308 总结 # 什么是类型注解 注解大家都知道，从java5开始加入这一特性，...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 类型注解需理解几个问题:</p>
<ul>
<li>注解在JDK哪个版本中出现的，可以在哪些地方用注解?</li>
<li>什么是类型注解?</li>
<li>类型注解的作用是什么?</li>
<li>为什么会出现类型注解(JSR308)?</li>
</ul>
</blockquote>
<ul>
<li>Java8 类型注解
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">什么是类型注解</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%9C%E7%94%A8">类型注解的作用</a></li>
<li><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">类型注解向下兼容的解决方案</a></li>
<li><a href="#%E5%85%B3%E4%BA%8Ejsr-308">关于JSR 308</a></li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#什么是类型注解"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3">#</a> 什么是类型注解</h2>
<blockquote>
<p>注解大家都知道，从java5开始加入这一特性，发展到现在已然是遍地开花，在很多框架中得到了广泛的使用，用来简化程序中的配置。那充满争议的类型注解究竟是什么? 复杂还是便捷?</p>
</blockquote>
<ol>
<li>在java 8之前，注解只能是在声明的地方所使用，比如类，方法，属性；</li>
<li>java 8里面，注解可以应用在任何地方，比如:</li>
</ol>
<p>创建类实例</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">new</span><span style="color:#E06C75"> @</span><span style="color:#E5C07B">Interned</span><span style="color:#61AFEF"> MyObject</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>类型映射</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">myString </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E06C75"> String) str</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>implements 语句中</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> UnmodifiableList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> implements</span><span style="color:#E06C75"> @</span><span style="color:#E5C07B">Readonly</span><span style="color:#E5C07B"> List</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">@</span><span style="color:#E5C07B">Readonly</span><span style="color:#E5C07B"> T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span><span style="color:#E06C75"> … </span><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>throw exception声明</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> monitorTemperature</span><span style="color:#E06C75">() throws </span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Critical</span><span style="color:#E06C75"> TemperatureException { … }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>需要注意的是，<strong>类型注解只是语法而不是语义，并不会影响java的编译时间，加载时间，以及运行时间，也就是说，编译成class文件的时候并不包含类型注解</strong>。</p>
<h2><a class="header-anchor" href="#类型注解的作用"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%9C%E7%94%A8">#</a> 类型注解的作用</h2>
<p>先看看下面代码</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B">Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">emptyList</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">add</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"One"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2">=</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">parseInt</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"hello"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">console</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">readLine</span><span style="color:#ABB2BF">();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码编译是通过的，但运行是会分别报UnsupportedOperationException； NumberFormatException；NullPointerException异常，这些都是runtime error；</p>
<p>类型注解被用来支持在Java的程序中做强类型检查。配合插件式的check framework，可以在编译的时候检测出runtime error，以提高代码质量。这就是类型注解的作用了。</p>
<p>check framework是第三方工具，配合Java的类型注解效果就是1+1&gt;2。它可以嵌入到javac编译器里面，可以配合ant和maven使用, 地址是<a href="http://types.cs.washington.edu/checker-framework/%E3%80%82" target="_blank" rel="noopener noreferrer">http://types.cs.washington.edu/checker-framework/。</a> check framework可以找到类型注解出现的地方并检查，举个简单的例子:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> checkers.nullness.quals.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GetStarted</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> sample</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        @</span><span style="color:#E5C07B">NonNull</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> ref</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用javac编译上面的类</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">javac</span><span style="color:#D19A66"> -processor</span><span style="color:#98C379"> checkers.nullness.NullnessChecker</span><span style="color:#98C379"> GetStarted.java</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>编译是通过，但如果修改成</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> ref </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>再次编译，则出现</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">GetStarted.java:5:</span><span style="color:#98C379"> incompatible</span><span style="color:#98C379"> types.</span></span>
<span class="line"><span style="color:#61AFEF">found</span><span style="color:#98C379">   :</span><span style="color:#98C379"> @Nullable</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#98C379">nulltyp</span><span style="color:#ABB2BF">e&gt;</span></span>
<span class="line"><span style="color:#61AFEF">required:</span><span style="color:#98C379"> @NonNull</span><span style="color:#98C379"> Object</span></span>
<span class="line"><span style="color:#61AFEF">        @NonNull</span><span style="color:#98C379"> Object</span><span style="color:#98C379"> ref</span><span style="color:#98C379"> =</span><span style="color:#98C379"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">                              ^</span></span>
<span class="line"><span style="color:#61AFEF">1</span><span style="color:#98C379"> error</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#类型注解向下兼容的解决方案"><span></span></a><a href="#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E5%90%91%E4%B8%8B%E5%85%BC%E5%AE%B9%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">#</a> 类型注解向下兼容的解决方案</h2>
<p>如果你不想使用类型注解检测出来错误，则不需要processor，直接javac GetStarted.java是可以编译通过的，这是在java 8 with Type Annotation Support版本里面可以，但java 5,6,7版本都不行，因为javac编译器不知道@NonNull是什么东西，但check framework 有个向下兼容的解决方案，就是将类型注解nonnull用/**/注释起来，比如上面例子修改为</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> checkers.nullness.quals.*</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> GetStarted</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> sample</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*@NonNull*/</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> ref</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样javac编译器就会忽略掉注释块，但用check framework里面的javac编译器同样能够检测出nonnull错误。 通过类型注解+check framework我们可以看到，现在runtime error可以在编译时候就能找到。</p>
<h2><a class="header-anchor" href="#关于jsr-308"><span></span></a><a href="#%E5%85%B3%E4%BA%8Ejsr-308">#</a> 关于JSR 308</h2>
<p>JSR 308想要解决在Java 1.5注解中出现的两个问题:</p>
<ul>
<li>在句法上对注解的限制: 只能把注解写在声明的地方</li>
<li>类型系统在语义上的限制: 类型系统还做不到预防所有的bug</li>
</ul>
<p>JSR 308 通过如下方法解决上述两个问题:</p>
<ul>
<li>对Java语言的句法进行扩充，允许注解出现在更多的位置上。包括: 方法接收器(method receivers，译注: 例public int size() @Readonly { … })，泛型参数，数组，类型转换，类型测试，对象创建，类型参数绑定，类继承和throws子句。其实就是类型注解，现在是java 8的一个特性</li>
<li>通过引入可插拔的类型系统(pluggable type systems)能够创建功能更强大的注解处理器。类型检查器对带有类型限定注解的源码进行分析，一旦发现不匹配等错误之处就会产生警告信息。其实就是check framework</li>
</ul>
<p>对JSR308，有人反对，觉得更复杂更静态了，比如</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NotEmpty</span><span style="color:#E5C07B"> List</span><span style="color:#56B6C2">&lt;</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E06C75"> String</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> strings </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> ArrayList</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E06C75">@</span><span style="color:#E5C07B">NonNull</span><span style="color:#E5C07B"> String</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">()&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>换成动态语言为</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">var</span><span style="color:#E06C75"> strings </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> [</span><span style="color:#98C379">"one"</span><span style="color:#ABB2BF">,</span><span style="color:#98C379"> "two"</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>有人赞成，说到底，代码才是“最根本”的文档。代码中包含的注解清楚表明了代码编写者的意图。当没有及时更新或者有遗漏的时候，恰恰是注解中包含的意图信息，最容易在其他文档中被丢失。而且将运行时的错误转到编译阶段，不但可以加速开发进程，还可以节省测试时检查bug的时间。</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>并不是人人都喜欢这个特性，特别是动态语言比较流行的今天，所幸，java 8并不强求大家使用这个特性，反对的人可以不使用这一特性，而对代码质量有些要求比较高的人或公司可以采用JSR 308，毕竟代码才是“最基本”的文档，这句话我是赞同的。虽然代码会增多，但可以使你的代码更具有表达意义。对这个特性有何看法，大家各抒己见。。。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 重复注解</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 重复注解</source>
      <description>理解Java 8 重复注解需理解几个问题: Jdk8之前对重复注解是怎么做的? Jdk8对重复注解添加了什么支持? Java8 重复注解 什么是重复注解 JDK8之前 Jdk8重复注解 总结 # 什么是重复注解 允许在同一申明类型(类，属性，或方法)的多次使用同一个注解 # JDK8之前 java 8之前也有重复使用注解的解决方案，但可读性不是很好，比...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 重复注解需理解几个问题:</p>
<ul>
<li>Jdk8之前对重复注解是怎么做的?</li>
<li>Jdk8对重复注解添加了什么支持?</li>
</ul>
</blockquote>
<ul>
<li>Java8 重复注解
<ul>
<li>什么是重复注解
<ul>
<li><a href="#jdk8%E4%B9%8B%E5%89%8D">JDK8之前</a></li>
<li><a href="#jdk8%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">Jdk8重复注解</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#什么是重复注解"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">#</a> 什么是重复注解</h2>
<p>允许在同一申明类型(类，属性，或方法)的多次使用同一个注解</p>
<h3><a class="header-anchor" href="#jdk8之前"><span></span></a><a href="#jdk8%E4%B9%8B%E5%89%8D">#</a> JDK8之前</h3>
<p>java 8之前也有重复使用注解的解决方案，但可读性不是很好，比如下面的代码:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authority</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">     String</span><span style="color:#61AFEF"> role</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authorities</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Authority</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">value</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RepeatAnnotationUseOldVersion</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Authorities</span><span style="color:#E06C75">({</span><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Admin"</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">,@</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Manager"</span><span style="color:#E06C75">)})</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomeThing</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由另一个注解来存储重复注解，在使用时候，用存储注解Authorities来扩展重复注解。</p>
<h3><a class="header-anchor" href="#jdk8重复注解"><span></span></a><a href="#jdk8%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3">#</a> Jdk8重复注解</h3>
<p>我们再来看看java 8里面的做法:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF">@</span><span style="color:#E5C07B">Repeatable</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Authorities</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authority</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">     String</span><span style="color:#61AFEF"> role</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#ABB2BF"> @</span><span style="color:#C678DD">interface</span><span style="color:#E5C07B"> Authorities</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">    Authority</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">value</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> RepeatAnnotationUseNewVersion</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Admin"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Authority</span><span style="color:#E06C75">(</span><span style="color:#D19A66">role</span><span style="color:#56B6C2">=</span><span style="color:#98C379">"Manager"</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doSomeThing</span><span style="color:#ABB2BF">(){ }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的地方是，创建重复注解Authority时，加上@Repeatable,指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解。从上面例子看出，java 8里面做法更适合常规的思维，可读性强一点</p>
<h2><a class="header-anchor" href="#总结"><span></span></a><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</h2>
<p>JEP120没有太多内容，是一个小特性，仅仅是为了提高代码可读性。这次java 8对注解做了2个方面的改进(JEP 104,JEP120)，相信注解会比以前使用得更加频繁了。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java8 默认方法</title>
      <link>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html</link>
      <guid>https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html</guid>
      <source url="https://cactusli.net/rss.xml">Java8 默认方法</source>
      <description>理解Java 8 默认方法需理解几个问题: 为什么会出现默认方法? 接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别? 多重实现的默认方法冲突怎么办? Java8 默认方法 什么是默认方法，为什么要有默认方法 先上例子 什么是默认方法 为什么出现默认方法 java 8抽象类与接口对比 多重继承的冲突 举例子 总结 # 什么是默认方法，为什么...</description>
      <category>Java</category>
      <pubDate>Sun, 17 Mar 2024 15:06:55 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>理解Java 8 默认方法需理解几个问题:</p>
<ul>
<li>为什么会出现默认方法?</li>
<li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li>
<li>多重实现的默认方法冲突怎么办?</li>
</ul>
</blockquote>
<ul>
<li>Java8 默认方法
<ul>
<li>什么是默认方法，为什么要有默认方法
<ul>
<li><a href="#%E5%85%88%E4%B8%8A%E4%BE%8B%E5%AD%90">先上例子</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">什么是默认方法</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BA%E7%8E%B0%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">为什么出现默认方法</a></li>
</ul>
</li>
<li><a href="#java-8%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94">java 8抽象类与接口对比</a></li>
<li>多重继承的冲突
<ul>
<li><a href="#%E4%B8%BE%E4%BE%8B%E5%AD%90">举例子</a></li>
</ul>
</li>
<li><a href="#%E6%80%BB%E7%BB%93">总结</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#什么是默认方法-为什么要有默认方法"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">#</a> 什么是默认方法，为什么要有默认方法</h2>
<h3><a class="header-anchor" href="#先上例子"><span></span></a><a href="#%E5%85%88%E4%B8%8A%E4%BE%8B%E5%AD%90">#</a> 先上例子</h3>
<p>一个接口A，Clazz类实现了接口A。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> interface</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    default</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> foo</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">       System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Calling A.foo()"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Clazz</span><span style="color:#C678DD"> implements</span><span style="color:#E5C07B"> A</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">       Clazz</span><span style="color:#E06C75"> clazz</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Clazz</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">       clazz</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">foo</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic">//调用A.foo()</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码是可以编译的，即使Clazz类并没有实现foo()方法。在接口A中提供了foo()方法的默认实现。</p>
<h3><a class="header-anchor" href="#什么是默认方法"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">#</a> 什么是默认方法</h3>
<p>简单说，就是接口可以有实现方法，而且不需要实现类去实现其方法。只需在方法名前面加个default关键字即可。</p>
<h3><a class="header-anchor" href="#为什么出现默认方法"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%87%BA%E7%8E%B0%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">#</a> 为什么出现默认方法</h3>
<p>为什么要有这个特性? 首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的java 8之前的集合框架没有foreach方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。</p>
<h2><a class="header-anchor" href="#java-8抽象类与接口对比"><span></span></a><a href="#java-8%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%AF%B9%E6%AF%94">#</a> java 8抽象类与接口对比</h2>
<p>这一个功能特性出来后，很多同学都反应了，java 8的接口都有实现方法了，跟抽象类还有什么区别? 其实还是有的，请看下表对比。。</p>
<p>| 相同点                                                       | 不同点                                                       |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>ArrayList 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">ArrayList 源码解析</source>
      <description>本文主要对ArrayList进行源码解析。 ArrayList 源码解析 概述 ArrayList的实现 底层数据结构 构造函数 自动扩容 add(), addAll() set() get() remove() trimToSize() indexOf(), lastIndexOf() Fail-Fast机制: 参考 # 概述 ArrayList实现...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对ArrayList进行源码解析。</p>
</blockquote>
<ul>
<li>ArrayList 源码解析
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li>ArrayList的实现
<ul>
<li><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">底层数据结构</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li><a href="#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9">自动扩容</a></li>
<li><a href="#add-addall">add(), addAll()</a></li>
<li><a href="#set">set()</a></li>
<li><a href="#get">get()</a></li>
<li><a href="#remove">remove()</a></li>
<li><a href="#trimtosize">trimToSize()</a></li>
<li><a href="#indexof-lastindexof">indexOf(), lastIndexOf()</a></li>
<li><a href="#fail-fast%E6%9C%BA%E5%88%B6">Fail-Fast机制:</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h2>
<p><em>ArrayList</em>实现了<em>List</em>接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入<code>null</code>元素，底层通过<strong>数组实现</strong>。除该类未实现同步外，其余跟<em>Vector</em>大致相同。每个<em>ArrayList</em>都有一个容量(capacity)，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。前面已经提过，Java泛型只是编译器提供的语法糖，所以这里的数组是一个Object数组，以便能够容纳任何类型的对象。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png" alt="ArrayList_base" tabindex="0" loading="lazy"><figcaption>ArrayList_base</figcaption></figure>
<p>size(), isEmpty(), get(), set()方法均能在常数时间内完成，add()方法的时间开销跟插入位置有关，addAll()方法的时间开销跟添加元素的个数成正比。其余方法大都是线性时间。</p>
<p>为追求效率，ArrayList没有实现同步(synchronized)，如果需要多个线程并发访问，用户可以手动同步，也可使用Vector替代。</p>
<h2><a class="header-anchor" href="#arraylist的实现"><span></span></a><a href="#arraylist%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> ArrayList的实现</h2>
<h3><a class="header-anchor" href="#底层数据结构"><span></span></a><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 底层数据结构</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The array buffer into which the elements of the ArrayList are stored.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The capacity of the ArrayList is the length of this array buffer. Any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    transient</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[] elementData</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // non-private to simplify nested class access</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The size of the ArrayList (the number of elements it contains).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@serial</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#构造函数"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an empty list with the specified initial capacity.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic">  initialCapacity</span><span style="color:#7F848E;font-style:italic">  the initial capacity of the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IllegalArgumentException</span><span style="color:#7F848E;font-style:italic"> if the specified initial capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         is negative</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> initialCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[initialCapacity]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (initialCapacity </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#E06C75">(</span><span style="color:#98C379">"Illegal Capacity: "</span><span style="color:#56B6C2">+</span></span>
<span class="line"><span style="color:#E06C75">                                               initialCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an empty list with an initial capacity of ten.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * collection, in the order they are returned by the collection's</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> ArrayList</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E06C75">        elementData </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((size </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">elementData</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getClass</span><span style="color:#ABB2BF">()</span><span style="color:#56B6C2"> !=</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75">[]</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                elementData </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elementData, size, </span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">[].</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // replace with empty array.</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">elementData</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#自动扩容"><span></span></a><a href="#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9">#</a> 自动扩容</h3>
<p>每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p>
<p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * necessary, to ensure that it can hold at least the number of elements</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified by the minimum capacity argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic">   minCapacity</span><span style="color:#7F848E;font-style:italic">   the desired minimum capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureCapacity</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> minExpand </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (elementData </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // any size if not default element table</span></span>
<span class="line"><span style="color:#C678DD">            ?</span><span style="color:#D19A66"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // larger than default for default empty table. It's already</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // supposed to be at default size.</span></span>
<span class="line"><span style="color:#C678DD">            :</span><span style="color:#E06C75"> DEFAULT_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> minExpand) {</span></span>
<span class="line"><span style="color:#61AFEF">            ensureExplicitCapacity</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureCapacityInternal</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (elementData </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></span>
<span class="line"><span style="color:#E06C75">            minCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Math</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">max</span><span style="color:#ABB2BF">(DEFAULT_CAPACITY, minCapacity);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        ensureExplicitCapacity</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> ensureExplicitCapacity</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">            grow</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The maximum size of array to allocate.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Some VMs reserve some header words in an array.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Attempts to allocate larger arrays may result in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * OutOfMemoryError: Requested array size exceeds VM limit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66"> 8</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Increases the capacity to ensure that it can hold at least the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * number of elements specified by the minimum capacity argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> minCapacity</span><span style="color:#7F848E;font-style:italic"> the desired minimum capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> grow</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldCapacity </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> (oldCapacity </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> minCapacity</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (newCapacity </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            newCapacity </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#E06C75">(minCapacity)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // minCapacity is usually close to size, so this is a win:</span></span>
<span class="line"><span style="color:#E06C75">        elementData </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elementData, newCapacity);</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hugeCapacity</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// overflow</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> OutOfMemoryError</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (minCapacity </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> MAX_ARRAY_SIZE) </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E5C07B">            Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#C678DD"> :</span></span>
<span class="line"><span style="color:#E06C75">            MAX_ARRAY_SIZE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_grow.png" alt="ArrayList_grow" tabindex="0" loading="lazy"><figcaption>ArrayList_grow</figcaption></figure>
<h3><a class="header-anchor" href="#add-addall"><span></span></a><a href="#add-addall">#</a> add(), addAll()</h3>
<p>跟C++ 的<em>vector</em>不同，<em>ArrayList</em>没有<code>push_back()</code>方法，对应的方法是<code>add(E e)</code>，<em>ArrayList</em>也没有<code>insert()</code>方法，对应的方法是<code>add(int index, E e)</code>。这两个方法都是向容器中添加新元素，这可能会导致<em>capacity</em>不足，因此在添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容。扩容操作最终是通过<code>grow()</code>方法完成的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends the specified element to the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> element to be appended to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount!!</span></span>
<span class="line"><span style="color:#E06C75">        elementData[size</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the specified position in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list. Shifts the element currently at that position (if any) and</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * any subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        rangeCheckForAdd</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount!!</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elementData, index, elementData, index </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">                         size </span><span style="color:#56B6C2">-</span><span style="color:#ABB2BF"> index);</span></span>
<span class="line"><span style="color:#E06C75">        elementData[index] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_add.png" alt="ArrayList_add" tabindex="0" loading="lazy"><figcaption>ArrayList_add</figcaption></figure>
<p><code>add(int index, E e)</code>需要先对元素进行移动，然后完成插入操作，也就意味着该方法有着线性的时间复杂度。</p>
<p><code>addAll()</code>方法能够一次添加多个元素，根据位置不同也有两个版本，一个是在末尾添加的<code>addAll(Collection&lt;? extends E&gt; c)</code>方法，一个是从指定位置开始插入的<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>方法。跟<code>add()</code>方法类似，在插入之前也需要进行空间检查，如果需要则自动扩容；如果从指定位置插入，也会存在移动元素的情况。 <code>addAll()</code>的时间复杂度不仅跟插入元素的多少有关，也跟插入的位置相关。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends all of the elements in the specified collection to the end of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this list, in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified collection's Iterator.  The behavior of this operation is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * undefined if the specified collection is modified while the operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * is in progress.  (This implies that the behavior of this call is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * undefined if the specified collection is this list, and this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list is nonempty.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> numNew)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(a, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, elementData, size, numNew);</span></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> numNew</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts all of the elements in the specified collection into this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list, starting at the specified position.  Shifts the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * currently at that position (if any) and any subsequent elements to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the right (increases their indices).  The new elements will appear</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in the list in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified collection's iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which to insert the first element from the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *              specified collection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#61AFEF">        rangeCheckForAdd</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        ensureCapacityInternal</span><span style="color:#E06C75">(size </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> numNew)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // Increments modCount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numMoved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (numMoved </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elementData, index, elementData, index </span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF"> numNew,</span></span>
<span class="line"><span style="color:#ABB2BF">                             numMoved);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(a, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, elementData, index, numNew);</span></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> numNew</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#set"><span></span></a><a href="#set">#</a> set()</h3>
<p>既然底层是一个数组<em>ArrayList</em>的<code>set()</code>方法也就变得非常简单，直接对数组的指定位置赋值即可。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">    rangeCheck</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//下标越界检查</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> elementData</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    elementData[index] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//赋值到指定位置，复制的仅仅是引用</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h3>
<p><code>get()</code>方法同样很简单，唯一要注意的是由于底层数组是Object[]，得到元素后需要进行类型转换。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">    rangeCheck</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (E) elementData[index]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//注意类型转换</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h3>
<p><code>remove()</code>方法也有两个版本，一个是<code>remove(int index)</code>删除指定位置的元素，另一个是<code>remove(Object o)</code>删除第一个满足<code>o.equals(elementData[index])</code>的元素。删除操作是<code>add()</code>操作的逆过程，需要将删除点之后的元素向前移动一个位置。需要注意的是为了让GC起作用，必须显式的为最后一个位置赋<code>null</code>值。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">    rangeCheck</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> elementData</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> numMoved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (numMoved </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">arraycopy</span><span style="color:#ABB2BF">(elementData, index</span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, elementData, index, numMoved);</span></span>
<span class="line"><span style="color:#E06C75">    elementData[</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">size] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> //清除该位置的引用，让GC起作用</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Java GC这里需要特别说明一下，<strong>有了垃圾收集器并不意味着一定不会有内存泄漏</strong>。对象能否被GC的依据是是否还有引用指向它，上面代码中如果不手动赋<code>null</code>值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p>
<h3><a class="header-anchor" href="#trimtosize"><span></span></a><a href="#trimtosize">#</a> trimToSize()</h3>
<p>ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize方法来实现。代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list's current size.  An application can use this operation to minimize</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> trimToSize</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&lt;</span><span style="color:#E5C07B"> elementData</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            elementData </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">              ?</span><span style="color:#E5C07B"> EMPTY_ELEMENTDATA</span></span>
<span class="line"><span style="color:#C678DD">              :</span><span style="color:#E5C07B"> Arrays</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">copyOf</span><span style="color:#ABB2BF">(elementData, size);</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#indexof-lastindexof"><span></span></a><a href="#indexof-lastindexof">#</a> indexOf(), lastIndexOf()</h3>
<p>获取元素的第一次出现的index:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the first occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> indexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (elementData[i]</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(elementData[i])</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取元素的最后一次出现的index:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the last occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> lastIndexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (elementData[i]</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(elementData[i])</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#fail-fast机制"><span></span></a><a href="#fail-fast%E6%9C%BA%E5%88%B6">#</a> Fail-Fast机制:</h3>
<p>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png" type="image/png"/>
    </item>
    <item>
      <title>HashSet &amp; HashMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">HashSet &amp; HashMap 源码解析</source>
      <description>本文主要对HashSet &amp; HashMap 进行源码解析。 HashSet &amp; HashMap 源码解析 Java7 HashMap 概述 get() put() remove() Java8 HashMap put 过程分析 数组扩容 get 过程分析 HashSet # Java7 HashMap # 概述 之所以把HashSet和HashMap...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对HashSet &amp; HashMap 进行源码解析。</p>
</blockquote>
<ul>
<li>HashSet &amp; HashMap 源码解析
<ul>
<li>Java7 HashMap
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li><a href="#get">get()</a></li>
<li><a href="#put">put()</a></li>
<li><a href="#remove">remove()</a></li>
</ul>
</li>
<li>Java8 HashMap
<ul>
<li><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">put 过程分析</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">数组扩容</a></li>
<li><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">get 过程分析</a></li>
</ul>
</li>
<li><a href="#hashset">HashSet</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java7-hashmap"><span></span></a><a href="#java7-hashmap">#</a> Java7 HashMap</h2>
<h3><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h3>
<p>之所以把<em>HashSet</em>和<em>HashMap</em>放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<em>HashSet</em>里面有一个<em>HashMap</em>(适配器模式)。因此本文将重点分析<em>HashMap</em>。</p>
<p><em>HashMap</em>实现了<em>Map</em>接口，即允许放入<code>key</code>为<code>null</code>的元素，也允许插入<code>value</code>为<code>null</code>的元素；除该类未实现同步外，其余跟<code>Hashtable</code>大致相同；跟<em>TreeMap</em>不同，该容器不保证元素顺序，根据需要该容器可能会对元素重新哈希，元素的顺序也会被重新打散，因此不同时间迭代同一个<em>HashMap</em>的顺序可能会不同。 根据对冲突的处理方式不同，哈希表有两种实现方式，一种开放地址方式(Open addressing)，另一种是冲突链表方式(Separate chaining with linked lists)。<strong>Java7 HashMap采用的是冲突链表方式</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png" alt="HashMap_base" tabindex="0" loading="lazy"><figcaption>HashMap_base</figcaption></figure>
<p>从上图容易看出，如果选择合适的哈希函数，<code>put()</code>和<code>get()</code>方法可以在常数时间内完成。但在对<em>HashMap</em>进行迭代时，需要遍历整个table以及后面跟的冲突链表。因此对于迭代比较频繁的场景，不宜将<em>HashMap</em>的初始大小设的过大。</p>
<p>有两个参数可以影响<em>HashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p>
<p>将对象放入到<em>HashMap</em>或<em>HashSet</em>中时，有两个方法需要特别关心: <code>hashCode()</code>和<code>equals()</code>。<strong><code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”</strong>。所以，如果要将自定义的对象放入到<code>HashMap</code>或<code>HashSet</code>中，需要**@Override** <code>hashCode()</code>和<code>equals()</code>方法。</p>
<h3><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h3>
<p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>，该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.getValue()</code>。因此<code>getEntry()</code>是算法的核心。 算法思想是首先通过<code>hash()</code>函数得到对应<code>bucket</code>的下标，然后依次遍历冲突链表，通过<code>key.equals(k)</code>方法来判断是否是要找的那个<code>entry</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_getEntry.png" alt="HashMap_getEntry" tabindex="0" loading="lazy"><figcaption>HashMap_getEntry</figcaption></figure>
<p>上图中<code>hash(k)&amp;(table.length-1)</code>等价于<code>hash(k)%table.length</code>，原因是<em>HashMap</em>要求<code>table.length</code>必须是2的指数，因此<code>table.length-1</code>就是二进制低位全是1，跟<code>hash(k)</code>相与会将哈希值的高位全抹掉，剩下的就是余数了。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//getEntry()方法</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[hash</span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//得到冲突链表</span></span>
<span class="line"><span style="color:#E06C75">         e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//依次遍历冲突链表中的每个entry</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //依据equals()方法判断是否相等</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#put"><span></span></a><a href="#put">#</a> put()</h3>
<p><code>put(K key, V value)</code>方法是将指定的<code>key, value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>getEntry()</code>方法；如果没有找到，则会通过<code>addEntry(int hash, K key, V value, int bucketIndex)</code>方法插入新的<code>entry</code>，插入方式为<strong>头插法</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_addEntry.png" alt="HashMap_addEntry" tabindex="0" loading="lazy"><figcaption>HashMap_addEntry</figcaption></figure>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//addEntry()</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> addEntry</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> bucketIndex) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((size </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> threshold) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> table[bucketIndex])) {</span></span>
<span class="line"><span style="color:#61AFEF">        resize</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2</span><span style="color:#56B6C2"> *</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//自动扩容，并重新哈希</span></span>
<span class="line"><span style="color:#E06C75">        hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> key) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key) </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        bucketIndex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//hash%table.length</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //在冲突链表头部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[bucketIndex]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table[bucketIndex] </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Entry</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h3>
<p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法的具体逻辑是在<code>removeEntryForKey(Object key)</code>里实现的。<code>removeEntryForKey()</code>方法会首先找到<code>key</code>值对应的<code>entry</code>，然后删除该<code>entry</code>(修改链表的相应引用)。查找过程跟<code>getEntry()</code>过程类似。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_removeEntryForKey.png" alt="HashMap_removeEntryForKey" tabindex="0" loading="lazy"><figcaption>HashMap_removeEntryForKey</figcaption></figure>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//removeEntryForKey()</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> removeEntryForKey</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> indexFor</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//hash&amp;(table.length-1)</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[i]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//得到冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">//遍历冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">))) {</span><span style="color:#7F848E;font-style:italic">//找到要删除的entry</span></span>
<span class="line"><span style="color:#E06C75">            modCount</span><span style="color:#ABB2BF">++;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> e) table[i] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//删除的是冲突链表的第一个entry</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#E5C07B"> prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#java8-hashmap"><span></span></a><a href="#java8-hashmap">#</a> Java8 HashMap</h2>
<p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 <strong>数组+链表+红黑树</strong> 组成。</p>
<p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。</p>
<p>为了降低这部分的开销，在 Java8 中，当链表中的元素达到了 8 个时，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p>
<p>来一张图简单示意一下吧：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-collection-hashmap8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>注意，上图是示意图，主要是描述结构，不会达到这个状态的，因为这么多数据的时候早就扩容了。</p>
<p>下面，我们还是用代码来介绍吧，个人感觉，Java8 的源码可读性要差一些，不过精简一些。</p>
<p>Java7 中使用 Entry 来代表每个 HashMap 中的数据节点，Java8 中使用 Node，基本没有区别，都是 key，value，hash 和 next 这四个属性，不过，Node 只能用于链表的情况，红黑树的情况需要使用 TreeNode。</p>
<p>我们根据数组元素中，第一个节点数据类型是 Node 还是 TreeNode 来判断该位置下是链表还是红黑树的。</p>
<h3><a class="header-anchor" href="#put-过程分析"><span></span></a><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> put 过程分析</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> putVal</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> true</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 第四个参数 onlyIfAbsent 如果是 true，那么只有在不存在该 key 时才会进行 put 操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 第五个参数 evict 我们这里不关心</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> putVal</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> boolean</span><span style="color:#E06C75"> onlyIfAbsent</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">               boolean</span><span style="color:#E06C75"> evict) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 第一次 put 值的时候，会触发下面的 resize()，类似 java7 的第一次 put 也要初始化数组长度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 第一次 resize 和后续的扩容有些不一样，因为这次是数组从 null 初始化到默认的 16 或自定义的初始容量</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> ||</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">        n </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (tab </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> resize</span><span style="color:#E06C75">())</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 找到具体的数组下标，如果此位置没有值，那么直接初始化一下 Node 并放置在这个位置就可以了</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> hash]) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">        tab[i] </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> newNode</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">// 数组该位置有数据</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 首先，判断该位置的第一个数据和我们要插入的数据，key 是不是"相等"，如果是，取出这个节点</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#E06C75">            e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 如果该节点是代表红黑树的节点，调用红黑树的插值方法，本文不展开说红黑树</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeNode)</span></span>
<span class="line"><span style="color:#E06C75">            e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">TreeNode</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)p)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">putTreeVal</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, tab, hash, key, value);</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 到这里，说明数组该位置上是一个链表</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> binCount </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">binCount) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 插入到链表的最后面(Java7 是插入到链表的最前面)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                    p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> newNode</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // TREEIFY_THRESHOLD 为 8，所以，如果新插入的值是链表中的第 8 个</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 会触发下面的 treeifyBin，也就是将链表转换为红黑树</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (binCount </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> TREEIFY_THRESHOLD </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// -1 for 1st</span></span>
<span class="line"><span style="color:#61AFEF">                        treeifyBin</span><span style="color:#E06C75">(tab</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hash)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果在该链表中找到了"相等"的 key(== 或 equals)</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                    ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 此时 break，那么 e 为链表中[与要插入的新值的 key "相等"]的 node</span></span>
<span class="line"><span style="color:#C678DD">                    break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // e!=null 说明存在旧值的key与要插入的key"相等"</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 对于我们分析的put操作，下面这个 if 其实就是进行 "值覆盖"，然后返回旧值</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">            V</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">onlyIfAbsent </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> oldValue </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">            afterNodeAccess</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> oldValue</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ++</span><span style="color:#E06C75">modCount</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 如果 HashMap 由于新插入这个值导致 size 已经超过了阈值，需要进行扩容</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">size </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> threshold)</span></span>
<span class="line"><span style="color:#61AFEF">        resize</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    afterNodeInsertion</span><span style="color:#E06C75">(evict)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 Java7 稍微有点不一样的地方就是，Java7 是先扩容后插入新值的，Java8 先插值再扩容，不过这个不重要。</p>
<h3><a class="header-anchor" href="#数组扩容"><span></span></a><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">#</a> 数组扩容</h3>
<p>resize() 方法用于初始化数组或数组扩容，每次扩容后，容量为原来的 2 倍，并进行数据迁移。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[] </span><span style="color:#61AFEF">resize</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] oldTab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (oldTab </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> oldTab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> oldThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> threshold</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> newCap</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> newThr </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (oldCap </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) { </span><span style="color:#7F848E;font-style:italic">// 对应数组扩容</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (oldCap </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> MAXIMUM_CAPACITY) {</span></span>
<span class="line"><span style="color:#E06C75">            threshold </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> oldTab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 将数组大小扩大一倍</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> ((newCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldCap </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> MAXIMUM_CAPACITY </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                 oldCap </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> DEFAULT_INITIAL_CAPACITY)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 将阈值扩大一倍</span></span>
<span class="line"><span style="color:#E06C75">            newThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldThr </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // double threshold</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (oldThr </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#7F848E;font-style:italic">// 对应使用 new HashMap(int initialCapacity) 初始化后，第一次 put 的时候</span></span>
<span class="line"><span style="color:#E06C75">        newCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldThr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">// 对应使用 new HashMap() 初始化后，第一次 put 的时候</span></span>
<span class="line"><span style="color:#E06C75">        newCap </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> DEFAULT_INITIAL_CAPACITY</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        newThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)(DEFAULT_LOAD_FACTOR </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> DEFAULT_INITIAL_CAPACITY)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (newThr </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        float</span><span style="color:#E06C75"> ft </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">float</span><span style="color:#E06C75">)newCap </span><span style="color:#56B6C2">*</span><span style="color:#E06C75"> loadFactor</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        newThr </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (newCap </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> MAXIMUM_CAPACITY </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> ft </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">float</span><span style="color:#E06C75">)MAXIMUM_CAPACITY </span><span style="color:#C678DD">?</span></span>
<span class="line"><span style="color:#E06C75">                  (</span><span style="color:#C678DD">int</span><span style="color:#E06C75">)ft </span><span style="color:#C678DD">:</span><span style="color:#E5C07B"> Integer</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">MAX_VALUE</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    threshold </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newThr</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 用新的数组大小初始化新的数组</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] newTab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">[])</span><span style="color:#C678DD">new</span><span style="color:#E5C07B"> Node</span><span style="color:#E06C75">[newCap]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newTab</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // 如果是初始化数组，到这里就结束了，返回 newTab 即可</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (oldTab </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 开始遍历原数组，进行数据迁移。</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> j </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> oldCap</span><span style="color:#ABB2BF">;</span><span style="color:#ABB2BF"> ++</span><span style="color:#E06C75">j) {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> oldTab[j]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                oldTab[j] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果该数组位置上只有单个元素，那就简单了，简单迁移这个元素就可以了</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                    newTab[</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> (newCap </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                // 如果是红黑树，具体我们就不展开了</span></span>
<span class="line"><span style="color:#C678DD">                else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (e </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeNode)</span></span>
<span class="line"><span style="color:#E06C75">                    ((</span><span style="color:#E5C07B">TreeNode</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)e)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">split</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, newTab, j, oldCap);</span></span>
<span class="line"><span style="color:#C678DD">                else</span><span style="color:#E06C75"> { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 这块是处理链表的情况，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // 需要将此链表拆成两个链表，放到新的数组中，并且保留原来的先后顺序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                    // loHead、loTail 对应一条链表，hiHead、hiTail 对应另一条链表，代码还是比较简单的</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> loHead </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> loTail </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> hiHead </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> hiTail </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">                    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">                        next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                        if</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> &amp;</span><span style="color:#E06C75"> oldCap) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (loTail </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                loHead </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            else</span></span>
<span class="line"><span style="color:#E5C07B">                                loTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            loTail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#C678DD">                        else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                            if</span><span style="color:#E06C75"> (hiTail </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                                hiHead </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                            else</span></span>
<span class="line"><span style="color:#E5C07B">                                hiTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                            hiTail </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                        }</span></span>
<span class="line"><span style="color:#E06C75">                    } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (loTail </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        loTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 第一条链表</span></span>
<span class="line"><span style="color:#E06C75">                        newTab[j] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> loHead</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#C678DD">                    if</span><span style="color:#E06C75"> (hiTail </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">                        hiTail</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">                        // 第二条链表的新的位置是 j + oldCap，这个很好理解</span></span>
<span class="line"><span style="color:#E06C75">                        newTab[j </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> oldCap] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> hiHead</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                    }</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> newTab</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#get-过程分析"><span></span></a><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> get 过程分析</h3>
<p>相对于 put 来说，get 真的太简单了。</p>
<ul>
<li>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)</li>
<li>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步</li>
<li>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步</li>
<li>遍历链表，直到找到相等(==或equals)的 key</li>
</ul>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getNode</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key)) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> ?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getNode</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75">[] tab</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> n</span><span style="color:#ABB2BF">;</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((tab </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> (n </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> tab</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">        (first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> tab[(n </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> hash]) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 判断第一个节点是不是就是需要的</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">first</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#7F848E;font-style:italic"> // always check first node</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> first</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> first</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 判断是否是红黑树</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (first </span><span style="color:#C678DD">instanceof</span><span style="color:#E06C75"> TreeNode)</span></span>
<span class="line"><span style="color:#C678DD">                return</span><span style="color:#E06C75"> ((</span><span style="color:#E5C07B">TreeNode</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">)first)</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getTreeNode</span><span style="color:#ABB2BF">(hash, key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 链表遍历</span></span>
<span class="line"><span style="color:#C678DD">            do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">                    ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">)))</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> ((e </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2><a class="header-anchor" href="#hashset"><span></span></a><a href="#hashset">#</a> HashSet</h2>
<p>前面已经说过<em>HashSet</em>是对<em>HashMap</em>的简单包装，对<em>HashSet</em>的函数调用都会转换成合适的<em>HashMap</em>方法，因此<em>HashSet</em>的实现非常简单，只有不到300行代码。这里不再赘述。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//HashSet是对HashMap的简单包装</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> map</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//HashSet里面有一个HashMap</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Dummy value to associate with an Object in the backing Map</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> PRESENT </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> HashSet</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        map </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> HashMap</span><span style="color:#ABB2BF">&lt;&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span><span style="color:#7F848E;font-style:italic">//简单的方法转换</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, PRESENT)</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png" type="image/png"/>
    </item>
    <item>
      <title>LinkedHashSet&amp;Map 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/LinkedHashSet_Map%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/LinkedHashSet_Map%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">LinkedHashSet&amp;Map 源码解析</source>
      <description>本文主要对LinkedHashSet&amp;Map 源码解析。 LinkedHashSet&amp;Map 源码解析 Java 7 - LinkedHashSet&amp;Map 总体介绍 方法剖析 get() put() remove() LinkedHashSet LinkedHashMap经典用法 # Java 7 - LinkedHashSet&amp;Map # 总体介绍...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对LinkedHashSet&amp;Map 源码解析。</p>
</blockquote>
<ul>
<li>LinkedHashSet&amp;Map 源码解析
<ul>
<li>Java 7 - LinkedHashSet&amp;Map
<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">总体介绍</a></li>
<li>方法剖析
<ul>
<li><a href="#get">get()</a></li>
<li><a href="#put">put()</a></li>
<li><a href="#remove">remove()</a></li>
</ul>
</li>
<li><a href="#linkedhashset">LinkedHashSet</a></li>
<li><a href="#linkedhashmap%E7%BB%8F%E5%85%B8%E7%94%A8%E6%B3%95">LinkedHashMap经典用法</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-7-linkedhashset-map"><span></span></a><a href="#java-7-linkedhashset-map">#</a> Java 7 - LinkedHashSet&amp;Map</h2>
<h3><a class="header-anchor" href="#总体介绍"><span></span></a><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">#</a> 总体介绍</h3>
<p>如果你已看过前面关于<em>HashSet</em>和<em>HashMap</em>，以及<em>TreeSet</em>和<em>TreeMap</em>的讲解，一定能够想到本文将要讲解的<em>LinkedHashSet</em>和<em>LinkedHashMap</em>其实也是一回事。<em>LinkedHashSet</em>和<em>LinkedHashMap</em>在Java里也有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<strong>LinkedHashSet里面有一个LinkedHashMap(适配器模式)</strong>。因此本文将重点分析<em>LinkedHashMap</em>。</p>
<p><em>LinkedHashMap</em>实现了<em>Map</em>接口，即允许放入<code>key</code>为<code>null</code>的元素，也允许插入<code>value</code>为<code>null</code>的元素。从名字上可以看出该容器是<em>linked list</em>和<em>HashMap</em>的混合体，也就是说它同时满足<em>HashMap</em>和<em>linked list</em>的某些特性。<strong>可将*LinkedHashMap*看作采用*linked list*增强的*HashMap*。</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_base.png" alt="LinkedHashMap_base.png" tabindex="0" loading="lazy"><figcaption>LinkedHashMap_base.png</figcaption></figure>
<p>事实上<em>LinkedHashMap</em>是<em>HashMap</em>的直接子类，<strong>二者唯一的区别是*LinkedHashMap*在*HashMap*的基础上，采用双向链表(doubly-linked list)的形式将所有<code>entry</code>连接起来，这样是为保证元素的迭代顺序跟插入顺序相同</strong>。上图给出了<em>LinkedHashMap</em>的结构图，主体部分跟<em>HashMap</em>完全一样，多了<code>header</code>指向双向链表的头部(是一个哑元)，<strong>该双向链表的迭代顺序就是<code>entry</code>的插入顺序</strong>。</p>
<p>除了可以保迭代历顺序，这种结构还有一个好处 : <strong>迭代*LinkedHashMap*时不需要像*HashMap*那样遍历整个<code>table</code>，而只需要直接遍历<code>header</code>指向的双向链表即可</strong>，也就是说<em>LinkedHashMap</em>的迭代时间就只跟<code>entry</code>的个数相关，而跟<code>table</code>的大小无关。</p>
<p>有两个参数可以影响<em>LinkedHashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p>
<p>将对象放入到<em>LinkedHashMap</em>或<em>LinkedHashSet</em>中时，有两个方法需要特别关心: <code>hashCode()</code>和<code>equals()</code>。<strong><code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”</strong>。所以，如果要将自定义的对象放入到<code>LinkedHashMap</code>或<code>LinkedHashSet</code>中，需要@Override <code>hashCode()</code>和<code>equals()</code>方法。</p>
<p>通过如下方式可以得到一个跟源<em>Map</em> <strong>迭代顺序</strong>一样的<em>LinkedHashMap</em>:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> foo</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Map</span><span style="color:#E06C75"> m) {</span></span>
<span class="line"><span style="color:#E5C07B">    Map</span><span style="color:#E06C75"> copy </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> LinkedHashMap</span><span style="color:#E06C75">(m)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    ...</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出于性能原因，<em>LinkedHashMap</em>是非同步的(not synchronized)，如果需要在多线程环境使用，需要程序员手动同步；或者通过如下方式将<em>LinkedHashMap</em>包装成(wrapped)同步的:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>Map m = Collections.synchronizedMap(new LinkedHashMap(...));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#方法剖析"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">#</a> 方法剖析</h3>
<h4><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h4>
<p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>。该方法跟<code>HashMap.get()</code>方法的流程几乎完全一样，读者可自行[参考前文在新窗口打开](<a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet" target="_blank" rel="noopener noreferrer">https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet</a> and <a href="http://HashMap.md#get" target="_blank" rel="noopener noreferrer">HashMap.md#get</a>)，这里不再赘述。</p>
<h4><a class="header-anchor" href="#put"><span></span></a><a href="#put">#</a> put()</h4>
<p><code>put(K key, V value)</code>方法是将指定的<code>key, value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>get()</code>方法；如果没有找到，则会通过<code>addEntry(int hash, K key, V value, int bucketIndex)</code>方法插入新的<code>entry</code>。</p>
<p>注意，这里的<strong>插入有两重含义</strong>:</p>
<blockquote>
<ol>
<li>从<code>table</code>的角度看，新的<code>entry</code>需要插入到对应的<code>bucket</code>里，当有哈希冲突时，采用头插法将新的<code>entry</code>插入到冲突链表的头部。</li>
<li>从<code>header</code>的角度看，新的<code>entry</code>需要插入到双向链表的尾部。</li>
</ol>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_addEntry.png" alt="LinkedHashMap_addEntry.png" tabindex="0" loading="lazy"><figcaption>LinkedHashMap_addEntry.png</figcaption></figure>
<p><code>addEntry()</code>代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// LinkedHashMap.addEntry()</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> addEntry</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> bucketIndex) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> ((size </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E06C75"> threshold) </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> table[bucketIndex])) {</span></span>
<span class="line"><span style="color:#61AFEF">        resize</span><span style="color:#E06C75">(</span><span style="color:#D19A66">2</span><span style="color:#56B6C2"> *</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 自动扩容，并重新哈希</span></span>
<span class="line"><span style="color:#E06C75">        hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#D19A66">null</span><span style="color:#56B6C2"> !=</span><span style="color:#E06C75"> key) </span><span style="color:#C678DD">?</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key) </span><span style="color:#C678DD">:</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        bucketIndex </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#56B6C2">-</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// hash%table.length</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 1.在冲突链表头部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B">    HashMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> old </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[bucketIndex]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Entry</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> old)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    table[bucketIndex] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 2.在双向链表的尾部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B">    e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addBefore</span><span style="color:#ABB2BF">(header);</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中用到了<code>addBefore()</code>方法将新<code>entry e</code>插入到双向链表头引用<code>header</code>的前面，这样<code>e</code>就成为双向链表中的最后一个元素。<code>addBefore()</code>的代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// LinkedHashMap.Entry.addBefor()，将this插入到existingEntry的前面</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> addBefore</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> existingEntry) {</span></span>
<span class="line"><span style="color:#E06C75">    after  </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> existingEntry</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    before </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> existingEntry</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    before</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    after</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码只是简单修改相关<code>entry</code>的引用而已。</p>
<h4><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h4>
<p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法的具体逻辑是在<code>removeEntryForKey(Object key)</code>里实现的。<code>removeEntryForKey()</code>方法会首先找到<code>key</code>值对应的<code>entry</code>，然后删除该<code>entry</code>(修改链表的相应引用)。查找过程跟<code>get()</code>方法类似。</p>
<p>注意，这里的<strong>删除也有两重含义</strong>:</p>
<blockquote>
<ol>
<li>从<code>table</code>的角度看，需要将该<code>entry</code>从对应的<code>bucket</code>里删除，如果对应的冲突链表不空，需要修改冲突链表的相应引用。</li>
<li>从<code>header</code>的角度来看，需要将该<code>entry</code>从双向链表中删除，同时修改链表中前面以及后面元素的相应引用。</li>
</ol>
</blockquote>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_removeEntryForKey.png" alt="LinkedHashMap_removeEntryForKey.png" tabindex="0" loading="lazy"><figcaption>LinkedHashMap_removeEntryForKey.png</figcaption></figure>
<p><code>removeEntryForKey()</code>对应的代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// LinkedHashMap.removeEntryForKey()，删除key值对应的entry</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> removeEntryForKey</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">	int</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> 0</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> hash</span><span style="color:#E06C75">(key)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> indexFor</span><span style="color:#E06C75">(hash</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> table</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// hash&amp;(table.length-1)</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> table[i]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 得到冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 遍历冲突链表</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">hash</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> hash </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75">            ((k </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> key </span><span style="color:#56B6C2">||</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> key</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(k)</span><span style="color:#E06C75">))) {</span><span style="color:#7F848E;font-style:italic">// 找到要删除的entry</span></span>
<span class="line"><span style="color:#E06C75">            modCount</span><span style="color:#ABB2BF">++;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 1. 将e从对应bucket的冲突链表中删除</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> e) table[i] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#E5C07B"> prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 2. 将e从双向链表中删除</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">after</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> e</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">before</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        prev </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#linkedhashset"><span></span></a><a href="#linkedhashset">#</a> LinkedHashSet</h3>
<p>前面已经说过<em>LinkedHashSet</em>是对<em>LinkedHashMap</em>的简单包装，对<em>LinkedHashSet</em>的函数调用都会转换成合适的<em>LinkedHashMap</em>方法，因此<em>LinkedHashSet</em>的实现非常简单，这里不再赘述。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> LinkedHashSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    extends</span><span style="color:#E5C07B"> HashSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Cloneable</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // LinkedHashSet里面有一个LinkedHashMap</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> LinkedHashSet</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> initialCapacity</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">float</span><span style="color:#E06C75;font-style:italic"> loadFactor</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#ABB2BF">        map </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> LinkedHashMap</span><span style="color:#ABB2BF">&lt;&gt;(initialCapacity, loadFactor);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span><span style="color:#7F848E;font-style:italic">//简单的方法转换</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, PRESENT)</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#linkedhashmap经典用法"><span></span></a><a href="#linkedhashmap%E7%BB%8F%E5%85%B8%E7%94%A8%E6%B3%95">#</a> LinkedHashMap经典用法</h3>
<p><em>LinkedHashMap</em>除了可以保证迭代顺序外，还有一个非常有用的用法: 可以轻松实现一个采用了FIFO替换策略的缓存。具体说来，LinkedHashMap有一个子类方法<code>protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code>，该方法的作用是告诉Map是否要删除“最老”的Entry，所谓最老就是当前Map中最早插入的Entry，如果该方法返回<code>true</code>，最老的那个元素就会被删除。在每次插入新元素的之后LinkedHashMap会自动询问removeEldestEntry()是否要删除最老的元素。这样只需要在子类中重载该方法，当元素个数超过一定数量时让removeEldestEntry()返回true，就能够实现一个固定大小的FIFO策略的缓存。示例代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">/** 一个固定大小的FIFO替换策略的缓存 */</span></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> FIFOCache</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> LinkedHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#ABB2BF">&gt;{</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> cacheSize</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> FIFOCache</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> cacheSize</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">cacheSize</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> cacheSize;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // 当Entry个数超过cacheSize时，删除最老的Entry</span></span>
<span class="line"><span style="color:#ABB2BF">    @</span><span style="color:#E5C07B">Override</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeEldestEntry</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">eldest</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">       return</span><span style="color:#61AFEF"> size</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">&gt;</span><span style="color:#ABB2BF"> cacheSize;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedHashMap_base.png" type="image/png"/>
    </item>
    <item>
      <title>LinkedList 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">LinkedList 源码解析</source>
      <description>本文主要对LinkedList进行源码解析。 LinkedList源码解析 概述 LinkedList实现 底层数据结构 构造函数 getFirst(), getLast() removeFirst(), removeLast(), remove(e), remove(index) add() addAll() clear() Positional A...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对LinkedList进行源码解析。</p>
</blockquote>
<ul>
<li>LinkedList源码解析
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li>LinkedList实现
<ul>
<li><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">底层数据结构</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li>
<li><a href="#getfirst-getlast">getFirst(), getLast()</a></li>
<li><a href="#removeFirst-removelast-removee-removeindex">removeFirst(), removeLast(), remove(e), remove(index)</a></li>
<li><a href="#add">add()</a></li>
<li><a href="#addall">addAll()</a></li>
<li><a href="#clear">clear()</a></li>
<li><a href="#positional-access-%E6%96%B9%E6%B3%95">Positional Access 方法</a></li>
<li><a href="#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C">查找操作</a></li>
<li><a href="#queue-%E6%96%B9%E6%B3%95">Queue 方法</a></li>
<li><a href="#deque-%E6%96%B9%E6%B3%95">Deque 方法</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h2>
<p><em>LinkedList</em>同时实现了<em>List</em>接口和<em>Deque</em>接口，也就是说它既可以看作一个顺序容器，又可以看作一个队列(<em>Queue</em>)，同时又可以看作一个栈(<em>Stack</em>)。这样看来，<em>LinkedList</em>简直就是个全能冠军。当你需要使用栈或者队列时，可以考虑使用<em>LinkedList</em>，一方面是因为Java官方已经声明不建议使用<em>Stack</em>类，更遗憾的是，Java里根本没有一个叫做<em>Queue</em>的类(它是个接口名字)。关于栈或队列，现在的首选是<em>ArrayDeque</em>，它有着比<em>LinkedList</em>(当作栈或队列使用时)有着更好的性能。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png" alt="LinkedList_base" tabindex="0" loading="lazy"><figcaption>LinkedList_base</figcaption></figure>
<p><em>LinkedList</em>的实现方式决定了所有跟下标相关的操作都是线性时间，而在首段或者末尾删除元素只需要常数时间。为追求效率<em>LinkedList</em>没有实现同步(synchronized)，如果需要多个线程并发访问，可以先采用<code>Collections.synchronizedList()</code>方法对其进行包装。</p>
<h2><a class="header-anchor" href="#linkedlist实现"><span></span></a><a href="#linkedlist%E5%AE%9E%E7%8E%B0">#</a> LinkedList实现</h2>
<h3><a class="header-anchor" href="#底层数据结构"><span></span></a><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 底层数据结构</h3>
<p><em>LinkedList</em>底层<strong>通过双向链表实现</strong>，本节将着重讲解插入和删除元素时双向链表的维护过程，也即是之间解跟<em>List</em>接口相关的函数，而将<em>Queue</em>和<em>Stack</em>以及<em>Deque</em>相关的知识放在下一节讲。双向链表的每个节点用内部类<em>Node</em>表示。<em>LinkedList</em>通过<code>first</code>和<code>last</code>引用分别指向链表的第一个和最后一个元素。注意这里没有所谓的哑元，当链表为空的时候<code>first</code>和<code>last</code>都指向<code>null</code>。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">    transient</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pointer to first node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *            (first.prev == null &amp;&amp; first.item != null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    transient</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pointer to last node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *            (last.next == null &amp;&amp; last.item != null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    transient</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中Node是私有的内部类:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF">        Node</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">prev</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">next</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> element;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> next;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> prev;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#构造函数"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an empty list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> LinkedList</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * collection, in the order they are returned by the collection's</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic">  c</span><span style="color:#7F848E;font-style:italic"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> LinkedList</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        addAll</span><span style="color:#E06C75">(c)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#getfirst-getlast"><span></span></a><a href="#getfirst-getlast">#</a> getFirst(), getLast()</h3>
<p>获取第一个元素， 和获取最后一个元素:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the first element in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> getFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the last element in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> getLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#removefirst-removelast-remove-e-remove-index"><span></span></a><a href="#removefirst-removelast-remove-e-remove-index">#</a> removeFirst(), removeLast(), remove(e), remove(index)</h3>
<p><code>remove()</code>方法也有两个版本，一个是删除跟指定元素相等的第一个元素<code>remove(Object o)</code>，另一个是删除指定下标处的元素<code>remove(int index)</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_remove.png" alt="LinkedList_remove.png" tabindex="0" loading="lazy"><figcaption>LinkedList_remove.png</figcaption></figure>
<p>删除元素 - 指的是删除第一次出现的这个元素, 如果没有这个元素，则返回false；判断的依据是equals方法， 如果equals，则直接unlink这个node；由于LinkedList可存放null元素，故也可以删除第一次出现null的元素；</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the first occurrence of the specified element from this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * if it is present.  If this list does not contain the element, it is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * unchanged.  More formally, removes the element with the lowest index</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * (if such an element exists).  Returns {@code true} if this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * contained the specified element (or equivalently, if this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * changed as a result of the call).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if this list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Unlinks non-null node x.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#61AFEF"> unlink</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert x != null;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 第一个元素</span></span>
<span class="line"><span style="color:#E06C75">            first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (next </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 最后一个元素</span></span>
<span class="line"><span style="color:#E06C75">            last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            next</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // GC</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>remove(int index)</code>使用的是下标计数， 只需要判断该index是否有元素即可，如果有则直接unlink这个node。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the element at the specified position in this list.  Shifts any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the left (subtracts one from their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the element that was removed from the list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> the index of the element to be removed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlink</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除head元素:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes and returns the first element from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element from this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> removeFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Unlinks non-null first node f.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> f) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert f == first &amp;&amp; f != null;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // help GC</span></span>
<span class="line"><span style="color:#E06C75">        first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (next </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            last </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            next</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除last元素:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes and returns the last element from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element from this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> removeLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NoSuchElementException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlinkLast</span><span style="color:#E06C75">(l)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Unlinks non-null last node l.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> unlinkLast</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> l) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert l == last &amp;&amp; l != null;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> prev </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // help GC</span></span>
<span class="line"><span style="color:#E06C75">        last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (prev </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            first </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            prev</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#add"><span></span></a><a href="#add">#</a> add()</h3>
<p><em>add()*方法有两个版本，一个是<code>add(E e)</code>，该方法在*LinkedList</em>的末尾插入元素，因为有<code>last</code>指向链表末尾，在末尾插入元素的花费是常数时间。只需要简单修改几个相关引用即可；另一个是<code>add(int index, E element)</code>，该方法是在指定下表处插入元素，需要先通过线性查找找到具体位置，然后修改相关引用完成插入操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends the specified element to the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;p&gt;This method is equivalent to {@link #addLast}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> element to be appended to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Collection#add})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        linkLast</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Links e as last element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    void</span><span style="color:#61AFEF"> linkLast</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> newNode </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(l</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_add.png" alt="LinkedList_add" tabindex="0" loading="lazy"><figcaption>LinkedList_add</figcaption></figure>
<p><code>add(int index, E element)</code>, 当index==size时，等同于add(E e); 如果不是，则分两步: 1.先根据index找到要插入的位置,即node(index)方法；2.修改引用，完成插入操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Shifts the element currently at that position (if any) and any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkPositionIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> size)</span></span>
<span class="line"><span style="color:#61AFEF">            linkLast</span><span style="color:#E06C75">(element)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#61AFEF">            linkBefore</span><span style="color:#E06C75">(element</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的<code>node(int index)</code>函数有一点小小的trick，因为链表双向的，可以从开始往后找，也可以从结尾往前找，具体朝那个方向找取决于条件<code>index &lt; (size &gt;&gt; 1)</code>，也即是index是靠近前端还是后端。从这里也可以看出，linkedList通过index检索元素的效率没有arrayList高。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the (non-null) Node at the specified element index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#E5C07B">    Node</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // assert isElementIndex(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)) {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">++</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">--</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#addall"><span></span></a><a href="#addall">#</a> addAll()</h3>
<p>addAll(index, c) 实现方式并不是直接调用add(index,e)来实现，主要是因为效率的问题，另一个是fail-fast中modCount只会增加1次；</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Appends all of the elements in the specified collection to the end of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this list, in the order that they are returned by the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * collection's iterator.  The behavior of this operation is undefined if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the specified collection is modified while the operation is in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * progress.  (Note that this will occur if the specified collection is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this list, and it's nonempty.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(size</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> c)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts all of the elements in the specified collection into this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list, starting at the specified position.  Shifts the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * currently at that position (if any) and any subsequent elements to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * the right (increases their indices).  The new elements will appear</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in the list in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified collection's iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which to insert the first element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *              from the specified collection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> c</span><span style="color:#7F848E;font-style:italic"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NullPointerException</span><span style="color:#7F848E;font-style:italic"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> addAll</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Collection</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E06C75"> extends E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> c) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkPositionIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75">[] a </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> c</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> numNew </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (numNew </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> pred</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> succ</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> size) {</span></span>
<span class="line"><span style="color:#E06C75">            succ </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            pred </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">            succ </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            pred </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> succ</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o </span><span style="color:#C678DD">:</span><span style="color:#E06C75"> a) {</span></span>
<span class="line"><span style="color:#ABB2BF">            @</span><span style="color:#E5C07B">SuppressWarnings</span><span style="color:#E06C75">(</span><span style="color:#98C379">"unchecked"</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) o</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> newNode </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(pred</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (pred </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">                first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span></span>
<span class="line"><span style="color:#E5C07B">                pred</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            pred </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> newNode</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (succ </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            last </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> pred</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            pred</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> succ</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            succ</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> pred</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> numNew</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#clear"><span></span></a><a href="#clear">#</a> clear()</h3>
<p>为了让GC更快可以回收放置的元素，需要将node之间的引用关系赋空。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes all of the elements from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The list will be empty after this call returns.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> clear</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Clearing all of the links between nodes is "unnecessary", but:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // - helps a generational GC if the discarded nodes inhabit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //   more than one generation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // - is sure to free memory even if there is a reachable Iterator</span></span>
<span class="line"><span style="color:#C678DD">        for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> ) {</span></span>
<span class="line"><span style="color:#E5C07B">            Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> next </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> next</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">        first </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        size </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#positional-access-方法"><span></span></a><a href="#positional-access-%E6%96%B9%E6%B3%95">#</a> Positional Access 方法</h3>
<p>通过index获取元素</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index of the element to return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element at the specified position in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将某个位置的元素重新赋值:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Replaces the element at the specified position in this list with the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * specified element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index of the element to replace</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be stored at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> set</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> oldVal </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> element</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> oldVal</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将元素插入到指定index位置:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Shifts the element currently at that position (if any) and any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> element</span><span style="color:#7F848E;font-style:italic"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> element) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkPositionIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (index </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> size)</span></span>
<span class="line"><span style="color:#61AFEF">            linkLast</span><span style="color:#E06C75">(element)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#61AFEF">            linkBefore</span><span style="color:#E06C75">(element</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除指定位置的元素:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the element at the specified position in this list.  Shifts any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * subsequent elements to the left (subtracts one from their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the element that was removed from the list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> index</span><span style="color:#7F848E;font-style:italic"> the index of the element to be removed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#61AFEF">        checkElementIndex</span><span style="color:#E06C75">(index)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> unlink</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">node</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它位置的方法:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Tells if the argument is the index of an existing element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isElementIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Tells if the argument is the index of a valid position for an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * iterator or an add operation.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isPositionIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">&lt;=</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Constructs an IndexOutOfBoundsException detail message.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Of the many possible refactorings of the error handling code,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * this "outlining" performs best with both server and client VMs.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> outOfBoundsMsg</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "Index: "</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">index</span><span style="color:#56B6C2">+</span><span style="color:#98C379">", Size: "</span><span style="color:#56B6C2">+</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> checkElementIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isElementIndex</span><span style="color:#E06C75">(index))</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">outOfBoundsMsg</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> checkPositionIndex</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> index) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">isPositionIndex</span><span style="color:#E06C75">(index))</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IndexOutOfBoundsException</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">outOfBoundsMsg</span><span style="color:#E06C75">(index))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#查找操作"><span></span></a><a href="#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C">#</a> 查找操作</h3>
<p>查找操作的本质是查找元素的下标:</p>
<p>查找第一次出现的index, 如果找不到返回-1；</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the first occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the lowest index {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to search for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the index of the first occurrence of the specified element in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         this list, or -1 if this list does not contain the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> indexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">next</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找最后一次出现的index, 如果找不到返回-1；</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Returns the index of the last occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * More formally, returns the highest index {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to search for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the index of the last occurrence of the specified element in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         this list, or -1 if this list does not contain the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> lastIndexOf</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> index </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">                index</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#E06C75"> index</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#queue-方法"><span></span></a><a href="#queue-%E6%96%B9%E6%B3%95">#</a> Queue 方法</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list, or {@code null} if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peek</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> element</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> getFirst</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list, or {@code null} if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> poll</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the head of this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> removeFirst</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Adds the specified element as the tail (last element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to add</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Queue#offer})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> add</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#deque-方法"><span></span></a><a href="#deque-%E6%96%B9%E6%B3%95">#</a> Deque 方法</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the front of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to insert</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Deque#offerFirst})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offerFirst</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        addFirst</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Inserts the specified element at the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to insert</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} (as specified by {@link Deque#offerLast})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offerLast</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        addLast</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the first element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element of this list, or {@code null}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peekFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> f</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves, but does not remove, the last element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element of this list, or {@code null}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peekLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the first element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the first element of this list, or {@code null} if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *     this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> pollFirst</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> f </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> first</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (f </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> unlinkFirst</span><span style="color:#E06C75">(f)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Retrieves and removes the last element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the last element of this list, or {@code null} if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *     this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> pollLast</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> (l </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#C678DD">?</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> :</span><span style="color:#61AFEF"> unlinkLast</span><span style="color:#E06C75">(l)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pushes an element onto the stack represented by this list.  In other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * words, inserts the element at the front of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;p&gt;This method is equivalent to {@link #addFirst}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#7F848E;font-style:italic"> the element to push</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> push</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#61AFEF">        addFirst</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Pops an element from the stack represented by this list.  In other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * words, removes and returns the first element of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * &lt;p&gt;This method is equivalent to {</span><span style="color:#C678DD;font-style:italic">@link</span><span style="color:#7F848E;font-style:italic"> #</span><span style="color:#E06C75;font-style:italic">removeFirst()</span><span style="color:#7F848E;font-style:italic">}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> the element at the front of this list (which is the top</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *         of the stack represented by this list)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@throws</span><span style="color:#E5C07B;font-style:italic"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> pop</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> removeFirst</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the first occurrence of the specified element in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list (when traversing the list from head to tail).  If the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * does not contain the element, it is unchanged.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if the list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeFirstOccurrence</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(o)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * Removes the last occurrence of the specified element in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * list (when traversing the list from head to tail).  If the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * does not contain the element, it is unchanged.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@param</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#7F848E;font-style:italic"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@return</span><span style="color:#7F848E;font-style:italic"> {@code true} if the list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * </span><span style="color:#C678DD;font-style:italic">@since</span><span style="color:#7F848E;font-style:italic"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeLastOccurrence</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (o </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">            for</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Node</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> last</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">prev</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">o</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">item</span><span style="color:#ABB2BF">)</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#61AFEF">                    unlink</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">                    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png" type="image/png"/>
    </item>
    <item>
      <title>PriorityQueue 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/PriorityQueue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/PriorityQueue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">PriorityQueue 源码解析</source>
      <description>本文主要对PriorityQueue进行源码解析。 PriorityQueue 源码解析 概述 方法剖析 add()和offer() element()和peek() remove()和poll() remove(Object o) 参考 # 概述 前面以Java ArrayDeque为例讲解了Stack和Queue，其实还有一种特殊的队列叫做Prio...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对PriorityQueue进行源码解析。</p>
</blockquote>
<ul>
<li>PriorityQueue 源码解析
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li>方法剖析
<ul>
<li><a href="#add%E5%92%8Coffer">add()和offer()</a></li>
<li><a href="#element%E5%92%8Cpeek">element()和peek()</a></li>
<li><a href="#remove%E5%92%8Cpoll">remove()和poll()</a></li>
<li><a href="#removeobject-o">remove(Object o)</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83">参考</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#概述"><span></span></a><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</h2>
<p>前面以Java <em>ArrayDeque</em>为例讲解了<em>Stack</em>和<em>Queue</em>，其实还有一种特殊的队列叫做<em>PriorityQueue</em>，即优先队列。<strong>优先队列的作用是能保证每次取出的元素都是队列中权值最小的</strong>(Java的优先队列每次取最小元素，C++的优先队列每次取最大元素)。这里牵涉到了大小关系，<strong>元素大小的评判可以通过元素本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器</strong>(<em>Comparator</em>，类似于C++的仿函数)。</p>
<p>Java中<em>PriorityQueue</em>实现了<em>Queue</em>接口，不允许放入<code>null</code>元素；其通过堆实现，具体说是通过完全二叉树(<em>complete binary tree</em>)实现的<strong>小顶堆</strong>(任意一个非叶子节点的权值，都不大于其左右子节点的权值)，也就意味着可以通过数组来作为<em>PriorityQueue</em>的底层实现。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_base.png" alt="PriorityQueue_base.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_base.png</figcaption></figure>
<p>上图中我们给每个元素按照层序遍历的方式进行了编号，如果你足够细心，会发现父节点和子节点的编号是有联系的，更确切的说父子节点的编号之间有如下关系:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>leftNo = parentNo*2+1</span></span>
<span class="line"><span>rightNo = parentNo*2+2</span></span>
<span class="line"><span>parentNo = (nodeNo-1)/2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述三个公式，可以轻易计算出某个节点的父节点以及子节点的下标。这也就是为什么可以直接用数组来存储堆的原因。</p>
<p><em>PriorityQueue</em>的<code>peek()</code>和<code>element</code>操作是常数时间，<code>add()</code>, <code>offer()</code>, 无参数的<code>remove()</code>以及<code>poll()</code>方法的时间复杂度都是<em>log(N)</em>。</p>
<h2><a class="header-anchor" href="#方法剖析"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">#</a> 方法剖析</h2>
<h3><a class="header-anchor" href="#add-和offer"><span></span></a><a href="#add-%E5%92%8Coffer">#</a> add()和offer()</h3>
<p><code>add(E e)</code>和<code>offer(E e)</code>的语义相同，都是向优先队列中插入元素，只是<code>Queue</code>接口规定二者对插入失败时的处理不同，前者在插入失败时抛出异常，后则则会返回<code>false</code>。对于<em>PriorityQueue</em>这两个方法其实没什么差别。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_offer.png" alt="PriorityQueue_offer.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_offer.png</figcaption></figure>
<p>新加入的元素可能会破坏小顶堆的性质，因此需要进行必要的调整。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//offer(E e)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> offer</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75"> e) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (e </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//不允许放入null元素</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">&gt;=</span><span style="color:#E5C07B"> queue</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">length</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        grow</span><span style="color:#E06C75">(i </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//自动扩容</span></span>
<span class="line"><span style="color:#E06C75">    size </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//队列原来为空，这是插入的第一个元素</span></span>
<span class="line"><span style="color:#E06C75">        queue[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span></span>
<span class="line"><span style="color:#61AFEF">        siftUp</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//调整</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，扩容函数<code>grow()</code>类似于<code>ArrayList</code>里的<code>grow()</code>函数，就是再申请一个更大的数组，并将原数组的元素复制过去，这里不再赘述。需要注意的是<code>siftUp(int k, E x)</code>方法，该方法用于插入元素<code>x</code>并维持堆的特性。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//siftUp()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> siftUp</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> parent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">-</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//parentNo = (nodeNo-1)/2</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> queue[parent]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compare</span><span style="color:#ABB2BF">(x, (E) e)</span><span style="color:#56B6C2"> &gt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//调用比较器的比较方法</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新加入的元素<code>x</code>可能会破坏小顶堆的性质，因此需要进行调整。调整的过程为** : 从<code>k</code>指定的位置开始，将<code>x</code>逐层与当前点的<code>parent</code>进行比较并交换，直到满足<code>x &gt;= queue[parent]</code>为止**。注意这里的比较可以是元素的自然顺序，也可以是依靠比较器的顺序。</p>
<h3><a class="header-anchor" href="#element-和peek"><span></span></a><a href="#element-%E5%92%8Cpeek">#</a> element()和peek()</h3>
<p><code>element()</code>和<code>peek()</code>的语义完全相同，都是获取但不删除队首元素，也就是队列中权值最小的那个元素，二者唯一的区别是当方法失败时前者抛出异常，后者返回<code>null</code>。根据小顶堆的性质，堆顶那个元素就是全局最小的那个；由于堆用数组表示，根据下标关系，<code>0</code>下标处的那个元素既是堆顶元素。所以<strong>直接返回数组<code>0</code>下标处的那个元素即可</strong>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_peek.png" alt="PriorityQueue_peek.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_peek.png</figcaption></figure>
<p>代码也就非常简洁:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//peek()</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> peek</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> (E) queue[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//0下标处的那个元素就是最小的那个</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove-和poll"><span></span></a><a href="#remove-%E5%92%8Cpoll">#</a> remove()和poll()</h3>
<p><code>remove()</code>和<code>poll()</code>方法的语义也完全相同，都是获取并删除队首元素，区别是当方法失败时前者抛出异常，后者返回<code>null</code>。由于删除操作会改变队列的结构，为维护小顶堆的性质，需要进行必要的调整。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_poll.png" alt="PriorityQueue_poll.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_poll.png</figcaption></figure>
<p>代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> E</span><span style="color:#61AFEF"> poll</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (size </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> result </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) queue[</span><span style="color:#D19A66">0</span><span style="color:#E06C75">]</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//0下标处的那个元素就是最小的那个</span></span>
<span class="line"><span style="color:#E5C07B">    E</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) queue[s]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    queue[s] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#61AFEF">        siftDown</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//调整</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> result</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码首先记录<code>0</code>下标处的元素，并用最后一个元素替换<code>0</code>下标位置的元素，之后调用<code>siftDown()</code>方法对堆进行调整，最后返回原来<code>0</code>下标处的那个元素(也就是最小的那个元素)。重点是<code>siftDown(int k, E x)</code>方法，该方法的作用是<strong>从<code>k</code>指定的位置开始，将<code>x</code>逐层向下与当前点的左右孩子中较小的那个交换，直到<code>x</code>小于或等于左右孩子中的任何一个为止</strong>。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//siftDown()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> siftDown</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> k</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> E</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> half </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">&gt;&gt;&gt;</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> half) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    	//首先找到左右孩子中较小的那个，记录到c里，并用child记录其下标</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> child </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (k </span><span style="color:#56B6C2">&lt;&lt;</span><span style="color:#D19A66"> 1</span><span style="color:#E06C75">) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//leftNo = parentNo*2+1</span></span>
<span class="line"><span style="color:#E5C07B">        Object</span><span style="color:#E06C75"> c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> queue[child]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> right </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> child </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (right </span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75"> size </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B">            comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compare</span><span style="color:#ABB2BF">((E) c, (E) queue[right])</span><span style="color:#56B6C2"> &gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            c </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> queue[child </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> right]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">comparator</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compare</span><span style="color:#ABB2BF">(x, (E) c)</span><span style="color:#56B6C2"> &lt;=</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">            break</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> c</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//然后用c取代原来的值</span></span>
<span class="line"><span style="color:#E06C75">        k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> child</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">    queue[k] </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> x</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#remove-object-o"><span></span></a><a href="#remove-object-o">#</a> remove(Object o)</h3>
<p><code>remove(Object o)</code>方法用于删除队列中跟<code>o</code>相等的某一个元素(如果有多个相等，只删除一个)，该方法不是<em>Queue</em>接口内的方法，而是<em>Collection</em>接口的方法。由于删除操作会改变队列结构，所以要进行调整；又由于删除元素的位置可能是任意的，所以调整过程比其它函数稍加繁琐。具体来说，<code>remove(Object o)</code>可以分为2种情况: 1. 删除的是最后一个元素。直接删除即可，不需要调整。2. 删除的不是最后一个元素，从删除点开始以最后一个元素为参照调用一次<code>siftDown()</code>即可。此处不再赘述。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_remove2.png" alt="PriorityQueue_remove2.png" tabindex="0" loading="lazy"><figcaption>PriorityQueue_remove2.png</figcaption></figure>
<p>具体代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//remove(Object o)</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> o) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	//通过遍历数组的方式找到第一个满足o.equals(queue[i])元素的下标</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> indexOf</span><span style="color:#E06C75">(o)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (i </span><span style="color:#56B6C2">==</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> false</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> --</span><span style="color:#E06C75">size</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (s </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> i) </span><span style="color:#7F848E;font-style:italic">//情况1</span></span>
<span class="line"><span style="color:#E06C75">        queue[i] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">        E</span><span style="color:#E06C75"> moved </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (E) queue[s]</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        queue[s] </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">        siftDown</span><span style="color:#E06C75">(i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> moved)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//情况2</span></span>
<span class="line"><span style="color:#ABB2BF">        ......</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> true</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/PriorityQueue_base.png" type="image/png"/>
    </item>
    <item>
      <title>Stack &amp; Queue 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/Stack%20_%20Queue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/Stack%20_%20Queue%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">Stack &amp; Queue 源码解析</source>
      <description>本文主要对Stack &amp; Queue进行源码解析。 Stack &amp; Queue 源码解析 Stack &amp; Queue概述 Queue Deque 方法剖析 addFirst() addLast() pollFirst() pollLast() peekFirst() peekLast() # Stack &amp; Queue概述 Java里有一个叫做Stac...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对Stack &amp; Queue进行源码解析。</p>
</blockquote>
<ul>
<li>Stack &amp; Queue 源码解析
<ul>
<li><a href="#stack--queue%E6%A6%82%E8%BF%B0">Stack &amp; Queue概述</a></li>
<li><a href="#queue">Queue</a></li>
<li><a href="#deque">Deque</a></li>
<li>方法剖析
<ul>
<li><a href="#addfirst">addFirst()</a></li>
<li><a href="#addlast">addLast()</a></li>
<li><a href="#pollfirst">pollFirst()</a></li>
<li><a href="#polllast">pollLast()</a></li>
<li><a href="#peekfirst">peekFirst()</a></li>
<li><a href="#peeklast">peekLast()</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#stack-queue概述"><span></span></a><a href="#stack-queue%E6%A6%82%E8%BF%B0">#</a> Stack &amp; Queue概述</h2>
<p>Java里有一个叫做<em>Stack</em>的类，却没有叫做<em>Queue</em>的类(它是个接口名字)。当需要使用栈时，Java已不推荐使用<em>Stack</em>，而是推荐使用更高效的<em>ArrayDeque</em>；既然<em>Queue</em>只是一个接口，当需要使用队列时也就首选<em>ArrayDeque</em>了(次选是<em>LinkedList</em>)。</p>
<h2><a class="header-anchor" href="#queue"><span></span></a><a href="#queue">#</a> Queue</h2>
<p><em>Queue</em>接口继承自Collection接口，除了最基本的Collection的方法之外，它还支持额外的<em>insertion</em>, <em>extraction</em>和<em>inspection</em>操作。这里有两组格式，共6个方法，一组是抛出异常的实现；另外一组是返回值的实现(没有则返回null)。</p>
<p>|         | Throws exception | Returns special value |<br>
|</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayDeque_base.png" type="image/png"/>
    </item>
    <item>
      <title>TreeSet &amp; TreeMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/TreeSet%20_%20TreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/TreeSet%20_%20TreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">TreeSet &amp; TreeMap 源码解析</source>
      <description>本文主要对Map - TreeSet &amp; TreeMap 源码解析。 Java 7 - TreeSet &amp; TreeMap 总体介绍 预备知识 方法剖析 TreeSet # Java 7 - TreeSet &amp; TreeMap # 总体介绍 之所以把TreeSet和TreeMap放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对Map - TreeSet &amp; TreeMap 源码解析。</p>
</blockquote>
<ul>
<li>Java 7 - TreeSet &amp; TreeMap
<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">总体介绍</a></li>
<li><a href="#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86">预备知识</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">方法剖析</a></li>
<li><a href="#treeset">TreeSet</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-7-treeset-treemap"><span></span></a><a href="#java-7-treeset-treemap">#</a> Java 7 - TreeSet &amp; TreeMap</h2>
<h3><a class="header-anchor" href="#总体介绍"><span></span></a><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">#</a> 总体介绍</h3>
<p>之所以把<em>TreeSet</em>和<em>TreeMap</em>放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<strong><em>TreeSet*里面有一个*TreeMap</em>(适配器模式)</strong>。因此本文将重点分析<em>TreeMap</em>。</p>
<p>Java <em>TreeMap</em>实现了<em>SortedMap</em>接口，也就是说会按照<code>key</code>的大小顺序对<em>Map</em>中的元素进行排序，<code>key</code>大小的评判可以通过其本身的自然顺序(natural ordering)，也可以通过构造时传入的比较器(Comparator)。</p>
<p><strong>TreeMap底层通过红黑树(Red-Black tree)实现</strong>，也就意味着<code>containsKey()</code>, <code>get()</code>, <code>put()</code>, <code>remove()</code>都有着<code>log(n)</code>的时间复杂度。其具体算法实现参照了《算法导论》。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_base.png" alt="TreeMap_base.png" tabindex="0" loading="lazy"><figcaption>TreeMap_base.png</figcaption></figure>
<p>出于性能原因，<em>TreeMap</em>是非同步的(not synchronized)，如果需要在多线程环境使用，需要程序员手动同步；或者通过如下方式将<em>TreeMap</em>包装成(wrapped)同步的:</p>
<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p><strong>红黑树是一种近似平衡的二叉查找树，它能够确保任何一个节点的左右子树的高度差不会超过二者中较低那个的一倍</strong>。具体来说，红黑树是满足如下条件的二叉查找树(binary search tree):</p>
<ol>
<li>每个节点要么是红色，要么是黑色。</li>
<li>根节点必须是黑色</li>
<li>红色节点不能连续(也即是，红色节点的孩子和父亲都不能是红色)。</li>
<li>对于每个节点，从该点至<code>null</code>(树尾端)的任何路径，都含有相同个数的黑色节点。</li>
</ol>
<p>在树的结构发生改变时(插入或者删除操作)，往往会破坏上述条件3或条件4，需要通过调整使得查找树重新满足红黑树的约束条件。</p>
<h3><a class="header-anchor" href="#预备知识"><span></span></a><a href="#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86">#</a> 预备知识</h3>
<p>前文说到当查找树的结构发生改变时，红黑树的约束条件可能被破坏，需要通过调整使得查找树重新满足红黑树的约束条件。调整可以分为两类: 一类是颜色调整，即改变某个节点的颜色；另一类是结构调整，即改变检索树的结构关系。结构调整过程包含两个基本操作 : <strong>左旋(Rotate Left)，右旋(RotateRight)</strong>。</p>
<h4><a class="header-anchor" href="#左旋"><span></span></a><a href="#%E5%B7%A6%E6%97%8B">#</a> 左旋</h4>
<p>左旋的过程是将<code>x</code>的右子树绕<code>x</code>逆时针旋转，使得<code>x</code>的右子树成为<code>x</code>的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_rotateLeft.png" alt="TreeMap_rotateLeft.png" tabindex="0" loading="lazy"><figcaption>TreeMap_rotateLeft.png</figcaption></figure>
<p><em>TreeMap</em>中左旋代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//Rotate Left</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> r </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            root </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> p)</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        r</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> r</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#右旋"><span></span></a><a href="#%E5%8F%B3%E6%97%8B">#</a> 右旋</h4>
<p>右旋的过程是将<code>x</code>的左子树绕<code>x</code>顺时针旋转，使得<code>x</code>的左子树成为<code>x</code>的父亲，同时修改相关节点的引用。旋转之后，二叉查找树的属性仍然满足。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_rotateRight.png" alt="TreeMap_rotateRight.png" tabindex="0" loading="lazy"><figcaption>TreeMap_rotateRight.png</figcaption></figure>
<p><em>TreeMap</em>中右旋代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//Rotate Right</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> rotateRight</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            root </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> p)</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        l</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#寻找节点后继"><span></span></a><a href="#%E5%AF%BB%E6%89%BE%E8%8A%82%E7%82%B9%E5%90%8E%E7%BB%A7">#</a> 寻找节点后继</h4>
<p>对于一棵二叉查找树，给定节点t，其后继(树中比大于t的最小的那个元素)可以通过如下方式找到:</p>
<blockquote>
<ol>
<li>t的右子树不空，则t的后继是其右子树中最小的那个元素。</li>
<li>t的右孩子为空，则t的后继是其第一个向左走的祖先。</li>
</ol>
</blockquote>
<p>后继节点在红黑树的删除操作中将会用到。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_successor.png" alt="TreeMap_successor.png" tabindex="0" loading="lazy"><figcaption>TreeMap_successor.png</figcaption></figure>
<p><em>TreeMap</em>中寻找节点后继的代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 寻找节点后继函数successor()</span></span>
<span class="line"><span style="color:#C678DD">static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> TreeMap</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> successor</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> t) {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 1. t的右子树不空，则t的后继是其右子树中最小的那个元素</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span><span style="color:#7F848E;font-style:italic">// 2. t的右孩子为空，则t的后继是其第一个向左走的祖先</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> ch </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        while</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> ch </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">            ch </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#方法剖析"><span></span></a><a href="#%E6%96%B9%E6%B3%95%E5%89%96%E6%9E%90">#</a> 方法剖析</h3>
<h4><a class="header-anchor" href="#get"><span></span></a><a href="#get">#</a> get()</h4>
<p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>，该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.value</code>。因此<code>getEntry()</code>是算法的核心。算法思想是根据<code>key</code>的自然顺序(或者比较器顺序)对二叉查找树进行查找，直到找到满足<code>k.compareTo(p.key) == 0</code>的<code>entry</code>。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_getEntry.png" alt="TreeMap_getEntry.png" tabindex="0" loading="lazy"><figcaption>TreeMap_getEntry.png</figcaption></figure>
<p>具体代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//getEntry()方法</span></span>
<span class="line"><span style="color:#C678DD">final</span><span style="color:#E5C07B"> Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> getEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//不允许key值为null</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Comparable</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> K</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> K</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) key</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//使用元素的自然顺序</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">        int</span><span style="color:#E06C75"> cmp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//向左找</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#7F848E;font-style:italic">//向右找</span></span>
<span class="line"><span style="color:#E06C75">            p </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#E06C75"> p</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#put"><span></span></a><a href="#put">#</a> put()</h4>
<p><code>put(K key, V value)</code>方法是将指定的<code>key</code>, <code>value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>getEntry()</code>方法；如果没有找到则会在红黑树中插入新的<code>entry</code>，如果插入之后破坏了红黑树的约束条件，还需要进行调整(旋转，改变某些节点的颜色)。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#E5C07B"> V</span><span style="color:#61AFEF"> put</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">K</span><span style="color:#E06C75"> key</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> V</span><span style="color:#E06C75"> value) {</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> cmp</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (key </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#C678DD">        throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> NullPointerException</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Comparable</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#C678DD"> super</span><span style="color:#E5C07B"> K</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> k </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Comparable</span><span style="color:#56B6C2">&lt;</span><span style="color:#C678DD">?</span><span style="color:#E5C07B"> super</span><span style="color:#E06C75"> K</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75">) key</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//使用元素的自然顺序</span></span>
<span class="line"><span style="color:#C678DD">    do</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E06C75">        parent </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> t</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        cmp </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> k</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareTo</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//向左找</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&gt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) t </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//向右找</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> return</span><span style="color:#E5C07B"> t</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">setValue</span><span style="color:#ABB2BF">(value);</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">while</span><span style="color:#E06C75"> (t </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> e </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Entry</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(key</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> parent)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//创建并插入新的entry</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (cmp </span><span style="color:#56B6C2">&lt;</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">) </span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    else</span><span style="color:#E5C07B"> parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#61AFEF">    fixAfterInsertion</span><span style="color:#E06C75">(e)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">//调整</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的插入部分并不难理解: 首先在红黑树上找到合适的位置，然后创建新的<code>entry</code>并插入(当然，新插入的节点一定是树的叶子)。难点是调整函数<code>fixAfterInsertion()</code>，前面已经说过，调整往往需要1.改变某些节点的颜色，2.对某些节点进行旋转。</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_put.png" alt="TreeMap_put.png" tabindex="0" loading="lazy"><figcaption>TreeMap_put.png</figcaption></figure>
<p>调整函数<code>fixAfterInsertion()</code>的具体代码如下，其中用到了上文中提到的<code>rotateLeft()</code>和<code>rotateRight()</code>函数。通过代码我们能够看到，情况2其实是落在情况3内的。情况4～情况6跟前三种情况是对称的，因此图解中并没有画出后三种情况，读者可以参考代码自行理解。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">//红黑树调整函数fixAfterInsertion()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fixAfterInsertion</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#E5C07B">    x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> RED</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E06C75"> x </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> root </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#E5C07B"> x</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x) </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))) {</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> y </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(y) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(y</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况1</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况1</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))) {</span></span>
<span class="line"><span style="color:#E06C75">                    x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                       // 情况2</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateLeft</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                         // 情况2</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                rotateRight</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">        // 情况3</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> y </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(y) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(y</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况4</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况4</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))) {</span></span>
<span class="line"><span style="color:#E06C75">                    x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                       // 情况5</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateRight</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况5</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况6</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况6</span></span>
<span class="line"><span style="color:#61AFEF">                rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         // 情况6</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    root</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> BLACK</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4><a class="header-anchor" href="#remove"><span></span></a><a href="#remove">#</a> remove()</h4>
<p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法首先通过上文中提到的<code>getEntry(Object key)</code>方法找到<code>key</code>值对应的<code>entry</code>，然后调用<code>deleteEntry(Entry&lt;K,V&gt; entry)</code>删除对应的<code>entry</code>。由于删除操作会改变红黑树的结构，有可能破坏红黑树的约束条件，因此有可能要进行调整。</p>
<p><code>getEntry()</code>函数前面已经讲解过，这里重点放<code>deleteEntry()</code>上，该函数删除指定的<code>entry</code>并在红黑树的约束被破坏时进行调用<code>fixAfterDeletion(Entry&lt;K,V&gt; x)</code>进行调整。</p>
<p><strong>由于红黑树是一棵增强版的二叉查找树，红黑树的删除操作跟普通二叉查找树的删除操作也就非常相似，唯一的区别是红黑树在节点删除之后可能需要进行调整</strong>。现在考虑一棵普通二叉查找树的删除过程，可以简单分为两种情况:</p>
<blockquote>
<ol>
<li>删除点p的左右子树都为空，或者只有一棵子树非空。</li>
<li>删除点p的左右子树都非空。</li>
</ol>
</blockquote>
<p>对于上述情况1，处理起来比较简单，直接将p删除(左右子树都为空时)，或者用非空子树替代p(只有一棵子树非空时)；对于情况2，可以用p的后继s(树中大于x的最小的那个元素)代替p，然后使用情况1删除s(此时s一定满足情况1.可以画画看)。</p>
<p>基于以上逻辑，红黑树的节点删除函数<code>deleteEntry()</code>代码如下:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 红黑树entry删除函数deleteEntry()</span></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> deleteEntry</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> p) {</span></span>
<span class="line"><span style="color:#E06C75">    modCount</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">    size</span><span style="color:#ABB2BF">--;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#56B6C2"> &amp;&amp;</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 2. 删除点p的左右子树都非空。</span></span>
<span class="line"><span style="color:#E5C07B">        Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> successor</span><span style="color:#E06C75">(p)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 后继</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">key</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        p </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E5C07B">    Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> replacement </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#C678DD"> ?</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#C678DD"> :</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#E06C75"> (replacement </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span><span style="color:#7F848E;font-style:italic">// 1. 删除点p只有一棵子树非空。</span></span>
<span class="line"><span style="color:#E5C07B">        replacement</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E06C75">            root </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> replacement</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2">  =</span><span style="color:#E06C75"> replacement</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        else</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> replacement</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">        p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> BLACK)</span></span>
<span class="line"><span style="color:#61AFEF">            fixAfterDeletion</span><span style="color:#E06C75">(replacement)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 调整</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> ==</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#E06C75">        root </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">    } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 1. 删除点p的左右子树都为空</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">color</span><span style="color:#56B6C2"> ==</span><span style="color:#E06C75"> BLACK)</span></span>
<span class="line"><span style="color:#61AFEF">            fixAfterDeletion</span><span style="color:#E06C75">(p)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">// 调整</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> !=</span><span style="color:#D19A66"> null</span><span style="color:#E06C75">) {</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">left</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            else</span><span style="color:#C678DD"> if</span><span style="color:#E06C75"> (p </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#E06C75">)</span></span>
<span class="line"><span style="color:#E5C07B">                p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">right</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E5C07B">            p</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">parent</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中占据大量代码行的，是用来修改父子节点间引用关系的代码，其逻辑并不难理解。下面着重讲解删除后调整函数<code>fixAfterDeletion()</code>。首先请思考一下，删除了哪些点才会导致调整？<strong>只有删除点是BLACK的时候，才会触发调整函数</strong>，因为删除RED节点不会破坏红黑树的任何约束，而删除BLACK节点会破坏规则4。</p>
<p>跟上文中讲过的<code>fixAfterInsertion()</code>函数一样，这里也要分成若干种情况。记住，<strong>无论有多少情况，具体的调整操作只有两种: 1.改变某些节点的颜色，2.对某些节点进行旋转。</strong></p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_fixAfterDeletion.png" alt="TreeMap_fixAfterDeletion.png" tabindex="0" loading="lazy"><figcaption>TreeMap_fixAfterDeletion.png</figcaption></figure>
<p>上述图解的总体思想是: 将情况1首先转换成情况2，或者转换成情况3和情况4。当然，该图解并不意味着调整过程一定是从情况1开始。通过后续代码我们还会发现几个有趣的规则: a).如果是由情况1之后紧接着进入的情况2，那么情况2之后一定会退出循环(因为x为红色)；b).一旦进入情况3和情况4，一定会退出循环(因为x为root)。</p>
<p>删除后调整函数<code>fixAfterDeletion()</code>的具体代码如下，其中用到了上文中提到的<code>rotateLeft()</code>和<code>rotateRight()</code>函数。通过代码我们能够看到，情况3其实是落在情况4内的。情况5～情况8跟前四种情况是对称的，因此图解中并没有画出后四种情况，读者可以参考代码自行理解。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> fixAfterDeletion</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Entry</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">K</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">V</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> x) {</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">!=</span><span style="color:#E06C75"> root </span><span style="color:#56B6C2">&amp;&amp;</span><span style="color:#61AFEF"> colorOf</span><span style="color:#E06C75">(x) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#E06C75"> (x </span><span style="color:#56B6C2">==</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))) {</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(sib) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 情况1</span></span>
<span class="line"><span style="color:#61AFEF">                rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                // 情况1</span></span>
<span class="line"><span style="color:#E06C75">                sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 情况1</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib))  </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF">                colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                     // 情况2</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况2</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况3</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateRight</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 情况3</span></span>
<span class="line"><span style="color:#E06C75">                    sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> rightOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">         // 情况3</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">          // 情况4</span></span>
<span class="line"><span style="color:#61AFEF">                rotateLeft</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                // 情况4</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                               // 情况4</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> { </span><span style="color:#7F848E;font-style:italic">// 跟前四种情况对称</span></span>
<span class="line"><span style="color:#E5C07B">            Entry</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">K</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(sib) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> RED) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                   // 情况5</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">             // 情况5</span></span>
<span class="line"><span style="color:#61AFEF">                rotateRight</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // 情况5</span></span>
<span class="line"><span style="color:#E06C75">                sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">              // 情况5</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#C678DD">            if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK </span><span style="color:#56B6C2">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF">                colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                     // 情况6</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                        // 情况6</span></span>
<span class="line"><span style="color:#E06C75">            } </span><span style="color:#C678DD">else</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">                if</span><span style="color:#E06C75"> (</span><span style="color:#61AFEF">colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)) </span><span style="color:#56B6C2">==</span><span style="color:#E06C75"> BLACK) {</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">rightOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">      // 情况7</span></span>
<span class="line"><span style="color:#61AFEF">                    setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> RED)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                 // 情况7</span></span>
<span class="line"><span style="color:#61AFEF">                    rotateLeft</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                    // 情况7</span></span>
<span class="line"><span style="color:#E06C75">                    sib </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> leftOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">          // 情况7</span></span>
<span class="line"><span style="color:#E06C75">                }</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(sib</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> colorOf</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">    // 情况8</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // 情况8</span></span>
<span class="line"><span style="color:#61AFEF">                setColor</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">leftOf</span><span style="color:#E06C75">(sib)</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">           // 情况8</span></span>
<span class="line"><span style="color:#61AFEF">                rotateRight</span><span style="color:#E06C75">(</span><span style="color:#61AFEF">parentOf</span><span style="color:#E06C75">(x))</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">               // 情况8</span></span>
<span class="line"><span style="color:#E06C75">                x </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> root</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">                               // 情况8</span></span>
<span class="line"><span style="color:#E06C75">            }</span></span>
<span class="line"><span style="color:#E06C75">        }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"><span style="color:#61AFEF">    setColor</span><span style="color:#E06C75">(x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> BLACK)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#treeset"><span></span></a><a href="#treeset">#</a> TreeSet</h3>
<p>前面已经说过<code>TreeSet</code>是对<code>TreeMap</code>的简单包装，对<code>TreeSet</code>的函数调用都会转换成合适的<code>TreeMap</code>方法，因此<code>TreeSet</code>的实现非常简单。这里不再赘述。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// TreeSet是对TreeMap的简单包装</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TreeSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> NavigableSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Cloneable</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#ABB2BF">	......</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> NavigableMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Dummy value to associate with an Object in the backing Map</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> PRESENT </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Object</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> TreeSet</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">m</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> TreeMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;();</span><span style="color:#7F848E;font-style:italic">// TreeSet里面有一个TreeMap</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, PRESENT)</span><span style="color:#56B6C2">==</span><span style="color:#D19A66">null</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/TreeMap_base.png" type="image/png"/>
    </item>
    <item>
      <title>WeakHashMap 源码解析</title>
      <link>https://cactusli.net/posts/Java/Collection/WeakHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/Collection/WeakHashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">WeakHashMap 源码解析</source>
      <description>本文主要对 WeakHashMap源码解析 源码解析。 WeakHashMap 源码解析 Java 7- WeakHashMap 总体介绍 具体实现 Weak HashSet? 参考文章 # Java 7- WeakHashMap # 总体介绍 在Java集合框架系列文章的最后，笔者打算介绍一个特殊的成员: WeakHashMap，从名字可以看出它是某...</description>
      <category>Java</category>
      <pubDate>Wed, 06 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对 WeakHashMap源码解析 源码解析。</p>
</blockquote>
<ul>
<li>WeakHashMap 源码解析
<ul>
<li>Java 7- WeakHashMap
<ul>
<li><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">总体介绍</a></li>
<li><a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">具体实现</a></li>
<li><a href="#weak-hashset">Weak HashSet?</a></li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#java-7-weakhashmap"><span></span></a><a href="#java-7-weakhashmap">#</a> Java 7- WeakHashMap</h2>
<h3><a class="header-anchor" href="#总体介绍"><span></span></a><a href="#%E6%80%BB%E4%BD%93%E4%BB%8B%E7%BB%8D">#</a> 总体介绍</h3>
<p>在Java集合框架系列文章的最后，笔者打算介绍一个特殊的成员: <em>WeakHashMap</em>，从名字可以看出它是某种 <em>Map</em>。它的特殊之处在于 <em>WeakHashMap</em> 里的<code>entry</code>可能会被GC自动删除，即使程序员没有调用<code>remove()</code>或者<code>clear()</code>方法。</p>
<p>更直观的说，当使用 <em>WeakHashMap</em> 时，即使没有显示的添加或删除任何元素，也可能发生如下情况:</p>
<blockquote>
<ul>
<li>调用两次<code>size()</code>方法返回不同的值；</li>
<li>两次调用<code>isEmpty()</code>方法，第一次返回<code>false</code>，第二次返回<code>true</code>；</li>
<li>两次调用<code>containsKey()</code>方法，第一次返回<code>true</code>，第二次返回<code>false</code>，尽管两次使用的是同一个<code>key</code>；</li>
<li>两次调用<code>get()</code>方法，第一次返回一个<code>value</code>，第二次返回<code>null</code>，尽管两次使用的是同一个对象。</li>
</ul>
</blockquote>
<p>遇到这么奇葩的现象，你是不是觉得使用者一定会疯掉? 其实不然，<strong>WeakHashMap 的这个特点特别适用于需要缓存的场景</strong>。在缓存场景下，由于内存是有限的，不能缓存所有对象；对象缓存命中可以提高系统效率，但缓存MISS也不会造成错误，因为可以通过计算重新得到。</p>
<p>要明白 <em>WeakHashMap</em> 的工作原理，还需要引入一个概念 : <strong>弱引用(WeakReference)</strong>。我们都知道Java中内存是通过GC自动管理的，GC会在程序运行过程中自动判断哪些对象是可以被回收的，并在合适的时机进行内存释放。GC判断某个对象是否可被回收的依据是，<strong>是否有有效的引用指向该对象</strong>。如果没有有效引用指向该对象(基本意味着不存在访问该对象的方式)，那么该对象就是可回收的。这里的<strong>有效引用</strong> 并不包括<strong>弱引用</strong>。也就是说，<strong>虽然弱引用可以用来访问对象，但进行垃圾回收时弱引用并不会被考虑在内，仅有弱引用指向的对象仍然会被GC回收</strong>。</p>
<p><em>WeakHashMap</em> 内部是通过弱引用来管理<code>entry</code>的，弱引用的特性对应到 <em>WeakHashMap</em> 上意味着什么呢？<strong>将一对<code>key, value</code>放入到 *WeakHashMap* 里并不能避免该<code>key</code>值被GC回收，除非在 *WeakHashMap* 之外还有对该<code>key</code>的强引用</strong>。</p>
<p>关于强引用，弱引用等概念以后再具体讲解，这里只需要知道Java中引用也是分种类的，并且不同种类的引用对GC的影响不同就够了。</p>
<h3><a class="header-anchor" href="#具体实现"><span></span></a><a href="#%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0">#</a> 具体实现</h3>
<p>WeakHashMap的存储结构类似于<a href="">Map - HashSet &amp; HashMap 源码解析</a>，这里不再赘述。</p>
<p>关于强弱引用的管理方式，博主将会另开专题单独讲解。</p>
<h3><a class="header-anchor" href="#weak-hashset"><span></span></a><a href="#weak-hashset">#</a> Weak HashSet?</h3>
<p>如果你看过前几篇关于 <em>Map</em> 和 <em>Set</em> 的讲解，一定会问: 既然有 <em>WeakHashMap</em>，是否有 <em>WeekHashSet</em> 呢? 答案是没有:( 。不过Java <em>Collections</em>工具类给出了解决方案，<code>Collections.newSetFromMap(Map&lt;E,Boolean&gt; map)</code>方法可以将任何 <em>Map</em>包装成一个<em>Set</em>。通过如下方式可以快速得到一个 <em>Weak HashSet</em>:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// 将WeakHashMap包装成一个Set</span></span>
<span class="line"><span style="color:#E5C07B">Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> weakHashSet </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Collections</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newSetFromMap</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#C678DD">        new</span><span style="color:#E5C07B"> WeakHashMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt;());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不出你所料，<code>newSetFromMap()</code>方法只是对传入的 <em>Map</em>做了简单包装:</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic">// Collections.newSetFromMap()用于将任何Map包装成一个Set</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> static</span><span style="color:#56B6C2"> &lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#E5C07B"> Set</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#56B6C2">&gt;</span><span style="color:#61AFEF"> newSetFromMap</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Map</span><span style="color:#56B6C2">&lt;</span><span style="color:#E06C75">E</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> Boolean</span><span style="color:#56B6C2">&gt;</span><span style="color:#E06C75"> map) {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> SetFromMap</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(map)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> SetFromMap</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> AbstractSet</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span></span>
<span class="line"><span style="color:#C678DD">    implements</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;,</span><span style="color:#E5C07B"> Serializable</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Boolean</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> m</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  // The backing map</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> transient</span><span style="color:#E5C07B"> Set</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> s</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">       // Its keySet</span></span>
<span class="line"><span style="color:#61AFEF">    SetFromMap</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Map</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">map</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E5C07B">map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isEmpty</span><span style="color:#ABB2BF">())</span></span>
<span class="line"><span style="color:#C678DD">            throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> IllegalArgumentException</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Map is non-empty"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">        m </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> map;</span></span>
<span class="line"><span style="color:#ABB2BF">        s </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> map</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">keySet</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> clear</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">               {        </span><span style="color:#E5C07B">m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">clear</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> size</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">                 { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">size</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> isEmpty</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">          { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">isEmpty</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> contains</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">containsKey</span><span style="color:#ABB2BF">(o); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> remove</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">remove</span><span style="color:#ABB2BF">(o) </span><span style="color:#56B6C2">!=</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">E</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> m</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">put</span><span style="color:#ABB2BF">(e, </span><span style="color:#E5C07B">Boolean</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">TRUE</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">==</span><span style="color:#D19A66"> null</span><span style="color:#ABB2BF">; }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Iterator</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">E</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> iterator</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">     { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">iterator</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF">[] toArray</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">         { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> T</span><span style="color:#61AFEF">[] toArray</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">     { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toArray</span><span style="color:#ABB2BF">(a); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">          { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> hashCode</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF">             { </span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">hashCode</span><span style="color:#ABB2BF">(); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> equals</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75;font-style:italic"> o</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   { </span><span style="color:#C678DD">return</span><span style="color:#ABB2BF"> o </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> this</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(o); }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> containsAll</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">c</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">containsAll</span><span style="color:#ABB2BF">(c);}</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> removeAll</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">c</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   {</span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">removeAll</span><span style="color:#ABB2BF">(c);}</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> retainAll</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Collection</span><span style="color:#ABB2BF">&lt;</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">c</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF">   {</span><span style="color:#C678DD">return</span><span style="color:#E5C07B"> s</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">retainAll</span><span style="color:#ABB2BF">(c);}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // addAll is the only inherited implementation</span></span>
<span class="line"><span style="color:#ABB2BF">    ......</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 基础之图谱</title>
      <link>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html</link>
      <guid>https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html</guid>
      <source url="https://cactusli.net/rss.xml">Java 基础之图谱</source>
      <description>本文主要对Java基础知识体系小结，同时结合一些Q&amp;A进行理解。 Java 基础之图谱 参考文档 知识体系 Q&amp;A Java 中应该使用什么数据类型来代表价格? 怎么将 byte 转换为 String? Java 中怎样将 bytes 转换为 long 类型? 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，...</description>
      <category>Java</category>
      <pubDate>Tue, 05 Mar 2024 18:06:22 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文主要对Java基础知识体系小结，同时结合一些Q&amp;A进行理解。</p>
</blockquote>
<ul>
<li>Java 基础之图谱
<ul>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li>
<li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li>
<li>Q&amp;A
<ul>
<li><a href="#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC">Java 中应该使用什么数据类型来代表价格?</a></li>
<li><a href="#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string">怎么将 byte 转换为 String?</a></li>
<li><a href="#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B">Java 中怎样将 bytes 转换为 long 类型?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1">我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</a></li>
<li><a href="#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BBb-%E7%BB%A7%E6%89%BF-ac-%E7%BB%A7%E6%89%BF-b%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c--c-b">存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</a></li>
<li><a href="#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object">哪个类包含 clone 方法? 是 Cloneable 还是 Object?</a></li>
<li><a href="#java-%E4%B8%AD--%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97">Java 中 ++ 操作符是线程安全的吗?</a></li>
<li><a href="#a--a--b-%E4%B8%8E-a--b-%E7%9A%84%E5%8C%BA%E5%88%AB">a = a + b 与 a += b 的区别</a></li>
<li><a href="#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97">我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</a></li>
<li><a href="#301--03-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false">3*0.1 == 0.3 将会返回什么? true 还是 false?</a></li>
<li><a href="#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98">int 和 Integer 哪个会占用更多的内存?</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84immutable">为什么 Java 中的 String 是不可变的(Immutable)?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97">我们能在 Switch 中使用 String 吗?</a></li>
<li><a href="#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88">Java 中的构造器链是什么?</a></li>
<li><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">枚举类</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97">我们能创建一个包含可变对象的不可变对象吗?</a></li>
<li><a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode">有没有可能两个不相等的对象有相同的 hashcode?</a></li>
<li><a href="#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97">两个相同的对象会有不同的 hash code 吗?</a></li>
<li><a href="#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97">我们可以在 hashcode() 中使用随机数字吗?</a></li>
<li><a href="#java-%E4%B8%ADcomparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">Java 中，Comparator 与 Comparable 有什么不同?</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95">为什么在重写 equals 方法的时候需要重写 hashCode 方法?</a></li>
<li><a href="#ab%E5%92%8Caequalsb%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">“a==b”和”a.equals(b)”有什么区别?</a></li>
<li><a href="#ahashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-aequalsb-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</a></li>
<li><a href="#finalfinalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">final、finalize 和 finally 的不同之处?</a></li>
<li><a href="#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9">Java 中的编译期常量是什么? 使用它又什么风险?</a></li>
<li><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">静态内部类与顶级类有什么区别?</a></li>
<li><a href="#java-%E4%B8%ADserializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB">Java 中，Serializable 与 Externalizable 的区别?</a></li>
<li><a href="#%E8%AF%B4%E5%87%BA-jdk-17-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7">说出 JDK 1.7 中的三个新特性?</a></li>
<li><a href="#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-18-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">说出 5 个 JDK 1.8 引入的新特性?</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB">接口是什么? 为什么要使用接口而不是直接使用具体类?</a></li>
<li><a href="#java-%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">Java 中，抽象类与接口之间有什么不同?</a></li>
<li><a href="#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95">Object有哪些公用方法?</a></li>
<li><a href="#equals%E4%B8%8E%E7%9A%84%E5%8C%BA%E5%88%AB">equals与==的区别</a></li>
<li><a href="#stringstringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">String、StringBuffer与StringBuilder的区别</a></li>
<li><a href="#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0">switch能否用String做参数</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">接口与抽象类</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB">抽象类和最终类</a></li>
<li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li>
<li><a href="#%E5%85%B3%E4%BA%8Efinally">关于finally</a></li>
<li><a href="#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">受检查异常和运行时异常</a></li>
<li><a href="#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F">super出现在父类的子类中。有三种存在方式</a></li>
<li><a href="#this--super%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB">this() &amp; super()在构造方法中的区别</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1">构造内部类和静态内部类对象</a></li>
<li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">序列化</a></li>
<li><a href="#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">Java移位运算符</a></li>
<li><a href="#%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82">形参&amp;实参</a></li>
<li><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96">局部变量为什么要初始化</a></li>
<li><a href="#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7">Java语言的鲁棒性</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#参考文档"><span></span></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">#</a> 参考文档</h2>
<ul>
<li>Thinking in Java (Java 编程思想) Gitbook中文文档 <a href="https://java.quanke.name/" target="_blank" rel="noopener noreferrer">https://java.quanke.name/</a></li>
<li>Thinking in Java (Java 编程思想) Github <a href="https://github.com/quanke/think-in-java" target="_blank" rel="noopener noreferrer">https://github.com/quanke/think-in-java</a></li>
<li>Thinking in Java (Java 编程思想) Gitbook2 <a href="https://www.gitbook.com/book/wizardforcel/thinking-in-java/details" target="_blank" rel="noopener noreferrer">https://www.gitbook.com/book/wizardforcel/thinking-in-java/details</a></li>
</ul>
<h2><a class="header-anchor" href="#知识体系"><span></span></a><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</h2>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h2><a class="header-anchor" href="#q-a"><span></span></a><a href="#q-a">#</a> Q&amp;A</h2>
<h3><a class="header-anchor" href="#java-中应该使用什么数据类型来代表价格"><span></span></a><a href="#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC">#</a> Java 中应该使用什么数据类型来代表价格?</h3>
<p>如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。</p>
<h3><a class="header-anchor" href="#怎么将-byte-转换为-string"><span></span></a><a href="#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string">#</a> 怎么将 byte 转换为 String?</h3>
<p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p>
<h3><a class="header-anchor" href="#java-中怎样将-bytes-转换为-long-类型"><span></span></a><a href="#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B">#</a> Java 中怎样将 bytes 转换为 long 类型?</h3>
<p>String接收bytes的构造器转成String，再Long.parseLong</p>
<h3><a class="header-anchor" href="#我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4-%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1">#</a> 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</h3>
<p>是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。</p>
<h3><a class="header-anchor" href="#存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b"><span></span></a><a href="#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BB-b-%E7%BB%A7%E6%89%BF-a-c-%E7%BB%A7%E6%89%BF-b-%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c-c-b">#</a> 存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</h3>
<p>可以，向下转型。但是不建议使用，容易出现类型转型异常.</p>
<h3><a class="header-anchor" href="#哪个类包含-clone-方法-是-cloneable-还是-object"><span></span></a><a href="#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object">#</a> 哪个类包含 clone 方法? 是 Cloneable 还是 Object?</h3>
<p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p>
<h3><a class="header-anchor" href="#java-中-操作符是线程安全的吗"><span></span></a><a href="#java-%E4%B8%AD-%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97">#</a> Java 中 ++ 操作符是线程安全的吗?</h3>
<p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。还会存在竞态条件(读取-修改-写入)。</p>
<h3><a class="header-anchor" href="#a-a-b-与-a-b-的区别"><span></span></a><a href="#a-a-b-%E4%B8%8E-a-b-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> a = a + b 与 a += b 的区别</h3>
<p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 127</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">byte</span><span style="color:#E06C75"> b </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 127</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">b </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> a </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> b</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // error : cannot convert from int to byte</span></span>
<span class="line"><span style="color:#E06C75">b </span><span style="color:#56B6C2">+=</span><span style="color:#E06C75"> a</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic"> // ok</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p>
<h3><a class="header-anchor" href="#我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗"><span></span></a><a href="#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97">#</a> 我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</h3>
<p>不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。</p>
<h3><a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false"><span></span></a><a href="#_3-0-1-0-3-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false">#</a> 3*0.1 == 0.3 将会返回什么? true 还是 false?</h3>
<p>false，因为有些浮点数不能完全精确的表示出来。</p>
<h3><a class="header-anchor" href="#int-和-integer-哪个会占用更多的内存"><span></span></a><a href="#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98">#</a> int 和 Integer 哪个会占用更多的内存?</h3>
<p>Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p>
<h3><a class="header-anchor" href="#为什么-java-中的-string-是不可变的-immutable"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84-immutable">#</a> 为什么 Java 中的 String 是不可变的(Immutable)?</h3>
<p>Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。更详细的内容参见答案。</p>
<h3><a class="header-anchor" href="#我们能在-switch-中使用-string-吗"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97">#</a> 我们能在 Switch 中使用 String 吗?</h3>
<p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p>
<h3><a class="header-anchor" href="#java-中的构造器链是什么"><span></span></a><a href="#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88">#</a> Java 中的构造器链是什么?</h3>
<p>当你从一个构造器中调用另一个构造器，就是Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。</p>
<h3><a class="header-anchor" href="#枚举类"><span></span></a><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">#</a> 枚举类</h3>
<p>JDK1.5出现 每个枚举值都需要调用一次构造函数</p>
<h3><a class="header-anchor" href="#什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1-immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">#</a> 什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</h3>
<p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。</p>
<p>如何在Java中写出Immutable的类?</p>
<p>要写出这样的类，需要遵循以下几个原则:</p>
<p>1)immutable对象的状态在创建之后就不能发生改变，任何对它的改变都应该产生一个新的对象。</p>
<p>2)Immutable类的所有的属性都应该是final的。</p>
<p>3)对象必须被正确的创建，比如: 对象引用在对象创建过程中不能泄露(leak)。</p>
<p>4)对象应该是final的，以此来限制子类继承父类，以避免子类改变了父类的immutable特性。</p>
<p>5)如果类中包含mutable类对象，那么返回给客户端的时候，返回该对象的一个拷贝，而不是该对象本身(该条可以归为第一条中的一个特例)</p>
<h3><a class="header-anchor" href="#我们能创建一个包含可变对象的不可变对象吗"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97">#</a> 我们能创建一个包含可变对象的不可变对象吗?</h3>
<p>是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。</p>
<h3><a class="header-anchor" href="#有没有可能两个不相等的对象有相同的-hashcode"><span></span></a><a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode">#</a> 有没有可能两个不相等的对象有相同的 hashcode?</h3>
<p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。</p>
<h3><a class="header-anchor" href="#两个相同的对象会有不同的-hash-code-吗"><span></span></a><a href="#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97">#</a> 两个相同的对象会有不同的 hash code 吗?</h3>
<p>不能，根据 hash code 的规定，这是不可能的。</p>
<h3><a class="header-anchor" href="#我们可以在-hashcode-中使用随机数字吗"><span></span></a><a href="#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97">#</a> 我们可以在 hashcode() 中使用随机数字吗?</h3>
<p>不行，因为对象的 hashcode 值必须是相同的。</p>
<h3><a class="header-anchor" href="#java-中-comparator-与-comparable-有什么不同"><span></span></a><a href="#java-%E4%B8%AD-comparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">#</a> Java 中，Comparator 与 Comparable 有什么不同?</h3>
<p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p>
<h3><a class="header-anchor" href="#为什么在重写-equals-方法的时候需要重写-hashcode-方法"><span></span></a><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95">#</a> 为什么在重写 equals 方法的时候需要重写 hashCode 方法?</h3>
<p>因为有强制的规范指定需要同时重写 hashcode 与 equals 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p>
<h3><a class="header-anchor" href="#a-b-和-a-equals-b-有什么区别"><span></span></a><a href="#a-b-%E5%92%8C-a-equals-b-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a> “a==b”和”a.equals(b)”有什么区别?</h3>
<p>如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p>
<h3><a class="header-anchor" href="#a-hashcode-有什么用-与-a-equals-b-有什么关系"><span></span></a><a href="#a-hashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-a-equals-b-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">#</a> a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</h3>
<p>简介: hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equals() 方法来判断相等的对象，必须具有相同的 hash code。</p>
<p>1、hashcode的作用</p>
<p>List和Set，如何保证Set不重复呢? 通过迭代使用equals方法来判断，数据量小还可以接受，数据量大怎么解决? 引入hashcode，实际上hashcode扮演的角色就是寻址，大大减少查询匹配次数。</p>
<p>2、hashcode重要吗</p>
<p>对于数组、List集合就是一个累赘。而对于hashmap, hashset, hashtable就异常重要了。</p>
<p>3、equals方法遵循的原则</p>
<ul>
<li>对称性 若x.equals(y)true，则y.equals(x)true</li>
<li>自反性 x.equals(x)必须true</li>
<li>传递性 若x.equals(y)true,y.equals(z)true,则x.equals(z)必为true</li>
<li>一致性 只要x,y内容不变，无论调用多少次结果不变</li>
<li>其他 x.equals(null) 永远false，x.equals(和x数据类型不同)始终false</li>
</ul>
<h3><a class="header-anchor" href="#final、finalize-和-finally-的不同之处"><span></span></a><a href="#final%E3%80%81finalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">#</a> final、finalize 和 finally 的不同之处?</h3>
<ul>
<li>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。</li>
<li>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</li>
<li>finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li>
</ul>
<h3><a class="header-anchor" href="#java-中的编译期常量是什么-使用它又什么风险"><span></span></a><a href="#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9">#</a> Java 中的编译期常量是什么? 使用它又什么风险?</h3>
<p>变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p>
<h3><a class="header-anchor" href="#静态内部类与顶级类有什么区别"><span></span></a><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a> 静态内部类与顶级类有什么区别?</h3>
<p>一个公共的顶级类的源文件名称与类名相同，而嵌套静态类没有这个要求。一个嵌套类位于顶级类内部，需要使用顶级类的名称来引用嵌套静态类，如 HashMap.Entry 是一个嵌套静态类，HashMap 是一个顶级类，Entry是一个嵌套静态类。</p>
<h3><a class="header-anchor" href="#java-中-serializable-与-externalizable-的区别"><span></span></a><a href="#java-%E4%B8%AD-serializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Java 中，Serializable 与 Externalizable 的区别?</h3>
<p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p>
<h3><a class="header-anchor" href="#说出-jdk-1-7-中的三个新特性"><span></span></a><a href="#%E8%AF%B4%E5%87%BA-jdk-1-7-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7">#</a> 说出 JDK 1.7 中的三个新特性?</h3>
<p>虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(&lt;&gt;)用于泛型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。</p>
<h3><a class="header-anchor" href="#说出-5-个-jdk-1-8-引入的新特性"><span></span></a><a href="#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-1-8-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">#</a> 说出 5 个 JDK 1.8 引入的新特性?</h3>
<p>Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性: Lambda 表达式，允许像对象一样传递匿名函数 Stream API，充分利用现代多核 CPU，可以写出很简洁的代码 Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用 扩展方法，现在，接口中可以有静态、默认方法。 重复注解，现在你可以将相同的注解在同一类型上使用多次。</p>
<p>下述包含 Java 面试过程中关于 SOLID 的设计原则，OOP 基础，如类，对象，接口，继承，多态，封装，抽象以及更高级的一些概念，如组合、聚合及关联。也包含了 GOF 设计模式的问题。</p>
<h3><a class="header-anchor" href="#接口是什么-为什么要使用接口而不是直接使用具体类"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB">#</a> 接口是什么? 为什么要使用接口而不是直接使用具体类?</h3>
<p>接口用于定义 API。它定义了类必须得遵循的规则。同时，它提供了一种抽象，因为客户端只使用接口，这样可以有多重实现，如 List 接口，你可以使用可随机访问的 ArrayList，也可以使用方便插入和删除的 LinkedList。接口中不允许普通方法，以此来保证抽象，但是 Java 8 中你可以在接口声明静态方法和默认普通方法。</p>
<h3><a class="header-anchor" href="#java-中-抽象类与接口之间有什么不同"><span></span></a><a href="#java-%E4%B8%AD-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">#</a> Java 中，抽象类与接口之间有什么不同?</h3>
<p>Java 中，抽象类和接口有很多不同之处，但是最重要的一个是 Java 中限制一个类只能继承一个类，但是可以实现多个接口。抽象类可以很好的定义一个家族类的默认行为，而接口能更好的定义类型，有助于后面实现多态机制 参见第六条。</p>
<h3><a class="header-anchor" href="#object有哪些公用方法"><span></span></a><a href="#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95">#</a> Object有哪些公用方法?</h3>
<p>clone equals hashcode wait notify notifyall finalize toString getClass 除了clone和finalize其他均为公共方法。</p>
<p>11个方法，wait被重载了两次</p>
<h3><a class="header-anchor" href="#equals与-的区别"><span></span></a><a href="#equals%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> equals与==的区别</h3>
<p>区别1. ==是一个运算符 equals是Object类的方法</p>
<p>区别2. 比较时的区别</p>
<ul>
<li>用于基本类型的变量比较时: ==用于比较值是否相等，equals不能直接用于基本数据类型的比较，需要转换为其对应的包装类型。</li>
<li>用于引用类型的比较时。==和equals都是比较栈内存中的地址是否相等 。相等为true 否则为false。但是通常会重写equals方法去实现对象内容的比较。</li>
</ul>
<h3><a class="header-anchor" href="#string、stringbuffer与stringbuilder的区别"><span></span></a><a href="#string%E3%80%81stringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> String、StringBuffer与StringBuilder的区别</h3>
<p>第一点: 可变和适用范围。String对象是不可变的，而StringBuffer和StringBuilder是可变字符序列。每次对String的操作相当于生成一个新的String对象，而对StringBuffer和StringBuilder的操作是对对象本身的操作，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用String，因为频繁的生成对象将会对系统性能产生影响。</p>
<p>第二点: 线程安全。String由于有final修饰，是immutable的，安全性是简单而纯粹的。StringBuilder和StringBuffer的区别在于StringBuilder不保证同步，也就是说如果需要线程安全需要使用StringBuffer，不需要同步的StringBuilder效率更高。</p>
<h3><a class="header-anchor" href="#switch能否用string做参数"><span></span></a><a href="#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0">#</a> switch能否用String做参数</h3>
<p>Java1.7开始支持，但实际这是一颗Java语法糖。除此之外，byte，short，int，枚举均可用于switch，而boolean和浮点型不可以。</p>
<h3><a class="header-anchor" href="#接口与抽象类"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> 接口与抽象类</h3>
<ul>
<li>一个子类只能继承一个抽象类, 但能实现多个接口</li>
<li>抽象类可以有构造方法, 接口没有构造方法</li>
<li>抽象类可以有普通成员变量, 接口没有普通成员变量</li>
<li>抽象类和接口都可有静态成员变量, 抽象类中静态成员变量访问类型任意，接口只能public static final(默认)</li>
<li>抽象类可以没有抽象方法, 抽象类可以有普通方法；接口在JDK8之前都是抽象方法，在JDK8可以有default方法，在JDK9中允许有私有普通方法</li>
<li>抽象类可以有静态方法；接口在JDK8之前不能有静态方法，在JDK8中可以有静态方法，且只能被接口类直接调用（不能被实现类的对象调用）</li>
<li>抽象类中的方法可以是public、protected; 接口方法在JDK8之前只有public abstract，在JDK8可以有default方法，在JDK9中允许有private方法</li>
</ul>
<h3><a class="header-anchor" href="#抽象类和最终类"><span></span></a><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB">#</a> 抽象类和最终类</h3>
<p>抽象类可以没有抽象方法, 最终类可以没有最终方法</p>
<p>最终类不能被继承, 最终方法不能被重写(可以重载)</p>
<h3><a class="header-anchor" href="#异常"><span></span></a><a href="#%E5%BC%82%E5%B8%B8">#</a> 异常</h3>
<p>相关的关键字 throw、throws、try...catch、finally</p>
<ul>
<li>throws 用在方法签名上, 以便抛出的异常可以被调用者处理</li>
<li>throw 方法内部通过throw抛出异常</li>
<li>try 用于检测包住的语句块, 若有异常, catch子句捕获并执行catch块</li>
</ul>
<h3><a class="header-anchor" href="#关于finally"><span></span></a><a href="#%E5%85%B3%E4%BA%8Efinally">#</a> 关于finally</h3>
<ul>
<li>finally不管有没有异常都要处理</li>
<li>当try和catch中有return时，finally仍然会执行，finally比return先执行</li>
<li>不管有木有异常抛出, finally在return返回前执行</li>
<li>finally是在return后面的表达式运算后执行的(此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值)，所以函数返回值是在finally执行前确定的</li>
</ul>
<p>注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值</p>
<p>finally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电</p>
<h3><a class="header-anchor" href="#受检查异常和运行时异常"><span></span></a><a href="#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">#</a> 受检查异常和运行时异常</h3>
<ul>
<li>受检查的异常(checked exceptions),其必须被try...catch语句块所捕获, 或者在方法签名里通过throws子句声明。受检查的异常必须在编译时被捕捉处理,命名为Checked Exception是因为Java编译器要进行检查, Java虚拟机也要进行检查, 以确保这个规则得到遵守。</li>
</ul>
<p>常见的checked exception: ClassNotFoundException IOException FileNotFoundException EOFException</p>
<ul>
<li>运行时异常(runtime exceptions), 需要程序员自己分析代码决定是否捕获和处理,比如空指针,被0除...</li>
</ul>
<p>常见的runtime exception: NullPointerException ArithmeticException ClassCastException IllegalArgumentException IllegalStateException IndexOutOfBoundsException NoSuchElementException</p>
<ul>
<li>Error的，则属于严重错误，如系统崩溃、虚拟机错误、动态链接失败等，这些错误无法恢复或者不可能捕捉，将导致应用程序中断，Error不需要捕获。</li>
</ul>
<h3><a class="header-anchor" href="#super出现在父类的子类中。有三种存在方式"><span></span></a><a href="#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E3%80%82%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F">#</a> super出现在父类的子类中。有三种存在方式</h3>
<ul>
<li><a href="http://super.xxx" target="_blank" rel="noopener noreferrer">super.xxx</a>(xxx为变量名或对象名)意思是获取父类中xxx的变量或引用</li>
<li><a href="http://super.xxx" target="_blank" rel="noopener noreferrer">super.xxx</a>(); (xxx为方法名)意思是直接访问并调用父类中的方法</li>
<li>super() 调用父类构造</li>
</ul>
<p>注: super只能指代其直接父类</p>
<h3><a class="header-anchor" href="#this-super-在构造方法中的区别"><span></span></a><a href="#this-super-%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> this() &amp; super()在构造方法中的区别</h3>
<ul>
<li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li>
<li>super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行</li>
<li>尽管可以用this调用一个构造器, 却不能调用2个</li>
<li>this和super不能出现在同一个构造器中, 否则编译不通过</li>
<li>this()、super()都指的对象,不可以在static环境中使用</li>
<li>本质this指向本对象的指针。super是一个关键字</li>
</ul>
<h3><a class="header-anchor" href="#构造内部类和静态内部类对象"><span></span></a><a href="#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1">#</a> 构造内部类和静态内部类对象</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Enclosingone</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Insideone</span><span style="color:#ABB2BF"> {}</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Insideone</span><span style="color:#ABB2BF">{}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">	public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 构造内部类对象需要外部类的引用</span></span>
<span class="line"><span style="color:#E5C07B">	Enclosingone</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Insideone</span><span style="color:#E06C75"> obj1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Enclosingone</span><span style="color:#ABB2BF">().</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Insideone</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">	// 构造静态内部类的对象</span></span>
<span class="line"><span style="color:#E5C07B">	Enclosingone</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">Insideone</span><span style="color:#E06C75"> obj2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#ABB2BF"> Enclosingone.</span><span style="color:#61AFEF">Insideone</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">	}</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态内部类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。非静态内部类能够访问外部类的静态和非静态成员。静态内部类不能访问外部类的非静态成员，只能访问外部类的静态成员。</p>
<h3><a class="header-anchor" href="#序列化"><span></span></a><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">#</a> 序列化</h3>
<p>声明为static和transient类型的数据不能被序列化， 反序列化需要一个无参构造函数</p>
<h3><a class="header-anchor" href="#java移位运算符"><span></span></a><a href="#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">#</a> Java移位运算符</h3>
<p>java中有三种移位运算符</p>
<ul>
<li><code>&lt;&lt;</code> :左移运算符,<code>x &lt;&lt; 1</code>,相当于x乘以2(不溢出的情况下),低位补0</li>
<li><code>&gt;&gt;</code> :带符号右移,<code>x &gt;&gt; 1</code>,相当于x除以2,正数高位补0,负数高位补1</li>
<li><code>&gt;&gt;&gt;</code> :无符号右移,忽略符号位,空位都以0补齐</li>
</ul>
<h3><a class="header-anchor" href="#形参-实参"><span></span></a><a href="#%E5%BD%A2%E5%8F%82-%E5%AE%9E%E5%8F%82">#</a> 形参&amp;实参</h3>
<p>形式参数可被视为local variable.形参和局部变量一样都不能离开方法。只有在方法中使用，不会在方法外可见。 形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误。但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改。不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下，那就是: 方法内部类。一个方法内的内部类如果使用了这个方法的参数或者局部变量的话，这个参数或局部变量应该是final。 形参的值在调用时根据调用者更改，实参则用自身的值更改形参的值(指针、引用皆在此列)，也就是说真正被传递的是实参。</p>
<h3><a class="header-anchor" href="#局部变量为什么要初始化"><span></span></a><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 局部变量为什么要初始化</h3>
<p>局部变量是指类方法中的变量，必须初始化。局部变量运行时被分配在栈中，量大，生命周期短，如果虚拟机给每个局部变量都初始化一下，是一笔很大的开销，但变量不初始化为默认值就使用是不安全的。出于速度和安全性两个方面的综合考虑，解决方案就是虚拟机不初始化，但要求编写者一定要在使用前给变量赋值。</p>
<h3><a class="header-anchor" href="#java语言的鲁棒性"><span></span></a><a href="#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7">#</a> Java语言的鲁棒性</h3>
<p>Java在编译和运行程序时，都要对可能出现的问题进行检查，以消除错误的产生。它提供自动垃圾收集来进行内存管理，防止程序员在管理内存时容易产生的错误。通过集成的面向对象的例外处理机制，在编译时，Java揭示出可能出现但未被处理的异常，帮助程序员正确地进行选择以防止系统的崩溃。另外，Java在编译时还可捕获类型声明中的许多常见错误，防止动态运行时不匹配问题的出现。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 中的CAS, Unsafe和原子类解析</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E4%B8%AD%E7%9A%84CAS_%20Unsafe%E5%92%8C%E5%8E%9F%E5%AD%90%E7%B1%BB%E8%A7%A3%E6%9E%90.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E4%B8%AD%E7%9A%84CAS_%20Unsafe%E5%92%8C%E5%8E%9F%E5%AD%90%E7%B1%BB%E8%A7%A3%E6%9E%90.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 中的CAS, Unsafe和原子类解析</source>
      <description>JUC中多数类是通过volatile和CAS来实现的，CAS本质上提供的是一种无锁方案，而Synchronized和Lock是互斥锁方案; java原子类本质上使用的是CAS，而CAS底层是通过Unsafe类实现的。所以本章将对CAS, Unsafe和原子类详解。 JUC 中的CAS, Unsafe和原子类解析 带着BAT大厂的面试问题去理解 CAS ...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>JUC中多数类是通过volatile和CAS来实现的，CAS本质上提供的是一种无锁方案，而Synchronized和Lock是互斥锁方案; java原子类本质上使用的是CAS，而CAS底层是通过Unsafe类实现的。所以本章将对CAS, Unsafe和原子类详解。</p>
</blockquote>
<ul>
<li>JUC 中的CAS, Unsafe和原子类解析
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>CAS
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFcas">什么是CAS</a></li>
<li><a href="#cas%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">CAS使用示例</a></li>
<li>CAS 问题
<ul>
<li><a href="#aba%E9%97%AE%E9%A2%98">ABA问题</a></li>
<li><a href="#%E5%BE%AA%E7%8E%AF%E6%97%B6%E9%97%B4%E9%95%BF%E5%BC%80%E9%94%80%E5%A4%A7">循环时间长开销大</a></li>
<li><a href="#%E5%8F%AA%E8%83%BD%E4%BF%9D%E8%AF%81%E4%B8%80%E4%B8%AA%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C">只能保证一个共享变量的原子操作</a></li>
</ul>
</li>
</ul>
</li>
<li>UnSafe类详解
<ul>
<li><a href="#unsafe%E4%B8%8Ecas">Unsafe与CAS</a></li>
<li><a href="#unsafe%E5%BA%95%E5%B1%82">Unsafe底层</a></li>
<li><a href="#unsafe%E5%85%B6%E5%AE%83%E5%8A%9F%E8%83%BD">Unsafe其它功能</a></li>
</ul>
</li>
<li>AtomicInteger
<ul>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B">使用举例</a></li>
<li><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">源码解析</a></li>
</ul>
</li>
<li>延伸到所有原子类：共13个
<ul>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">原子更新基本类型</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84">原子更新数组</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">原子更新引用类型</a></li>
<li><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E7%B1%BB">原子更新字段类</a></li>
</ul>
</li>
<li>再讲讲AtomicStampedReference解决CAS的ABA问题
<ul>
<li><a href="#atomicstampedreference%E8%A7%A3%E5%86%B3aba%E9%97%AE%E9%A2%98">AtomicStampedReference解决ABA问题</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B-1">使用举例</a></li>
<li><a href="#java%E4%B8%AD%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3aba%E7%9A%84%E9%97%AE%E9%A2%98">java中还有哪些类可以解决ABA的问题? </a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>线程安全的实现方法有哪些?</li>
<li>什么是CAS?</li>
<li>CAS使用示例，结合AtomicInteger给出示例?</li>
<li>CAS会有哪些问题?</li>
<li>针对这这些问题，Java提供了哪几个解决的?</li>
<li>AtomicInteger底层实现? CAS+volatile</li>
<li>请阐述你对Unsafe类的理解?</li>
<li>说说你对Java原子类的理解? 包含13个，4组分类，说说作用和使用场景。</li>
<li>AtomicStampedReference是什么?</li>
<li>AtomicStampedReference是怎么解决ABA的? 内部使用Pair来存储元素值及其版本号</li>
<li>java中还有哪些类可以解决ABA的问题? AtomicMarkableReference</li>
</ul>
<h2><a class="header-anchor" href="#cas"><span></span></a><a href="#cas">#</a> CAS</h2>
<p>前面我们说到，线程安全的实现方法包含:</p>
<ul>
<li>互斥同步: synchronized 和 ReentrantLock</li>
<li>非阻塞同步: CAS, AtomicXXXX</li>
<li>无同步方案: 栈封闭，Thread Local，可重入代码</li>
</ul>
<p>具体可以参看：<a href="">线程安全的实现方法</a>，这里我们将对CAS重点阐释。</p>
<h3><a class="header-anchor" href="#什么是cas"><span></span></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AFcas">#</a> 什么是CAS</h3>
<p>CAS的全称为Compare-And-Swap，直译就是对比交换。是一条CPU的原子指令，其作用是让CPU先进行比较两个值是否相等，然后原子地更新某个位置的值，经过调查发现，其实现方式是基于硬件平台的汇编指令，就是说CAS是靠硬件实现的，JVM只是封装了汇编调用，那些AtomicInteger类便是使用了这些封装后的接口。   简单解释：CAS操作需要输入两个数值，一个旧值(期望操作前的值)和一个新值，在操作期间先比较下在旧值有没有发生变化，如果没有发生变化，才交换成新值，发生了变化则不交换。</p>
<p>CAS操作是原子性的，所以多线程并发使用CAS更新数据时，可以不使用锁。JDK中大量使用了CAS来更新数据而防止加锁(synchronized 重量级锁)来保持原子更新。</p>
<p>相信sql大家都熟悉，类似sql中的条件更新一样：update set id=3 from table where id=2。因为单条sql执行具有原子性，如果有多个线程同时执行此sql语句，只有一条能更新成功。</p>
<h3><a class="header-anchor" href="#cas使用示例"><span></span></a><a href="#cas%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">#</a> CAS使用示例</h3>
<p>如果不使用CAS，在高并发下，多线程同时修改一个变量的值我们需要synchronized加锁(可能有人说可以用Lock加锁，Lock底层的AQS也是基于CAS进行获取锁的)。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> i++;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>java中为我们提供了AtomicInteger 原子类(底层基于CAS进行更新数据的)，不需要加锁就在多线程并发场景下实现数据的一致性。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Test</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#E5C07B">  AtomicInteger</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicInteger</span><span style="color:#E06C75">(</span><span style="color:#D19A66">0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> add</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> i</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">addAndGet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#cas-问题"><span></span></a><a href="#cas-%E9%97%AE%E9%A2%98">#</a> CAS 问题</h3>
<p>CAS 方式为乐观锁，synchronized 为悲观锁。因此使用 CAS 解决并发问题通常情况下性能更优。</p>
<p>但使用 CAS 方式也会有几个问题：</p>
<h4><a class="header-anchor" href="#aba问题"><span></span></a><a href="#aba%E9%97%AE%E9%A2%98">#</a> ABA问题</h4>
<p>因为CAS需要在操作值的时候，检查值有没有发生变化，比如没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时则会发现它的值没有发生变化，但是实际上却变化了。</p>
<p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A-&gt;B-&gt;A就会变成1A-&gt;2B-&gt;3A。</p>
<p>从Java 1.5开始，JDK的Atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。</p>
<h4><a class="header-anchor" href="#循环时间长开销大"><span></span></a><a href="#%E5%BE%AA%E7%8E%AF%E6%97%B6%E9%97%B4%E9%95%BF%E5%BC%80%E9%94%80%E5%A4%A7">#</a> 循环时间长开销大</h4>
<p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause指令有两个作用：第一，它可以延迟流水线执行命令(de-pipeline)，使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零；第二，它可以避免在退出循环的时候因内存顺序冲突(Memory Order Violation)而引起CPU流水线被清空(CPU Pipeline Flush)，从而提高CPU的执行效率。</p>
<h4><a class="header-anchor" href="#只能保证一个共享变量的原子操作"><span></span></a><a href="#%E5%8F%AA%E8%83%BD%E4%BF%9D%E8%AF%81%E4%B8%80%E4%B8%AA%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C">#</a> 只能保证一个共享变量的原子操作</h4>
<p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p>
<p>还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如，有两个共享变量i = 2，j = a，合并一下ij = 2a，然后用CAS来操作ij。</p>
<p>从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p>
<h2><a class="header-anchor" href="#unsafe类详解"><span></span></a><a href="#unsafe%E7%B1%BB%E8%AF%A6%E8%A7%A3">#</a> UnSafe类详解</h2>
<blockquote>
<p>上文我们了解到Java原子类是通过UnSafe类实现的，这节主要分析下UnSafe类。UnSafe类在J.U.C中CAS操作有很广泛的应用。</p>
</blockquote>
<p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p>
<p>这个类尽管里面的方法都是 public 的，但是并没有办法使用它们，JDK API 文档也没有提供任何关于这个类的方法的解释。总而言之，对于 Unsafe 类的使用都是受限制的，只有授信的代码才能获得该类的实例，当然 JDK 库里面的类是可以随意使用的。</p>
<p>先来看下这张图，对UnSafe类总体功能：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-atomicinteger-unsafe.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类，下面将对其相关方法和应用场景进行详细介绍。</p>
<h3><a class="header-anchor" href="#unsafe与cas"><span></span></a><a href="#unsafe%E4%B8%8Ecas">#</a> Unsafe与CAS</h3>
<p>反编译出来的代码：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAddInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getIntVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> paramInt))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> getAndAddLong</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      l </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getLongVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> l </span><span style="color:#56B6C2">+</span><span style="color:#E06C75"> paramLong2))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndSetInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      i </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getIntVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapInt</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramInt))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> i</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> getAndSetLong</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#C678DD">    long</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      l </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getLongVolatile</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapLong</span><span style="color:#E06C75">(paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong2))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> l</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">  public</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Object</span><span style="color:#61AFEF"> getAndSetObject</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> paramObject2)</span></span>
<span class="line"><span style="color:#E06C75">  {</span></span>
<span class="line"><span style="color:#E5C07B">    Object</span><span style="color:#E06C75"> localObject</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    do</span></span>
<span class="line"><span style="color:#E06C75">      localObject </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> getObjectVolatile</span><span style="color:#E06C75">(paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    while</span><span style="color:#E06C75"> (</span><span style="color:#56B6C2">!</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#E06C75">(paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> localObject</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> paramObject2))</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> localObject</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">  }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中发现，内部使用自旋的方式进行CAS更新(while循环进行CAS更新，如果更新失败，则循环再次重试)。</p>
<p>又从Unsafe类中发现，原子操作其实只支持下面三个方法。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSwapObject</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> paramObject2</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B"> Object</span><span style="color:#E06C75"> paramObject3)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSwapInt</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> paramInt2)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSwapLong</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Object</span><span style="color:#E06C75"> paramObject</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong3)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现Unsafe只提供了3种CAS方法：compareAndSwapObject、compareAndSwapInt和compareAndSwapLong。都是native方法。</p>
<h3><a class="header-anchor" href="#unsafe底层"><span></span></a><a href="#unsafe%E5%BA%95%E5%B1%82">#</a> Unsafe底层</h3>
<p>不妨再看看Unsafe的compareAndSwap*方法来实现CAS操作，它是一个本地方法，实现位于unsafe.cpp中。</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">UNSAFE_ENTRY</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">jboolean</span><span style="color:#ABB2BF">,</span><span style="color:#61AFEF"> Unsafe_CompareAndSwapInt</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">JNIEnv </span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic">env</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">unsafe</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jobject </span><span style="color:#E06C75;font-style:italic">obj</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jlong </span><span style="color:#E06C75;font-style:italic">offset</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">e</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">x</span><span style="color:#ABB2BF">))</span></span>
<span class="line"><span style="color:#61AFEF">  UnsafeWrapper</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"Unsafe_CompareAndSwapInt"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  oop p </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> JNIHandles::</span><span style="color:#61AFEF">resolve</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">obj</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">  jint</span><span style="color:#C678DD">*</span><span style="color:#ABB2BF"> addr </span><span style="color:#C678DD">=</span><span style="color:#ABB2BF"> (jint </span><span style="color:#C678DD">*</span><span style="color:#ABB2BF">) </span><span style="color:#61AFEF">index_oop_from_field_offset_long</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">p</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> offset</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> (jint)(Atomic::</span><span style="color:#61AFEF">cmpxchg</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> addr</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> e</span><span style="color:#ABB2BF">)) </span><span style="color:#C678DD">==</span><span style="color:#ABB2BF"> e;</span></span>
<span class="line"><span style="color:#ABB2BF">UNSAFE_END</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到它通过 <code>Atomic::cmpxchg</code> 来实现比较和替换操作。其中参数x是即将更新的值，参数e是原内存的值。</p>
<p>如果是Linux的x86，<code>Atomic::cmpxchg</code>方法的实现如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">inline</span><span style="color:#ABB2BF"> jint Atomic::</span><span style="color:#61AFEF">cmpxchg</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">jint </span><span style="color:#E06C75;font-style:italic">exchange_value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> volatile</span><span style="color:#E06C75"> jint</span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic"> dest</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">compare_value</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">  int</span><span style="color:#ABB2BF"> mp </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> os::is_MP</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">  __asm__</span><span style="color:#C678DD"> volatile</span><span style="color:#ABB2BF"> (LOCK_IF_MP(</span><span style="color:#C678DD">%</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">) </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">cmpxchgl %1,(%3)</span><span style="color:#98C379">"</span></span>
<span class="line"><span style="color:#ABB2BF">                    : </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">=a</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (exchange_value)</span></span>
<span class="line"><span style="color:#ABB2BF">                    : </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">r</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (exchange_value), </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">a</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (compare_value), </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">r</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (dest), </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">r</span><span style="color:#98C379">"</span><span style="color:#ABB2BF"> (mp)</span></span>
<span class="line"><span style="color:#ABB2BF">                    : </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">cc</span><span style="color:#98C379">"</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">"</span><span style="color:#ABB2BF">memory</span><span style="color:#98C379">"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> exchange_value;</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而windows的x86的实现如下：</p>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">inline</span><span style="color:#ABB2BF"> jint Atomic::</span><span style="color:#61AFEF">cmpxchg</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75">jint </span><span style="color:#E06C75;font-style:italic">exchange_value</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> volatile</span><span style="color:#E06C75"> jint</span><span style="color:#C678DD">*</span><span style="color:#E06C75;font-style:italic"> dest</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75"> jint </span><span style="color:#E06C75;font-style:italic">compare_value</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#C678DD">    int</span><span style="color:#ABB2BF"> mp </span><span style="color:#C678DD">=</span><span style="color:#61AFEF"> os::isMP</span><span style="color:#ABB2BF">();</span><span style="color:#7F848E;font-style:italic"> //判断是否是多处理器</span></span>
<span class="line"><span style="color:#ABB2BF">    _asm {</span></span>
<span class="line"><span style="color:#ABB2BF">        mov edx, dest</span></span>
<span class="line"><span style="color:#ABB2BF">        mov ecx, exchange_value</span></span>
<span class="line"><span style="color:#ABB2BF">        mov eax, compare_value</span></span>
<span class="line"><span style="color:#61AFEF">        LOCK_IF_MP</span><span style="color:#ABB2BF">(mp)</span></span>
<span class="line"><span style="color:#ABB2BF">        cmpxchg dword ptr [edx], ecx</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// Adding a lock prefix to an instruction on MP machine</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// VC++ doesn't like the lock prefix to be on a single line</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// so we can't insert a label after the lock prefix.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// By emitting a lock prefix, we can define a label after it.</span></span>
<span class="line"><span style="color:#C678DD">#define</span><span style="color:#61AFEF"> LOCK_IF_MP</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">mp</span><span style="color:#ABB2BF">) __asm cmp mp, </span><span style="color:#D19A66">0</span><span style="color:#56B6C2">  \</span></span>
<span class="line"><span style="color:#ABB2BF">                       __asm je L0      </span><span style="color:#56B6C2">\</span></span>
<span class="line"><span style="color:#ABB2BF">                       __asm _emit </span><span style="color:#E06C75">0x</span><span style="color:#D19A66">F0</span><span style="color:#56B6C2"> \</span></span>
<span class="line"><span style="color:#ABB2BF">                       __asm L0:</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是多处理器，为cmpxchg指令添加lock前缀。反之，就省略lock前缀(单处理器会不需要lock前缀提供的内存屏障效果)。这里的lock前缀就是使用了处理器的总线锁(最新的处理器都使用缓存锁代替总线锁来提高性能)。</p>
<blockquote>
<p>cmpxchg(void* ptr, int old, int new)，如果ptr和old的值一样，则把new写到ptr内存，否则返回ptr的值，整个操作是原子的。在Intel平台下，会用lock cmpxchg来实现，使用lock触发缓存锁，这样另一个线程想访问ptr的内存，就会被block住。</p>
</blockquote>
<h3><a class="header-anchor" href="#unsafe其它功能"><span></span></a><a href="#unsafe%E5%85%B6%E5%AE%83%E5%8A%9F%E8%83%BD">#</a> Unsafe其它功能</h3>
<p>Unsafe 提供了硬件级别的操作，比如说获取某个属性在内存中的位置，比如说修改对象的字段值，即使它是私有的。不过 Java 本身就是为了屏蔽底层的差异，对于一般的开发而言也很少会有这样的需求。</p>
<p>举两个例子，比方说：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> staticFieldOffset</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Field</span><span style="color:#E06C75"> paramField)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>这个方法可以用来获取给定的 paramField 的内存地址偏移量，这个值对于给定的 field 是唯一的且是固定不变的。</p>
<p>再比如说：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> arrayBaseOffset</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#E06C75"> paramClass)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> arrayIndexScale</span><span style="color:#E06C75">(</span><span style="color:#E5C07B">Class</span><span style="color:#E06C75"> paramClass)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>前一个方法是用来获取数组第一个元素的偏移地址，后一个方法是用来获取数组的转换因子即数组中元素的增量地址的。</p>
<p>最后看三个方法：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> allocateMemory</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> long</span><span style="color:#61AFEF"> reallocateMemory</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> paramLong1</span><span style="color:#ABB2BF">,</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> paramLong2)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> native</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> freeMemory</span><span style="color:#E06C75">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75"> paramLong)</span><span style="color:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别用来分配内存，扩充内存和释放内存的。</p>
<blockquote>
<p>更多相关功能，推荐你看下这篇文章：来自美团技术团队：<a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html" target="_blank" rel="noopener noreferrer">Java魔法类：Unsafe应用解析在新窗口打开</a></p>
</blockquote>
<h2><a class="header-anchor" href="#atomicinteger"><span></span></a><a href="#atomicinteger">#</a> AtomicInteger</h2>
<h3><a class="header-anchor" href="#使用举例"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B">#</a> 使用举例</h3>
<p>以 AtomicInteger 为例，常用 API：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> get</span><span style="color:#E06C75">()：获取当前的值</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndSet</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> newValue)：获取当前的值，并设置新的值</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndIncrement</span><span style="color:#E06C75">()：获取当前的值，并自增</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndDecrement</span><span style="color:#E06C75">()：获取当前的值，并自减</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAdd</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> delta)：获取当前的值，并加上预期的值</span></span>
<span class="line"><span style="color:#C678DD">void</span><span style="color:#61AFEF"> lazySet</span><span style="color:#E06C75">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75"> newValue)</span><span style="color:#C678DD">:</span><span style="color:#E06C75"> 最终会设置成newValue</span><span style="color:#ABB2BF">,</span><span style="color:#E06C75">使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比 Integer 的优势，多线程中让变量自增：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> count </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 若要线程安全执行执行 count++，需要加锁</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> synchronized</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> increment</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E06C75">    count</span><span style="color:#ABB2BF">++;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getCount</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E06C75"> count</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 AtomicInteger 后：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">private</span><span style="color:#E5C07B"> AtomicInteger</span><span style="color:#E06C75"> count </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicInteger</span><span style="color:#E06C75">()</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> increment</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#E5C07B">    count</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">incrementAndGet</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">// 使用 AtomicInteger 后，不需要加锁，也可以实现线程安全</span></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getCount</span><span style="color:#E06C75">() {</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> count</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E06C75">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#源码解析"><span></span></a><a href="#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">#</a> 源码解析</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicInteger</span><span style="color:#C678DD"> extends</span><span style="color:#E5C07B"> Number</span><span style="color:#C678DD"> implements</span><span style="color:#E06C75"> java.io.</span><span style="color:#E5C07B">Serializable</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#E06C75"> unsafe </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> Unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getUnsafe</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> valueOffset</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    static</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#C678DD">        try</span><span style="color:#E06C75"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            //用于获取value字段相对当前对象的“起始地址”的偏移量</span></span>
<span class="line"><span style="color:#E06C75">            valueOffset </span><span style="color:#56B6C2">=</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">objectFieldOffset</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">AtomicInteger</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getDeclaredField</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"value"</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E06C75">        } </span><span style="color:#C678DD">catch</span><span style="color:#E06C75"> (</span><span style="color:#E5C07B">Exception</span><span style="color:#E06C75;font-style:italic"> ex</span><span style="color:#E06C75">) { </span><span style="color:#C678DD">throw</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Error</span><span style="color:#E06C75">(ex)</span><span style="color:#ABB2BF">;</span><span style="color:#E06C75"> }</span></span>
<span class="line"><span style="color:#E06C75">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> value</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //返回当前值</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> get</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#ABB2BF"> value;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //递增加detla</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> getAndAdd</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> delta</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //三个参数，1、当前的实例 2、value实例变量的偏移量 3、当前value要加上的数(value+delta)。</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAddInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, valueOffset, delta);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //递增加1</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> final</span><span style="color:#C678DD"> int</span><span style="color:#61AFEF"> incrementAndGet</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> unsafe</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAddInt</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, valueOffset, </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">+</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">...</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到 AtomicInteger 底层用的是volatile的变量和CAS来进行更改数据的。</p>
<ul>
<li>volatile保证线程的可见性，多线程并发时，一个线程修改数据，可以保证其它线程立马看到修改后的值</li>
<li>CAS 保证数据更新的原子性。</li>
</ul>
<h2><a class="header-anchor" href="#延伸到所有原子类-共12个"><span></span></a><a href="#%E5%BB%B6%E4%BC%B8%E5%88%B0%E6%89%80%E6%9C%89%E5%8E%9F%E5%AD%90%E7%B1%BB-%E5%85%B112%E4%B8%AA">#</a> 延伸到所有原子类：共12个</h2>
<blockquote>
<p>JDK中提供了12个原子操作类。</p>
</blockquote>
<h3><a class="header-anchor" href="#原子更新基本类型"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">#</a> 原子更新基本类型</h3>
<p>使用原子的方式更新基本类型，Atomic包提供了以下3个类。</p>
<ul>
<li>AtomicBoolean: 原子更新布尔类型。</li>
<li>AtomicInteger: 原子更新整型。</li>
<li>AtomicLong: 原子更新长整型。</li>
</ul>
<p>以上3个类提供的方法几乎一模一样，可以参考上面AtomicInteger中的相关方法。</p>
<h3><a class="header-anchor" href="#原子更新数组"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E6%95%B0%E7%BB%84">#</a> 原子更新数组</h3>
<p>通过原子的方式更新数组里的某个元素，Atomic包提供了以下的3个类：</p>
<ul>
<li>AtomicIntegerArray: 原子更新整型数组里的元素。</li>
<li>AtomicLongArray: 原子更新长整型数组里的元素。</li>
<li>AtomicReferenceArray: 原子更新引用类型数组里的元素。</li>
</ul>
<p>这三个类的最常用的方法是如下两个方法：</p>
<ul>
<li>get(int index)：获取索引为index的元素值。</li>
<li>compareAndSet(int i,E expect,E update): 如果当前值等于预期值，则以原子方式将数组位置i的元素设置为update值。</li>
</ul>
<p>举个AtomicIntegerArray例子：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.atomic.AtomicIntegerArray</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Demo5</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD"> throws</span><span style="color:#E5C07B"> InterruptedException</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        AtomicIntegerArray</span><span style="color:#E06C75"> array</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicIntegerArray</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#C678DD"> int</span><span style="color:#ABB2BF">[] { </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">0</span><span style="color:#ABB2BF"> });</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(array);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getAndAdd</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(array);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">]</span></span>
<span class="line"><span style="color:#D19A66">0</span></span>
<span class="line"><span style="color:#E06C75">[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 2</span><span style="color:#E06C75">]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#原子更新引用类型"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">#</a> 原子更新引用类型</h3>
<p>Atomic包提供了以下三个类：</p>
<ul>
<li>AtomicReference: 原子更新引用类型。</li>
<li>AtomicStampedReference: 原子更新引用类型, 内部使用Pair来存储元素值及其版本号。</li>
<li>AtomicMarkableReferce: 原子更新带有标记位的引用类型。</li>
</ul>
<p>这三个类提供的方法都差不多，首先构造一个引用对象，然后把引用对象set进Atomic类，然后调用compareAndSet等一些方法去进行原子操作，原理都是基于Unsafe实现，但AtomicReferenceFieldUpdater略有不同，更新的字段必须用volatile修饰。</p>
<p>举个AtomicReference例子：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#E5C07B"> java.util.concurrent.atomic.AtomicReference</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicReferenceTest</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 创建两个Person对象，它们的id分别是101和102。</span></span>
<span class="line"><span style="color:#E5C07B">        Person</span><span style="color:#E06C75"> p1</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">101</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">        Person</span><span style="color:#E06C75"> p2</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">102</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 新建AtomicReference对象，初始化它的值为p1对象</span></span>
<span class="line"><span style="color:#E5C07B">        AtomicReference</span><span style="color:#E06C75"> ar</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> AtomicReference</span><span style="color:#ABB2BF">(p1);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 通过CAS设置ar。如果ar的值为p1的话，则将其设置为p2。</span></span>
<span class="line"><span style="color:#E5C07B">        ar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(p1, p2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">        Person</span><span style="color:#E06C75"> p3</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> (Person)</span><span style="color:#E5C07B">ar</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">get</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p3 is "</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">p3);</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"p3.equals(p1)="</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B">p3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(p1));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> Person</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    volatile</span><span style="color:#C678DD"> long</span><span style="color:#E06C75"> id</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#61AFEF"> Person</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">long</span><span style="color:#E06C75;font-style:italic"> id</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">        this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">id</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> id;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> String</span><span style="color:#61AFEF"> toString</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#98C379"> "id:"</span><span style="color:#56B6C2">+</span><span style="color:#ABB2BF">id;</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果输出：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75">p3 is id</span><span style="color:#C678DD">:</span><span style="color:#D19A66">102</span></span>
<span class="line"><span style="color:#E5C07B">p3</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">equals</span><span style="color:#ABB2BF">(p1)</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">false</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果说明：</p>
<ul>
<li>新建AtomicReference对象ar时，将它初始化为p1。</li>
<li>紧接着，通过CAS函数对它进行设置。如果ar的值为p1的话，则将其设置为p2。</li>
<li>最后，获取ar对应的对象，并打印结果。p3.equals(p1)的结果为false，这是因为Person并没有覆盖equals()方法，而是采用继承自Object.java的equals()方法；而Object.java中的equals()实际上是调用"=="去比较两个对象，即比较两个对象的地址是否相等。</li>
</ul>
<h3><a class="header-anchor" href="#原子更新字段类"><span></span></a><a href="#%E5%8E%9F%E5%AD%90%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E7%B1%BB">#</a> 原子更新字段类</h3>
<p>Atomic包提供了四个类进行原子字段更新：</p>
<ul>
<li>AtomicIntegerFieldUpdater: 原子更新整型的字段的更新器。</li>
<li>AtomicLongFieldUpdater: 原子更新长整型字段的更新器。</li>
<li>AtomicReferenceFieldUpdater: 上面已经说过此处不在赘述。</li>
</ul>
<p>这四个类的使用方式都差不多，是基于反射的原子更新字段的值。要想原子地更新字段类需要两步:</p>
<ul>
<li>第一步，因为原子更新字段类都是抽象类，每次使用的时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。</li>
<li>第二步，更新类的字段必须使用public volatile修饰。</li>
</ul>
<p>举个例子：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> TestAtomicIntegerFieldUpdater</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#E5C07B">        TestAtomicIntegerFieldUpdater</span><span style="color:#E06C75"> tIA</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> TestAtomicIntegerFieldUpdater</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        tIA</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">doIt</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#E5C07B"> AtomicIntegerFieldUpdater</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">DataDemo</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> updater</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#E06C75;font-style:italic"> name</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> AtomicIntegerFieldUpdater</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">newUpdater</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">DataDemo</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">class</span><span style="color:#ABB2BF">,name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> doIt</span><span style="color:#ABB2BF">(){</span></span>
<span class="line"><span style="color:#E5C07B">        DataDemo</span><span style="color:#E06C75"> data</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> DataDemo</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#E5C07B">        System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"publicVar = "</span><span style="color:#56B6C2">+</span><span style="color:#61AFEF">updater</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"publicVar"</span><span style="color:#ABB2BF">).</span><span style="color:#61AFEF">getAndAdd</span><span style="color:#ABB2BF">(data, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * 由于在DataDemo类中属性value2/value3,在TestAtomicIntegerFieldUpdater中不能访问</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("protectedVar = "+updater("protectedVar").getAndAdd(data,2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("privateVar = "+updater("privateVar").getAndAdd(data,2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("staticVar = "+updater("staticVar").getAndIncrement(data));//报java.lang.IllegalArgumentException</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * 下面报异常：must be integer</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("integerVar = "+updater("integerVar").getAndIncrement(data));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        //System.out.println("longVar = "+updater("longVar").getAndIncrement(data));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">class</span><span style="color:#E5C07B"> DataDemo</span><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> publicVar</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    protected</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> protectedVar</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">4</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD">  int</span><span style="color:#E06C75"> privateVar</span><span style="color:#56B6C2">=</span><span style="color:#D19A66">5</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> staticVar </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 10</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    //public  final int finalVar = 11;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Integer</span><span style="color:#E06C75"> integerVar </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 19</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Long</span><span style="color:#E06C75"> longVar </span><span style="color:#56B6C2">=</span><span style="color:#D19A66"> 18L</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再说下对于AtomicIntegerFieldUpdater 的使用稍微有一些限制和约束，约束如下：</p>
<ul>
<li>字段必须是volatile类型的，<a href="http://xn--9iqyiw6ae9br2djra9es7xym1bz75bszb00u859ay3fhoz6ep.eg" target="_blank" rel="noopener noreferrer">在线程之间共享变量时保证立即可见.eg</a>:volatile int value = 3</li>
<li>字段的描述类型(修饰符public/protected/default/private)是与调用者与操作对象字段的关系一致。也就是说调用者能够直接操作对象字段，那么就可以反射进行原子操作。但是对于父类的字段，子类是不能直接操作的，尽管子类可以访问父类的字段。</li>
<li>只能是实例变量，不能是类变量，也就是说不能加static关键字。</li>
<li>只能是可修改变量，不能使final变量，因为final的语义就是不可修改。实际上final的语义和volatile是有冲突的，这两个关键字不能同时存在。</li>
<li>对于AtomicIntegerFieldUpdater和AtomicLongFieldUpdater只能修改int/long类型的字段，不能修改其包装类型(Integer/Long)。如果要修改包装类型就需要使用AtomicReferenceFieldUpdater。</li>
</ul>
<h2><a class="header-anchor" href="#再讲讲atomicstampedreference解决cas的aba问题"><span></span></a><a href="#%E5%86%8D%E8%AE%B2%E8%AE%B2atomicstampedreference%E8%A7%A3%E5%86%B3cas%E7%9A%84aba%E9%97%AE%E9%A2%98">#</a> 再讲讲AtomicStampedReference解决CAS的ABA问题</h2>
<h3><a class="header-anchor" href="#atomicstampedreference解决aba问题"><span></span></a><a href="#atomicstampedreference%E8%A7%A3%E5%86%B3aba%E9%97%AE%E9%A2%98">#</a> AtomicStampedReference解决ABA问题</h3>
<p>AtomicStampedReference主要维护包含一个对象引用以及一个可以自动更新的整数"stamp"的pair对象来解决ABA问题。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicStampedReference</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#E5C07B"> T</span><span style="color:#E06C75"> reference</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //维护对象引用</span></span>
<span class="line"><span style="color:#C678DD">        final</span><span style="color:#C678DD"> int</span><span style="color:#E06C75"> stamp</span><span style="color:#ABB2BF">;</span><span style="color:#7F848E;font-style:italic">  //用于标志版本</span></span>
<span class="line"><span style="color:#C678DD">        private</span><span style="color:#61AFEF"> Pair</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> reference</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> stamp</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reference</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> reference;</span></span>
<span class="line"><span style="color:#E5C07B">            this</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stamp</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> stamp;</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#C678DD">        static</span><span style="color:#ABB2BF"> &lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;</span><span style="color:#61AFEF"> of</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">T</span><span style="color:#E06C75;font-style:italic"> reference</span><span style="color:#ABB2BF">, </span><span style="color:#C678DD">int</span><span style="color:#E06C75;font-style:italic"> stamp</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#C678DD"> new</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">T</span><span style="color:#ABB2BF">&gt;(reference, stamp);</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> volatile</span><span style="color:#E5C07B"> Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> pair</span><span style="color:#ABB2BF">;</span></span>
<span class="line"><span style="color:#ABB2BF">    ....</span></span>
<span class="line"><span style="color:#E06C75">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * expectedReference ：更新之前的原始值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * newReference : 将要更新的新值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * expectedStamp : 期待更新的标志版本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      * newStamp : 将要更新的标志版本</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">      */</span></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">V</span><span style="color:#E06C75;font-style:italic">   expectedReference</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E5C07B">                             V</span><span style="color:#E06C75;font-style:italic">   newReference</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                             int</span><span style="color:#E06C75;font-style:italic"> expectedStamp</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#C678DD">                             int</span><span style="color:#E06C75;font-style:italic"> newStamp</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 获取当前的(元素值，版本号)对</span></span>
<span class="line"><span style="color:#E5C07B">        Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75">current</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> pair;</span></span>
<span class="line"><span style="color:#C678DD">        return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 引用没变</span></span>
<span class="line"><span style="color:#ABB2BF">            expectedReference </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reference</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 版本号没变</span></span>
<span class="line"><span style="color:#ABB2BF">            expectedStamp </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stamp</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 新引用等于旧引用</span></span>
<span class="line"><span style="color:#ABB2BF">            ((newReference </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">reference</span><span style="color:#56B6C2"> &amp;&amp;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 新版本号等于旧版本号</span></span>
<span class="line"><span style="color:#ABB2BF">            newStamp </span><span style="color:#56B6C2">==</span><span style="color:#E5C07B"> current</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">stamp</span><span style="color:#ABB2BF">) </span><span style="color:#56B6C2">||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">            // 构造新的Pair对象并CAS更新</span></span>
<span class="line"><span style="color:#61AFEF">            casPair</span><span style="color:#ABB2BF">(current, </span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">of</span><span style="color:#ABB2BF">(newReference, newStamp)));</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> boolean</span><span style="color:#61AFEF"> casPair</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">cmp</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">Pair</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">V</span><span style="color:#ABB2BF">&gt; </span><span style="color:#E06C75;font-style:italic">val</span><span style="color:#ABB2BF">)</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // 调用Unsafe的compareAndSwapObject()方法CAS更新pair的引用为新引用</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#E5C07B"> UNSAFE</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSwapObject</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">this</span><span style="color:#ABB2BF">, pairOffset, cmp, val);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>如果元素值和版本号都没有变化，并且和新的也相同，返回true；</li>
<li>如果元素值和版本号都没有变化，并且和新的不完全相同，就构造一个新的Pair对象并执行CAS更新pair。</li>
</ul>
<p>可以看到，java中的实现跟我们上面讲的ABA的解决方法是一致的。</p>
<ul>
<li>首先，使用版本号控制；</li>
<li>其次，不重复使用节点(Pair)的引用，每次都新建一个新的Pair来作为CAS比较的对象，而不是复用旧的；</li>
<li>最后，外部传入元素值及版本号，而不是节点(Pair)的引用。</li>
</ul>
<h3><a class="header-anchor" href="#使用举例-1"><span></span></a><a href="#%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B-1">#</a> 使用举例</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD">public</span><span style="color:#C678DD"> class</span><span style="color:#E5C07B"> AtomicTester</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> AtomicStampedReference</span><span style="color:#ABB2BF">&lt;</span><span style="color:#E5C07B">Integer</span><span style="color:#ABB2BF">&gt;</span><span style="color:#E06C75"> atomicStampedRef </span><span style="color:#56B6C2">=</span></span>
<span class="line"><span style="color:#C678DD">            new</span><span style="color:#E5C07B"> AtomicStampedReference</span><span style="color:#ABB2BF">&lt;&gt;</span><span style="color:#E06C75">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66"> 0</span><span style="color:#E06C75">)</span><span style="color:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    public</span><span style="color:#C678DD"> static</span><span style="color:#C678DD"> void</span><span style="color:#61AFEF"> main</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">String</span><span style="color:#ABB2BF">[] </span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">){</span></span>
<span class="line"><span style="color:#61AFEF">        first</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#61AFEF">        second</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">start</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Thread</span><span style="color:#61AFEF"> first</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",初始值 a = "</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getReference</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#C678DD">            int</span><span style="color:#E06C75"> stamp</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">//获取当前标识别</span></span>
<span class="line"><span style="color:#C678DD">            try</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">                Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sleep</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1000</span><span style="color:#ABB2BF">); </span><span style="color:#7F848E;font-style:italic">//等待1秒 ，以便让干扰线程执行</span></span>
<span class="line"><span style="color:#ABB2BF">            } </span><span style="color:#C678DD">catch</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">InterruptedException</span><span style="color:#E06C75;font-style:italic"> e</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#E5C07B">                e</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">printStackTrace</span><span style="color:#ABB2BF">();</span></span>
<span class="line"><span style="color:#ABB2BF">            }</span></span>
<span class="line"><span style="color:#C678DD">            boolean</span><span style="color:#E06C75"> isCASSuccess</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,stamp,stamp </span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);  </span><span style="color:#7F848E;font-style:italic">//此时expectedReference未发生改变，但是stamp已经被修改了,所以CAS失败</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",CAS操作结果: "</span><span style="color:#56B6C2"> +</span><span style="color:#ABB2BF"> isCASSuccess);</span></span>
<span class="line"><span style="color:#ABB2BF">        },</span><span style="color:#98C379">"主操作线程"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    private</span><span style="color:#C678DD"> static</span><span style="color:#E5C07B"> Thread</span><span style="color:#61AFEF"> second</span><span style="color:#ABB2BF">()</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Thread</span><span style="color:#ABB2BF">(() </span><span style="color:#C678DD">-&gt;</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#E5C07B">            Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">yield</span><span style="color:#ABB2BF">(); </span><span style="color:#7F848E;font-style:italic">// 确保thread-first 优先执行</span></span>
<span class="line"><span style="color:#E5C07B">            atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">(),</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",【increment】 ,值 = "</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getReference</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#E5C07B">            atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">compareAndSet</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">,</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">,</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">(),</span><span style="color:#E5C07B">atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getStamp</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#E5C07B">            System</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">out</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">println</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">"操作线程"</span><span style="color:#56B6C2"> +</span><span style="color:#E5C07B"> Thread</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">currentThread</span><span style="color:#ABB2BF">() </span><span style="color:#56B6C2">+</span><span style="color:#98C379">",【decrement】 ,值 = "</span><span style="color:#56B6C2">+</span><span style="color:#E5C07B"> atomicStampedRef</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">getReference</span><span style="color:#ABB2BF">());</span></span>
<span class="line"><span style="color:#ABB2BF">        },</span><span style="color:#98C379">"干扰线程"</span><span style="color:#ABB2BF">);</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#282c34;color:#abb2bf"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF">操作线程Thread[主操作线程,5,main],初始值</span><span style="color:#98C379"> a</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">操作线程Thread[干扰线程,5,main],【increment】</span><span style="color:#98C379"> ,值</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 2</span></span>
<span class="line"><span style="color:#61AFEF">操作线程Thread[干扰线程,5,main],【decrement】</span><span style="color:#98C379"> ,值</span><span style="color:#98C379"> =</span><span style="color:#D19A66"> 1</span></span>
<span class="line"><span style="color:#61AFEF">操作线程Thread[主操作线程,5,main],CAS操作结果:</span><span style="color:#D19A66"> false</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3><a class="header-anchor" href="#java中还有哪些类可以解决aba的问题"><span></span></a><a href="#java%E4%B8%AD%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3aba%E7%9A%84%E9%97%AE%E9%A2%98">#</a> java中还有哪些类可以解决ABA的问题?</h3>
<p>AtomicMarkableReference，它不是维护一个版本号，而是维护一个boolean类型的标记，标记值有修改，了解一下。</p>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-atomicinteger-unsafe.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 CountDownLatch 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CountDownLatch%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CountDownLatch%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 CountDownLatch 详解</source>
      <description>CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai JUC 工具类之 CountDownLatch 详解 带着BAT大厂的面试问题去理解 CountDownLatch介绍 CountDownLatch源码分析 类的继承关系 类的内部类 类的属性 类的构造函数 核心函数...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai</p>
</blockquote>
<ul>
<li>JUC 工具类之 CountDownLatch 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#countdownlatch%E4%BB%8B%E7%BB%8D">CountDownLatch介绍</a></li>
<li>CountDownLatch源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>[核心函数 - await函数](#核心函数</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 CyclicBarrier 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CyclicBarrier%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CyclicBarrier%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 CyclicBarrier 详解</source>
      <description>CyclicBarrier底层是基于ReentrantLock和AbstractQueuedSynchronizer来实现的, 在理解的时候最好和CountDownLatch放在一起理解(相见本文分析)。 JUC 工具类之 CyclicBarrier 详解 带着BAT大厂的面试问题去理解 CyclicBarrier简介 CyclicBarrier源码分...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>CyclicBarrier底层是基于ReentrantLock和AbstractQueuedSynchronizer来实现的, 在理解的时候最好和CountDownLatch放在一起理解(相见本文分析)。</p>
</blockquote>
<ul>
<li>JUC 工具类之 CyclicBarrier 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#cyclicbarrier%E7%AE%80%E4%BB%8B">CyclicBarrier简介</a></li>
<li>CyclicBarrier源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li>
<li>[核心函数 - dowait函数](#核心函数</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-cyclicbarrier-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 Exchanger 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Exchanger%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Exchanger%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 Exchanger 详解</source>
      <description>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。 JUC 工具类之 Exchanger 详解 带着BAT大厂的面试问题去理解Exchanger Exchanger简介 Exchanger实现机制 Exchanger源码解析 内部类 - Participant 内部类 - Node 核心属性 构造函数 核心方法 - excha...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。</p>
</blockquote>
<ul>
<li>JUC 工具类之 Exchanger 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3exchanger">带着BAT大厂的面试问题去理解Exchanger</a></li>
<li><a href="#exchanger%E7%AE%80%E4%BB%8B">Exchanger简介</a></li>
<li><a href="#exchanger%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6">Exchanger实现机制</a></li>
<li>Exchanger源码解析
<ul>
<li>[内部类 - Participant](#内部类</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>JUC 工具类之 Phaser 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Phaser%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Phaser%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 Phaser 详解</source>
      <description>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。 JUC 工具类之 Phaser 详解 带着BAT大厂的面试问题去理解Phaser工具 Phaser运行机制 Phaser源码详解 核心参数 函数列表 方法 - reg...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。</p>
</blockquote>
<ul>
<li>JUC 工具类之 Phaser 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3phaser%E5%B7%A5%E5%85%B7">带着BAT大厂的面试问题去理解Phaser工具</a></li>
<li><a href="#phaser%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6">Phaser运行机制</a></li>
<li>Phaser源码详解
<ul>
<li><a href="#%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0">核心参数</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E5%88%97%E8%A1%A8">函数列表</a></li>
<li>[方法 - register()](#方法</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-phaser-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 工具类之 Semaphore 详解</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Semaphore%20%E8%AF%A6%E8%A7%A3.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Semaphore%20%E8%AF%A6%E8%A7%A3.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 工具类之 Semaphore 详解</source>
      <description>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。 JUC 工具类之 Semaphore 详解 带着BAT大厂的面试问题去理解 Semaphore源码分析 类的继承关系...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。</p>
</blockquote>
<ul>
<li>JUC 工具类之 Semaphore 详解
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li>Semaphore源码分析
<ul>
<li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li>
<li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li>
<li>[类的内部类 - Sync类](#类的内部类</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-1.png" type="image/png"/>
    </item>
    <item>
      <title>JUC 知识汇总指南</title>
      <link>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E6%8C%87%E5%8D%97.html</link>
      <guid>https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB%E6%8C%87%E5%8D%97.html</guid>
      <source url="https://cactusli.net/rss.xml">JUC 知识汇总指南</source>
      <description>本文对J.U.C进行知识体系解读，后续的文章还针对几乎所有的核心的类以及常用的工具类作了详细的解读; 如果没有时间详细阅读相关章节，可以跟着本文站在一定的高度了解JUC下包的设计和实现；同时对重要的章节提供跳转链接，您可以链接过去详读。 JUC 知识汇总指南 带着BAT大厂的面试问题去理解 Overview Lock框架和Tools类 类结构总览 接口...</description>
      <category>Java</category>
      <pubDate>Thu, 07 Mar 2024 10:15:26 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>本文对J.U.C进行知识体系解读，后续的文章还针对<strong>几乎所有的核心的类</strong>以及常用的<code>工具类</code>作了详细的解读; <strong>如果没有时间详细阅读相关章节，可以跟着本文站在一定的高度了解JUC下包的设计和实现</strong>；同时对重要的章节提供跳转链接，您可以链接过去详读。</p>
</blockquote>
<ul>
<li>JUC 知识汇总指南
<ul>
<li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li>
<li><a href="#overview">Overview</a></li>
<li>Lock框架和Tools类
<ul>
<li><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88">类结构总览</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-condition">接口: Condition</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-lock">接口: Lock</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-readwritelock">接口: ReadWriteLock</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB-abstractownablesynchonizer">抽象类: AbstractOwnableSynchonizer</a></li>
<li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BBlong-abstractqueuedlongsynchronizer">抽象类(long): AbstractQueuedLongSynchronizer</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E7%B1%BBint-abstractqueuedsynchronizer">核心抽象类(int): AbstractQueuedSynchronizer</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-locksupport">锁常用类: LockSupport</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantlock">锁常用类: ReentrantLock</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantreadwritelock">锁常用类: ReentrantReadWriteLock</a></li>
<li><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-stampedlock">锁常用类: StampedLock</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-countdownlatch">工具常用类: CountDownLatch</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-cyclicbarrier">工具常用类: CyclicBarrier</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-phaser">工具常用类: Phaser</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-semaphore">工具常用类: Semaphore</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-exchanger">工具常用类: Exchanger</a></li>
</ul>
</li>
<li>Collections: 并发集合
<ul>
<li><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB">类结构关系</a></li>
<li><a href="#queue-arrayblockingqueue">Queue: ArrayBlockingQueue</a></li>
<li><a href="#queue-linkedblockingqueue">Queue: LinkedBlockingQueue</a></li>
<li><a href="#queue-linkedblockingdeque">Queue: LinkedBlockingDeque</a></li>
<li><a href="#queue-concurrentlinkedqueue">Queue: ConcurrentLinkedQueue</a></li>
<li><a href="#queue-concurrentlinkeddeque">Queue: ConcurrentLinkedDeque</a></li>
<li><a href="#queue-delayqueue">Queue: DelayQueue</a></li>
<li><a href="#queue-priorityblockingqueue">Queue: PriorityBlockingQueue</a></li>
<li><a href="#queue-synchronousqueue">Queue: SynchronousQueue</a></li>
<li><a href="#queue-linkedtransferqueue">Queue: LinkedTransferQueue</a></li>
<li><a href="#list-copyonwritearraylist">List: CopyOnWriteArrayList</a></li>
<li><a href="#set-copyonwritearrayset">Set: CopyOnWriteArraySet</a></li>
<li><a href="#set-concurrentskiplistset">Set: ConcurrentSkipListSet</a></li>
<li><a href="#map-concurrenthashmap">Map: ConcurrentHashMap</a></li>
<li><a href="#map-concurrentskiplistmap">Map: ConcurrentSkipListMap</a></li>
</ul>
</li>
<li>Atomic: 原子类
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8Batomicbooleanatomicintegeratomiclong">基础类型：AtomicBoolean，AtomicInteger，AtomicLong</a></li>
<li><a href="#%E6%95%B0%E7%BB%84atomicintegerarrayatomiclongarraybooleanarray">数组：AtomicIntegerArray，AtomicLongArray，BooleanArray</a></li>
<li><a href="#%E5%BC%95%E7%94%A8atomicreferenceatomicmarkedreferenceatomicstampedreference">引用：AtomicReference，AtomicMarkedReference，AtomicStampedReference</a></li>
<li><a href="#fieldupdateratomiclongfieldupdateratomicintegerfieldupdateratomicreferencefieldupdater">FieldUpdater：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</a></li>
</ul>
</li>
<li>Executors: 线程池
<ul>
<li><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB-1">类结构关系</a></li>
<li><a href="#%E6%8E%A5%E5%8F%A3-executor">接口: Executor</a></li>
<li><a href="#executorservice">ExecutorService</a></li>
<li><a href="#scheduledexecutorservice">ScheduledExecutorService</a></li>
<li><a href="#abstractexecutorservice">AbstractExecutorService</a></li>
<li><a href="#futuretask">FutureTask</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83-threadpoolexecutor">核心: ThreadPoolExecutor</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83-scheduledthreadexecutor">核心: ScheduledThreadExecutor</a></li>
<li><a href="#%E6%A0%B8%E5%BF%83-forkjoin%E6%A1%86%E6%9E%B6">核心: Fork/Join框架</a></li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%B1%BB-executors">工具类: Executors</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li>
</ul>
</li>
</ul>
<h2><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span></span></a><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</h2>
<p>提示</p>
<p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p>
<ul>
<li>JUC框架包含几个部分?</li>
<li>每个部分有哪些核心的类?</li>
<li>最最核心的类有哪些?</li>
</ul>
<h2><a class="header-anchor" href="#overview"><span></span></a><a href="#overview">#</a> Overview</h2>
<p>阅读前，推荐你学习下并发相关基础</p>
<ul>
<li><a href="">Java 并发 - 理论基础</a></li>
<li><a href="">Java 并发 - 线程基础</a></li>
<li><a href="">关键字: synchronized详解</a></li>
<li><a href="">关键字: volatile详解</a></li>
<li><a href="">关键字: final详解</a></li>
</ul>
<p>正式学习时先了解五个部分：</p>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-1-u.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>主要包含: (注意: 上图是网上找的图，无法表述一些继承关系，同时少了部分类；但是主体上可以看出其分类关系也够了)</p>
<ul>
<li>Lock框架和Tools类(把图中这两个放到一起理解)</li>
<li>Collections: 并发集合</li>
<li>Atomic: 原子类</li>
<li>Executors: 线程池</li>
</ul>
<h2><a class="header-anchor" href="#lock框架和tools类"><span></span></a><a href="#lock%E6%A1%86%E6%9E%B6%E5%92%8Ctools%E7%B1%BB">#</a> Lock框架和Tools类</h2>
<h3><a class="header-anchor" href="#类结构总览"><span></span></a><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88">#</a> 类结构总览</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-lock.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#接口-condition"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-condition">#</a> 接口: Condition</h3>
<blockquote>
<p>Condition为接口类型，它将 Object 监视器方法(wait、notify 和 notifyAll)分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set (wait-set)。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。可以通过await(),signal()来休眠/唤醒线程。</p>
</blockquote>
<p>在<a href="">JUC锁: AbstractQueuedSynchronizer详解</a>中类的<strong>内部类-conditionobject类</strong>有具体分析。</p>
<h3><a class="header-anchor" href="#接口-lock"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-lock">#</a> 接口: Lock</h3>
<blockquote>
<p>Lock为接口类型，Lock实现提供了比使用synchronized方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的Condition对象。</p>
</blockquote>
<h3><a class="header-anchor" href="#接口-readwritelock"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-readwritelock">#</a> 接口: ReadWriteLock</h3>
<blockquote>
<p>ReadWriteLock为接口类型， 维护了一对相关的锁，一个用于只读操作，另一个用于写入操作。只要没有 writer，读取锁可以由多个 reader 线程同时保持。写入锁是独占的。</p>
</blockquote>
<h3><a class="header-anchor" href="#抽象类-abstractownablesynchonizer"><span></span></a><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB-abstractownablesynchonizer">#</a> 抽象类: AbstractOwnableSynchonizer</h3>
<blockquote>
<p>AbstractOwnableSynchonizer为抽象类，可以由线程以独占方式拥有的同步器。此类为创建锁和相关同步器(伴随着所有权的概念)提供了基础。AbstractOwnableSynchronizer 类本身不管理或使用此信息。但是，子类和工具可以使用适当维护的值帮助控制和监视访问以及提供诊断。</p>
</blockquote>
<h3><a class="header-anchor" href="#抽象类-long-abstractqueuedlongsynchronizer"><span></span></a><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB-long-abstractqueuedlongsynchronizer">#</a> 抽象类(long): AbstractQueuedLongSynchronizer</h3>
<blockquote>
<p>AbstractQueuedLongSynchronizer为抽象类，以 long 形式维护同步状态的一个 AbstractQueuedSynchronizer 版本。此类具有的结构、属性和方法与 AbstractQueuedSynchronizer 完全相同，但所有与状态相关的参数和结果都定义为 long 而不是 int。当创建需要 64 位状态的多级别锁和屏障等同步器时，此类很有用。</p>
</blockquote>
<h3><a class="header-anchor" href="#核心抽象类-int-abstractqueuedsynchronizer"><span></span></a><a href="#%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E7%B1%BB-int-abstractqueuedsynchronizer">#</a> 核心抽象类(int): AbstractQueuedSynchronizer</h3>
<blockquote>
<p>AbstractQueuedSynchronizer为抽象类，其为实现依赖于先进先出 (FIFO) 等待队列的阻塞锁和相关同步器(信号量、事件，等等)提供一个框架。此类的设计目标是成为依靠单个原子 int 值来表示状态的大多数同步器的一个有用基础。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC锁: AbstractQueuedSynchronizer详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-locksupport"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-locksupport">#</a> 锁常用类: LockSupport</h3>
<blockquote>
<p>LockSupport为常用类，用来创建锁和其他同步类的基本线程阻塞原语。LockSupport的功能和"Thread中的 Thread.suspend()和Thread.resume()有点类似"，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC锁: LockSupport详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-reentrantlock"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantlock">#</a> 锁常用类: ReentrantLock</h3>
<blockquote>
<p>ReentrantLock为常用类，它是一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC锁: ReentrantLock详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-reentrantreadwritelock"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-reentrantreadwritelock">#</a> 锁常用类: ReentrantReadWriteLock</h3>
<blockquote>
<p>ReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括Lock子类ReadLock和WriteLock。ReadLock是共享锁，WriteLock是独占锁。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: ReentrantReadWriteLock详解</a></p>
<h3><a class="header-anchor" href="#锁常用类-stampedlock"><span></span></a><a href="#%E9%94%81%E5%B8%B8%E7%94%A8%E7%B1%BB-stampedlock">#</a> 锁常用类: StampedLock</h3>
<blockquote>
<p>它是java8在java.util.concurrent.locks新增的一个API。StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p>
</blockquote>
<p>详细分析请看: <a href="">Java 8 - StampedLock详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-countdownlatch"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-countdownlatch">#</a> 工具常用类: CountDownLatch</h3>
<blockquote>
<p>CountDownLatch为常用类，它是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: CountDownLatch详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-cyclicbarrier"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-cyclicbarrier">#</a> 工具常用类: CyclicBarrier</h3>
<blockquote>
<p>CyclicBarrier为常用类，其是一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。在涉及一组固定大小的线程的程序中，这些线程必须不时地互相等待，此时 CyclicBarrier 很有用。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: CyclicBarrier详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-phaser"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-phaser">#</a> 工具常用类: Phaser</h3>
<blockquote>
<p>Phaser是JDK 7新增的一个同步辅助类，它可以实现CyclicBarrier和CountDownLatch类似的功能，而且它支持对任务的动态调整，并支持分层结构来达到更高的吞吐量。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: Phaser详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-semaphore"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-semaphore">#</a> 工具常用类: Semaphore</h3>
<blockquote>
<p>Semaphore为常用类，其是一个计数信号量，从概念上讲，信号量维护了一个许可集。如有必要，在许可可用前会阻塞每一个 acquire()，然后再获取该许可。每个 release() 添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，Semaphore 只对可用许可的号码进行计数，并采取相应的行动。通常用于限制可以访问某些资源(物理或逻辑的)的线程数目。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: Semaphore详解</a></p>
<h3><a class="header-anchor" href="#工具常用类-exchanger"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E7%B1%BB-exchanger">#</a> 工具常用类: Exchanger</h3>
<blockquote>
<p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange()方法交换数据，当一个线程先执行exchange()方法后，它会一直等待第二个线程也执行exchange()方法，当这两个线程到达同步点时，这两个线程就可以交换数据了。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC工具类: Exchanger详解</a></p>
<h2><a class="header-anchor" href="#collections-并发集合"><span></span></a><a href="#collections-%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88">#</a> Collections: 并发集合</h2>
<h3><a class="header-anchor" href="#类结构关系"><span></span></a><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB">#</a> 类结构关系</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-2.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#queue-arrayblockingqueue"><span></span></a><a href="#queue-arrayblockingqueue">#</a> Queue: ArrayBlockingQueue</h3>
<blockquote>
<p>一个由数组支持的有界阻塞队列。此队列按 FIFO(先进先出)原则对元素进行排序。队列的头部 是在队列中存在时间最长的元素。队列的尾部 是在队列中存在时间最短的元素。新元素插入到队列的尾部，队列获取操作则是从队列头部开始获得元素。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: BlockingQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-linkedblockingqueue"><span></span></a><a href="#queue-linkedblockingqueue">#</a> Queue: LinkedBlockingQueue</h3>
<blockquote>
<p>一个基于已链接节点的、范围任意的 blocking queue。此队列按 FIFO(先进先出)排序元素。队列的头部 是在队列中时间最长的元素。队列的尾部 是在队列中时间最短的元素。新元素插入到队列的尾部，并且队列获取操作会获得位于队列头部的元素。链接队列的吞吐量通常要高于基于数组的队列，但是在大多数并发应用程序中，其可预知的性能要低。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: BlockingQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-linkedblockingdeque"><span></span></a><a href="#queue-linkedblockingdeque">#</a> Queue: LinkedBlockingDeque</h3>
<blockquote>
<p>一个基于已链接节点的、任选范围的阻塞双端队列。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: BlockingQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-concurrentlinkedqueue"><span></span></a><a href="#queue-concurrentlinkedqueue">#</a> Queue: ConcurrentLinkedQueue</h3>
<blockquote>
<p>一个基于链接节点的无界线程安全队列。此队列按照 FIFO(先进先出)原则对元素进行排序。队列的头部 是队列中时间最长的元素。队列的尾部 是队列中时间最短的元素。新的元素插入到队列的尾部，队列获取操作从队列头部获得元素。当多个线程共享访问一个公共 collection 时，ConcurrentLinkedQueue 是一个恰当的选择。此队列不允许使用 null 元素。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: ConcurrentLinkedQueue详解</a></p>
<h3><a class="header-anchor" href="#queue-concurrentlinkeddeque"><span></span></a><a href="#queue-concurrentlinkeddeque">#</a> Queue: ConcurrentLinkedDeque</h3>
<blockquote>
<p>是双向链表实现的无界队列，该队列同时支持FIFO和FILO两种操作方式。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-delayqueue"><span></span></a><a href="#queue-delayqueue">#</a> Queue: DelayQueue</h3>
<blockquote>
<p>延时无界阻塞队列，使用Lock机制实现并发访问。队列里只允许放可以“延期”的元素，队列中的head是最先“到期”的元素。如果队里中没有元素到“到期”，那么就算队列中有元素也不能获取到。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-priorityblockingqueue"><span></span></a><a href="#queue-priorityblockingqueue">#</a> Queue: PriorityBlockingQueue</h3>
<blockquote>
<p>无界优先级阻塞队列，使用Lock机制实现并发访问。priorityQueue的线程安全版，不允许存放null值，依赖于comparable的排序，不允许存放不可比较的对象类型。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-synchronousqueue"><span></span></a><a href="#queue-synchronousqueue">#</a> Queue: SynchronousQueue</h3>
<blockquote>
<p>没有容量的同步队列，通过CAS实现并发访问，支持FIFO和FILO。</p>
</blockquote>
<h3><a class="header-anchor" href="#queue-linkedtransferqueue"><span></span></a><a href="#queue-linkedtransferqueue">#</a> Queue: LinkedTransferQueue</h3>
<blockquote>
<p>JDK 7新增，单向链表实现的无界阻塞队列，通过CAS实现并发访问，队列元素使用 FIFO(先进先出)方式。LinkedTransferQueue可以说是ConcurrentLinkedQueue、SynchronousQueue(公平模式)和LinkedBlockingQueue的超集, 它不仅仅综合了这几个类的功能，同时也提供了更高效的实现。</p>
</blockquote>
<h3><a class="header-anchor" href="#list-copyonwritearraylist"><span></span></a><a href="#list-copyonwritearraylist">#</a> List: CopyOnWriteArrayList</h3>
<blockquote>
<p>ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的复制来实现的。这一般需要很大的开销，但是当遍历操作的数量大大超过可变操作的数量时，这种方法可能比其他替代方法更 有效。在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时，它也很有用。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: CopyOnWriteArrayList详解</a></p>
<h3><a class="header-anchor" href="#set-copyonwritearrayset"><span></span></a><a href="#set-copyonwritearrayset">#</a> Set: CopyOnWriteArraySet</h3>
<blockquote>
<p>对其所有操作使用内部CopyOnWriteArrayList的Set。即将所有操作转发至CopyOnWriteArayList来进行操作，能够保证线程安全。在add时，会调用addIfAbsent，由于每次add时都要进行数组遍历，因此性能会略低于CopyOnWriteArrayList。</p>
</blockquote>
<h3><a class="header-anchor" href="#set-concurrentskiplistset"><span></span></a><a href="#set-concurrentskiplistset">#</a> Set: ConcurrentSkipListSet</h3>
<blockquote>
<p>一个基于ConcurrentSkipListMap 的可缩放并发 NavigableSet 实现。set 的元素可以根据它们的自然顺序进行排序，也可以根据创建 set 时所提供的 Comparator 进行排序，具体取决于使用的构造方法。</p>
</blockquote>
<h3><a class="header-anchor" href="#map-concurrenthashmap"><span></span></a><a href="#map-concurrenthashmap">#</a> Map: ConcurrentHashMap</h3>
<blockquote>
<p>是线程安全HashMap的。ConcurrentHashMap在JDK 7之前是通过Lock和segment(分段锁)实现，JDK 8 之后改为CAS+synchronized来保证并发安全。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC并发集合: ConcurrentHashMap详解</a>, 包含了对JDK 7和JDK 8版本的源码分析。</p>
<h3><a class="header-anchor" href="#map-concurrentskiplistmap"><span></span></a><a href="#map-concurrentskiplistmap">#</a> Map: ConcurrentSkipListMap</h3>
<blockquote>
<p>线程安全的有序的哈希表(相当于线程安全的TreeMap);映射可以根据键的自然顺序进行排序，也可以根据创建映射时所提供的 Comparator 进行排序，具体取决于使用的构造方法。</p>
</blockquote>
<h2><a class="header-anchor" href="#atomic-原子类"><span></span></a><a href="#atomic-%E5%8E%9F%E5%AD%90%E7%B1%BB">#</a> Atomic: 原子类</h2>
<p>其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由JVM从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。实际上是借助硬件的相关指令来实现的，不会阻塞线程(或者说只是在硬件级别上阻塞了)。</p>
<p>对CAS，Unsafe类，以及13个原子类详解请参考：详细分析请看: <a href="">JUC原子类: CAS, Unsafe和原子类详解</a></p>
<h3><a class="header-anchor" href="#基础类型-atomicboolean-atomicinteger-atomiclong"><span></span></a><a href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B-atomicboolean-atomicinteger-atomiclong">#</a> 基础类型：AtomicBoolean，AtomicInteger，AtomicLong</h3>
<blockquote>
<p>AtomicBoolean，AtomicInteger，AtomicLong是类似的，分别针对bool，interger，long的原子类。</p>
</blockquote>
<h3><a class="header-anchor" href="#数组-atomicintegerarray-atomiclongarray-booleanarray"><span></span></a><a href="#%E6%95%B0%E7%BB%84-atomicintegerarray-atomiclongarray-booleanarray">#</a> 数组：AtomicIntegerArray，AtomicLongArray，BooleanArray</h3>
<blockquote>
<p>AtomicIntegerArray，AtomicLongArray，AtomicBooleanArray是数组原子类。</p>
</blockquote>
<h3><a class="header-anchor" href="#引用-atomicreference-atomicmarkedreference-atomicstampedreference"><span></span></a><a href="#%E5%BC%95%E7%94%A8-atomicreference-atomicmarkedreference-atomicstampedreference">#</a> 引用：AtomicReference，AtomicMarkedReference，AtomicStampedReference</h3>
<blockquote>
<p>AtomicReference，AtomicMarkedReference，AtomicStampedReference是引用相关的原子类。</p>
</blockquote>
<h3><a class="header-anchor" href="#fieldupdater-atomiclongfieldupdater-atomicintegerfieldupdater-atomicreferencefieldupdater"><span></span></a><a href="#fieldupdater-atomiclongfieldupdater-atomicintegerfieldupdater-atomicreferencefieldupdater">#</a> FieldUpdater：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater</h3>
<blockquote>
<p>AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater是FieldUpdater原子类。</p>
</blockquote>
<h2><a class="header-anchor" href="#executors-线程池"><span></span></a><a href="#executors-%E7%BA%BF%E7%A8%8B%E6%B1%A0">#</a> Executors: 线程池</h2>
<h3><a class="header-anchor" href="#类结构关系-1"><span></span></a><a href="#%E7%B1%BB%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB-1">#</a> 类结构关系</h3>
<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-executors-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3><a class="header-anchor" href="#接口-executor"><span></span></a><a href="#%E6%8E%A5%E5%8F%A3-executor">#</a> 接口: Executor</h3>
<blockquote>
<p>Executor接口提供一种将任务提交与每个任务将如何运行的机制(包括线程使用的细节、调度等)分离开来的方法。通常使用 Executor 而不是显式地创建线程。</p>
</blockquote>
<h3><a class="header-anchor" href="#executorservice"><span></span></a><a href="#executorservice">#</a> ExecutorService</h3>
<blockquote>
<p>ExecutorService继承自Executor接口，ExecutorService提供了管理终止的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。 可以关闭 ExecutorService，这将导致其停止接受新任务。关闭后，执行程序将最后终止，这时没有任务在执行，也没有任务在等待执行，并且无法提交新任务。</p>
</blockquote>
<h3><a class="header-anchor" href="#scheduledexecutorservice"><span></span></a><a href="#scheduledexecutorservice">#</a> ScheduledExecutorService</h3>
<blockquote>
<p>ScheduledExecutorService继承自ExecutorService接口，可安排在给定的延迟后运行或定期执行的命令。</p>
</blockquote>
<h3><a class="header-anchor" href="#abstractexecutorservice"><span></span></a><a href="#abstractexecutorservice">#</a> AbstractExecutorService</h3>
<blockquote>
<p>AbstractExecutorService继承自ExecutorService接口，其提供 ExecutorService 执行方法的默认实现。此类使用 newTaskFor 返回的 RunnableFuture 实现 submit、invokeAny 和 invokeAll 方法，默认情况下，RunnableFuture 是此包中提供的 FutureTask 类。</p>
</blockquote>
<h3><a class="header-anchor" href="#futuretask"><span></span></a><a href="#futuretask">#</a> FutureTask</h3>
<blockquote>
<p>FutureTask 为 Future 提供了基础实现，如获取任务执行结果(get)和取消任务(cancel)等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消(除非使用runAndReset执行计算)。FutureTask 常用来封装 Callable 和 Runnable，也可以作为一个任务提交到线程池中执行。除了作为一个独立的类之外，此类也提供了一些功能性函数供我们创建自定义 task 类使用。FutureTask 的线程安全由CAS来保证。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: FutureTask详解</a></p>
<h3><a class="header-anchor" href="#核心-threadpoolexecutor"><span></span></a><a href="#%E6%A0%B8%E5%BF%83-threadpoolexecutor">#</a> 核心: ThreadPoolExecutor</h3>
<blockquote>
<p>ThreadPoolExecutor实现了AbstractExecutorService接口，也是一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。 线程池可以解决两个不同问题: 由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源(包括执行任务集时使用的线程)的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: ThreadPoolExecutor详解</a></p>
<h3><a class="header-anchor" href="#核心-scheduledthreadexecutor"><span></span></a><a href="#%E6%A0%B8%E5%BF%83-scheduledthreadexecutor">#</a> 核心: ScheduledThreadExecutor</h3>
<blockquote>
<p>ScheduledThreadPoolExecutor实现ScheduledExecutorService接口，可安排在给定的延迟后运行命令，或者定期执行命令。需要多个辅助线程时，或者要求 ThreadPoolExecutor 具有额外的灵活性或功能时，此类要优于 Timer。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: ScheduledThreadExecutor详解</a></p>
<h3><a class="header-anchor" href="#核心-fork-join框架"><span></span></a><a href="#%E6%A0%B8%E5%BF%83-fork-join%E6%A1%86%E6%9E%B6">#</a> 核心: Fork/Join框架</h3>
<blockquote>
<p>ForkJoinPool 是JDK 7加入的一个线程池类。Fork/Join 技术是分治算法(Divide-and-Conquer)的并行实现，它是一项可以获得良好的并行性能的简单且高效的设计技术。目的是为了帮助我们更好地利用多处理器带来的好处，使用所有可用的运算能力来提升应用的性能。</p>
</blockquote>
<p>详细分析请看: <a href="">JUC线程池: Fork/Join框架详解</a></p>
<h3><a class="header-anchor" href="#工具类-executors"><span></span></a><a href="#%E5%B7%A5%E5%85%B7%E7%B1%BB-executors">#</a> 工具类: Executors</h3>
<blockquote>
<p>Executors是一个工具类，用其可以创建ExecutorService、ScheduledExecutorService、ThreadFactory、Callable等对象。它的使用融入到了ThreadPoolExecutor, ScheduledThreadExecutor和ForkJoinPool中。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-overview-1-u.png" type="image/png"/>
    </item>
  </channel>
</rss>