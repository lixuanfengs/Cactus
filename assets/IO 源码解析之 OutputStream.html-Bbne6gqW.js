import{_ as s,o as n,c as a,h as l}from"./app-BP7jp-FQ.js";const p={},e=l(`<blockquote><p>本文主要从JDK 11源码角度分析 OutputStream。 @pdai</p></blockquote><ul><li>IO 源码解析之 OutputStream <ul><li><a href="#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">OutputStream 类实现关系</a></li><li><a href="#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">OutputStream 抽象类</a></li><li>源码实现 <ul><li><a href="#outputstream">OutputStream</a></li><li><a href="#filteroutputstream">FilterOutputStream</a></li><li><a href="#bytearrayoutputstream">ByteArrayOutputStream</a></li><li><a href="#bufferedoutputstream">BufferedOutputStream</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="outputstream-类实现关系" tabindex="-1"><a class="header-anchor" href="#outputstream-类实现关系"><span><a href="#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB">#</a> OutputStream 类实现关系</span></a></h2><blockquote><p>OutputStream是输出字节流，具体的实现类层次结构如下：</p></blockquote><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="outputstream-抽象类" tabindex="-1"><a class="header-anchor" href="#outputstream-抽象类"><span><a href="#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> OutputStream 抽象类</span></a></h2><p>OutputStream 类重要方法设计如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法。</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b[])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b[]</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> off</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> len)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> flush</span><span style="color:#E06C75;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#E06C75;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源码实现" tabindex="-1"><a class="header-anchor" href="#源码实现"><span><a href="#%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0">#</a> 源码实现</span></a></h2><blockquote><p>梳理部分OutputStream及其实现类的源码分析。</p></blockquote><h3 id="outputstream" tabindex="-1"><a class="header-anchor" href="#outputstream"><span><a href="#outputstream">#</a> OutputStream</span></a></h3><p>OutputStream抽象类源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> OutputStream</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Closeable</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Flushable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // JDK11中增加了一个nullOutputStream，即空模式实现，以便可以直接调用而不用判空（可以看如下的补充说明）</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> OutputStream</span><span style="color:#61AFEF;"> nullOutputStream</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OutputStream</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> closed</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> ensureOpen</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IOException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Stream closed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">                ensureOpen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                closed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写入一个字节，可以看到这里的参数是一个 int 类型，对应上面的读方法，int 类型的 32 位，只有低 8 位才写入，高 24 位将舍弃。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将数组中的所有字节写入，实际调用的是write(byte b[], int off, int len)方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[])</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        write</span><span style="color:#ABB2BF;">(b, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 检查边界合理性</span></span>
<span class="line"><span style="color:#E5C07B;">        Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // len == 0 的情况已经在如下的for循环中隐式处理了</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> ; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> len ; i++) {</span></span>
<span class="line"><span style="color:#61AFEF;">            write</span><span style="color:#ABB2BF;">(b[off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 强制刷新，将缓冲中的数据写入; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> flush</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 关闭输出流，流被关闭后就不能再输出数据了; 默认是空实现，供子类覆盖</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>补充下JDK11为什么会增加nullOutputStream方法的设计？即空对象模式</p></blockquote><ul><li><strong>空对象模式</strong></li></ul><p>举个例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyParser</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Parser</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> Action</span><span style="color:#E06C75;"> NO_ACTION </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Action</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">/* do nothing */</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E5C07B;"> Action</span><span style="color:#61AFEF;"> findAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> userInput</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#7F848E;font-style:italic;">/* we can&#39;t find any actions */</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> NO_ACTION;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后便<strong>可以始终可以这么调用，而不用再判断空了</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ParserFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getParser</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">findAction</span><span style="color:#ABB2BF;">(someInput).</span><span style="color:#61AFEF;">doSomething</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="filteroutputstream" tabindex="-1"><a class="header-anchor" href="#filteroutputstream"><span><a href="#filteroutputstream">#</a> FilterOutputStream</span></a></h3><p>FilterOutputStream 源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FilterOutputStream</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> OutputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 被装饰的实际outputStream</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#E5C07B;"> OutputStream</span><span style="color:#E06C75;"> out</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当前stream是否已经被close</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> closed</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // close stream时加锁，防止其它线程同时close</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> closeLock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 初始化构造函数，传入被装饰的实际outputStream</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> FilterOutputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> out</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> out;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写入数据，本质调用被装饰outputStream的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(b);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将数组中的所有字节写入</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[])</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        write</span><span style="color:#ABB2BF;">(b, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 一个个写入</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> ((off </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> len </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> off)) </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> (off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len)) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IndexOutOfBoundsException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> ; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> len ; i++) {</span></span>
<span class="line"><span style="color:#61AFEF;">            write</span><span style="color:#ABB2BF;">(b[off </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> i]);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // 强制刷新，将缓冲中的数据写入; 本质调用被装饰outputStream的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> flush</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 关闭Stream</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果已经close, 直接退出</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 加锁处理，如果已经有线程正在closing则退出；</span></span>
<span class="line"><span style="color:#C678DD;">        synchronized</span><span style="color:#ABB2BF;"> (closeLock) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (closed) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">            closed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // close前调用flush</span></span>
<span class="line"><span style="color:#E5C07B;">        Throwable</span><span style="color:#E06C75;"> flushException</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            flush</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            flushException </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> e;</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#ABB2BF;"> e;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (flushException </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> closeException</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                   // evaluate possible precedence of flushException over closeException</span></span>
<span class="line"><span style="color:#C678DD;">                   if</span><span style="color:#ABB2BF;"> ((flushException </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> ThreadDeath) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">                       !</span><span style="color:#ABB2BF;">(closeException </span><span style="color:#C678DD;">instanceof</span><span style="color:#ABB2BF;"> ThreadDeath)) {</span></span>
<span class="line"><span style="color:#E5C07B;">                       flushException</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSuppressed</span><span style="color:#ABB2BF;">(closeException);</span></span>
<span class="line"><span style="color:#C678DD;">                       throw</span><span style="color:#ABB2BF;"> (ThreadDeath) flushException;</span></span>
<span class="line"><span style="color:#ABB2BF;">                   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#ABB2BF;"> (flushException </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> closeException) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        closeException</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSuppressed</span><span style="color:#ABB2BF;">(flushException);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#ABB2BF;"> closeException;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@pdai: 对比下JDK8中，close方法是没有加锁处理的。这种情况下你可以看JDK8源码中，直接利用java7的try with resources方式，优雅的调用flush方法后对out进行关闭。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#E06C75;">() throws IOException {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;"> ostream </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> out) {</span></span>
<span class="line"><span style="color:#61AFEF;">        flush</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bytearrayoutputstream" tabindex="-1"><a class="header-anchor" href="#bytearrayoutputstream"><span><a href="#bytearrayoutputstream">#</a> ByteArrayOutputStream</span></a></h3><p>ByteArrayOutputStream 源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ByteArrayOutputStream</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> OutputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 实际的byte数组</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> buf[]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 数组中实际有效的byte的个数</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 初始化默认构造，初始化byte数组大小为32</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ByteArrayOutputStream</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 初始化byte的大小</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ByteArrayOutputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> size</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (size </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Negative initial size: &quot;</span></span>
<span class="line"><span style="color:#56B6C2;">                                               +</span><span style="color:#ABB2BF;"> size);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        buf </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 扩容，确保它至少可以容纳由最小容量参数指定的元素数</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> ensureCapacity</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> minCapacity</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (minCapacity </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            grow</span><span style="color:#ABB2BF;">(minCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 分配的最大数组大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 由于一些VM在数组中保留一些头字，所以尝试分配较大的阵列可能会导致OutOfMemoryError（请求的阵列大小超过VM限制）</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 扩容的实质方法，确保它至少可以容纳由最小容量参数指定的元素数</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> grow</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> minCapacity</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> oldCapacity</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> newCapacity</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> oldCapacity </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (newCapacity </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> minCapacity </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            newCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> minCapacity;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (newCapacity </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            newCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> hugeCapacity</span><span style="color:#ABB2BF;">(minCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF;">        buf </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(buf, newCapacity);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> hugeCapacity</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> minCapacity</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (minCapacity </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// overflow</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OutOfMemoryError</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (minCapacity </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> MAX_ARRAY_SIZE) </span><span style="color:#C678DD;">?</span></span>
<span class="line"><span style="color:#E5C07B;">            Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#C678DD;"> :</span></span>
<span class="line"><span style="color:#ABB2BF;">            MAX_ARRAY_SIZE;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写入，写入前确保byte数据长度</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        ensureCapacity</span><span style="color:#ABB2BF;">(count </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        buf[count] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">) b;</span></span>
<span class="line"><span style="color:#ABB2BF;">        count </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkFromIndexSize</span><span style="color:#ABB2BF;">(off, len, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        ensureCapacity</span><span style="color:#ABB2BF;">(count </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> len);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(b, off, buf, count, len);</span></span>
<span class="line"><span style="color:#ABB2BF;">        count </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writeBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[])</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        write</span><span style="color:#ABB2BF;">(b, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writeTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> out</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buf, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, count);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重置，显然将实际有效的byte数量置为0</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        count </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] toByteArray</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(buf, count);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 长度，即count</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> size</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> count;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 转成string</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(buf, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, count);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 转成string，指定的字符集</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> charsetName</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> UnsupportedEncodingException</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(buf, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, count, charsetName);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Charset</span><span style="color:#E06C75;font-style:italic;"> charset</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(buf, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, count, charset);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 弃用</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Deprecated</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> hibyte</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(buf, hibyte, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, count);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 对byte 数组而言，close没啥实质意义，所以空实现</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> close</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bufferedoutputstream" tabindex="-1"><a class="header-anchor" href="#bufferedoutputstream"><span><a href="#bufferedoutputstream">#</a> BufferedOutputStream</span></a></h3><p>BufferedOutputStream 源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> BufferedOutputStream</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> FilterOutputStream</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Buffered outputStream底层也是byte数组</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> buf[]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 大小，buf[0]到buf[count-1]是实际存储的bytes</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数，被装饰的outputStream，以及默认buf大小是8192</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> BufferedOutputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> out</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">(out, </span><span style="color:#D19A66;">8192</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> BufferedOutputStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> out</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> size</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(out);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (size </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Buffer size &lt;= 0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        buf </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** Flush the internal buffer */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 内部的flush方法，将buffer中的有效bytes(count是有效的bytes大小)通过被装饰的outputStream写入</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> flushBuffer</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (count </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buf, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, count);</span></span>
<span class="line"><span style="color:#ABB2BF;">            count </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写入byte</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 当buffer满了以后，flush buffer</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (count </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E5C07B;"> buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            flushBuffer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        buf[count++] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">)b;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将 byte 数组从 off 位置开始，len 长度的字节写入</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#E06C75;font-style:italic;"> b</span><span style="color:#ABB2BF;">[], </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> off</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E5C07B;"> buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果请求长度已经超过输出缓冲区的大小，直接刷新输出缓冲区，然后直接写入数据。</span></span>
<span class="line"><span style="color:#61AFEF;">            flushBuffer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(b, off, len);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (len </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> buf</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> count) {</span></span>
<span class="line"><span style="color:#61AFEF;">            flushBuffer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(b, off, buf, count, len);</span></span>
<span class="line"><span style="color:#ABB2BF;">        count </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> len;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // flush方法，需要先将buffer中写入，最后在调用被装饰outputStream的flush方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> flush</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        flushBuffer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,31),o=[e];function t(c,i){return n(),a("div",null,o)}const B=s(p,[["render",t],["__file","IO 源码解析之 OutputStream.html.vue"]]),y=JSON.parse(`{"path":"/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20OutputStream.html","title":"IO 源码解析之 OutputStream","lang":"zh-CN","frontmatter":{"title":"IO 源码解析之 OutputStream","subtitle":"Java，Java开发，Java 体系","date":"2024-03-11T14:36:26.000Z","category":["Java"],"tag":["Java","IO"],"order":5,"description":"本文主要从JDK 11源码角度分析 OutputStream。 @pdai IO 源码解析之 OutputStream OutputStream 类实现关系 OutputStream 抽象类 源码实现 OutputStream FilterOutputStream ByteArrayOutputStream BufferedOutputStream 参...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8B%20OutputStream.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"IO 源码解析之 OutputStream"}],["meta",{"property":"og:description","content":"本文主要从JDK 11源码角度分析 OutputStream。 @pdai IO 源码解析之 OutputStream OutputStream 类实现关系 OutputStream 抽象类 源码实现 OutputStream FilterOutputStream ByteArrayOutputStream BufferedOutputStream 参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:29:14.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:36:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:29:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO 源码解析之 OutputStream\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/io-outputstream-1.png\\"],\\"datePublished\\":\\"2024-03-11T14:36:26.000Z\\",\\"dateModified\\":\\"2024-03-17T09:29:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# OutputStream 类实现关系","slug":"outputstream-类实现关系","link":"#outputstream-类实现关系","children":[]},{"level":2,"title":"# OutputStream 抽象类","slug":"outputstream-抽象类","link":"#outputstream-抽象类","children":[]},{"level":2,"title":"# 源码实现","slug":"源码实现","link":"#源码实现","children":[{"level":3,"title":"# OutputStream","slug":"outputstream","link":"#outputstream","children":[]},{"level":3,"title":"# FilterOutputStream","slug":"filteroutputstream","link":"#filteroutputstream","children":[]},{"level":3,"title":"# ByteArrayOutputStream","slug":"bytearrayoutputstream","link":"#bytearrayoutputstream","children":[]},{"level":3,"title":"# BufferedOutputStream","slug":"bufferedoutputstream","link":"#bufferedoutputstream","children":[]}]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710667754000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":6.5,"words":1951},"filePathRelative":"posts/Java/IO-NIO-AIO/IO 源码解析之 OutputStream.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>本文主要从JDK 11源码角度分析 OutputStream。 @pdai</p>\\n</blockquote>\\n<ul>\\n<li>IO 源码解析之 OutputStream\\n<ul>\\n<li><a href=\\"#outputstream-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB\\">OutputStream 类实现关系</a></li>\\n<li><a href=\\"#outputstream-%E6%8A%BD%E8%B1%A1%E7%B1%BB\\">OutputStream 抽象类</a></li>\\n<li>源码实现\\n<ul>\\n<li><a href=\\"#outputstream\\">OutputStream</a></li>\\n<li><a href=\\"#filteroutputstream\\">FilterOutputStream</a></li>\\n<li><a href=\\"#bytearrayoutputstream\\">ByteArrayOutputStream</a></li>\\n<li><a href=\\"#bufferedoutputstream\\">BufferedOutputStream</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{B as comp,y as data};
