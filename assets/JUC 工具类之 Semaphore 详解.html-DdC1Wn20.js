import{_ as a,c as n,f as l,o as e}from"./app-Blc9nXcG.js";const p={};function o(r,s){return e(),n("div",null,s[0]||(s[0]=[l(`<blockquote><p>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。</p></blockquote><ul><li>JUC 工具类之 Semaphore 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li><li>Semaphore源码分析 <ul><li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---sync%E7%B1%BB">类的内部类 - Sync类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---nonfairsync%E7%B1%BB">类的内部类 - NonfairSync类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---fairsync%E7%B1%BB">类的内部类 - FairSync类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90---acquire%E5%87%BD%E6%95%B0">核心函数分析 - acquire函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90---release%E5%87%BD%E6%95%B0">核心函数分析 - release函数</a></li></ul></li><li><a href="#semaphore%E7%A4%BA%E4%BE%8B">Semaphore示例</a></li><li>更深入理解 <ul><li><a href="#%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8semaphore%E6%98%AF%E4%B8%8D%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%88%B0aqs%E7%9A%84%E6%9D%A1%E4%BB%B6%E9%98%9F%E5%88%97%E7%9A%84">单独使用Semaphore是不会使用到AQS的条件队列的</a></li><li>场景问题 <ul><li><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8910%E4%B8%AA%E4%BB%A4%E7%89%8C11%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%97%B6%E5%90%84%E8%B0%83%E7%94%A81%E6%AC%A1acquire%E6%96%B9%E6%B3%95%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</a></li><li><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8910%E4%B8%AA%E4%BB%A4%E7%89%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E9%87%8D%E5%A4%8D%E8%B0%83%E7%94%A811%E6%AC%A1acquire%E6%96%B9%E6%B3%95%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</a></li><li><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%891%E4%B8%AA%E4%BB%A4%E7%89%8C1%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1acquire%E6%96%B9%E6%B3%95%E7%84%B6%E5%90%8E%E8%B0%83%E7%94%A8%E4%B8%A4%E6%AC%A1release%E6%96%B9%E6%B3%95%E4%B9%8B%E5%90%8E%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8acquire2%E6%96%B9%E6%B3%95%E6%AD%A4%E7%BA%BF%E7%A8%8B%E8%83%BD%E5%A4%9F%E8%8E%B7%E5%8F%96%E5%88%B0%E8%B6%B3%E5%A4%9F%E7%9A%84%E4%BB%A4%E7%89%8C%E5%B9%B6%E7%BB%A7%E7%BB%AD%E8%BF%90%E8%A1%8C%E5%90%97">semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</a></li><li><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%892%E4%B8%AA%E4%BB%A4%E7%89%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A81%E6%AC%A1release%E6%96%B9%E6%B3%95%E7%84%B6%E5%90%8E%E4%B8%80%E6%AC%A1%E6%80%A7%E8%8E%B7%E5%8F%963%E4%B8%AA%E4%BB%A4%E7%89%8C%E4%BC%9A%E8%8E%B7%E5%8F%96%E5%88%B0%E5%90%97">semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</a></li></ul></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>什么是Semaphore?</li><li>Semaphore内部原理?</li><li>Semaphore常用方法有哪些? 如何实现线程同步和互斥的?</li><li>Semaphore适合用在什么场景?</li><li>单独使用Semaphore是不会使用到AQS的条件队列?</li><li>Semaphore中申请令牌(acquire)、释放令牌(release)的实现?</li><li>Semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</li><li>Semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</li><li>Semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</li><li>Semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</li></ul><h2 id="semaphore源码分析" tabindex="-1"><a class="header-anchor" href="#semaphore源码分析"><span><a href="#semaphore%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> Semaphore源码分析</span></a></h2><h3 id="类的继承关系" tabindex="-1"><a class="header-anchor" href="#类的继承关系"><span><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Semaphore</span><span style="color:#C678DD;"> implements</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>说明: Semaphore实现了Serializable接口，即可以进行序列化。</p><h3 id="类的内部类" tabindex="-1"><a class="header-anchor" href="#类的内部类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</span></a></h3><p>Semaphore总共有三个内部类，并且三个内部类是紧密相关的，下面先看三个类的关系。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: Semaphore与ReentrantLock的内部类的结构相同，类内部总共存在Sync、NonfairSync、FairSync三个类，NonfairSync与FairSync类继承自Sync类，Sync类继承自AbstractQueuedSynchronizer抽象类。下面逐个进行分析。</p><h3 id="类的内部类-sync类" tabindex="-1"><a class="header-anchor" href="#类的内部类-sync类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB-sync%E7%B1%BB">#</a> 类的内部类 - Sync类</span></a></h3><p>Sync类的源码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 内部类，继承自AQS</span></span>
<span class="line"><span style="color:#C678DD;">abstract</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Sync</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1192457210091910933L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="color:#61AFEF;">    Sync</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> permits</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置状态数</span></span>
<span class="line"><span style="color:#61AFEF;">        setState</span><span style="color:#ABB2BF;">(permits);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取许可</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getPermits</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 共享模式下非公平策略获取</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> nonfairTryAcquireShared</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> acquires</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (;;) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取许可数</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> available</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 剩余的许可</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> remaining</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> available </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> acquires;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (remaining </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#61AFEF;">                compareAndSetState</span><span style="color:#ABB2BF;">(available, remaining)) </span><span style="color:#7F848E;font-style:italic;">// 许可小于0或者比较并且设置状态成功</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> remaining;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 共享模式下进行释放</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> tryReleaseShared</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> releases</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (;;) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取许可</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 可用的许可</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> next</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> current </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> releases;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (next </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> current) </span><span style="color:#7F848E;font-style:italic;">// overflow</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Maximum permit count exceeded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#ABB2BF;">(current, next)) </span><span style="color:#7F848E;font-style:italic;">// 比较并进行设置成功</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 根据指定的缩减量减小可用许可的数目</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reducePermits</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> reductions</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (;;) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取许可</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 可用的许可</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> next</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> current </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> reductions;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (next </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> current) </span><span style="color:#7F848E;font-style:italic;">// underflow</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Permit count underflow&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#ABB2BF;">(current, next)) </span><span style="color:#7F848E;font-style:italic;">// 比较并进行设置成功</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取并返回立即可用的所有许可</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> drainPermits</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (;;) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取许可</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (current </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#61AFEF;"> compareAndSetState</span><span style="color:#ABB2BF;">(current, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// 许可为0或者比较并设置成功</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> current;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: Sync类的属性相对简单，只有一个版本号，Sync类存在如下方法和作用如下。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="类的内部类-nonfairsync类" tabindex="-1"><a class="header-anchor" href="#类的内部类-nonfairsync类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB-nonfairsync%E7%B1%BB">#</a> 类的内部类 - NonfairSync类</span></a></h3><p>NonfairSync类继承了Sync类，表示采用非公平策略获取资源，其只有一个tryAcquireShared方法，重写了AQS的该方法，其源码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> NonfairSync</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Sync</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">2694183684443567898L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="color:#61AFEF;">    NonfairSync</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> permits</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(permits);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 共享模式下获取</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> tryAcquireShared</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> acquires</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> nonfairTryAcquireShared</span><span style="color:#ABB2BF;">(acquires);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 从tryAcquireShared方法的源码可知，其会调用父类Sync的nonfairTryAcquireShared方法，表示按照非公平策略进行资源的获取。</p><h3 id="类的内部类-fairsync类" tabindex="-1"><a class="header-anchor" href="#类的内部类-fairsync类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB-fairsync%E7%B1%BB">#</a> 类的内部类 - FairSync类</span></a></h3><p>FairSync类继承了Sync类，表示采用公平策略获取资源，其只有一个tryAcquireShared方法，重写了AQS的该方法，其源码如下。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> tryAcquireShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> acquires) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">hasQueuedPredecessors</span><span style="color:#E06C75;">()) </span><span style="color:#7F848E;font-style:italic;">// 同步队列中存在其他节点</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取许可</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> available </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 剩余的许可</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> remaining </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> available </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> acquires</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (remaining </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#61AFEF;">            compareAndSetState</span><span style="color:#E06C75;">(available</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> remaining)) </span><span style="color:#7F848E;font-style:italic;">// 剩余的许可小于0或者比较设置成功</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> remaining</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 从tryAcquireShared方法的源码可知，它使用公平策略来获取资源，它会判断同步队列中是否存在其他的等待节点。</p><h3 id="类的属性" tabindex="-1"><a class="header-anchor" href="#类的属性"><span><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Semaphore</span><span style="color:#C678DD;"> implements</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">3222578661600680210L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 属性</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Sync</span><span style="color:#E06C75;"> sync</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: Semaphore自身只有两个属性，最重要的是sync属性，基于Semaphore对象的操作绝大多数都转移到了对sync的操作。</p><h3 id="类的构造函数" tabindex="-1"><a class="header-anchor" href="#类的构造函数"><span><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</span></a></h3><ul><li>Semaphore(int)型构造函数</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Semaphore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> permits) {</span></span>
<span class="line"><span style="color:#E06C75;">    sync </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NonfairSync</span><span style="color:#E06C75;">(permits)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该构造函数会创建具有给定的许可数和非公平的公平设置的Semaphore。</p><ul><li>Semaphore(int, boolean)型构造函数</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Semaphore</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> permits</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> fair) {</span></span>
<span class="line"><span style="color:#E06C75;">    sync </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> fair </span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FairSync</span><span style="color:#E06C75;">(permits) </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NonfairSync</span><span style="color:#E06C75;">(permits)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该构造函数会创建具有给定的许可数和给定的公平设置的Semaphore。</p><h3 id="核心函数分析-acquire函数" tabindex="-1"><a class="header-anchor" href="#核心函数分析-acquire函数"><span><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90-acquire%E5%87%BD%E6%95%B0">#</a> 核心函数分析 - acquire函数</span></a></h3><p>此方法从信号量获取一个(多个)许可，在提供一个许可前一直将线程阻塞，或者线程被中断，其源码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> acquire</span><span style="color:#E06C75;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E5C07B;">    sync</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acquireSharedInterruptibly</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该方法中将会调用Sync对象的acquireSharedInterruptibly(从AQS继承而来的方法)方法，而acquireSharedInterruptibly方法在上一篇CountDownLatch中已经进行了分析，在此不再累赘。</p><p>最终可以获取大致的方法调用序列(假设使用非公平策略)。如下图所示。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 上图只是给出了大体会调用到的方法，和具体的示例可能会有些差别，之后会根据具体的示例进行分析。</p><h3 id="核心函数分析-release函数" tabindex="-1"><a class="header-anchor" href="#核心函数分析-release函数"><span><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90-release%E5%87%BD%E6%95%B0">#</a> 核心函数分析 - release函数</span></a></h3><p>此方法释放一个(多个)许可，将其返回给信号量，源码如下。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> release</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    sync</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">releaseShared</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该方法中将会调用Sync对象的releaseShared(从AQS继承而来的方法)方法，而releaseShared方法在上一篇CountDownLatch中已经进行了分析，在此不再累赘。</p><p>最终可以获取大致的方法调用序列(假设使用非公平策略)。如下图所示:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 上图只是给出了大体会调用到的方法，和具体的示例可能会有些差别，之后会根据具体的示例进行分析。</p><h2 id="semaphore示例" tabindex="-1"><a class="header-anchor" href="#semaphore示例"><span><a href="#semaphore%E7%A4%BA%E4%BE%8B">#</a> Semaphore示例</span></a></h2><p>下面给出了一个使用Semaphore的示例。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.Semaphore</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Semaphore</span><span style="color:#E06C75;"> semaphore</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Semaphore</span><span style="color:#E06C75;font-style:italic;"> semaphore</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">semaphore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> semaphore;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {        </span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; trying to acquire&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">(count);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; acquire successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">(count);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; release successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SemaphoreDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> SEM_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Semaphore</span><span style="color:#E06C75;"> semaphore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Semaphore</span><span style="color:#ABB2BF;">(SEM_SIZE);</span></span>
<span class="line"><span style="color:#E5C07B;">        MyThread</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1&quot;</span><span style="color:#ABB2BF;">, semaphore);</span></span>
<span class="line"><span style="color:#E5C07B;">        MyThread</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2&quot;</span><span style="color:#ABB2BF;">, semaphore);</span></span>
<span class="line"><span style="color:#E5C07B;">        t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> permits</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; trying to acquire&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acquire</span><span style="color:#ABB2BF;">(permits);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; acquire successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; release successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }      </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次):</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">main trying to acquire</span></span>
<span class="line"><span style="color:#ABB2BF;">main acquire successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">t1 trying to acquire</span></span>
<span class="line"><span style="color:#ABB2BF;">t1 acquire successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">t2 trying to acquire</span></span>
<span class="line"><span style="color:#ABB2BF;">t1 release successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">main release successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">t2 acquire successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">t2 release successfully</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 首先，生成一个信号量，信号量有10个许可，然后，main，t1，t2三个线程获取许可运行，根据结果，可能存在如下的一种时序。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 如上图所示，首先，main线程执行acquire操作，并且成功获得许可，之后t1线程执行acquire操作，成功获得许可，之后t2执行acquire操作，由于此时许可数量不够，t2线程将会阻塞，直到许可可用。之后t1线程释放许可，main线程释放许可，此时的许可数量可以满足t2线程的要求，所以，此时t2线程会成功获得许可运行，t2运行完成后释放许可。下面进行详细分析。</p><ul><li>main线程执行semaphore.acquire操作。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，可以看到只是AQS的state变为了5，main线程并没有被阻塞，可以继续运行。</p><ul><li>t1线程执行semaphore.acquire操作。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，可以看到只是AQS的state变为了2，t1线程并没有被阻塞，可以继续运行。</p><ul><li>t2线程执行semaphore.acquire操作。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，t2线程获取许可不会成功，之后会导致其被禁止运行，值得注意的是，AQS的state还是为2。</p><ul><li>t1执行semaphore.release操作。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，t2线程将会被unpark，并且AQS的state为5，t2获取cpu资源后可以继续运行。</p><ul><li>main线程执行semaphore.release操作。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，t2线程还会被unpark，但是不会产生影响，此时，只要t2线程获得CPU资源就可以运行了。此时，AQS的state为10。</p><ul><li>t2获取CPU资源，继续运行，此时t2需要恢复现场，回到parkAndCheckInterrupt函数中，也是在should继续运行。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，可以看到，Sync queue中只有一个结点，头节点与尾节点都指向该结点，在setHeadAndPropagate的函数中会设置头节点并且会unpark队列中的其他结点。</p><ul><li>t2线程执行semaphore.release操作。主要的函数调用如下图所示。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-12.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: t2线程经过release后，此时信号量的许可又变为10个了，此时Sync queue中的结点还是没有变化。</p><h2 id="更深入理解" tabindex="-1"><a class="header-anchor" href="#更深入理解"><span><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 更深入理解</span></a></h2><h3 id="单独使用semaphore是不会使用到aqs的条件队列的" tabindex="-1"><a class="header-anchor" href="#单独使用semaphore是不会使用到aqs的条件队列的"><span><a href="#%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8semaphore%E6%98%AF%E4%B8%8D%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%88%B0aqs%E7%9A%84%E6%9D%A1%E4%BB%B6%E9%98%9F%E5%88%97%E7%9A%84">#</a> 单独使用Semaphore是不会使用到AQS的条件队列的</span></a></h3><p>不同于CyclicBarrier和ReentrantLock，单独使用Semaphore是不会使用到AQS的条件队列的，其实，只有进行await操作才会进入条件队列，其他的都是在同步队列中，只是当前线程会被park。</p><h3 id="场景问题" tabindex="-1"><a class="header-anchor" href="#场景问题"><span><a href="#%E5%9C%BA%E6%99%AF%E9%97%AE%E9%A2%98">#</a> 场景问题</span></a></h3><h4 id="semaphore初始化有10个令牌-11个线程同时各调用1次acquire方法-会发生什么" tabindex="-1"><a class="header-anchor" href="#semaphore初始化有10个令牌-11个线程同时各调用1次acquire方法-会发生什么"><span><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8910%E4%B8%AA%E4%BB%A4%E7%89%8C-11%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%97%B6%E5%90%84%E8%B0%83%E7%94%A81%E6%AC%A1acquire%E6%96%B9%E6%B3%95-%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">#</a> semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</span></a></h4><p>答案：拿不到令牌的线程阻塞，不会继续往下运行。</p><h4 id="semaphore初始化有10个令牌-一个线程重复调用11次acquire方法-会发生什么" tabindex="-1"><a class="header-anchor" href="#semaphore初始化有10个令牌-一个线程重复调用11次acquire方法-会发生什么"><span><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8910%E4%B8%AA%E4%BB%A4%E7%89%8C-%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E9%87%8D%E5%A4%8D%E8%B0%83%E7%94%A811%E6%AC%A1acquire%E6%96%B9%E6%B3%95-%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88">#</a> semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</span></a></h4><p>答案：线程阻塞，不会继续往下运行。可能你会考虑类似于锁的重入的问题，很好，但是，令牌没有重入的概念。你只要调用一次acquire方法，就需要有一个令牌才能继续运行。</p><h4 id="semaphore初始化有1个令牌-1个线程调用一次acquire方法-然后调用两次release方法-之后另外一个线程调用acquire-2-方法-此线程能够获取到足够的令牌并继续运行吗" tabindex="-1"><a class="header-anchor" href="#semaphore初始化有1个令牌-1个线程调用一次acquire方法-然后调用两次release方法-之后另外一个线程调用acquire-2-方法-此线程能够获取到足够的令牌并继续运行吗"><span><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%891%E4%B8%AA%E4%BB%A4%E7%89%8C-1%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1acquire%E6%96%B9%E6%B3%95-%E7%84%B6%E5%90%8E%E8%B0%83%E7%94%A8%E4%B8%A4%E6%AC%A1release%E6%96%B9%E6%B3%95-%E4%B9%8B%E5%90%8E%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8acquire-2-%E6%96%B9%E6%B3%95-%E6%AD%A4%E7%BA%BF%E7%A8%8B%E8%83%BD%E5%A4%9F%E8%8E%B7%E5%8F%96%E5%88%B0%E8%B6%B3%E5%A4%9F%E7%9A%84%E4%BB%A4%E7%89%8C%E5%B9%B6%E7%BB%A7%E7%BB%AD%E8%BF%90%E8%A1%8C%E5%90%97">#</a> semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</span></a></h4><p>答案：能，原因是release方法会添加令牌，并不会以初始化的大小为准。</p><h4 id="semaphore初始化有2个令牌-一个线程调用1次release方法-然后一次性获取3个令牌-会获取到吗" tabindex="-1"><a class="header-anchor" href="#semaphore初始化有2个令牌-一个线程调用1次release方法-然后一次性获取3个令牌-会获取到吗"><span><a href="#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%892%E4%B8%AA%E4%BB%A4%E7%89%8C-%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A81%E6%AC%A1release%E6%96%B9%E6%B3%95-%E7%84%B6%E5%90%8E%E4%B8%80%E6%AC%A1%E6%80%A7%E8%8E%B7%E5%8F%963%E4%B8%AA%E4%BB%A4%E7%89%8C-%E4%BC%9A%E8%8E%B7%E5%8F%96%E5%88%B0%E5%90%97">#</a> semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</span></a></h4><p>答案：能，原因是release会添加令牌，并不会以初始化的大小为准。Semaphore中release方法的调用并没有限制要在acquire后调用。</p><p>具体示例如下，如果不相信的话，可以运行一下下面的demo，在做实验之前，笔者也认为应该是不允许的。。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestSemaphore2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> permitsNum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Semaphore</span><span style="color:#E06C75;"> semaphore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Semaphore</span><span style="color:#ABB2BF;">(permitsNum);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;availablePermits:&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">availablePermits</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot;,semaphore.tryAcquire(3,1, TimeUnit.SECONDS):&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryAcquire</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">            semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;availablePermits:&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">availablePermits</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot;,semaphore.tryAcquire(3,1, TimeUnit.SECONDS):&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">semaphore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryAcquire</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94)]))}const t=a(p,[["render",o],["__file","JUC 工具类之 Semaphore 详解.html.vue"]]),c=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Semaphore%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 工具类之 Semaphore 详解","lang":"zh-CN","frontmatter":{"title":"JUC 工具类之 Semaphore 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":24,"description":"Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。 JUC 工具类之 Semaphore 详解 带着BAT大厂的面试问题去理解 Semaphore源码分析 类的继承关系...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Semaphore%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 工具类之 Semaphore 详解"}],["meta",{"property":"og:description","content":"Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。 JUC 工具类之 Semaphore 详解 带着BAT大厂的面试问题去理解 Semaphore源码分析 类的继承关系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 工具类之 Semaphore 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-7.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-8.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-9.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-10.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-11.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-semaphore-12.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# Semaphore源码分析","slug":"semaphore源码分析","link":"#semaphore源码分析","children":[{"level":3,"title":"# 类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"# 类的内部类","slug":"类的内部类","link":"#类的内部类","children":[]},{"level":3,"title":"# 类的内部类 - Sync类","slug":"类的内部类-sync类","link":"#类的内部类-sync类","children":[]},{"level":3,"title":"# 类的内部类 - NonfairSync类","slug":"类的内部类-nonfairsync类","link":"#类的内部类-nonfairsync类","children":[]},{"level":3,"title":"# 类的内部类 - FairSync类","slug":"类的内部类-fairsync类","link":"#类的内部类-fairsync类","children":[]},{"level":3,"title":"# 类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"# 类的构造函数","slug":"类的构造函数","link":"#类的构造函数","children":[]},{"level":3,"title":"# 核心函数分析 - acquire函数","slug":"核心函数分析-acquire函数","link":"#核心函数分析-acquire函数","children":[]},{"level":3,"title":"# 核心函数分析 - release函数","slug":"核心函数分析-release函数","link":"#核心函数分析-release函数","children":[]}]},{"level":2,"title":"# Semaphore示例","slug":"semaphore示例","link":"#semaphore示例","children":[]},{"level":2,"title":"# 更深入理解","slug":"更深入理解","link":"#更深入理解","children":[{"level":3,"title":"# 单独使用Semaphore是不会使用到AQS的条件队列的","slug":"单独使用semaphore是不会使用到aqs的条件队列的","link":"#单独使用semaphore是不会使用到aqs的条件队列的","children":[]},{"level":3,"title":"# 场景问题","slug":"场景问题","link":"#场景问题","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":12.72,"words":3815},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 工具类之 Semaphore 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>Semaphore底层是基于AbstractQueuedSynchronizer来实现的。Semaphore称为计数信号量，它允许n个任务同时访问某个资源，可以将信号量看做是在向外分发使用资源的许可证，只有成功获取许可证，才能使用资源。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 工具类之 Semaphore 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3\\">带着BAT大厂的面试问题去理解</a></li>\\n<li>Semaphore源码分析\\n<ul>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\\">类的继承关系</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB\\">类的内部类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---sync%E7%B1%BB\\">类的内部类 - Sync类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---nonfairsync%E7%B1%BB\\">类的内部类 - NonfairSync类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---fairsync%E7%B1%BB\\">类的内部类 - FairSync类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\\">类的属性</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">类的构造函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90---acquire%E5%87%BD%E6%95%B0\\">核心函数分析 - acquire函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90---release%E5%87%BD%E6%95%B0\\">核心函数分析 - release函数</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#semaphore%E7%A4%BA%E4%BE%8B\\">Semaphore示例</a></li>\\n<li>更深入理解\\n<ul>\\n<li><a href=\\"#%E5%8D%95%E7%8B%AC%E4%BD%BF%E7%94%A8semaphore%E6%98%AF%E4%B8%8D%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%88%B0aqs%E7%9A%84%E6%9D%A1%E4%BB%B6%E9%98%9F%E5%88%97%E7%9A%84\\">单独使用Semaphore是不会使用到AQS的条件队列的</a></li>\\n<li>场景问题\\n<ul>\\n<li><a href=\\"#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8910%E4%B8%AA%E4%BB%A4%E7%89%8C11%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%97%B6%E5%90%84%E8%B0%83%E7%94%A81%E6%AC%A1acquire%E6%96%B9%E6%B3%95%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88\\">semaphore初始化有10个令牌，11个线程同时各调用1次acquire方法，会发生什么?</a></li>\\n<li><a href=\\"#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%8910%E4%B8%AA%E4%BB%A4%E7%89%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E9%87%8D%E5%A4%8D%E8%B0%83%E7%94%A811%E6%AC%A1acquire%E6%96%B9%E6%B3%95%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88\\">semaphore初始化有10个令牌，一个线程重复调用11次acquire方法，会发生什么?</a></li>\\n<li><a href=\\"#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%891%E4%B8%AA%E4%BB%A4%E7%89%8C1%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%80%E6%AC%A1acquire%E6%96%B9%E6%B3%95%E7%84%B6%E5%90%8E%E8%B0%83%E7%94%A8%E4%B8%A4%E6%AC%A1release%E6%96%B9%E6%B3%95%E4%B9%8B%E5%90%8E%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8acquire2%E6%96%B9%E6%B3%95%E6%AD%A4%E7%BA%BF%E7%A8%8B%E8%83%BD%E5%A4%9F%E8%8E%B7%E5%8F%96%E5%88%B0%E8%B6%B3%E5%A4%9F%E7%9A%84%E4%BB%A4%E7%89%8C%E5%B9%B6%E7%BB%A7%E7%BB%AD%E8%BF%90%E8%A1%8C%E5%90%97\\">semaphore初始化有1个令牌，1个线程调用一次acquire方法，然后调用两次release方法，之后另外一个线程调用acquire(2)方法，此线程能够获取到足够的令牌并继续运行吗?</a></li>\\n<li><a href=\\"#semaphore%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%892%E4%B8%AA%E4%BB%A4%E7%89%8C%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A81%E6%AC%A1release%E6%96%B9%E6%B3%95%E7%84%B6%E5%90%8E%E4%B8%80%E6%AC%A1%E6%80%A7%E8%8E%B7%E5%8F%963%E4%B8%AA%E4%BB%A4%E7%89%8C%E4%BC%9A%E8%8E%B7%E5%8F%96%E5%88%B0%E5%90%97\\">semaphore初始化有2个令牌，一个线程调用1次release方法，然后一次性获取3个令牌，会获取到吗?</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{t as comp,c as data};
