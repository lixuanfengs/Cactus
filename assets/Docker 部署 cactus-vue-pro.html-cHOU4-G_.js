import{_ as o,e as p,o as c,c as i,b as s,g as n,f as e,h as a}from"./app-B0y_8BAO.js";const r={},t=a(`<h2 id="docker-部署" tabindex="-1"><a class="header-anchor" href="#docker-部署"><span>Docker 部署</span></a></h2><p>本小节，讲解如何将前端 + 后端项目，<strong>使用 Docker 容器</strong>，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403160900773.png" alt="image-20240403160900773" tabindex="0" loading="lazy"><figcaption>image-20240403160900773</figcaption></figure><p>注意：服务器的 IP 地址。</p><ul><li>外网 IP：218.249.73.246</li><li>内网 IP：192.168.0.213</li></ul><p>下属所有涉及到 IP 的配置，需要替换成你自己的。</p><h2 id="_1-安装-docker" tabindex="-1"><a class="header-anchor" href="#_1-安装-docker"><span>1. 安装 Docker</span></a></h2><p>执行如下命令，进行 Docker 的安装。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">## ① 使用 DaoCloud 的 Docker 高速安装脚本。参考 https://get.daocloud.io/#install-docker</span></span>
<span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#D19A66;"> -sSL</span><span style="color:#98C379;"> https://get.daocloud.io/docker</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## ② 设置 DaoCloud 的 Docker 镜像中心，加速镜像的下载速度。参考 https://www.daocloud.io/mirror</span></span>
<span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#D19A66;"> -sSL</span><span style="color:#98C379;"> https://get.daocloud.io/daotools/set_mirror.sh</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">sh</span><span style="color:#D19A66;"> -s</span><span style="color:#98C379;"> http://f1361db2.m.daocloud.io</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## ③ 启动 Docker 服务</span></span>
<span class="line"><span style="color:#61AFEF;">systemctl</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),d=s("p",null,"离线安装 Docker",-1),y={href:"https://download.docker.com/linux/ubuntu/dists/",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"https://download.docker.com/linux/ubuntu/dists/",-1),u=s("code",null,"https://download.docker.com/linux/ubuntu/dists/",-1),m=a(`<li><p>Select your Ubuntu version in the list.<br> 在列表中选择您的 Ubuntu 版本。</p></li><li><p>Go to <code>pool/stable/</code> and select the applicable architecture (<code>amd64</code>, <code>armhf</code>, <code>arm64</code>, or <code>s390x</code>).<br> 转到 <code>pool/stable/</code> 并选择适用的体系结构（ <code>amd64</code> 、 <code>armhf</code> <code>arm64</code> 、 或 <code>s390x</code> ）。</p></li><li><p>Download the following <code>deb</code> files for the Docker Engine, CLI, containerd, and Docker Compose packages:<br> 下载适用于 Docker Engine、CLI、containerd 和 Docker Compose 包的以下 <code>deb</code> 文件：</p><ul><li><code>containerd.io_&lt;version&gt;_&lt;arch&gt;.deb</code></li><li><code>docker-ce_&lt;version&gt;_&lt;arch&gt;.deb</code></li><li><code>docker-ce-cli_&lt;version&gt;_&lt;arch&gt;.deb</code></li><li><code>docker-buildx-plugin_&lt;version&gt;_&lt;arch&gt;.deb</code></li><li><code>docker-compose-plugin_&lt;version&gt;_&lt;arch&gt;.deb</code></li></ul></li><li><p>Install the <code>.deb</code> packages. Update the paths in the following example to where you downloaded the Docker packages.<br> 安装 <code>.deb</code> 软件包。将以下示例中的路径更新为下载 Docker 包的位置。</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ sudo dpkg -i ./containerd.io_&lt;version&gt;_&lt;arch&gt;.deb \\</span></span>
<span class="line"><span style="color:#ABB2BF;">  ./docker-ce_&lt;version&gt;_&lt;arch&gt;.deb \\</span></span>
<span class="line"><span style="color:#ABB2BF;">  ./docker-ce-cli_&lt;version&gt;_&lt;arch&gt;.deb \\</span></span>
<span class="line"><span style="color:#ABB2BF;">  ./docker-buildx-plugin_&lt;version&gt;_&lt;arch&gt;.deb \\</span></span>
<span class="line"><span style="color:#ABB2BF;">  ./docker-compose-plugin_&lt;version&gt;_&lt;arch&gt;.deb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The Docker daemon starts automatically.<br> Docker 守护程序会自动启动。</p></li>`,4),b=a(`<h3 id="_1-1-idea-远程连接-docker" tabindex="-1"><a class="header-anchor" href="#_1-1-idea-远程连接-docker"><span>1.1 Idea 远程连接 Docker</span></a></h3><p>编辑 docker.service 文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vim</span><span style="color:#98C379;"> /lib/systemd/system/docker.service</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ExecStart 中添加：<code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[Unit]</span></span>
<span class="line"><span style="color:#E06C75;">Description</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">Docker</span><span style="color:#61AFEF;"> Application</span><span style="color:#98C379;"> Container</span><span style="color:#98C379;"> Engine</span></span>
<span class="line"><span style="color:#E06C75;">Documentation</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">https://docs.docker.com</span></span>
<span class="line"><span style="color:#E06C75;">After</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">network-online.target</span><span style="color:#61AFEF;"> docker.socket</span><span style="color:#98C379;"> firewalld.service</span><span style="color:#98C379;"> containerd.service</span><span style="color:#98C379;"> time-set.target</span></span>
<span class="line"><span style="color:#E06C75;">Wants</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">network-online.target</span><span style="color:#61AFEF;"> containerd.service</span></span>
<span class="line"><span style="color:#E06C75;">Requires</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">docker.socket</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Service]</span></span>
<span class="line"><span style="color:#E06C75;">Type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">notify</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># the default is not to use systemd for cgroups because the delegate issues still</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># exists and systemd currently does not support the cgroup feature set required</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># for containers run by docker</span></span>
<span class="line"><span style="color:#E06C75;">ExecStart</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">/usr/bin/dockerd</span><span style="color:#61AFEF;"> -H</span><span style="color:#98C379;"> fd://</span><span style="color:#D19A66;"> -H</span><span style="color:#98C379;"> tcp://1.0.0.0:2375</span><span style="color:#D19A66;"> -H</span><span style="color:#98C379;"> unix:///var/run/docker.sock</span><span style="color:#D19A66;"> --containerd=/run/containerd/containerd.sock</span></span>
<span class="line"><span style="color:#E06C75;">ExecReload</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">/bin/kill</span><span style="color:#61AFEF;"> -s</span><span style="color:#98C379;"> HUP</span><span style="color:#E06C75;"> $MAINPID</span></span>
<span class="line"><span style="color:#E06C75;">TimeoutStartSec</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">0</span></span>
<span class="line"><span style="color:#E06C75;">RestartSec</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">2</span></span>
<span class="line"><span style="color:#E06C75;">Restart</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">always</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Note that StartLimit* options were moved from &quot;Service&quot; to &quot;Unit&quot; in systemd 229.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># to make them work for either version of systemd.</span></span>
<span class="line"><span style="color:#E06C75;">StartLimitBurst</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># this option work for either version of systemd.</span></span>
<span class="line"><span style="color:#E06C75;">StartLimitInterval</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">60s</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span>
<span class="line"><span style="color:#E06C75;">LimitNPROC</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">infinity</span></span>
<span class="line"><span style="color:#E06C75;">LimitCORE</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">infinity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Comment TasksMax if your systemd version does not support it.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Only systemd 226 and above support this option.</span></span>
<span class="line"><span style="color:#E06C75;">TasksMax</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">infinity</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span>
<span class="line"><span style="color:#E06C75;">Delegate</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">yes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># kill only the docker process, not all processes in the cgroup</span></span>
<span class="line"><span style="color:#E06C75;">KillMode</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">process</span></span>
<span class="line"><span style="color:#E06C75;">OOMScoreAdjust</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">-500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[Install]</span></span>
<span class="line"><span style="color:#E06C75;">WantedBy</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">multi-user.target</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载 systemd 管理器的配置并重启 Docker</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#加载 systemd 管理器的配置</span></span>
<span class="line"><span style="color:#61AFEF;">systemctl</span><span style="color:#98C379;"> daemon-reload</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 重启</span></span>
<span class="line"><span style="color:#61AFEF;">systemctl</span><span style="color:#98C379;"> restart</span><span style="color:#98C379;"> docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 测试</span></span>
<span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#98C379;"> http://127.0.0.1:2375/info</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-配置-mysql" tabindex="-1"><a class="header-anchor" href="#_2-配置-mysql"><span>2. 配置 MySQL</span></a></h2><h3 id="_2-1-安装-mysql-可选" tabindex="-1"><a class="header-anchor" href="#_2-1-安装-mysql-可选"><span>2.1 安装 MySQL（可选）</span></a></h3><p>友情提示：使用 Docker 安装 MySQL 是可选步骤，也可以直接安装 MySQL，或者购买 MySQL 云服务。</p><p>① 执行如下命令，使用 Docker 启动 MySQL 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -v</span><span style="color:#98C379;"> /work/mysql/:/var/lib/mysql</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-p </span><span style="color:#98C379;">3306:3306</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> MYSQL_ROOT_PASSWORD=</span><span style="color:#D19A66;">123456</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">--restart=always </span><span style="color:#D19A66;">--name</span><span style="color:#98C379;"> mysql</span><span style="color:#D19A66;"> -d</span><span style="color:#98C379;"> mysql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数据库文件，挂载到服务器的的 <code>/work/mysql/</code> 目录下</li><li>端口是 3306，密码是 123456</li></ul><p>② 执行 <code>ls /work/mysql</code> 命令，查看 <code>/work/mysql/</code> 目录的数据库文件。</p><figure><img src="https://doc.iocoder.cn/img/Docker部署/03.png" alt="数据库文件" tabindex="0" loading="lazy"><figcaption>数据库文件</figcaption></figure><h3 id="_2-2-导入-sql-脚本" tabindex="-1"><a class="header-anchor" href="#_2-2-导入-sql-脚本"><span>2.2 导入 SQL 脚本</span></a></h3><p>创建一个名字为 <code>cactus-vue-pro</code> 数据库，执行数据库对应的 <code>sql</code> .</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161116734.png" alt="image-20240403161116734" tabindex="0" loading="lazy"><figcaption>image-20240403161116734</figcaption></figure><h2 id="_3-配置-redis" tabindex="-1"><a class="header-anchor" href="#_3-配置-redis"><span>3. 配置 Redis</span></a></h2><p>友情提示：使用 Docker 安装 Redis 是可选步骤，也可以直接安装 Redis，或者购买 Redis 云服务。</p><p>执行如下命令，使用 Docker 启动 Redis 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> redis</span><span style="color:#D19A66;"> --restart=always</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 6379:6379</span><span style="color:#98C379;"> redis:5.0.14-alpine</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>端口是 6379，密码未设置</li></ul><h2 id="_4-部署后端" tabindex="-1"><a class="header-anchor" href="#_4-部署后端"><span>4. 部署后端</span></a></h2><h3 id="_4-1-修改配置" tabindex="-1"><a class="header-anchor" href="#_4-1-修改配置"><span>4.1 修改配置</span></a></h3><p>后端 dev 开发环境对应的是 <code>application-dev.yaml</code> 配置文件，主要是修改 MySQL 和 Redis 为你的地址。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161238610.png" alt="image-20240403161238610" tabindex="0" loading="lazy"><figcaption>image-20240403161238610</figcaption></figure><h3 id="_4-2-编译后端" tabindex="-1"><a class="header-anchor" href="#_4-2-编译后端"><span>4.2 编译后端</span></a></h3><p>在项目的根目录下，执行 <code>mvn clean package -Dmaven.test.skip=true</code> 命令，编译后端项目，构建出它的 Jar 包。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161319457.png" alt="image-20240403161319457" tabindex="0" loading="lazy"><figcaption>image-20240403161319457</figcaption></figure><p>疑问：-Dmaven.test.skip=true 是什么意思？</p><p>跳过单元测试的执行。如果你项目的单元测试写的不错，建议使用 <code>mvn clean package</code> 命令，执行单元测试，保证交付的质量。</p><h3 id="_4-3-上传-jar-包" tabindex="-1"><a class="header-anchor" href="#_4-3-上传-jar-包"><span>4.3 上传 Jar 包</span></a></h3><p>在 Linux 服务器上创建 <code>/sg-work/cactus-server</code> 目录，使用 <code>scp</code> 命令或者 FTP 工具，将 <code>yudao-server.jar</code> 上传到该目录下。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161407944.png" alt="image-20240403161407944" tabindex="0" loading="lazy"><figcaption>image-20240403161407944</figcaption></figure><h3 id="_4-4-构建镜像" tabindex="-1"><a class="header-anchor" href="#_4-4-构建镜像"><span>4.4 构建镜像</span></a></h3><p>① 在 <code>/work/projects/yudao-server</code> 目录下，新建 Dockerfile文件，用于制作后端项目的 Docker 镜像。编写内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">## AdoptOpenJDK 停止发布 OpenJDK 二进制，而 Eclipse Temurin 是它的延伸，提供更好的稳定性</span></span>
<span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#98C379;"> eclipse-temurin:17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 创建目录，并使用它作为工作目录</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> mkdir</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> /cactus-server</span></span>
<span class="line"><span style="color:#61AFEF;">WORKDIR</span><span style="color:#98C379;"> /cactus-server</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 将后端项目的 Jar 文件，复制到镜像中</span></span>
<span class="line"><span style="color:#61AFEF;">COPY</span><span style="color:#98C379;"> cactus-server.jar</span><span style="color:#98C379;"> app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 设置 TZ 时区</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 设置 JAVA_OPTS 环境变量，可通过 docker run -e &quot;JAVA_OPTS=&quot; 进行覆盖</span></span>
<span class="line"><span style="color:#61AFEF;">ENV</span><span style="color:#98C379;"> TZ=Asia/Shanghai</span><span style="color:#98C379;"> JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 暴露后端项目的 48080 端口</span></span>
<span class="line"><span style="color:#61AFEF;">EXPOSE</span><span style="color:#D19A66;"> 48080</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 启动后端项目</span></span>
<span class="line"><span style="color:#61AFEF;">ENTRYPOINT</span><span style="color:#98C379;"> java</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">JAVA_OPTS</span><span style="color:#ABB2BF;">} </span><span style="color:#D19A66;">-Djava.security.egd=file:/dev/./urandom</span><span style="color:#D19A66;"> -jar</span><span style="color:#98C379;"> app.jar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 执行如下命令，构建名字为 <code>yudao-server</code> 的 Docker 镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> /sg-work/cactus-server</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> -t</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> .</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403162242028.png" alt="image-20240403162242028" tabindex="0" loading="lazy"><figcaption>image-20240403162242028</figcaption></figure><p>③ 在 <code>/sg-work/cactus-server</code> 目录下，新建 Shell 脚本 <code>deploy.sh</code>，使用 Docker 启动后端项目。编写内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#D19A66;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 第一步：删除可能启动的老 cactus-server 容器</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;开始删除 cactus-server 容器&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> stop</span><span style="color:#98C379;"> cactus-server</span><span style="color:#ABB2BF;"> || </span><span style="color:#56B6C2;">true</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> rm</span><span style="color:#98C379;"> cactus-server</span><span style="color:#ABB2BF;"> || </span><span style="color:#56B6C2;">true</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;完成删除 cactus-server 容器&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 第二步：启动新的 cactus-server 容器</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;开始启动 cactus-server 容器&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">--name </span><span style="color:#98C379;">cactus-server</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-p </span><span style="color:#98C379;">48080:48080</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#-e &quot;SPRING_PROFILES_ACTIVE=dev&quot; \\</span></span>
<span class="line"><span style="color:#61AFEF;">-v</span><span style="color:#98C379;"> /sg-work/cactus-server:/root/logs/</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">cactus-server</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;正在启动 cactus-server 容器中，需要等待 60 秒左右&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">## 第三步：检测 cactus-server 是否成功运行</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;正在检测 cactus-server 是否成功运行...&quot;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;"> in</span><span style="color:#ABB2BF;"> {</span><span style="color:#61AFEF;">1..60}</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#61AFEF;"> docker</span><span style="color:#98C379;"> logs</span><span style="color:#98C379;"> cactus-server</span><span style="color:#ABB2BF;"> 2&gt;&amp;1 | </span><span style="color:#61AFEF;">grep</span><span style="color:#D19A66;"> -q</span><span style="color:#98C379;"> &#39;Started CactusServerApplication&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">        echo</span><span style="color:#98C379;"> &quot;cactus-server 成功启动！&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">        exit</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">    else</span></span>
<span class="line"><span style="color:#56B6C2;">        echo</span><span style="color:#98C379;"> &quot;等待 cactus-server 启动，已等待 </span><span style="color:#E06C75;">$i</span><span style="color:#98C379;"> 秒...&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">        sleep</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">    fi</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;cactus-server 启动失败，请检查日志。&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">exit</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>应用日志文件，挂载到服务器的的 <code>/sg-work/cactus-server</code> 目录下</li><li>通过 <code>SPRING_PROFILES_ACTIVE</code> 设置为 <code>dev</code> 开发环境</li></ul><h3 id="_4-5-启动后端" tabindex="-1"><a class="header-anchor" href="#_4-5-启动后端"><span>4.5 启动后端</span></a></h3><p>① 执行 <code>sh deploy.sh</code> 命令，使用 Docker 启动后端项目。日志如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">开始删除</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 容器</span></span>
<span class="line"><span style="color:#61AFEF;">Error</span><span style="color:#98C379;"> response</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> daemon:</span><span style="color:#98C379;"> No</span><span style="color:#98C379;"> such</span><span style="color:#98C379;"> container:</span><span style="color:#98C379;"> cactus-server</span></span>
<span class="line"><span style="color:#61AFEF;">Error</span><span style="color:#98C379;"> response</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> daemon:</span><span style="color:#98C379;"> No</span><span style="color:#98C379;"> such</span><span style="color:#98C379;"> container:</span><span style="color:#98C379;"> cactus-server</span></span>
<span class="line"><span style="color:#61AFEF;">完成删除</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 容器</span></span>
<span class="line"><span style="color:#61AFEF;">开始启动</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 容器</span></span>
<span class="line"><span style="color:#61AFEF;">fd107c6bef193fff323c76a86f9354bca0d0c5e3d8ee345a34f6cb783bd4479b</span></span>
<span class="line"><span style="color:#61AFEF;">正在启动</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 容器中，需要等待</span><span style="color:#D19A66;"> 60</span><span style="color:#98C379;"> 秒左右</span></span>
<span class="line"><span style="color:#61AFEF;">正在检测</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 是否成功运行...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 2</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 3</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 4</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 5</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 6</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 7</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 8</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 9</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 10</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 11</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 12</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 13</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 14</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 15</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 16</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 17</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 18</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 19</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 20</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 21</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 22</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 23</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 24</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 25</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 26</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 27</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 28</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 29</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 30</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 31</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 32</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 33</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 34</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 35</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 36</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 37</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 38</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">等待</span><span style="color:#98C379;"> cactus-server</span><span style="color:#98C379;"> 启动，已等待</span><span style="color:#D19A66;"> 39</span><span style="color:#98C379;"> 秒...</span></span>
<span class="line"><span style="color:#61AFEF;">cactus-server</span><span style="color:#98C379;"> 成功启动！</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 执行 <code>docker logs cactus-server</code> 命令，查看启动日志。看到如下内容，说明启动完成：</p><p>友情提示：如果日志比较多，可以使用 grep 进行过滤。</p><p>例如说：使用 <code>docker logs cactus-server | grep 48080</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">2022-04-15</span><span style="color:#98C379;"> 00:34:19.647</span><span style="color:#98C379;">  INFO</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> ---</span><span style="color:#ABB2BF;"> [main] [TID: N/A] o.s.b.w.embedded.tomcat.TomcatWebServer  </span><span style="color:#56B6C2;">:</span><span style="color:#ABB2BF;"> Tomcat initialized with port(</span><span style="color:#61AFEF;">s</span><span style="color:#ABB2BF;">): 48080 (</span><span style="color:#61AFEF;">http</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-部署前端" tabindex="-1"><a class="header-anchor" href="#_5-部署前端"><span>5. 部署前端</span></a></h2><h3 id="_5-1-修改配置" tabindex="-1"><a class="header-anchor" href="#_5-1-修改配置"><span>5.1 修改配置</span></a></h3><p>前端 dev 开发环境对应的是 <code>.env.dev</code>配置文件，主要是修改 <code>VUE_APP_BASE_API</code> 为你的后端项目的访问地址。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403164123099.png" alt="image-20240403164123099" tabindex="0" loading="lazy"><figcaption>image-20240403164123099</figcaption></figure>`,56),g={id:"_5-2-编译前端",tabindex:"-1"},h={class:"header-anchor",href:"#_5-2-编译前端"},C={href:"https://doc.iocoder.cn/deployment-docker/#_5-2-%E7%BC%96%E8%AF%91%E5%89%8D%E7%AB%AF",target:"_blank",rel:"noopener noreferrer"},F=a(`<p>友情提示：</p><p>下文的 <code>cactus-ui-admin-vue3</code> 目录，指的是你克隆前端项目后的地址！</p><p>在 <code>cactus-ui-admin-vue3</code> 目录下，执行 <code>npm run build:dev</code> 命令，编译前端项目，构建出它的 <code>dist</code> 文件，里面是 HTML、CSS、JavaScript 等静态文件。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403164849000.png" alt="image-20240403164849000" tabindex="0" loading="lazy"><figcaption>image-20240403164849000</figcaption></figure><p>如下想要打包其它环境，可使用如下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build:prod</span><span style="color:#7F848E;font-style:italic;"> ## 打包 prod 生产环境</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build:stage</span><span style="color:#7F848E;font-style:italic;"> ## 打包 stage 预发布环境</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其它高级参数说明【可暂时不看】：</p><p>① <code>VUE_APP_APP_NAME</code>：二级部署路径，默认为 <code>/</code> 根目录，一般不用修改。</p><p>② <code>mode</code>：前端路由的模式，默认采用 <code>history</code> 路由，一般不用修改。可以通过修改 <code>router/index.js</code>来设置为 <code>hash</code> 路由，示例如下：</p><figure><img src="https://doc.iocoder.cn/img/Linux部署/17.png" alt=" 参数" tabindex="0" loading="lazy"><figcaption> 参数</figcaption></figure><h3 id="_5-3-上传-dist-文件" tabindex="-1"><a class="header-anchor" href="#_5-3-上传-dist-文件"><span>5.3 上传 <code>dist</code> 文件</span></a></h3><p>在 Linux 服务器上创建 <code>/sg-work/nginx/html/cactus-ui-admin-vue3</code> 目录，使用 <code>scp</code> 命令或者 FTP 工具，将 <code>dist</code> 上传到 <code>/sg-work/nginx/html</code> 目录下。如下图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240403170912822.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-4-启动前端" tabindex="-1"><a class="header-anchor" href="#_5-4-启动前端"><span>5.4 启动前端？</span></a></h3><p>前端无法直接启动，而是通过 Nginx 转发读取 <code>/sg-work/nginx/html/cactus-ui-admin-vue3</code> 目录的静态文件。</p><h2 id="_6-配置-nginx" tabindex="-1"><a class="header-anchor" href="#_6-配置-nginx"><span>6. 配置 Nginx</span></a></h2><h3 id="_6-1-安装-nginx" tabindex="-1"><a class="header-anchor" href="#_6-1-安装-nginx"><span>6.1 安装 Nginx</span></a></h3><p>Nginx 挂载到服务器的目录：</p><ul><li><code>/work/nginx/conf.d</code> 用于存放配置文件</li><li><code>/work/nginx/html</code> 用于存放网页文件</li><li><code>/work/nginx/logs</code> 用于存放日志</li><li><code>/work/nginx/cert</code> 用于存放 HTTPS 证书</li></ul><p>① 创建 <code>/work/nginx</code> 目录，并在该目录下新建 <code>nginx.conf</code> 文件，避免稍后安装 Nginx 报错。内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">user</span><span style="color:#98C379;">  nginx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">worker_processes</span><span style="color:#D19A66;">  1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">events</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    worker_connections</span><span style="color:#D19A66;">  1024</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">error_log</span><span style="color:#98C379;">  /var/log/nginx/error.log</span><span style="color:#98C379;"> warn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">pid</span><span style="color:#98C379;">        /var/run/nginx.pid</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">http</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    include</span><span style="color:#98C379;">       /etc/nginx/mime.types</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    default_type</span><span style="color:#98C379;">  application/octet-stream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    sendfile</span><span style="color:#98C379;">        on</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    keepalive_timeout</span><span style="color:#D19A66;">  65</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    log_format</span><span style="color:#98C379;">  main</span><span style="color:#98C379;">  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="color:#61AFEF;">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="color:#61AFEF;">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#    access_log  /var/log/nginx/access.log  main;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    gzip</span><span style="color:#98C379;"> on</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    gzip_min_length</span><span style="color:#98C379;"> 1k</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;"># 设置允许压缩的页面最小字节数</span></span>
<span class="line"><span style="color:#61AFEF;">    gzip_buffers</span><span style="color:#D19A66;"> 4</span><span style="color:#98C379;"> 16k</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;"># 用来存储 gzip 的压缩结果</span></span>
<span class="line"><span style="color:#61AFEF;">    gzip_http_version</span><span style="color:#D19A66;"> 1.1</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;"># 识别 HTTP 协议版本</span></span>
<span class="line"><span style="color:#61AFEF;">    gzip_comp_level</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;"># 设置 gzip 的压缩比 1-9。1 压缩比最小但最快，而 9 相反</span></span>
<span class="line"><span style="color:#61AFEF;">    gzip_types</span><span style="color:#98C379;"> text/plain</span><span style="color:#98C379;"> application/x-javascript</span><span style="color:#98C379;"> text/css</span><span style="color:#98C379;"> application/xml</span><span style="color:#98C379;"> application/javascript</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;"># 指定压缩类型</span></span>
<span class="line"><span style="color:#61AFEF;">    gzip_proxied</span><span style="color:#98C379;"> any</span><span style="color:#ABB2BF;">;       </span><span style="color:#7F848E;font-style:italic;"># 无论后端服务器的 headers 头返回什么信息，都无条件启用压缩</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    include</span><span style="color:#98C379;"> /etc/nginx/conf.d/</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">.conf</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">## 加载该目录下的其它 Nginx 配置文件</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 执行如下命令，使用 Docker 启动 Nginx 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -d</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">--name </span><span style="color:#98C379;">nginx</span><span style="color:#D19A66;"> --restart</span><span style="color:#98C379;"> always</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-p </span><span style="color:#98C379;">80:80</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> 443:443</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-e </span><span style="color:#98C379;">&quot;TZ=Asia/Shanghai&quot;</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-v </span><span style="color:#98C379;">/sg-work/nginx/nginx.conf:/etc/nginx/nginx.conf</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-v </span><span style="color:#98C379;">/sg-work/nginx/conf.d:/etc/nginx/conf.d</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-v </span><span style="color:#98C379;">/sg-work/nginx/logs:/var/log/nginx</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-v </span><span style="color:#98C379;">/sg-work/nginx/cert:/etc/nginx/cert</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-v </span><span style="color:#98C379;">/sg-work/nginx/html:/usr/share/nginx/html</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">nginx:alpine</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 执行 <code>docker ps</code> 命令，查看到 Nginx 容器的状态是 <code>UP</code> 的。</p><hr><p>下面，来看两种 Nginx 的配置，分别满足服务器 IP、独立域名的不同场景。</p><h3 id="_6-2-方式一-服务器-ip-访问" tabindex="-1"><a class="header-anchor" href="#_6-2-方式一-服务器-ip-访问"><span>6.2 方式一：服务器 IP 访问</span></a></h3><p>① 在 <code>/sg-work/nginx/conf.d</code> 目录下，创建 <code>cactus-vue-pro.conf</code>，内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">server</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    listen</span><span style="color:#D19A66;">       80</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    server_name</span><span style="color:#D19A66;">  218.249.73.249</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">## 重要！！！修改成你的外网 IP/域名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    location</span><span style="color:#98C379;"> /</span><span style="color:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;"> ## 前端项目</span></span>
<span class="line"><span style="color:#61AFEF;">        root</span><span style="color:#98C379;">   /usr/share/nginx/html/cactus-ui-admin-vue3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        index</span><span style="color:#98C379;">  index.html</span><span style="color:#98C379;"> index.htm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        try_files</span><span style="color:#E06C75;"> $uri</span><span style="color:#E06C75;"> $uri</span><span style="color:#98C379;">/</span><span style="color:#98C379;"> /index.html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    location</span><span style="color:#98C379;"> /admin-api/</span><span style="color:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;"> ## 后端项目 - 管理后台</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_pass</span><span style="color:#98C379;"> http://192.168.1.20:48080/admin-api/</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> Host</span><span style="color:#E06C75;"> $http_host</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> X-Real-IP</span><span style="color:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> REMOTE-HOST</span><span style="color:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    location</span><span style="color:#98C379;"> /app-api/</span><span style="color:#98C379;"> {</span><span style="color:#7F848E;font-style:italic;"> ## 后端项目 - 用户 App</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_pass</span><span style="color:#98C379;"> http://192.168.1.20:48080/app-api/</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">## 重要！！！proxy_pass 需要设置为后端项目所在服务器的 IP</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> Host</span><span style="color:#E06C75;"> $http_host</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> X-Real-IP</span><span style="color:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> REMOTE-HOST</span><span style="color:#E06C75;"> $remote_addr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        proxy_set_header</span><span style="color:#98C379;"> X-Forwarded-For</span><span style="color:#E06C75;"> $proxy_add_x_forwarded_for</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function A(B,E){const l=p("ExternalLinkIcon");return c(),i("div",null,[t,s("blockquote",null,[d,s("ol",null,[s("li",null,[s("p",null,[n("Go to "),s("a",y,[v,e(l)]),n(". 转到 "),u,n(" 。")])]),m])]),b,s("h3",g,[s("a",h,[s("span",null,[s("a",C,[n("#"),e(l)]),n("5.2 编译前端")])])]),F])}const k=o(r,[["render",A],["__file","Docker 部署 cactus-vue-pro.html.vue"]]),_=JSON.parse(`{"path":"/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Docker%20%E9%83%A8%E7%BD%B2%20cactus-vue-pro.html","title":"Docker 部署 cactus-vue-pro","lang":"zh-CN","frontmatter":{"title":"Docker 部署 cactus-vue-pro","subtitle":"Docker 部署 cactus-vue-pro","date":"2024-04-03T15:36:20.000Z","category":["cactus-vue-pro"],"tag":["cactus-vue-pro"],"order":3,"description":"Docker 部署 本小节，讲解如何将前端 + 后端项目，使用 Docker 容器，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示： image-20240403160900773image-20240403160900773 注意：服务器的 IP 地址。 外网 IP：218.249.73.246 内网 IP：192.168.0.2...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/tutorial/%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2/Docker%20%E9%83%A8%E7%BD%B2%20cactus-vue-pro.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Docker 部署 cactus-vue-pro"}],["meta",{"property":"og:description","content":"Docker 部署 本小节，讲解如何将前端 + 后端项目，使用 Docker 容器，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示： image-20240403160900773image-20240403160900773 注意：服务器的 IP 地址。 外网 IP：218.249.73.246 内网 IP：192.168.0.2..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403160900773.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-09T07:50:14.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"cactus-vue-pro"}],["meta",{"property":"article:published_time","content":"2024-04-03T15:36:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-09T07:50:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 部署 cactus-vue-pro\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403160900773.png\\",\\"https://doc.iocoder.cn/img/Docker%E9%83%A8%E7%BD%B2/03.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161116734.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161238610.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161319457.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403161407944.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403162242028.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403164123099.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403164849000.png\\",\\"https://doc.iocoder.cn/img/Linux%E9%83%A8%E7%BD%B2/17.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403170912822.png\\"],\\"datePublished\\":\\"2024-04-03T15:36:20.000Z\\",\\"dateModified\\":\\"2024-07-09T07:50:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"Docker 部署","slug":"docker-部署","link":"#docker-部署","children":[]},{"level":2,"title":"1. 安装 Docker","slug":"_1-安装-docker","link":"#_1-安装-docker","children":[{"level":3,"title":"1.1 Idea 远程连接 Docker","slug":"_1-1-idea-远程连接-docker","link":"#_1-1-idea-远程连接-docker","children":[]}]},{"level":2,"title":"2. 配置 MySQL","slug":"_2-配置-mysql","link":"#_2-配置-mysql","children":[{"level":3,"title":"2.1 安装 MySQL（可选）","slug":"_2-1-安装-mysql-可选","link":"#_2-1-安装-mysql-可选","children":[]},{"level":3,"title":"2.2 导入 SQL 脚本","slug":"_2-2-导入-sql-脚本","link":"#_2-2-导入-sql-脚本","children":[]}]},{"level":2,"title":"3. 配置 Redis","slug":"_3-配置-redis","link":"#_3-配置-redis","children":[]},{"level":2,"title":"4. 部署后端","slug":"_4-部署后端","link":"#_4-部署后端","children":[{"level":3,"title":"4.1 修改配置","slug":"_4-1-修改配置","link":"#_4-1-修改配置","children":[]},{"level":3,"title":"4.2 编译后端","slug":"_4-2-编译后端","link":"#_4-2-编译后端","children":[]},{"level":3,"title":"4.3 上传 Jar 包","slug":"_4-3-上传-jar-包","link":"#_4-3-上传-jar-包","children":[]},{"level":3,"title":"4.4 构建镜像","slug":"_4-4-构建镜像","link":"#_4-4-构建镜像","children":[]},{"level":3,"title":"4.5 启动后端","slug":"_4-5-启动后端","link":"#_4-5-启动后端","children":[]}]},{"level":2,"title":"5. 部署前端","slug":"_5-部署前端","link":"#_5-部署前端","children":[{"level":3,"title":"5.1 修改配置","slug":"_5-1-修改配置","link":"#_5-1-修改配置","children":[]},{"level":3,"title":"#5.2 编译前端","slug":"_5-2-编译前端","link":"#_5-2-编译前端","children":[]},{"level":3,"title":"5.3 上传 dist 文件","slug":"_5-3-上传-dist-文件","link":"#_5-3-上传-dist-文件","children":[]},{"level":3,"title":"5.4 启动前端？","slug":"_5-4-启动前端","link":"#_5-4-启动前端","children":[]}]},{"level":2,"title":"6. 配置 Nginx","slug":"_6-配置-nginx","link":"#_6-配置-nginx","children":[{"level":3,"title":"6.1 安装 Nginx","slug":"_6-1-安装-nginx","link":"#_6-1-安装-nginx","children":[]},{"level":3,"title":"6.2 方式一：服务器 IP 访问","slug":"_6-2-方式一-服务器-ip-访问","link":"#_6-2-方式一-服务器-ip-访问","children":[]}]}],"git":{"createdTime":1712818796000,"updatedTime":1720511414000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":4}]},"readingTime":{"minutes":10.39,"words":3118},"filePathRelative":"tutorial/系统开发部署/Docker 部署 cactus-vue-pro.md","localizedDate":"2024年4月3日","excerpt":"<h2>Docker 部署</h2>\\n<p>本小节，讲解如何将前端 + 后端项目，<strong>使用 Docker 容器</strong>，部署到 dev 开发环境下的一台 Linux 服务器上。如下图所示：</p>\\n<figure><img src=\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240403160900773.png\\" alt=\\"image-20240403160900773\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240403160900773</figcaption></figure>","autoDesc":true}`);export{k as comp,_ as data};
