import{_ as s,o as a,c as n,h as l}from"./app-D8-J_3VU.js";const e={},p=l(`<blockquote><p>final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。</p></blockquote><ul><li>关键字 final 解析 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3final">带着BAT大厂的面试问题去理解final</a></li><li>final基础使用 <ul><li><a href="#%E4%BF%AE%E9%A5%B0%E7%B1%BB">修饰类</a></li><li>修饰方法 <ul><li><a href="#private-final">private final</a></li><li><a href="#final%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E8%BD%BD%E7%9A%84">final方法是可以被重载的</a></li></ul></li><li><a href="#%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0">修饰参数</a></li><li>修饰变量 <ul><li><a href="#%E6%89%80%E6%9C%89%E7%9A%84final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%97%E6%AE%B5%E9%83%BD%E6%98%AF%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E5%90%97">所有的final修饰的字段都是编译期常量吗?</a></li><li><a href="#static-final">static final</a></li><li><a href="#blank-final">blank final</a></li></ul></li></ul></li><li>final域重排序规则 <ul><li>final域为基本类型 <ul><li><a href="#%E5%86%99final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">写final域重排序规则</a></li><li><a href="#%E8%AF%BBfinal%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">读final域重排序规则</a></li></ul></li><li>final域为引用类型 <ul><li><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E5%86%99%E6%93%8D%E4%BD%9C">对final修饰的对象的成员域写操作</a></li><li><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E8%AF%BB%E6%93%8D%E4%BD%9C">对final修饰的对象的成员域读操作</a></li></ul></li><li><a href="#%E5%85%B3%E4%BA%8Efinal%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%BB%E7%BB%93">关于final重排序的总结</a></li></ul></li><li>final再深入理解 <ul><li><a href="#final%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">final的实现原理</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88final%E5%BC%95%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BB%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E6%BA%A2%E5%87%BA">为什么final引用不能从构造函数中“溢出”</a></li><li><a href="#%E4%BD%BF%E7%94%A8-final-%E7%9A%84%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B1%80%E9%99%90%E6%80%A7">使用 final 的限制条件和局限性</a></li><li><a href="#%E5%86%8D%E6%80%9D%E8%80%83%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%8E%B0%E8%B1%A1">再思考一个有趣的现象：</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解final" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解final"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3final">#</a> 带着BAT大厂的面试问题去理解final</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解final。@pdai</p><ul><li>所有的final修饰的字段都是编译期常量吗?</li><li>如何理解private所修饰的方法是隐式的final?</li><li>说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做?</li><li>final方法可以被重载吗? 可以</li><li>父类的final方法能不能够被子类重写? 不可以</li><li>说说final域重排序规则?</li><li>说说final的原理?</li><li>使用 final 的限制条件和局限性?</li><li>看本文最后的一个思考题</li></ul><h2 id="final基础使用" tabindex="-1"><a class="header-anchor" href="#final基础使用"><span><a href="#final%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8">#</a> final基础使用</span></a></h2><h3 id="修饰类" tabindex="-1"><a class="header-anchor" href="#修饰类"><span><a href="#%E4%BF%AE%E9%A5%B0%E7%B1%BB">#</a> 修饰类</span></a></h3><p>当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。</p><p>注意：final类中的所有方法都隐式为final，因为无法覆盖他们，所以在final类中给任何方法添加final关键字是没有任何意义的。</p><blockquote><p>这里顺道说说final类型的类如何拓展? 比如String是final类型，我们想写个MyString复用所有String中方法，同时增加一个新的toMyString()的方法，应该如何做? @pdai</p></blockquote><p>设计模式中最重要的两种关系，一种是继承/实现；另外一种是组合关系。所以当遇到不能用继承的(final修饰的类),应该考虑用组合, 如下代码大概写个组合实现的意思：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* @pdai</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyString</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> innerString</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...init &amp; other methods</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 支持老的方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> length</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> innerString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 通过innerString调用老的方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 添加新方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toMyString</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修饰方法" tabindex="-1"><a class="header-anchor" href="#修饰方法"><span><a href="#%E4%BF%AE%E9%A5%B0%E6%96%B9%E6%B3%95">#</a> 修饰方法</span></a></h3><blockquote><p>常规的使用就不说了，这里说下:</p></blockquote><ul><li>private 方法是隐式的final</li><li>final方法是可以被重载的</li></ul><h4 id="private-final" tabindex="-1"><a class="header-anchor" href="#private-final"><span><a href="#private-final">#</a> private final</span></a></h4><p>类中所有private方法都隐式地指定为final的，由于无法取用private方法，所以也就不能覆盖它。可以对private方法增添final关键字，但这样做并没有什么好处。看下下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Base</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Son</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Base</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Son</span><span style="color:#E06C75;"> son</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Son</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Base</span><span style="color:#E06C75;"> father</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> son;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //father.test();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Base和Son都有方法test(),但是这并不是一种覆盖，因为private所修饰的方法是隐式的final，也就是无法被继承，所以更不用说是覆盖了，在Son中的test()方法不过是属于Son的新成员罢了，Son进行向上转型得到father，但是father.test()是不可执行的，因为Base中的test方法是private的，无法被访问到。</p><h4 id="final方法是可以被重载的" tabindex="-1"><a class="header-anchor" href="#final方法是可以被重载的"><span><a href="#final%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E8%BD%BD%E7%9A%84">#</a> final方法是可以被重载的</span></a></h4><p>我们知道父类的final方法是不能够被子类重写的，那么final方法可以被重载吗? 答案是可以的，下面代码是正确的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FinalExampleParent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修饰参数" tabindex="-1"><a class="header-anchor" href="#修饰参数"><span><a href="#%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0">#</a> 修饰参数</span></a></h3><p>Java允许在参数列表中以声明的方式将参数指明为final，这意味这你无法在方法中更改参数引用所指向的对象。这个特性主要用来向匿名内部类传递数据。</p><h3 id="修饰变量" tabindex="-1"><a class="header-anchor" href="#修饰变量"><span><a href="#%E4%BF%AE%E9%A5%B0%E5%8F%98%E9%87%8F">#</a> 修饰变量</span></a></h3><blockquote><p>常规的用法比较简单，这里通过下面三个问题进一步说明。</p></blockquote><h4 id="所有的final修饰的字段都是编译期常量吗" tabindex="-1"><a class="header-anchor" href="#所有的final修饰的字段都是编译期常量吗"><span><a href="#%E6%89%80%E6%9C%89%E7%9A%84final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%97%E6%AE%B5%E9%83%BD%E6%98%AF%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E5%90%97">#</a> 所有的final修饰的字段都是编译期常量吗?</span></a></h4><p>现在来看编译期常量和非编译期常量, 如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //编译期常量</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> J </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;">[] a </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> {</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#E06C75;">}</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //非编译期常量</span></span>
<span class="line"><span style="color:#E5C07B;">    Random</span><span style="color:#E06C75;"> r </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextInt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>k的值由随机数对象决定，所以不是所有的final修饰的字段都是编译期常量，只是k的值在被初始化后无法被更改。</p><h4 id="static-final" tabindex="-1"><a class="header-anchor" href="#static-final"><span><a href="#static-final">#</a> static final</span></a></h4><p>一个既是static又是final 的字段只占据一段不能改变的存储空间，它必须在定义的时候进行赋值，否则编译器将不予通过。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.Random</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E5C07B;"> Random</span><span style="color:#E06C75;"> r </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> k2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Test</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;k=&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">t1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">k</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; k2=&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">t1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">k2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Test</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;k=&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">t2</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">k</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; k2=&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">t2</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">k2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码某次输出结果：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">k=2 k2=7</span></span>
<span class="line"><span style="color:#ABB2BF;">k=8 k2=7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以发现对于不同的对象k的值是不同的，但是k2的值却是相同的，这是为什么呢? 因为static关键字所修饰的字段并不属于一个对象，而是属于这个类的。也可简单的理解为static final所修饰的字段仅占据内存的一个一份空间，一旦被初始化之后便不会被更改。</p><h4 id="blank-final" tabindex="-1"><a class="header-anchor" href="#blank-final"><span><a href="#blank-final">#</a> blank final</span></a></h4><p>Java允许生成空白final，也就是说被声明为final但又没有给出定值的字段,但是必须在该字段被使用之前被赋值，这给予我们两种选择：</p><ul><li>在定义处进行赋值(这不叫空白final)</li><li>在构造器中进行赋值，保证了该值在被使用前赋值。</li></ul><p>这增强了final的灵活性。</p><p>看下面代码:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i1 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> i2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//空白final</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> Test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        i2 </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> Test</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> x</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">i2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到i2的赋值更为灵活。但是请注意，如果字段由static和final修饰，仅能在声明时赋值或声明后在静态代码块中赋值，因为该字段不属于对象，属于这个类。</p><h2 id="final域重排序规则" tabindex="-1"><a class="header-anchor" href="#final域重排序规则"><span><a href="#final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">#</a> final域重排序规则</span></a></h2><p>上面我们聊的final使用，应该属于Java基础层面的，当理解这些后我们就真的算是掌握了final吗? 有考虑过final在多线程并发的情况吗? 在java内存模型中我们知道java内存模型为了能让处理器和编译器底层发挥他们的最大优势，对底层的约束就很少，也就是说针对底层来说java内存模型就是一弱内存数据模型。同时，处理器和编译为了性能优化会对指令序列有编译器和处理器重排序。那么，在多线程情况下,final会进行怎样的重排序? 会导致线程安全的问题吗? 下面，就来看看final的重排序。</p><h3 id="final域为基本类型" tabindex="-1"><a class="header-anchor" href="#final域为基本类型"><span><a href="#final%E5%9F%9F%E4%B8%BA%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">#</a> final域为基本类型</span></a></h3><p>先看一段示例性的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FinalDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  //普通域</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //final域</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> FinalDemo</span><span style="color:#E06C75;"> finalDemo</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> FinalDemo</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        a </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1. 写普通域</span></span>
<span class="line"><span style="color:#ABB2BF;">        b </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 2. 写final域</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writer</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        finalDemo </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FinalDemo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reader</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        FinalDemo</span><span style="color:#E06C75;"> demo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> finalDemo; </span><span style="color:#7F848E;font-style:italic;">// 3.读对象引用</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> demo</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">//4.读普通域</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> demo</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">//5.读final域</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设线程A在执行writer()方法，线程B执行reader()方法。</p><h4 id="写final域重排序规则" tabindex="-1"><a class="header-anchor" href="#写final域重排序规则"><span><a href="#%E5%86%99final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">#</a> 写final域重排序规则</span></a></h4><p>写final域的重排序规则禁止对final域的写重排序到构造函数之外，这个规则的实现主要包含了两个方面：</p><ul><li>JMM禁止编译器把final域的写重排序到构造函数之外；</li><li>编译器会在final域写之后，构造函数return之前，插入一个storestore屏障。这个屏障可以禁止处理器把final域的写重排序到构造函数之外。</li></ul><p>我们再来分析writer方法，虽然只有一行代码，但实际上做了两件事情：</p><ul><li>构造了一个FinalDemo对象；</li><li>把这个对象赋值给成员变量finalDemo。</li></ul><p>我们来画下存在的一种可能执行时序图，如下：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于a,b之间没有数据依赖性，普通域(普通变量)a可能会被重排序到构造函数之外，线程B就有可能读到的是普通变量a初始化之前的值(零值)，这样就可能出现错误。而final域变量b，根据重排序规则，会禁止final修饰的变量b重排序到构造函数之外，从而b能够正确赋值，线程B就能够读到final变量初始化后的值。</p><p>因此，写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，而普通域就不具有这个保障。比如在上例，线程B有可能就是一个未正确初始化的对象finalDemo。</p><h4 id="读final域重排序规则" tabindex="-1"><a class="header-anchor" href="#读final域重排序规则"><span><a href="#%E8%AF%BBfinal%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99">#</a> 读final域重排序规则</span></a></h4><p>读final域重排序规则为：在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM会禁止这两个操作的重排序。(注意，这个规则仅仅是针对处理器)，处理器会在读final域操作的前面插入一个LoadLoad屏障。实际上，读对象的引用和读该对象的final域存在间接依赖性，一般处理器不会重排序这两个操作。但是有一些处理器会重排序，因此，这条禁止重排序规则就是针对这些处理器而设定的。</p><p>read()方法主要包含了三个操作：</p><ul><li>初次读引用变量finalDemo;</li><li>初次读引用变量finalDemo的普通域a;</li><li>初次读引用变量finalDemo的final域b;</li></ul><p>假设线程A写过程没有重排序，那么线程A和线程B有一种的可能执行时序为下图：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>读对象的普通域被重排序到了读对象引用的前面就会出现线程B还未读到对象引用就在读取该对象的普通域变量，这显然是错误的操作。而final域的读操作就“限定”了在读final域变量前已经读到了该对象的引用，从而就可以避免这种情况。</p><p>读final域的重排序规则可以确保：在读一个对象的final域之前，一定会先读这个包含这个final域的对象的引用。</p><h3 id="final域为引用类型" tabindex="-1"><a class="header-anchor" href="#final域为引用类型"><span><a href="#final%E5%9F%9F%E4%B8%BA%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">#</a> final域为引用类型</span></a></h3><p>我们已经知道了final域是基本数据类型的时候重排序规则是怎么的了? 如果是引用数据类型了? 我们接着继续来探讨。</p><h4 id="对final修饰的对象的成员域写操作" tabindex="-1"><a class="header-anchor" href="#对final修饰的对象的成员域写操作"><span><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E5%86%99%E6%93%8D%E4%BD%9C">#</a> 对final修饰的对象的成员域写操作</span></a></h4><p>针对引用数据类型，final域写针对编译器和处理器重排序增加了这样的约束：在构造函数内对一个final修饰的对象的成员域的写入，与随后在构造函数之外把这个被构造的对象的引用赋给一个引用变量，这两个操作是不能被重排序的。注意这里的是“增加”也就说前面对final基本数据类型的重排序规则在这里还是使用。这句话是比较拗口的，下面结合实例来看。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FinalReferenceDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;">[] arrays</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> FinalReferenceDemo</span><span style="color:#E06C75;"> finalReferenceDemo</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> FinalReferenceDemo</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        arrays </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> int</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];  </span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">        arrays[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">//2</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writerOne</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        finalReferenceDemo </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FinalReferenceDemo</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//3</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writerTwo</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        arrays[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">//4</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reader</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (finalReferenceDemo </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">//5</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> finalReferenceDemo</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">arrays</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];  </span><span style="color:#7F848E;font-style:italic;">//6</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面的实例程序，线程线程A执行wirterOne方法，执行完后线程B执行writerTwo方法，然后线程C执行reader方法。下图就以这种执行时序出现的一种情况来讨论(耐心看完才有收获)。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于对final域的写禁止重排序到构造方法外，因此1和3不能被重排序。由于一个final域的引用对象的成员域写入不能与随后将这个被构造出来的对象赋给引用变量重排序，因此2和3不能重排序。</p><h4 id="对final修饰的对象的成员域读操作" tabindex="-1"><a class="header-anchor" href="#对final修饰的对象的成员域读操作"><span><a href="#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E8%AF%BB%E6%93%8D%E4%BD%9C">#</a> 对final修饰的对象的成员域读操作</span></a></h4><p>JMM可以确保线程C至少能看到写线程A对final引用的对象的成员域的写入，即能看下arrays[0] = 1，而写线程B对数组元素的写入可能看到可能看不到。JMM不保证线程B的写入对线程C可见，线程B和线程C之间存在数据竞争，此时的结果是不可预知的。如果可见的，可使用锁或者volatile。</p><h3 id="关于final重排序的总结" tabindex="-1"><a class="header-anchor" href="#关于final重排序的总结"><span><a href="#%E5%85%B3%E4%BA%8Efinal%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%BB%E7%BB%93">#</a> 关于final重排序的总结</span></a></h3><p>按照final修饰的数据类型分类：</p><ul><li>基本数据类型: <ul><li><code>final域写</code>：禁止final域写与构造方法重排序，即禁止final域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的final域全部已经初始化过。</li><li><code>final域读</code>：禁止初次读对象的引用与读该对象包含的final域的重排序。</li></ul></li><li>引用数据类型： <ul><li><code>额外增加约束</code>：禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序</li></ul></li></ul><h2 id="final再深入理解" tabindex="-1"><a class="header-anchor" href="#final再深入理解"><span><a href="#final%E5%86%8D%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> final再深入理解</span></a></h2><h3 id="final的实现原理" tabindex="-1"><a class="header-anchor" href="#final的实现原理"><span><a href="#final%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">#</a> final的实现原理</span></a></h3><p>上面我们提到过，写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。</p><p>很有意思的是，如果以X86处理为例，X86不会对写-写重排序，所以StoreStore屏障可以省略。由于不会对有间接依赖性的操作重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，以X86为例的话，对final域的读/写的内存屏障都会被省略！具体是否插入还是得看是什么处理器</p><h3 id="为什么final引用不能从构造函数中-溢出" tabindex="-1"><a class="header-anchor" href="#为什么final引用不能从构造函数中-溢出"><span><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88final%E5%BC%95%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BB%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD-%E6%BA%A2%E5%87%BA">#</a> 为什么final引用不能从构造函数中“溢出”</span></a></h3><p>这里还有一个比较有意思的问题：上面对final域写重排序规则可以确保我们在使用一个对象引用的时候该对象的final域已经在构造函数被初始化过了。但是这里其实是有一个前提条件的，也就是：在构造函数，不能让这个被构造的对象被其他线程可见，也就是说该对象引用不能在构造函数中“溢出”。以下面的例子来说：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FinalReferenceEscapeDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> FinalReferenceEscapeDemo</span><span style="color:#E06C75;"> referenceDemo</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> FinalReferenceEscapeDemo</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        a </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#ABB2BF;">        referenceDemo </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//2</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> writer</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> FinalReferenceEscapeDemo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reader</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (referenceDemo </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">//3</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> referenceDemo</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//4</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能的执行时序如图所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假设一个线程A执行writer方法另一个线程执行reader方法。因为构造函数中操作1和2之间没有数据依赖性，1和2可以重排序，先执行了2，这个时候引用对象referenceDemo是个没有完全初始化的对象，而当线程B去读取该对象时就会出错。尽管依然满足了final域写重排序规则：在引用对象对所有线程可见时，其final域已经完全初始化成功。但是，引用对象“this”逸出，该代码依然存在线程安全的问题。</p><h3 id="使用-final-的限制条件和局限性" tabindex="-1"><a class="header-anchor" href="#使用-final-的限制条件和局限性"><span><a href="#%E4%BD%BF%E7%94%A8-final-%E7%9A%84%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B1%80%E9%99%90%E6%80%A7">#</a> 使用 final 的限制条件和局限性</span></a></h3><p>当声明一个 final 成员时，必须在构造函数退出前设置它的值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyClass</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> myField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#61AFEF;"> MyClass</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyClass</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> myField</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#61AFEF;"> MyClass</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    myField </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将指向对象的成员声明为 final 只能将该引用设为不可变的，而非所指的对象。</p><p>下面的方法仍然可以修改该 list。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> List</span><span style="color:#E06C75;"> myList </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">myList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>声明为 final 可以保证如下操作不合法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">myList </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">myList </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> someOtherList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个对象将会在多个线程中访问并且你并没有将其成员声明为 final，则必须提供其他方式保证线程安全。</p><p>&quot; 其他方式 &quot; 可以包括声明成员为 volatile，使用 synchronized 或者显式 Lock 控制所有该成员的访问。</p><h3 id="再思考一个有趣的现象" tabindex="-1"><a class="header-anchor" href="#再思考一个有趣的现象"><span><a href="#%E5%86%8D%E6%80%9D%E8%80%83%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%8E%B0%E8%B1%A1">#</a> 再思考一个有趣的现象：</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b1</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b2</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b3</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">b1</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">b2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//当程序执行到这一行的时候会出错，因为b1、b2可以自动转换成int类型的变量，运算时java虚拟机对它进行了转换，结果导致把一个int赋值给byte-----出错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对b1 b2加上final就不会出错</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> b1</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;"> b2</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b3</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">b1</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">b2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//不会出错，相信你看了上面的解释就知道原因了。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,106),i=[p];function o(c,r){return a(),n("div",null,i)}const B=s(e,[["render",o],["__file","关键字 final 解析.html.vue"]]),d=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20final%20%E8%A7%A3%E6%9E%90.html","title":"关键字 final 解析","lang":"zh-CN","frontmatter":{"title":"关键字 final 解析","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":7,"description":"final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。 关键字 final 解析 带着BAT大厂的面试问题去理解final final基础使用 修饰类 修饰方法 private final final方法是可以被重载的 修饰参数 修饰变量 所有的final修饰的字...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/%E5%85%B3%E9%94%AE%E5%AD%97%20final%20%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"关键字 final 解析"}],["meta",{"property":"og:description","content":"final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。 关键字 final 解析 带着BAT大厂的面试问题去理解final final基础使用 修饰类 修饰方法 private final final方法是可以被重载的 修饰参数 修饰变量 所有的final修饰的字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T06:05:48.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T06:05:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关键字 final 解析\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-key-final-4.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T06:05:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解final","slug":"带着bat大厂的面试问题去理解final","link":"#带着bat大厂的面试问题去理解final","children":[]},{"level":2,"title":"# final基础使用","slug":"final基础使用","link":"#final基础使用","children":[{"level":3,"title":"# 修饰类","slug":"修饰类","link":"#修饰类","children":[]},{"level":3,"title":"# 修饰方法","slug":"修饰方法","link":"#修饰方法","children":[]},{"level":3,"title":"# 修饰参数","slug":"修饰参数","link":"#修饰参数","children":[]},{"level":3,"title":"# 修饰变量","slug":"修饰变量","link":"#修饰变量","children":[]}]},{"level":2,"title":"# final域重排序规则","slug":"final域重排序规则","link":"#final域重排序规则","children":[{"level":3,"title":"# final域为基本类型","slug":"final域为基本类型","link":"#final域为基本类型","children":[]},{"level":3,"title":"# final域为引用类型","slug":"final域为引用类型","link":"#final域为引用类型","children":[]},{"level":3,"title":"# 关于final重排序的总结","slug":"关于final重排序的总结","link":"#关于final重排序的总结","children":[]}]},{"level":2,"title":"# final再深入理解","slug":"final再深入理解","link":"#final再深入理解","children":[{"level":3,"title":"# final的实现原理","slug":"final的实现原理","link":"#final的实现原理","children":[]},{"level":3,"title":"# 为什么final引用不能从构造函数中“溢出”","slug":"为什么final引用不能从构造函数中-溢出","link":"#为什么final引用不能从构造函数中-溢出","children":[]},{"level":3,"title":"# 使用 final 的限制条件和局限性","slug":"使用-final-的限制条件和局限性","link":"#使用-final-的限制条件和局限性","children":[]},{"level":3,"title":"# 再思考一个有趣的现象：","slug":"再思考一个有趣的现象","link":"#再思考一个有趣的现象","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709877948000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":15.91,"words":4773},"filePathRelative":"posts/Java/ThreadConcurrency/关键字 final 解析.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>final 关键字看上去简单，但是真正深入理解的人可以说少之又少，读完本文你就知道我在说什么了。本文将常规的用法简化，提出一些用法和深入的思考。</p>\\n</blockquote>\\n<ul>\\n<li>关键字 final 解析\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3final\\">带着BAT大厂的面试问题去理解final</a></li>\\n<li>final基础使用\\n<ul>\\n<li><a href=\\"#%E4%BF%AE%E9%A5%B0%E7%B1%BB\\">修饰类</a></li>\\n<li>修饰方法\\n<ul>\\n<li><a href=\\"#private-final\\">private final</a></li>\\n<li><a href=\\"#final%E6%96%B9%E6%B3%95%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E8%BD%BD%E7%9A%84\\">final方法是可以被重载的</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E4%BF%AE%E9%A5%B0%E5%8F%82%E6%95%B0\\">修饰参数</a></li>\\n<li>修饰变量\\n<ul>\\n<li><a href=\\"#%E6%89%80%E6%9C%89%E7%9A%84final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AD%97%E6%AE%B5%E9%83%BD%E6%98%AF%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E5%90%97\\">所有的final修饰的字段都是编译期常量吗?</a></li>\\n<li><a href=\\"#static-final\\">static final</a></li>\\n<li><a href=\\"#blank-final\\">blank final</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>final域重排序规则\\n<ul>\\n<li>final域为基本类型\\n<ul>\\n<li><a href=\\"#%E5%86%99final%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99\\">写final域重排序规则</a></li>\\n<li><a href=\\"#%E8%AF%BBfinal%E5%9F%9F%E9%87%8D%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99\\">读final域重排序规则</a></li>\\n</ul>\\n</li>\\n<li>final域为引用类型\\n<ul>\\n<li><a href=\\"#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E5%86%99%E6%93%8D%E4%BD%9C\\">对final修饰的对象的成员域写操作</a></li>\\n<li><a href=\\"#%E5%AF%B9final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%88%90%E5%91%98%E5%9F%9F%E8%AF%BB%E6%93%8D%E4%BD%9C\\">对final修饰的对象的成员域读操作</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%85%B3%E4%BA%8Efinal%E9%87%8D%E6%8E%92%E5%BA%8F%E7%9A%84%E6%80%BB%E7%BB%93\\">关于final重排序的总结</a></li>\\n</ul>\\n</li>\\n<li>final再深入理解\\n<ul>\\n<li><a href=\\"#final%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\\">final的实现原理</a></li>\\n<li><a href=\\"#%E4%B8%BA%E4%BB%80%E4%B9%88final%E5%BC%95%E7%94%A8%E4%B8%8D%E8%83%BD%E4%BB%8E%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E6%BA%A2%E5%87%BA\\">为什么final引用不能从构造函数中“溢出”</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8-final-%E7%9A%84%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6%E5%92%8C%E5%B1%80%E9%99%90%E6%80%A7\\">使用 final 的限制条件和局限性</a></li>\\n<li><a href=\\"#%E5%86%8D%E6%80%9D%E8%80%83%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E7%8E%B0%E8%B1%A1\\">再思考一个有趣的现象：</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{B as comp,d as data};
