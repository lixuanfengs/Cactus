import{_ as n,c as a,f as l,o as e}from"./app-Bi4lPY3K.js";const t={};function o(p,s){return e(),a("div",null,s[0]||(s[0]=[l(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>本篇文章主要学习<code>Spring Security</code>中<strong>用户名密码</strong>认证的执行流程。</p><p>在前面我们已经提到了<code>Spring Security</code>是基于过滤器实现的，并介绍了过滤器及相关的认证组件。现在，我们将深入源码，详细了解<strong>用户名密码认证</strong>的整个流程。</p><h2 id="_2-配置表单登录" tabindex="-1"><a class="header-anchor" href="#_2-配置表单登录"><span>2. 配置表单登录</span></a></h2><p>在前面我们已经提到了<code>Spring Boot</code>自动配置了添加了默认的认证规则：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Order</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">2147483642</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">SecurityFilterChain</span><span style="color:#61AFEF;"> defaultSecurityFilterChain</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpSecurity</span><span style="color:#E06C75;"> http) throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 配置所有的Http请求必须认证</span></span>
<span class="line"><span style="color:#E06C75;">    ((</span><span style="color:#E5C07B;">AuthorizeHttpRequestsConfigurer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">AuthorizedUrl</span><span style="color:#E06C75;">)</span><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">authorizeHttpRequests</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">anyRequest</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">authenticated</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 开启表单登录</span></span>
<span class="line"><span style="color:#E5C07B;">    http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">formLogin</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 开启Basic认证</span></span>
<span class="line"><span style="color:#E5C07B;">    http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpBasic</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (SecurityFilterChain)</span><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用Spring Security时，定制一些安全规则是不可避免的。然而，6.0版本及其之前版本的配置方式发生了较大变化。之前的做法通常是继承<code>WebSecurityConfigurerAdapter</code>类，并重写其中的方法，如下所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119093845451.png" alt="image-20240119093845451" tabindex="0" loading="lazy"><figcaption>image-20240119093845451</figcaption></figure><p><code>Spring Security 6.x 及以后的版本中已经删除 </code>WebSecurityConfigurerAdapter<code>，新版中需要按照以下方式 来配置</code>HttpSecurity<code>和</code>WebSecurity\` ：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">EnableWebSecurity</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">debug</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> WebSecurityConfig</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> SecurityFilterChain</span><span style="color:#61AFEF;"> filterChain</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpSecurity</span><span style="color:#E06C75;font-style:italic;"> http</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        http</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">csrf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">authorizeHttpRequests</span><span style="color:#ABB2BF;">(authorize </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> authorize</span></span>
<span class="line"><span style="color:#ABB2BF;">                    .</span><span style="color:#61AFEF;">anyRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">authenticated</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">httpBasic</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">formLogin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#E5C07B;">    WebSecurityCustomizer</span><span style="color:#61AFEF;"> webSecurityCustomizer</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> web </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> web</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ignoring</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">requestMatchers</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置中<code>http.formLogin()</code>表示开启表单认证，该方法中应用了一个<strong>表单登录配置类</strong> <code>FormLoginConfigurer</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> HttpSecurity</span><span style="color:#61AFEF;"> formLogin</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">FormLoginConfigurer</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">HttpSecurity</span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#E06C75;"> formLoginCustomizer) throws Exception {</span></span>
<span class="line"><span style="color:#E5C07B;">    formLoginCustomizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">customize</span><span style="color:#ABB2BF;">((FormLoginConfigurer)</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOrApply</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> FormLoginConfigurer</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>FormLoginConfigurer</code>的构造方法中，会配置添加<code>UsernamePasswordAuthenticationFilter</code>，用于处理用户名密码认证，并对请求参数的名称进行了设置：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> FormLoginConfigurer</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    super</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> UsernamePasswordAuthenticationFilter</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (String)</span><span style="color:#D19A66;">null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">usernameParameter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">passwordParameter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在父类的构造函数和配置类的构建过程中，还会进行一些相关的配置，包括设置登录请求URL、配置<code>DefaultLoginPageGeneratingFilter</code>（用于生成登录页面的过滤器）等。</p><h2 id="_3-重定向登录页" tabindex="-1"><a class="header-anchor" href="#_3-重定向登录页"><span>3. 重定向登录页</span></a></h2><p>首先添加一个访问测试接口：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">GetMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/test&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> test</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &quot;Hello Security!!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未登录时访问接口，会<strong>重定向到登录页</strong>，流程图如下说示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119111427881.png" alt="image-20240119111427881" tabindex="0" loading="lazy"><figcaption>image-20240119111427881</figcaption></figure><p>流程图说明：</p><ol><li>一个用户向其未被授权的资源（/test）发出一个未经认证的请求。</li><li>请求进入SecurityFilterChain开始执行过滤器，在AuthorizationFilter中校验不通过，抛出一个AccessDeniedException。</li><li>ExceptionTranslationFilter 捕获到异常，调用LoginUrlAuthenticationEntryPoint 重定向到/login。</li><li>重定向的/login发起请求进入过滤器</li><li>/login会被DefaultLoginPageGeneratingFilter处理，直接响应写出默认登录页。</li></ol><h3 id="_3-1-抛出-accessdeniedexception" tabindex="-1"><a class="header-anchor" href="#_3-1-抛出-accessdeniedexception"><span>3.1 抛出 AccessDeniedException</span></a></h3><p>访问上述接口地址，在<code>Spring Security 6.0系列【4】源码篇之默认过滤器</code> 中，有介绍请求最开始是到达<code>FilterChainProxy</code>，由它来调用<code>SecurityFilterChain</code>中的过滤器，<code>/test</code>是没有经过认证的，依次通过下述所有过滤器。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119112512670.png" alt="image-20240119112512670" tabindex="0" loading="lazy"><figcaption>image-20240119112512670</figcaption></figure><p>在经过最后一个过滤器 <code>AuthorizationFilter</code> 时，进行了最终的权限校验。如果当前请求缺乏执行所需操作的权限，那么会触发抛出 <code>AccessDeniedException</code> 异常。这表示请求被拒绝，因为用户没有足够的权限执行相应的操作。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">		try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 调用AuthorizationManager 检查当前是否有权限</span></span>
<span class="line"><span style="color:#E5C07B;">			AuthorizationDecision</span><span style="color:#E06C75;"> decision </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">authorizationManager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getAuthentication, request);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 发布事件</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">eventPublisher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">publishAuthorizationEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getAuthentication, request, decision);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果未被授权，抛出 AccessDeniedException</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#E06C75;"> (decision </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">decision</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isGranted</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AccessDeniedException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Access Denied&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			chain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAttribute</span><span style="color:#ABB2BF;">(alreadyFilteredAttributeName);</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，<code>AuthorizationFilter</code>会提取当前用户的认证信息。由于当前请求尚未经过认证，因此用户将是由<code>AnonymousAuthenticationFilter</code>创建的<strong>匿名用户</strong>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119175448941.png" alt="image-20240119175448941" tabindex="0" loading="lazy"><figcaption>image-20240119175448941</figcaption></figure><p>接着，使用<code>AuthorizationManager</code> 授权管理器对当前的认证信息进行检查。由于当前用户是<strong>匿名用户</strong>，因此判定当前请求无权访问，并触发抛出 <code>AccessDeniedException</code> 异常。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119175819405.png" alt="image-20240119175819405" tabindex="0" loading="lazy"><figcaption>image-20240119175819405</figcaption></figure><h3 id="_3-2-异常处理" tabindex="-1"><a class="header-anchor" href="#_3-2-异常处理"><span>3.2 异常处理</span></a></h3><p>抛出的<code>AccessDeniedException</code>异常会被<code>ExceptionTranslationFilter</code>捕获：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119180100744.png" alt="image-20240119180100744" tabindex="0" loading="lazy"><figcaption>image-20240119180100744</figcaption></figure><p><code>ExceptionTranslationFilter</code>根据异常类型进行相应处理：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> handleSpringSecurityException</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			FilterChain</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> RuntimeException</span><span style="color:#E06C75;"> exception) throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (exception </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> AuthenticationException) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 处理 AuthenticationException（身份验证异常）</span></span>
<span class="line"><span style="color:#61AFEF;">			handleAuthenticationException</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (AuthenticationException) exception)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (exception </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> AccessDeniedException) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 处理 AccessDeniedExceptio（访问拒绝异常）</span></span>
<span class="line"><span style="color:#61AFEF;">			handleAccessDeniedException</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (AccessDeniedException) exception)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用<code>handleAccessDeniedException</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> handleAccessDeniedException</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			FilterChain</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> AccessDeniedException</span><span style="color:#E06C75;"> exception) throws ServletException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 获取用户认证信息</span></span>
<span class="line"><span style="color:#E5C07B;">		Authentication</span><span style="color:#E06C75;"> authentication </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextHolderStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContext</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getAuthentication</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 当前是匿名用户</span></span>
<span class="line"><span style="color:#C678DD;">		boolean</span><span style="color:#E06C75;"> isAnonymous </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">authenticationTrustResolver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAnonymous</span><span style="color:#ABB2BF;">(authentication);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (isAnonymous </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">authenticationTrustResolver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isRememberMe</span><span style="color:#ABB2BF;">(authentication)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isTraceEnabled</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trace</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LogMessage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Sending %s to authentication entry point since access is denied&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">						authentication), exception);</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 当前是匿名用户，需要发送认证页面</span></span>
<span class="line"><span style="color:#61AFEF;">			sendStartAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">					new</span><span style="color:#61AFEF;"> InsufficientAuthenticationException</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#E5C07B;">							this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">messages</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ExceptionTranslationFilter.insufficientAuthentication&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">									&quot;Full authentication is required to access this resource&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isTraceEnabled</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trace</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">						LogMessage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Sending %s to access denied handler since access is denied&quot;</span><span style="color:#ABB2BF;">, authentication),</span></span>
<span class="line"><span style="color:#ABB2BF;">						exception);</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 不是匿名用户，也不是记住我用户，调用访问拒绝处理器AccessDeniedHandler</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">accessDeniedHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(request, response, exception);</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用<code>sendStartAuthentication</code>缓存请求，并调用<code>AuthenticationEntryPoint</code>生成认证入口：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">	protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> sendStartAuthentication</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FilterChain</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			AuthenticationException</span><span style="color:#E06C75;"> reason) throws ServletException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> IOException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 创建空的SecurityContext</span></span>
<span class="line"><span style="color:#E5C07B;">		SecurityContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextHolderStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createEmptyContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextHolderStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContext</span><span style="color:#ABB2BF;">(context);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 请求缓存中保存当前请求，使用的是HttpSession</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">requestCache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveRequest</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 调用AuthenticationEntryPoint</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">authenticationEntryPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commence</span><span style="color:#ABB2BF;">(request, response, reason);</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-重定向" tabindex="-1"><a class="header-anchor" href="#_3-3-重定向"><span>3.3 重定向</span></a></h3><p>接着调用到<code>LoginUrlAuthenticationEntryPoint</code>进行<strong>重定向</strong>或者<strong>转发</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> commence</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			AuthenticationException</span><span style="color:#E06C75;"> authException) throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">useForward</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">           //  重定向至登录页面。如果 forceHttps true ，则使用 https</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        	// 重定向的登录页地址：http://localhost:10001/login</span></span>
<span class="line"><span style="color:#E5C07B;">			String</span><span style="color:#E06C75;"> redirectUrl </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> buildRedirectUrlToLoginPage</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authException)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 执行</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">redirectStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendRedirect</span><span style="color:#ABB2BF;">(request, response, redirectUrl);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		String</span><span style="color:#E06C75;"> redirectUrl </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">forceHttps</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#98C379;"> &quot;http&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getScheme</span><span style="color:#ABB2BF;">())</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 首先将当前请求重定向到 HTTPS。收到该请求后，将使用转发到登录页面。</span></span>
<span class="line"><span style="color:#E06C75;">			redirectUrl </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> buildHttpsRedirectUrlForRequest</span><span style="color:#E06C75;">(request)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (redirectUrl </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">redirectStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendRedirect</span><span style="color:#ABB2BF;">(request, response, redirectUrl);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		String</span><span style="color:#E06C75;"> loginForm </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> determineUrlToUseForThisRequest</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authException)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LogMessage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Server side forward to: %s&quot;</span><span style="color:#ABB2BF;">, loginForm));</span></span>
<span class="line"><span style="color:#E5C07B;">		RequestDispatcher</span><span style="color:#E06C75;"> dispatcher </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequestDispatcher</span><span style="color:#ABB2BF;">(loginForm);</span></span>
<span class="line"><span style="color:#E5C07B;">		dispatcher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forward</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-生成默认页面" tabindex="-1"><a class="header-anchor" href="#_3-4-生成默认页面"><span>3.4 生成默认页面</span></a></h3><p><strong>重定向</strong>后浏览器地址变为<code>http://localhost:8888/login</code>，发起<code>GET</code>请求，此时又会开始执行过滤器：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122110748749.png" alt="image-20240122110748749" tabindex="0" loading="lazy"><figcaption>image-20240122110748749</figcaption></figure><p>在经过<code>DefaultLoginPageGeneratingFilter</code>时，进行默认登录页的处理。在这个过滤器中，维护了许多参数，用于配置和定制默认登录页。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    // 默认登录页面 URL</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> DEFAULT_LOGIN_PAGE_URL </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;/login&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 错误参数名称</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> ERROR_PARAMETER_NAME </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;error&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 登录页面网址, 默认 /login</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> loginPageUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 登出成功页网址，默认 /login?logout</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> logoutSuccessUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 登录错误页网址，默认 /login?error</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> failureUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 是否开启表单登录</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> formLoginEnabled</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 是否开启oauth2登录</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> oauth2LoginEnabled</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 是否开启saml2登录</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> saml2LoginEnabled</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 认证请求地址，默认 /login</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> authenticationUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 用户名参数，默认username</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> usernameParameter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 密码参数，默认password</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> passwordParameter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 记住用户</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> rememberMeParameter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // oauth 2 客户端名称的身份验证 URL</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> oauth2AuthenticationUrlToClientName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // saml 2 提供程序名称的身份验证 URL</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> saml2AuthenticationUrlToProviderName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 解析隐藏输入</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;&gt;</span><span style="color:#E06C75;"> resolveHiddenInputs </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (request) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> Collections</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emptyMap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当发生重定向到GET请求的 <code>/login</code> 时，会触发生成登录页面的逻辑。在这个过程中，会通过调用 <code>response</code> 直接输出一个页面，并在此处返回，不再执行后续的操作。这确保了在重定向到登录页时，后续的处理逻辑被中止。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doFilter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FilterChain</span><span style="color:#E06C75;"> chain)</span></span>
<span class="line"><span style="color:#E06C75;">			throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	    // 是否登录错误 /login?error</span></span>
<span class="line"><span style="color:#C678DD;">		boolean</span><span style="color:#E06C75;"> loginError </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> isErrorPage</span><span style="color:#E06C75;">(request)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 是否登录成功 /login?logout</span></span>
<span class="line"><span style="color:#C678DD;">		boolean</span><span style="color:#E06C75;"> logoutSuccess </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> isLogoutSuccess</span><span style="color:#E06C75;">(request)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isLoginUrlRequest</span><span style="color:#E06C75;">(request) </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> loginError </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> logoutSuccess) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //1.  /login?error、/login?logout、/login 三种请求URL中的任意一种会进入该方法</span></span>
<span class="line"><span style="color:#E5C07B;">			String</span><span style="color:#E06C75;"> loginPageHtml </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> generateLoginPageHtml</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> loginError</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> logoutSuccess)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //2. 生成登录页</span></span>
<span class="line"><span style="color:#E5C07B;">			response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContentType</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContentLength</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">loginPageHtml</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StandardCharsets</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UTF_8</span><span style="color:#ABB2BF;">).</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //3. 直接写出，并结束</span></span>
<span class="line"><span style="color:#E5C07B;">			response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getWriter</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(loginPageHtml);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		chain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，默认的登录页面就展示出来了：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122112155371.png" alt="image-20240122112155371" tabindex="0" loading="lazy"><figcaption>image-20240122112155371</figcaption></figure><h2 id="_4-表单登录" tabindex="-1"><a class="header-anchor" href="#_4-表单登录"><span>4. 表单登录</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122125832774.png" alt="image-20240122125832774" tabindex="0" loading="lazy"><figcaption>image-20240122125832774</figcaption></figure><p><strong>流程说明：</strong></p><ul><li>输入用户名、密码提交登录，登录请求会被UsernamePasswordAuthenticationFilter处理，构建预认证对象UsernamePasswordAuthenticationToken</li><li>调用AuthenticationManager（实现类是ProviderManager）进行认证</li><li>ProviderManager查询所有认证提供者，DaoAuthenticationProvider符合当前认证类型</li><li>DaoAuthenticationProvider查询用户，校验密码</li><li>身份验证成功，存储会话、发布事件、调用成功处理器</li><li>身份验证失败，清除SecurityContext，调用失败处理器</li></ul><h3 id="_4-1-首先是进入abstractauthenticationprocessingfilter" tabindex="-1"><a class="header-anchor" href="#_4-1-首先是进入abstractauthenticationprocessingfilter"><span>4.1 首先是进入AbstractAuthenticationProcessingFilter</span></a></h3><p>在进行表单登录时，登录请求会被传递到 <code>UsernamePasswordAuthenticationFilter</code> 过滤器中。该过滤器负责拦截前端提交的 POST 登录表单请求，并进行身份认证。</p><p>在该过滤器的 <code>doFilter</code> 方法中，实际上执行的是其父类 <code>AbstractAuthenticationProcessingFilter.doFilter</code> 方法。这是一个抽象类，采用了模板设计模式，主要用于执行认证过滤器。根据不同的认证方式，它会执行不同子类的认证逻辑。通过观察其实现类，我们可以看到 <code>Security</code> 提供了多种认证方式。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123102917835.png" alt="image-20240123102917835" tabindex="0" loading="lazy"><figcaption>image-20240123102917835</figcaption></figure><p><code>AbstractAuthenticationProcessingFilter</code>的<code>doFilter</code>方法，几乎完成了认证的所有流程。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">	// 过滤方法</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doFilter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FilterChain</span><span style="color:#E06C75;"> chain)</span></span>
<span class="line"><span style="color:#E06C75;">			throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 1. 判断是否需要认证</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">requiresAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			chain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 2. 调用子类方法认证，认证信息封装到 Authentication 中</span></span>
<span class="line"><span style="color:#E5C07B;">			Authentication</span><span style="color:#E06C75;"> authenticationResult </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> attemptAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#E06C75;"> (authenticationResult </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// return immediately as subclass has indicated that it hasn&#39;t completed</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 3. Session 策略处理</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sessionStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onAuthentication</span><span style="color:#ABB2BF;">(authenticationResult, request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// Authentication success</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">continueChainBeforeSuccessfulAuthentication</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				chain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 4. 成功处理</span></span>
<span class="line"><span style="color:#61AFEF;">			successfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authenticationResult)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InternalAuthenticationServiceException</span><span style="color:#E06C75;font-style:italic;"> failed</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;An internal error occurred while trying to authenticate the user.&quot;</span><span style="color:#ABB2BF;">, failed);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 5. 失败处理</span></span>
<span class="line"><span style="color:#61AFEF;">			unsuccessfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> failed)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">AuthenticationException</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// Authentication failed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 6. 失败处理</span></span>
<span class="line"><span style="color:#61AFEF;">			unsuccessfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ex)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-然后进入usernamepasswordauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#_4-2-然后进入usernamepasswordauthenticationfilter"><span>4.2 然后进入UsernamePasswordAuthenticationFilter</span></a></h3><p>UsernamePasswordAuthenticationFilter<code>的</code>attemptAuthentication<code>方法，该方法会创建一个没有认证的</code>UsernamePasswordAuthenticationToken \`认证对象。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    // 用户名和密码认证逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#E5C07B;"> Authentication</span><span style="color:#61AFEF;"> attemptAuthentication</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response)</span></span>
<span class="line"><span style="color:#E06C75;">			throws AuthenticationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 1. 设置了只支持Post，而当前不是Post请求时，抛出异常 Authentication method not supported</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">postOnly</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;POST&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AuthenticationServiceException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Authentication method not supported: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 2. 请求中获取 username password 参数，去除空格，当参数为null时，设置为空</span></span>
<span class="line"><span style="color:#E5C07B;">		String</span><span style="color:#E06C75;"> username </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> obtainUsername</span><span style="color:#E06C75;">(request)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		username </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (username </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> username</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		String</span><span style="color:#E06C75;"> password </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> obtainPassword</span><span style="color:#E06C75;">(request)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		password </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (password </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> password </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 3. 创建 UsernamePasswordAuthenticationToken，标记为未认证</span></span>
<span class="line"><span style="color:#E5C07B;">		UsernamePasswordAuthenticationToken</span><span style="color:#E06C75;"> authRequest </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> UsernamePasswordAuthenticationToken</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unauthenticated</span><span style="color:#ABB2BF;">(username,</span></span>
<span class="line"><span style="color:#ABB2BF;">				password);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Allow subclasses to set the &quot;details&quot; property</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 4. UsernamePasswordAuthenticationToken 设置 Details 信息</span></span>
<span class="line"><span style="color:#61AFEF;">		setDetails</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authRequest)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 5. 调用认证管理器进行认证，返回认证信息Authentication</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAuthenticationManager</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">authenticate</span><span style="color:#ABB2BF;">(authRequest);</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UsernamePasswordAuthenticationToken</code>刚创建时，包含了输入的<strong>用户名密码</strong>、访问<code>IP</code>、<code>sessionID</code>等信息，这时状态为<strong>未认证</strong>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123152053479.png" alt="image-20240123152053479" tabindex="0" loading="lazy"><figcaption>image-20240123152053479</figcaption></figure><p>认证管理器<code>ProviderManager</code>中包含多个认证提供者<code>AuthenticationProvider</code>：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123154914336.png" alt="image-20240123154914336" tabindex="0" loading="lazy"><figcaption>image-20240123154914336</figcaption></figure><p>调用认证管理器进行认证时，进入的是 <code>ProviderManager</code> 的 <code>authenticate</code> 方法，先找到支持该类型认证的提供者，然后调用其认证方法：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123155116956.png" alt="image-20240123155116956" tabindex="0" loading="lazy"><figcaption>image-20240123155116956</figcaption></figure><h3 id="_4-3-最后进入-daoauthenticationprovider" tabindex="-1"><a class="header-anchor" href="#_4-3-最后进入-daoauthenticationprovider"><span>4.3 最后进入 DaoAuthenticationProvider</span></a></h3><p><code>UsernamePasswordAuthenticationToken</code> 类型的 <code>Authentication</code> 对象由 <code>DaoAuthenticationProvider</code> 处理。处理的第一步是调用父类 <code>AbstractUserDetailsAuthenticationProvider</code> 中的 <code>authenticate</code> 方法。在这个过程中，涉及到对数据库进行用户信息查询以及检查相关状态。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">	// 认证逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#E5C07B;"> Authentication</span><span style="color:#61AFEF;"> authenticate</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Authentication</span><span style="color:#E06C75;"> authentication) throws AuthenticationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 断言传入的认证对象必须是 UsernamePasswordAuthenticationToken 类型</span></span>
<span class="line"><span style="color:#E5C07B;">		Assert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInstanceOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UsernamePasswordAuthenticationToken</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, authentication,</span></span>
<span class="line"><span style="color:#ABB2BF;">				() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">messages</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AbstractUserDetailsAuthenticationProvider.onlySupports&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">						&quot;Only UsernamePasswordAuthenticationToken is supported&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 从认证对象中获取用户名</span></span>
<span class="line"><span style="color:#E5C07B;">		String</span><span style="color:#E06C75;"> username </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> determineUsername</span><span style="color:#E06C75;">(authentication)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 标记是否使用了缓存</span></span>
<span class="line"><span style="color:#C678DD;">		boolean</span><span style="color:#E06C75;"> cacheWasUsed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 从用户缓存中获取用户详情对象</span></span>
<span class="line"><span style="color:#E5C07B;">		UserDetails</span><span style="color:#E06C75;"> user </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userCache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserFromCache</span><span style="color:#ABB2BF;">(username);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果缓存中没有用户详情对象</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (user </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置缓存标记为false</span></span>
<span class="line"><span style="color:#E06C75;">			cacheWasUsed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 调 loadUserByUsername 方法获取数据库中查询的用户</span></span>
<span class="line"><span style="color:#E06C75;">				user </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> retrieveUser</span><span style="color:#E06C75;">(username</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UsernameNotFoundException</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果用户服务中找不到用户，记录日志</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed to find user &#39;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> username </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&#39;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hideUserNotFoundExceptions</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					throw</span><span style="color:#E06C75;"> ex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BadCredentialsException</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">messages</span></span>
<span class="line"><span style="color:#ABB2BF;">					.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Bad credentials&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 断言用户详情对象不为空</span></span>
<span class="line"><span style="color:#E5C07B;">			Assert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notNull</span><span style="color:#ABB2BF;">(user, </span><span style="color:#98C379;">&quot;retrieveUser returned null - a violation of the interface contract&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 对用户详情对象进行预认证检查，比如是否过期、是否锁定等</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">preAuthenticationChecks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(user);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 对用户详情对象进行额外的认证检查，比如密码是否匹配等</span></span>
<span class="line"><span style="color:#61AFEF;">			additionalAuthenticationChecks</span><span style="color:#E06C75;">(user</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">AuthenticationException</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果发生认证异常</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">cacheWasUsed) {</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#E06C75;"> ex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 否则，重新从用户服务中获取用户详情对象，以防缓存中的数据过期</span></span>
<span class="line"><span style="color:#E06C75;">			cacheWasUsed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			user </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> retrieveUser</span><span style="color:#E06C75;">(username</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 再次进行预认证检查和额外的认证检查</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">preAuthenticationChecks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(user);</span></span>
<span class="line"><span style="color:#61AFEF;">			additionalAuthenticationChecks</span><span style="color:#E06C75;">(user</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (UsernamePasswordAuthenticationToken) authentication)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 对用户详情对象进行后认证检查，比如是否启用等</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">postAuthenticationChecks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(user);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果没有使用缓存</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">cacheWasUsed) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将用户详情对象放入缓存中</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userCache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putUserInCache</span><span style="color:#ABB2BF;">(user);</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 定义要返回的主体对象</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#E06C75;"> principalToReturn </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果强制将主体对象转换为字符串</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">forcePrincipalAsString</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 则将主体对象设置为用户的用户名</span></span>
<span class="line"><span style="color:#E06C75;">			principalToReturn </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUsername</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建成功的认证对象，并返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> createSuccessAuthentication</span><span style="color:#E06C75;">(principalToReturn</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authentication</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> user)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库查询出用户后，<code>additionalAuthenticationChecks</code> 会对输入密码进行校验：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    // 密码校验</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;deprecation&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">	protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> additionalAuthenticationChecks</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">UserDetails</span><span style="color:#E06C75;"> userDetails</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			UsernamePasswordAuthenticationToken</span><span style="color:#E06C75;"> authentication) throws AuthenticationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果认证对象没有提供凭证，即密码为空</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCredentials</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 记录调试信息</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed to authenticate since no credentials provided&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BadCredentialsException</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">messages</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Bad credentials&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 将认证对象的凭证转换为字符串</span></span>
<span class="line"><span style="color:#E5C07B;">		String</span><span style="color:#E06C75;"> presentedPassword </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCredentials</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果密码编码器无法匹配用户的密码和认证对象的凭证</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">passwordEncoder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">matches</span><span style="color:#ABB2BF;">(presentedPassword, </span><span style="color:#E5C07B;">userDetails</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPassword</span><span style="color:#ABB2BF;">())</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed to authenticate since password does not match stored value&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 抛出凭证错误的异常</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BadCredentialsException</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">messages</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Bad credentials&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>密码校验成功后，<code>AbstractUserDetailsAuthenticationProvider</code>就会创建一个认证成功的<code>Authentication</code>对象：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    // 创建已认证的Authentication</span></span>
<span class="line"><span style="color:#C678DD;">	protected</span><span style="color:#E5C07B;"> Authentication</span><span style="color:#61AFEF;"> createSuccessAuthentication</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> principal</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Authentication</span><span style="color:#E06C75;"> authentication</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			UserDetails</span><span style="color:#E06C75;"> user) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 保证返回用户提供的原始凭证，以便后续的尝试能够成功，即使密码是经过编码的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 同时保证返回原始的getDetails()，以便缓存过期后的认证事件包含细节</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 创建一个已认证的UsernamePasswordAuthenticationToken对象，包含主体、凭证和权限</span></span>
<span class="line"><span style="color:#E5C07B;">		UsernamePasswordAuthenticationToken</span><span style="color:#E06C75;"> result </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> UsernamePasswordAuthenticationToken</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">authenticated</span><span style="color:#ABB2BF;">(principal,</span></span>
<span class="line"><span style="color:#E5C07B;">				authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCredentials</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">authoritiesMapper</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mapAuthorities</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAuthorities</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#E5C07B;">		result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDetails</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDetails</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Authenticated user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-会话策略处理" tabindex="-1"><a class="header-anchor" href="#_4-4-会话策略处理"><span>4.4 会话策略处理</span></a></h3><p>回到第一步 <code>AbstractAuthenticationProcessingFilter</code> 中的 <code>doFilter </code>方法进行认证成功的后续处理：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123180418032.png" alt="image-20240123180418032" tabindex="0" loading="lazy"><figcaption>image-20240123180418032</figcaption></figure><p>可以看到<code>sessionStrategy</code>使用了两个策略进行会话处理：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123181242959.png" alt="image-20240123181242959" tabindex="0" loading="lazy"><figcaption>image-20240123181242959</figcaption></figure><p><strong>CsrfAuthenticationStrategy</strong> ：它负责在执行认证请求之后, 删除旧的令牌, 生成新的，确保每次请求之后,<code> csrf-token</code> 都得到更新</p><p><strong>ChangeSessionIdAuthenticationStrategy</strong>：主要是使用<code>HttpServletRequest.changeSessionId()</code>方法修改<code>sessionID</code>来防止会话固定攻击。</p><h4 id="_4-5-成功处理" tabindex="-1"><a class="header-anchor" href="#_4-5-成功处理"><span>4.5 成功处理</span></a></h4><p>会话处理完成后，调用<code>successfulAuthentication</code>进行认证成功后续处理。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">			// 成功处理</span></span>
<span class="line"><span style="color:#61AFEF;">			successfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authenticationResult)</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>详细代码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">	protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> successfulAuthentication</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FilterChain</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			Authentication</span><span style="color:#E06C75;"> authResult) throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 把认证信息封装到 SecurityContext 中</span></span>
<span class="line"><span style="color:#E5C07B;">		SecurityContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextHolderStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createEmptyContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAuthentication</span><span style="color:#ABB2BF;">(authResult);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextHolderStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContext</span><span style="color:#ABB2BF;">(context);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveContext</span><span style="color:#ABB2BF;">(context, request, response);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isDebugEnabled</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LogMessage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Set SecurityContextHolder to %s&quot;</span><span style="color:#ABB2BF;">, authResult));</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //  rememberMe 处理</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rememberMeServices</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loginSuccess</span><span style="color:#ABB2BF;">(request, response, authResult);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">eventPublisher</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 发布认证成功事件</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">eventPublisher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">publishEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> InteractiveAuthenticationSuccessEvent</span><span style="color:#ABB2BF;">(authResult, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#E06C75;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 调用成功处理器，重定向到登录前 URL</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">successHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onAuthenticationSuccess</span><span style="color:#ABB2BF;">(request, response, authResult);</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在认证成功后，用户信息会被保存在 <code>SecurityContextHolder</code> 和会话（<code>Session</code>）中。成功处理器将会重定向到用户之前访问的URL。接下来，请求会继续经过过滤器。由于当前已完成认证，所以直接返回接口请求的资源。这确保了认证成功后的顺利访问。</p><h4 id="_4-6-失败处理" tabindex="-1"><a class="header-anchor" href="#_4-6-失败处理"><span>4.6 失败处理</span></a></h4><p>如果认证失败，比如密码错误，会进入到<code>AbstractAuthenticationProcessingFilter</code>失败处理方法中：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123182359205.png" alt="image-20240123182359205" tabindex="0" loading="lazy"><figcaption>image-20240123182359205</figcaption></figure><p>失败处理方法逻辑如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> unsuccessfulAuthentication</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			AuthenticationException</span><span style="color:#E06C75;"> failed) throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 清理 securityContext</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityContextHolderStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clearContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed to process authentication request&quot;</span><span style="color:#ABB2BF;">, failed);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Cleared SecurityContextHolder&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Handling authentication failure&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 记住我处理</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rememberMeServices</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loginFail</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 调用失败处理器</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">failureHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onAuthenticationFailure</span><span style="color:#ABB2BF;">(request, response, failed);</span></span>
<span class="line"><span style="color:#E06C75;">	}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>失败处理器默认使用的是<code>SimpleUrlAuthenticationFailureHandler</code>，将页面重定向到<code>/login?error</code>：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124101656530.png" alt="image-20240124101656530" tabindex="0" loading="lazy"><figcaption>image-20240124101656530</figcaption></figure><p>重定向的<code>/login?error</code>再次发起请求会被<code>DefaultLoginPageGeneratingFilter</code>处理，又重定向到登录页，并显示错误信息：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124101737573.png" alt="image-20240124101737573" tabindex="0" loading="lazy"><figcaption>image-20240124101737573</figcaption></figure>`,100)]))}const c=n(t,[["render",o],["__file","Spring Security 6.x 系列【6】源码篇之表单登录认证流程.html.vue"]]),r=JSON.parse(`{"path":"/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%906%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.html","title":"源码篇之表单登录认证流程","lang":"zh-CN","frontmatter":{"title":"源码篇之表单登录认证流程","subtitle":"源码篇之表单登录认证流程","date":"2024-04-11T10:54:20.000Z","category":["Spring Security"],"tag":["Spring Security"],"order":6,"description":"1. 简介 本篇文章主要学习Spring Security中用户名密码认证的执行流程。 在前面我们已经提到了Spring Security是基于过滤器实现的，并介绍了过滤器及相关的认证组件。现在，我们将深入源码，详细了解用户名密码认证的整个流程。 2. 配置表单登录 在前面我们已经提到了Spring Boot自动配置了添加了默认的认证规则： 在使用Sp...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%906%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"源码篇之表单登录认证流程"}],["meta",{"property":"og:description","content":"1. 简介 本篇文章主要学习Spring Security中用户名密码认证的执行流程。 在前面我们已经提到了Spring Security是基于过滤器实现的，并介绍了过滤器及相关的认证组件。现在，我们将深入源码，详细了解用户名密码认证的整个流程。 2. 配置表单登录 在前面我们已经提到了Spring Boot自动配置了添加了默认的认证规则： 在使用Sp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119093845451.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-12T10:07:13.000Z"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:published_time","content":"2024-04-11T10:54:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-12T10:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"源码篇之表单登录认证流程\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119093845451.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119111427881.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119112512670.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119175448941.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119175819405.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240119180100744.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122110748749.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122112155371.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240122125832774.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123102917835.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123152053479.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123154914336.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123155116956.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123180418032.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123181242959.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240123182359205.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124101656530.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240124101737573.png\\"],\\"datePublished\\":\\"2024-04-11T10:54:20.000Z\\",\\"dateModified\\":\\"2024-09-12T10:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 配置表单登录","slug":"_2-配置表单登录","link":"#_2-配置表单登录","children":[]},{"level":2,"title":"3. 重定向登录页","slug":"_3-重定向登录页","link":"#_3-重定向登录页","children":[{"level":3,"title":"3.1  抛出 AccessDeniedException","slug":"_3-1-抛出-accessdeniedexception","link":"#_3-1-抛出-accessdeniedexception","children":[]},{"level":3,"title":"3.2 异常处理","slug":"_3-2-异常处理","link":"#_3-2-异常处理","children":[]},{"level":3,"title":"3.3 重定向","slug":"_3-3-重定向","link":"#_3-3-重定向","children":[]},{"level":3,"title":"3.4 生成默认页面","slug":"_3-4-生成默认页面","link":"#_3-4-生成默认页面","children":[]}]},{"level":2,"title":"4. 表单登录","slug":"_4-表单登录","link":"#_4-表单登录","children":[{"level":3,"title":"4.1  首先是进入AbstractAuthenticationProcessingFilter","slug":"_4-1-首先是进入abstractauthenticationprocessingfilter","link":"#_4-1-首先是进入abstractauthenticationprocessingfilter","children":[]},{"level":3,"title":"4.2 然后进入UsernamePasswordAuthenticationFilter","slug":"_4-2-然后进入usernamepasswordauthenticationfilter","link":"#_4-2-然后进入usernamepasswordauthenticationfilter","children":[]},{"level":3,"title":"4.3 最后进入 DaoAuthenticationProvider","slug":"_4-3-最后进入-daoauthenticationprovider","link":"#_4-3-最后进入-daoauthenticationprovider","children":[]},{"level":3,"title":"4.4 会话策略处理","slug":"_4-4-会话策略处理","link":"#_4-4-会话策略处理","children":[]}]}],"git":{"createdTime":1722310024000,"updatedTime":1726135633000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":13.35,"words":4004},"filePathRelative":"posts/Spring/Spring Security 6.x/Spring Security 6.x 系列【6】源码篇之表单登录认证流程.md","localizedDate":"2024年4月11日","excerpt":"<h2>1. 简介</h2>\\n<p>本篇文章主要学习<code>Spring Security</code>中<strong>用户名密码</strong>认证的执行流程。</p>\\n<p>在前面我们已经提到了<code>Spring Security</code>是基于过滤器实现的，并介绍了过滤器及相关的认证组件。现在，我们将深入源码，详细了解<strong>用户名密码认证</strong>的整个流程。</p>\\n<h2>2. 配置表单登录</h2>\\n<p>在前面我们已经提到了<code>Spring Boot</code>自动配置了添加了默认的认证规则：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#ABB2BF\\">@</span><span style=\\"color:#E5C07B\\">Bean</span></span>\\n<span class=\\"line\\"><span style=\\"color:#ABB2BF\\">@</span><span style=\\"color:#E5C07B\\">Order</span><span style=\\"color:#E06C75\\">(</span><span style=\\"color:#D19A66\\">2147483642</span><span style=\\"color:#E06C75\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E5C07B\\">SecurityFilterChain</span><span style=\\"color:#61AFEF\\"> defaultSecurityFilterChain</span><span style=\\"color:#E06C75\\">(</span><span style=\\"color:#E5C07B\\">HttpSecurity</span><span style=\\"color:#E06C75\\"> http) throws Exception {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic\\">    // 配置所有的Http请求必须认证</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E06C75\\">    ((</span><span style=\\"color:#E5C07B\\">AuthorizeHttpRequestsConfigurer</span><span style=\\"color:#ABB2BF\\">.</span><span style=\\"color:#E5C07B\\">AuthorizedUrl</span><span style=\\"color:#E06C75\\">)</span><span style=\\"color:#E5C07B\\">http</span><span style=\\"color:#ABB2BF\\">.</span><span style=\\"color:#61AFEF\\">authorizeHttpRequests</span><span style=\\"color:#ABB2BF\\">().</span><span style=\\"color:#61AFEF\\">anyRequest</span><span style=\\"color:#ABB2BF\\">()</span><span style=\\"color:#E06C75\\">)</span><span style=\\"color:#ABB2BF\\">.</span><span style=\\"color:#61AFEF\\">authenticated</span><span style=\\"color:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic\\">    // 开启表单登录</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E5C07B\\">    http</span><span style=\\"color:#ABB2BF\\">.</span><span style=\\"color:#61AFEF\\">formLogin</span><span style=\\"color:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#7F848E;font-style:italic\\">    // 开启Basic认证</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E5C07B\\">    http</span><span style=\\"color:#ABB2BF\\">.</span><span style=\\"color:#61AFEF\\">httpBasic</span><span style=\\"color:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#C678DD\\">    return</span><span style=\\"color:#E06C75\\"> (SecurityFilterChain)</span><span style=\\"color:#E5C07B\\">http</span><span style=\\"color:#ABB2BF\\">.</span><span style=\\"color:#61AFEF\\">build</span><span style=\\"color:#ABB2BF\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#E06C75\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{c as comp,r as data};
