import{_ as a,c as n,f as l,o as e}from"./app-OgId0ijo.js";const p={};function o(t,s){return e(),n("div",null,s[0]||(s[0]=[l(`<h2 id="spring-el表达式概述" tabindex="-1"><a class="header-anchor" href="#spring-el表达式概述"><span>Spring EL表达式概述</span></a></h2><p>Spring Expression Language（SpEL）是一种功能强大的表达式语言，广泛应用于Spring框架中。它允许在运行时动态地查询和操作对象图，支持属性访问、方法调用、集合操作、逻辑运算等多种功能。本文将详细介绍SpEL的背景、基本用法、应用场景及其在实际开发中的应用。</p><h2 id="spel基本用法" tabindex="-1"><a class="header-anchor" href="#spel基本用法"><span>SpEL基本用法</span></a></h2><h3 id="表达式解析器" tabindex="-1"><a class="header-anchor" href="#表达式解析器"><span>表达式解析器</span></a></h3><p>SpEL 的核心组件是 <code>SpelExpressionParser</code>，用于解析和评估表达式。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">ExpressionParser</span><span style="color:#E06C75;"> parser </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SpelExpressionParser</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="文本表达式" tabindex="-1"><a class="header-anchor" href="#文本表达式"><span>文本表达式</span></a></h3><p>SpEL 支持多种文本表达式类型，如字符串、数字、布尔值等。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Expression</span><span style="color:#E06C75;"> exp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&#39;Hello World&#39;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> message </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 输出: Hello World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1.024E+3&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">  // 1024  , 指数形式</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;0xFFFF&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 65535 , 十六进制</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;true&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">   // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;null&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量定义与访问" tabindex="-1"><a class="header-anchor" href="#变量定义与访问"><span>变量定义与访问</span></a></h3><p>通过 <code>EvaluationContext</code> 可以在表达式中使用变量。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">EvaluationContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StandardEvaluationContext</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">ExpressionParser</span><span style="color:#E06C75;"> parser </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SpelExpressionParser</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> greeting </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#greeting&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 输出: Hello, SpEL</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> cactusli </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;new String(&#39;cactusli&#39;)&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">   // 输出: cactusli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性访问" tabindex="-1"><a class="header-anchor" href="#属性访问"><span>属性访问</span></a></h3><p>SpEL 支持通过属性名称访问对象的属性。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> User</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> name; }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> name; }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">User</span><span style="color:#E06C75;"> user </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> User</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Alice&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setVariable</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">, user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#user.name&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 输出: Alice</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法调用和构造函数" tabindex="-1"><a class="header-anchor" href="#方法调用和构造函数"><span>方法调用和构造函数</span></a></h3><p>SpEL 支持调用对象的方法和构造函数。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> result </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&#39;Hello&#39;.concat(&#39; World&#39;)&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 输出: Hello World</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="集合的对象访问" tabindex="-1"><a class="header-anchor" href="#集合的对象访问"><span>集合的对象访问</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">EvaluationContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StandardEvaluationContext</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // 表达式的上下文,</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> list </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newArrayList</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> map </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Maps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newHashMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setVariable</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;person&quot;</span><span style="color:#ABB2BF;">, person);</span><span style="color:#7F848E;font-style:italic;">                        // 为了让表达式可以访问该对象, 先把对象放到上下文中</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setVariable</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;map&quot;</span><span style="color:#ABB2BF;">, map);</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setVariable</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">, list);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 列表</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#list[0]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">           // a , 下标</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// map</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#map[A]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">           // 1 , key</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#person.getAge()&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 18 , 方法访问</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对类型以及原生类的操作和控制" tabindex="-1"><a class="header-anchor" href="#对类型以及原生类的操作和控制"><span>对类型以及原生类的操作和控制</span></a></h3><p>T 操作符可以用于获取类型信息，并调用对象的静态方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">/</span><span style="color:#E06C75;"> 获取类型</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;T(java.util.Date)&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // class java.util.Date</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 访问静态成员(方法或属性)</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;T(Math).abs(-1)&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断类型</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&#39;asdf&#39; instanceof T(String)&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // true;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h3><p>Spring EL 支持大多数的数学、逻辑和关系操作符。</p><ul><li>关系操作符, 包括: eq(==), ne(!=), lt()&lt;, le(&lt;=), gt(&gt;), ge(&gt;=)</li><li>逻辑运算符, 包括: and(&amp;&amp;), or(||), not(!)</li><li>数学操作符, 包括: 加(+), 减(-), 乘(*), 除(/), 取模(%), 幂指数(^)</li><li>其他操作符, 如: 三元操作符, instanceof, 赋值(=), 正则匹配</li></ul><p>另外三元操作符有个特殊的用法, 一般用于赋默认值, 比如: parseExpression(&quot;#name?:&#39;defaultName&#39;&quot;), 如果变量name为空时设置默认值.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1 &gt; -1&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">         // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1 gt -1&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">        // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;true or true&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">   // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;true || true&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">   // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;2 ^ 3&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">          // 8</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;true ? true : false&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#name ?: &#39;default&#39;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // default</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1 instanceof T(Integer)&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&#39;5.00&#39; matches &#39;^-?</span><span style="color:#56B6C2;">\\d</span><span style="color:#98C379;">+(</span><span style="color:#56B6C2;">\\.\\d</span><span style="color:#98C379;">{2})?$&#39;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#person.name&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">  // Tom , 原来的值</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#person.name = &#39;Jim&#39;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // Jim , 赋值之后</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#person.name&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">  // Jim, 赋值起了作用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="避免空指针" tabindex="-1"><a class="header-anchor" href="#避免空指针"><span>避免空指针</span></a></h3><p>当访问一个对象的属性或方法时, 若该对象为null, 就会出现空指针异常. 安全导航会判断对象是否为null,如果是的话, 就返回null而不是抛出空指针异常. 使用方式就是在对象后面加个 <strong>?</strong>， 如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">java代码解读复制代码</span><span style="color:#7F848E;font-style:italic;">// 使用这种表达式可以避免抛出空指针异常</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#name?.toUpperCase()&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="this变量" tabindex="-1"><a class="header-anchor" href="#this变量"><span>this变量</span></a></h3><p>有个特殊的变量#this来表示当前的对象. 常用于集合的过滤</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//java代码解读复制代码// this 使用示例</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{1, 3, 5, 7}.?[#this &gt; 3]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // [5, 7]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合选择" tabindex="-1"><a class="header-anchor" href="#集合选择"><span>集合选择</span></a></h3><p>可以使用选择表达式对集合进行过滤或一些操作，从而生成一个新的符合选择条件的集合, 有如下一些形式:</p><ul><li><code>?[expression]</code>: 选择符合条件的元素</li><li><code>^[expression]</code>: 选择符合条件的第一个元素</li><li><code>$[expression]</code>: 选择符合条件的最后一个元素</li><li><code>![expression]</code>: 可对集合中的元素挨个进行处理</li></ul><p>对于集合可以配合#this变量进行过滤, 对于map, 可分别对keySet及valueSet分别使用key和value关键字;</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 集合</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{1, 3, 5, 7}.?[#this &gt; 3]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // [5, 7] , 选择元素</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{1, 3, 5, 7}.^[#this &gt; 3]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 5 , 第一个</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{1, 3, 5, 7}.$[#this &gt; 3]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 7 , 最后一个</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{1, 3, 5, 7}.![#this + 1]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // [2, 4, 6, 8] ,每个元素都加1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// map</span></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> map </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Maps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newHashMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">EvaluationContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StandardEvaluationContext</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setVariable</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;map&quot;</span><span style="color:#ABB2BF;">, map);</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#map.?[key &gt; 3]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context);</span><span style="color:#7F848E;font-style:italic;">             // {4=D}</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#map.?[value == &#39;A&#39;]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context);</span><span style="color:#7F848E;font-style:italic;">        // {1=A}</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#map.?[key &gt; 2 and key &lt; 4]&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context);</span><span style="color:#7F848E;font-style:italic;"> // {3=C}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板表达式" tabindex="-1"><a class="header-anchor" href="#模板表达式"><span>模板表达式</span></a></h3><p>模板表达式允许文字和表达式混合使用, 一般选择使用#{}作为一个定界符:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">EvaluationContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StandardEvaluationContext</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  //表达式的上下文,</span></span>
<span class="line"><span style="color:#E5C07B;">ExpressionParser</span><span style="color:#E06C75;"> parser </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SpelExpressionParser</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;他的名字为#{#person.name}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> TemplateParserContext</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(context);</span><span style="color:#7F848E;font-style:italic;"> // 他的名字为Tom</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42)]))}const c=a(p,[["render",o],["__file","Spring EL表达式.html.vue"]]),B=JSON.parse(`{"path":"/posts/Spring/SpringBase/Spring%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"Spring EL表达式","lang":"zh-CN","frontmatter":{"title":"Spring EL表达式","subtitle":"Spring EL表达式","date":"2024-09-17T10:15:26.000Z","category":["Spring"],"tag":["Spring"],"order":1,"description":"Spring EL表达式概述 Spring Expression Language（SpEL）是一种功能强大的表达式语言，广泛应用于Spring框架中。它允许在运行时动态地查询和操作对象图，支持属性访问、方法调用、集合操作、逻辑运算等多种功能。本文将详细介绍SpEL的背景、基本用法、应用场景及其在实际开发中的应用。 SpEL基本用法 表达式解析器 Sp...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Spring/SpringBase/Spring%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Spring EL表达式"}],["meta",{"property":"og:description","content":"Spring EL表达式概述 Spring Expression Language（SpEL）是一种功能强大的表达式语言，广泛应用于Spring框架中。它允许在运行时动态地查询和操作对象图，支持属性访问、方法调用、集合操作、逻辑运算等多种功能。本文将详细介绍SpEL的背景、基本用法、应用场景及其在实际开发中的应用。 SpEL基本用法 表达式解析器 Sp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-12T10:07:13.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-09-17T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-12T10:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring EL表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-17T10:15:26.000Z\\",\\"dateModified\\":\\"2024-09-12T10:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"Spring EL表达式概述","slug":"spring-el表达式概述","link":"#spring-el表达式概述","children":[]},{"level":2,"title":"SpEL基本用法","slug":"spel基本用法","link":"#spel基本用法","children":[{"level":3,"title":"表达式解析器","slug":"表达式解析器","link":"#表达式解析器","children":[]},{"level":3,"title":"文本表达式","slug":"文本表达式","link":"#文本表达式","children":[]},{"level":3,"title":"变量定义与访问","slug":"变量定义与访问","link":"#变量定义与访问","children":[]},{"level":3,"title":"属性访问","slug":"属性访问","link":"#属性访问","children":[]},{"level":3,"title":"方法调用和构造函数","slug":"方法调用和构造函数","link":"#方法调用和构造函数","children":[]},{"level":3,"title":"集合的对象访问","slug":"集合的对象访问","link":"#集合的对象访问","children":[]},{"level":3,"title":"对类型以及原生类的操作和控制","slug":"对类型以及原生类的操作和控制","link":"#对类型以及原生类的操作和控制","children":[]},{"level":3,"title":"操作符","slug":"操作符","link":"#操作符","children":[]},{"level":3,"title":"避免空指针","slug":"避免空指针","link":"#避免空指针","children":[]},{"level":3,"title":"this变量","slug":"this变量","link":"#this变量","children":[]},{"level":3,"title":"集合选择","slug":"集合选择","link":"#集合选择","children":[]},{"level":3,"title":"模板表达式","slug":"模板表达式","link":"#模板表达式","children":[]}]}],"git":{"createdTime":1726134012000,"updatedTime":1726135633000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":4.39,"words":1316},"filePathRelative":"posts/Spring/SpringBase/Spring EL表达式.md","localizedDate":"2024年9月17日","excerpt":"<h2>Spring EL表达式概述</h2>\\n<p>Spring Expression Language（SpEL）是一种功能强大的表达式语言，广泛应用于Spring框架中。它允许在运行时动态地查询和操作对象图，支持属性访问、方法调用、集合操作、逻辑运算等多种功能。本文将详细介绍SpEL的背景、基本用法、应用场景及其在实际开发中的应用。</p>\\n<h2>SpEL基本用法</h2>\\n<h3>表达式解析器</h3>\\n<p>SpEL 的核心组件是 <code>SpelExpressionParser</code>，用于解析和评估表达式。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"background-color:#282c34;color:#abb2bf\\"><pre class=\\"shiki one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"color:#E5C07B\\">ExpressionParser</span><span style=\\"color:#E06C75\\"> parser </span><span style=\\"color:#56B6C2\\">=</span><span style=\\"color:#C678DD\\"> new</span><span style=\\"color:#61AFEF\\"> SpelExpressionParser</span><span style=\\"color:#E06C75\\">()</span><span style=\\"color:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{c as comp,B as data};
