import{_ as l,e,o as p,c as o,b as s,g as a,f as t,h as r}from"./app-BGJUA9Vz.js";const i={},c=r(`<blockquote><p>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。</p></blockquote><ul><li>IO 常见类使用 <ul><li>IO常见类的使用 <ul><li><a href="#file%E7%9B%B8%E5%85%B3">File相关</a></li><li><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3">字节流相关</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">实现逐行输出文本文件的内容</a></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96--serializable--transient">序列化 &amp; Serializable &amp; transient</a></li><li>Java 中的网络支持: <ul><li><a href="#inetaddress">InetAddress</a></li><li><a href="#url">URL</a></li><li><a href="#sockets">Sockets</a></li><li><a href="#datagram">Datagram</a></li></ul></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="io常见类的使用" tabindex="-1"><a class="header-anchor" href="#io常见类的使用"><span><a href="#io%E5%B8%B8%E8%A7%81%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8">#</a> IO常见类的使用</span></a></h2><p>Java 的 I/O 大概可以分成以下几类:</p><ul><li>磁盘操作: File</li><li>字节操作: InputStream 和 OutputStream</li><li>字符操作: Reader 和 Writer</li><li>对象操作: Serializable</li><li>网络操作: Socket</li></ul><h3 id="file相关" tabindex="-1"><a class="header-anchor" href="#file相关"><span><a href="#file%E7%9B%B8%E5%85%B3">#</a> File相关</span></a></h3><p>File 类可以用于表示文件和目录的信息，但是它不表示文件的内容。</p><p>递归地列出一个目录下所有文件:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> listAllFiles</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">File</span><span style="color:#E06C75;"> dir) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (dir </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">dir</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exists</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">dir</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFile</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dir</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">File</span><span style="color:#E06C75;"> file </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> dir</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listFiles</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        listAllFiles</span><span style="color:#E06C75;">(file)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节流相关" tabindex="-1"><a class="header-anchor" href="#字节流相关"><span><a href="#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3">#</a> 字节流相关</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> copyFile</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> dist) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    FileInputStream</span><span style="color:#E06C75;"> in </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileInputStream</span><span style="color:#E06C75;">(src)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    FileOutputStream</span><span style="color:#E06C75;"> out </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileOutputStream</span><span style="color:#E06C75;">(dist)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    byte</span><span style="color:#E06C75;">[] buffer </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">20</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1024</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // read() 最多读取 buffer.length 个字节</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回的是实际读取的个数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回 -1 的时候表示读到 eof，即文件尾</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;"> !=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buffer);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    in</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现逐行输出文本文件的内容" tabindex="-1"><a class="header-anchor" href="#实现逐行输出文本文件的内容"><span><a href="#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">#</a> 实现逐行输出文本文件的内容</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> readFileContent</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> filePath) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    FileReader</span><span style="color:#E06C75;"> fileReader </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileReader</span><span style="color:#E06C75;">(filePath)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    BufferedReader</span><span style="color:#E06C75;"> bufferedReader </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BufferedReader</span><span style="color:#E06C75;">(fileReader)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> line</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> ((line </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> bufferedReader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLine</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(line);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在调用 BufferedReader 的 close() 方法时会去调用 Reader 的 close() 方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 因此只要一个 close() 调用即可</span></span>
<span class="line"><span style="color:#E5C07B;">    bufferedReader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化-serializable-transient" tabindex="-1"><a class="header-anchor" href="#序列化-serializable-transient"><span><a href="#%E5%BA%8F%E5%88%97%E5%8C%96-serializable-transient">#</a> 序列化 &amp; Serializable &amp; transient</span></a></h3><p>序列化就是将一个对象转换成字节序列，方便存储和传输。</p><ul><li>序列化: ObjectOutputStream.writeObject()</li><li>反序列化: ObjectInputStream.readObject()</li></ul><p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p><p><strong>Serializable</strong></p><p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ClassNotFoundException {</span></span>
<span class="line"><span style="color:#E5C07B;">    A</span><span style="color:#E06C75;"> a1 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> A</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;abc&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> objectFile </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;file/a1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    ObjectOutputStream</span><span style="color:#E06C75;"> objectOutputStream </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ObjectOutputStream</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> FileOutputStream</span><span style="color:#E06C75;">(objectFile))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    objectOutputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeObject</span><span style="color:#ABB2BF;">(a1);</span></span>
<span class="line"><span style="color:#E5C07B;">    objectOutputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    ObjectInputStream</span><span style="color:#E06C75;"> objectInputStream </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ObjectInputStream</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> FileInputStream</span><span style="color:#E06C75;">(objectFile))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    A</span><span style="color:#E06C75;"> a2 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (A) </span><span style="color:#E5C07B;">objectInputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readObject</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    objectInputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(a2);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> A</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    A</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> x</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> y</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;x = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;  &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;y = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>transient</strong></p><p>transient 关键字可以使一些属性不会被序列化。</p><p>ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[] elementData</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="java-中的网络支持" tabindex="-1"><a class="header-anchor" href="#java-中的网络支持"><span><a href="#java-%E4%B8%AD%E7%9A%84%E7%BD%91%E7%BB%9C%E6%94%AF%E6%8C%81">#</a> Java 中的网络支持:</span></a></h3><ul><li>InetAddress: 用于表示网络上的硬件资源，即 IP 地址；</li><li>URL: 统一资源定位符；</li><li>Sockets: 使用 TCP 协议实现网络通信；</li><li>Datagram: 使用 UDP 协议实现网络通信。</li></ul><h4 id="inetaddress" tabindex="-1"><a class="header-anchor" href="#inetaddress"><span><a href="#inetaddress">#</a> InetAddress</span></a></h4><p>没有公有的构造函数，只能通过静态方法来创建实例。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">InetAddress</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getByName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> host);</span></span>
<span class="line"><span style="color:#E5C07B;">InetAddress</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getByAddress</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">byte</span><span style="color:#ABB2BF;">[] address);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span><a href="#url">#</a> URL</span></a></h4><p>可以直接从 URL 中读取字节流数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) throws IOException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    URL</span><span style="color:#E06C75;"> url </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> URL</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;http://www.baidu.com&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 字节流 */</span></span>
<span class="line"><span style="color:#E5C07B;">    InputStream</span><span style="color:#E06C75;"> is </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">openStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 字符流 */</span></span>
<span class="line"><span style="color:#E5C07B;">    InputStreamReader</span><span style="color:#E06C75;"> isr </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InputStreamReader</span><span style="color:#E06C75;">(is</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;utf-8&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* 提供缓存功能 */</span></span>
<span class="line"><span style="color:#E5C07B;">    BufferedReader</span><span style="color:#E06C75;"> br </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BufferedReader</span><span style="color:#E06C75;">(isr)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> line</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> ((line </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> br</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLine</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(line);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    br</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sockets" tabindex="-1"><a class="header-anchor" href="#sockets"><span><a href="#sockets">#</a> Sockets</span></a></h4><ul><li>ServerSocket: 服务器端类</li><li>Socket: 客户端类</li><li>服务器和客户端通过 InputStream 和 OutputStream 进行输入输出。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h4 id="datagram" tabindex="-1"><a class="header-anchor" href="#datagram"><span><a href="#datagram">#</a> Datagram</span></a></h4><ul><li>DatagramSocket: 通信类</li><li>DatagramPacket: 数据包类</li></ul><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">#</a> 常见问题</span></a></h2><ul><li>Java 字节读取流的read方法返回int的原因</li></ul>`,39),B={href:"https://blog.csdn.net/congwiny/article/details/18922847",target:"_blank",rel:"noopener noreferrer"},d=s("h2",{id:"参考文章",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考文章"},[s("span",null,[s("a",{href:"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"},"#"),a(" 参考文章")])])],-1),y=s("hr",null,null,-1);function E(u,v){const n=e("ExternalLinkIcon");return p(),o("div",null,[c,s("p",null,[s("a",B,[a("https://blog.csdn.net/congwiny/article/details/18922847"),t(n)])]),d,y])}const b=l(i,[["render",E],["__file","IO 常见类使用.html.vue"]]),F=JSON.parse(`{"path":"/posts/Java/IO-NIO-AIO/IO%20%E5%B8%B8%E8%A7%81%E7%B1%BB%E4%BD%BF%E7%94%A8.html","title":"IO 常见类使用","lang":"zh-CN","frontmatter":{"title":"IO 常见类使用","subtitle":"Java，Java开发，Java 体系","date":"2024-03-11T14:36:26.000Z","category":["Java"],"tag":["Java","IO"],"order":6,"description":"本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。 IO 常见类使用 IO常见类的使用 File相关 字节流相关 实现逐行输出文本文件的内容 序列化 & Serializable & transient Java 中的网络支持: InetAddress URL Sockets Datagram 常见问题 参...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/IO-NIO-AIO/IO%20%E5%B8%B8%E8%A7%81%E7%B1%BB%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"IO 常见类使用"}],["meta",{"property":"og:description","content":"本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。 IO 常见类使用 IO常见类的使用 File相关 字节流相关 实现逐行输出文本文件的内容 序列化 & Serializable & transient Java 中的网络支持: InetAddress URL Sockets Datagram 常见问题 参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-17T09:29:14.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:published_time","content":"2024-03-11T14:36:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-17T09:29:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO 常见类使用\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/ClienteServidorSockets1521731145260.jpg\\"],\\"datePublished\\":\\"2024-03-11T14:36:26.000Z\\",\\"dateModified\\":\\"2024-03-17T09:29:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# IO常见类的使用","slug":"io常见类的使用","link":"#io常见类的使用","children":[{"level":3,"title":"# File相关","slug":"file相关","link":"#file相关","children":[]},{"level":3,"title":"# 字节流相关","slug":"字节流相关","link":"#字节流相关","children":[]},{"level":3,"title":"# 实现逐行输出文本文件的内容","slug":"实现逐行输出文本文件的内容","link":"#实现逐行输出文本文件的内容","children":[]},{"level":3,"title":"# 序列化 & Serializable & transient","slug":"序列化-serializable-transient","link":"#序列化-serializable-transient","children":[]},{"level":3,"title":"# Java 中的网络支持:","slug":"java-中的网络支持","link":"#java-中的网络支持","children":[]}]},{"level":2,"title":"# 常见问题","slug":"常见问题","link":"#常见问题","children":[]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1710139794000,"updatedTime":1710667754000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":3.46,"words":1039},"filePathRelative":"posts/Java/IO-NIO-AIO/IO 常见类使用.md","localizedDate":"2024年3月11日","excerpt":"<blockquote>\\n<p>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作。</p>\\n</blockquote>\\n<ul>\\n<li>IO 常见类使用\\n<ul>\\n<li>IO常见类的使用\\n<ul>\\n<li><a href=\\"#file%E7%9B%B8%E5%85%B3\\">File相关</a></li>\\n<li><a href=\\"#%E5%AD%97%E8%8A%82%E6%B5%81%E7%9B%B8%E5%85%B3\\">字节流相关</a></li>\\n<li><a href=\\"#%E5%AE%9E%E7%8E%B0%E9%80%90%E8%A1%8C%E8%BE%93%E5%87%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9\\">实现逐行输出文本文件的内容</a></li>\\n<li><a href=\\"#%E5%BA%8F%E5%88%97%E5%8C%96--serializable--transient\\">序列化 &amp; Serializable &amp; transient</a></li>\\n<li>Java 中的网络支持:\\n<ul>\\n<li><a href=\\"#inetaddress\\">InetAddress</a></li>\\n<li><a href=\\"#url\\">URL</a></li>\\n<li><a href=\\"#sockets\\">Sockets</a></li>\\n<li><a href=\\"#datagram\\">Datagram</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\\">常见问题</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{b as comp,F as data};
