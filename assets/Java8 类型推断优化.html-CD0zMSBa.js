import{_ as a,o as s,c as l,h as n}from"./app-CF_zTObI.js";const e={},p=n(`<blockquote><p>理解Java 8 类型推断需理解几个问题:</p><ul><li>什么是泛型</li><li>Java7对泛型推断做了哪些优化</li><li>Java8对此有做了哪些优化</li></ul></blockquote><ul><li>Java8 类型推断优化 <ul><li><a href="#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">简单理解泛型</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC">泛型的尴尬</a></li><li><a href="#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">java7的泛型类型推断改进</a></li><li><a href="#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">Java8的泛型类型推断改进</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><h2 id="简单理解泛型" tabindex="-1"><a class="header-anchor" href="#简单理解泛型"><span><a href="#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B">#</a> 简单理解泛型</span></a></h2><p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。</p><p>理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Apple</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> box </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Apple</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">box</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Apple</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">Apple</span><span style="color:#E06C75;"> apple </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> box</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码自身已表达的很清楚: box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Apple</span><span style="color:#E06C75;"> apple </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (Apple)</span><span style="color:#E5C07B;">box</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="泛型的尴尬" tabindex="-1"><a class="header-anchor" href="#泛型的尴尬"><span><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC">#</a> 泛型的尴尬</span></a></h2><p>泛型的最大优点是提供了程序的类型安全同时可以向后兼容，但也有尴尬的地方，就是每次定义时都要写明泛型的类型，这样显示指定不仅感觉有些冗长，最主要是很多程序员不熟悉泛型，因此很多时候不能够给出正确的类型参数，现在通过编译器自动推断泛型的参数类型，能够减少这样的情况，并提高代码可读性。</p><h2 id="java7的泛型类型推断改进" tabindex="-1"><a class="header-anchor" href="#java7的泛型类型推断改进"><span><a href="#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">#</a> java7的泛型类型推断改进</span></a></h2><p>在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> myMap </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可能觉得:老子在声明变量的的时候已经指明了参数类型，为毛还要在初始化对象时再指定? 幸好，在Java SE 7中，这种方式得以改进，现在你可以使用如下语句进行声明并赋值:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> myMap </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //注意后面的&quot;&lt;&gt;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这条语句中，编译器会根据变量声明时的泛型类型自动推断出实例化HashMap时的泛型类型。再次提醒一定要注意new HashMap后面的“&lt;&gt;”，只有加上这个“&lt;&gt;”才表示是自动类型推断，否则就是非泛型类型的HashMap，并且在使用编译器编译源代码时会给出一个警告提示。</p><p>但是: Java SE 7在创建泛型实例时的类型推断是有限制的: 只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。例如: 下面的例子在java 7无法正确编译(但现在在java8里面可以编译，因为根据方法参数来自动推断泛型的类型):</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> list </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">// 由于addAll期望获得Collection&lt;? extends String&gt;类型的参数，因此下面的语句无法通过</span></span>
<span class="line"><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAll</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;&gt;());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java8的泛型类型推断改进" tabindex="-1"><a class="header-anchor" href="#java8的泛型类型推断改进"><span><a href="#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B">#</a> Java8的泛型类型推断改进</span></a></h2><p>java8里面泛型的目标类型推断主要2个:</p><p>1.支持通过方法上下文推断泛型目标类型</p><p>2.支持在方法调用链路当中，泛型类型推断传递到最后一个方法</p><p>让我们看看官网的例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   static</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Z</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Z</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> nil</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { ... };</span></span>
<span class="line"><span style="color:#C678DD;">   static</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Z</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Z</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> cons</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Z</span><span style="color:#E06C75;font-style:italic;"> head</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Z</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">tail</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { ... };</span></span>
<span class="line"><span style="color:#E5C07B;">   E</span><span style="color:#61AFEF;"> head</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { ... }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据JEP101的特性，我们在调用上面方法的时候可以这样写</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//通过方法赋值的目标参数来自动推断泛型的类型</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nil</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//而不是显示的指定类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//List&lt;String&gt; l = List.&lt;String&gt;nil();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//通过前面方法参数类型推断泛型的类型</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cons</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nil</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//而不是显示的指定类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//List.cons(42, List.&lt;Integer&gt;nil());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</span></a></h2><p>以上是JEP101的特性内容了，Java作为静态语言的代表者，可以说类型系统相当丰富。导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。 虽然说是小进步，但对于我们天天写代码的程序员，肯定能带来巨大的作用，至少心情更愉悦了</p>`,28),o=[p];function t(r,c){return s(),l("div",null,o)}const i=a(e,[["render",t],["__file","Java8 类型推断优化.html.vue"]]),E=JSON.parse(`{"path":"/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96.html","title":"Java8 类型推断优化","lang":"zh-CN","frontmatter":{"title":"Java8 类型推断优化","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T15:06:55.000Z","category":["Java"],"tag":["Java","Java8 新特性"],"order":7,"description":"理解Java 8 类型推断需理解几个问题: 什么是泛型 Java7对泛型推断做了哪些优化 Java8对此有做了哪些优化 Java8 类型推断优化 简单理解泛型 泛型的尴尬 java7的泛型类型推断改进 Java8的泛型类型推断改进 总结 # 简单理解泛型 泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java8 类型推断优化"}],["meta",{"property":"og:description","content":"理解Java 8 类型推断需理解几个问题: 什么是泛型 Java7对泛型推断做了哪些优化 Java8对此有做了哪些优化 Java8 类型推断优化 简单理解泛型 泛型的尴尬 java7的泛型类型推断改进 Java8的泛型类型推断改进 总结 # 简单理解泛型 泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:29:54.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java8 新特性"}],["meta",{"property":"article:published_time","content":"2024-03-17T15:06:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:29:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8 类型推断优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-17T15:06:55.000Z\\",\\"dateModified\\":\\"2024-03-21T03:29:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 简单理解泛型","slug":"简单理解泛型","link":"#简单理解泛型","children":[]},{"level":2,"title":"# 泛型的尴尬","slug":"泛型的尴尬","link":"#泛型的尴尬","children":[]},{"level":2,"title":"# java7的泛型类型推断改进","slug":"java7的泛型类型推断改进","link":"#java7的泛型类型推断改进","children":[]},{"level":2,"title":"# Java8的泛型类型推断改进","slug":"java8的泛型类型推断改进","link":"#java8的泛型类型推断改进","children":[]},{"level":2,"title":"# 总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1710667754000,"updatedTime":1710991794000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":4.12,"words":1235},"filePathRelative":"posts/Java/Java8NewFeatures/Java8 类型推断优化.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>理解Java 8 类型推断需理解几个问题:</p>\\n<ul>\\n<li>什么是泛型</li>\\n<li>Java7对泛型推断做了哪些优化</li>\\n<li>Java8对此有做了哪些优化</li>\\n</ul>\\n</blockquote>\\n<ul>\\n<li>Java8 类型推断优化\\n<ul>\\n<li><a href=\\"#%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B3%9B%E5%9E%8B\\">简单理解泛型</a></li>\\n<li><a href=\\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%B0%B4%E5%B0%AC\\">泛型的尴尬</a></li>\\n<li><a href=\\"#java7%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B\\">java7的泛型类型推断改进</a></li>\\n<li><a href=\\"#java8%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E6%94%B9%E8%BF%9B\\">Java8的泛型类型推断改进</a></li>\\n<li><a href=\\"#%E6%80%BB%E7%BB%93\\">总结</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{i as comp,E as data};
