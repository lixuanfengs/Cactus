import{_ as s,o as n,c as a,h as l}from"./app-BGJUA9Vz.js";const e={},p=l(`<blockquote><p>本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。</p></blockquote><ul><li>Java 并发之线程基础 <ul><li>线程状态转换 <ul><li><a href="#%E6%96%B0%E5%BB%BAnew">新建(New)</a></li><li><a href="#%E5%8F%AF%E8%BF%90%E8%A1%8Crunnable">可运行(Runnable)</a></li><li><a href="#%E9%98%BB%E5%A1%9Eblocking">阻塞(Blocking)</a></li><li><a href="#%E6%97%A0%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85waiting">无限期等待(Waiting)</a></li><li><a href="#%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85timed-waiting">限期等待(Timed Waiting)</a></li><li><a href="#%E6%AD%BB%E4%BA%A1terminated">死亡(Terminated)</a></li></ul></li><li>线程使用方式 <ul><li><a href="#%E5%AE%9E%E7%8E%B0-runnable-%E6%8E%A5%E5%8F%A3">实现 Runnable 接口</a></li><li><a href="#%E5%AE%9E%E7%8E%B0-callable-%E6%8E%A5%E5%8F%A3">实现 Callable 接口</a></li><li><a href="#%E7%BB%A7%E6%89%BF-thread-%E7%B1%BB">继承 Thread 类</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3-vs-%E7%BB%A7%E6%89%BF-thread">实现接口 VS 继承 Thread</a></li></ul></li><li>基础线程机制 <ul><li><a href="#executor">Executor</a></li><li><a href="#daemon">Daemon</a></li><li><a href="#sleep">sleep()</a></li><li><a href="#yield">yield()</a></li></ul></li><li>线程中断 <ul><li><a href="#interruptedexception">InterruptedException</a></li><li><a href="#interrupted">interrupted()</a></li><li><a href="#executor-%E7%9A%84%E4%B8%AD%E6%96%AD%E6%93%8D%E4%BD%9C">Executor 的中断操作</a></li></ul></li><li>线程互斥同步 <ul><li><a href="#synchronized">synchronized</a></li><li><a href="#reentrantlock">ReentrantLock</a></li><li><a href="#%E6%AF%94%E8%BE%83">比较</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9">使用选择</a></li></ul></li><li>线程之间的协作 <ul><li><a href="#join">join()</a></li><li><a href="#wait-notify-notifyall">wait() notify() notifyAll()</a></li><li><a href="#await-signal-signalall">await() signal() signalAll()</a></li></ul></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解线程基础。@pdai</p><ul><li>线程有哪几种状态? 分别说明从一种状态到另一种状态转变有哪些方式?</li><li>通常线程有哪几种使用方式?</li><li>基础线程机制有哪些?</li><li>线程的中断方式有哪些?</li><li>线程的互斥同步方式有哪些? 如何比较和选择?</li><li>线程之间有哪些协作方式?</li></ul><h2 id="线程状态转换" tabindex="-1"><a class="header-anchor" href="#线程状态转换"><span><a href="#%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2">#</a> 线程状态转换</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ace830df-9919-48ca-91b5-60b193f593d2.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="新建-new" tabindex="-1"><a class="header-anchor" href="#新建-new"><span><a href="#%E6%96%B0%E5%BB%BA-new">#</a> 新建(New)</span></a></h3><p>创建后尚未启动。</p><h3 id="可运行-runnable" tabindex="-1"><a class="header-anchor" href="#可运行-runnable"><span><a href="#%E5%8F%AF%E8%BF%90%E8%A1%8C-runnable">#</a> 可运行(Runnable)</span></a></h3><p>可能正在运行，也可能正在等待 CPU 时间片。</p><p>包含了操作系统线程状态中的 Running 和 Ready。</p><h3 id="阻塞-blocking" tabindex="-1"><a class="header-anchor" href="#阻塞-blocking"><span><a href="#%E9%98%BB%E5%A1%9E-blocking">#</a> 阻塞(Blocking)</span></a></h3><p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p><h3 id="无限期等待-waiting" tabindex="-1"><a class="header-anchor" href="#无限期等待-waiting"><span><a href="#%E6%97%A0%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85-waiting">#</a> 无限期等待(Waiting)</span></a></h3><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>没有设置 Timeout 参数的 Object.wait() 方法</td><td>Object.notify() / Object.notifyAll()</td></tr><tr><td>没有设置 Timeout 参数的 Thread.join() 方法</td><td>被调用的线程执行完毕</td></tr><tr><td>LockSupport.park() 方法</td><td>-</td></tr></tbody></table><h3 id="限期等待-timed-waiting" tabindex="-1"><a class="header-anchor" href="#限期等待-timed-waiting"><span><a href="#%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85-timed-waiting">#</a> 限期等待(Timed Waiting)</span></a></h3><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。</p><p>调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。</p><p>调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。</p><p>睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。</p><p>阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>Thread.sleep() 方法</td><td>时间结束</td></tr><tr><td>设置了 Timeout 参数的 Object.wait() 方法</td><td>时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td>设置了 Timeout 参数的 Thread.join() 方法</td><td>时间结束 / 被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos() 方法</td><td>-</td></tr><tr><td>LockSupport.parkUntil() 方法</td><td>-</td></tr></tbody></table><h3 id="死亡-terminated" tabindex="-1"><a class="header-anchor" href="#死亡-terminated"><span><a href="#%E6%AD%BB%E4%BA%A1-terminated">#</a> 死亡(Terminated)</span></a></h3><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p><h2 id="线程使用方式" tabindex="-1"><a class="header-anchor" href="#线程使用方式"><span><a href="#%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F">#</a> 线程使用方式</span></a></h2><p>有三种使用线程的方法:</p><ul><li>实现 Runnable 接口；</li><li>实现 Callable 接口；</li><li>继承 Thread 类。</li></ul><p>实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。</p><h3 id="实现-runnable-接口" tabindex="-1"><a class="header-anchor" href="#实现-runnable-接口"><span><a href="#%E5%AE%9E%E7%8E%B0-runnable-%E6%8E%A5%E5%8F%A3">#</a> 实现 Runnable 接口</span></a></h3><p>需要实现 run() 方法。</p><p>通过 Thread 调用 start() 方法来启动线程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyRunnable</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    MyRunnable</span><span style="color:#E06C75;"> instance </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyRunnable</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> thread </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#E06C75;">(instance)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现-callable-接口" tabindex="-1"><a class="header-anchor" href="#实现-callable-接口"><span><a href="#%E5%AE%9E%E7%8E%B0-callable-%E6%8E%A5%E5%8F%A3">#</a> 实现 Callable 接口</span></a></h3><p>与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyCallable</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Integer</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) throws ExecutionException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> InterruptedException {</span></span>
<span class="line"><span style="color:#E5C07B;">    MyCallable</span><span style="color:#E06C75;"> mc </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyCallable</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    FutureTask</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> ft </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> FutureTask</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">(mc)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> thread </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#E06C75;">(ft)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ft</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承-thread-类" tabindex="-1"><a class="header-anchor" href="#继承-thread-类"><span><a href="#%E7%BB%A7%E6%89%BF-thread-%E7%B1%BB">#</a> 继承 Thread 类</span></a></h3><p>同样也是需要实现 run() 方法，因为 Thread 类也实现了 Runable 接口。</p><p>当调用 start() 方法启动一个线程时，虚拟机会将该线程放入就绪队列中等待被调度，当一个线程被调度时会执行该线程的 run() 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    MyThread</span><span style="color:#E06C75;"> mt </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    mt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现接口-vs-继承-thread" tabindex="-1"><a class="header-anchor" href="#实现接口-vs-继承-thread"><span><a href="#%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3-vs-%E7%BB%A7%E6%89%BF-thread">#</a> 实现接口 VS 继承 Thread</span></a></h3><p>实现接口会更好一些，因为:</p><ul><li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</li><li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li></ul><h2 id="基础线程机制" tabindex="-1"><a class="header-anchor" href="#基础线程机制"><span><a href="#%E5%9F%BA%E7%A1%80%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6">#</a> 基础线程机制</span></a></h2><h3 id="executor" tabindex="-1"><a class="header-anchor" href="#executor"><span><a href="#executor">#</a> Executor</span></a></h3><p>Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。</p><p>主要有三种 Executor:</p><ul><li>CachedThreadPool: 一个任务创建一个线程；</li><li>FixedThreadPool: 所有任务只能使用固定大小的线程；</li><li>SingleThreadExecutor: 相当于大小为 1 的 FixedThreadPool。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MyRunnable</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shutdown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="daemon" tabindex="-1"><a class="header-anchor" href="#daemon"><span><a href="#daemon">#</a> Daemon</span></a></h3><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。</p><p>当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。</p><p>main() 属于非守护线程。</p><p>使用 setDaemon() 方法将一个线程设置为守护线程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> thread </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MyRunnable</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDaemon</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep"><span><a href="#sleep">#</a> sleep()</span></a></h3><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。</p><p>sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="yield" tabindex="-1"><a class="header-anchor" href="#yield"><span><a href="#yield">#</a> yield()</span></a></h3><p>对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">yield</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程中断" tabindex="-1"><a class="header-anchor" href="#线程中断"><span><a href="#%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD">#</a> 线程中断</span></a></h2><p>一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。</p><h3 id="interruptedexception" tabindex="-1"><a class="header-anchor" href="#interruptedexception"><span><a href="#interruptedexception">#</a> InterruptedException</span></a></h3><p>通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。</p><p>对于以下代码，在 main() 中启动一个线程之后再中断它，由于线程中调用了 Thread.sleep() 方法，因此会抛出一个 InterruptedException，从而提前结束线程，不执行之后的语句。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> InterruptExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread1</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Thread run&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> thread1 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread1</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    thread1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    thread1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Main run&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Main</span><span style="color:#E06C75;"> run</span></span>
<span class="line"><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> sleep interrupted</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Native</span><span style="color:#ABB2BF;"> Method)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">InterruptExample</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lambda$main$0</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">InterruptExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">java</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">InterruptExample</span><span style="color:#E06C75;">$$</span><span style="color:#E5C07B;">Lambda</span><span style="color:#E06C75;">$1</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">713338599</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Unknown</span><span style="color:#ABB2BF;"> Source)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">java</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">745</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="interrupted" tabindex="-1"><a class="header-anchor" href="#interrupted"><span><a href="#interrupted">#</a> interrupted()</span></a></h3><p>如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。</p><p>但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> InterruptExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread2</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // ..</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Thread end&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> thread2 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread2</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    thread2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    thread2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;"> end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="executor-的中断操作" tabindex="-1"><a class="header-anchor" href="#executor-的中断操作"><span><a href="#executor-%E7%9A%84%E4%B8%AD%E6%96%AD%E6%93%8D%E4%BD%9C">#</a> Executor 的中断操作</span></a></h3><p>调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。</p><p>以下使用 Lambda 创建线程，相当于创建了一个匿名内部线程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Thread run&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shutdownNow</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Main run&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Main</span><span style="color:#E06C75;"> run</span></span>
<span class="line"><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> sleep interrupted</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Native</span><span style="color:#ABB2BF;"> Method)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">ExecutorInterruptExample</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lambda$main$0</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ExecutorInterruptExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">java</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">ExecutorInterruptExample</span><span style="color:#E06C75;">$$</span><span style="color:#E5C07B;">Lambda</span><span style="color:#E06C75;">$1</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">1160460865</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Unknown</span><span style="color:#ABB2BF;"> Source)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">util</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">concurrent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ThreadPoolExecutor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">runWorker</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ThreadPoolExecutor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">java</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">1142</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">util</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">concurrent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ThreadPoolExecutor$Worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ThreadPoolExecutor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">java</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">617</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    at </span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">java</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;">745</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只想中断 Executor 中的一个线程，可以通过使用 submit() 方法来提交一个线程，它会返回一个 Future&lt;?&gt; 对象，通过调用该对象的 cancel(true) 方法就可以中断线程。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> future </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">submit</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ..</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">future</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cancel</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="线程互斥同步" tabindex="-1"><a class="header-anchor" href="#线程互斥同步"><span><a href="#%E7%BA%BF%E7%A8%8B%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5">#</a> 线程互斥同步</span></a></h2><p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span><a href="#synchronized">#</a> synchronized</span></a></h3><p><strong>1. 同步一个代码块</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> func</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    synchronized</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它只作用于同一个对象，如果调用两个对象上的同步代码块，就不会进行同步。</p><p>对于以下代码，使用 ExecutorService 执行了两个线程，由于调用的是同一个对象的同步代码块，因此这两个线程会进行同步，当一个线程进入同步语句块时，另一个线程就必须等待。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SynchronizedExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> func1</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        synchronized</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(i </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    SynchronizedExample</span><span style="color:#E06C75;"> e1 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SynchronizedExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> e1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> e1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#D19A66;">0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span><span style="color:#D19A66;"> 0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以下代码，两个线程调用了不同对象的同步代码块，因此这两个线程就不需要同步。从输出结果可以看出，两个线程交叉执行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    SynchronizedExample</span><span style="color:#E06C75;"> e1 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SynchronizedExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    SynchronizedExample</span><span style="color:#E06C75;"> e2 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SynchronizedExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> e1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> e2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func1</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#D19A66;">0</span><span style="color:#D19A66;"> 0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span><span style="color:#D19A66;"> 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 同步一个方法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> func</span><span style="color:#E06C75;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它和同步代码块一样，作用于同一个对象。</p><p><strong>3. 同步一个类</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> func</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    synchronized</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">SynchronizedExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用于整个类，也就是说两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SynchronizedExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> func2</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        synchronized</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">SynchronizedExample</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(i </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    SynchronizedExample</span><span style="color:#E06C75;"> e1 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SynchronizedExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    SynchronizedExample</span><span style="color:#E06C75;"> e2 </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SynchronizedExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> e1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> e2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func2</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#D19A66;">0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span><span style="color:#D19A66;"> 0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 同步一个静态方法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> fun</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用于整个类。</p><h3 id="reentrantlock" tabindex="-1"><a class="header-anchor" href="#reentrantlock"><span><a href="#reentrantlock">#</a> ReentrantLock</span></a></h3><p>ReentrantLock 是 java.util.concurrent(J.U.C)包中的锁。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LockExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Lock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(i </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 确保释放锁，从而避免发生死锁。</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    LockExample</span><span style="color:#E06C75;"> lockExample </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> LockExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> lockExample</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> lockExample</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#D19A66;">0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span><span style="color:#D19A66;"> 0</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span><a href="#%E6%AF%94%E8%BE%83">#</a> 比较</span></a></h3><p><strong>1. 锁的实现</strong></p><p>synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的。</p><p><strong>2. 性能</strong></p><p>新版本 Java 对 synchronized 进行了很多优化，例如自旋锁等，synchronized 与 ReentrantLock 大致相同。</p><p><strong>3. 等待可中断</strong></p><p>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。</p><p>ReentrantLock 可中断，而 synchronized 不行。</p><p><strong>4. 公平锁</strong></p><p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。</p><p>synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的。</p><p><strong>5. 锁绑定多个条件</strong></p><p>一个 ReentrantLock 可以同时绑定多个 Condition 对象。</p><h3 id="使用选择" tabindex="-1"><a class="header-anchor" href="#使用选择"><span><a href="#%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9">#</a> 使用选择</span></a></h3><p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p><h2 id="线程之间的协作" tabindex="-1"><a class="header-anchor" href="#线程之间的协作"><span><a href="#%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C">#</a> 线程之间的协作</span></a></h2><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。</p><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span><a href="#join">#</a> join()</span></a></h3><p>在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p><p>对于以下代码，虽然 b 线程先启动，但是因为在 b 线程中调用了 a 线程的 join() 方法，b 线程会等待 a 线程结束才继续执行，因此最后能够保证 a 线程的输出先于 b 线程的输出。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> JoinExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> A</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> B</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> A</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        B</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">A</span><span style="color:#E06C75;font-style:italic;"> a</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> a;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        A</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> A</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        B</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> B</span><span style="color:#ABB2BF;">(a);</span></span>
<span class="line"><span style="color:#E5C07B;">        b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    JoinExample</span><span style="color:#E06C75;"> example </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> JoinExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    example</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E5C07B;">A</span></span>
<span class="line"><span style="color:#E5C07B;">B</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wait-notify-notifyall" tabindex="-1"><a class="header-anchor" href="#wait-notify-notifyall"><span><a href="#wait-notify-notifyall">#</a> wait() notify() notifyAll()</span></a></h3><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。</p><p>它们都属于 Object 的一部分，而不属于 Thread。</p><p>只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateExeception。</p><p>使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> WaitNotifyExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> before</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;before&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        notifyAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> after</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;after&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    WaitNotifyExample</span><span style="color:#E06C75;"> example </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WaitNotifyExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">after</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">before</span></span>
<span class="line"><span style="color:#E06C75;">after</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>wait() 和 sleep() 的区别</strong></p><ul><li>wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；</li><li>wait() 会释放锁，sleep() 不会。</li></ul><h3 id="await-signal-signalall" tabindex="-1"><a class="header-anchor" href="#await-signal-signalall"><span><a href="#await-signal-signalall">#</a> await() signal() signalAll()</span></a></h3><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。</p><p>使用 Lock 来获取一个 Condition 对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AwaitSignalExample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Lock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Condition</span><span style="color:#E06C75;"> condition </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCondition</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> before</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;before&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            condition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">signalAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> after</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            condition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;after&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutorService</span><span style="color:#E06C75;"> executorService </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    AwaitSignalExample</span><span style="color:#E06C75;"> example </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AwaitSignalExample</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">after</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">before</span></span>
<span class="line"><span style="color:#E06C75;">after</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,136),o=[p];function r(c,t){return n(),a("div",null,o)}const B=s(e,[["render",r],["__file","Java 并发之线程基础.html.vue"]]),y=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html","title":"Java 并发之线程基础","lang":"zh-CN","frontmatter":{"title":"Java 并发之线程基础","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:16:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":3,"description":"本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。 Java 并发之线程基础 线程状态转换 新建(New) 可运行(Runnable) 阻塞(Blocking) 无限期等待(Waiting) 限期等待(Timed Waiting) 死亡(Terminated) 线程使用方式 实现 Runnable 接口 实现 Callab...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/Java%20%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java 并发之线程基础"}],["meta",{"property":"og:description","content":"本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。 Java 并发之线程基础 线程状态转换 新建(New) 可运行(Runnable) 阻塞(Blocking) 无限期等待(Waiting) 限期等待(Timed Waiting) 死亡(Terminated) 线程使用方式 实现 Runnable 接口 实现 Callab..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/ace830df-9919-48ca-91b5-60b193f593d2.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:16:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发之线程基础\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/ace830df-9919-48ca-91b5-60b193f593d2.png\\"],\\"datePublished\\":\\"2024-03-07T10:16:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# 线程状态转换","slug":"线程状态转换","link":"#线程状态转换","children":[{"level":3,"title":"# 新建(New)","slug":"新建-new","link":"#新建-new","children":[]},{"level":3,"title":"# 可运行(Runnable)","slug":"可运行-runnable","link":"#可运行-runnable","children":[]},{"level":3,"title":"# 阻塞(Blocking)","slug":"阻塞-blocking","link":"#阻塞-blocking","children":[]},{"level":3,"title":"# 无限期等待(Waiting)","slug":"无限期等待-waiting","link":"#无限期等待-waiting","children":[]},{"level":3,"title":"# 限期等待(Timed Waiting)","slug":"限期等待-timed-waiting","link":"#限期等待-timed-waiting","children":[]},{"level":3,"title":"# 死亡(Terminated)","slug":"死亡-terminated","link":"#死亡-terminated","children":[]}]},{"level":2,"title":"# 线程使用方式","slug":"线程使用方式","link":"#线程使用方式","children":[{"level":3,"title":"# 实现 Runnable 接口","slug":"实现-runnable-接口","link":"#实现-runnable-接口","children":[]},{"level":3,"title":"# 实现 Callable 接口","slug":"实现-callable-接口","link":"#实现-callable-接口","children":[]},{"level":3,"title":"# 继承 Thread 类","slug":"继承-thread-类","link":"#继承-thread-类","children":[]},{"level":3,"title":"# 实现接口 VS 继承 Thread","slug":"实现接口-vs-继承-thread","link":"#实现接口-vs-继承-thread","children":[]}]},{"level":2,"title":"# 基础线程机制","slug":"基础线程机制","link":"#基础线程机制","children":[{"level":3,"title":"# Executor","slug":"executor","link":"#executor","children":[]},{"level":3,"title":"# Daemon","slug":"daemon","link":"#daemon","children":[]},{"level":3,"title":"# sleep()","slug":"sleep","link":"#sleep","children":[]},{"level":3,"title":"# yield()","slug":"yield","link":"#yield","children":[]}]},{"level":2,"title":"# 线程中断","slug":"线程中断","link":"#线程中断","children":[{"level":3,"title":"# InterruptedException","slug":"interruptedexception","link":"#interruptedexception","children":[]},{"level":3,"title":"# interrupted()","slug":"interrupted","link":"#interrupted","children":[]},{"level":3,"title":"# Executor 的中断操作","slug":"executor-的中断操作","link":"#executor-的中断操作","children":[]}]},{"level":2,"title":"# 线程互斥同步","slug":"线程互斥同步","link":"#线程互斥同步","children":[{"level":3,"title":"# synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"# ReentrantLock","slug":"reentrantlock","link":"#reentrantlock","children":[]},{"level":3,"title":"# 比较","slug":"比较","link":"#比较","children":[]},{"level":3,"title":"# 使用选择","slug":"使用选择","link":"#使用选择","children":[]}]},{"level":2,"title":"# 线程之间的协作","slug":"线程之间的协作","link":"#线程之间的协作","children":[{"level":3,"title":"# join()","slug":"join","link":"#join","children":[]},{"level":3,"title":"# wait() notify() notifyAll()","slug":"wait-notify-notifyall","link":"#wait-notify-notifyall","children":[]},{"level":3,"title":"# await() signal() signalAll()","slug":"await-signal-signalall","link":"#await-signal-signalall","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":12.66,"words":3798},"filePathRelative":"posts/Java/ThreadConcurrency/Java 并发之线程基础.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>本文主要概要性的介绍线程的基础，为后面的章节深入介绍Java并发的知识提供基础。</p>\\n</blockquote>\\n<ul>\\n<li>Java 并发之线程基础\\n<ul>\\n<li>线程状态转换\\n<ul>\\n<li><a href=\\"#%E6%96%B0%E5%BB%BAnew\\">新建(New)</a></li>\\n<li><a href=\\"#%E5%8F%AF%E8%BF%90%E8%A1%8Crunnable\\">可运行(Runnable)</a></li>\\n<li><a href=\\"#%E9%98%BB%E5%A1%9Eblocking\\">阻塞(Blocking)</a></li>\\n<li><a href=\\"#%E6%97%A0%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85waiting\\">无限期等待(Waiting)</a></li>\\n<li><a href=\\"#%E9%99%90%E6%9C%9F%E7%AD%89%E5%BE%85timed-waiting\\">限期等待(Timed Waiting)</a></li>\\n<li><a href=\\"#%E6%AD%BB%E4%BA%A1terminated\\">死亡(Terminated)</a></li>\\n</ul>\\n</li>\\n<li>线程使用方式\\n<ul>\\n<li><a href=\\"#%E5%AE%9E%E7%8E%B0-runnable-%E6%8E%A5%E5%8F%A3\\">实现 Runnable 接口</a></li>\\n<li><a href=\\"#%E5%AE%9E%E7%8E%B0-callable-%E6%8E%A5%E5%8F%A3\\">实现 Callable 接口</a></li>\\n<li><a href=\\"#%E7%BB%A7%E6%89%BF-thread-%E7%B1%BB\\">继承 Thread 类</a></li>\\n<li><a href=\\"#%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3-vs-%E7%BB%A7%E6%89%BF-thread\\">实现接口 VS 继承 Thread</a></li>\\n</ul>\\n</li>\\n<li>基础线程机制\\n<ul>\\n<li><a href=\\"#executor\\">Executor</a></li>\\n<li><a href=\\"#daemon\\">Daemon</a></li>\\n<li><a href=\\"#sleep\\">sleep()</a></li>\\n<li><a href=\\"#yield\\">yield()</a></li>\\n</ul>\\n</li>\\n<li>线程中断\\n<ul>\\n<li><a href=\\"#interruptedexception\\">InterruptedException</a></li>\\n<li><a href=\\"#interrupted\\">interrupted()</a></li>\\n<li><a href=\\"#executor-%E7%9A%84%E4%B8%AD%E6%96%AD%E6%93%8D%E4%BD%9C\\">Executor 的中断操作</a></li>\\n</ul>\\n</li>\\n<li>线程互斥同步\\n<ul>\\n<li><a href=\\"#synchronized\\">synchronized</a></li>\\n<li><a href=\\"#reentrantlock\\">ReentrantLock</a></li>\\n<li><a href=\\"#%E6%AF%94%E8%BE%83\\">比较</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E9%80%89%E6%8B%A9\\">使用选择</a></li>\\n</ul>\\n</li>\\n<li>线程之间的协作\\n<ul>\\n<li><a href=\\"#join\\">join()</a></li>\\n<li><a href=\\"#wait-notify-notifyall\\">wait() notify() notifyAll()</a></li>\\n<li><a href=\\"#await-signal-signalall\\">await() signal() signalAll()</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{B as comp,y as data};
