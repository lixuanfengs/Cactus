import{_ as p,e as i,o,c as t,b as n,g as s,f as l,h as e}from"./app-BP7jp-FQ.js";const c={},r=e(`<h1 id="java-基础之面向对象" tabindex="-1"><a class="header-anchor" href="#java-基础之面向对象"><span>Java 基础之面向对象</span></a></h1><blockquote><p>本文主要介绍Java OOP 面向对象基础和相关类图。</p></blockquote><ul><li>Java 基础 - 面向对象 <ul><li>三大特性 <ul><li><a href="#%E5%B0%81%E8%A3%85">封装</a></li><li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li></ul></li><li>类图 <ul><li><a href="#%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB-generalization">泛化关系 (Generalization)</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB-realization">实现关系 (Realization)</a></li><li><a href="#%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB-aggregation">聚合关系 (Aggregation)</a></li><li><a href="#%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB-composition">组合关系 (Composition)</a></li><li><a href="#%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB-association">关联关系 (Association)</a></li><li><a href="#%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-dependency">依赖关系 (Dependency)</a></li></ul></li></ul></li></ul><hr><h2 id="三大特性" tabindex="-1"><a class="header-anchor" href="#三大特性"><span>三大特性</span></a></h2><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span><a href="#%E5%B0%81%E8%A3%85">#</a> 封装</span></a></h3><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点:</p><ul><li>减少耦合: 可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><p>以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。</p><p>注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> gender</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getGender</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> gender </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;man&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;woman&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> work</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">18</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#ABB2BF;"> age </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> age </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(name </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; is working very hard!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(name </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; can&#39;t work any more!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span><a href="#%E7%BB%A7%E6%89%BF">#</a> 继承</span></a></h3><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Animal</span><span style="color:#E06C75;"> animal </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Cat</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span><a href="#%E5%A4%9A%E6%80%81">#</a> 多态</span></a></h3><p>多态分为编译时多态和运行时多态:</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件:</p><ul><li>继承</li><li>覆盖(重写)</li><li>向上转型</li></ul><p>下面的代码中，乐器类(Instrument)有两个子类: Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Instrument</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Instrument is playing...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Wind</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Instrument</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Wind is playing...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Percussion</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Instrument</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Percussion is playing...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Music</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Instrument</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">instruments</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#E5C07B;">        instruments</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Wind</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">        instruments</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Percussion</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Instrument</span><span style="color:#E06C75;"> instrument</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> instruments) {</span></span>
<span class="line"><span style="color:#E5C07B;">            instrument</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类图" tabindex="-1"><a class="header-anchor" href="#类图"><span><a href="#%E7%B1%BB%E5%9B%BE">#</a> 类图</span></a></h2>`,25),d={href:"https://www.planttext.com/",target:"_blank",rel:"noopener noreferrer"},B={href:"http://plantuml.com/",target:"_blank",rel:"noopener noreferrer"},v=e(`<h3 id="泛化关系-generalization" tabindex="-1"><a class="header-anchor" href="#泛化关系-generalization"><span><a href="#%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB-generalization">#</a> 泛化关系 (Generalization)</span></a></h3><p>用来描述继承关系，在 Java 中使用 extends 关键字。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@startuml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> Generalization</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Vehical</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Car</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Truck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Vehical</span><span style="color:#ABB2BF;"> &lt;|</span><span style="color:#61AFEF;">--</span><span style="color:#98C379;"> Car</span></span>
<span class="line"><span style="color:#61AFEF;">Vehical</span><span style="color:#ABB2BF;"> &lt;|</span><span style="color:#61AFEF;">--</span><span style="color:#98C379;"> Truck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现关系-realization" tabindex="-1"><a class="header-anchor" href="#实现关系-realization"><span><a href="#%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB-realization">#</a> 实现关系 (Realization)</span></a></h3><p>用来实现一个接口，在 Java 中使用 implements 关键字。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILK8IatCoQn.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@startuml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> Realization</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">interface</span><span style="color:#98C379;"> MoveBehavior</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Fly</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">MoveBehavior</span><span style="color:#ABB2BF;"> &lt;|</span><span style="color:#56B6C2;">..</span><span style="color:#98C379;"> Fly</span></span>
<span class="line"><span style="color:#61AFEF;">MoveBehavior</span><span style="color:#ABB2BF;"> &lt;|</span><span style="color:#56B6C2;">..</span><span style="color:#98C379;"> Run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="聚合关系-aggregation" tabindex="-1"><a class="header-anchor" href="#聚合关系-aggregation"><span><a href="#%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB-aggregation">#</a> 聚合关系 (Aggregation)</span></a></h3><p>表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@startuml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> Aggregation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Computer</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Keyboard</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Mouse</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Screen</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Computer</span><span style="color:#98C379;"> o--</span><span style="color:#98C379;"> Keyboard</span></span>
<span class="line"><span style="color:#61AFEF;">Computer</span><span style="color:#98C379;"> o--</span><span style="color:#98C379;"> Mouse</span></span>
<span class="line"><span style="color:#61AFEF;">Computer</span><span style="color:#98C379;"> o--</span><span style="color:#98C379;"> Screen</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合关系-composition" tabindex="-1"><a class="header-anchor" href="#组合关系-composition"><span><a href="#%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB-composition">#</a> 组合关系 (Composition)</span></a></h3><p>和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@startuml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> Composition</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Company</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> DepartmentA</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> DepartmentB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Company</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;">--</span><span style="color:#98C379;"> DepartmentA</span></span>
<span class="line"><span style="color:#61AFEF;">Company</span><span style="color:#E5C07B;"> *</span><span style="color:#98C379;">--</span><span style="color:#98C379;"> DepartmentB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关联关系-association" tabindex="-1"><a class="header-anchor" href="#关联关系-association"><span><a href="#%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB-association">#</a> 关联关系 (Association)</span></a></h3><p>表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@startuml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> Association</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> School</span></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Student</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">School</span><span style="color:#98C379;"> &quot;1&quot;</span><span style="color:#98C379;"> -</span><span style="color:#98C379;"> &quot;n&quot;</span><span style="color:#98C379;"> Student</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖关系-dependency" tabindex="-1"><a class="header-anchor" href="#依赖关系-dependency"><span><a href="#%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-dependency">#</a> 依赖关系 (Dependency)</span></a></h3><p>和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式:</p><ul><li>A 类是 B 类中的(某中方法的)局部变量；</li><li>A 类是 B 类方法当中的一个参数；</li><li>A 类向 B 类发送消息，从而影响 B 类发生变化；</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LOun2W9134NxVugmbJPp15d4LalxC4O.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@startuml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> Dependency</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">class</span><span style="color:#98C379;"> Vehicle</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    move(MoveBehavior</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">interface</span><span style="color:#98C379;"> MoveBehavior</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    move</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">note</span><span style="color:#98C379;"> &quot;MoveBehavior.move()&quot;</span><span style="color:#98C379;"> as</span><span style="color:#98C379;"> N</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Vehicle</span><span style="color:#98C379;"> .</span><span style="color:#ABB2BF;">.&gt; </span><span style="color:#98C379;">MoveBehavior</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Vehicle</span><span style="color:#98C379;"> ..</span><span style="color:#98C379;"> N</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,26);function y(u,m){const a=i("ExternalLinkIcon");return o(),t("div",null,[r,n("p",null,[s("以下类图使用 "),n("a",d,[s("PlantUML在新窗口打开"),l(a)]),s(" 绘制，更多语法及使用请参考: "),n("a",B,[s("http://plantuml.com/"),l(a)]),s(" 。")]),v])}const b=p(c,[["render",y],["__file","Java 基础之面向对象.html.vue"]]),F=JSON.parse(`{"path":"/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","title":"Java 基础之面向对象","lang":"zh-CN","frontmatter":{"title":"Java 基础之面向对象","subtitle":"Java，Java开发，Java 体系","date":"2024-03-05T17:46:59.000Z","category":["Java"],"tag":["Java"],"order":1,"description":"Java 基础之面向对象 本文主要介绍Java OOP 面向对象基础和相关类图。 Java 基础 - 面向对象 三大特性 封装 继承 多态 类图 泛化关系 (Generalization) 实现关系 (Realization) 聚合关系 (Aggregation) 组合关系 (Composition) 关联关系 (Association) 依赖关系 (...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java 基础之面向对象"}],["meta",{"property":"og:description","content":"Java 基础之面向对象 本文主要介绍Java OOP 面向对象基础和相关类图。 Java 基础 - 面向对象 三大特性 封装 继承 多态 类图 泛化关系 (Generalization) 实现关系 (Realization) 聚合关系 (Aggregation) 组合关系 (Composition) 关联关系 (Association) 依赖关系 (..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-03-05T17:46:59.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础之面向对象\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJyrBBKh.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILK8IatCoQn.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmJ4ylIar.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmpiyjo2_.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/SoWkIImgAStDuU8goIp9ILLmB2xEJyv.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/LOun2W9134NxVugmbJPp15d4LalxC4O.png\\"],\\"datePublished\\":\\"2024-03-05T17:46:59.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"三大特性","slug":"三大特性","link":"#三大特性","children":[{"level":3,"title":"# 封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"# 继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"# 多态","slug":"多态","link":"#多态","children":[]}]},{"level":2,"title":"# 类图","slug":"类图","link":"#类图","children":[{"level":3,"title":"# 泛化关系 (Generalization)","slug":"泛化关系-generalization","link":"#泛化关系-generalization","children":[]},{"level":3,"title":"# 实现关系 (Realization)","slug":"实现关系-realization","link":"#实现关系-realization","children":[]},{"level":3,"title":"# 聚合关系 (Aggregation)","slug":"聚合关系-aggregation","link":"#聚合关系-aggregation","children":[]},{"level":3,"title":"# 组合关系 (Composition)","slug":"组合关系-composition","link":"#组合关系-composition","children":[]},{"level":3,"title":"# 关联关系 (Association)","slug":"关联关系-association","link":"#关联关系-association","children":[]},{"level":3,"title":"# 依赖关系 (Dependency)","slug":"依赖关系-dependency","link":"#依赖关系-dependency","children":[]}]}],"git":{"createdTime":1709710899000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1502},"filePathRelative":"posts/Java/Foundation/Java 基础之面向对象.md","localizedDate":"2024年3月5日","excerpt":"\\n<blockquote>\\n<p>本文主要介绍Java OOP 面向对象基础和相关类图。</p>\\n</blockquote>\\n<ul>\\n<li>Java 基础 - 面向对象\\n<ul>\\n<li>三大特性\\n<ul>\\n<li><a href=\\"#%E5%B0%81%E8%A3%85\\">封装</a></li>\\n<li><a href=\\"#%E7%BB%A7%E6%89%BF\\">继承</a></li>\\n<li><a href=\\"#%E5%A4%9A%E6%80%81\\">多态</a></li>\\n</ul>\\n</li>\\n<li>类图\\n<ul>\\n<li><a href=\\"#%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB-generalization\\">泛化关系 (Generalization)</a></li>\\n<li><a href=\\"#%E5%AE%9E%E7%8E%B0%E5%85%B3%E7%B3%BB-realization\\">实现关系 (Realization)</a></li>\\n<li><a href=\\"#%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB-aggregation\\">聚合关系 (Aggregation)</a></li>\\n<li><a href=\\"#%E7%BB%84%E5%90%88%E5%85%B3%E7%B3%BB-composition\\">组合关系 (Composition)</a></li>\\n<li><a href=\\"#%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB-association\\">关联关系 (Association)</a></li>\\n<li><a href=\\"#%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB-dependency\\">依赖关系 (Dependency)</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{b as comp,F as data};
