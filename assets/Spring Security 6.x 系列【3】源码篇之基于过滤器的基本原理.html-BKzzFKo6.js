import{_ as s,o as n,c as a,h as l}from"./app-B-qHMeWY.js";const e={},o=l(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p><code>Spring Security</code>通过过滤器来支持<code>Servlet</code>，即在请求到达<code>Servlet之</code>前，通过过滤器进行认证和授权校验。如果用户合法且具备权限，则允许请求通过；反之，将会导致跳转到登录页或拒绝访问。因此，本文重点介绍<code>Spring Security</code>中与过滤器相关的知识。</p><p>类比<code>JAVA Web</code>中的<strong>过滤器</strong>，<code>Spring Security </code>中的<strong>过滤器</strong>进行了各种代理和增强，可以简单理解<code>Security </code>中的<strong>过滤器</strong>结构如下所示：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218174633340.png" alt="image-20231218174633340" tabindex="0" loading="lazy"><figcaption>image-20231218174633340</figcaption></figure><p><strong>简要说明：</strong></p><ol><li>请求到 DelegatingFilterProxy（代理过滤器）</li><li>调用 FilterChainProxy（过滤器链代理）</li><li>FilterChainProxy 根据请求，调用匹配的 SecurityFilterChain（Security中的过滤器链）</li><li>SecurityFilterChain 中的多个有序的 Security 过滤器对请求进行处理，检验是否登录、是否授权… 并做出相应处理</li></ol><h2 id="_2-过滤器" tabindex="-1"><a class="header-anchor" href="#_2-过滤器"><span>2. 过滤器</span></a></h2><p>大家对于Java Web中的过滤器（Filter）应该已经相当熟悉了。作为三大组件之一，过滤器在整个Web应用中扮演着重要而不可或缺的角色。</p><p>一个简单的<strong>过滤器</strong>如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用@ServletComponentScan添加在启动类上扫描该过滤器</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">WebFilter</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">filterName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;CactusFilter&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> urlPatterns</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#98C379;">&quot;/*&quot;</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CactusFilter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Filter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 过滤器对象进行初始化调用</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">FilterConfig</span><span style="color:#E06C75;font-style:italic;"> filterConfig</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> ServletException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ......</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 添加自定义过滤逻辑</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> servletRequest</span><span style="color:#7F848E;font-style:italic;">  请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> servletResponse</span><span style="color:#7F848E;font-style:italic;"> 响应</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> filterChain</span><span style="color:#7F848E;font-style:italic;"> 过滤器链，由多个过滤器组成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doFilter</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ServletRequest</span><span style="color:#E06C75;font-style:italic;"> servletRequest</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ServletResponse</span><span style="color:#E06C75;font-style:italic;"> servletResponse</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">FilterChain</span><span style="color:#E06C75;font-style:italic;"> filterChain</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ServletException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;对请求进行某些自定义操作&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 激活下一个过滤器的的doFilter 方法，最后一个激活Servlet </span></span>
<span class="line"><span style="color:#E5C07B;">        filterChain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;对响应进行某些自定义操作&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 过滤器销毁对象前被调用</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> destroy</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ......</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218175833151.png" alt="image-20231218175833151" tabindex="0" loading="lazy"><figcaption>image-20231218175833151</figcaption></figure><p>客户端向应用程序发送请求时，运行容器会创建一个FilterChain（过滤器链），其中包含所有Filter实例和Servlet。这些过滤器根据请求URI路径来处理请求和响应。</p><p>在Spring Boot Web应用程序中，通常只有一个Servlet实例，即DispatcherServlet，但是通常存在多个过滤器，它们按照指定的顺序共同协作。</p><h2 id="_3-security-过滤器-security-filter" tabindex="-1"><a class="header-anchor" href="#_3-security-过滤器-security-filter"><span>3. Security 过滤器（Security Filter）</span></a></h2><p><code>Spring Security </code>中的过滤器是通过<code>SecurityFilterChain API </code>插入<code>FilterChainProxy</code>中的，<code>Filter </code>实例的顺序非常重要。</p><p><code>Spring Security</code>中所有的过滤器按照顺序如下所示（后续会详细介绍）：</p><ul><li>ForceEagerSessionCreationFilter</li><li>ChannelProcessingFilter</li><li>WebAsyncManagerIntegrationFilter</li><li>SecurityContextPersistenceFilter</li><li>HeaderWriterFilter</li><li>CorsFilter</li><li>CsrfFilter</li><li>LogoutFilter</li><li>OAuth2AuthorizationRequestRedirectFilter</li><li>Saml2WebSsoAuthenticationRequestFilter</li><li>X509AuthenticationFilter</li><li>AbstractPreAuthenticatedProcessingFilter</li><li>CasAuthenticationFilter</li><li>OAuth2LoginAuthenticationFilter</li><li>Saml2WebSsoAuthenticationFilter</li><li>UsernamePasswordAuthenticationFilter</li><li>DefaultLoginPageGeneratingFilter</li><li>DefaultLogoutPageGeneratingFilter</li><li>ConcurrentSessionFilter</li><li>DigestAuthenticationFilter</li><li>BearerTokenAuthenticationFilter</li><li>BasicAuthenticationFilter</li><li>RequestCacheAwareFilter</li><li>SecurityContextHolderAwareRequestFilter</li><li>JaasApiIntegrationFilter</li><li>RememberMeAuthenticationFilter</li><li>AnonymousAuthenticationFilter</li><li>OAuth2AuthorizationCodeGrantFilter</li><li>SessionManagementFilter</li><li>ExceptionTranslationFilter</li><li>FilterSecurityInterceptor</li><li>SwitchUserFilter</li></ul><h2 id="_4-委派代理过滤器-delegatingfilterproxy" tabindex="-1"><a class="header-anchor" href="#_4-委派代理过滤器-delegatingfilterproxy"><span>4. 委派代理过滤器（DelegatingFilterProxy）</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218182806637.png" alt="image-20231218182806637" tabindex="0" loading="lazy"><figcaption>image-20231218182806637</figcaption></figure><p>在Spring的spring-web模块中，提供了DelegatingFilterProxy类用于代理过滤器，使得可以方便地利用Spring容器来管理过滤器。在请求响应的流程中，DelegatingFilterProxy会从容器中查找已注册的过滤器Bean对象，然后调用该Bean的过滤方法。</p><p>可以看到该类中包含了<code>Spring</code>容器对象和被代理的过滤器：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/1702949368735.jpg" alt="1702949368735" tabindex="0" loading="lazy"><figcaption>1702949368735</figcaption></figure><p>在 <a href="">2. 过滤器</a> 步骤中实现的过滤器，是使用<code>Servlet</code>容器自己的标准来注册，所以这时并不会被<code>Spring</code>容器管理，这时就可以使用<code>DelegatingFilterProxy</code>进行代理，实现代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;cactusFilter&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CactusFilter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Filter</span><span style="color:#ABB2BF;"> {</span><span style="color:#7F848E;font-style:italic;">//...... }</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyConfig</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> DelegatingFilterProxyRegistrationBean</span><span style="color:#61AFEF;"> delegatingFilterProxyRegistrationBean</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">        DelegatingFilterProxyRegistrationBean</span><span style="color:#E06C75;"> filterProxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DelegatingFilterProxyRegistrationBean</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cactusFilter&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        filterProxy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addUrlPatterns</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/*&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        filterProxy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setOrder</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> filterProxy;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-过滤器链代理-filterchainproxy" tabindex="-1"><a class="header-anchor" href="#_5-过滤器链代理-filterchainproxy"><span>5.过滤器链代理（FilterChainProxy）</span></a></h2><p><code>Spring Security</code>提供了<code>FilterChainProxy</code>代理类，它是<code>Spring Security</code>的核心组件，用于代理<code>Spring Security</code>中的所有<code>SecurityFilterChain</code>。每个<code>SecurityFilterChain</code>中包含多个由<code>Spring Security</code>声明的<code>Filter</code>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219100525856.png" alt="image-20231219100525856" tabindex="0" loading="lazy"><figcaption>image-20231219100525856</figcaption></figure><p>FilterChainProxy本质上是一个特殊的过滤器，通过DelegatingFilterProxy进行代理，因此它也是一个Bean对象。在Security过滤器链中，过滤器通常都是Bean对象，通过FilterChainProxy进行注册。与直接向Servlet容器或DelegatingFilterProxy注册相比，FilterChainProxy的注册具有许多优势：</p><ul><li>它为Spring Security的所有Servlet支持提供了一个起点。如果需要对Spring Security的Servlet支持进行故障诊断，可以在FilterChainProxy中添加一个调试点。</li><li>可以执行一些被视为不可有可无的任务。例如，清除了SecurityContext以避免内存泄漏，并应用Spring Security的HttpFirewall来保护应用程序免受某些类型的攻击。</li><li>在确定何时应该调用SecurityFilterChain方面提供了更大的灵活性。在Servlet容器中，Filter实例仅基于URL被调用。FilterChainProxy可以通过使用RequestMatcher接口，根据HttpServletRequest中的任何内容来确定调用。</li></ul><p><code>FilterChainProxy </code> 在整个流程中的作用如下图：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219104612610.png" alt="image-20231219104612610" tabindex="0" loading="lazy"><figcaption>image-20231219104612610</figcaption></figure><h2 id="_6-security-过滤器链-securityfilterchain" tabindex="-1"><a class="header-anchor" href="#_6-security-过滤器链-securityfilterchain"><span>6. Security 过滤器链（SecurityFilterChain）</span></a></h2><p>在Servlet中，一组过滤器构成了FilterChain（过滤器链）。对于SecurityFilterChain的理解就变得相对简单了，它是Spring Security提供的过滤器链，用于管理其自身的所有过滤器，如上述流程图所示。FilterChainProxy可以利用SecurityFilterChain来确定当前请求应该调用哪些Spring Security Filter实例。</p><p>在整个流程中，<code> FilterChainProxy</code> 决定应该使用哪个<code> SecurityFilterChain</code>，只有第一个匹配的<code>SecurityFilterChain</code>被调用。</p><p>如下图中，如果请求的<code>URL</code>是<code> /api/**/</code>，那么会匹配到左边的<code>SecurityFilterChain</code>，如果都不匹配，则会调用支持<code>/**</code>的<code> SecurityFilterChain</code>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219110053266.png" alt="image-20231219110053266" tabindex="0" loading="lazy"><figcaption>image-20231219110053266</figcaption></figure><h2 id="_7-源码分析" tabindex="-1"><a class="header-anchor" href="#_7-源码分析"><span>7. 源码分析</span></a></h2><h3 id="_7-1-自动配置" tabindex="-1"><a class="header-anchor" href="#_7-1-自动配置"><span>7.1 自动配置</span></a></h3><p>在入门篇中，我们只引入了一个<code>spring-boot-starter-security</code>依赖，就可以进行<strong>登录认证</strong>，得益于<code>Spring Boot</code>的自动配置。在<code>spring-boot-autoconfigure</code>模块中集成了对<code>Spring Security</code>的自动配置：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219110520871.png" alt="image-20231219110520871" tabindex="0" loading="lazy"><figcaption>image-20231219110520871</figcaption></figure><p>默认的配置是由 <code>SecurityAutoConfiguration</code> 和<code>UserDetailsServiceAutoConfiguration</code>这两个自动配置类实现的。</p><p><code>SecurityAutoConfiguration </code>主要是导入 <code>SpringBootWebSecurityConfiguration </code>配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">AutoConfiguration</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">    before</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#E5C07B;">UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConditionalOnClass</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">DefaultAuthenticationEventPublisher</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">EnableConfigurationProperties</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">SecurityProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Import</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">SpringBootWebSecurityConfiguration</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> SecurityDataConfiguration</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SecurityAutoConfiguration</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> SecurityAutoConfiguration</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 认证事件发布者</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ConditionalOnMissingBean</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">AuthenticationEventPublisher</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> DefaultAuthenticationEventPublisher</span><span style="color:#61AFEF;"> authenticationEventPublisher</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ApplicationEventPublisher</span><span style="color:#E06C75;font-style:italic;"> publisher</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DefaultAuthenticationEventPublisher</span><span style="color:#ABB2BF;">(publisher);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>SpringBootWebSecurityConfiguration </code>配置类中，默认添加了<code> @EnableWebSecurity</code>注解启用了<code>Spring Security</code>应用安全配置，并添加了一个<code>SecurityFilterChain</code>，添加了<code>Http</code>相关规则：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">    proxyBeanMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConditionalOnWebApplication</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">    type</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Type</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SERVLET</span></span>
<span class="line"><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SpringBootWebSecurityConfiguration</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    SpringBootWebSecurityConfiguration</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Configuration</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">        proxyBeanMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E06C75;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ConditionalOnMissingBean</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">        name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#98C379;">&quot;springSecurityFilterChain&quot;</span><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ConditionalOnClass</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">EnableWebSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">EnableWebSecurity</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> WebSecurityEnablerConfiguration</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        WebSecurityEnablerConfiguration</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Configuration</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">        proxyBeanMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E06C75;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ConditionalOnDefaultWebSecurity</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SecurityFilterChainConfiguration</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        SecurityFilterChainConfiguration</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Order</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">2147483642</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        SecurityFilterChain</span><span style="color:#61AFEF;"> defaultSecurityFilterChain</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpSecurity</span><span style="color:#E06C75;font-style:italic;"> http</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 配置所有的Http请求必须认证</span></span>
<span class="line"><span style="color:#E5C07B;">            http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">authorizeHttpRequests</span><span style="color:#ABB2BF;">((requests) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                ((</span><span style="color:#E5C07B;">AuthorizeHttpRequestsConfigurer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">AuthorizedUrl</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">requests</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">anyRequest</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">authenticated</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 开启表单登录</span></span>
<span class="line"><span style="color:#E5C07B;">            http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">formLogin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 开启 Basic 认证</span></span>
<span class="line"><span style="color:#E5C07B;">            http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpBasic</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> (SecurityFilterChain)</span><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UserDetailsServiceAutoConfiguration </code>则只是通过<code>Yml</code>配置配置文件生成了一个默认的用户，以便于开发测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">AutoConfiguration</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConditionalOnClass</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">AuthenticationManager</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConditionalOnBean</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">ObjectPostProcessor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConditionalOnMissingBean</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">    value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#E5C07B;">AuthenticationManager</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> AuthenticationProvider</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> UserDetailsService</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> AuthenticationManagerResolver</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">}</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">    type</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#98C379;">&quot;org.springframework.security.oauth2.jwt.JwtDecoder&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;org.springframework.security.oauth2.client.registration.ClientRegistrationRepository&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;"> &quot;org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository&quot;</span><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> NOOP_PASSWORD_PREFIX </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;{noop}&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Pattern</span><span style="color:#E06C75;"> PASSWORD_ALGORITHM_PATTERN </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;^</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">{.+}.*$&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> logger </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LogFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> UserDetailsServiceAutoConfiguration</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> InMemoryUserDetailsManager</span><span style="color:#61AFEF;"> inMemoryUserDetailsManager</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SecurityProperties</span><span style="color:#E06C75;font-style:italic;"> properties</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ObjectProvider</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">PasswordEncoder</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">passwordEncoder</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        SecurityProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> properties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUser</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">roles</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRoles</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InMemoryUserDetailsManager</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> UserDetails</span><span style="color:#ABB2BF;">[]{</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withUsername</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">password</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOrDeducePassword</span><span style="color:#ABB2BF;">(user, (PasswordEncoder)</span><span style="color:#E5C07B;">passwordEncoder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIfAvailable</span><span style="color:#ABB2BF;">())).</span><span style="color:#61AFEF;">roles</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toStringArray</span><span style="color:#ABB2BF;">(roles)).</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()});</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getOrDeducePassword</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SecurityProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PasswordEncoder</span><span style="color:#E06C75;font-style:italic;"> encoder</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> password</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPassword</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isPasswordGenerated</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;%n%nUsing generated security password: %s%n%nThis generated password is for development use only. Your security configuration must be updated before running your application in production.%n&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPassword</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> encoder </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">PASSWORD_ALGORITHM_PATTERN</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">matcher</span><span style="color:#ABB2BF;">(password).</span><span style="color:#61AFEF;">matches</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">?</span><span style="color:#98C379;"> &quot;{noop}&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> password </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> password;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>SecurityFilterAutoConfiguration</code>自动配置类中，名称为<code>springSecurityFilterChain</code>的过滤器将会被代理：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219111837486.png" alt="image-20231219111837486" tabindex="0" loading="lazy"><figcaption>image-20231219111837486</figcaption></figure><h3 id="_7-2-defaultsecurityfilterchain" tabindex="-1"><a class="header-anchor" href="#_7-2-defaultsecurityfilterchain"><span>7.2 DefaultSecurityFilterChain</span></a></h3><p>如前所述，<code>SecurityFilterChain</code>包含所有过滤器。<code>Spring Security</code>提供了默认的实现类<code>DefaultSecurityFilterChain</code>，通过<code>HttpSecurity.build</code>方法构建。可以注意到，它默认匹配所有请求，并包含了<strong>15</strong>个过滤器。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219112457326.png" alt="image-20231219112457326" tabindex="0" loading="lazy"><figcaption>image-20231219112457326</figcaption></figure><h3 id="_7-3-springsecurityfilterchain" tabindex="-1"><a class="header-anchor" href="#_7-3-springsecurityfilterchain"><span>7.3 springSecurityFilterChain</span></a></h3><p>在<code>SecurityFilterAutoConfiguration</code>自动配置类中，声明名称为<code>springSecurityFilterChain</code>的过滤器将被代理。那么，这个过滤器是在哪里加载的呢？</p><p>首先，在<code>SpringBootWebSecurityConfiguration</code>配置类中，默认添加了<code>@EnableWebSecurity</code>注解，启用了Spring Security应用安全配置。<code>@EnableWebSecurity</code>会导入多个配置类:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Documented</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Import</span><span style="color:#E06C75;">({</span><span style="color:#E5C07B;">WebSecurityConfiguration</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> SpringWebMvcImportSelector</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> OAuth2ImportSelector</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpSecurityConfiguration</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">EnableGlobalAuthentication</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> EnableWebSecurity</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#61AFEF;"> debug</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">default</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>WebSecurityConfiguration</code>中，会构建 <code>springSecurityFilterChain</code> 过滤器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Bean</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#D19A66;">    name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#98C379;">&quot;springSecurityFilterChain&quot;</span><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> Filter</span><span style="color:#61AFEF;"> springSecurityFilterChain</span><span style="color:#E06C75;">() throws Exception {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 检查是否已经配置了 securityFilterChain</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> hasFilterChain </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityFilterChains</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果没有配置过过滤器链，则定义一个基础链</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">hasFilterChain) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSecurityFilterChainBuilder</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 要求所有请求都需要身份验证</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">httpSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">authorizeHttpRequests</span><span style="color:#ABB2BF;">((authorize) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                ((</span><span style="color:#E5C07B;">AuthorizeHttpRequestsConfigurer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">AuthorizedUrl</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">authorize</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">anyRequest</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">authenticated</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 启用表单和基本身份验证</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">httpSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">formLogin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">httpSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpBasic</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withDefaults</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 构建并返回安全过滤器链</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> (SecurityFilterChain)</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">httpSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 添加所配置的安全过滤器链</span></span>
<span class="line"><span style="color:#E5C07B;">    Iterator</span><span style="color:#E06C75;"> var2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">securityFilterChains</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">var2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        SecurityFilterChain</span><span style="color:#E06C75;"> securityFilterChain </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (SecurityFilterChain)</span><span style="color:#E5C07B;">var2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSecurityFilterChainBuilder</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> securityFilterChain;</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 添加自定义的 WebSecurityCustomizer</span></span>
<span class="line"><span style="color:#E06C75;">    var2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webSecurityCustomizers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">var2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        WebSecurityCustomizer</span><span style="color:#E06C75;"> customizer </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (WebSecurityCustomizer)</span><span style="color:#E5C07B;">var2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        customizer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">customize</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webSecurity</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 构建并返回最终的 Spring Security 过滤器链</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (Filter)</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webSecurity</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219123937347.png" alt="image-20231219123937347" tabindex="0" loading="lazy"><figcaption>image-20231219123937347</figcaption></figure><p><code>springSecurityFilterChain</code> 会被<code>FilterChainProxy</code>代理，注册为<code>Bean</code>，并存放了所有的<code>SecurityFilterChain</code>：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/1702961016571.jpg" alt="1702961016571" tabindex="0" loading="lazy"><figcaption>1702961016571</figcaption></figure><p>springSecurityFilterChain 因为之前被声明过被 DelegatingFilterProxy 进行关联代理，最终经过层层代理，会生成完整的 DelegatingFilterProx y类型过滤器，等待请求，并执行相关逻辑。</p>`,62),p=[o];function i(t,r){return n(),a("div",null,p)}const y=s(e,[["render",i],["__file","Spring Security 6.x 系列【3】源码篇之基于过滤器的基本原理.html.vue"]]),B=JSON.parse(`{"path":"/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%903%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E5%9F%BA%E4%BA%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html","title":"源码篇之基于过滤器的基本原理","lang":"zh-CN","frontmatter":{"title":"源码篇之基于过滤器的基本原理","subtitle":"源码篇之基于过滤器的基本原理","date":"2024-04-11T10:54:20.000Z","category":["Spring Security"],"tag":["Spring Security"],"order":3,"description":"1. 简介 Spring Security通过过滤器来支持Servlet，即在请求到达Servlet之前，通过过滤器进行认证和授权校验。如果用户合法且具备权限，则允许请求通过；反之，将会导致跳转到登录页或拒绝访问。因此，本文重点介绍Spring Security中与过滤器相关的知识。 类比JAVA Web中的过滤器，Spring Security 中的...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%903%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E5%9F%BA%E4%BA%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"源码篇之基于过滤器的基本原理"}],["meta",{"property":"og:description","content":"1. 简介 Spring Security通过过滤器来支持Servlet，即在请求到达Servlet之前，通过过滤器进行认证和授权校验。如果用户合法且具备权限，则允许请求通过；反之，将会导致跳转到登录页或拒绝访问。因此，本文重点介绍Spring Security中与过滤器相关的知识。 类比JAVA Web中的过滤器，Spring Security 中的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218174633340.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-12T10:07:13.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:published_time","content":"2024-04-11T10:54:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-12T10:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"源码篇之基于过滤器的基本原理\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218174633340.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218175833151.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231218182806637.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/1702949368735.jpg\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219100525856.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219104612610.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219110053266.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219110520871.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219111837486.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219112457326.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20231219123937347.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/1702961016571.jpg\\"],\\"datePublished\\":\\"2024-04-11T10:54:20.000Z\\",\\"dateModified\\":\\"2024-09-12T10:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 过滤器","slug":"_2-过滤器","link":"#_2-过滤器","children":[]},{"level":2,"title":"3. Security 过滤器（Security Filter）","slug":"_3-security-过滤器-security-filter","link":"#_3-security-过滤器-security-filter","children":[]},{"level":2,"title":"4. 委派代理过滤器（DelegatingFilterProxy）","slug":"_4-委派代理过滤器-delegatingfilterproxy","link":"#_4-委派代理过滤器-delegatingfilterproxy","children":[]},{"level":2,"title":"5.过滤器链代理（FilterChainProxy）","slug":"_5-过滤器链代理-filterchainproxy","link":"#_5-过滤器链代理-filterchainproxy","children":[]},{"level":2,"title":"6. Security 过滤器链（SecurityFilterChain）","slug":"_6-security-过滤器链-securityfilterchain","link":"#_6-security-过滤器链-securityfilterchain","children":[]},{"level":2,"title":"7. 源码分析","slug":"_7-源码分析","link":"#_7-源码分析","children":[{"level":3,"title":"7.1 自动配置","slug":"_7-1-自动配置","link":"#_7-1-自动配置","children":[]},{"level":3,"title":"7.2 DefaultSecurityFilterChain","slug":"_7-2-defaultsecurityfilterchain","link":"#_7-2-defaultsecurityfilterchain","children":[]},{"level":3,"title":"7.3 springSecurityFilterChain","slug":"_7-3-springsecurityfilterchain","link":"#_7-3-springsecurityfilterchain","children":[]}]}],"git":{"createdTime":1722310024000,"updatedTime":1726135633000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":7.44,"words":2233},"filePathRelative":"posts/Spring/Spring Security 6.x/Spring Security 6.x 系列【3】源码篇之基于过滤器的基本原理.md","localizedDate":"2024年4月11日","excerpt":"<h2>1. 简介</h2>\\n<p><code>Spring Security</code>通过过滤器来支持<code>Servlet</code>，即在请求到达<code>Servlet之</code>前，通过过滤器进行认证和授权校验。如果用户合法且具备权限，则允许请求通过；反之，将会导致跳转到登录页或拒绝访问。因此，本文重点介绍<code>Spring Security</code>中与过滤器相关的知识。</p>\\n<p>类比<code>JAVA Web</code>中的<strong>过滤器</strong>，<code>Spring Security </code>中的<strong>过滤器</strong>进行了各种代理和增强，可以简单理解<code>Security </code>中的<strong>过滤器</strong>结构如下所示：</p>","autoDesc":true}`);export{y as comp,B as data};
