import{_ as s,o as n,c as a,h as l}from"./app-B-qHMeWY.js";const e={},p=l(`<blockquote><p>ReentrantReadWriteLock表示可重入读写锁，ReentrantReadWriteLock中包含了两种锁，读锁ReadLock和写锁WriteLock，可以通过这两种锁实现线程间的同步。</p></blockquote><ul><li>JUC 锁之 ReentrantReadWriteLock 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li><li><a href="#reentrantreadwritelock%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">ReentrantReadWriteLock数据结构</a></li><li>ReentrantReadWriteLock源码分析 <ul><li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB---sync%E7%B1%BB">内部类 - Sync类</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB---sync%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">内部类 - Sync核心函数分析</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">核心函数分析</a></li></ul></li><li><a href="#reentrantreadwritelock%E7%A4%BA%E4%BE%8B">ReentrantReadWriteLock示例</a></li><li>更深入理解 <ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%94%81%E5%8D%87%E9%99%8D%E7%BA%A7">什么是锁升降级?</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>为了有了ReentrantLock还需要ReentrantReadWriteLock?</li><li>ReentrantReadWriteLock底层实现原理?</li><li>ReentrantReadWriteLock底层读写状态如何设计的? 高16位为读锁，低16位为写锁</li><li>读锁和写锁的最大数量是多少?</li><li>本地线程计数器ThreadLocalHoldCounter是用来做什么的?</li><li>缓存计数器HoldCounter是用来做什么的?</li><li>写锁的获取与释放是怎么实现的?</li><li>读锁的获取与释放是怎么实现的?</li><li>RentrantReadWriteLock为什么不支持锁升级?</li><li>什么是锁的升降级? RentrantReadWriteLock为什么不支持锁升级?</li></ul><h2 id="reentrantreadwritelock数据结构" tabindex="-1"><a class="header-anchor" href="#reentrantreadwritelock数据结构"><span><a href="#reentrantreadwritelock%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> ReentrantReadWriteLock数据结构</span></a></h2><p>ReentrantReadWriteLock底层是基于ReentrantLock和AbstractQueuedSynchronizer来实现的，所以，ReentrantReadWriteLock的数据结构也依托于AQS的数据结构。</p><h2 id="reentrantreadwritelock源码分析" tabindex="-1"><a class="header-anchor" href="#reentrantreadwritelock源码分析"><span><a href="#reentrantreadwritelock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> ReentrantReadWriteLock源码分析</span></a></h2><h3 id="类的继承关系" tabindex="-1"><a class="header-anchor" href="#类的继承关系"><span><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReentrantReadWriteLock</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ReadWriteLock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明: 可以看到，ReentrantReadWriteLock实现了ReadWriteLock接口，ReadWriteLock接口定义了获取读锁和写锁的规范，具体需要实现类去实现；同时其还实现了Serializable接口，表示可以进行序列化，在源代码中可以看到ReentrantReadWriteLock实现了自己的序列化逻辑。</p><h3 id="类的内部类" tabindex="-1"><a class="header-anchor" href="#类的内部类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</span></a></h3><p>ReentrantReadWriteLock有五个内部类，五个内部类之间也是相互关联的。内部类的关系如下图所示。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 如上图所示，Sync继承自AQS、NonfairSync继承自Sync类、FairSync继承自Sync类；ReadLock实现了Lock接口、WriteLock也实现了Lock接口。</p><h3 id="内部类-sync类" tabindex="-1"><a class="header-anchor" href="#内部类-sync类"><span><a href="#%E5%86%85%E9%83%A8%E7%B1%BB-sync%E7%B1%BB">#</a> 内部类 - Sync类</span></a></h3><ul><li>类的继承关系</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">abstract</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Sync</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明: Sync抽象类继承自AQS抽象类，Sync类提供了对ReentrantReadWriteLock的支持。</p><ul><li>类的内部类</li></ul><p>Sync类内部存在两个内部类，分别为HoldCounter和ThreadLocalHoldCounter，其中HoldCounter主要与读锁配套使用，其中，HoldCounter源码如下。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 计数器</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HoldCounter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 计数</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> count </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Use id, not reference, to avoid garbage retention</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取当前线程的TID属性的值</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> tid </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getThreadId</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: HoldCounter主要有两个属性，count和tid，其中count表示某个读线程重入的次数，tid表示该线程的tid字段的值，该字段可以用来唯一标识一个线程。ThreadLocalHoldCounter的源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 本地线程计数器</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ThreadLocalHoldCounter</span></span>
<span class="line"><span style="color:#C678DD;">    extends</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HoldCounter</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重写初始化方法，在没有进行set的情况下，获取的都是该HoldCounter值</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> HoldCounter</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HoldCounter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: ThreadLocalHoldCounter重写了ThreadLocal的initialValue方法，ThreadLocal类可以将线程与对象相关联。在没有进行set的情况下，get到的均是initialValue方法里面生成的那个HolderCounter对象。</p><ul><li>类的属性</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">abstract</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Sync</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本序列号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 6317671515068378041L</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 高16位为读锁，低16位为写锁</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> SHARED_SHIFT   </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 16</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读锁单位</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> SHARED_UNIT    </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#E06C75;"> SHARED_SHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读锁最大数量</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MAX_COUNT      </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#E06C75;"> SHARED_SHIFT) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写锁最大数量</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> EXCLUSIVE_MASK </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#E06C75;"> SHARED_SHIFT) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 本地线程计数器</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> ThreadLocalHoldCounter</span><span style="color:#E06C75;"> readHolds</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 缓存的计数器</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> HoldCounter</span><span style="color:#E06C75;"> cachedHoldCounter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第一个读线程</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> Thread</span><span style="color:#E06C75;"> firstReader </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第一个读线程的计数</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> firstReaderHoldCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该属性中包括了读锁、写锁线程的最大量。本地线程计数器等。</p><ul><li>类的构造函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#61AFEF;">Sync</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 本地线程计数器</span></span>
<span class="line"><span style="color:#E06C75;">    readHolds </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ThreadLocalHoldCounter</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置AQS的状态</span></span>
<span class="line"><span style="color:#61AFEF;">    setState</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">getState</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // ensures visibility of readHolds</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 在Sync的构造函数中设置了本地线程计数器和AQS的状态state。</p><h3 id="内部类-sync核心函数分析" tabindex="-1"><a class="header-anchor" href="#内部类-sync核心函数分析"><span><a href="#%E5%86%85%E9%83%A8%E7%B1%BB-sync%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 内部类 - Sync核心函数分析</span></a></h3><p>对ReentrantReadWriteLock对象的操作绝大多数都转发至Sync对象进行处理。下面对Sync类中的重点函数进行分析</p><ul><li>sharedCount函数</li></ul><p>表示占有读锁的线程数量，源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> sharedCount</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> c)    { </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#E06C75;"> SHARED_SHIFT</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明: 直接将state右移16位，就可以得到读锁的线程数量，因为state的高16位表示读锁，对应的低十六位表示写锁数量。</p><ul><li>exclusiveCount函数</li></ul><p>表示占有写锁的线程数量，源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> exclusiveCount</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> c) { </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> EXCLUSIVE_MASK</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明: 直接将状态state和(2^16 - 1)做与运算，其等效于将state模上2^16。写锁数量由state的低十六位表示。</p><ul><li>tryRelease函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Note that tryRelease and tryAcquire can be called by</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Conditions. So it is possible that their arguments contain</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* both read and write holds that are all released during a</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* condition wait and re-established in tryAcquire.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> tryRelease</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> releases) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 判断是否伪独占线程</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#E06C75;">())</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 计算释放资源后的写锁的数量</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> nextc </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> releases</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> free </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> exclusiveCount</span><span style="color:#E06C75;">(nextc) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 是否释放成功</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (free)</span></span>
<span class="line"><span style="color:#61AFEF;">        setExclusiveOwnerThread</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 设置独占线程为空</span></span>
<span class="line"><span style="color:#61AFEF;">    setState</span><span style="color:#E06C75;">(nextc)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 设置状态</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> free</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数用于释放写锁资源，首先会判断该线程是否为独占线程，若不为独占线程，则抛出异常，否则，计算释放资源后的写锁的数量，若为0，表示成功释放，资源不将被占用，否则，表示资源还被占用。其函数流程图如下。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>tryAcquire函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> tryAcquire</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> acquires) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Walkthrough:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 1. If read count nonzero or write count nonzero</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    and owner is a different thread, fail.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 2. If count would saturate, fail. (This can only</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    happen if count is already nonzero.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 3. Otherwise, this thread is eligible for lock if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    it is either a reentrant acquire or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    queue policy allows it. If so, update state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    and set owner.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取当前线程</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> current </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写线程数量</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> w </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> exclusiveCount</span><span style="color:#E06C75;">(c)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (c </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 状态不为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // (Note: if c != 0 and w == 0 then shared count != 0)</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (w </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> current </span><span style="color:#56B6C2;">!=</span><span style="color:#61AFEF;"> getExclusiveOwnerThread</span><span style="color:#E06C75;">()) </span><span style="color:#7F848E;font-style:italic;">// 写线程数量为0或者当前线程没有占有独占资源</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (w </span><span style="color:#56B6C2;">+</span><span style="color:#61AFEF;"> exclusiveCount</span><span style="color:#E06C75;">(acquires) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> MAX_COUNT) </span><span style="color:#7F848E;font-style:italic;">// 判断是否超过最高写线程数量</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Maximum lock count exceeded&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Reentrant acquire</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置AQS状态</span></span>
<span class="line"><span style="color:#61AFEF;">        setState</span><span style="color:#E06C75;">(c </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> acquires)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">writerShouldBlock</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#56B6C2;">        !</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#E06C75;">(c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> acquires)) </span><span style="color:#7F848E;font-style:italic;">// 写线程是否应该被阻塞</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置独占线程</span></span>
<span class="line"><span style="color:#61AFEF;">    setExclusiveOwnerThread</span><span style="color:#E06C75;">(current)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数用于获取写锁，首先会获取state，判断是否为0，若为0，表示此时没有读锁线程，再判断写线程是否应该被阻塞，而在非公平策略下总是不会被阻塞，在公平策略下会进行判断(判断同步队列中是否有等待时间更长的线程，若存在，则需要被阻塞，否则，无需阻塞)，之后在设置状态state，然后返回true。若state不为0，则表示此时存在读锁或写锁线程，若写锁线程数量为0或者当前线程为独占锁线程，则返回false，表示不成功，否则，判断写锁线程的重入次数是否大于了最大值，若是，则抛出异常，否则，设置状态state，返回true，表示成功。其函数流程图如下</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>tryReleaseShared函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> tryReleaseShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> unused) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取当前线程</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> current </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (firstReader </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> current) { </span><span style="color:#7F848E;font-style:italic;">// 当前线程为第一个读线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // assert firstReaderHoldCount &gt; 0;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (firstReaderHoldCount </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 读线程占用的资源数为1</span></span>
<span class="line"><span style="color:#E06C75;">            firstReader </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#7F848E;font-style:italic;"> // 减少占用的资源</span></span>
<span class="line"><span style="color:#E06C75;">            firstReaderHoldCount</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 当前线程不为第一个读线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取缓存的计数器</span></span>
<span class="line"><span style="color:#E5C07B;">        HoldCounter</span><span style="color:#E06C75;"> rh </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> cachedHoldCounter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (rh </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tid</span><span style="color:#56B6C2;"> !=</span><span style="color:#61AFEF;"> getThreadId</span><span style="color:#E06C75;">(current)) </span><span style="color:#7F848E;font-style:italic;">// 计数器为空或者计数器的tid不为当前正在运行的线程的tid</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取当前线程对应的计数器</span></span>
<span class="line"><span style="color:#E06C75;">            rh </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取计数</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> count </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (count </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 计数小于等于1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 移除</span></span>
<span class="line"><span style="color:#E5C07B;">            readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (count </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 计数小于等于0，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#61AFEF;"> unmatchedUnlockException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 减少计数</span></span>
<span class="line"><span style="color:#ABB2BF;">        --</span><span style="color:#E5C07B;">rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> nextc </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> SHARED_UNIT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#E06C75;">(c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> nextc)) </span><span style="color:#7F848E;font-style:italic;">// 比较并进行设置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Releasing the read lock has no effect on readers,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // but it may allow waiting writers to proceed if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // both read and write locks are now free.</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> nextc </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数表示读锁线程释放锁。首先判断当前线程是否为第一个读线程firstReader，若是，则判断第一个读线程占有的资源数firstReaderHoldCount是否为1，若是，则设置第一个读线程firstReader为空，否则，将第一个读线程占有的资源数firstReaderHoldCount减1；若当前线程不是第一个读线程，那么首先会获取缓存计数器(上一个读锁线程对应的计数器 )，若计数器为空或者tid不等于当前线程的tid值，则获取当前线程的计数器，如果计数器的计数count小于等于1，则移除当前线程对应的计数器，如果计数器的计数count小于等于0，则抛出异常，之后再减少计数即可。无论何种情况，都会进入无限循环，该循环可以确保成功设置状态state。其流程图如下</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>tryAcquireShared函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> IllegalMonitorStateException</span><span style="color:#61AFEF;"> unmatchedUnlockException</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#E06C75;">(</span></span>
<span class="line"><span style="color:#98C379;">        &quot;attempt to unlock read lock, not locked by current thread&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 共享模式下获取资源</span></span>
<span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> tryAcquireShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> unused) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Walkthrough:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 1. If write lock held by another thread, fail.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 2. Otherwise, this thread is eligible for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    lock wrt state, so ask if it should block</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    because of queue policy. If not, try</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    to grant by CASing state and updating count.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    Note that step does not check for reentrant</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    acquires, which is postponed to full version</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    to avoid having to check hold count in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    the more typical non-reentrant case.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 3. If step 2 fails either because thread</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    apparently not eligible or CAS fails or count</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *    saturated, chain to version with full retry loop.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取当前线程</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> current </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">exclusiveCount</span><span style="color:#E06C75;">(c) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">        getExclusiveOwnerThread</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> current) </span><span style="color:#7F848E;font-style:italic;">// 写线程数不为0并且占有资源的不是当前线程</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读锁数量</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> r </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> sharedCount</span><span style="color:#E06C75;">(c)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">readerShouldBlock</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">        r </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> MAX_COUNT </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">        compareAndSetState</span><span style="color:#E06C75;">(c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> SHARED_UNIT)) { </span><span style="color:#7F848E;font-style:italic;">// 读线程是否应该被阻塞、并且小于最大值、并且比较设置成功</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (r </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 读锁数量为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置第一个读线程</span></span>
<span class="line"><span style="color:#E06C75;">            firstReader </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 读线程占用的资源数为1</span></span>
<span class="line"><span style="color:#E06C75;">            firstReaderHoldCount </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (firstReader </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> current) { </span><span style="color:#7F848E;font-style:italic;">// 当前线程为第一个读线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 占用资源数加1</span></span>
<span class="line"><span style="color:#E06C75;">            firstReaderHoldCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 读锁数量不为0并且不为当前线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取计数器</span></span>
<span class="line"><span style="color:#E5C07B;">            HoldCounter</span><span style="color:#E06C75;"> rh </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> cachedHoldCounter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (rh </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tid</span><span style="color:#56B6C2;"> !=</span><span style="color:#61AFEF;"> getThreadId</span><span style="color:#E06C75;">(current)) </span><span style="color:#7F848E;font-style:italic;">// 计数器为空或者计数器的tid不为当前正在运行的线程的tid</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 获取当前线程对应的计数器</span></span>
<span class="line"><span style="color:#E06C75;">                cachedHoldCounter </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> rh </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 计数为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置</span></span>
<span class="line"><span style="color:#E5C07B;">                readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(rh);</span></span>
<span class="line"><span style="color:#E5C07B;">            rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> fullTryAcquireShared</span><span style="color:#E06C75;">(current)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数表示读锁线程获取读锁。首先判断写锁是否为0并且当前线程不占有独占锁，直接返回；否则，判断读线程是否需要被阻塞并且读锁数量是否小于最大值并且比较设置状态成功，若当前没有读锁，则设置第一个读线程firstReader和firstReaderHoldCount；若当前线程线程为第一个读线程，则增加firstReaderHoldCount；否则，将设置当前线程对应的HoldCounter对象的值。流程图如下。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>fullTryAcquireShared函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> fullTryAcquireShared</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;"> current) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * This code is in part redundant with that in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * tryAcquireShared but is simpler overall by not</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * complicating tryAcquireShared with interactions between</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * retries and lazily reading hold counts.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#E5C07B;">    HoldCounter</span><span style="color:#E06C75;"> rh </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">exclusiveCount</span><span style="color:#E06C75;">(c) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 写线程数量不为0</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">getExclusiveOwnerThread</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> current) </span><span style="color:#7F848E;font-style:italic;">// 不为当前线程</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // else we hold the exclusive lock; blocking here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // would cause deadlock.</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">readerShouldBlock</span><span style="color:#E06C75;">()) { </span><span style="color:#7F848E;font-style:italic;">// 写线程数量为0并且读线程被阻塞</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Make sure we&#39;re not acquiring read lock reentrantly</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (firstReader </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> current) { </span><span style="color:#7F848E;font-style:italic;">// 当前线程为第一个读线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // assert firstReaderHoldCount &gt; 0;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 当前线程不为第一个读线程</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (rh </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 计数器不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // </span></span>
<span class="line"><span style="color:#E06C75;">                    rh </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> cachedHoldCounter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (rh </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tid</span><span style="color:#56B6C2;"> !=</span><span style="color:#61AFEF;"> getThreadId</span><span style="color:#E06C75;">(current)) { </span><span style="color:#7F848E;font-style:italic;">// 计数器为空或者计数器的tid不为当前正在运行的线程的tid</span></span>
<span class="line"><span style="color:#E06C75;">                        rh </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                            readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">sharedCount</span><span style="color:#E06C75;">(c) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> MAX_COUNT) </span><span style="color:#7F848E;font-style:italic;">// 读锁数量为最大值，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Maximum lock count exceeded&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#E06C75;">(c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> SHARED_UNIT)) { </span><span style="color:#7F848E;font-style:italic;">// 比较并且设置成功</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">sharedCount</span><span style="color:#E06C75;">(c) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 读线程数量为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置第一个读线程</span></span>
<span class="line"><span style="color:#E06C75;">                firstReader </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // </span></span>
<span class="line"><span style="color:#E06C75;">                firstReaderHoldCount </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (firstReader </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> current) {</span></span>
<span class="line"><span style="color:#E06C75;">                firstReaderHoldCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (rh </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                    rh </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> cachedHoldCounter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (rh </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tid</span><span style="color:#56B6C2;"> !=</span><span style="color:#61AFEF;"> getThreadId</span><span style="color:#E06C75;">(current))</span></span>
<span class="line"><span style="color:#E06C75;">                    rh </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                    readHolds</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(rh);</span></span>
<span class="line"><span style="color:#E5C07B;">                rh</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">                cachedHoldCounter </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> rh</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // cache for release</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 在tryAcquireShared函数中，如果下列三个条件不满足(读线程是否应该被阻塞、小于最大值、比较设置成功)则会进行fullTryAcquireShared函数中，它用来保证相关操作可以成功。其逻辑与tryAcquireShared逻辑类似，不再累赘。</p><p>而其他内部类的操作基本上都是转化到了对Sync对象的操作，在此不再累赘。</p><h3 id="类的属性" tabindex="-1"><a class="header-anchor" href="#类的属性"><span><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReentrantReadWriteLock</span></span>
<span class="line"><span style="color:#C678DD;">        implements</span><span style="color:#E5C07B;"> ReadWriteLock</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本序列号    </span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">6992448646407690164L</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读锁</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ReentrantReadWriteLock</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ReadLock</span><span style="color:#E06C75;"> readerLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写锁</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ReentrantReadWriteLock</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WriteLock</span><span style="color:#E06C75;"> writerLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 同步队列</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Sync</span><span style="color:#E06C75;"> sync</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> sun</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">misc</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Unsafe</span><span style="color:#E06C75;"> UNSAFE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 线程ID的偏移地址</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> TID_OFFSET</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            UNSAFE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sun</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">misc</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUnsafe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> tk </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取线程的tid字段的内存地址</span></span>
<span class="line"><span style="color:#E06C75;">            TID_OFFSET </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">tk</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tid&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 可以看到ReentrantReadWriteLock属性包括了一个ReentrantReadWriteLock.ReadLock对象，表示读锁；一个ReentrantReadWriteLock.WriteLock对象，表示写锁；一个Sync对象，表示同步队列。</p><h3 id="类的构造函数" tabindex="-1"><a class="header-anchor" href="#类的构造函数"><span><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</span></a></h3><ul><li>ReentrantReadWriteLock()型构造函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> ReentrantReadWriteLock</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">false</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此构造函数会调用另外一个有参构造函数。</p><ul><li>ReentrantReadWriteLock(boolean)型构造函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> ReentrantReadWriteLock</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> fair) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 公平策略或者是非公平策略</span></span>
<span class="line"><span style="color:#E06C75;">    sync </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> fair </span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FairSync</span><span style="color:#E06C75;">() </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NonfairSync</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 读锁</span></span>
<span class="line"><span style="color:#E06C75;">    readerLock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReadLock</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 写锁</span></span>
<span class="line"><span style="color:#E06C75;">    writerLock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WriteLock</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 可以指定设置公平策略或者非公平策略，并且该构造函数中生成了读锁与写锁两个对象。</p><h3 id="核心函数分析" tabindex="-1"><a class="header-anchor" href="#核心函数分析"><span><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 核心函数分析</span></a></h3><p>对ReentrantReadWriteLock的操作基本上都转化为了对Sync对象的操作，而Sync的函数已经分析过，不再累赘。</p><h2 id="reentrantreadwritelock示例" tabindex="-1"><a class="header-anchor" href="#reentrantreadwritelock示例"><span><a href="#reentrantreadwritelock%E7%A4%BA%E4%BE%8B">#</a> ReentrantReadWriteLock示例</span></a></h2><p>下面给出了一个使用ReentrantReadWriteLock的示例，源代码如下。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.locks.ReentrantReadWriteLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ReadThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> ReentrantReadWriteLock</span><span style="color:#E06C75;"> rrwLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ReadThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ReentrantReadWriteLock</span><span style="color:#E06C75;font-style:italic;"> rrwLock</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rrwLock</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> rrwLock;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; trying to lock&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            rrwLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; lock successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">);        </span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            rrwLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; unlock successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> WriteThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> ReentrantReadWriteLock</span><span style="color:#E06C75;"> rrwLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> WriteThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ReentrantReadWriteLock</span><span style="color:#E06C75;font-style:italic;"> rrwLock</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rrwLock</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> rrwLock;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; trying to lock&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            rrwLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; lock successfully&quot;</span><span style="color:#ABB2BF;">);    </span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            rrwLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; unlock successfully&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReentrantReadWriteLockDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ReentrantReadWriteLock</span><span style="color:#E06C75;"> rrwLock</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantReadWriteLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        ReadThread</span><span style="color:#E06C75;"> rt1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReadThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;rt1&quot;</span><span style="color:#ABB2BF;">, rrwLock);</span></span>
<span class="line"><span style="color:#E5C07B;">        ReadThread</span><span style="color:#E06C75;"> rt2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReadThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;rt2&quot;</span><span style="color:#ABB2BF;">, rrwLock);</span></span>
<span class="line"><span style="color:#E5C07B;">        WriteThread</span><span style="color:#E06C75;"> wt1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WriteThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;wt1&quot;</span><span style="color:#ABB2BF;">, rrwLock);</span></span>
<span class="line"><span style="color:#E5C07B;">        rt1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        rt2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        wt1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次):</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">rt1 trying to lock</span></span>
<span class="line"><span style="color:#ABB2BF;">rt2 trying to lock</span></span>
<span class="line"><span style="color:#ABB2BF;">wt1 trying to lock</span></span>
<span class="line"><span style="color:#ABB2BF;">rt1 lock successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">rt2 lock successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">rt1 unlock successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">rt2 unlock successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">wt1 lock successfully</span></span>
<span class="line"><span style="color:#ABB2BF;">wt1 unlock successfully</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 程序中生成了一个ReentrantReadWriteLock对象，并且设置了两个读线程，一个写线程。根据结果，可能存在如下的时序图。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>rt1线程执行rrwLock.readLock().lock操作，主要的函数调用如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，AQS的状态state为2^16 次方，即表示此时读线程数量为1。</p><ul><li>rt2线程执行rrwLock.readLock().lock操作，主要的函数调用如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，AQS的状态state为2 * 2^16次方，即表示此时读线程数量为2。</p><ul><li>wt1线程执行rrwLock.writeLock().lock操作，主要的函数调用如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-9.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，在同步队列Sync queue中存在两个结点，并且wt1线程会被禁止运行。</p><ul><li>rt1线程执行rrwLock.readLock().unlock操作，主要的函数调用如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-10.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，AQS的state为2^16次方，表示还有一个读线程。</p><ul><li>rt2线程执行rrwLock.readLock().unlock操作，主要的函数调用如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-11.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 当rt2线程执行unlock操作后，AQS的state为0，并且wt1线程将会被unpark，其获得CPU资源就可以运行。</p><ul><li>wt1线程获得CPU资源，继续运行，需要恢复。由于之前acquireQueued函数中的parkAndCheckInterrupt函数中被禁止的，所以，恢复到parkAndCheckInterrupt函数中，主要的函数调用如下</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-12.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 最后，sync queue队列中只有一个结点，并且头节点尾节点均指向它，AQS的state值为1，表示此时有一个写线程。</p><ul><li>wt1执行rrwLock.writeLock().unlock操作，主要的函数调用如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-13.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，AQS的state为0，表示没有任何读线程或者写线程了。并且Sync queue结构与上一个状态的结构相同，没有变化。</p><h2 id="更深入理解" tabindex="-1"><a class="header-anchor" href="#更深入理解"><span><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 更深入理解</span></a></h2><h3 id="什么是锁升降级" tabindex="-1"><a class="header-anchor" href="#什么是锁升降级"><span><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%94%81%E5%8D%87%E9%99%8D%E7%BA%A7">#</a> 什么是锁升降级?</span></a></h3><p>锁降级指的是写锁降级成为读锁。如果当前线程拥有写锁，然后将其释放，最后再获取读锁，这种分段完成的过程不能称之为锁降级。锁降级是指把持住(当前拥有的)写锁，再获取到读锁，随后释放(先前拥有的)写锁的过程。</p><p>接下来看一个锁降级的示例。因为数据不常变化，所以多个线程可以并发地进行数据处理，当数据变更后，如果当前线程感知到数据变化，则进行数据的准备工作，同时其他处理线程被阻塞，直到当前线程完成数据的准备工作，如代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> processData</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    readLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">update) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 必须先释放读锁</span></span>
<span class="line"><span style="color:#E5C07B;">        readLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 锁降级从写锁获取到开始</span></span>
<span class="line"><span style="color:#E5C07B;">        writeLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">update) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 准备数据的流程(略)</span></span>
<span class="line"><span style="color:#E06C75;">                update </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            readLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            writeLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 锁降级完成，写锁降级为读锁</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 使用数据的流程(略)</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        readLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例中，当数据发生变更后，update变量(布尔类型且volatile修饰)被设置为false，此时所有访问processData()方法的线程都能够感知到变化，但只有一个线程能够获取到写锁，其他线程会被阻塞在读锁和写锁的lock()方法上。当前线程获取写锁完成数据准备之后，再获取读锁，随后释放写锁，完成锁降级。</p><p>锁降级中读锁的获取是否必要呢? 答案是必要的。主要是为了保证数据的可见性，如果当前线程不获取读锁而是直接释放写锁，假设此刻另一个线程(记作线程T)获取了写锁并修改了数据，那么当前线程无法感知线程T的数据更新。如果当前线程获取读锁，即遵循锁降级的步骤，则线程T将会被阻塞，直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进行数据更新。</p><p>RentrantReadWriteLock不支持锁升级(把持读锁、获取写锁，最后释放读锁的过程)。目的也是保证数据可见性，如果读锁已被多个线程获取，其中任意线程成功获取了写锁并更新了数据，则其更新对其他获取到读锁的线程是不可见的。</p>`,110),o=[p];function t(c,r){return n(),a("div",null,o)}const y=s(e,[["render",t],["__file","JUC 锁之 ReentrantReadWriteLock 详解.html.vue"]]),d=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20ReentrantReadWriteLock%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 锁之 ReentrantReadWriteLock 详解","lang":"zh-CN","frontmatter":{"title":"JUC 锁之 ReentrantReadWriteLock 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":13,"description":"ReentrantReadWriteLock表示可重入读写锁，ReentrantReadWriteLock中包含了两种锁，读锁ReadLock和写锁WriteLock，可以通过这两种锁实现线程间的同步。 JUC 锁之 ReentrantReadWriteLock 详解 带着BAT大厂的面试问题去理解 ReentrantReadWriteLock数据结构...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%20ReentrantReadWriteLock%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 锁之 ReentrantReadWriteLock 详解"}],["meta",{"property":"og:description","content":"ReentrantReadWriteLock表示可重入读写锁，ReentrantReadWriteLock中包含了两种锁，读锁ReadLock和写锁WriteLock，可以通过这两种锁实现线程间的同步。 JUC 锁之 ReentrantReadWriteLock 详解 带着BAT大厂的面试问题去理解 ReentrantReadWriteLock数据结构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 锁之 ReentrantReadWriteLock 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-7.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-8.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-9.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-10.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-11.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-12.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-readwritelock-13.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# ReentrantReadWriteLock数据结构","slug":"reentrantreadwritelock数据结构","link":"#reentrantreadwritelock数据结构","children":[]},{"level":2,"title":"# ReentrantReadWriteLock源码分析","slug":"reentrantreadwritelock源码分析","link":"#reentrantreadwritelock源码分析","children":[{"level":3,"title":"# 类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"# 类的内部类","slug":"类的内部类","link":"#类的内部类","children":[]},{"level":3,"title":"# 内部类 - Sync类","slug":"内部类-sync类","link":"#内部类-sync类","children":[]},{"level":3,"title":"# 内部类 - Sync核心函数分析","slug":"内部类-sync核心函数分析","link":"#内部类-sync核心函数分析","children":[]},{"level":3,"title":"# 类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"# 类的构造函数","slug":"类的构造函数","link":"#类的构造函数","children":[]},{"level":3,"title":"# 核心函数分析","slug":"核心函数分析","link":"#核心函数分析","children":[]}]},{"level":2,"title":"# ReentrantReadWriteLock示例","slug":"reentrantreadwritelock示例","link":"#reentrantreadwritelock示例","children":[]},{"level":2,"title":"# 更深入理解","slug":"更深入理解","link":"#更深入理解","children":[{"level":3,"title":"# 什么是锁升降级?","slug":"什么是锁升降级","link":"#什么是锁升降级","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":17.01,"words":5103},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 锁之 ReentrantReadWriteLock 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>ReentrantReadWriteLock表示可重入读写锁，ReentrantReadWriteLock中包含了两种锁，读锁ReadLock和写锁WriteLock，可以通过这两种锁实现线程间的同步。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 锁之 ReentrantReadWriteLock 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3\\">带着BAT大厂的面试问题去理解</a></li>\\n<li><a href=\\"#reentrantreadwritelock%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\\">ReentrantReadWriteLock数据结构</a></li>\\n<li>ReentrantReadWriteLock源码分析\\n<ul>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\\">类的继承关系</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB\\">类的内部类</a></li>\\n<li><a href=\\"#%E5%86%85%E9%83%A8%E7%B1%BB---sync%E7%B1%BB\\">内部类 - Sync类</a></li>\\n<li><a href=\\"#%E5%86%85%E9%83%A8%E7%B1%BB---sync%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90\\">内部类 - Sync核心函数分析</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\\">类的属性</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">类的构造函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90\\">核心函数分析</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#reentrantreadwritelock%E7%A4%BA%E4%BE%8B\\">ReentrantReadWriteLock示例</a></li>\\n<li>更深入理解\\n<ul>\\n<li><a href=\\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%94%81%E5%8D%87%E9%99%8D%E7%BA%A7\\">什么是锁升降级?</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{y as comp,d as data};
