import{_ as n,c as a,f as l,o as e}from"./app-RizwwZaB.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。</p></blockquote><ul><li>JUC 集合之 CopyOnWriteArrayList 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li><li>CopyOnWriteArrayList源码分析 <ul><li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li><li>核心函数分析 <ul><li><a href="#copyof%E5%87%BD%E6%95%B0">copyOf函数</a></li><li><a href="#add%E5%87%BD%E6%95%B0">add函数</a></li><li><a href="#addifabsent%E6%96%B9%E6%B3%95">addIfAbsent方法</a></li><li><a href="#set%E5%87%BD%E6%95%B0">set函数</a></li><li><a href="#remove%E5%87%BD%E6%95%B0">remove函数</a></li></ul></li></ul></li><li><a href="#copyonwritearraylist%E7%A4%BA%E4%BE%8B">CopyOnWriteArrayList示例</a></li><li>更深入理解 <ul><li><a href="#copyonwritearraylist%E7%9A%84%E7%BC%BA%E9%99%B7%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">CopyOnWriteArrayList的缺陷和使用场景</a></li><li><a href="#copyonwritearraylist%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B8%94%E6%80%A7%E8%83%BD%E6%AF%94vector%E5%A5%BD">CopyOnWriteArrayList为什么并发安全且性能比Vector好? </a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>请先说说非并发集合中Fail-fast机制?</li><li>再为什么说ArrayList查询快而增删慢?</li><li>对比ArrayList说说CopyOnWriteArrayList的增删改查实现原理? COW基于拷贝</li><li>再说下弱一致性的迭代器原理是怎么样的? <code>COWIterator&lt;E&gt;</code></li><li>CopyOnWriteArrayList为什么并发安全且性能比Vector好?</li><li>CopyOnWriteArrayList有何缺陷，说说其应用场景?</li></ul><h2 id="copyonwritearraylist源码分析" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist源码分析"><span><a href="#copyonwritearraylist%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> CopyOnWriteArrayList源码分析</span></a></h2><h3 id="类的继承关系" tabindex="-1"><a class="header-anchor" href="#类的继承关系"><span><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</span></a></h3><p>CopyOnWriteArrayList实现了List接口，List接口定义了对列表的基本操作；同时实现了RandomAccess接口，表示可以随机访问(数组具有随机访问的特性)；同时实现了Cloneable接口，表示可克隆；同时也实现了Serializable接口，表示可被序列化。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CopyOnWriteArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;,</span><span style="color:#E5C07B;"> RandomAccess</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Cloneable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="类的内部类" tabindex="-1"><a class="header-anchor" href="#类的内部类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</span></a></h3><ul><li>COWIterator类</li></ul><p>COWIterator表示迭代器，其也有一个Object类型的数组作为CopyOnWriteArrayList数组的快照，这种快照风格的迭代器方法在创建迭代器时使用了对当时数组状态的引用。此数组在迭代器的生存期内不会更改，因此不可能发生冲突，并且迭代器保证不会抛出 ConcurrentModificationException。创建迭代器以后，迭代器就不会反映列表的添加、移除或者更改。在迭代器上进行的元素更改操作(remove、set 和 add)不受支持。这些方法将抛出 UnsupportedOperationException。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> COWIterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ListIterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** Snapshot of the array */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 快照</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[] snapshot</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** Index of element to be returned by subsequent call to next.  */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 游标</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> cursor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造函数</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#61AFEF;"> COWIterator</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">elements</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> initialCursor</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        cursor </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> initialCursor;</span></span>
<span class="line"><span style="color:#ABB2BF;">        snapshot </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> elements;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 是否还有下一项</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> hasNext</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> cursor </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> snapshot</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 是否有上一项</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> hasPrevious</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> cursor </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // next项</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;"> hasNext</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 不存在下一项，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 返回下一项</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (E) snapshot[cursor++];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> previous</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;"> hasPrevious</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (E) snapshot[--cursor];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 下一项索引</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> nextIndex</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> cursor;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 上一项索引</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> previousIndex</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> cursor</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Not supported. Always throws UnsupportedOperationException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> UnsupportedOperationException</span><span style="color:#7F848E;font-style:italic;"> always; {@code remove}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         is not supported by this iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不支持remove操作</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Not supported. Always throws UnsupportedOperationException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> UnsupportedOperationException</span><span style="color:#7F848E;font-style:italic;"> always; {@code set}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         is not supported by this iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不支持set操作</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Not supported. Always throws UnsupportedOperationException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> UnsupportedOperationException</span><span style="color:#7F848E;font-style:italic;"> always; {@code add}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         is not supported by this iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不支持add操作</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnsupportedOperationException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> forEachRemaining</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Consumer</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> super</span><span style="color:#E5C07B;"> E</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requireNonNull</span><span style="color:#ABB2BF;">(action);</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">elements</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> snapshot;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> elements</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> cursor; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> size; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (E) elements[i];</span></span>
<span class="line"><span style="color:#E5C07B;">            action</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(e);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        cursor </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的属性" tabindex="-1"><a class="header-anchor" href="#类的属性"><span><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</span></a></h3><p>属性中有一个可重入锁，用来保证线程安全访问，还有一个Object类型的数组，用来存放具体的元素。当然，也使用到了反射机制和CAS来保证原子性的修改lock域。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CopyOnWriteArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    implements</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;,</span><span style="color:#E5C07B;"> RandomAccess</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Cloneable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本序列号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 8673264195747942595L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> ReentrantLock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 对象数组，用于存放元素</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[] array</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 反射机制</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> sun</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">misc</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Unsafe</span><span style="color:#E06C75;"> UNSAFE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // lock域的内存偏移量</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> lockOffset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            UNSAFE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sun</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">misc</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUnsafe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> CopyOnWriteArrayList</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            lockOffset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">k</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lock&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的构造函数" tabindex="-1"><a class="header-anchor" href="#类的构造函数"><span><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</span></a></h3><ul><li>默认构造函数</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> CopyOnWriteArrayList</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">    setArray</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">])</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>CopyOnWriteArrayList(Collection&lt;? extends E&gt;)</code>型构造函数　 该构造函数用于创建一个按 collection 的迭代器返回元素的顺序包含指定 collection 元素的列表。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> CopyOnWriteArrayList</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;">[] elements</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> CopyOnWriteArrayList</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 类型相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取c集合的数组</span></span>
<span class="line"><span style="color:#E06C75;">        elements </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> ((</span><span style="color:#E5C07B;">CopyOnWriteArrayList</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">)c)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 类型不相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 将c集合转化为数组并赋值给elements</span></span>
<span class="line"><span style="color:#E06C75;">        elements </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">elements</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> !=</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[]</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// elements类型不为Object[]类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将elements数组转化为Object[]类型的数组</span></span>
<span class="line"><span style="color:#E06C75;">            elements </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elements, </span><span style="color:#E5C07B;">elements</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">[].</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">    setArray</span><span style="color:#E06C75;">(elements)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该构造函数的处理流程如下</p><ul><li><p>判断传入的集合c的类型是否为CopyOnWriteArrayList类型，若是，则获取该集合类型的底层数组(Object[])，并且设置当前CopyOnWriteArrayList的数组(Object[]数组)，进入步骤③；否则，进入步骤②</p></li><li><p>将传入的集合转化为数组elements，判断elements的类型是否为Object[]类型(toArray方法可能不会返回Object类型的数组)，若不是，则将elements转化为Object类型的数组。进入步骤③</p></li><li><p>设置当前CopyOnWriteArrayList的Object[]为elements。</p></li><li><p><code>CopyOnWriteArrayList(E[])</code>型构造函数</p></li></ul><p>该构造函数用于创建一个保存给定数组的副本的列表。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> CopyOnWriteArrayList</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;">[] toCopyIn) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将toCopyIn转化为Object[]类型数组，然后设置当前数组</span></span>
<span class="line"><span style="color:#61AFEF;">    setArray</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(toCopyIn, </span><span style="color:#E5C07B;">toCopyIn</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">[].</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心函数分析" tabindex="-1"><a class="header-anchor" href="#核心函数分析"><span><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90">#</a> 核心函数分析</span></a></h3><p>对于CopyOnWriteArrayList的函数分析，主要明白Arrays.copyOf方法即可理解CopyOnWriteArrayList其他函数的意义。</p><h4 id="copyof函数" tabindex="-1"><a class="header-anchor" href="#copyof函数"><span><a href="#copyof%E5%87%BD%E6%95%B0">#</a> copyOf函数</span></a></h4><p>该函数用于复制指定的数组，截取或用 null 填充(如有必要)，以使副本具有指定的长度。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">U</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> T</span><span style="color:#E06C75;">[] </span><span style="color:#61AFEF;">copyOf</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">U</span><span style="color:#E06C75;">[] original</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> newLength</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Class</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends </span><span style="color:#E5C07B;">T</span><span style="color:#E06C75;">[]</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> newType) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 确定copy的类型(将newType转化为Object类型，将Object[].class转化为Object类型，判断两者是否相等，若相等，则生成指定长度的Object数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 否则,生成指定长度的新类型的数组)</span></span>
<span class="line"><span style="color:#E5C07B;">    T</span><span style="color:#E06C75;">[] copy </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> ((Object)newType </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> (Object)</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;">[]</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        ?</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">T</span><span style="color:#E06C75;">[]) </span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[newLength]</span></span>
<span class="line"><span style="color:#C678DD;">        :</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">T</span><span style="color:#E06C75;">[]) </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newInstance</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">newType</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getComponentType</span><span style="color:#ABB2BF;">(), newLength);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将original数组从下标0开始，复制长度为(original.length和newLength的较小者),复制到copy数组中(也从下标0开始)</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(original, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, copy, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                        Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">original</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">, newLength));</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> copy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="add函数" tabindex="-1"><a class="header-anchor" href="#add函数"><span><a href="#add%E5%87%BD%E6%95%B0">#</a> add函数</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> ReentrantLock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B;">    lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 元素数组</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] elements </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getArray</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 数组长度</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> elements</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 复制数组</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] newElements </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elements, len </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 存放元素e</span></span>
<span class="line"><span style="color:#E06C75;">        newElements[len] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">        setArray</span><span style="color:#E06C75;">(newElements)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数用于将指定元素添加到此列表的尾部，处理流程如下</p><ul><li>获取锁(保证多线程的安全访问)，获取当前的Object数组，获取Object数组的长度为length，进入步骤②。</li><li>根据Object数组复制一个长度为length+1的Object数组为newElements(此时，newElements[length]为null)，进入下一步骤。</li><li>将下标为length的数组元素newElements[length]设置为元素e，再设置当前Object[]为newElements，释放锁，返回。这样就完成了元素的添加。</li></ul><h4 id="addifabsent方法" tabindex="-1"><a class="header-anchor" href="#addifabsent方法"><span><a href="#addifabsent%E6%96%B9%E6%B3%95">#</a> addIfAbsent方法</span></a></h4><p>该函数用于添加元素(如果数组中不存在，则添加；否则，不添加，直接返回)，可以保证多线程环境下不会重复添加元素。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> addIfAbsent</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[] snapshot) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重入锁</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> ReentrantLock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B;">    lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取数组</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] current </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getArray</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 数组长度</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (snapshot </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> current) { </span><span style="color:#7F848E;font-style:italic;">// 快照不等于当前数组，对数组进行了修改</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Optimize for lost race to another addXXX operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 取较小者</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> common </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">snapshot</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">, len);</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> common</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 遍历</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (current[i] </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> snapshot[i] </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> eq</span><span style="color:#E06C75;">(e</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> current[i])) </span><span style="color:#7F848E;font-style:italic;">// 当前数组的元素与快照的元素不相等并且e与当前元素相等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 表示在snapshot与current之间修改了数组，并且设置了数组某一元素为e，已经存在</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 返回</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">indexOf</span><span style="color:#E06C75;">(e</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> common</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> len) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 在当前数组中找到e元素</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 返回</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 复制数组</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] newElements </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(current, len </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 对数组len索引的元素赋值为e</span></span>
<span class="line"><span style="color:#E06C75;">        newElements[len] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">        setArray</span><span style="color:#E06C75;">(newElements)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数的流程如下:</p><p>① 获取锁，获取当前数组为current，current长度为len，判断数组之前的快照snapshot是否等于当前数组current，若不相等，则进入步骤②；否则，进入步骤④</p><p>② 不相等，表示在snapshot与current之间，对数组进行了修改(如进行了add、set、remove等操作)，获取长度(snapshot与current之间的较小者)，对current进行遍历操作，若遍历过程发现snapshot与current的元素不相等并且current的元素与指定元素相等(可能进行了set操作)，进入步骤⑤，否则，进入步骤③</p><p>③ 在当前数组中索引指定元素，若能够找到，进入步骤⑤，否则，进入步骤④</p><p>④ 复制当前数组current为newElements，长度为len+1，此时newElements[len]为null。再设置newElements[len]为指定元素e，再设置数组，进入步骤⑤</p><p>⑤ 释放锁，返回。</p><h4 id="set函数" tabindex="-1"><a class="header-anchor" href="#set函数"><span><a href="#set%E5%87%BD%E6%95%B0">#</a> set函数</span></a></h4><p>此函数用于用指定的元素替代此列表指定位置上的元素，也是基于数组的复制来实现的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> set</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> ReentrantLock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B;">    lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取数组</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] elements </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getArray</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取index索引的元素</span></span>
<span class="line"><span style="color:#E5C07B;">        E</span><span style="color:#E06C75;"> oldValue </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">(elements</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (oldValue </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> element) { </span><span style="color:#7F848E;font-style:italic;">// 旧值等于element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 数组长度</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> elements</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 复制数组</span></span>
<span class="line"><span style="color:#E5C07B;">            Object</span><span style="color:#E06C75;">[] newElements </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elements, len);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 重新赋值index索引的值</span></span>
<span class="line"><span style="color:#E06C75;">            newElements[index] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">            setArray</span><span style="color:#E06C75;">(newElements)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Not quite a no-op; ensures volatile write semantics</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">            setArray</span><span style="color:#E06C75;">(elements)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 返回旧值</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> oldValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="remove函数" tabindex="-1"><a class="header-anchor" href="#remove函数"><span><a href="#remove%E5%87%BD%E6%95%B0">#</a> remove函数</span></a></h4><p>此函数用于移除此列表指定位置上的元素。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 可重入锁</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> ReentrantLock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取锁</span></span>
<span class="line"><span style="color:#E5C07B;">    lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取数组</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] elements </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getArray</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 数组长度</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> elements</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取旧值</span></span>
<span class="line"><span style="color:#E5C07B;">        E</span><span style="color:#E06C75;"> oldValue </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">(elements</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 需要移动的元素个数</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> numMoved </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> len </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (numMoved </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 移动个数为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 复制后设置数组</span></span>
<span class="line"><span style="color:#61AFEF;">            setArray</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elements, len </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 移动个数不为0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 新生数组</span></span>
<span class="line"><span style="color:#E5C07B;">            Object</span><span style="color:#E06C75;">[] newElements </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[len </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 复制index索引之前的元素</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(elements, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, newElements, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, index);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 复制index索引之后的元素</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(elements, index </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, newElements, index,</span></span>
<span class="line"><span style="color:#ABB2BF;">                                numMoved);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置索引</span></span>
<span class="line"><span style="color:#61AFEF;">            setArray</span><span style="color:#E06C75;">(newElements)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 返回旧值</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> oldValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 释放锁</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理流程如下</p><p>① 获取锁，获取数组elements，数组长度为length，获取索引的值elements[index]，计算需要移动的元素个数(length - index - 1),若个数为0，则表示移除的是数组的最后一个元素，复制elements数组，复制长度为length-1，然后设置数组，进入步骤③；否则，进入步骤②</p><p>② 先复制index索引前的元素，再复制index索引后的元素，然后设置数组。</p><p>③ 释放锁，返回旧值。</p><h2 id="copyonwritearraylist示例" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist示例"><span><a href="#copyonwritearraylist%E7%A4%BA%E4%BE%8B">#</a> CopyOnWriteArrayList示例</span></a></h2><p>下面通过一个示例来了解CopyOnWriteArrayList的使用: 在程序中，有一个PutThread线程会每隔50ms就向CopyOnWriteArrayList中添加一个元素，并且两次使用了迭代器，迭代器输出的内容都是生成迭代器时，CopyOnWriteArrayList的Object数组的快照的内容，在迭代的过程中，往CopyOnWriteArrayList中添加元素也不会抛出异常。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.Iterator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CopyOnWriteArrayList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> PutThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> CopyOnWriteArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> cowal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> PutThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">CopyOnWriteArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">cowal</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cowal</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> cowal;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 110</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">                cowal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CopyOnWriteArrayListDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        CopyOnWriteArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">cowal</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> CopyOnWriteArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">            cowal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        PutThread</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> PutThread</span><span style="color:#ABB2BF;">(cowal);</span></span>
<span class="line"><span style="color:#E5C07B;">        p1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Iterator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cowal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#ABB2BF;">        iterator </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> cowal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iterator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasNext</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次)</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">0 1 2 3 4 5 6 7 8 9 100 </span></span>
<span class="line"><span style="color:#ABB2BF;">0 1 2 3 4 5 6 7 8 9 100 101 102 103</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更深入理解" tabindex="-1"><a class="header-anchor" href="#更深入理解"><span><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 更深入理解</span></a></h2><h3 id="copyonwritearraylist的缺陷和使用场景" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist的缺陷和使用场景"><span><a href="#copyonwritearraylist%E7%9A%84%E7%BC%BA%E9%99%B7%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">#</a> CopyOnWriteArrayList的缺陷和使用场景</span></a></h3><p>CopyOnWriteArrayList 有几个缺点：</p><ul><li>由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致young gc或者full gc</li><li>不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；</li></ul><p><strong>CopyOnWriteArrayList 合适读多写少的场景，不过这类慎用</strong></p><p>因为谁也没法保证CopyOnWriteArrayList 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。</p><h3 id="copyonwritearraylist为什么并发安全且性能比vector好" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist为什么并发安全且性能比vector好"><span><a href="#copyonwritearraylist%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B8%94%E6%80%A7%E8%83%BD%E6%AF%94vector%E5%A5%BD">#</a> CopyOnWriteArrayList为什么并发安全且性能比Vector好?</span></a></h3><p>Vector对单独的add，remove等方法都是在方法上加了synchronized; 并且如果一个线程A调用size时，另一个线程B 执行了remove，然后size的值就不是最新的，然后线程A调用remove就会越界(这时就需要再加一个Synchronized)。这样就导致有了双重锁，效率大大降低，何必呢。于是vector废弃了，要用就用CopyOnWriteArrayList 吧。</p>`,67)]))}const c=n(p,[["render",o],["__file","JUC 集合之 CopyOnWriteArrayList 详解.html.vue"]]),i=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20CopyOnWriteArrayList%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 集合之 CopyOnWriteArrayList 详解","lang":"zh-CN","frontmatter":{"title":"JUC 集合之 CopyOnWriteArrayList 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":15,"description":"CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。 JUC 集合之 CopyOnWriteArrayList 详解 带着BAT大厂的面试问题去理解 CopyOnWriteArrayList源码分析 类的继承关系 类的内...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%9B%86%E5%90%88%E4%B9%8B%20CopyOnWriteArrayList%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 集合之 CopyOnWriteArrayList 详解"}],["meta",{"property":"og:description","content":"CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。 JUC 集合之 CopyOnWriteArrayList 详解 带着BAT大厂的面试问题去理解 CopyOnWriteArrayList源码分析 类的继承关系 类的内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 集合之 CopyOnWriteArrayList 详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# CopyOnWriteArrayList源码分析","slug":"copyonwritearraylist源码分析","link":"#copyonwritearraylist源码分析","children":[{"level":3,"title":"# 类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"# 类的内部类","slug":"类的内部类","link":"#类的内部类","children":[]},{"level":3,"title":"# 类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"# 类的构造函数","slug":"类的构造函数","link":"#类的构造函数","children":[]},{"level":3,"title":"# 核心函数分析","slug":"核心函数分析","link":"#核心函数分析","children":[]}]},{"level":2,"title":"# CopyOnWriteArrayList示例","slug":"copyonwritearraylist示例","link":"#copyonwritearraylist示例","children":[]},{"level":2,"title":"# 更深入理解","slug":"更深入理解","link":"#更深入理解","children":[{"level":3,"title":"# CopyOnWriteArrayList的缺陷和使用场景","slug":"copyonwritearraylist的缺陷和使用场景","link":"#copyonwritearraylist的缺陷和使用场景","children":[]},{"level":3,"title":"# CopyOnWriteArrayList为什么并发安全且性能比Vector好?","slug":"copyonwritearraylist为什么并发安全且性能比vector好","link":"#copyonwritearraylist为什么并发安全且性能比vector好","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":11.72,"words":3515},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 集合之 CopyOnWriteArrayList 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>CopyOnWriteArrayList是ArrayList 的一个线程安全的变体，其中所有可变操作(add、set 等等)都是通过对底层数组进行一次新的拷贝来实现的。COW模式的体现。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 集合之 CopyOnWriteArrayList 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3\\">带着BAT大厂的面试问题去理解</a></li>\\n<li>CopyOnWriteArrayList源码分析\\n<ul>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\\">类的继承关系</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB\\">类的内部类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\\">类的属性</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">类的构造函数</a></li>\\n<li>核心函数分析\\n<ul>\\n<li><a href=\\"#copyof%E5%87%BD%E6%95%B0\\">copyOf函数</a></li>\\n<li><a href=\\"#add%E5%87%BD%E6%95%B0\\">add函数</a></li>\\n<li><a href=\\"#addifabsent%E6%96%B9%E6%B3%95\\">addIfAbsent方法</a></li>\\n<li><a href=\\"#set%E5%87%BD%E6%95%B0\\">set函数</a></li>\\n<li><a href=\\"#remove%E5%87%BD%E6%95%B0\\">remove函数</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#copyonwritearraylist%E7%A4%BA%E4%BE%8B\\">CopyOnWriteArrayList示例</a></li>\\n<li>更深入理解\\n<ul>\\n<li><a href=\\"#copyonwritearraylist%E7%9A%84%E7%BC%BA%E9%99%B7%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\\">CopyOnWriteArrayList的缺陷和使用场景</a></li>\\n<li><a href=\\"#copyonwritearraylist%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E4%B8%94%E6%80%A7%E8%83%BD%E6%AF%94vector%E5%A5%BD\\">CopyOnWriteArrayList为什么并发安全且性能比Vector好? </a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,i as data};
