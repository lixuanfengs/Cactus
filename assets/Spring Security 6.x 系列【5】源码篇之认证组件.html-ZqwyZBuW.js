import{_ as s,o as n,c as a,h as e}from"./app-BGJUA9Vz.js";const l={},t=e(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><p>本篇文章主要学习 <code>Spring Security</code> 中认证相关组件，为下篇分析<strong>用户名密码认证执行流程</strong> 打个基础。</p><h2 id="_2-认证机制" tabindex="-1"><a class="header-anchor" href="#_2-认证机制"><span>2. 认证机制</span></a></h2><p><code>Spring Security</code> 提供了多种<strong>认证方式</strong>登录系统：</p><ul><li><strong>Username and Password</strong> ：用用户名/密码进行认证</li><li><strong>OAuth 2.0 Login</strong>： 使用 <code>OpenID Connect </code>和<code>OAuth 2.0</code>登录</li><li><strong>SAML 2.0 Login</strong> ： <code>SAML 2.0</code>登录</li><li><strong>Remember Me</strong> ： 记住我</li><li><strong>JAAS</strong>： <code>JAAS</code>认证</li><li><strong>Pre-Authentication Scenarios</strong> ： 使用外部机制进行认证</li><li><strong>X509</strong> ： X509认证</li></ul><h2 id="_3-认证组件" tabindex="-1"><a class="header-anchor" href="#_3-认证组件"><span>3. 认证组件</span></a></h2><p>在<code>Spring Security</code>中认证相关组件有：</p><ul><li><strong>SecurityContextHolder</strong> ： 上下文信息持有者，存储当前认证用户<code>SecurityContext</code></li><li><strong>SecurityContext</strong> ：上下文信息，包含当前认证用户的 <code>Authentication </code>（认证信息），从<code> SecurityContextHolder</code>中获取</li><li><strong>Authentication</strong> ： 认证信息</li><li><strong>GrantedAuthority</strong>：授予的权限</li><li><strong>AuthenticationManager</strong> ：认证管理器， 被<code>Spring Security </code>的<code> Filter</code> 调用执行认证</li><li><strong>ProviderManager</strong> ：认证提供者管理器，<code>AuthenticationManager</code>的实现</li><li><strong>AuthenticationProvider</strong> ：认证提供者，由 <code>ProviderManager</code> 用于执行特定类型的认证</li><li><strong>AuthenticationEntryPoint</strong> ：认证入口点，处理认证过程中的认证异常，比如：<strong>重定向到登录页面</strong></li><li><strong>AbstractAuthenticationProcessingFilter</strong> ：一个用于认证的基础<code> Filter</code>抽象类</li></ul><h3 id="_3-1-securitycontextholder" tabindex="-1"><a class="header-anchor" href="#_3-1-securitycontextholder"><span>3.1 SecurityContextHolder</span></a></h3><p><code>SecurityContextHolder</code> 是 Spring Security 中的一个核心类，用于存储和访问当前应用程序执行的安全上下文（SecurityContext）。<code>SecurityContext</code> 包含了当前应用程序执行的安全信息，例如认证主体（Principal）、授予的权限（Granted Authorities）等。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/securitycontextholder.png" alt="securitycontextholder" tabindex="0" loading="lazy"><figcaption>securitycontextholder</figcaption></figure><p>当用户认证成功后，会将 <code>SecurityContext</code> 设置到<code>SecurityContextHolder</code>中，后续流程可以通过 <code>SecurityContextHolder </code>静态方法直接获取用户信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 以下方式可以在环境中测试</span></span>
<span class="line"><span style="color:#E5C07B;">SecurityContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> SecurityContextHolder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContext</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">// 获取 SecurityContext</span></span>
<span class="line"><span style="color:#E5C07B;">Authentication</span><span style="color:#E06C75;"> authentication </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAuthentication</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">// 获取认证信息</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> username </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 用户名</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> principal </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPrincipal</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 当前用户的信息，通常是UserDetails的实例</span></span>
<span class="line"><span style="color:#E5C07B;">Collection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> GrantedAuthority</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> authorities </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAuthorities</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">// 权限</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SecurityContextHolder</code> 默认采用 <code>ThreadLocal</code> 来保存信息。在过滤器阶段，已认证的请求线程会从会话中提取认证信息，并将其存储在当前线程的 <code>ThreadLocal</code> 中。这使得业务代码能够方便地获取用户信息。一旦线程执行完毕，<code>FilterChainProxy</code> 会负责执行清理操作。</p><h3 id="_3-2-securitycontext" tabindex="-1"><a class="header-anchor" href="#_3-2-securitycontext"><span>3.2 SecurityContext</span></a></h3><p><code>SecurityContext</code> 里主要包含了 <code>Authentication</code>认证对象，接口中只提供了两个简单方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Obtains the currently authenticated principal, or an authentication request token.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the &lt;code&gt;Authentication&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if no authentication</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * information is available</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 获取 Authentication</span></span>
<span class="line"><span style="color:#E5C07B;">Authentication</span><span style="color:#61AFEF;"> getAuthentication</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Changes the currently authenticated principal, or removes the authentication</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * information.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> authentication</span><span style="color:#7F848E;font-style:italic;"> the new &lt;code&gt;Authentication&lt;/code&gt; token, or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;code&gt;null&lt;/code&gt; if no further authentication information should be stored</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 设置 Authentication</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> setAuthentication</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Authentication</span><span style="color:#E06C75;"> authentication)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该接口的实现类 <code>SecurityContextImpl</code> 也很简单：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118171722859.png" alt="image-20240118171722859" tabindex="0" loading="lazy"><figcaption>image-20240118171722859</figcaption></figure><h3 id="_3-3-authentication" tabindex="-1"><a class="header-anchor" href="#_3-3-authentication"><span>3.3 Authentication</span></a></h3><p>在 <code>Spring Security</code> 中，<code>Authentication</code> 接口具有两个主要作用：</p><ul><li><p><strong>作为预认证用户信息的容器</strong>，此时用户信息尚未完成认证。它在认证管理器中充当输入参数，用于提供认证凭证。</p></li><li><p><strong>表示当前已认证的用户</strong>，可以通过访问 <code>SecurityContext</code> 来获取当前的 <code>Authentication</code> 对象。这个对象包含了已通过认证的用户的信息。</p></li></ul><p><code>Authentication</code> 接口源码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Authentication</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Principal</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取 授权信息 ,用户权限集合 =&gt; 可用于访问受保护资源时的权限验证</span></span>
<span class="line"><span style="color:#E5C07B;">	Collection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> GrantedAuthority</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> getAuthorities</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 凭据 这通常是一个密码，被认证后被清除</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#61AFEF;"> getCredentials</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 存储有关身份验证请求的其他详细信息。</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#61AFEF;"> getDetails</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 被认证主体的身份。在带有用户名和密码的身份验证请求的情况下，这将是用户名</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#61AFEF;"> getPrincipal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 是否被认证</span></span>
<span class="line"><span style="color:#C678DD;">	boolean</span><span style="color:#61AFEF;"> isAuthenticated</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 认证结果设置</span></span>
<span class="line"><span style="color:#C678DD;">	void</span><span style="color:#61AFEF;"> setAuthenticated</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;font-style:italic;"> isAuthenticated</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IllegalArgumentException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Authentication </code> 有很多实现类，对应了不同的认证方式，比如记住的身份验证时，使用的是 <code>RememberMeAuthenticationToken</code></p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118174805422.png" alt="image-20240118174805422" tabindex="0" loading="lazy"><figcaption>image-20240118174805422</figcaption></figure><h3 id="_3-4-grantedauthority" tabindex="-1"><a class="header-anchor" href="#_3-4-grantedauthority"><span>3.4 GrantedAuthority</span></a></h3><p><code>GrantedAuthority</code>用于表示已经获得的权限信息，可以是<strong>角色</strong>或<strong>权限值</strong>。</p><p>这个接口只定义了一个<code>getAuthority</code>方法，用于获取当前权限的标识符。默认的实现类是 <code>SimpleGrantedAuthority</code>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> GrantedAuthority</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	String</span><span style="color:#61AFEF;"> getAuthority</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<code>Authentication.getAuthorities()</code>获取当前用户的权限集合：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;"> Collection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> GrantedAuthority</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> authorities </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> authentication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAuthorities</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">// 权限集合信息</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-5-authenticationmanager" tabindex="-1"><a class="header-anchor" href="#_3-5-authenticationmanager"><span>3.5 AuthenticationManager</span></a></h3><p><code>AuthenticationManager</code> 是认证管理器，它被Security过滤器调用，用于执行认证操作。通常情况下，我们会使用<code>ProviderManager</code>作为常见的<code>AuthenticationManager</code>实现。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Processes an {@link Authentication} request.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 认证管理器 实现认证主要是通过AuthenticationManager接口</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 在实际开发中，我们可能有多种不同的认证方式，例如：用户名+</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 密码、邮箱+密码、手机号+验证码等，而这些认证方式的入口始终只有一个，那就是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * AuthenticationManager。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> AuthenticationManager</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * authenticate()方法主要做三件事：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *   如果验证通过，返回Authentication（通常带上authenticated=true）。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *   认证失败抛出 AuthenticationException</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 *   如果无法确定，则返回null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#E5C07B;">	Authentication</span><span style="color:#61AFEF;"> authenticate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Authentication</span><span style="color:#E06C75;font-style:italic;"> authentication</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> AuthenticationException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-providermanager" tabindex="-1"><a class="header-anchor" href="#_3-6-providermanager"><span>3.6 ProviderManager</span></a></h3><p><code>ProviderManager</code>（提供者管理器）类实现了 <code>AuthenticationManager</code> 接口。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ProviderManager</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> AuthenticationManager</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> MessageSourceAware</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> InitializingBean</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Log</span><span style="color:#E06C75;"> logger </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> LogFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLog</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ProviderManager</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> AuthenticationEventPublisher</span><span style="color:#E06C75;"> eventPublisher </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullEventPublisher</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AuthenticationProvider</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> providers </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Collections</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emptyList</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	protected</span><span style="color:#E5C07B;"> MessageSourceAccessor</span><span style="color:#E06C75;"> messages </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> SpringSecurityMessageSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAccessor</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#E5C07B;"> AuthenticationManager</span><span style="color:#E06C75;"> parent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> eraseCredentialsAfterAuthentication </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> ProviderManager</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AuthenticationProvider</span><span style="color:#ABB2BF;">... </span><span style="color:#E06C75;font-style:italic;">providers</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(providers), </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> ProviderManager</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AuthenticationProvider</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">providers</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">(providers, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> ProviderManager</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AuthenticationProvider</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">providers</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">AuthenticationManager</span><span style="color:#E06C75;font-style:italic;"> parent</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		Assert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notNull</span><span style="color:#ABB2BF;">(providers, </span><span style="color:#98C379;">&quot;providers list cannot be null&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">providers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> providers;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> parent;</span></span>
<span class="line"><span style="color:#61AFEF;">		checkState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ProviderManager</code> 内部包含多个 <code>AuthenticationProvider</code>（认证提供者），在调用 <code>ProviderManager</code> 的 <code>authenticate</code> 方法时，会循环遍历所有的 <code>AuthenticationProvider</code>。认证过程会一直持续，直到某个提供者返回认证成功，此时整个认证过程结束；如果所有提供者都无法完成认证，那么最终会返回认证失败。</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/providermanager.png" alt="providermanager" tabindex="0" loading="lazy"><figcaption>providermanager</figcaption></figure><h3 id="_3-7-authenticationprovider" tabindex="-1"><a class="header-anchor" href="#_3-7-authenticationprovider"><span>3.7 AuthenticationProvider</span></a></h3><p>每个<code>AuthenticationProvider</code>对应一种认证方式，执行实际的认证处理逻辑，比如<strong>用户名密码用</strong>的是<code>DaoAuthenticationProvider</code>：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118180310737.png" alt="image-20240118180310737" tabindex="0" loading="lazy"><figcaption>image-20240118180310737</figcaption></figure><p>通过向 <code>ProviderManager</code> 注入多个 <code>AuthenticationProvider</code>，可以实现对认证方式的自定义扩展。例如，可以添加支持手机验证码登录的 <code>AuthenticationProvider</code>，从而实现多种认证方式的灵活组合。</p><h3 id="_3-8-authenticationentrypoint" tabindex="-1"><a class="header-anchor" href="#_3-8-authenticationentrypoint"><span>3.8 AuthenticationEntryPoint</span></a></h3><p><code>AuthenticationEntryPoint</code> 在 <code>ExceptionTranslationFilter</code> 检测到认证异常时被用于触发身份验证流程，比如重定向到登录页面。</p><p>几个常见的 <code>AuthenticationEntryPoint</code> 实现包括：</p><figure><img src="https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118180728322.png" alt="image-20240118180728322" tabindex="0" loading="lazy"><figcaption>image-20240118180728322</figcaption></figure><p>比如<code>LoginUrlAuthenticationEntryPoint</code>，会在表单登录失败时，执行重定向（或转发）到登录表单<code>URL</code>。</p><h3 id="_3-9-abstractauthenticationprocessingfilter" tabindex="-1"><a class="header-anchor" href="#_3-9-abstractauthenticationprocessingfilter"><span>3.9 AbstractAuthenticationProcessingFilter</span></a></h3><p><code>AbstractAuthenticationProcessingFilter</code> 是基于浏览器的HTTP身份验证请求的抽象类，可以通过继承此类来开发认证过滤器。主要功能是提供对认证结果成功和失败的相关处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doFilter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> HttpServletResponse</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> FilterChain</span><span style="color:#E06C75;"> chain)</span></span>
<span class="line"><span style="color:#E06C75;">        throws IOException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ServletException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 1. 检查是否需要身份验证</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">requiresAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果不需要身份验证，直接继续执行过滤器链</span></span>
<span class="line"><span style="color:#E5C07B;">        chain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 2. 尝试进行身份验证，获取身份验证结果</span></span>
<span class="line"><span style="color:#E5C07B;">        Authentication</span><span style="color:#E06C75;"> authenticationResult </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> attemptAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 3. 如果身份验证结果为null，表示子类指示身份验证尚未完成，立即返回</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (authenticationResult </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // return immediately as subclass has indicated that it hasn&#39;t completed</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 4. 使用会话策略处理身份验证成功的情况</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sessionStrategy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onAuthentication</span><span style="color:#ABB2BF;">(authenticationResult, request, response);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 5. 如果设置在身份验证成功之前继续执行过滤器链，则继续执行</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">continueChainBeforeSuccessfulAuthentication</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            chain</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">doFilter</span><span style="color:#ABB2BF;">(request, response);</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 6. 处理身份验证成功的情况</span></span>
<span class="line"><span style="color:#61AFEF;">        successfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> authenticationResult)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">InternalAuthenticationServiceException</span><span style="color:#E06C75;font-style:italic;"> failed</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 7. 处理内部身份验证服务异常</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">logger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;An internal error occurred while trying to authenticate the user.&quot;</span><span style="color:#ABB2BF;">, failed);</span></span>
<span class="line"><span style="color:#61AFEF;">        unsuccessfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> failed)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">AuthenticationException</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 8. 处理身份验证失败的情况</span></span>
<span class="line"><span style="color:#61AFEF;">        unsuccessfulAuthentication</span><span style="color:#E06C75;">(request</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ex)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),o=[t];function i(p,c){return n(),a("div",null,o)}const d=s(l,[["render",i],["__file","Spring Security 6.x 系列【5】源码篇之认证组件.html.vue"]]),y=JSON.parse(`{"path":"/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%905%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6.html","title":"源码篇之认证组件","lang":"zh-CN","frontmatter":{"title":"源码篇之认证组件","subtitle":"源码篇之认证组件","date":"2024-04-11T10:54:20.000Z","category":["Spring Security"],"tag":["Spring Security"],"order":5,"description":"1. 简介 本篇文章主要学习 Spring Security 中认证相关组件，为下篇分析用户名密码认证执行流程 打个基础。 2. 认证机制 Spring Security 提供了多种认证方式登录系统： Username and Password ：用用户名/密码进行认证 OAuth 2.0 Login： 使用 OpenID Connect 和OAuth...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Spring/Spring%20Security%206.x/Spring%20Security%206.x%20%E7%B3%BB%E5%88%97%E3%80%905%E3%80%91%E6%BA%90%E7%A0%81%E7%AF%87%E4%B9%8B%E8%AE%A4%E8%AF%81%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"源码篇之认证组件"}],["meta",{"property":"og:description","content":"1. 简介 本篇文章主要学习 Spring Security 中认证相关组件，为下篇分析用户名密码认证执行流程 打个基础。 2. 认证机制 Spring Security 提供了多种认证方式登录系统： Username and Password ：用用户名/密码进行认证 OAuth 2.0 Login： 使用 OpenID Connect 和OAuth..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/securitycontextholder.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-12T10:07:13.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:published_time","content":"2024-04-11T10:54:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-12T10:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"源码篇之认证组件\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/securitycontextholder.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118171722859.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118174805422.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/providermanager.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118180310737.png\\",\\"https://lixuanfengs.github.io/blog-images/Spring-Security6.x/image-20240118180728322.png\\"],\\"datePublished\\":\\"2024-04-11T10:54:20.000Z\\",\\"dateModified\\":\\"2024-09-12T10:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1. 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2. 认证机制","slug":"_2-认证机制","link":"#_2-认证机制","children":[]},{"level":2,"title":"3. 认证组件","slug":"_3-认证组件","link":"#_3-认证组件","children":[{"level":3,"title":"3.1 SecurityContextHolder","slug":"_3-1-securitycontextholder","link":"#_3-1-securitycontextholder","children":[]},{"level":3,"title":"3.2 SecurityContext","slug":"_3-2-securitycontext","link":"#_3-2-securitycontext","children":[]},{"level":3,"title":"3.3 Authentication","slug":"_3-3-authentication","link":"#_3-3-authentication","children":[]},{"level":3,"title":"3.4 GrantedAuthority","slug":"_3-4-grantedauthority","link":"#_3-4-grantedauthority","children":[]},{"level":3,"title":"3.5 AuthenticationManager","slug":"_3-5-authenticationmanager","link":"#_3-5-authenticationmanager","children":[]},{"level":3,"title":"3.6 ProviderManager","slug":"_3-6-providermanager","link":"#_3-6-providermanager","children":[]},{"level":3,"title":"3.7 AuthenticationProvider","slug":"_3-7-authenticationprovider","link":"#_3-7-authenticationprovider","children":[]},{"level":3,"title":"3.8 AuthenticationEntryPoint","slug":"_3-8-authenticationentrypoint","link":"#_3-8-authenticationentrypoint","children":[]},{"level":3,"title":"3.9 AbstractAuthenticationProcessingFilter","slug":"_3-9-abstractauthenticationprocessingfilter","link":"#_3-9-abstractauthenticationprocessingfilter","children":[]}]}],"git":{"createdTime":1722310024000,"updatedTime":1726135633000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":6.4,"words":1920},"filePathRelative":"posts/Spring/Spring Security 6.x/Spring Security 6.x 系列【5】源码篇之认证组件.md","localizedDate":"2024年4月11日","excerpt":"<h2>1. 简介</h2>\\n<p>本篇文章主要学习 <code>Spring Security</code> 中认证相关组件，为下篇分析<strong>用户名密码认证执行流程</strong> 打个基础。</p>\\n<h2>2. 认证机制</h2>\\n<p><code>Spring Security</code> 提供了多种<strong>认证方式</strong>登录系统：</p>\\n<ul>\\n<li><strong>Username and Password</strong> ：用用户名/密码进行认证</li>\\n<li><strong>OAuth 2.0 Login</strong>： 使用 <code>OpenID Connect </code>和<code>OAuth 2.0</code>登录</li>\\n<li><strong>SAML 2.0 Login</strong> ： <code>SAML 2.0</code>登录</li>\\n<li><strong>Remember Me</strong> ： 记住我</li>\\n<li><strong>JAAS</strong>： <code>JAAS</code>认证</li>\\n<li><strong>Pre-Authentication Scenarios</strong> ： 使用外部机制进行认证</li>\\n<li><strong>X509</strong> ： X509认证</li>\\n</ul>","autoDesc":true}`);export{d as comp,y as data};
