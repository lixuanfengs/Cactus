import{_ as s,o as n,c as a,h as l}from"./app-FTozjLnl.js";const e={},p=l(`<blockquote><p>本文主要对ArrayList进行源码解析。</p></blockquote><ul><li>ArrayList 源码解析 <ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li>ArrayList的实现 <ul><li><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">底层数据结构</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9">自动扩容</a></li><li><a href="#add-addall">add(), addAll()</a></li><li><a href="#set">set()</a></li><li><a href="#get">get()</a></li><li><a href="#remove">remove()</a></li><li><a href="#trimtosize">trimToSize()</a></li><li><a href="#indexof-lastindexof">indexOf(), lastIndexOf()</a></li><li><a href="#fail-fast%E6%9C%BA%E5%88%B6">Fail-Fast机制:</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</span></a></h2><p><em>ArrayList</em>实现了<em>List</em>接口，是顺序容器，即元素存放的数据与放进去的顺序相同，允许放入<code>null</code>元素，底层通过<strong>数组实现</strong>。除该类未实现同步外，其余跟<em>Vector</em>大致相同。每个<em>ArrayList</em>都有一个容量(capacity)，表示底层数组的实际大小，容器内存储元素的个数不能多于当前容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。前面已经提过，Java泛型只是编译器提供的语法糖，所以这里的数组是一个Object数组，以便能够容纳任何类型的对象。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png" alt="ArrayList_base" tabindex="0" loading="lazy"><figcaption>ArrayList_base</figcaption></figure><p>size(), isEmpty(), get(), set()方法均能在常数时间内完成，add()方法的时间开销跟插入位置有关，addAll()方法的时间开销跟添加元素的个数成正比。其余方法大都是线性时间。</p><p>为追求效率，ArrayList没有实现同步(synchronized)，如果需要多个线程并发访问，用户可以手动同步，也可使用Vector替代。</p><h2 id="arraylist的实现" tabindex="-1"><a class="header-anchor" href="#arraylist的实现"><span><a href="#arraylist%E7%9A%84%E5%AE%9E%E7%8E%B0">#</a> ArrayList的实现</span></a></h2><h3 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构"><span><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 底层数据结构</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * The array buffer into which the elements of the ArrayList are stored.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * The capacity of the ArrayList is the length of this array buffer. Any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    transient</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[] elementData</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // non-private to simplify nested class access</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * The size of the ArrayList (the number of elements it contains).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@serial</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Constructs an empty list with the specified initial capacity.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;">  initialCapacity</span><span style="color:#7F848E;font-style:italic;">  the initial capacity of the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IllegalArgumentException</span><span style="color:#7F848E;font-style:italic;"> if the specified initial capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *         is negative</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> initialCapacity) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (initialCapacity </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elementData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[initialCapacity]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (initialCapacity </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elementData</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Illegal Capacity: &quot;</span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#E06C75;">                                               initialCapacity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Constructs an empty list with an initial capacity of ten.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elementData</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * collection, in the order they are returned by the collection&#39;s</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> c</span><span style="color:#7F848E;font-style:italic;"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NullPointerException</span><span style="color:#7F848E;font-style:italic;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#E06C75;">        elementData </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> ((size </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> elementData</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">elementData</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> !=</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;">[]</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                elementData </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elementData, size, </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">[].</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // replace with empty array.</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elementData</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> EMPTY_ELEMENTDATA</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动扩容" tabindex="-1"><a class="header-anchor" href="#自动扩容"><span><a href="#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9">#</a> 自动扩容</span></a></h3><p>每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</p><p>数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * necessary, to ensure that it can hold at least the number of elements</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * specified by the minimum capacity argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;">   minCapacity</span><span style="color:#7F848E;font-style:italic;">   the desired minimum capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> ensureCapacity</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> minExpand </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (elementData </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // any size if not default element table</span></span>
<span class="line"><span style="color:#C678DD;">            ?</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // larger than default for default empty table. It&#39;s already</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // supposed to be at default size.</span></span>
<span class="line"><span style="color:#C678DD;">            :</span><span style="color:#E06C75;"> DEFAULT_CAPACITY</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (minCapacity </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> minExpand) {</span></span>
<span class="line"><span style="color:#61AFEF;">            ensureExplicitCapacity</span><span style="color:#E06C75;">(minCapacity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> ensureCapacityInternal</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (elementData </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span></span>
<span class="line"><span style="color:#E06C75;">            minCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(DEFAULT_CAPACITY, minCapacity);</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        ensureExplicitCapacity</span><span style="color:#E06C75;">(minCapacity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> ensureExplicitCapacity</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (minCapacity </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> elementData</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            grow</span><span style="color:#E06C75;">(minCapacity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * The maximum size of array to allocate.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Some VMs reserve some header words in an array.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Attempts to allocate larger arrays may result in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * OutOfMemoryError: Requested array size exceeds VM limit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Increases the capacity to ensure that it can hold at least the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * number of elements specified by the minimum capacity argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> minCapacity</span><span style="color:#7F848E;font-style:italic;"> the desired minimum capacity</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> grow</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // overflow-conscious code</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> oldCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> elementData</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> newCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> oldCapacity </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> (oldCapacity </span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (newCapacity </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> minCapacity </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">            newCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> minCapacity</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (newCapacity </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> MAX_ARRAY_SIZE </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">            newCapacity </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> hugeCapacity</span><span style="color:#E06C75;">(minCapacity)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // minCapacity is usually close to size, so this is a win:</span></span>
<span class="line"><span style="color:#E06C75;">        elementData </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elementData, newCapacity);</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> hugeCapacity</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> minCapacity) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (minCapacity </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// overflow</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OutOfMemoryError</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (minCapacity </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> MAX_ARRAY_SIZE) </span><span style="color:#C678DD;">?</span></span>
<span class="line"><span style="color:#E5C07B;">            Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#C678DD;"> :</span></span>
<span class="line"><span style="color:#E06C75;">            MAX_ARRAY_SIZE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_grow.png" alt="ArrayList_grow" tabindex="0" loading="lazy"><figcaption>ArrayList_grow</figcaption></figure><h3 id="add-addall" tabindex="-1"><a class="header-anchor" href="#add-addall"><span><a href="#add-addall">#</a> add(), addAll()</span></a></h3><p>跟C++ 的<em>vector</em>不同，<em>ArrayList</em>没有<code>push_back()</code>方法，对应的方法是<code>add(E e)</code>，<em>ArrayList</em>也没有<code>insert()</code>方法，对应的方法是<code>add(int index, E e)</code>。这两个方法都是向容器中添加新元素，这可能会导致<em>capacity</em>不足，因此在添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容。扩容操作最终是通过<code>grow()</code>方法完成的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Appends the specified element to the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> element to be appended to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#61AFEF;">        ensureCapacityInternal</span><span style="color:#E06C75;">(size </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // Increments modCount!!</span></span>
<span class="line"><span style="color:#E06C75;">        elementData[size</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts the specified element at the specified position in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list. Shifts the element currently at that position (if any) and</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * any subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> element</span><span style="color:#7F848E;font-style:italic;"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element) {</span></span>
<span class="line"><span style="color:#61AFEF;">        rangeCheckForAdd</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        ensureCapacityInternal</span><span style="color:#E06C75;">(size </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // Increments modCount!!</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(elementData, index, elementData, index </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                         size </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> index);</span></span>
<span class="line"><span style="color:#E06C75;">        elementData[index] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        size</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_add.png" alt="ArrayList_add" tabindex="0" loading="lazy"><figcaption>ArrayList_add</figcaption></figure><p><code>add(int index, E e)</code>需要先对元素进行移动，然后完成插入操作，也就意味着该方法有着线性的时间复杂度。</p><p><code>addAll()</code>方法能够一次添加多个元素，根据位置不同也有两个版本，一个是在末尾添加的<code>addAll(Collection&lt;? extends E&gt; c)</code>方法，一个是从指定位置开始插入的<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>方法。跟<code>add()</code>方法类似，在插入之前也需要进行空间检查，如果需要则自动扩容；如果从指定位置插入，也会存在移动元素的情况。 <code>addAll()</code>的时间复杂度不仅跟插入元素的多少有关，也跟插入的位置相关。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Appends all of the elements in the specified collection to the end of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * this list, in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * specified collection&#39;s Iterator.  The behavior of this operation is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * undefined if the specified collection is modified while the operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * is in progress.  (This implies that the behavior of this call is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * undefined if the specified collection is this list, and this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list is nonempty.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> c</span><span style="color:#7F848E;font-style:italic;"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NullPointerException</span><span style="color:#7F848E;font-style:italic;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> addAll</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] a </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> numNew </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        ensureCapacityInternal</span><span style="color:#E06C75;">(size </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> numNew)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // Increments modCount</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(a, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, elementData, size, numNew);</span></span>
<span class="line"><span style="color:#E06C75;">        size </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> numNew</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> numNew </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts all of the elements in the specified collection into this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list, starting at the specified position.  Shifts the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * currently at that position (if any) and any subsequent elements to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * the right (increases their indices).  The new elements will appear</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * in the list in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * specified collection&#39;s iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index at which to insert the first element from the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *              specified collection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> c</span><span style="color:#7F848E;font-style:italic;"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> &lt;tt&gt;true&lt;/tt&gt; if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NullPointerException</span><span style="color:#7F848E;font-style:italic;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> addAll</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#61AFEF;">        rangeCheckForAdd</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] a </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> numNew </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        ensureCapacityInternal</span><span style="color:#E06C75;">(size </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> numNew)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">  // Increments modCount</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> numMoved </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (numMoved </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(elementData, index, elementData, index </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> numNew,</span></span>
<span class="line"><span style="color:#ABB2BF;">                             numMoved);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(a, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, elementData, index, numNew);</span></span>
<span class="line"><span style="color:#E06C75;">        size </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> numNew</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> numNew </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span><a href="#set">#</a> set()</span></a></h3><p>既然底层是一个数组<em>ArrayList</em>的<code>set()</code>方法也就变得非常简单，直接对数组的指定位置赋值即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> set</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element) {</span></span>
<span class="line"><span style="color:#61AFEF;">    rangeCheck</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//下标越界检查</span></span>
<span class="line"><span style="color:#E5C07B;">    E</span><span style="color:#E06C75;"> oldValue </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> elementData</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    elementData[index] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//赋值到指定位置，复制的仅仅是引用</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> oldValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span><a href="#get">#</a> get()</span></a></h3><p><code>get()</code>方法同样很简单，唯一要注意的是由于底层数组是Object[]，得到元素后需要进行类型转换。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#61AFEF;">    rangeCheck</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (E) elementData[index]</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//注意类型转换</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove"><span><a href="#remove">#</a> remove()</span></a></h3><p><code>remove()</code>方法也有两个版本，一个是<code>remove(int index)</code>删除指定位置的元素，另一个是<code>remove(Object o)</code>删除第一个满足<code>o.equals(elementData[index])</code>的元素。删除操作是<code>add()</code>操作的逆过程，需要将删除点之后的元素向前移动一个位置。需要注意的是为了让GC起作用，必须显式的为最后一个位置赋<code>null</code>值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#61AFEF;">    rangeCheck</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E5C07B;">    E</span><span style="color:#E06C75;"> oldValue </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> elementData</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> numMoved </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (numMoved </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arraycopy</span><span style="color:#ABB2BF;">(elementData, index</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, elementData, index, numMoved);</span></span>
<span class="line"><span style="color:#E06C75;">    elementData[</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">size] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //清除该位置的引用，让GC起作用</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> oldValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Java GC这里需要特别说明一下，<strong>有了垃圾收集器并不意味着一定不会有内存泄漏</strong>。对象能否被GC的依据是是否还有引用指向它，上面代码中如果不手动赋<code>null</code>值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p><h3 id="trimtosize" tabindex="-1"><a class="header-anchor" href="#trimtosize"><span><a href="#trimtosize">#</a> trimToSize()</span></a></h3><p>ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize方法来实现。代码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Trims the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance to be the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list&#39;s current size.  An application can use this operation to minimize</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * the storage of an &lt;tt&gt;ArrayList&lt;/tt&gt; instance.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> trimToSize</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (size </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> elementData</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            elementData </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (size </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">              ?</span><span style="color:#E5C07B;"> EMPTY_ELEMENTDATA</span></span>
<span class="line"><span style="color:#C678DD;">              :</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copyOf</span><span style="color:#ABB2BF;">(elementData, size);</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="indexof-lastindexof" tabindex="-1"><a class="header-anchor" href="#indexof-lastindexof"><span><a href="#indexof-lastindexof">#</a> indexOf(), lastIndexOf()</span></a></h3><p>获取元素的第一次出现的index:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the index of the first occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * More formally, returns the lowest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> indexOf</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (elementData[i]</span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;">null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(elementData[i])</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取元素的最后一次出现的index:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the index of the last occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * More formally, returns the highest index &lt;tt&gt;i&lt;/tt&gt; such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> lastIndexOf</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (elementData[i]</span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;">null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(elementData[i])</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fail-fast机制" tabindex="-1"><a class="header-anchor" href="#fail-fast机制"><span><a href="#fail-fast%E6%9C%BA%E5%88%B6">#</a> Fail-Fast机制:</span></a></h3><p>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。</p>`,44),t=[p];function o(i,c){return n(),a("div",null,t)}const y=s(e,[["render",o],["__file","ArrayList 源码解析.html.vue"]]),d=JSON.parse(`{"path":"/posts/Java/Collection/ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"ArrayList 源码解析","lang":"zh-CN","frontmatter":{"title":"ArrayList 源码解析","subtitle":"Java，Java开发，Java 体系","date":"2024-03-06T10:15:26.000Z","category":["Java"],"tag":["Java","Collection"],"order":2,"description":"本文主要对ArrayList进行源码解析。 ArrayList 源码解析 概述 ArrayList的实现 底层数据结构 构造函数 自动扩容 add(), addAll() set() get() remove() trimToSize() indexOf(), lastIndexOf() Fail-Fast机制: 参考 # 概述 ArrayList实现...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Collection/ArrayList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"ArrayList 源码解析"}],["meta",{"property":"og:description","content":"本文主要对ArrayList进行源码解析。 ArrayList 源码解析 概述 ArrayList的实现 底层数据结构 构造函数 自动扩容 add(), addAll() set() get() remove() trimToSize() indexOf(), lastIndexOf() Fail-Fast机制: 参考 # 概述 ArrayList实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"ArrayList 源码解析"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Collection"}],["meta",{"property":"article:published_time","content":"2024-03-06T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ArrayList 源码解析\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_base.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_grow.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/ArrayList_add.png\\"],\\"datePublished\\":\\"2024-03-06T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"# ArrayList的实现","slug":"arraylist的实现","link":"#arraylist的实现","children":[{"level":3,"title":"# 底层数据结构","slug":"底层数据结构","link":"#底层数据结构","children":[]},{"level":3,"title":"# 构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"# 自动扩容","slug":"自动扩容","link":"#自动扩容","children":[]},{"level":3,"title":"# add(), addAll()","slug":"add-addall","link":"#add-addall","children":[]},{"level":3,"title":"# set()","slug":"set","link":"#set","children":[]},{"level":3,"title":"# get()","slug":"get","link":"#get","children":[]},{"level":3,"title":"# remove()","slug":"remove","link":"#remove","children":[]},{"level":3,"title":"# trimToSize()","slug":"trimtosize","link":"#trimtosize","children":[]},{"level":3,"title":"# indexOf(), lastIndexOf()","slug":"indexof-lastindexof","link":"#indexof-lastindexof","children":[]},{"level":3,"title":"# Fail-Fast机制:","slug":"fail-fast机制","link":"#fail-fast机制","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":8.92,"words":2677},"filePathRelative":"posts/Java/Collection/ArrayList 源码解析.md","localizedDate":"2024年3月6日","excerpt":"<blockquote>\\n<p>本文主要对ArrayList进行源码解析。</p>\\n</blockquote>\\n<ul>\\n<li>ArrayList 源码解析\\n<ul>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0\\">概述</a></li>\\n<li>ArrayList的实现\\n<ul>\\n<li><a href=\\"#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\\">底层数据结构</a></li>\\n<li><a href=\\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">构造函数</a></li>\\n<li><a href=\\"#%E8%87%AA%E5%8A%A8%E6%89%A9%E5%AE%B9\\">自动扩容</a></li>\\n<li><a href=\\"#add-addall\\">add(), addAll()</a></li>\\n<li><a href=\\"#set\\">set()</a></li>\\n<li><a href=\\"#get\\">get()</a></li>\\n<li><a href=\\"#remove\\">remove()</a></li>\\n<li><a href=\\"#trimtosize\\">trimToSize()</a></li>\\n<li><a href=\\"#indexof-lastindexof\\">indexOf(), lastIndexOf()</a></li>\\n<li><a href=\\"#fail-fast%E6%9C%BA%E5%88%B6\\">Fail-Fast机制:</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83\\">参考</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{y as comp,d as data};
