import{_ as s,o as n,c as a,h as l}from"./app-Ntmq5oN3.js";const e={},p=l(`<blockquote><p>本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。</p></blockquote><ul><li>Java8 StampedLock <ul><li><a href="#synchronized">synchronized</a></li><li><a href="#lock">Lock</a></li><li><a href="#stampedlock">StampedLock</a></li><li><a href="#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">StampedLock与ReadWriteLock性能对比</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span><a href="#synchronized">#</a> synchronized</span></a></h2><p>在java5之前，实现同步主要是使用synchronized。它是Java语言的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。</p><p>有四种不同的同步块:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">实例方法</span></span>
<span class="line"><span style="color:#E06C75;">静态方法</span></span>
<span class="line"><span style="color:#E06C75;">实例方法中的同步块</span></span>
<span class="line"><span style="color:#E06C75;">静态方法中的同步块</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家对此应该不陌生，所以不多讲了，以下是代码示例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">synchronized</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// do operation</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结: 在多线程并发编程中Synchronized一直是元老级角色，很多人都会称呼它为重量级锁，但是随着Java SE1.6对Synchronized进行了各种优化之后，性能上也有所提升。</p><h2 id="lock" tabindex="-1"><a class="header-anchor" href="#lock"><span><a href="#lock">#</a> Lock</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">rwlock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// do operation</span></span>
<span class="line"><span style="color:#E06C75;">} </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	rwlock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是Java 5在java.util.concurrent.locks新增的一个API。</p><p>Lock是一个接口，核心方法是lock()，unlock()，tryLock()，实现类有ReentrantLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock；</p><p>ReentrantReadWriteLock, ReentrantLock 和synchronized锁都有相同的内存语义。</p><p>与synchronized不同的是，Lock完全用Java写成，在java这个层面是无关JVM实现的。Lock提供更灵活的锁机制，很多synchronized 没有提供的许多特性，比如锁投票，定时锁等候和中断锁等候，但因为lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</p><p>下面是Lock的一个代码示例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   private</span><span style="color:#C678DD;"> double</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">   private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> StampedLock</span><span style="color:#E06C75;"> sl </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StampedLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">   void</span><span style="color:#61AFEF;"> move</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> deltaX</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> deltaY</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// an exclusively locked method</span></span>
<span class="line"><span style="color:#C678DD;">     long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">     try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">       x </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF;">       y </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">       sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockWrite</span><span style="color:#ABB2BF;">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  	//下面看看乐观读锁案例</span></span>
<span class="line"><span style="color:#C678DD;">   double</span><span style="color:#61AFEF;"> distanceFromOrigin</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// A read-only method</span></span>
<span class="line"><span style="color:#C678DD;">     long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryOptimisticRead</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//获得一个乐观读锁</span></span>
<span class="line"><span style="color:#C678DD;">     double</span><span style="color:#E06C75;"> currentX</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> x, currentY </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> y; </span><span style="color:#7F848E;font-style:italic;">//将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#C678DD;">     if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(stamp)) { </span><span style="color:#7F848E;font-style:italic;">//检查发出乐观读锁后同时是否有其他写锁发生? </span></span>
<span class="line"><span style="color:#ABB2BF;">        stamp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//如果没有，我们再次获得一个读悲观锁</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          currentX </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> x; </span><span style="color:#7F848E;font-style:italic;">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF;">          currentY </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> y; </span><span style="color:#7F848E;font-style:italic;">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">           sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockRead</span><span style="color:#ABB2BF;">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(currentX </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> currentX </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> currentY </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//下面是悲观读锁案例</span></span>
<span class="line"><span style="color:#C678DD;">   void</span><span style="color:#61AFEF;"> moveIfAtOrigin</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> newX</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> newY</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// upgrade</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // Could instead start with optimistic, not read mode</span></span>
<span class="line"><span style="color:#C678DD;">     long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">     try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">       while</span><span style="color:#ABB2BF;"> (x </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0.0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0.0</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">//循环，检查当前状态是否符合</span></span>
<span class="line"><span style="color:#C678DD;">         long</span><span style="color:#E06C75;"> ws</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryConvertToWriteLock</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">//将读锁转为写锁</span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (ws </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">//这是确认转为写锁是否成功</span></span>
<span class="line"><span style="color:#ABB2BF;">           stamp </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ws; </span><span style="color:#7F848E;font-style:italic;">//如果成功 替换票据</span></span>
<span class="line"><span style="color:#ABB2BF;">           x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> newX; </span><span style="color:#7F848E;font-style:italic;">//进行状态改变</span></span>
<span class="line"><span style="color:#ABB2BF;">           y </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> newY; </span><span style="color:#7F848E;font-style:italic;">//进行状态改变</span></span>
<span class="line"><span style="color:#C678DD;">           break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#C678DD;">         else</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">//如果不能成功转换为写锁</span></span>
<span class="line"><span style="color:#E5C07B;">           sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockRead</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">//我们显式释放读锁</span></span>
<span class="line"><span style="color:#ABB2BF;">           stamp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//显式直接进行写锁 然后再通过循环再试</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">       }</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">       sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">//释放读锁或写锁</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结: 比synchronized更灵活、更具可伸缩性的锁定机制，但不管怎么说还是synchronized代码要更容易书写些</p><h2 id="stampedlock" tabindex="-1"><a class="header-anchor" href="#stampedlock"><span><a href="#stampedlock">#</a> StampedLock</span></a></h2><p>它是java8在java.util.concurrent.locks新增的一个API。</p><p>ReentrantReadWriteLock 在沒有任何读写锁时，才可以取得写入锁，这可用于实现了悲观读取(Pessimistic Reading)，即如果执行中进行读取时，经常可能有另一执行要写入的需求，为了保持同步，ReentrantReadWriteLock 的读取锁定就可派上用场。</p><p>然而，如果读取执行情况很多，写入很少的情况下，使用 ReentrantReadWriteLock 可能会使写入线程遭遇饥饿(Starvation)问题，也就是写入线程迟迟无法竞争到锁定而一直处于等待状态。</p><p>StampedLock控制锁有三种模式(写，读，乐观读)，一个StampedLock状态是由版本和模式两个部分组成，锁获取方法返回一个数字作为票据stamp，它用相应的锁状态表示并控制访问，数字0表示没有写锁被授权访问。在读锁上分为悲观锁和乐观锁。</p><p>所谓的乐观读模式，也就是若读的操作很多，写的操作很少的情况下，你可以乐观地认为，写入与读取同时发生几率很少，因此不悲观地使用完全的读取锁定，程序可以查看读取资料之后，是否遭到写入执行的变更，再采取后续的措施(重新读取变更信息，或者抛出异常) ，这一个小小改进，可大幅度提高程序的吞吐量！！</p><p>下面是java doc提供的StampedLock一个例子</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   private</span><span style="color:#C678DD;"> double</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">   private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> StampedLock</span><span style="color:#E06C75;"> sl </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StampedLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">   void</span><span style="color:#61AFEF;"> move</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> deltaX</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> deltaY</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// an exclusively locked method</span></span>
<span class="line"><span style="color:#C678DD;">     long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">     try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">       x </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF;">       y </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">       sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockWrite</span><span style="color:#ABB2BF;">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //下面看看乐观读锁案例</span></span>
<span class="line"><span style="color:#C678DD;">   double</span><span style="color:#61AFEF;"> distanceFromOrigin</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// A read-only method</span></span>
<span class="line"><span style="color:#C678DD;">     long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryOptimisticRead</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//获得一个乐观读锁</span></span>
<span class="line"><span style="color:#C678DD;">     double</span><span style="color:#E06C75;"> currentX</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> x, currentY </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> y; </span><span style="color:#7F848E;font-style:italic;">//将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#C678DD;">     if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(stamp)) { </span><span style="color:#7F848E;font-style:italic;">//检查发出乐观读锁后同时是否有其他写锁发生? </span></span>
<span class="line"><span style="color:#ABB2BF;">        stamp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//如果没有，我们再次获得一个读悲观锁</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">          currentX </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> x; </span><span style="color:#7F848E;font-style:italic;">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF;">          currentY </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> y; </span><span style="color:#7F848E;font-style:italic;">// 将两个字段读入本地局部变量</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">           sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockRead</span><span style="color:#ABB2BF;">(stamp);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(currentX </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> currentX </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> currentY </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//下面是悲观读锁案例</span></span>
<span class="line"><span style="color:#C678DD;">   void</span><span style="color:#61AFEF;"> moveIfAtOrigin</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> newX</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> newY</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// upgrade</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // Could instead start with optimistic, not read mode</span></span>
<span class="line"><span style="color:#C678DD;">     long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">     try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">       while</span><span style="color:#ABB2BF;"> (x </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0.0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0.0</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">//循环，检查当前状态是否符合</span></span>
<span class="line"><span style="color:#C678DD;">         long</span><span style="color:#E06C75;"> ws</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryConvertToWriteLock</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">//将读锁转为写锁</span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (ws </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">//这是确认转为写锁是否成功</span></span>
<span class="line"><span style="color:#ABB2BF;">           stamp </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ws; </span><span style="color:#7F848E;font-style:italic;">//如果成功 替换票据</span></span>
<span class="line"><span style="color:#ABB2BF;">           x </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> newX; </span><span style="color:#7F848E;font-style:italic;">//进行状态改变</span></span>
<span class="line"><span style="color:#ABB2BF;">           y </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> newY; </span><span style="color:#7F848E;font-style:italic;">//进行状态改变</span></span>
<span class="line"><span style="color:#C678DD;">           break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#C678DD;">         else</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">//如果不能成功转换为写锁</span></span>
<span class="line"><span style="color:#E5C07B;">           sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockRead</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">//我们显式释放读锁</span></span>
<span class="line"><span style="color:#ABB2BF;">           stamp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//显式直接进行写锁 然后再通过循环再试</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">       }</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">       sl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">//释放读锁或写锁</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小结:</p><p>StampedLock要比ReentrantReadWriteLock更加廉价，也就是消耗比较小。</p><h2 id="stampedlock与readwritelock性能对比" tabindex="-1"><a class="header-anchor" href="#stampedlock与readwritelock性能对比"><span><a href="#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94">#</a> StampedLock与ReadWriteLock性能对比</span></a></h2><p>是和ReadWritLock相比，在一个线程情况下，是读速度其4倍左右，写是1倍。</p><p>下图是六个线程情况下，读性能是其几十倍，写性能也是近10倍左右:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><a href="#%E6%80%BB%E7%BB%93">#</a> 总结</span></a></h2><ul><li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定；</li><li>ReentrantLock、ReentrantReadWriteLock,、StampedLock都是对象层面的锁定，要保证锁定一定会被释放，就必须将unLock()放到finally{}中；</li><li>StampedLock 对吞吐量有巨大的改进，特别是在读线程越来越多的场景下；</li><li>StampedLock有一个复杂的API，对于加锁操作，很容易误用其他方法;</li><li>当只有少量竞争者的时候，synchronized是一个很好的通用的锁实现;</li><li>当线程增长能够预估，ReentrantLock是一个很好的通用的锁实现;</li></ul><p>StampedLock 可以说是Lock的一个很好的补充，吞吐量以及性能上的提升足以打动很多人了，但并不是说要替代之前Lock的东西，毕竟他还是有些应用场景的，起码API比StampedLock容易入手。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span><a href="#%E5%8F%82%E8%80%83">#</a> 参考</span></a></h2>`,36),o=[p];function c(t,i){return n(),a("div",null,o)}const B=s(e,[["render",c],["__file","Java8 StampedLock.html.vue"]]),y=JSON.parse(`{"path":"/posts/Java/Java8NewFeatures/Java8%20StampedLock.html","title":"Java8 StampedLock","lang":"zh-CN","frontmatter":{"title":"Java8 StampedLock","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T15:06:55.000Z","category":["Java"],"tag":["Java","Java8 新特性"],"order":10,"description":"本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。 Java8 StampedLock synchronized Lock StampedLock StampedLock与ReadWriteLock性能对比 总结 参考 # synchronized 在java5之前...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20StampedLock.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java8 StampedLock"}],["meta",{"property":"og:description","content":"本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。 Java8 StampedLock synchronized Lock StampedLock StampedLock与ReadWriteLock性能对比 总结 参考 # synchronized 在java5之前..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:29:54.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java8 新特性"}],["meta",{"property":"article:published_time","content":"2024-03-17T15:06:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:29:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8 StampedLock\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-stampedlock-1.png\\"],\\"datePublished\\":\\"2024-03-17T15:06:55.000Z\\",\\"dateModified\\":\\"2024-03-21T03:29:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":2,"title":"# Lock","slug":"lock","link":"#lock","children":[]},{"level":2,"title":"# StampedLock","slug":"stampedlock","link":"#stampedlock","children":[]},{"level":2,"title":"# StampedLock与ReadWriteLock性能对比","slug":"stampedlock与readwritelock性能对比","link":"#stampedlock与readwritelock性能对比","children":[]},{"level":2,"title":"# 总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"# 参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1710667754000,"updatedTime":1710991794000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":6.22,"words":1865},"filePathRelative":"posts/Java/Java8NewFeatures/Java8 StampedLock.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>本文将从synchronized、Lock到Java8新增的StampedLock进行对比分析，相信StampedLock不会让大家失望。</p>\\n</blockquote>\\n<ul>\\n<li>Java8 StampedLock\\n<ul>\\n<li><a href=\\"#synchronized\\">synchronized</a></li>\\n<li><a href=\\"#lock\\">Lock</a></li>\\n<li><a href=\\"#stampedlock\\">StampedLock</a></li>\\n<li><a href=\\"#stampedlock%E4%B8%8Ereadwritelock%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94\\">StampedLock与ReadWriteLock性能对比</a></li>\\n<li><a href=\\"#%E6%80%BB%E7%BB%93\\">总结</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83\\">参考</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{B as comp,y as data};
