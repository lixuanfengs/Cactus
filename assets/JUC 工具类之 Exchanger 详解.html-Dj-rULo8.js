import{_ as p,e,o,c,b as s,g as n,f as t,h as a}from"./app-D8-J_3VU.js";const r={},i=a(`<blockquote><p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。</p></blockquote><ul><li>JUC 工具类之 Exchanger 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3exchanger">带着BAT大厂的面试问题去理解Exchanger</a></li><li><a href="#exchanger%E7%AE%80%E4%BB%8B">Exchanger简介</a></li><li><a href="#exchanger%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6">Exchanger实现机制</a></li><li>Exchanger源码解析 <ul><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB---participant">内部类 - Participant</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB---node">内部类 - Node</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">核心属性</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---exchangev-x">核心方法 - exchange(V x)</a></li><li><a href="#slotexchangeobject-item-boolean-timed-long-ns">slotExchange(Object item, boolean timed, long ns)</a></li><li><a href="#arenaexchangeobject-item-boolean-timed-long-ns">arenaExchange(Object item, boolean timed, long ns)</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解exchanger" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解exchanger"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3exchanger">#</a> 带着BAT大厂的面试问题去理解Exchanger</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解Exchanger。@pdai</p><ul><li>Exchanger主要解决什么问题?</li><li>对比SynchronousQueue，为什么说Exchanger可被视为 SynchronousQueue 的双向形式?</li><li>Exchanger在不同的JDK版本中实现有什么差别?</li><li>Exchanger实现机制?</li><li>Exchanger已经有了slot单节点，为什么会加入arena node数组? 什么时候会用到数组?</li><li>arena可以确保不同的slot在arena中是不会相冲突的，那么是怎么保证的呢?</li><li>什么是伪共享，Exchanger中如何体现的?</li><li>Exchanger实现举例</li></ul><h2 id="exchanger简介" tabindex="-1"><a class="header-anchor" href="#exchanger简介"><span><a href="#exchanger%E7%AE%80%E4%BB%8B">#</a> Exchanger简介</span></a></h2><p>Exchanger用于进行两个线程之间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过exchange()方法交换数据，当一个线程先执行exchange()方法后，它会一直等待第二个线程也执行exchange()方法，当这两个线程到达同步点时，这两个线程就可以交换数据了。</p><h2 id="exchanger实现机制" tabindex="-1"><a class="header-anchor" href="#exchanger实现机制"><span><a href="#exchanger%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6">#</a> Exchanger实现机制</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (slot is empty) { </span><span style="color:#7F848E;font-style:italic;">// offer</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // slot为空时，将item 设置到Node 中        </span></span>
<span class="line"><span style="color:#E06C75;">        place item in a Node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (can </span><span style="color:#E5C07B;">CAS</span><span style="color:#E06C75;"> slot from empty to node) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 当将node通过CAS交换到slot中时，挂起线程等待被唤醒</span></span>
<span class="line"><span style="color:#E06C75;">            wait </span><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> release</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 被唤醒后返回node中匹配到的item</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> matching item in node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (can </span><span style="color:#E5C07B;">CAS</span><span style="color:#E06C75;"> slot from node to empty) { </span><span style="color:#7F848E;font-style:italic;">// release</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         // 将slot设置为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取node中的item，将需要交换的数据设置到匹配的item</span></span>
<span class="line"><span style="color:#E06C75;">        get the item in node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        set matching item in node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 唤醒等待的线程</span></span>
<span class="line"><span style="color:#E06C75;">        release waiting thread</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // else retry on CAS failure</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如有2条线程A和B，A线程交换数据时，发现slot为空，则将需要交换的数据放在slot中等待其它线程进来交换数据，等线程B进来，读取A设置的数据，然后设置线程B需要交换的数据，然后唤醒A线程，原理就是这么简单。但是当多个线程之间进行交换数据时就会出现问题，所以Exchanger加入了slot数组。</p><h2 id="exchanger源码解析" tabindex="-1"><a class="header-anchor" href="#exchanger源码解析"><span><a href="#exchanger%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">#</a> Exchanger源码解析</span></a></h2><h3 id="内部类-participant" tabindex="-1"><a class="header-anchor" href="#内部类-participant"><span><a href="#%E5%86%85%E9%83%A8%E7%B1%BB-participant">#</a> 内部类 - Participant</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Participant</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Node</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Node</span><span style="color:#ABB2BF;">(); }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Participant的作用是为每个线程保留唯一的一个Node节点, 它继承ThreadLocal，说明每个线程具有不同的状态。</p><h3 id="内部类-node" tabindex="-1"><a class="header-anchor" href="#内部类-node"><span><a href="#%E5%86%85%E9%83%A8%E7%B1%BB-node">#</a> 内部类 - Node</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">sun</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">misc</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Contended</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // arena的下标，多个槽位的时候利用</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 上一次记录的Exchanger.bound</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> bound</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在当前bound下CAS失败的次数；</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> collides</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 用于自旋；</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这个线程的当前项，也就是需要交换的数据；</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //做releasing操作的线程传递的项；</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> match</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //挂起时设置线程值，其他情况下为null；</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#E5C07B;"> Thread</span><span style="color:#E06C75;"> parked</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Node定义中有两个变量值得思考：bound以及collides。前面提到了数组area是为了避免竞争而产生的，如果系统不存在竞争问题，那么完全没有必要开辟一个高效的arena来徒增系统的复杂性。首先通过单个slot的exchanger来交换数据，当探测到竞争时将安排不同的位置的slot来保存线程Node，并且可以确保没有slot会在同一个缓存行上。如何来判断会有竞争呢? CAS替换slot失败，如果失败，则通过记录冲突次数来扩展arena的尺寸，我们在记录冲突的过程中会跟踪“bound”的值，以及会重新计算冲突次数在bound的值被改变时。</p><h3 id="核心属性" tabindex="-1"><a class="header-anchor" href="#核心属性"><span><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">#</a> 核心属性</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Participant</span><span style="color:#E06C75;"> participant</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;">[] arena</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> slot</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>为什么会有 <code>arena数组槽</code>?</strong></li></ul><p>slot为单个槽，arena为数组槽, 他们都是Node类型。在这里可能会感觉到疑惑，slot作为Exchanger交换数据的场景，应该只需要一个就可以了啊? 为何还多了一个Participant 和数组类型的arena呢? 一个slot交换场所原则上来说应该是可以的，但实际情况却不是如此，多个参与者使用同一个交换场所时，会存在严重伸缩性问题。既然单个交换场所存在问题，那么我们就安排多个，也就是数组arena。通过数组arena来安排不同的线程使用不同的slot来降低竞争问题，并且可以保证最终一定会成对交换数据。但是<strong>Exchanger不是一来就会生成arena数组来降低竞争，只有当产生竞争是才会生成arena数组</strong>。</p><ul><li><strong>那么怎么将Node与当前线程绑定呢？</strong></li></ul><p>Participant，Participant 的作用就是为每个线程保留唯一的一个Node节点，它继承ThreadLocal，同时在Node节点中记录在arena中的下标index。</p><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Creates a new Exchanger.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Exchanger</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E06C75;">    participant </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Participant</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化participant对象。</p><h3 id="核心方法-exchange-v-x" tabindex="-1"><a class="header-anchor" href="#核心方法-exchange-v-x"><span><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-exchange-v-x">#</a> 核心方法 - exchange(V x)</span></a></h3><p>等待另一个线程到达此交换点(除非当前线程被中断)，然后将给定的对象传送给该线程，并接收该线程的对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> exchange</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">V</span><span style="color:#E06C75;"> x) throws InterruptedException {</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当参数为null时需要将item设置为空的对象</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;"> item </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (x </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> NULL_ITEM </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // translate null args</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 注意到这里的这个表达式是整个方法的核心</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((arena </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">            (v </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> slotExchange</span><span style="color:#E06C75;">(item</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L)) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">        ((</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ||</span><span style="color:#7F848E;font-style:italic;"> // disambiguates null return</span></span>
<span class="line"><span style="color:#E06C75;">            (v </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> arenaExchange</span><span style="color:#E06C75;">(item</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L)) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)))</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (v </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> NULL_ITEM) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> (V) v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法比较好理解：arena为数组槽，如果为null，则执行slotExchange()方法，否则判断线程是否中断，如果中断值抛出InterruptedException异常，没有中断则执行arenaExchange()方法。整套逻辑就是：如果slotExchange(Object item, boolean timed, long ns)方法执行失败了就执行arenaExchange(Object item, boolean timed, long ns)方法，最后返回结果V。</p><p>NULL_ITEM 为一个空节点，其实就是一个Object对象而已，slotExchange()为单个slot交换。</p><h3 id="slotexchange-object-item-boolean-timed-long-ns" tabindex="-1"><a class="header-anchor" href="#slotexchange-object-item-boolean-timed-long-ns"><span><a href="#slotexchange-object-item-boolean-timed-long-ns">#</a> slotExchange(Object item, boolean timed, long ns)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> slotExchange</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> timed</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> ns) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取当前线程node对象</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> participant</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当前线程</span></span>
<span class="line"><span style="color:#E5C07B;">    Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 若果线程被中断，就直接返回null</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInterrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// preserve interrupt status so caller can recheck</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 自旋</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 将slot值赋给q</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> ((q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> slot) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">             // slot 不为null，即表示已有线程已经把需要交换的数据设置在slot中了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 通过CAS将slot设置成null</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, SLOT, q, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // CAS操作成功后，将slot中的item赋值给对象v，以便返回。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 这里也是就读取之前线程要交换的数据</span></span>
<span class="line"><span style="color:#E5C07B;">                Object</span><span style="color:#E06C75;"> v </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 将当前线程需要交给的数据设置在q中的match</span></span>
<span class="line"><span style="color:#E5C07B;">                q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">match</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                 // 获取被挂起的线程</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#E06C75;"> w </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parked</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (w </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 如果线程不为null，唤醒它</span></span>
<span class="line"><span style="color:#E5C07B;">                    U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unpark</span><span style="color:#ABB2BF;">(w);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 返回其他线程给的V</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // create arena on contention, but continue until slot null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // CAS 操作失败，表示有其它线程竞争，在此线程之前将数据已取走</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // NCPU:CPU的核数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // bound == 0 表示arena数组未初始化过，CAS操作bound将其增加SEQ</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (NCPU </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> bound </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">                U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, BOUND, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, SEQ)</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 初始化arena数组</span></span>
<span class="line"><span style="color:#E06C75;">                arena </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;">[(FULL </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 2</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> ASHIFT]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 上面分析过，只有当arena不为空才会执行slotExchange方法的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 所以表示刚好已有其它线程加入进来将arena初始化</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (arena </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 这里就需要去执行arenaExchange</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // caller must reroute to arenaExchange</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 这里表示当前线程是以第一个线程进来交换数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 或者表示之前的数据交换已进行完毕，这里可以看作是第一个线程</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将需要交换的数据先存放在当前线程变量p中</span></span>
<span class="line"><span style="color:#E5C07B;">            p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将需要交换的数据通过CAS设置到交换区slot</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, SLOT, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, p)</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 交换成功后跳出自旋</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // CAS操作失败，表示有其它线程刚好先于当前线程将数据设置到交换区slot</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将当前线程变量中的item设置为null，然后自旋获取其它线程存放在交换区slot的数据</span></span>
<span class="line"><span style="color:#E5C07B;">            p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // await release</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 执行到这里表示当前线程已将需要的交换的数据放置于交换区slot中了，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待其它线程交换数据然后唤醒当前线程</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> end </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> timed </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> ns </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 自旋次数</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> spins </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (NCPU </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> SPINS </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 自旋等待直到p.match不为null，也就是说等待其它线程将需要交换的数据放置于交换区slot</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> ((v </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">match</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 下面的逻辑主要是自旋等待，直到spins递减到0为止</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (spins </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            h </span><span style="color:#56B6C2;">^=</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            h </span><span style="color:#56B6C2;">^=</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            h </span><span style="color:#56B6C2;">^=</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SPINS </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">) </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">spins </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> ((SPINS </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">yield</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (slot </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> p)</span></span>
<span class="line"><span style="color:#E06C75;">            spins </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SPINS</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 此处表示未设置超时或者时间未超时</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInterrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> arena </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">            (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">timed </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (ns </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> end </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置线程t被当前对象阻塞</span></span>
<span class="line"><span style="color:#E5C07B;">            U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putObject</span><span style="color:#ABB2BF;">(t, BLOCKER, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 给p挂机线程的值赋值</span></span>
<span class="line"><span style="color:#E5C07B;">            p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parked</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (slot </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> p)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果slot还没有被置为null，也就表示暂未有线程过来交换数据，需要将当前线程挂起</span></span>
<span class="line"><span style="color:#E5C07B;">                U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">park</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, ns);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 线程被唤醒，将被挂起的线程设置为null</span></span>
<span class="line"><span style="color:#E5C07B;">            p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parked</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置线程t未被任何对象阻塞</span></span>
<span class="line"><span style="color:#E5C07B;">            U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putObject</span><span style="color:#ABB2BF;">(t, BLOCKER, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 不是以上条件时(可能是arena已不为null或者超时)    </span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, SLOT, p, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">             // arena不为null则v为null,其它为超时则v为超市对象TIMED_OUT，并且跳出循环</span></span>
<span class="line"><span style="color:#E06C75;">            v </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> timed </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> ns </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInterrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> TIMED_OUT </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 取走match值，并将p中的match置为null</span></span>
<span class="line"><span style="color:#E5C07B;">    U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putOrderedObject</span><span style="color:#ABB2BF;">(p, MATCH, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置item为null</span></span>
<span class="line"><span style="color:#E5C07B;">    p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> h</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回交换值</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序首先通过participant获取当前线程节点Node。检测是否中断，如果中断return null，等待后续抛出InterruptedException异常。</p><ul><li>如果slot不为null，则进行slot消除，成功直接返回数据V，否则失败，则创建arena消除数组。</li><li>如果slot为null，但arena不为null，则返回null，进入arenaExchange逻辑。</li><li>如果slot为null，且arena也为null，则尝试占领该slot，失败重试，成功则跳出循环进入spin+block(自旋+阻塞)模式。</li></ul><p>在自旋+阻塞模式中，首先取得结束时间和自旋次数。如果match(做releasing操作的线程传递的项)为null，其首先尝试spins+随机次自旋(改自旋使用当前节点中的hash，并改变之)和退让。当自旋数为0后，假如slot发生了改变(slot != p)则重置自旋数并重试。否则假如：当前未中断&amp;arena为null&amp;(当前不是限时版本或者限时版本+当前时间未结束)：阻塞或者限时阻塞。假如：当前中断或者arena不为null或者当前为限时版本+时间已经结束：不限时版本：置v为null；限时版本：如果时间结束以及未中断则TIMED_OUT；否则给出null(原因是探测到arena非空或者当前线程中断)。</p><p>match不为空时跳出循环。</p><h3 id="arenaexchange-object-item-boolean-timed-long-ns" tabindex="-1"><a class="header-anchor" href="#arenaexchange-object-item-boolean-timed-long-ns"><span><a href="#arenaexchange-object-item-boolean-timed-long-ns">#</a> arenaExchange(Object item, boolean timed, long ns)</span></a></h3><p>此方法被执行时表示多个线程进入交换区交换数据，arena数组已被初始化，此方法中的一些处理方式和slotExchange比较类似，它是通过遍历arena数组找到需要交换的数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// timed 为true表示设置了超时时间，ns为&gt;0的值，反之没有设置超时时间</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> arenaExchange</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> timed</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> ns) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;">[] a </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> arena</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取当前线程中的存放的node</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> participant</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //index初始值0</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">index</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// access slot at i</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 遍历，如果在数组中找到数据则直接交换并唤醒线程，如未找到则将需要交换给其它线程的数据放置于数组中</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> m</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> j</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // j is raw array offset</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 其实这里就是向右遍历数组，只是用到了元素在内存偏移的偏移量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // q实际为arena数组偏移(i + 1) *  128个地址位上的node</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (Node) </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getObjectVolatile</span><span style="color:#ABB2BF;">(a, j </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#ABB2BF;"> ASHIFT) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> ABASE);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果q不为null，并且CAS操作成功，将下标j的元素置为null</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (q </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(a, j, q, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 表示当前线程已发现有交换的数据，然后获取数据，唤醒等待的线程</span></span>
<span class="line"><span style="color:#E5C07B;">            Object</span><span style="color:#E06C75;"> v </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // release</span></span>
<span class="line"><span style="color:#E5C07B;">            q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">match</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#E06C75;"> w </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parked</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (w </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unpark</span><span style="color:#ABB2BF;">(w);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // q 为null 并且 i 未超过数组边界    </span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (i </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#E06C75;"> (m </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (b </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> bound) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> MMASK) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">             // 将需要给其它线程的item赋予给p中的item</span></span>
<span class="line"><span style="color:#E5C07B;">            p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // offer</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(a, j, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, p)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 交换成功</span></span>
<span class="line"><span style="color:#C678DD;">                long</span><span style="color:#E06C75;"> end </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (timed </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> ns </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // wait</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 自旋直到有其它线程进入，遍历到该元素并与其交换，同时当前线程被唤醒</span></span>
<span class="line"><span style="color:#C678DD;">                for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> spins </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SPINS</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    Object</span><span style="color:#E06C75;"> v </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">match</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (v </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 其它线程设置的需要交换的数据match不为null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 将match设置null,item设置为null</span></span>
<span class="line"><span style="color:#E5C07B;">                        U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putOrderedObject</span><span style="color:#ABB2BF;">(p, MATCH, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                        p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // clear for next use</span></span>
<span class="line"><span style="color:#E5C07B;">                        p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> h</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                        return</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (spins </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                        h </span><span style="color:#56B6C2;">^=</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                        h </span><span style="color:#56B6C2;">^=</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                        h </span><span style="color:#56B6C2;">^=</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // xorshift</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// initialize hash</span></span>
<span class="line"><span style="color:#E06C75;">                            h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SPINS </span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">) </span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#7F848E;font-style:italic;"> // approx 50% true</span></span>
<span class="line"><span style="color:#E06C75;">                            (</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">spins </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> ((SPINS </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">yield</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // two yields per wait</span></span>
<span class="line"><span style="color:#E06C75;">                    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getObjectVolatile</span><span style="color:#ABB2BF;">(a, j)</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> p)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 和slotExchange方法中的类似，arena数组中的数据已被CAS设置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                       // match值还未设置，让其再自旋等待match被设置</span></span>
<span class="line"><span style="color:#E06C75;">                        spins </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> SPINS</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // releaser hasn&#39;t set match yet</span></span>
<span class="line"><span style="color:#C678DD;">                    else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInterrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">                        (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">timed </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#E06C75;">                            (ns </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> end </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 设置线程t被当前对象阻塞</span></span>
<span class="line"><span style="color:#E5C07B;">                        U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putObject</span><span style="color:#ABB2BF;">(t, BLOCKER, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // emulate LockSupport</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                         // 线程t赋值</span></span>
<span class="line"><span style="color:#E5C07B;">                        p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parked</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // minimize window</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getObjectVolatile</span><span style="color:#ABB2BF;">(a, j)</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> p)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                            // 数组中对象还相等，表示线程还未被唤醒，唤醒线程</span></span>
<span class="line"><span style="color:#E5C07B;">                            U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">park</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, ns);</span></span>
<span class="line"><span style="color:#E5C07B;">                        p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parked</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                         // 设置线程t未被任何对象阻塞</span></span>
<span class="line"><span style="color:#E5C07B;">                        U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putObject</span><span style="color:#ABB2BF;">(t, BLOCKER, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">                    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getObjectVolatile</span><span style="color:#ABB2BF;">(a, j)</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">                        U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(a, j, p, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 这里给bound增加加一个SEQ</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> (m </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// try to shrink</span></span>
<span class="line"><span style="color:#E5C07B;">                            U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, BOUND, b, b </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> SEQ </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                        p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                        p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> h</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                        i </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">index</span><span style="color:#56B6C2;"> &gt;&gt;&gt;=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // descend</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                            return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> (timed </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> ns </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;"> L)</span></span>
<span class="line"><span style="color:#C678DD;">                            return</span><span style="color:#E06C75;"> TIMED_OUT</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                        break</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // expired; restart</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 交换失败，表示有其它线程更改了arena数组中下标i的元素</span></span>
<span class="line"><span style="color:#E5C07B;">                p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // clear offer</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 此时表示下标不在bound &amp; MMASK或q不为null但CAS操作失败</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">           // 需要更新bound变化后的值</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">bound</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> b) { </span><span style="color:#7F848E;font-style:italic;">// stale; reset</span></span>
<span class="line"><span style="color:#E5C07B;">                p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">bound</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">collides</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 反向遍历</span></span>
<span class="line"><span style="color:#E06C75;">                i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (i </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> m </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> ((c </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">collides</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> FULL </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#56B6C2;">                !</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, BOUND, b, b </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> SEQ </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                 // 记录CAS失败的次数</span></span>
<span class="line"><span style="color:#E5C07B;">                p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">collides</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 循环遍历</span></span>
<span class="line"><span style="color:#E06C75;">                i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (i </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> m </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // cyclically traverse</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 此时表示bound值增加了SEQ+1</span></span>
<span class="line"><span style="color:#E06C75;">                i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> m </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // grow</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置下标</span></span>
<span class="line"><span style="color:#E5C07B;">            p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">index</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先通过participant取得当前节点Node，然后根据当前节点Node的index去取arena中相对应的节点node。</p><ul><li><strong>前面提到过arena可以确保不同的slot在arena中是不会相冲突的，那么是怎么保证的呢？</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">arena </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;">[(FULL </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 2</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#E06C75;"> ASHIFT]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个arena到底有多大呢? 我们先看FULL 和ASHIFT的定义：</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> FULL </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (NCPU </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">MMASK</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> MMASK </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> NCPU </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> ASHIFT </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 7</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> NCPU </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Runtime</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRuntime</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">availableProcessors</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> MMASK </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0xff</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">        // 255</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 假如我的机器NCPU = 8 ，则得到的是768大小的arena数组。然后通过以下代码取得在arena中的节点：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (Node)</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getObjectVolatile</span><span style="color:#ABB2BF;">(a, j </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#ABB2BF;"> ASHIFT) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> ABASE);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 它仍然是通过右移ASHIFT位来取得Node的，ABASE定义如下：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> ak </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;">[]</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">ABASE </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> U</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arrayBaseOffset</span><span style="color:#ABB2BF;">(ak)</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#E06C75;"> ASHIFT)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// U.arrayBaseOffset获取对象头长度，数组元素的大小可以通过unsafe.arrayIndexScale(T[].class) 方法获取到。这也就是说要访问类型为T的第N个元素的话，你的偏移量offset应该是arrayOffset+N*arrayScale。也就是说BASE = arrayOffset+ 128 。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>用@sun.misc.Contended来规避伪共享？</strong></li></ul><p><strong>伪共享说明</strong>：假设一个类的两个相互独立的属性a和b在内存地址上是连续的(比如FIFO队列的头尾指针)，那么它们通常会被加载到相同的cpu cache line里面。并发情况下，如果一个线程修改了a，会导致整个cache line失效(包括b)，这时另一个线程来读b，就需要从内存里再次加载了，这种多线程频繁修改ab的情况下，虽然a和b看似独立，但它们会互相干扰，非常影响性能。</p><p>我们再看Node节点的定义, 在Java 8 中我们是可以利用sun.misc.Contended来规避伪共享的。所以说通过 &lt;&lt; ASHIFT方式加上sun.misc.Contended，所以使得任意两个可用Node不会再同一个缓存行中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">sun</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">misc</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Contended</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">....</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再次回到arenaExchange()。取得arena中的node节点后，如果定位的节点q 不为空，且CAS操作成功，则交换数据，返回交换的数据，唤醒等待的线程。</p><ul><li>如果q等于null且下标在bound &amp; MMASK范围之内，则尝试占领该位置，如果成功，则采用自旋 + 阻塞的方式进行等待交换数据。</li><li>如果下标不在bound &amp; MMASK范围之内获取由于q不为null但是竞争失败的时候：消除p。加入bound 不等于当前节点的bond(b != p.bound)，则更新p.bound = b，collides = 0 ，i = m或者m - 1。如果冲突的次数不到m 获取m 已经为最大值或者修改当前bound的值失败，则通过增加一次collides以及循环递减下标i的值；否则更新当前bound的值成功：我们令i为m+1即为此时最大的下标。最后更新当前index的值。</li></ul><h3 id="更深入理解" tabindex="-1"><a class="header-anchor" href="#更深入理解"><span><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 更深入理解</span></a></h3><ul><li><strong>SynchronousQueue对比？</strong></li></ul><p>Exchanger是一种线程间安全交换数据的机制。可以和之前分析过的SynchronousQueue对比一下：线程A通过SynchronousQueue将数据a交给线程B；线程A通过Exchanger和线程B交换数据，线程A把数据a交给线程B，同时线程B把数据b交给线程A。可见，SynchronousQueue是交给一个数据，Exchanger是交换两个数据。</p><ul><li><strong>不同JDK实现有何差别？</strong><ul><li>在JDK5中Exchanger被设计成一个容量为1的容器，存放一个等待线程，直到有另外线程到来就会发生数据交换，然后清空容器，等到下一个到来的线程。</li><li>从JDK6开始，Exchanger用了类似ConcurrentMap的分段思想，提供了多个slot，增加了并发执行时的吞吐量。</li></ul></li></ul>`,54),y={href:"https://www.iteye.com/blog/brokendreams-2253956",target:"_blank",rel:"noopener noreferrer"},B=a(`<h3 id="exchanger示例" tabindex="-1"><a class="header-anchor" href="#exchanger示例"><span><a href="#exchanger%E7%A4%BA%E4%BE%8B">#</a> Exchanger示例</span></a></h3><p>来一个非常经典的并发问题：你有相同的数据buffer，一个或多个数据生产者，和一个或多个数据消费者。只是Exchange类只能同步2个线程，所以你只能在你的生产者和消费者问题中只有一个生产者和一个消费者时使用这个类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Producer</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> Exchanger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> exchanger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> data </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        Producer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Exchanger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">exchanger</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            super</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Producer-&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> name);</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exchanger</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> exchanger;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">; i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    data </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; 交换前:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> data);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    data </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> exchanger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exchange</span><span style="color:#ABB2BF;">(data);</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; 交换后:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> data);</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Consumer</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> Exchanger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> exchanger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> data </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        Consumer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Exchanger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">exchanger</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            super</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Consumer-&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> name);</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exchanger</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> exchanger;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                data </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; 交换前:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> data);</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    data </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> exchanger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exchange</span><span style="color:#ABB2BF;">(data);</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; 交换后:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> data);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Exchanger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">exchanger</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Exchanger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Producer</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, exchanger).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Consumer</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, exchanger).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exit</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，其结果可能如下：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Consumer- 交换前:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换前:1</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换后:1</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换前:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换后:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换前:2</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换后:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换后:2</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换前:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换前:3</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换后:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换后:3</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换前:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换前:4</span></span>
<span class="line"><span style="color:#ABB2BF;">Producer- 交换后:0</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换后:4</span></span>
<span class="line"><span style="color:#ABB2BF;">Consumer- 交换前:0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function d(C,E){const l=e("ExternalLinkIcon");return o(),c("div",null,[i,s("p",null,[n("JDK1.6实现可以参考 "),s("a",y,[n("这里在新窗口打开"),t(l)])]),B])}const u=p(r,[["render",d],["__file","JUC 工具类之 Exchanger 详解.html.vue"]]),A=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Exchanger%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 工具类之 Exchanger 详解","lang":"zh-CN","frontmatter":{"title":"JUC 工具类之 Exchanger 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":26,"description":"Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。 JUC 工具类之 Exchanger 详解 带着BAT大厂的面试问题去理解Exchanger Exchanger简介 Exchanger实现机制 Exchanger源码解析 内部类 - Participant 内部类 - Node 核心属性 构造函数 核心方法 - excha...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20Exchanger%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 工具类之 Exchanger 详解"}],["meta",{"property":"og:description","content":"Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。 JUC 工具类之 Exchanger 详解 带着BAT大厂的面试问题去理解Exchanger Exchanger简介 Exchanger实现机制 Exchanger源码解析 内部类 - Participant 内部类 - Node 核心属性 构造函数 核心方法 - excha..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 工具类之 Exchanger 详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解Exchanger","slug":"带着bat大厂的面试问题去理解exchanger","link":"#带着bat大厂的面试问题去理解exchanger","children":[]},{"level":2,"title":"# Exchanger简介","slug":"exchanger简介","link":"#exchanger简介","children":[]},{"level":2,"title":"# Exchanger实现机制","slug":"exchanger实现机制","link":"#exchanger实现机制","children":[]},{"level":2,"title":"# Exchanger源码解析","slug":"exchanger源码解析","link":"#exchanger源码解析","children":[{"level":3,"title":"# 内部类 - Participant","slug":"内部类-participant","link":"#内部类-participant","children":[]},{"level":3,"title":"# 内部类 - Node","slug":"内部类-node","link":"#内部类-node","children":[]},{"level":3,"title":"# 核心属性","slug":"核心属性","link":"#核心属性","children":[]},{"level":3,"title":"# 构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"# 核心方法 - exchange(V x)","slug":"核心方法-exchange-v-x","link":"#核心方法-exchange-v-x","children":[]},{"level":3,"title":"# slotExchange(Object item, boolean timed, long ns)","slug":"slotexchange-object-item-boolean-timed-long-ns","link":"#slotexchange-object-item-boolean-timed-long-ns","children":[]},{"level":3,"title":"# arenaExchange(Object item, boolean timed, long ns)","slug":"arenaexchange-object-item-boolean-timed-long-ns","link":"#arenaexchange-object-item-boolean-timed-long-ns","children":[]},{"level":3,"title":"# 更深入理解","slug":"更深入理解","link":"#更深入理解","children":[]},{"level":3,"title":"# Exchanger示例","slug":"exchanger示例","link":"#exchanger示例","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":17.63,"words":5290},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 工具类之 Exchanger 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>Exchanger是用于线程协作的工具类, 主要用于两个线程之间的数据交换。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 工具类之 Exchanger 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3exchanger\\">带着BAT大厂的面试问题去理解Exchanger</a></li>\\n<li><a href=\\"#exchanger%E7%AE%80%E4%BB%8B\\">Exchanger简介</a></li>\\n<li><a href=\\"#exchanger%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6\\">Exchanger实现机制</a></li>\\n<li>Exchanger源码解析\\n<ul>\\n<li><a href=\\"#%E5%86%85%E9%83%A8%E7%B1%BB---participant\\">内部类 - Participant</a></li>\\n<li><a href=\\"#%E5%86%85%E9%83%A8%E7%B1%BB---node\\">内部类 - Node</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7\\">核心属性</a></li>\\n<li><a href=\\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">构造函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---exchangev-x\\">核心方法 - exchange(V x)</a></li>\\n<li><a href=\\"#slotexchangeobject-item-boolean-timed-long-ns\\">slotExchange(Object item, boolean timed, long ns)</a></li>\\n<li><a href=\\"#arenaexchangeobject-item-boolean-timed-long-ns\\">arenaExchange(Object item, boolean timed, long ns)</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{u as comp,A as data};
