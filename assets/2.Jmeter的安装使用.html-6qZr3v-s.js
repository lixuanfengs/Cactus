import{_ as a,c as e,a as s,o as t}from"./app-DTi-QkOV.js";const l={};function n(g,i){return t(),e("div",null,i[0]||(i[0]=[s(`<h2 id="_1-jmeter-安装" tabindex="-1"><a class="header-anchor" href="#_1-jmeter-安装"><span>1. Jmeter 安装</span></a></h2><p>安装可分为本地安装或者是服务器安装，一般正规的时使用方法是本地安装后在写测试计划和脚本看效果。脚本写完后，将<code>jmx</code>脚本放到服务器来执行压测。</p><h3 id="_1-1-本地安装和服务器安装" tabindex="-1"><a class="header-anchor" href="#_1-1-本地安装和服务器安装"><span>1.1 本地安装和服务器安装</span></a></h3><p><strong>本地安装所需环境</strong></p><p>环境：JDK 1.8+</p><p>官网：<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener noreferrer">https://jmeter.apache.org/download_jmeter.cgi</a></p><p>阿里云镜像：<a href="https://mirrors.aliyun.com/apache/jmeter/binaries/" target="_blank" rel="noopener noreferrer">https://mirrors.aliyun.com/apache/jmeter/binaries/</a></p><p><strong>服务器安装方法</strong></p><p>环境：Ubuntu 22.04 + Docker 26.0.0</p><p>在服务器上安装直接使用 docker-compose.yml</p><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">version: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">services:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # JMeter是一个功能强大的性能测试工具，可以模拟多种类型的负载，并提供详细的测试报告</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 官网：https://jmeter.apache.org/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 脚本：jmeter -n -t one.jmx -l one.jtl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  Jmeter:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    image: justb4/jmeter:5.6.3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    container_name: jmeter</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    restart: always</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    environment:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - DISPLAY=:0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - TZ=Europe/Paris</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    volumes:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - ./jmx/:/opt/apache-jmeter-5.5/jmx/</span></span></code></pre></div><h3 id="_1-2-启动-jmeter" tabindex="-1"><a class="header-anchor" href="#_1-2-启动-jmeter"><span>1.2 启动 Jmeter</span></a></h3><p>解压 <code>apache-jmeter-5.6.3.zip</code>, 进入到 bin 目录下：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118110809599.png" alt="image-20241118110809599" tabindex="0" loading="lazy"><figcaption>image-20241118110809599</figcaption></figure><blockquote><p>Windows 电脑，直接点 jmeter.bat 启动。</p><p>Mac 电脑，在 jmeter 右键，选择终端启动。</p></blockquote><h3 id="_1-3-切换语言" tabindex="-1"><a class="header-anchor" href="#_1-3-切换语言"><span>1.3 切换语言</span></a></h3><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118111348794.png" alt="image-20241118111348794" tabindex="0" loading="lazy"><figcaption>image-20241118111348794</figcaption></figure><p>修改语言的方式：</p><ul><li><p>进入 D:\\Public_software\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter.properties 设置 language=zh_CN。</p></li><li><p>如图，进入页面，手动选择。</p></li></ul><p>在保存测试计划时会出现如图错误。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118150504496.png" alt="image-20241118150504496" tabindex="0" loading="lazy"><figcaption>image-20241118150504496</figcaption></figure><p>解决方式，选中<code>Jmeter</code> 文件夹，点击右键把只读置为空。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118150645111.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-配置解析" tabindex="-1"><a class="header-anchor" href="#_1-4-配置解析"><span>1.4 配置解析</span></a></h3><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118153020562.png" alt="image-20241118153020562" tabindex="0" loading="lazy"><figcaption>image-20241118153020562</figcaption></figure><p>上图是 JMeter 压测配置中非常简单的一个<strong>测试计划</strong>，测试计划下需要包括<code>线程组 - 负责运行</code>、<code>取样器(压测的接口) - 负责调接口</code>和<code>至少一个监听器 - 负责看结果</code>。这就形成了一个简单的测试计划。</p><h4 id="_1-4-1-线程组介绍" tabindex="-1"><a class="header-anchor" href="#_1-4-1-线程组介绍"><span>1.4.1 线程组介绍</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118153416363.png" alt="image-20241118153416363" tabindex="0" loading="lazy"><figcaption>image-20241118153416363</figcaption></figure><p>线程组是用于模拟用户行为的基本元素。每个线程代表一个虚拟用户，线程组通过控制线程数、每个线程的执行次数以及请求的时间间隔来模拟多用户访问的场景。线程组是测试计划中的基础组件之一，它决定了测试中虚拟用户的数量、执行频率和持续时间等参数。</p><h5 id="_1-4-1-1-函数线程组" tabindex="-1"><a class="header-anchor" href="#_1-4-1-1-函数线程组"><span>1.4.1.1 函数线程组</span></a></h5><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118154733246.png" alt="image-20241118154733246" tabindex="0" loading="lazy"><figcaption>image-20241118154733246</figcaption></figure><p>Open Mode Thread Group 支持配置简单的配置和 Groovy 脚本 如：</p><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" data-title="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">__groovy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).collect { </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;rate(&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> it</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/sec) random_arrivals(10 sec) pause(1 sec)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))} </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 请求10次，每次都递进。</span></span></code></pre></div><p>还可以配置这些参数：</p><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" data-title="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/min) random_arrivals(10 min) rate(100/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">min)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/min) random_arrivals(5 min) rate(100/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">min) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">random_arrivals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> min) </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">min) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">random_arrivals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> min) </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">min) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 通过这样的规律，就可以找到如何配置了。</span></span></code></pre></div><p>此外还支持 JMeter 函数：</p><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" data-title="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">pause</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> min) </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(\${</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">__Random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,)}</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/min)random_arrivals(\${__Random(10,100,)} min) rate(\${__Random(10,1000,)}/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">min) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 也可以多行配置</span></span></code></pre></div><p>负载举例；总时长为1分10秒。前10秒内，速率达到10/s，然后，在1分钟内吞吐量将保持在10/s。最大吞吐量为600个/分钟。配置：</p><div class="language-groovy" data-highlighter="shiki" data-ext="groovy" data-title="groovy" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">rate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">600</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> / min) random_arrivals(10 s) rate(600 /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> min) </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">random_arrivals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> min)</span></span></code></pre></div><h5 id="_1-4-1-2-简单线程组" tabindex="-1"><a class="header-anchor" href="#_1-4-1-2-简单线程组"><span>1.4.1.2 简单线程组</span></a></h5><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118162234433.png" alt="image-20241118162234433" tabindex="0" loading="lazy"><figcaption>image-20241118162234433</figcaption></figure><p>简单线程组配置起来比较简单，更适合一些循环压测的场景。</p><ul><li>线程数：一个用户相当于一个线程。</li><li>Ramp-Up：预期线程组的所有线程从启动-运行-释放的总时间。ramp up=0时，表示瞬时加压，启动线程的时间无限趋近于0。在负载测试的时候，尽量把ramp up设置大一些，让性能曲线平缓，容易找到瓶颈点。</li><li>循环次数：线程组的循环次数，如果不设置，则表示在调度时间范围内一直循环(jmeter不停的发请求)。</li><li>调度器：执行的时间设置。</li><li>此外，JMeter 还可以安装插件，设置更多的线程组模型来压测。</li></ul><h4 id="_1-4-2-取样器" tabindex="-1"><a class="header-anchor" href="#_1-4-2-取样器"><span>1.4.2 取样器</span></a></h4><p>JMeter 取样器用于定义测试中请求的类型，比如HTTP请求、数据库查询、FTP请求等。每个取样器负责模拟特定的用户行为并收集响应数据。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118164749932.png" alt="image-20241118164749932" tabindex="0" loading="lazy"><figcaption>image-20241118164749932</figcaption></figure><p>如上图所示，在线程组下创建一个取样器（HTTP压测接口）。还有一种更简单的方式创建HTTP请求<code>cURL</code> 方式导入（推荐）。</p><p><code>F12</code>打开浏览器控制台，切换到 <code>Network</code> 窗口，找到需要压测的接口，右键选择以<code>cURL</code>格式复制，随后导入<code>cURL</code> 到 <code>Jmeter</code>.</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118165624811.png" alt="image-20241118165624811" tabindex="0" loading="lazy"><figcaption>image-20241118165624811</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118165937939.png" alt="image-20241118165937939" tabindex="0" loading="lazy"><figcaption>image-20241118165937939</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118170112218.png" alt="image-20241118170112218" tabindex="0" loading="lazy"><figcaption>image-20241118170112218</figcaption></figure><p>如上图操作完成后，打开线程组下面就有相应需要压测的HTTP请求了。</p><h4 id="_1-4-3-监听器" tabindex="-1"><a class="header-anchor" href="#_1-4-3-监听器"><span>1.4.3 监听器</span></a></h4><p>线程组是各类方式的模拟压测调用，取样器HTTP是压测的接口。那么监听器就是看线程组对取样器HTTP的压测结果。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118170324006.png" alt="image-20241118170324006" tabindex="0" loading="lazy"><figcaption>image-20241118170324006</figcaption></figure><h2 id="_2-使用-jmeter" tabindex="-1"><a class="header-anchor" href="#_2-使用-jmeter"><span>2. 使用 Jmeter</span></a></h2><h3 id="_2-1-压测前置需求" tabindex="-1"><a class="header-anchor" href="#_2-1-压测前置需求"><span>2.1 压测前置需求</span></a></h3><p>前置环境操作， 目前需求是把宽带流量限制到25M。后续可以根据实际情况进行调整。</p><table><thead><tr><th style="text-align:center;">常见宽带</th><th style="text-align:center;">理论最高速率（Mbps）</th><th style="text-align:center;">理论最高速率（KB/S）</th><th style="text-align:center;">常见下载速率（供参考）</th></tr></thead><tbody><tr><td style="text-align:center;">1M</td><td style="text-align:center;">1 Mbps</td><td style="text-align:center;">128 KB/S</td><td style="text-align:center;">77~128 KB/S</td></tr><tr><td style="text-align:center;">2M</td><td style="text-align:center;">2 Mbps</td><td style="text-align:center;">256 KB/S</td><td style="text-align:center;">154~256 KB/S</td></tr><tr><td style="text-align:center;">3M</td><td style="text-align:center;">3 Mbps</td><td style="text-align:center;">384 KB/S</td><td style="text-align:center;">231~384 KB/S</td></tr><tr><td style="text-align:center;">4M</td><td style="text-align:center;">4 Mbps</td><td style="text-align:center;">512 KB/S</td><td style="text-align:center;">307~512 KB/S</td></tr><tr><td style="text-align:center;">6M</td><td style="text-align:center;">6 Mbps</td><td style="text-align:center;">620 KB/S</td><td style="text-align:center;">462~620 KB/S</td></tr><tr><td style="text-align:center;">8M</td><td style="text-align:center;">8 Mbps</td><td style="text-align:center;">1024 KB/S</td><td style="text-align:center;">614~1024 KB/S</td></tr><tr><td style="text-align:center;">10M</td><td style="text-align:center;">10 Mbps</td><td style="text-align:center;">1280 KB/S</td><td style="text-align:center;">768~1280 KB/S</td></tr><tr><td style="text-align:center;">12M</td><td style="text-align:center;">12 Mbps</td><td style="text-align:center;">1536 KB/S</td><td style="text-align:center;">922~1536 KB/S</td></tr><tr><td style="text-align:center;">20M</td><td style="text-align:center;">20 Mbps</td><td style="text-align:center;">2560 KB/S</td><td style="text-align:center;">1536~2560 KB/S</td></tr><tr><td style="text-align:center;">30M</td><td style="text-align:center;">30 Mbps</td><td style="text-align:center;">3840 KB/S</td><td style="text-align:center;">2560~3840 KB/S</td></tr><tr><td style="text-align:center;">50M</td><td style="text-align:center;">50 Mbps</td><td style="text-align:center;">6400 KB/S</td><td style="text-align:center;">3840~6400 KB/S</td></tr><tr><td style="text-align:center;">100M</td><td style="text-align:center;">100 Mbps</td><td style="text-align:center;">12800 KB/S</td><td style="text-align:center;">7680~12800 KB/S</td></tr></tbody></table><p>1Mbps 即 1Mbit/s （1 024 000 bit per second 1百万bit每秒）换算成Byte（字节）1024000 / 8 = 128000 Byte = 128KB</p><h4 id="_2-1-1-检查网络接口" tabindex="-1"><a class="header-anchor" href="#_2-1-1-检查网络接口"><span>2.1.1 检查网络接口</span></a></h4><p>首先，确认需要限速的网络接口名称。例如，通过 <code>ip addr</code> 查看网络接口名称：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> addr</span></span></code></pre></div><p>假设接口名称是 <code>docker0</code>。</p><h4 id="_2-1-2-使用-tc-设置限速" tabindex="-1"><a class="header-anchor" href="#_2-1-2-使用-tc-设置限速"><span>2.1.2 使用 <code>tc</code> 设置限速</span></a></h4><p>以下命令可以将网络带宽限制为 25 Mbps：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qdisc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tbf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rate</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 25mbit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> burst</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 32kbit</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> latency</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 400ms</span></span></code></pre></div><p>参数解释：</p><ul><li><strong><code>dev eth0</code></strong>：指定限速的网络接口。</li><li><strong><code>rate 25mbit</code></strong>：设置带宽限制为 25 Mbps。</li><li><strong><code>burst 32kbit</code></strong>：允许的突发流量大小（可根据需要调整）。</li><li><strong><code>latency 400ms</code></strong>：最大延迟时间，用于缓冲。</li></ul><h4 id="_2-1-3-验证设置" tabindex="-1"><a class="header-anchor" href="#_2-1-3-验证设置"><span>2.1.3. 验证设置</span></a></h4><p>可以通过以下命令验证限速是否生效：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qdisc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> show</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker0</span></span></code></pre></div><h4 id="_2-1-4-移除限速" tabindex="-1"><a class="header-anchor" href="#_2-1-4-移除限速"><span>2.1.4. 移除限速</span></a></h4><p>如果需要删除限速规则，可以使用以下命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qdisc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> del</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dev</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span></span></code></pre></div><p>使用 <code>iftop</code> 命令 是一个非常强大的网络流量监控工具,可以实时显示网卡的流量情况。我们可以用它来观察 8987 端口的流量:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> iftop</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> docker0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;port 8987&#39;s</span></span></code></pre></div><p>这个命令会显示 ens160 网卡上 8987 端口的实时流量情况,包括总流量、进出流量等。我们可以观察是否超过了 25M 的限制。</p><h3 id="_2-2-开始压测" tabindex="-1"><a class="header-anchor" href="#_2-2-开始压测"><span>2.2 开始压测</span></a></h3><p>真实测试案例；创建10000 用户，并设置1000并发用户同时访问压测接口。</p><p>在浏览器中 F12 打开控制台，找到 <code>Network</code> 复制想要压测的 <code>cURL</code>,最后导入到 Jmeter。（在取样器里有图文价绍）</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241118173504372.png" alt="image-20241118173504372" tabindex="0" loading="lazy"><figcaption>image-20241118173504372</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127104630594.png" alt="image-20241127104630594" tabindex="0" loading="lazy"><figcaption>image-20241127104630594</figcaption></figure><h3 id="_2-3-压测结果" tabindex="-1"><a class="header-anchor" href="#_2-3-压测结果"><span>2.3 压测结果</span></a></h3><h4 id="_2-3-1-汇总报告" tabindex="-1"><a class="header-anchor" href="#_2-3-1-汇总报告"><span>2.3.1 汇总报告</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127104850683.png" alt="image-20241127104850683" tabindex="0" loading="lazy"><figcaption>image-20241127104850683</figcaption></figure><ul><li><p>样本（Samples）：发送的请求数量。在图中，HTTP 请求和总计的样本数都是 <strong>10,000</strong>，表示总共进行了 10,000 次请求。</p></li><li><p>响应时间【单位ms】：</p><ul><li>平均值（Average）：平均的响应时间</li><li>最小值（Min）：请求返回的最小时间，其中一个用时最少的请求</li><li>最大值（Max）：请求返回的最大时间，其中一个用时最大的请求</li><li>标准偏差（Standard Deviation）：度量响应时间分布的分散程度的标准，衡量响应时间值偏离平均响应时间的程度</li></ul></li><li><p>异常 %（Error % 或 异常率）: 出现错误的百分比，错误率=错误的请求的数量/请求的总数</p></li><li><p>吞吐量TPS（Throughput）: 吞吐能力，这个才是我们需要的并发数</p></li><li><p>平均字节数（Average Bytes）：每个请求的平均数据大小（以字节为单位）。</p></li></ul><h4 id="_2-3-2-聚合报告" tabindex="-1"><a class="header-anchor" href="#_2-3-2-聚合报告"><span>2.3.2 聚合报告</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127105018210.png" alt="image-20241127105018210" tabindex="0" loading="lazy"><figcaption>image-20241127105018210</figcaption></figure><ul><li><p>样本（sample）: 发送请求的总样本数量</p></li><li><p>响应时间【单位ms】：</p><ul><li>平均值（average）：平均的响应时间</li><li>中位数（median）: 中位数的响应时间，50%请求的响应时间</li><li>90%百分位（90% Line）: 90%的请求的响应时间，意思就是说90%的请求是&lt;=1765ms返 回，另外10%的请求是大于等于1765ms返回的</li><li>95%百分位（95% Line）: 95%的请求的响应时间，95%的请求都落在1920ms之内返回的</li><li>99%百分位（99% Line）: 99%的请求的响应时间</li><li>最小值(min)：请求返回的最小时间，其中一个用时最少的请求</li><li>最大值(max)：请求返回的最大时间，其中一个用时最大的请求</li></ul></li><li><p>异常（error）: 出现错误的百分比，错误率=错误的请求的数量/请求的总数</p></li><li><p>吞吐量TPS（throughout）: 吞吐能力</p></li><li><p>接收 KB/sec（Received KB/sec）：每秒从服务器接收的数据量（以 KB 为单位）</p></li><li><p>发送 KB/sec（Sent KB/sec）：每秒发送到服务器的数据量（以 KB 为单位）。</p></li></ul><h4 id="_2-3-3-察看结果树" tabindex="-1"><a class="header-anchor" href="#_2-3-3-察看结果树"><span>2.3.3 察看结果树</span></a></h4><p>在这里记录了样本中的每一次请求</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127105202468.png" alt="image-20241127105202468" tabindex="0" loading="lazy"><figcaption>image-20241127105202468</figcaption></figure><h3 id="_2-4-jmeter常用插件" tabindex="-1"><a class="header-anchor" href="#_2-4-jmeter常用插件"><span>2.4 Jmeter常用插件</span></a></h3><p><code>Jmeter</code>自带的内容分析维度不够实际用的，这里需要加入新的插件来增强分析。</p><p>如：TPS、QPS、RT【平均响应时间】、压力机活动线程数 服务器资源信息的分析。</p><h4 id="_2-4-1-开启插件功能" tabindex="-1"><a class="header-anchor" href="#_2-4-1-开启插件功能"><span>2.4.1 开启插件功能</span></a></h4><p>访问官网地址 <a href="http://jmeter-plugins.org/downloads/all/" target="_blank" rel="noopener noreferrer">Jmeter</a>，下载plugins-manager.jar并将其放入lib/ext目录，然后重新启动JMeter。</p><p>重启成功后开始安装所需插件：</p><ul><li>PerfMon：监控服务器硬件，如CPU，内存，硬盘读写速度等</li><li>Basic Graphs：主要显示平均响应时间，活动线程数，成功/失败交易数等</li><li>Average Response Time 平均响应时间</li><li>Active Threads 活动线程数</li><li>Successful/Failed Transactions 成功/失败 事务数</li><li>Additional Graphs：主要显示吞吐量，连接时间，每秒的点击数等 <ul><li>Response Codes 响应代码</li><li>Bytes Throughput 字节吞吐量</li><li>Connect Times 连接时间</li><li>Latenc 延迟</li><li>Hits/s 点击数/秒</li></ul></li></ul><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127112730679.png" alt="image-20241127112730679" tabindex="0" loading="lazy"><figcaption>image-20241127112730679</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127112851427.png" alt="image-20241127112851427" tabindex="0" loading="lazy"><figcaption>image-20241127112851427</figcaption></figure><p>安装完成后就可以使用插件了。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127143501416.png" alt="image-20241127143501416" tabindex="0" loading="lazy"><figcaption>image-20241127143501416</figcaption></figure><h4 id="_2-4-2-配置使用插件" tabindex="-1"><a class="header-anchor" href="#_2-4-2-配置使用插件"><span>2.4.2 配置使用插件</span></a></h4><p>添加需要执行压力测试的接口，并配置线程组信息。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127154322322.png" alt="image-20241127154322322" tabindex="0" loading="lazy"><figcaption>image-20241127154322322</figcaption></figure><p><strong>响应时间</strong>：jp@gc - Response Times Over Time</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127154338381.png" alt="image-20241127154338381" tabindex="0" loading="lazy"><figcaption>image-20241127154338381</figcaption></figure><p><strong>活动线程数</strong>：jp@gc - Active Threads Over Time</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127154346756.png" alt="image-20241127154346756" tabindex="0" loading="lazy"><figcaption>image-20241127154346756</figcaption></figure><p><strong>每秒事务数</strong>：jp@gc - Transactions per Second</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127154352053.png" alt="image-20241127154352053" tabindex="0" loading="lazy"><figcaption>image-20241127154352053</figcaption></figure><h4 id="_2-4-3-性能关键指标分析" tabindex="-1"><a class="header-anchor" href="#_2-4-3-性能关键指标分析"><span>2.4.3 性能关键指标分析</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127154453511.png" alt="image-20241127154453511" tabindex="0" loading="lazy"><figcaption>image-20241127154453511</figcaption></figure><ul><li><p>响应时间（RT）</p><ul><li>平均值： 请求响应的平均时间是149ms</li><li>中位数： 50%请求响应时间都在117ms之内</li><li>P90： 90%的请求都在279ms之内响应结束</li><li>P95： 95%的请求都在376ms之内响应结束</li><li>P99：99%的请求都在563ms之内响应结束</li><li>最小值： 请求响应最小时间30ms</li><li>最大值： 请求响应的最大时间是2334ms</li></ul></li><li><p>活动线程数</p><ul><li>压力机中活动的线程数</li></ul></li><li><p>TPS： 每秒的事务数</p><ul><li>数字愈大，代表性能越好；</li></ul></li><li><p>QPS： 每秒的查询数量</p><ul><li>数字愈大，代表性能越好；（1tps &gt;= QPS）</li></ul></li><li><p>吞吐量： 每秒的请求数量</p><ul><li>数字愈大，代表性能越好；</li></ul></li></ul><h3 id="_2-5-jmeter-服务器性能监控" tabindex="-1"><a class="header-anchor" href="#_2-5-jmeter-服务器性能监控"><span>2.5 Jmeter 服务器性能监控</span></a></h3><p>在进行压力测试时，我们需要了解服务器的 CPU、内存、网络等运行状态、系统整体负载情况等。这时，需要使用 top、iftop、vmstat 等 Linux 命令来查看服务器的资源占用情况。</p><h4 id="_2-5-1-配置服务器代理" tabindex="-1"><a class="header-anchor" href="#_2-5-1-配置服务器代理"><span>2.5.1 配置服务器代理</span></a></h4><p>要监控服务器的硬件资源，必须在服务器端安装 ServerAgent 代理服务，以便 JMeter 可以监控服务器的 CPU、内存和 IO 的使用情况。</p><p>下载地址：<a href="https://github.com/undera/perfmon-agent/releases/download/2.2.3/ServerAgent-2.2.3.zip" target="_blank" rel="noopener noreferrer">ServerAgent-2.2.3</a></p><p>默认启动运行 <a href="http://startAgent.sh" target="_blank" rel="noopener noreferrer">startAgent.sh</a> 脚本即可：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#进入到ServerAgent-2.2.3目录下0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./startAgent.sh</span></span></code></pre></div><p>更改服务默认启动端口：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 编辑启动文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  startAgent.sh</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 替换内容</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./CMDRunner.jar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tool</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> PerfMonAgent</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --udp-port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8784</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tcp-port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8784</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">log.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 赋予可执行权限</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> startAgent.sh</span></span></code></pre></div><p>看到如下日志代表启动成功：</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">root@ss:ServerAgent-2.2.3#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tail</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> log.log</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">INFO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    2024-11-27</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 16:48:40.243</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [kg.apc.p</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (): Binding UDP to 8784</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">INFO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    2024-11-27</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 16:48:41.243</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [kg.apc.p</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (): Binding TCP to 8784</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">INFO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    2024-11-27</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 16:48:41.248</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [kg.apc.p</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (): JP@GC Agent v2.2.3 started</span></span></code></pre></div><h4 id="_2-5-2-配置监控服务器cpu" tabindex="-1"><a class="header-anchor" href="#_2-5-2-配置监控服务器cpu"><span>2.5.2 配置监控服务器CPU</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127172736269.png" alt="image-20241127172736269" tabindex="0" loading="lazy"><figcaption>image-20241127172736269</figcaption></figure><ul><li>idle：CPU空闲</li><li>iowait：IO等待</li><li>system：系统占用 CPU</li><li>user：CPU用户占用</li></ul><p>红色线条代表用户态 CPU 使用率（CPU user），开始时迅速上升并保持在大约 60% 左右。这表明服务器在处理用户级别的任务时占用了较高的 CPU 资源。</p><p>蓝色线条代表系统态 CPU 使用率（CPU system），在图中保持在较低的水平，大约 5% 左右。这表示用于系统级别任务的 CPU 资源占用较少。</p><h4 id="_2-5-3-配置监控服务器网络" tabindex="-1"><a class="header-anchor" href="#_2-5-3-配置监控服务器网络"><span>2.5.3 配置监控服务器网络</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127173100845.png" alt="image-20241127173100845" tabindex="0" loading="lazy"><figcaption>image-20241127173100845</figcaption></figure><ul><li>接收字节：byteSrecv【单位：比特、KB、MB】</li><li>发送字节：byteSent【单位：比特、KB、MB】</li><li>发送(transport)：tx</li><li>接收(receive)：rx</li></ul><p>红色线条代表发送的数据量（Network I/O bytes sent），在图的开头迅速上升并稳定在一个高水平，大约 90,000,000 字节(8)。这表明服务器在发送大量数据。</p><p>蓝色线条代表接收的数据量（Network I/O bytes received），同样在开头迅速上升并稳定在一个较低水平，大约 60,000,000 字节，显示服务器接收的数据量较发送的数据量少。</p><blockquote><p>换算字节到兆字节（MB）的方法如下：</p><ol><li>1 MB = 1,024 KB</li><li>1 KB = 1,024 字节</li></ol><p>因此，1 MB = 1,024 × 1,024 = 1,048,576 字节。</p><p>所以，90,000,000 字节 ÷ 1,048,576 字节/MB ≈ 85.83 MB</p></blockquote><h4 id="_2-5-4-配置监控服务器内存" tabindex="-1"><a class="header-anchor" href="#_2-5-4-配置监控服务器内存"><span>2.5.4 配置监控服务器内存</span></a></h4><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241127173109240.png" alt="image-20241127173109240" tabindex="0" loading="lazy"><figcaption>image-20241127173109240</figcaption></figure><ul><li>usedPerc：每分钟使用内存【单位：字节、KB、MB】</li><li>freePerc：每分钟未使用内存【单位：字节、KB、MB】</li></ul><p>红色线条代表可用内存（Memory free），显示在大约 12,800 MB 的水平线附近，表示服务器有大量可用内存。</p><p>蓝色线条代表已用内存（Memory used），显示在大约 5,600 MB 的水平线附近，表明内存使用较为稳定，没有显著变化。</p><h4 id="_2-5-5-监控系统整体负载情况" tabindex="-1"><a class="header-anchor" href="#_2-5-5-监控系统整体负载情况"><span>2.5.5 监控系统整体负载情况</span></a></h4><p>使用 <code>top</code> 或 <code>top -H</code> 来查询服务器资源使用情况,也可以使用 <code>uptime</code> 命令查看精简信息。</p><p><code>top</code> 和 <code>top -H</code> 的区别在于它们显示的信息范围：</p><ul><li><strong><code>top</code></strong>：显示系统中每个进程的资源使用情况，包括 CPU、内存等。默认情况下，它显示的是进程级别的信息。</li><li><strong><code>top -H</code></strong>：以线程为单位显示资源使用情况。这意味着它会显示每个进程的各个线程的资源使用情况。这在分析多线程应用程序的性能问题时非常有用。</li></ul><p>如下图所示，可以看到系统负载 load average 情况，1分钟、5分钟和15分钟的负载平均值分别为：0.10、0.22、0.11。这些值表示系统在这些时间段内的平均进程数量。接近0的值表示系统负载较低。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241128092845440.png" alt="image-20241128092845440" tabindex="0" loading="lazy"><figcaption>image-20241128092845440</figcaption></figure><h4 id="_2-5-6-性能关键指标分析load-average" tabindex="-1"><a class="header-anchor" href="#_2-5-6-性能关键指标分析load-average"><span>2.5.6 性能关键指标分析Load Average</span></a></h4><p><strong>影响Load Average 指标有：CPU、内存、网络IO等。</strong></p><p><strong>什么是Load Average？</strong></p><p><strong>Load Average</strong>（负载平均值）是一个表示系统负载的指标，通常用于衡量操作系统的运行状态和繁忙程度。它是操作系统中平均任务队列长度（正在等待 CPU 执行或等待 I/O）的时间平均值，通常以三个时间段表示：<strong>1 分钟、5 分钟和 15 分钟</strong>的平均值。</p><p><strong>Load Average 的数值是什么含义？</strong></p><p>不同的CPU性质不同，如单核，双核，四核，八核。</p><p><strong>单核CPU三种Load Average情况：</strong></p><ul><li><p>举例说明：把CPU比喻成一条（单核）马路，进程任务比喻成马路上跑着的汽车，Load则表示马 路的繁忙程度。</p><ul><li><p>情况1-Load小于1：不堵车，汽车在马路上跑得游刃有余：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241128105409934.png" alt="image-20241128105409934" tabindex="0" loading="lazy"><figcaption>image-20241128105409934</figcaption></figure></li><li><p>情况2-Load等于1：马路已无额外的资源跑更多的汽车了：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241128105957426.png" alt="image-20241128105957426" tabindex="0" loading="lazy"><figcaption>image-20241128105957426</figcaption></figure></li><li><p>情况3-Load大于1：汽车都堵着等待进入马路：</p></li></ul><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241128110214345.png" alt="image-20241128110214345" tabindex="0" loading="lazy"><figcaption>image-20241128110214345</figcaption></figure></li></ul><p><strong>双核CPU</strong></p><ul><li><p>如果有两个CPU，则表示有两条马路，此时即使Load大于1也不代表有汽车在等待：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20241128110523856.png" alt="image-20241128110523856" tabindex="0" loading="lazy"><figcaption>image-20241128110523856</figcaption></figure></li><li><p>Load==2，也是没有等待的</p></li></ul><p><strong>什么样的Load值得警惕？</strong></p><p>如下分析针对单核CPU</p><ul><li>【0.0 - 0.7]】 ：系统很闲，马路上没什么车，要考虑多部署一些服务</li><li>【0.7 - 1.0 】：系统状态不错，马路可以轻松应对</li><li>【等于1.0】 ：系统马上要处理不多来了，赶紧找一下原因</li><li>【大于5.0】 ：马路已经非常繁忙了，进入马路的每辆汽车都要无法很快的运行</li></ul><p><strong>如下分析针对单核CPU的四种情况：</strong></p><ul><li><p><strong>情况1：1分钟负载 &gt; 5，5分钟负载 &lt; 1，15分钟负载 &lt; 1</strong></p><ul><li><p>举例： 5.18 , 0.05 , 0.03</p></li><li><p>短期内繁忙，中长期空闲，初步判断是一个“抖动”或者是“拥塞前兆”</p></li></ul></li><li><p><strong>情况2：1分钟负载 &gt; 5，5分钟负载 &gt; 1，15分钟负载 &lt; 1</strong></p><ul><li><p>举例： 5.18 , 1.05 , 0.03</p></li><li><p>短期内繁忙，中期内紧张，很可能是一个“拥塞的开始”</p></li></ul></li><li><p><strong>情况3：1分钟负载 &gt; 5，5分钟负载 &gt; 5，15分钟负载 &gt; 5</strong></p><ul><li><p>举例： 5.18 , 5.05 , 5.03</p></li><li><p>短中长期都繁忙，系统“正在拥塞”</p></li></ul></li><li><p><strong>情况4：1分钟负载 &lt; 1，5分钟负载 &gt; 1，15分钟负载 &gt; 5</strong></p><ul><li><p>举例： 0.18 , 1.05 , 5.03</p></li><li><p>短期内空闲，中长期繁忙，不用紧张，系统“拥塞正在好转”</p></li></ul></li></ul>`,164)]))}const h=a(l,[["render",n]]),r=JSON.parse(`{"path":"/tutorials/projects/performance/2.Jmeter%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html","title":"Jmeter的安装使用","lang":"zh-CN","frontmatter":{"title":"Jmeter的安装使用","subtitle":"Jmeter的安装使用","date":"2024-11-20T12:55:20.000Z","category":["项目性能优化"],"tag":["项目性能优化"],"order":2,"description":"1. Jmeter 安装 安装可分为本地安装或者是服务器安装，一般正规的时使用方法是本地安装后在写测试计划和脚本看效果。脚本写完后，将jmx脚本放到服务器来执行压测。 1.1 本地安装和服务器安装 本地安装所需环境 环境：JDK 1.8+ 官网：https://jmeter.apache.org/download_jmeter.cgi 阿里云镜像：ht...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/tutorials/projects/performance/2.Jmeter%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Jmeter的安装使用"}],["meta",{"property":"og:description","content":"1. Jmeter 安装 安装可分为本地安装或者是服务器安装，一般正规的时使用方法是本地安装后在写测试计划和脚本看效果。脚本写完后，将jmx脚本放到服务器来执行压测。 1.1 本地安装和服务器安装 本地安装所需环境 环境：JDK 1.8+ 官网：https://jmeter.apache.org/download_jmeter.cgi 阿里云镜像：ht..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://beauties.eu.org/blogimg/main/img1/image-20241118110809599.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T09:49:26.000Z"}],["meta",{"property":"article:tag","content":"项目性能优化"}],["meta",{"property":"article:published_time","content":"2024-11-20T12:55:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T09:49:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jmeter的安装使用\\",\\"image\\":[\\"https://beauties.eu.org/blogimg/main/img1/image-20241118110809599.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118111348794.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118150504496.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118150645111.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118153020562.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118153416363.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118154733246.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118162234433.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118164749932.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118165624811.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118165937939.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118170112218.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118170324006.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241118173504372.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127104630594.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127104850683.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127105018210.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127105202468.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127112730679.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127112851427.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127143501416.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127154322322.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127154338381.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127154346756.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127154352053.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127154453511.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127172736269.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127173100845.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241127173109240.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241128092845440.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241128105409934.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241128105957426.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241128110214345.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20241128110523856.png\\"],\\"datePublished\\":\\"2024-11-20T12:55:20.000Z\\",\\"dateModified\\":\\"2025-08-18T09:49:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1. Jmeter 安装","slug":"_1-jmeter-安装","link":"#_1-jmeter-安装","children":[{"level":3,"title":"1.1 本地安装和服务器安装","slug":"_1-1-本地安装和服务器安装","link":"#_1-1-本地安装和服务器安装","children":[]},{"level":3,"title":"1.2 启动 Jmeter","slug":"_1-2-启动-jmeter","link":"#_1-2-启动-jmeter","children":[]},{"level":3,"title":"1.3 切换语言","slug":"_1-3-切换语言","link":"#_1-3-切换语言","children":[]},{"level":3,"title":"1.4 配置解析","slug":"_1-4-配置解析","link":"#_1-4-配置解析","children":[]}]},{"level":2,"title":"2. 使用 Jmeter","slug":"_2-使用-jmeter","link":"#_2-使用-jmeter","children":[{"level":3,"title":"2.1 压测前置需求","slug":"_2-1-压测前置需求","link":"#_2-1-压测前置需求","children":[]},{"level":3,"title":"2.2 开始压测","slug":"_2-2-开始压测","link":"#_2-2-开始压测","children":[]},{"level":3,"title":"2.3 压测结果","slug":"_2-3-压测结果","link":"#_2-3-压测结果","children":[]},{"level":3,"title":"2.4 Jmeter常用插件","slug":"_2-4-jmeter常用插件","link":"#_2-4-jmeter常用插件","children":[]},{"level":3,"title":"2.5 Jmeter 服务器性能监控","slug":"_2-5-jmeter-服务器性能监控","link":"#_2-5-jmeter-服务器性能监控","children":[]}]}],"git":{"createdTime":1755510566000,"updatedTime":1755510566000,"contributors":[{"name":"Dell","username":"Dell","email":"1183895890@qq.com","commits":1,"url":"https://github.com/Dell"}]},"readingTime":{"minutes":14.95,"words":4484},"filePathRelative":"tutorials/projects/performance/2.Jmeter的安装使用.md","localizedDate":"2024年11月20日","excerpt":"<h2>1. Jmeter 安装</h2>\\n<p>安装可分为本地安装或者是服务器安装，一般正规的时使用方法是本地安装后在写测试计划和脚本看效果。脚本写完后，将<code>jmx</code>脚本放到服务器来执行压测。</p>\\n<h3>1.1 本地安装和服务器安装</h3>\\n<p><strong>本地安装所需环境</strong></p>\\n<p>环境：JDK 1.8+</p>\\n<p>官网：<a href=\\"https://jmeter.apache.org/download_jmeter.cgi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://jmeter.apache.org/download_jmeter.cgi</a></p>","autoDesc":true}`);export{h as comp,r as data};
