import{_ as e,c as s,f as a,o as t}from"./app-B11UeuP_.js";const l={};function n(r,i){return t(),s("div",null,i[0]||(i[0]=[a(`<p>本章介绍如何使用Docker 容器来搭建压力测试监控平台。</p><h2 id="_1-分布式压测" tabindex="-1"><a class="header-anchor" href="#_1-分布式压测"><span>1. 分布式压测</span></a></h2><p>在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。</p><p>为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。</p><p>单机网络带宽有限，高延时场景下，单机可模拟最大线程数有限。</p><p>下图是分布式压测架构：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png" alt="分布式压测图.drawio" tabindex="0" loading="lazy"><figcaption>分布式压测图.drawio</figcaption></figure><blockquote><p>需要注意的是，JMeter 分布式压测中，Controller 节点负责协调，Slave 节点负责执行测试。当控制器节点配置 10 个线程，每个线程循环 100 次时，单个控制器会产生 1000 个请求样本。在 Master 启动压测后，每台 Slave 都会执行相同的测试配置，向被测服务发送 1000 次请求。因此，如果使用 3 台 Slave，总共会产生 3000 次请求样本。</p></blockquote><p>搭建 JMeter 分布式压测环境注意事项：</p><ul><li>三台 JMeter Slave 都是在 Linux（ <strong>Ubuntu 22.04.1 LTS</strong> ） 服务器上搭建。</li><li>需要确保 Server 和 Salve 之间的时间是同步的。</li><li>需在内网配置 JMeter 主从通信端口【1个固定，1个随机】，简单的配置方式就是关闭防火墙，但存 在安全隐患。</li></ul><h3 id="_1-1-在-window-系统中搭建部署-jmeter-master" tabindex="-1"><a class="header-anchor" href="#_1-1-在-window-系统中搭建部署-jmeter-master"><span>1.1 在 Window 系统中搭建部署 JMeter Master</span></a></h3><ul><li>与Window中安装JMeter一样简单，略</li></ul><h3 id="_1-2-linux-部署-jmeter-salve" tabindex="-1"><a class="header-anchor" href="#_1-2-linux-部署-jmeter-salve"><span>1.2 Linux 部署 JMeter Salve</span></a></h3><p>下载解压安装包命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -zxvf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apache-jmeter-5.6.3.tgz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apache-jmeter-5.4.1</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./apache-jmeter-5.6.3-salve</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改配置文件和主机的 hostname</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改ip</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jmeter-server</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RMI_HOST_DEF=-Djava.rmi.server.hostname=本机ip</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 改端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jmeter.properties</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RMI port to be used by the server (must start rmiregistry with same port)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server_port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1099</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># To change the default port (1099) used to access the server:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server.rmi.port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=1098</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置关闭server.rmi.ssl</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Set this if you don&#39;t want to use SSL for RMI</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server.rmi.ssl.disable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动jmeter-server服务</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./jmeter-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./jmeter.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-3-分布式环境配置" tabindex="-1"><a class="header-anchor" href="#_1-3-分布式环境配置"><span>1.3 分布式环境配置</span></a></h3><ul><li><p>确保 JMeter Controller 和 Salve 安装正确</p></li><li><p>Salve启动，并监听1099端口</p></li><li><p>在JMeter Controller 机器安装目录bin下，找到jmeter.properties文件，修改远程主机选项，添加3个 Salve服务器的地址</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_hosts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.1.18:1099,192.168.1.19:1099,192.168.1.20:1099</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>启动jmeter，如果是多网卡模式需要指定 IP 地址启动</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> jmeter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Djava.rmi.server.hostname=192.168.1.218</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>验证分布式环境是否搭建成功</p></li></ul><h2 id="_3-java-容器服务优化" tabindex="-1"><a class="header-anchor" href="#_3-java-容器服务优化"><span>3. Java 容器服务优化</span></a></h2><p>为什么对 SpringBoot 嵌入式的 Tomcat 进行调优？</p><p>基于应用性能瓶颈分析得出结论，当响应时间比较长时，系统瓶颈主要存在与Tomcat中！ 系统异常率较高，与Tomcat内部IO模型有关系【多线程&amp;网络编程】</p>`,26)]))}const p=e(l,[["render",n],["__file","4.分布式压和项目测调优.html.vue"]]),d=JSON.parse(`{"path":"/tutorial/Java%E9%A1%B9%E7%9B%AE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E5%92%8C%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%B0%83%E4%BC%98.html","title":"分布式压和项目测调优","lang":"zh-CN","frontmatter":{"title":"分布式压和项目测调优","subtitle":"分布式压和项目测调优","date":"2024-12-26T09:26:20.000Z","category":["项目性能优化"],"tag":["项目性能优化"],"order":4,"description":"本章介绍如何使用Docker 容器来搭建压力测试监控平台。 1. 分布式压测 在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。 为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。 单机网络带宽有限，高延时场景下，单机可模拟...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/tutorial/Java%E9%A1%B9%E7%9B%AE%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E5%92%8C%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%B0%83%E4%BC%98.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"分布式压和项目测调优"}],["meta",{"property":"og:description","content":"本章介绍如何使用Docker 容器来搭建压力测试监控平台。 1. 分布式压测 在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。 为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。 单机网络带宽有限，高延时场景下，单机可模拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-17T02:16:42.000Z"}],["meta",{"property":"article:tag","content":"项目性能优化"}],["meta",{"property":"article:published_time","content":"2024-12-26T09:26:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-17T02:16:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式压和项目测调优\\",\\"image\\":[\\"https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png\\"],\\"datePublished\\":\\"2024-12-26T09:26:20.000Z\\",\\"dateModified\\":\\"2025-01-17T02:16:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1. 分布式压测","slug":"_1-分布式压测","link":"#_1-分布式压测","children":[{"level":3,"title":"1.1 在 Window 系统中搭建部署 JMeter Master","slug":"_1-1-在-window-系统中搭建部署-jmeter-master","link":"#_1-1-在-window-系统中搭建部署-jmeter-master","children":[]},{"level":3,"title":"1.2 Linux 部署 JMeter Salve","slug":"_1-2-linux-部署-jmeter-salve","link":"#_1-2-linux-部署-jmeter-salve","children":[]},{"level":3,"title":"1.3  分布式环境配置","slug":"_1-3-分布式环境配置","link":"#_1-3-分布式环境配置","children":[]}]},{"level":2,"title":"3. Java 容器服务优化","slug":"_3-java-容器服务优化","link":"#_3-java-容器服务优化","children":[]}],"git":{"createdTime":1737080202000,"updatedTime":1737080202000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":2.51,"words":752},"filePathRelative":"tutorial/Java项目性能优化/4.分布式压和项目测调优.md","localizedDate":"2024年12月26日","excerpt":"<p>本章介绍如何使用Docker 容器来搭建压力测试监控平台。</p>\\n<h2>1. 分布式压测</h2>\\n<p>在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。</p>\\n<p>为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。</p>\\n<p>单机网络带宽有限，高延时场景下，单机可模拟最大线程数有限。</p>\\n<p>下图是分布式压测架构：</p>\\n<figure><img src=\\"https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png\\" alt=\\"分布式压测图.drawio\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>分布式压测图.drawio</figcaption></figure>","autoDesc":true}`);export{p as comp,d as data};
