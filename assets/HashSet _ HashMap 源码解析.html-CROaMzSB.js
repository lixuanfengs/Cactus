import{_ as s,o as a,c as n,h as l}from"./app-oUtYt9MS.js";const p={},e=l(`<blockquote><p>本文主要对HashSet &amp; HashMap 进行源码解析。</p></blockquote><ul><li>HashSet &amp; HashMap 源码解析 <ul><li>Java7 HashMap <ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#get">get()</a></li><li><a href="#put">put()</a></li><li><a href="#remove">remove()</a></li></ul></li><li>Java8 HashMap <ul><li><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">put 过程分析</a></li><li><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">数组扩容</a></li><li><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">get 过程分析</a></li></ul></li><li><a href="#hashset">HashSet</a></li></ul></li></ul><h2 id="java7-hashmap" tabindex="-1"><a class="header-anchor" href="#java7-hashmap"><span><a href="#java7-hashmap">#</a> Java7 HashMap</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</span></a></h3><p>之所以把<em>HashSet</em>和<em>HashMap</em>放在一起讲解，是因为二者在Java里有着相同的实现，前者仅仅是对后者做了一层包装，也就是说<em>HashSet</em>里面有一个<em>HashMap</em>(适配器模式)。因此本文将重点分析<em>HashMap</em>。</p><p><em>HashMap</em>实现了<em>Map</em>接口，即允许放入<code>key</code>为<code>null</code>的元素，也允许插入<code>value</code>为<code>null</code>的元素；除该类未实现同步外，其余跟<code>Hashtable</code>大致相同；跟<em>TreeMap</em>不同，该容器不保证元素顺序，根据需要该容器可能会对元素重新哈希，元素的顺序也会被重新打散，因此不同时间迭代同一个<em>HashMap</em>的顺序可能会不同。 根据对冲突的处理方式不同，哈希表有两种实现方式，一种开放地址方式(Open addressing)，另一种是冲突链表方式(Separate chaining with linked lists)。<strong>Java7 HashMap采用的是冲突链表方式</strong>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png" alt="HashMap_base" tabindex="0" loading="lazy"><figcaption>HashMap_base</figcaption></figure><p>从上图容易看出，如果选择合适的哈希函数，<code>put()</code>和<code>get()</code>方法可以在常数时间内完成。但在对<em>HashMap</em>进行迭代时，需要遍历整个table以及后面跟的冲突链表。因此对于迭代比较频繁的场景，不宜将<em>HashMap</em>的初始大小设的过大。</p><p>有两个参数可以影响<em>HashMap</em>的性能: 初始容量(inital capacity)和负载系数(load factor)。初始容量指定了初始<code>table</code>的大小，负载系数用来指定自动扩容的临界值。当<code>entry</code>的数量超过<code>capacity*load_factor</code>时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。</p><p>将对象放入到<em>HashMap</em>或<em>HashSet</em>中时，有两个方法需要特别关心: <code>hashCode()</code>和<code>equals()</code>。<strong><code>hashCode()</code>方法决定了对象会被放到哪个<code>bucket</code>里，当多个对象的哈希值冲突时，<code>equals()</code>方法决定了这些对象是否是“同一个对象”</strong>。所以，如果要将自定义的对象放入到<code>HashMap</code>或<code>HashSet</code>中，需要**@Override** <code>hashCode()</code>和<code>equals()</code>方法。</p><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get"><span><a href="#get">#</a> get()</span></a></h3><p><code>get(Object key)</code>方法根据指定的<code>key</code>值返回对应的<code>value</code>，该方法调用了<code>getEntry(Object key)</code>得到相应的<code>entry</code>，然后返回<code>entry.getValue()</code>。因此<code>getEntry()</code>是算法的核心。 算法思想是首先通过<code>hash()</code>函数得到对应<code>bucket</code>的下标，然后依次遍历冲突链表，通过<code>key.equals(k)</code>方法来判断是否是要找的那个<code>entry</code>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_getEntry.png" alt="HashMap_getEntry" tabindex="0" loading="lazy"><figcaption>HashMap_getEntry</figcaption></figure><p>上图中<code>hash(k)&amp;(table.length-1)</code>等价于<code>hash(k)%table.length</code>，原因是<em>HashMap</em>要求<code>table.length</code>必须是2的指数，因此<code>table.length-1</code>就是二进制低位全是1，跟<code>hash(k)</code>相与会将哈希值的高位全抹掉，剩下的就是余数了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//getEntry()方法</span></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Entry</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> getEntry</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	......</span></span>
<span class="line"><span style="color:#C678DD;">	int</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> hash</span><span style="color:#E06C75;">(key)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Entry</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table[hash</span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">table</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)]</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//得到冲突链表</span></span>
<span class="line"><span style="color:#E06C75;">         e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//依次遍历冲突链表中的每个entry</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //依据equals()方法判断是否相等</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">            ((k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(k)</span><span style="color:#E06C75;">)))</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="put" tabindex="-1"><a class="header-anchor" href="#put"><span><a href="#put">#</a> put()</span></a></h3><p><code>put(K key, V value)</code>方法是将指定的<code>key, value</code>对添加到<code>map</code>里。该方法首先会对<code>map</code>做一次查找，看是否包含该元组，如果已经包含则直接返回，查找过程类似于<code>getEntry()</code>方法；如果没有找到，则会通过<code>addEntry(int hash, K key, V value, int bucketIndex)</code>方法插入新的<code>entry</code>，插入方式为<strong>头插法</strong>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_addEntry.png" alt="HashMap_addEntry" tabindex="0" loading="lazy"><figcaption>HashMap_addEntry</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//addEntry()</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> addEntry</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> K</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> V</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> bucketIndex) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((size </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> threshold) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">null</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> table[bucketIndex])) {</span></span>
<span class="line"><span style="color:#61AFEF;">        resize</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> *</span><span style="color:#E5C07B;"> table</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//自动扩容，并重新哈希</span></span>
<span class="line"><span style="color:#E06C75;">        hash </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#D19A66;">null</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> key) </span><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> hash</span><span style="color:#E06C75;">(key) </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        bucketIndex </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">table</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//hash%table.length</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //在冲突链表头部插入新的entry</span></span>
<span class="line"><span style="color:#E5C07B;">    Entry</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table[bucketIndex]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    table[bucketIndex] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Entry</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">(hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    size</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="remove" tabindex="-1"><a class="header-anchor" href="#remove"><span><a href="#remove">#</a> remove()</span></a></h3><p><code>remove(Object key)</code>的作用是删除<code>key</code>值对应的<code>entry</code>，该方法的具体逻辑是在<code>removeEntryForKey(Object key)</code>里实现的。<code>removeEntryForKey()</code>方法会首先找到<code>key</code>值对应的<code>entry</code>，然后删除该<code>entry</code>(修改链表的相应引用)。查找过程跟<code>getEntry()</code>过程类似。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_removeEntryForKey.png" alt="HashMap_removeEntryForKey" tabindex="0" loading="lazy"><figcaption>HashMap_removeEntryForKey</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//removeEntryForKey()</span></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Entry</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> removeEntryForKey</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	......</span></span>
<span class="line"><span style="color:#C678DD;">	int</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> hash</span><span style="color:#E06C75;">(key)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> indexFor</span><span style="color:#E06C75;">(hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> table</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//hash&amp;(table.length-1)</span></span>
<span class="line"><span style="color:#E5C07B;">    Entry</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> prev </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table[i]</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//得到冲突链表</span></span>
<span class="line"><span style="color:#E5C07B;">    Entry</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//遍历冲突链表</span></span>
<span class="line"><span style="color:#E5C07B;">        Entry</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">            ((k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(k)</span><span style="color:#E06C75;">))) {</span><span style="color:#7F848E;font-style:italic;">//找到要删除的entry</span></span>
<span class="line"><span style="color:#E06C75;">            modCount</span><span style="color:#ABB2BF;">++;</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (prev </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> e) table[i] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//删除的是冲突链表的第一个entry</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#E5C07B;"> prev</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        prev </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java8-hashmap" tabindex="-1"><a class="header-anchor" href="#java8-hashmap"><span><a href="#java8-hashmap">#</a> Java8 HashMap</span></a></h2><p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 <strong>数组+链表+红黑树</strong> 组成。</p><p>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。</p><p>为了降低这部分的开销，在 Java8 中，当链表中的元素达到了 8 个时，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p><p>来一张图简单示意一下吧：</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-collection-hashmap8.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>注意，上图是示意图，主要是描述结构，不会达到这个状态的，因为这么多数据的时候早就扩容了。</p><p>下面，我们还是用代码来介绍吧，个人感觉，Java8 的源码可读性要差一些，不过精简一些。</p><p>Java7 中使用 Entry 来代表每个 HashMap 中的数据节点，Java8 中使用 Node，基本没有区别，都是 key，value，hash 和 next 这四个属性，不过，Node 只能用于链表的情况，红黑树的情况需要使用 TreeNode。</p><p>我们根据数组元素中，第一个节点数据类型是 Node 还是 TreeNode 来判断该位置下是链表还是红黑树的。</p><h3 id="put-过程分析" tabindex="-1"><a class="header-anchor" href="#put-过程分析"><span><a href="#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> put 过程分析</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> put</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">K</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> V</span><span style="color:#E06C75;"> value) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> putVal</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">hash</span><span style="color:#E06C75;">(key)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> true</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第四个参数 onlyIfAbsent 如果是 true，那么只有在不存在该 key 时才会进行 put 操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第五个参数 evict 我们这里不关心</span></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> putVal</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> K</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> V</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> onlyIfAbsent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">               boolean</span><span style="color:#E06C75;"> evict) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">[] tab</span><span style="color:#ABB2BF;">;</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第一次 put 值的时候，会触发下面的 resize()，类似 java7 的第一次 put 也要初始化数组长度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第一次 resize 和后续的扩容有些不一样，因为这次是数组从 null 初始化到默认的 16 或自定义的初始容量</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((tab </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> (n </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> tab</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">        n </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (tab </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> resize</span><span style="color:#E06C75;">())</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 找到具体的数组下标，如果此位置没有值，那么直接初始化一下 Node 并放置在这个位置就可以了</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tab[i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (n </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> hash]) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">        tab[i] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> newNode</span><span style="color:#E06C75;">(hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#E06C75;"> {</span><span style="color:#7F848E;font-style:italic;">// 数组该位置有数据</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span><span style="color:#E5C07B;"> K</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 首先，判断该位置的第一个数据和我们要插入的数据，key 是不是&quot;相等&quot;，如果是，取出这个节点</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">            ((k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(k)</span><span style="color:#E06C75;">)))</span></span>
<span class="line"><span style="color:#E06C75;">            e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果该节点是代表红黑树的节点，调用红黑树的插值方法，本文不展开说红黑树</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (p </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> TreeNode)</span></span>
<span class="line"><span style="color:#E06C75;">            e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> ((</span><span style="color:#E5C07B;">TreeNode</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">)p)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putTreeVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, tab, hash, key, value);</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 到这里，说明数组该位置上是一个链表</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> binCount </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#ABB2BF;"> ;</span><span style="color:#ABB2BF;"> ++</span><span style="color:#E06C75;">binCount) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 插入到链表的最后面(Java7 是插入到链表的最前面)</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> ((e </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> newNode</span><span style="color:#E06C75;">(hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // TREEIFY_THRESHOLD 为 8，所以，如果新插入的值是链表中的第 8 个</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 会触发下面的 treeifyBin，也就是将链表转换为红黑树</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (binCount </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> TREEIFY_THRESHOLD </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// -1 for 1st</span></span>
<span class="line"><span style="color:#61AFEF;">                        treeifyBin</span><span style="color:#E06C75;">(tab</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> hash)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果在该链表中找到了&quot;相等&quot;的 key(== 或 equals)</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">                    ((k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(k)</span><span style="color:#E06C75;">)))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 此时 break，那么 e 为链表中[与要插入的新值的 key &quot;相等&quot;]的 node</span></span>
<span class="line"><span style="color:#C678DD;">                    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                p </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // e!=null 说明存在旧值的key与要插入的key&quot;相等&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 对于我们分析的put操作，下面这个 if 其实就是进行 &quot;值覆盖&quot;，然后返回旧值</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (e </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            V</span><span style="color:#E06C75;"> oldValue </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">onlyIfAbsent </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> oldValue </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            afterNodeAccess</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> oldValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ++</span><span style="color:#E06C75;">modCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果 HashMap 由于新插入这个值导致 size 已经超过了阈值，需要进行扩容</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">size </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> threshold)</span></span>
<span class="line"><span style="color:#61AFEF;">        resize</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    afterNodeInsertion</span><span style="color:#E06C75;">(evict)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 Java7 稍微有点不一样的地方就是，Java7 是先扩容后插入新值的，Java8 先插值再扩容，不过这个不重要。</p><h3 id="数组扩容" tabindex="-1"><a class="header-anchor" href="#数组扩容"><span><a href="#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9">#</a> 数组扩容</span></a></h3><p>resize() 方法用于初始化数组或数组扩容，每次扩容后，容量为原来的 2 倍，并进行数据迁移。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">[] </span><span style="color:#61AFEF;">resize</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">[] oldTab </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> oldCap </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (oldTab </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> oldTab</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> oldThr </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> threshold</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> newCap</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> newThr </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (oldCap </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 对应数组扩容</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (oldCap </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> MAXIMUM_CAPACITY) {</span></span>
<span class="line"><span style="color:#E06C75;">            threshold </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> oldTab</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 将数组大小扩大一倍</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> ((newCap </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> oldCap </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> MAXIMUM_CAPACITY </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">                 oldCap </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> DEFAULT_INITIAL_CAPACITY)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将阈值扩大一倍</span></span>
<span class="line"><span style="color:#E06C75;">            newThr </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> oldThr </span><span style="color:#56B6C2;">&lt;&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // double threshold</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (oldThr </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 对应使用 new HashMap(int initialCapacity) 初始化后，第一次 put 的时候</span></span>
<span class="line"><span style="color:#E06C75;">        newCap </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> oldThr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#E06C75;"> {</span><span style="color:#7F848E;font-style:italic;">// 对应使用 new HashMap() 初始化后，第一次 put 的时候</span></span>
<span class="line"><span style="color:#E06C75;">        newCap </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> DEFAULT_INITIAL_CAPACITY</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        newThr </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)(DEFAULT_LOAD_FACTOR </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> DEFAULT_INITIAL_CAPACITY)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (newThr </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        float</span><span style="color:#E06C75;"> ft </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">float</span><span style="color:#E06C75;">)newCap </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> loadFactor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        newThr </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (newCap </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> MAXIMUM_CAPACITY </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> ft </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">float</span><span style="color:#E06C75;">)MAXIMUM_CAPACITY </span><span style="color:#C678DD;">?</span></span>
<span class="line"><span style="color:#E06C75;">                  (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)ft </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MAX_VALUE</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    threshold </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newThr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 用新的数组大小初始化新的数组</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">[] newTab </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">[])</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;">[newCap]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    table </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newTab</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 如果是初始化数组，到这里就结束了，返回 newTab 即可</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (oldTab </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 开始遍历原数组，进行数据迁移。</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> j </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> j </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> oldCap</span><span style="color:#ABB2BF;">;</span><span style="color:#ABB2BF;"> ++</span><span style="color:#E06C75;">j) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> ((e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> oldTab[j]) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                oldTab[j] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果该数组位置上只有单个元素，那就简单了，简单迁移这个元素就可以了</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                    newTab[</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;"> (newCap </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果是红黑树，具体我们就不展开了</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (e </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> TreeNode)</span></span>
<span class="line"><span style="color:#E06C75;">                    ((</span><span style="color:#E5C07B;">TreeNode</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">)e)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, newTab, j, oldCap);</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#E06C75;"> { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 这块是处理链表的情况，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 需要将此链表拆成两个链表，放到新的数组中，并且保留原来的先后顺序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // loHead、loTail 对应一条链表，hiHead、hiTail 对应另一条链表，代码还是比较简单的</span></span>
<span class="line"><span style="color:#E5C07B;">                    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> loHead </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> loTail </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> hiHead </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> hiTail </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    do</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                        next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                        if</span><span style="color:#E06C75;"> ((</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;"> oldCap) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                            if</span><span style="color:#E06C75;"> (loTail </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                                loHead </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                            else</span></span>
<span class="line"><span style="color:#E5C07B;">                                loTail</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                            loTail </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                        }</span></span>
<span class="line"><span style="color:#C678DD;">                        else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                            if</span><span style="color:#E06C75;"> (hiTail </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                                hiHead </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                            else</span></span>
<span class="line"><span style="color:#E5C07B;">                                hiTail</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                            hiTail </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                        }</span></span>
<span class="line"><span style="color:#E06C75;">                    } </span><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> ((e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (loTail </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        loTail</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 第一条链表</span></span>
<span class="line"><span style="color:#E06C75;">                        newTab[j] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> loHead</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (hiTail </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        hiTail</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        // 第二条链表的新的位置是 j + oldCap，这个很好理解</span></span>
<span class="line"><span style="color:#E06C75;">                        newTab[j </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> oldCap] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> hiHead</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    }</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> newTab</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-过程分析" tabindex="-1"><a class="header-anchor" href="#get-过程分析"><span><a href="#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90">#</a> get 过程分析</span></a></h3><p>相对于 put 来说，get 真的太简单了。</p><ul><li>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)</li><li>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步</li><li>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步</li><li>遍历链表，直到找到相等(==或equals)的 key</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (e </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getNode</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">hash</span><span style="color:#E06C75;">(key)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> key)) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> getNode</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> key) {</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">[] tab</span><span style="color:#ABB2BF;">;</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span><span style="color:#E5C07B;"> K</span><span style="color:#E06C75;"> k</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> ((tab </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> table) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> (n </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> tab</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">        (first </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tab[(n </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">&amp;</span><span style="color:#E06C75;"> hash]) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 判断第一个节点是不是就是需要的</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#7F848E;font-style:italic;"> // always check first node</span></span>
<span class="line"><span style="color:#E06C75;">            ((k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(k)</span><span style="color:#E06C75;">)))</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> ((e </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 判断是否是红黑树</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (first </span><span style="color:#C678DD;">instanceof</span><span style="color:#E06C75;"> TreeNode)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> ((</span><span style="color:#E5C07B;">TreeNode</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">)first)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTreeNode</span><span style="color:#ABB2BF;">(hash, key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 链表遍历</span></span>
<span class="line"><span style="color:#C678DD;">            do</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hash</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> hash </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">                    ((k </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">key</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> (key </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> key</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(k)</span><span style="color:#E06C75;">)))</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> ((e </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hashset" tabindex="-1"><a class="header-anchor" href="#hashset"><span><a href="#hashset">#</a> HashSet</span></a></h2><p>前面已经说过<em>HashSet</em>是对<em>HashMap</em>的简单包装，对<em>HashSet</em>的函数调用都会转换成合适的<em>HashMap</em>方法，因此<em>HashSet</em>的实现非常简单，只有不到300行代码。这里不再赘述。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//HashSet是对HashMap的简单包装</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HashSet</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	......</span></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//HashSet里面有一个HashMap</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Dummy value to associate with an Object in the backing Map</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> PRESENT </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> HashSet</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        map </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ......</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span><span style="color:#7F848E;font-style:italic;">//简单的方法转换</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(e, PRESENT)</span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ......</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),o=[e];function t(c,r){return a(),n("div",null,o)}const y=s(p,[["render",t],["__file","HashSet _ HashMap 源码解析.html.vue"]]),B=JSON.parse(`{"path":"/posts/Java/Collection/HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"HashSet & HashMap 源码解析","lang":"zh-CN","frontmatter":{"title":"HashSet & HashMap 源码解析","subtitle":"Java，Java开发，Java 体系","date":"2024-03-06T10:15:26.000Z","category":["Java"],"tag":["Java","Collection"],"order":6,"description":"本文主要对HashSet & HashMap 进行源码解析。 HashSet & HashMap 源码解析 Java7 HashMap 概述 get() put() remove() Java8 HashMap put 过程分析 数组扩容 get 过程分析 HashSet # Java7 HashMap # 概述 之所以把HashSet和HashMap...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Collection/HashSet%20_%20HashMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"HashSet & HashMap 源码解析"}],["meta",{"property":"og:description","content":"本文主要对HashSet & HashMap 进行源码解析。 HashSet & HashMap 源码解析 Java7 HashMap 概述 get() put() remove() Java8 HashMap put 过程分析 数组扩容 get 过程分析 HashSet # Java7 HashMap # 概述 之所以把HashSet和HashMap..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"HashSet & HashMap 源码解析"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Collection"}],["meta",{"property":"article:published_time","content":"2024-03-06T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HashSet & HashMap 源码解析\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_base.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_getEntry.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_addEntry.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/HashMap_removeEntryForKey.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-collection-hashmap8.png\\"],\\"datePublished\\":\\"2024-03-06T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# Java7 HashMap","slug":"java7-hashmap","link":"#java7-hashmap","children":[{"level":3,"title":"# 概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"# get()","slug":"get","link":"#get","children":[]},{"level":3,"title":"# put()","slug":"put","link":"#put","children":[]},{"level":3,"title":"# remove()","slug":"remove","link":"#remove","children":[]}]},{"level":2,"title":"# Java8 HashMap","slug":"java8-hashmap","link":"#java8-hashmap","children":[{"level":3,"title":"# put 过程分析","slug":"put-过程分析","link":"#put-过程分析","children":[]},{"level":3,"title":"# 数组扩容","slug":"数组扩容","link":"#数组扩容","children":[]},{"level":3,"title":"# get 过程分析","slug":"get-过程分析","link":"#get-过程分析","children":[]}]},{"level":2,"title":"# HashSet","slug":"hashset","link":"#hashset","children":[]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":10.51,"words":3154},"filePathRelative":"posts/Java/Collection/HashSet & HashMap 源码解析.md","localizedDate":"2024年3月6日","excerpt":"<blockquote>\\n<p>本文主要对HashSet &amp; HashMap 进行源码解析。</p>\\n</blockquote>\\n<ul>\\n<li>HashSet &amp; HashMap 源码解析\\n<ul>\\n<li>Java7 HashMap\\n<ul>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0\\">概述</a></li>\\n<li><a href=\\"#get\\">get()</a></li>\\n<li><a href=\\"#put\\">put()</a></li>\\n<li><a href=\\"#remove\\">remove()</a></li>\\n</ul>\\n</li>\\n<li>Java8 HashMap\\n<ul>\\n<li><a href=\\"#put-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\\">put 过程分析</a></li>\\n<li><a href=\\"#%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9\\">数组扩容</a></li>\\n<li><a href=\\"#get-%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90\\">get 过程分析</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#hashset\\">HashSet</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{y as comp,B as data};
