import{_ as i,e as n,o as s,c as t,b as a,g as E,f as l,h as B}from"./app-CjF1cpJX.js";const r={},A=B('<blockquote><p>本文主要对Java基础知识体系小结，同时结合一些Q&amp;A进行理解。</p></blockquote><ul><li>Java 基础之图谱 <ul><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a></li><li><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">知识体系</a></li><li>Q&amp;A <ul><li><a href="#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC">Java 中应该使用什么数据类型来代表价格?</a></li><li><a href="#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string">怎么将 byte 转换为 String?</a></li><li><a href="#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B">Java 中怎样将 bytes 转换为 long 类型?</a></li><li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1">我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</a></li><li><a href="#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BBb-%E7%BB%A7%E6%89%BF-ac-%E7%BB%A7%E6%89%BF-b%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c--c-b">存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</a></li><li><a href="#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object">哪个类包含 clone 方法? 是 Cloneable 还是 Object?</a></li><li><a href="#java-%E4%B8%AD--%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97">Java 中 ++ 操作符是线程安全的吗?</a></li><li><a href="#a--a--b-%E4%B8%8E-a--b-%E7%9A%84%E5%8C%BA%E5%88%AB">a = a + b 与 a += b 的区别</a></li><li><a href="#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97">我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</a></li><li><a href="#301--03-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false">3*0.1 == 0.3 将会返回什么? true 还是 false?</a></li><li><a href="#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98">int 和 Integer 哪个会占用更多的内存?</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84immutable">为什么 Java 中的 String 是不可变的(Immutable)?</a></li><li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97">我们能在 Switch 中使用 String 吗?</a></li><li><a href="#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88">Java 中的构造器链是什么?</a></li><li><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">枚举类</a></li><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</a></li><li><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97">我们能创建一个包含可变对象的不可变对象吗?</a></li><li><a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode">有没有可能两个不相等的对象有相同的 hashcode?</a></li><li><a href="#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97">两个相同的对象会有不同的 hash code 吗?</a></li><li><a href="#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97">我们可以在 hashcode() 中使用随机数字吗?</a></li><li><a href="#java-%E4%B8%ADcomparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">Java 中，Comparator 与 Comparable 有什么不同?</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95">为什么在重写 equals 方法的时候需要重写 hashCode 方法?</a></li><li><a href="#ab%E5%92%8Caequalsb%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">“a==b”和”a.equals(b)”有什么区别?</a></li><li><a href="#ahashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-aequalsb-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</a></li><li><a href="#finalfinalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">final、finalize 和 finally 的不同之处?</a></li><li><a href="#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9">Java 中的编译期常量是什么? 使用它又什么风险?</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">静态内部类与顶级类有什么区别?</a></li><li><a href="#java-%E4%B8%ADserializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB">Java 中，Serializable 与 Externalizable 的区别?</a></li><li><a href="#%E8%AF%B4%E5%87%BA-jdk-17-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7">说出 JDK 1.7 中的三个新特性?</a></li><li><a href="#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-18-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">说出 5 个 JDK 1.8 引入的新特性?</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB">接口是什么? 为什么要使用接口而不是直接使用具体类?</a></li><li><a href="#java-%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">Java 中，抽象类与接口之间有什么不同?</a></li><li><a href="#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95">Object有哪些公用方法?</a></li><li><a href="#equals%E4%B8%8E%E7%9A%84%E5%8C%BA%E5%88%AB">equals与==的区别</a></li><li><a href="#stringstringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">String、StringBuffer与StringBuilder的区别</a></li><li><a href="#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0">switch能否用String做参数</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">接口与抽象类</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB">抽象类和最终类</a></li><li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li><li><a href="#%E5%85%B3%E4%BA%8Efinally">关于finally</a></li><li><a href="#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">受检查异常和运行时异常</a></li><li><a href="#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F">super出现在父类的子类中。有三种存在方式</a></li><li><a href="#this--super%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB">this() &amp; super()在构造方法中的区别</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1">构造内部类和静态内部类对象</a></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">序列化</a></li><li><a href="#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">Java移位运算符</a></li><li><a href="#%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82">形参&amp;实参</a></li><li><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96">局部变量为什么要初始化</a></li><li><a href="#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7">Java语言的鲁棒性</a></li></ul></li></ul></li></ul><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">#</a> 参考文档</span></a></h2>',3),h={href:"https://java.quanke.name/",target:"_blank",rel:"noopener noreferrer"},o={href:"https://github.com/quanke/think-in-java",target:"_blank",rel:"noopener noreferrer"},c={href:"https://www.gitbook.com/book/wizardforcel/thinking-in-java/details",target:"_blank",rel:"noopener noreferrer"},p=B(`<h2 id="知识体系" tabindex="-1"><a class="header-anchor" href="#知识体系"><span><a href="#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB">#</a> 知识体系</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a"><span><a href="#q-a">#</a> Q&amp;A</span></a></h2><h3 id="java-中应该使用什么数据类型来代表价格" tabindex="-1"><a class="header-anchor" href="#java-中应该使用什么数据类型来代表价格"><span><a href="#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC">#</a> Java 中应该使用什么数据类型来代表价格?</span></a></h3><p>如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。</p><h3 id="怎么将-byte-转换为-string" tabindex="-1"><a class="header-anchor" href="#怎么将-byte-转换为-string"><span><a href="#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string">#</a> 怎么将 byte 转换为 String?</span></a></h3><p>可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。</p><h3 id="java-中怎样将-bytes-转换为-long-类型" tabindex="-1"><a class="header-anchor" href="#java-中怎样将-bytes-转换为-long-类型"><span><a href="#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B">#</a> Java 中怎样将 bytes 转换为 long 类型?</span></a></h3><p>String接收bytes的构造器转成String，再Long.parseLong</p><h3 id="我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象" tabindex="-1"><a class="header-anchor" href="#我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象"><span><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4-%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1">#</a> 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</span></a></h3><p>是的，我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化是，int 类型的高 24 位将会被丢弃，byte 类型的范围是从 -128 到 127。</p><h3 id="存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b" tabindex="-1"><a class="header-anchor" href="#存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b"><span><a href="#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BB-b-%E7%BB%A7%E6%89%BF-a-c-%E7%BB%A7%E6%89%BF-b-%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c-c-b">#</a> 存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</span></a></h3><p>可以，向下转型。但是不建议使用，容易出现类型转型异常.</p><h3 id="哪个类包含-clone-方法-是-cloneable-还是-object" tabindex="-1"><a class="header-anchor" href="#哪个类包含-clone-方法-是-cloneable-还是-object"><span><a href="#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object">#</a> 哪个类包含 clone 方法? 是 Cloneable 还是 Object?</span></a></h3><p>java.lang.Cloneable 是一个标示性接口，不包含任何方法，clone 方法在 object 类中定义。并且需要知道 clone() 方法是一个本地方法，这意味着它是由 c 或 c++ 或 其他本地语言实现的。</p><h3 id="java-中-操作符是线程安全的吗" tabindex="-1"><a class="header-anchor" href="#java-中-操作符是线程安全的吗"><span><a href="#java-%E4%B8%AD-%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97">#</a> Java 中 ++ 操作符是线程安全的吗?</span></a></h3><p>不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。还会存在竞态条件(读取-修改-写入)。</p><h3 id="a-a-b-与-a-b-的区别" tabindex="-1"><a class="header-anchor" href="#a-a-b-与-a-b-的区别"><span><a href="#a-a-b-%E4%B8%8E-a-b-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> a = a + b 与 a += b 的区别</span></a></h3><p>+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> a </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 127</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">byte</span><span style="color:#E06C75;"> b </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 127</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">b </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // error : cannot convert from int to byte</span></span>
<span class="line"><span style="color:#E06C75;">b </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // ok</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错)</p><h3 id="我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗" tabindex="-1"><a class="header-anchor" href="#我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗"><span><a href="#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97">#</a> 我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</span></a></h3><p>不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。</p><h3 id="_3-0-1-0-3-将会返回什么-true-还是-false" tabindex="-1"><a class="header-anchor" href="#_3-0-1-0-3-将会返回什么-true-还是-false"><span><a href="#_3-0-1-0-3-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false">#</a> 3*0.1 == 0.3 将会返回什么? true 还是 false?</span></a></h3><p>false，因为有些浮点数不能完全精确的表示出来。</p><h3 id="int-和-integer-哪个会占用更多的内存" tabindex="-1"><a class="header-anchor" href="#int-和-integer-哪个会占用更多的内存"><span><a href="#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98">#</a> int 和 Integer 哪个会占用更多的内存?</span></a></h3><p>Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。</p><h3 id="为什么-java-中的-string-是不可变的-immutable" tabindex="-1"><a class="header-anchor" href="#为什么-java-中的-string-是不可变的-immutable"><span><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84-immutable">#</a> 为什么 Java 中的 String 是不可变的(Immutable)?</span></a></h3><p>Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。更详细的内容参见答案。</p><h3 id="我们能在-switch-中使用-string-吗" tabindex="-1"><a class="header-anchor" href="#我们能在-switch-中使用-string-吗"><span><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97">#</a> 我们能在 Switch 中使用 String 吗?</span></a></h3><p>从 Java 7 开始，我们可以在 switch case 中使用字符串，但这仅仅是一个语法糖。内部实现在 switch 中使用字符串的 hash code。</p><h3 id="java-中的构造器链是什么" tabindex="-1"><a class="header-anchor" href="#java-中的构造器链是什么"><span><a href="#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88">#</a> Java 中的构造器链是什么?</span></a></h3><p>当你从一个构造器中调用另一个构造器，就是Java 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。</p><h3 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类"><span><a href="#%E6%9E%9A%E4%B8%BE%E7%B1%BB">#</a> 枚举类</span></a></h3><p>JDK1.5出现 每个枚举值都需要调用一次构造函数</p><h3 id="什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象" tabindex="-1"><a class="header-anchor" href="#什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象"><span><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1-immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1">#</a> 什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</span></a></h3><p>不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。</p><p>如何在Java中写出Immutable的类?</p><p>要写出这样的类，需要遵循以下几个原则:</p><p>1)immutable对象的状态在创建之后就不能发生改变，任何对它的改变都应该产生一个新的对象。</p><p>2)Immutable类的所有的属性都应该是final的。</p><p>3)对象必须被正确的创建，比如: 对象引用在对象创建过程中不能泄露(leak)。</p><p>4)对象应该是final的，以此来限制子类继承父类，以避免子类改变了父类的immutable特性。</p><p>5)如果类中包含mutable类对象，那么返回给客户端的时候，返回该对象的一个拷贝，而不是该对象本身(该条可以归为第一条中的一个特例)</p><h3 id="我们能创建一个包含可变对象的不可变对象吗" tabindex="-1"><a class="header-anchor" href="#我们能创建一个包含可变对象的不可变对象吗"><span><a href="#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97">#</a> 我们能创建一个包含可变对象的不可变对象吗?</span></a></h3><p>是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。</p><h3 id="有没有可能两个不相等的对象有相同的-hashcode" tabindex="-1"><a class="header-anchor" href="#有没有可能两个不相等的对象有相同的-hashcode"><span><a href="#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode">#</a> 有没有可能两个不相等的对象有相同的 hashcode?</span></a></h3><p>有可能，两个不相等的对象可能会有相同的 hashcode 值，这就是为什么在 hashmap 中会有冲突。相等 hashcode 值的规定只是说如果两个对象相等，必须有相同的hashcode 值，但是没有关于不相等对象的任何规定。</p><h3 id="两个相同的对象会有不同的-hash-code-吗" tabindex="-1"><a class="header-anchor" href="#两个相同的对象会有不同的-hash-code-吗"><span><a href="#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97">#</a> 两个相同的对象会有不同的 hash code 吗?</span></a></h3><p>不能，根据 hash code 的规定，这是不可能的。</p><h3 id="我们可以在-hashcode-中使用随机数字吗" tabindex="-1"><a class="header-anchor" href="#我们可以在-hashcode-中使用随机数字吗"><span><a href="#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97">#</a> 我们可以在 hashcode() 中使用随机数字吗?</span></a></h3><p>不行，因为对象的 hashcode 值必须是相同的。</p><h3 id="java-中-comparator-与-comparable-有什么不同" tabindex="-1"><a class="header-anchor" href="#java-中-comparator-与-comparable-有什么不同"><span><a href="#java-%E4%B8%AD-comparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">#</a> Java 中，Comparator 与 Comparable 有什么不同?</span></a></h3><p>Comparable 接口用于定义对象的自然顺序，而 comparator 通常用于定义用户定制的顺序。Comparable 总是只有一个，但是可以有多个 comparator 来定义对象的顺序。</p><h3 id="为什么在重写-equals-方法的时候需要重写-hashcode-方法" tabindex="-1"><a class="header-anchor" href="#为什么在重写-equals-方法的时候需要重写-hashcode-方法"><span><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95">#</a> 为什么在重写 equals 方法的时候需要重写 hashCode 方法?</span></a></h3><p>因为有强制的规范指定需要同时重写 hashcode 与 equals 是方法，许多容器类，如 HashMap、HashSet 都依赖于 hashcode 与 equals 的规定。</p><h3 id="a-b-和-a-equals-b-有什么区别" tabindex="-1"><a class="header-anchor" href="#a-b-和-a-equals-b-有什么区别"><span><a href="#a-b-%E5%92%8C-a-equals-b-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a> “a==b”和”a.equals(b)”有什么区别?</span></a></h3><p>如果 a 和 b 都是对象，则 a==b 是比较两个对象的引用，只有当 a 和 b 指向的是堆中的同一个对象才会返回 true，而 a.equals(b) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，String 类重写 equals() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。</p><h3 id="a-hashcode-有什么用-与-a-equals-b-有什么关系" tabindex="-1"><a class="header-anchor" href="#a-hashcode-有什么用-与-a-equals-b-有什么关系"><span><a href="#a-hashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-a-equals-b-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">#</a> a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</span></a></h3><p>简介: hashCode() 方法是相应对象整型的 hash 值。它常用于基于 hash 的集合类，如 Hashtable、HashMap、LinkedHashMap等等。它与 equals() 方法关系特别紧密。根据 Java 规范，两个使用 equals() 方法来判断相等的对象，必须具有相同的 hash code。</p><p>1、hashcode的作用</p><p>List和Set，如何保证Set不重复呢? 通过迭代使用equals方法来判断，数据量小还可以接受，数据量大怎么解决? 引入hashcode，实际上hashcode扮演的角色就是寻址，大大减少查询匹配次数。</p><p>2、hashcode重要吗</p><p>对于数组、List集合就是一个累赘。而对于hashmap, hashset, hashtable就异常重要了。</p><p>3、equals方法遵循的原则</p><ul><li>对称性 若x.equals(y)true，则y.equals(x)true</li><li>自反性 x.equals(x)必须true</li><li>传递性 若x.equals(y)true,y.equals(z)true,则x.equals(z)必为true</li><li>一致性 只要x,y内容不变，无论调用多少次结果不变</li><li>其他 x.equals(null) 永远false，x.equals(和x数据类型不同)始终false</li></ul><h3 id="final、finalize-和-finally-的不同之处" tabindex="-1"><a class="header-anchor" href="#final、finalize-和-finally-的不同之处"><span><a href="#final%E3%80%81finalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84">#</a> final、finalize 和 finally 的不同之处?</span></a></h3><ul><li>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。</li><li>Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的，但是什么时候调用 finalize 没有保证。</li><li>finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li></ul><h3 id="java-中的编译期常量是什么-使用它又什么风险" tabindex="-1"><a class="header-anchor" href="#java-中的编译期常量是什么-使用它又什么风险"><span><a href="#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9">#</a> Java 中的编译期常量是什么? 使用它又什么风险?</span></a></h3><p>变量也就是我们所说的编译期常量，这里的 public 可选的。实际上这些变量在编译时会被替换掉，因为编译器知道这些变量的值，并且知道这些变量在运行时不能改变。这种方式存在的一个问题是你使用了一个内部的或第三方库中的公有编译时常量，但是这个值后面被其他人改变了，但是你的客户端仍然在使用老的值，甚至你已经部署了一个新的jar。为了避免这种情况，当你在更新依赖 JAR 文件时，确保重新编译你的程序。</p><h3 id="静态内部类与顶级类有什么区别" tabindex="-1"><a class="header-anchor" href="#静态内部类与顶级类有什么区别"><span><a href="#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">#</a> 静态内部类与顶级类有什么区别?</span></a></h3><p>一个公共的顶级类的源文件名称与类名相同，而嵌套静态类没有这个要求。一个嵌套类位于顶级类内部，需要使用顶级类的名称来引用嵌套静态类，如 HashMap.Entry 是一个嵌套静态类，HashMap 是一个顶级类，Entry是一个嵌套静态类。</p><h3 id="java-中-serializable-与-externalizable-的区别" tabindex="-1"><a class="header-anchor" href="#java-中-serializable-与-externalizable-的区别"><span><a href="#java-%E4%B8%AD-serializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> Java 中，Serializable 与 Externalizable 的区别?</span></a></h3><p>Serializable 接口是一个序列化 Java 类的接口，以便于它们可以在网络上传输或者可以将它们的状态保存在磁盘上，是 JVM 内嵌的默认序列化方式，成本高、脆弱而且不安全。Externalizable 允许你控制整个序列化过程，指定特定的二进制格式，增加安全机制。</p><h3 id="说出-jdk-1-7-中的三个新特性" tabindex="-1"><a class="header-anchor" href="#说出-jdk-1-7-中的三个新特性"><span><a href="#%E8%AF%B4%E5%87%BA-jdk-1-7-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7">#</a> 说出 JDK 1.7 中的三个新特性?</span></a></h3><p>虽然 JDK 1.7 不像 JDK 5 和 8 一样的大版本，但是，还是有很多新的特性，如 try-with-resource 语句，这样你在使用流或者资源的时候，就不需要手动关闭，Java 会自动关闭。Fork-Join 池某种程度上实现 Java 版的 Map-reduce。允许 Switch 中有 String 变量和文本。菱形操作符(&lt;&gt;)用于泛型推断，不再需要在变量声明的右边申明泛型，因此可以写出可读写更强、更简洁的代码。另一个值得一提的特性是改善异常处理，如允许在同一个 catch 块中捕获多个异常。</p><h3 id="说出-5-个-jdk-1-8-引入的新特性" tabindex="-1"><a class="header-anchor" href="#说出-5-个-jdk-1-8-引入的新特性"><span><a href="#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-1-8-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7">#</a> 说出 5 个 JDK 1.8 引入的新特性?</span></a></h3><p>Java 8 在 Java 历史上是一个开创新的版本，下面 JDK 8 中 5 个主要的特性: Lambda 表达式，允许像对象一样传递匿名函数 Stream API，充分利用现代多核 CPU，可以写出很简洁的代码 Date 与 Time API，最终，有一个稳定、简单的日期和时间库可供你使用 扩展方法，现在，接口中可以有静态、默认方法。 重复注解，现在你可以将相同的注解在同一类型上使用多次。</p><p>下述包含 Java 面试过程中关于 SOLID 的设计原则，OOP 基础，如类，对象，接口，继承，多态，封装，抽象以及更高级的一些概念，如组合、聚合及关联。也包含了 GOF 设计模式的问题。</p><h3 id="接口是什么-为什么要使用接口而不是直接使用具体类" tabindex="-1"><a class="header-anchor" href="#接口是什么-为什么要使用接口而不是直接使用具体类"><span><a href="#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB">#</a> 接口是什么? 为什么要使用接口而不是直接使用具体类?</span></a></h3><p>接口用于定义 API。它定义了类必须得遵循的规则。同时，它提供了一种抽象，因为客户端只使用接口，这样可以有多重实现，如 List 接口，你可以使用可随机访问的 ArrayList，也可以使用方便插入和删除的 LinkedList。接口中不允许普通方法，以此来保证抽象，但是 Java 8 中你可以在接口声明静态方法和默认普通方法。</p><h3 id="java-中-抽象类与接口之间有什么不同" tabindex="-1"><a class="header-anchor" href="#java-中-抽象类与接口之间有什么不同"><span><a href="#java-%E4%B8%AD-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C">#</a> Java 中，抽象类与接口之间有什么不同?</span></a></h3><p>Java 中，抽象类和接口有很多不同之处，但是最重要的一个是 Java 中限制一个类只能继承一个类，但是可以实现多个接口。抽象类可以很好的定义一个家族类的默认行为，而接口能更好的定义类型，有助于后面实现多态机制 参见第六条。</p><h3 id="object有哪些公用方法" tabindex="-1"><a class="header-anchor" href="#object有哪些公用方法"><span><a href="#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95">#</a> Object有哪些公用方法?</span></a></h3><p>clone equals hashcode wait notify notifyall finalize toString getClass 除了clone和finalize其他均为公共方法。</p><p>11个方法，wait被重载了两次</p><h3 id="equals与-的区别" tabindex="-1"><a class="header-anchor" href="#equals与-的区别"><span><a href="#equals%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> equals与==的区别</span></a></h3><p>区别1. ==是一个运算符 equals是Object类的方法</p><p>区别2. 比较时的区别</p><ul><li>用于基本类型的变量比较时: ==用于比较值是否相等，equals不能直接用于基本数据类型的比较，需要转换为其对应的包装类型。</li><li>用于引用类型的比较时。==和equals都是比较栈内存中的地址是否相等 。相等为true 否则为false。但是通常会重写equals方法去实现对象内容的比较。</li></ul><h3 id="string、stringbuffer与stringbuilder的区别" tabindex="-1"><a class="header-anchor" href="#string、stringbuffer与stringbuilder的区别"><span><a href="#string%E3%80%81stringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> String、StringBuffer与StringBuilder的区别</span></a></h3><p>第一点: 可变和适用范围。String对象是不可变的，而StringBuffer和StringBuilder是可变字符序列。每次对String的操作相当于生成一个新的String对象，而对StringBuffer和StringBuilder的操作是对对象本身的操作，而不会生成新的对象，所以对于频繁改变内容的字符串避免使用String，因为频繁的生成对象将会对系统性能产生影响。</p><p>第二点: 线程安全。String由于有final修饰，是immutable的，安全性是简单而纯粹的。StringBuilder和StringBuffer的区别在于StringBuilder不保证同步，也就是说如果需要线程安全需要使用StringBuffer，不需要同步的StringBuilder效率更高。</p><h3 id="switch能否用string做参数" tabindex="-1"><a class="header-anchor" href="#switch能否用string做参数"><span><a href="#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0">#</a> switch能否用String做参数</span></a></h3><p>Java1.7开始支持，但实际这是一颗Java语法糖。除此之外，byte，short，int，枚举均可用于switch，而boolean和浮点型不可以。</p><h3 id="接口与抽象类" tabindex="-1"><a class="header-anchor" href="#接口与抽象类"><span><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">#</a> 接口与抽象类</span></a></h3><ul><li>一个子类只能继承一个抽象类, 但能实现多个接口</li><li>抽象类可以有构造方法, 接口没有构造方法</li><li>抽象类可以有普通成员变量, 接口没有普通成员变量</li><li>抽象类和接口都可有静态成员变量, 抽象类中静态成员变量访问类型任意，接口只能public static final(默认)</li><li>抽象类可以没有抽象方法, 抽象类可以有普通方法；接口在JDK8之前都是抽象方法，在JDK8可以有default方法，在JDK9中允许有私有普通方法</li><li>抽象类可以有静态方法；接口在JDK8之前不能有静态方法，在JDK8中可以有静态方法，且只能被接口类直接调用（不能被实现类的对象调用）</li><li>抽象类中的方法可以是public、protected; 接口方法在JDK8之前只有public abstract，在JDK8可以有default方法，在JDK9中允许有private方法</li></ul><h3 id="抽象类和最终类" tabindex="-1"><a class="header-anchor" href="#抽象类和最终类"><span><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB">#</a> 抽象类和最终类</span></a></h3><p>抽象类可以没有抽象方法, 最终类可以没有最终方法</p><p>最终类不能被继承, 最终方法不能被重写(可以重载)</p><h3 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span><a href="#%E5%BC%82%E5%B8%B8">#</a> 异常</span></a></h3><p>相关的关键字 throw、throws、try...catch、finally</p><ul><li>throws 用在方法签名上, 以便抛出的异常可以被调用者处理</li><li>throw 方法内部通过throw抛出异常</li><li>try 用于检测包住的语句块, 若有异常, catch子句捕获并执行catch块</li></ul><h3 id="关于finally" tabindex="-1"><a class="header-anchor" href="#关于finally"><span><a href="#%E5%85%B3%E4%BA%8Efinally">#</a> 关于finally</span></a></h3><ul><li>finally不管有没有异常都要处理</li><li>当try和catch中有return时，finally仍然会执行，finally比return先执行</li><li>不管有木有异常抛出, finally在return返回前执行</li><li>finally是在return后面的表达式运算后执行的(此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值)，所以函数返回值是在finally执行前确定的</li></ul><p>注意: finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值</p><p>finally不执行的几种情况: 程序提前终止如调用了System.exit, 病毒，断电</p><h3 id="受检查异常和运行时异常" tabindex="-1"><a class="header-anchor" href="#受检查异常和运行时异常"><span><a href="#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8">#</a> 受检查异常和运行时异常</span></a></h3><ul><li>受检查的异常(checked exceptions),其必须被try...catch语句块所捕获, 或者在方法签名里通过throws子句声明。受检查的异常必须在编译时被捕捉处理,命名为Checked Exception是因为Java编译器要进行检查, Java虚拟机也要进行检查, 以确保这个规则得到遵守。</li></ul><p>常见的checked exception: ClassNotFoundException IOException FileNotFoundException EOFException</p><ul><li>运行时异常(runtime exceptions), 需要程序员自己分析代码决定是否捕获和处理,比如空指针,被0除...</li></ul><p>常见的runtime exception: NullPointerException ArithmeticException ClassCastException IllegalArgumentException IllegalStateException IndexOutOfBoundsException NoSuchElementException</p><ul><li>Error的，则属于严重错误，如系统崩溃、虚拟机错误、动态链接失败等，这些错误无法恢复或者不可能捕捉，将导致应用程序中断，Error不需要捕获。</li></ul><h3 id="super出现在父类的子类中。有三种存在方式" tabindex="-1"><a class="header-anchor" href="#super出现在父类的子类中。有三种存在方式"><span><a href="#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E3%80%82%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F">#</a> super出现在父类的子类中。有三种存在方式</span></a></h3>`,114),d={href:"http://super.xxx",target:"_blank",rel:"noopener noreferrer"},b={href:"http://super.xxx",target:"_blank",rel:"noopener noreferrer"},u=a("li",null,"super() 调用父类构造",-1),f=B(`<p>注: super只能指代其直接父类</p><h3 id="this-super-在构造方法中的区别" tabindex="-1"><a class="header-anchor" href="#this-super-在构造方法中的区别"><span><a href="#this-super-%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB">#</a> this() &amp; super()在构造方法中的区别</span></a></h3><ul><li>调用super()必须写在子类构造方法的第一行, 否则编译不通过</li><li>super从子类调用父类构造, this在同一类中调用其他构造均需要放在第一行</li><li>尽管可以用this调用一个构造器, 却不能调用2个</li><li>this和super不能出现在同一个构造器中, 否则编译不通过</li><li>this()、super()都指的对象,不可以在static环境中使用</li><li>本质this指向本对象的指针。super是一个关键字</li></ul><h3 id="构造内部类和静态内部类对象" tabindex="-1"><a class="header-anchor" href="#构造内部类和静态内部类对象"><span><a href="#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1">#</a> 构造内部类和静态内部类对象</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Enclosingone</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Insideone</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Insideone</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 构造内部类对象需要外部类的引用</span></span>
<span class="line"><span style="color:#E5C07B;">	Enclosingone</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Insideone</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Enclosingone</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Insideone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 构造静态内部类的对象</span></span>
<span class="line"><span style="color:#E5C07B;">	Enclosingone</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Insideone</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#ABB2BF;"> Enclosingone.</span><span style="color:#61AFEF;">Insideone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态内部类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。非静态内部类能够访问外部类的静态和非静态成员。静态内部类不能访问外部类的非静态成员，只能访问外部类的静态成员。</p><h3 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">#</a> 序列化</span></a></h3><p>声明为static和transient类型的数据不能被序列化， 反序列化需要一个无参构造函数</p><h3 id="java移位运算符" tabindex="-1"><a class="header-anchor" href="#java移位运算符"><span><a href="#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6">#</a> Java移位运算符</span></a></h3><p>java中有三种移位运算符</p><ul><li><code>&lt;&lt;</code> :左移运算符,<code>x &lt;&lt; 1</code>,相当于x乘以2(不溢出的情况下),低位补0</li><li><code>&gt;&gt;</code> :带符号右移,<code>x &gt;&gt; 1</code>,相当于x除以2,正数高位补0,负数高位补1</li><li><code>&gt;&gt;&gt;</code> :无符号右移,忽略符号位,空位都以0补齐</li></ul><h3 id="形参-实参" tabindex="-1"><a class="header-anchor" href="#形参-实参"><span><a href="#%E5%BD%A2%E5%8F%82-%E5%AE%9E%E5%8F%82">#</a> 形参&amp;实参</span></a></h3><p>形式参数可被视为local variable.形参和局部变量一样都不能离开方法。只有在方法中使用，不会在方法外可见。 形式参数只能用final修饰符，其它任何修饰符都会引起编译器错误。但是用这个修饰符也有一定的限制，就是在方法中不能对参数做任何修改。不过一般情况下，一个方法的形参不用final修饰。只有在特殊情况下，那就是: 方法内部类。一个方法内的内部类如果使用了这个方法的参数或者局部变量的话，这个参数或局部变量应该是final。 形参的值在调用时根据调用者更改，实参则用自身的值更改形参的值(指针、引用皆在此列)，也就是说真正被传递的是实参。</p><h3 id="局部变量为什么要初始化" tabindex="-1"><a class="header-anchor" href="#局部变量为什么要初始化"><span><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96">#</a> 局部变量为什么要初始化</span></a></h3><p>局部变量是指类方法中的变量，必须初始化。局部变量运行时被分配在栈中，量大，生命周期短，如果虚拟机给每个局部变量都初始化一下，是一笔很大的开销，但变量不初始化为默认值就使用是不安全的。出于速度和安全性两个方面的综合考虑，解决方案就是虚拟机不初始化，但要求编写者一定要在使用前给变量赋值。</p><h3 id="java语言的鲁棒性" tabindex="-1"><a class="header-anchor" href="#java语言的鲁棒性"><span><a href="#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7">#</a> Java语言的鲁棒性</span></a></h3><p>Java在编译和运行程序时，都要对可能出现的问题进行检查，以消除错误的产生。它提供自动垃圾收集来进行内存管理，防止程序员在管理内存时容易产生的错误。通过集成的面向对象的例外处理机制，在编译时，Java揭示出可能出现但未被处理的异常，帮助程序员正确地进行选择以防止系统的崩溃。另外，Java在编译时还可捕获类型声明中的许多常见错误，防止动态运行时不匹配问题的出现。</p>`,17);function C(v,F){const e=n("ExternalLinkIcon");return s(),t("div",null,[A,a("ul",null,[a("li",null,[E("Thinking in Java (Java 编程思想) Gitbook中文文档 "),a("a",h,[E("https://java.quanke.name/"),l(e)])]),a("li",null,[E("Thinking in Java (Java 编程思想) Github "),a("a",o,[E("https://github.com/quanke/think-in-java"),l(e)])]),a("li",null,[E("Thinking in Java (Java 编程思想) Gitbook2 "),a("a",c,[E("https://www.gitbook.com/book/wizardforcel/thinking-in-java/details"),l(e)])])]),p,a("ul",null,[a("li",null,[a("a",d,[E("super.xxx"),l(e)]),E("(xxx为变量名或对象名)意思是获取父类中xxx的变量或引用")]),a("li",null,[a("a",b,[E("super.xxx"),l(e)]),E("(); (xxx为方法名)意思是直接访问并调用父类中的方法")]),u]),f])}const g=i(r,[["render",C],["__file","Java 基础之图谱.html.vue"]]),y=JSON.parse(`{"path":"/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html","title":"Java 基础之图谱","lang":"zh-CN","frontmatter":{"title":"Java 基础之图谱","subtitle":"Java，Java开发，Java 体系","date":"2024-03-05T18:06:22.000Z","category":["Java"],"tag":["Java"],"order":3,"description":"本文主要对Java基础知识体系小结，同时结合一些Q&A进行理解。 Java 基础之图谱 参考文档 知识体系 Q&A Java 中应该使用什么数据类型来代表价格? 怎么将 byte 转换为 String? Java 中怎样将 bytes 转换为 long 类型? 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Foundation/Java%20%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9B%BE%E8%B0%B1.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java 基础之图谱"}],["meta",{"property":"og:description","content":"本文主要对Java基础知识体系小结，同时结合一些Q&A进行理解。 Java 基础之图谱 参考文档 知识体系 Q&A Java 中应该使用什么数据类型来代表价格? 怎么将 byte 转换为 String? Java 中怎样将 bytes 转换为 long 类型? 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-12T01:37:51.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-03-05T18:06:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-12T01:37:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础之图谱\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java_basic.png\\"],\\"datePublished\\":\\"2024-03-05T18:06:22.000Z\\",\\"dateModified\\":\\"2024-03-12T01:37:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"# 知识体系","slug":"知识体系","link":"#知识体系","children":[]},{"level":2,"title":"# Q&A","slug":"q-a","link":"#q-a","children":[{"level":3,"title":"# Java 中应该使用什么数据类型来代表价格?","slug":"java-中应该使用什么数据类型来代表价格","link":"#java-中应该使用什么数据类型来代表价格","children":[]},{"level":3,"title":"# 怎么将 byte 转换为 String?","slug":"怎么将-byte-转换为-string","link":"#怎么将-byte-转换为-string","children":[]},{"level":3,"title":"# Java 中怎样将 bytes 转换为 long 类型?","slug":"java-中怎样将-bytes-转换为-long-类型","link":"#java-中怎样将-bytes-转换为-long-类型","children":[]},{"level":3,"title":"# 我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?","slug":"我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象","link":"#我们能将-int-强制转换为-byte-类型的变量吗-如果该值大于-byte-类型的范围-将会出现什么现象","children":[]},{"level":3,"title":"# 存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；","slug":"存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b","link":"#存在两个类-b-继承-a-c-继承-b-我们能将-b-转换为-c-么-如-c-c-b","children":[]},{"level":3,"title":"# 哪个类包含 clone 方法? 是 Cloneable 还是 Object?","slug":"哪个类包含-clone-方法-是-cloneable-还是-object","link":"#哪个类包含-clone-方法-是-cloneable-还是-object","children":[]},{"level":3,"title":"# Java 中 ++ 操作符是线程安全的吗?","slug":"java-中-操作符是线程安全的吗","link":"#java-中-操作符是线程安全的吗","children":[]},{"level":3,"title":"# a = a + b 与 a += b 的区别","slug":"a-a-b-与-a-b-的区别","link":"#a-a-b-与-a-b-的区别","children":[]},{"level":3,"title":"# 我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?","slug":"我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗","link":"#我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗","children":[]},{"level":3,"title":"# 3*0.1 == 0.3 将会返回什么? true 还是 false?","slug":"_3-0-1-0-3-将会返回什么-true-还是-false","link":"#_3-0-1-0-3-将会返回什么-true-还是-false","children":[]},{"level":3,"title":"# int 和 Integer 哪个会占用更多的内存?","slug":"int-和-integer-哪个会占用更多的内存","link":"#int-和-integer-哪个会占用更多的内存","children":[]},{"level":3,"title":"# 为什么 Java 中的 String 是不可变的(Immutable)?","slug":"为什么-java-中的-string-是不可变的-immutable","link":"#为什么-java-中的-string-是不可变的-immutable","children":[]},{"level":3,"title":"# 我们能在 Switch 中使用 String 吗?","slug":"我们能在-switch-中使用-string-吗","link":"#我们能在-switch-中使用-string-吗","children":[]},{"level":3,"title":"# Java 中的构造器链是什么?","slug":"java-中的构造器链是什么","link":"#java-中的构造器链是什么","children":[]},{"level":3,"title":"# 枚举类","slug":"枚举类","link":"#枚举类","children":[]},{"level":3,"title":"# 什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?","slug":"什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象","link":"#什么是不可变对象-immutable-object-java-中怎么创建一个不可变对象","children":[]},{"level":3,"title":"# 我们能创建一个包含可变对象的不可变对象吗?","slug":"我们能创建一个包含可变对象的不可变对象吗","link":"#我们能创建一个包含可变对象的不可变对象吗","children":[]},{"level":3,"title":"# 有没有可能两个不相等的对象有相同的 hashcode?","slug":"有没有可能两个不相等的对象有相同的-hashcode","link":"#有没有可能两个不相等的对象有相同的-hashcode","children":[]},{"level":3,"title":"# 两个相同的对象会有不同的 hash code 吗?","slug":"两个相同的对象会有不同的-hash-code-吗","link":"#两个相同的对象会有不同的-hash-code-吗","children":[]},{"level":3,"title":"# 我们可以在 hashcode() 中使用随机数字吗?","slug":"我们可以在-hashcode-中使用随机数字吗","link":"#我们可以在-hashcode-中使用随机数字吗","children":[]},{"level":3,"title":"# Java 中，Comparator 与 Comparable 有什么不同?","slug":"java-中-comparator-与-comparable-有什么不同","link":"#java-中-comparator-与-comparable-有什么不同","children":[]},{"level":3,"title":"# 为什么在重写 equals 方法的时候需要重写 hashCode 方法?","slug":"为什么在重写-equals-方法的时候需要重写-hashcode-方法","link":"#为什么在重写-equals-方法的时候需要重写-hashcode-方法","children":[]},{"level":3,"title":"# “a==b”和”a.equals(b)”有什么区别?","slug":"a-b-和-a-equals-b-有什么区别","link":"#a-b-和-a-equals-b-有什么区别","children":[]},{"level":3,"title":"# a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?","slug":"a-hashcode-有什么用-与-a-equals-b-有什么关系","link":"#a-hashcode-有什么用-与-a-equals-b-有什么关系","children":[]},{"level":3,"title":"# final、finalize 和 finally 的不同之处?","slug":"final、finalize-和-finally-的不同之处","link":"#final、finalize-和-finally-的不同之处","children":[]},{"level":3,"title":"# Java 中的编译期常量是什么? 使用它又什么风险?","slug":"java-中的编译期常量是什么-使用它又什么风险","link":"#java-中的编译期常量是什么-使用它又什么风险","children":[]},{"level":3,"title":"# 静态内部类与顶级类有什么区别?","slug":"静态内部类与顶级类有什么区别","link":"#静态内部类与顶级类有什么区别","children":[]},{"level":3,"title":"# Java 中，Serializable 与 Externalizable 的区别?","slug":"java-中-serializable-与-externalizable-的区别","link":"#java-中-serializable-与-externalizable-的区别","children":[]},{"level":3,"title":"# 说出 JDK 1.7 中的三个新特性?","slug":"说出-jdk-1-7-中的三个新特性","link":"#说出-jdk-1-7-中的三个新特性","children":[]},{"level":3,"title":"# 说出 5 个 JDK 1.8 引入的新特性?","slug":"说出-5-个-jdk-1-8-引入的新特性","link":"#说出-5-个-jdk-1-8-引入的新特性","children":[]},{"level":3,"title":"# 接口是什么? 为什么要使用接口而不是直接使用具体类?","slug":"接口是什么-为什么要使用接口而不是直接使用具体类","link":"#接口是什么-为什么要使用接口而不是直接使用具体类","children":[]},{"level":3,"title":"# Java 中，抽象类与接口之间有什么不同?","slug":"java-中-抽象类与接口之间有什么不同","link":"#java-中-抽象类与接口之间有什么不同","children":[]},{"level":3,"title":"# Object有哪些公用方法?","slug":"object有哪些公用方法","link":"#object有哪些公用方法","children":[]},{"level":3,"title":"# equals与==的区别","slug":"equals与-的区别","link":"#equals与-的区别","children":[]},{"level":3,"title":"# String、StringBuffer与StringBuilder的区别","slug":"string、stringbuffer与stringbuilder的区别","link":"#string、stringbuffer与stringbuilder的区别","children":[]},{"level":3,"title":"# switch能否用String做参数","slug":"switch能否用string做参数","link":"#switch能否用string做参数","children":[]},{"level":3,"title":"# 接口与抽象类","slug":"接口与抽象类","link":"#接口与抽象类","children":[]},{"level":3,"title":"# 抽象类和最终类","slug":"抽象类和最终类","link":"#抽象类和最终类","children":[]},{"level":3,"title":"# 异常","slug":"异常","link":"#异常","children":[]},{"level":3,"title":"# 关于finally","slug":"关于finally","link":"#关于finally","children":[]},{"level":3,"title":"# 受检查异常和运行时异常","slug":"受检查异常和运行时异常","link":"#受检查异常和运行时异常","children":[]},{"level":3,"title":"# super出现在父类的子类中。有三种存在方式","slug":"super出现在父类的子类中。有三种存在方式","link":"#super出现在父类的子类中。有三种存在方式","children":[]},{"level":3,"title":"# this() & super()在构造方法中的区别","slug":"this-super-在构造方法中的区别","link":"#this-super-在构造方法中的区别","children":[]},{"level":3,"title":"# 构造内部类和静态内部类对象","slug":"构造内部类和静态内部类对象","link":"#构造内部类和静态内部类对象","children":[]},{"level":3,"title":"# 序列化","slug":"序列化","link":"#序列化","children":[]},{"level":3,"title":"# Java移位运算符","slug":"java移位运算符","link":"#java移位运算符","children":[]},{"level":3,"title":"# 形参&实参","slug":"形参-实参","link":"#形参-实参","children":[]},{"level":3,"title":"# 局部变量为什么要初始化","slug":"局部变量为什么要初始化","link":"#局部变量为什么要初始化","children":[]},{"level":3,"title":"# Java语言的鲁棒性","slug":"java语言的鲁棒性","link":"#java语言的鲁棒性","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1710207471000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":24.66,"words":7399},"filePathRelative":"posts/Java/Foundation/Java 基础之图谱.md","localizedDate":"2024年3月5日","excerpt":"<blockquote>\\n<p>本文主要对Java基础知识体系小结，同时结合一些Q&amp;A进行理解。</p>\\n</blockquote>\\n<ul>\\n<li>Java 基础之图谱\\n<ul>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\\">参考文档</a></li>\\n<li><a href=\\"#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB\\">知识体系</a></li>\\n<li>Q&amp;A\\n<ul>\\n<li><a href=\\"#java-%E4%B8%AD%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E4%BB%A3%E8%A1%A8%E4%BB%B7%E6%A0%BC\\">Java 中应该使用什么数据类型来代表价格?</a></li>\\n<li><a href=\\"#%E6%80%8E%E4%B9%88%E5%B0%86-byte-%E8%BD%AC%E6%8D%A2%E4%B8%BA-string\\">怎么将 byte 转换为 String?</a></li>\\n<li><a href=\\"#java-%E4%B8%AD%E6%80%8E%E6%A0%B7%E5%B0%86-bytes-%E8%BD%AC%E6%8D%A2%E4%B8%BA-long-%E7%B1%BB%E5%9E%8B\\">Java 中怎样将 bytes 转换为 long 类型?</a></li>\\n<li><a href=\\"#%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-int-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97-%E5%A6%82%E6%9E%9C%E8%AF%A5%E5%80%BC%E5%A4%A7%E4%BA%8E-byte-%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E5%B0%86%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E7%8E%B0%E8%B1%A1\\">我们能将 int 强制转换为 byte 类型的变量吗? 如果该值大于 byte 类型的范围，将会出现什么现象?</a></li>\\n<li><a href=\\"#%E5%AD%98%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%B1%BBb-%E7%BB%A7%E6%89%BF-ac-%E7%BB%A7%E6%89%BF-b%E6%88%91%E4%BB%AC%E8%83%BD%E5%B0%86-b-%E8%BD%AC%E6%8D%A2%E4%B8%BA-c-%E4%B9%88-%E5%A6%82-c--c-b\\">存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么? 如 C = (C) B；</a></li>\\n<li><a href=\\"#%E5%93%AA%E4%B8%AA%E7%B1%BB%E5%8C%85%E5%90%AB-clone-%E6%96%B9%E6%B3%95-%E6%98%AF-cloneable-%E8%BF%98%E6%98%AF-object\\">哪个类包含 clone 方法? 是 Cloneable 还是 Object?</a></li>\\n<li><a href=\\"#java-%E4%B8%AD--%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%90%97\\">Java 中 ++ 操作符是线程安全的吗?</a></li>\\n<li><a href=\\"#a--a--b-%E4%B8%8E-a--b-%E7%9A%84%E5%8C%BA%E5%88%AB\\">a = a + b 与 a += b 的区别</a></li>\\n<li><a href=\\"#%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97\\">我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗?</a></li>\\n<li><a href=\\"#301--03-%E5%B0%86%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%80%E4%B9%88-true-%E8%BF%98%E6%98%AF-false\\">3*0.1 == 0.3 将会返回什么? true 还是 false?</a></li>\\n<li><a href=\\"#int-%E5%92%8C-integer-%E5%93%AA%E4%B8%AA%E4%BC%9A%E5%8D%A0%E7%94%A8%E6%9B%B4%E5%A4%9A%E7%9A%84%E5%86%85%E5%AD%98\\">int 和 Integer 哪个会占用更多的内存?</a></li>\\n<li><a href=\\"#%E4%B8%BA%E4%BB%80%E4%B9%88-java-%E4%B8%AD%E7%9A%84-string-%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84immutable\\">为什么 Java 中的 String 是不可变的(Immutable)?</a></li>\\n<li><a href=\\"#%E6%88%91%E4%BB%AC%E8%83%BD%E5%9C%A8-switch-%E4%B8%AD%E4%BD%BF%E7%94%A8-string-%E5%90%97\\">我们能在 Switch 中使用 String 吗?</a></li>\\n<li><a href=\\"#java-%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88\\">Java 中的构造器链是什么?</a></li>\\n<li><a href=\\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB\\">枚举类</a></li>\\n<li><a href=\\"#%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1immutable-object-java-%E4%B8%AD%E6%80%8E%E4%B9%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1\\">什么是不可变对象(immutable object)? Java 中怎么创建一个不可变对象?</a></li>\\n<li><a href=\\"#%E6%88%91%E4%BB%AC%E8%83%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E5%90%97\\">我们能创建一个包含可变对象的不可变对象吗?</a></li>\\n<li><a href=\\"#%E6%9C%89%E6%B2%A1%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%A4%E4%B8%AA%E4%B8%8D%E7%9B%B8%E7%AD%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84-hashcode\\">有没有可能两个不相等的对象有相同的 hashcode?</a></li>\\n<li><a href=\\"#%E4%B8%A4%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84-hash-code-%E5%90%97\\">两个相同的对象会有不同的 hash code 吗?</a></li>\\n<li><a href=\\"#%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97\\">我们可以在 hashcode() 中使用随机数字吗?</a></li>\\n<li><a href=\\"#java-%E4%B8%ADcomparator-%E4%B8%8E-comparable-%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C\\">Java 中，Comparator 与 Comparable 有什么不同?</a></li>\\n<li><a href=\\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8%E9%87%8D%E5%86%99-equals-%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99-hashcode-%E6%96%B9%E6%B3%95\\">为什么在重写 equals 方法的时候需要重写 hashCode 方法?</a></li>\\n<li><a href=\\"#ab%E5%92%8Caequalsb%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\\">“a==b”和”a.equals(b)”有什么区别?</a></li>\\n<li><a href=\\"#ahashcode-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8-%E4%B8%8E-aequalsb-%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB\\">a.hashCode() 有什么用? 与 a.equals(b) 有什么关系?</a></li>\\n<li><a href=\\"#finalfinalize-%E5%92%8C-finally-%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84\\">final、finalize 和 finally 的不同之处?</a></li>\\n<li><a href=\\"#java-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88-%E4%BD%BF%E7%94%A8%E5%AE%83%E5%8F%88%E4%BB%80%E4%B9%88%E9%A3%8E%E9%99%A9\\">Java 中的编译期常量是什么? 使用它又什么风险?</a></li>\\n<li><a href=\\"#%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E4%B8%8E%E9%A1%B6%E7%BA%A7%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\\">静态内部类与顶级类有什么区别?</a></li>\\n<li><a href=\\"#java-%E4%B8%ADserializable-%E4%B8%8E-externalizable-%E7%9A%84%E5%8C%BA%E5%88%AB\\">Java 中，Serializable 与 Externalizable 的区别?</a></li>\\n<li><a href=\\"#%E8%AF%B4%E5%87%BA-jdk-17-%E4%B8%AD%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7\\">说出 JDK 1.7 中的三个新特性?</a></li>\\n<li><a href=\\"#%E8%AF%B4%E5%87%BA-5-%E4%B8%AA-jdk-18-%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7\\">说出 5 个 JDK 1.8 引入的新特性?</a></li>\\n<li><a href=\\"#%E6%8E%A5%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%85%B7%E4%BD%93%E7%B1%BB\\">接口是什么? 为什么要使用接口而不是直接使用具体类?</a></li>\\n<li><a href=\\"#java-%E4%B8%AD%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C\\">Java 中，抽象类与接口之间有什么不同?</a></li>\\n<li><a href=\\"#object%E6%9C%89%E5%93%AA%E4%BA%9B%E5%85%AC%E7%94%A8%E6%96%B9%E6%B3%95\\">Object有哪些公用方法?</a></li>\\n<li><a href=\\"#equals%E4%B8%8E%E7%9A%84%E5%8C%BA%E5%88%AB\\">equals与==的区别</a></li>\\n<li><a href=\\"#stringstringbuffer%E4%B8%8Estringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB\\">String、StringBuffer与StringBuilder的区别</a></li>\\n<li><a href=\\"#switch%E8%83%BD%E5%90%A6%E7%94%A8string%E5%81%9A%E5%8F%82%E6%95%B0\\">switch能否用String做参数</a></li>\\n<li><a href=\\"#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB\\">接口与抽象类</a></li>\\n<li><a href=\\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%9C%80%E7%BB%88%E7%B1%BB\\">抽象类和最终类</a></li>\\n<li><a href=\\"#%E5%BC%82%E5%B8%B8\\">异常</a></li>\\n<li><a href=\\"#%E5%85%B3%E4%BA%8Efinally\\">关于finally</a></li>\\n<li><a href=\\"#%E5%8F%97%E6%A3%80%E6%9F%A5%E5%BC%82%E5%B8%B8%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8\\">受检查异常和运行时异常</a></li>\\n<li><a href=\\"#super%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E5%AD%90%E7%B1%BB%E4%B8%AD%E6%9C%89%E4%B8%89%E7%A7%8D%E5%AD%98%E5%9C%A8%E6%96%B9%E5%BC%8F\\">super出现在父类的子类中。有三种存在方式</a></li>\\n<li><a href=\\"#this--super%E5%9C%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB\\">this() &amp; super()在构造方法中的区别</a></li>\\n<li><a href=\\"#%E6%9E%84%E9%80%A0%E5%86%85%E9%83%A8%E7%B1%BB%E5%92%8C%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%AF%B9%E8%B1%A1\\">构造内部类和静态内部类对象</a></li>\\n<li><a href=\\"#%E5%BA%8F%E5%88%97%E5%8C%96\\">序列化</a></li>\\n<li><a href=\\"#java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\\">Java移位运算符</a></li>\\n<li><a href=\\"#%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82\\">形参&amp;实参</a></li>\\n<li><a href=\\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96\\">局部变量为什么要初始化</a></li>\\n<li><a href=\\"#java%E8%AF%AD%E8%A8%80%E7%9A%84%E9%B2%81%E6%A3%92%E6%80%A7\\">Java语言的鲁棒性</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{g as comp,y as data};
