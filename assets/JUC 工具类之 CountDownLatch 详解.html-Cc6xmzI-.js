import{_ as n,c as a,f as l,o as e}from"./app-Blc9nXcG.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai</p></blockquote><ul><li>JUC 工具类之 CountDownLatch 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li><li><a href="#countdownlatch%E4%BB%8B%E7%BB%8D">CountDownLatch介绍</a></li><li>CountDownLatch源码分析 <ul><li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">类的内部类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">类的构造函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0---await%E5%87%BD%E6%95%B0">核心函数 - await函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0---countdown%E5%87%BD%E6%95%B0">核心函数 - countDown函数</a></li></ul></li><li><a href="#countdownlatch%E7%A4%BA%E4%BE%8B">CountDownLatch示例</a></li><li>更深入理解 <ul><li><a href="#%E5%86%99%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98">写道面试题</a></li><li><a href="#%E4%BD%BF%E7%94%A8wait%E5%92%8Cnotify%E5%AE%9E%E7%8E%B0">使用wait和notify实现</a></li><li><a href="#countdownlatch%E5%AE%9E%E7%8E%B0">CountDownLatch实现</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>什么是CountDownLatch?</li><li>CountDownLatch底层实现原理?</li><li>CountDownLatch一次可以唤醒几个任务? 多个</li><li>CountDownLatch有哪些主要方法? await(),countDown()</li><li>CountDownLatch适用于什么场景?</li><li>写道题：实现一个容器，提供两个方法，add，size 写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束? 使用CountDownLatch 代替wait notify 好处。</li></ul><h2 id="countdownlatch介绍" tabindex="-1"><a class="header-anchor" href="#countdownlatch介绍"><span><a href="#countdownlatch%E4%BB%8B%E7%BB%8D">#</a> CountDownLatch介绍</span></a></h2><p>从源码可知，其底层是由AQS提供支持，所以其数据结构可以参考AQS的数据结构，而AQS的数据结构核心就是两个虚拟队列: 同步队列sync queue 和条件队列condition queue，不同的条件会有不同的条件队列。CountDownLatch典型的用法是将一个程序分为n个互相独立的可解决任务，并创建值为n的CountDownLatch。当每一个任务完成时，都会在这个锁存器上调用countDown，等待问题被解决的任务调用这个锁存器的await，将他们自己拦住，直至锁存器计数结束。</p><h2 id="countdownlatch源码分析" tabindex="-1"><a class="header-anchor" href="#countdownlatch源码分析"><span><a href="#countdownlatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> CountDownLatch源码分析</span></a></h2><h3 id="类的继承关系" tabindex="-1"><a class="header-anchor" href="#类的继承关系"><span><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</span></a></h3><p>CountDownLatch没有显示继承哪个父类或者实现哪个父接口, 它底层是AQS是通过内部类Sync来实现的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CountDownLatch</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="类的内部类" tabindex="-1"><a class="header-anchor" href="#类的内部类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB">#</a> 类的内部类</span></a></h3><p>CountDownLatch类存在一个内部类Sync，继承自AbstractQueuedSynchronizer，其源代码如下。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Sync</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 4982264981922014374L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造器</span></span>
<span class="line"><span style="color:#61AFEF;">    Sync</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> count</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setState</span><span style="color:#ABB2BF;">(count);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回当前计数</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#61AFEF;"> getCount</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 试图在共享模式下获取对象状态</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> tryAcquireShared</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> acquires</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> :</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 试图设置状态来反映共享模式下的一个释放</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> tryReleaseShared</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> releases</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Decrement count; signal when transition to zero</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 无限循环</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (;;) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (c </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 没有被线程占有</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 下一个状态</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> nextc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> c</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#ABB2BF;">(c, nextc)) </span><span style="color:#7F848E;font-style:italic;">// 比较并且设置成功</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> nextc </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 对CountDownLatch方法的调用会转发到对Sync或AQS的方法的调用，所以，AQS对CountDownLatch提供支持。</p><h3 id="类的属性" tabindex="-1"><a class="header-anchor" href="#类的属性"><span><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</span></a></h3><p>可以看到CountDownLatch类的内部只有一个Sync类型的属性:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CountDownLatch</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 同步队列</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Sync</span><span style="color:#E06C75;"> sync</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的构造函数" tabindex="-1"><a class="header-anchor" href="#类的构造函数"><span><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 类的构造函数</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> CountDownLatch</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (count </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalArgumentException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;count &lt; 0&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 初始化状态数</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sync</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Sync</span><span style="color:#E06C75;">(count)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该构造函数可以构造一个用给定计数初始化的CountDownLatch，并且构造函数内完成了sync的初始化，并设置了状态数。</p><h3 id="核心函数-await函数" tabindex="-1"><a class="header-anchor" href="#核心函数-await函数"><span><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0-await%E5%87%BD%E6%95%B0">#</a> 核心函数 - await函数</span></a></h3><p>此函数将会使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。其源码如下</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> await</span><span style="color:#E06C75;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 转发到sync对象上</span></span>
<span class="line"><span style="color:#E5C07B;">    sync</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acquireSharedInterruptibly</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 由源码可知，对CountDownLatch对象的await的调用会转发为对Sync的acquireSharedInterruptibly(从AQS继承的方法)方法的调用。</p><ul><li>acquireSharedInterruptibly源码如下:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> acquireSharedInterruptibly</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> arg)</span></span>
<span class="line"><span style="color:#E06C75;">        throws InterruptedException {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">tryAcquireShared</span><span style="color:#E06C75;">(arg) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#61AFEF;">        doAcquireSharedInterruptibly</span><span style="color:#E06C75;">(arg)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 从源码中可知，acquireSharedInterruptibly又调用了CountDownLatch的内部类Sync的tryAcquireShared和AQS的doAcquireSharedInterruptibly函数。</p><ul><li>tryAcquireShared函数的源码如下:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> tryAcquireShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> acquires) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">getState</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> :</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该函数只是简单的判断AQS的state是否为0，为0则返回1，不为0则返回-1。</p><ul><li>doAcquireSharedInterruptibly函数的源码如下:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doAcquireSharedInterruptibly</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> arg) throws InterruptedException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 添加节点至等待队列</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> node </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> addWaiter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SHARED</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> failed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取node的前驱节点</span></span>
<span class="line"><span style="color:#C678DD;">            final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">predecessor</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (p </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> head) { </span><span style="color:#7F848E;font-style:italic;">// 前驱节点为头节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 试图在共享模式下获取对象状态</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> r </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> tryAcquireShared</span><span style="color:#E06C75;">(arg)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (r </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 获取成功</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 设置头节点并进行繁殖</span></span>
<span class="line"><span style="color:#61AFEF;">                    setHeadAndPropagate</span><span style="color:#E06C75;">(node</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> r)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 设置节点next域</span></span>
<span class="line"><span style="color:#E5C07B;">                    p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // help GC</span></span>
<span class="line"><span style="color:#E06C75;">                    failed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">shouldParkAfterFailedAcquire</span><span style="color:#E06C75;">(p</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> node) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">                parkAndCheckInterrupt</span><span style="color:#E06C75;">()) </span><span style="color:#7F848E;font-style:italic;">// 在获取失败后是否需要禁止线程并且进行中断检查</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">                throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (failed)</span></span>
<span class="line"><span style="color:#61AFEF;">            cancelAcquire</span><span style="color:#E06C75;">(node)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 在AQS的doAcquireSharedInterruptibly中可能会再次调用CountDownLatch的内部类Sync的tryAcquireShared方法和AQS的setHeadAndPropagate方法。</p><ul><li>setHeadAndPropagate方法源码如下。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setHeadAndPropagate</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> propagate) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取头节点</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // Record old head for check below</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置头节点</span></span>
<span class="line"><span style="color:#61AFEF;">    setHead</span><span style="color:#E06C75;">(node)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Try to signal next queued node if:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *   Propagation was indicated by caller,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *     or was recorded (as h.waitStatus either before</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *     or after setHead) by a previous operation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *     (note: this uses sign-check of waitStatus because</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      PROPAGATE status may transition to SIGNAL.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * and</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *   The next node is waiting in shared mode,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *     or we don&#39;t know, because it appears null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * The conservatism in both of these checks may cause</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * unnecessary wake-ups, but only when there are multiple</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * racing acquires/releases, so most need signals now or soon</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * anyway.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 进行判断</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (propagate </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> h</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">        (h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> head) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> h</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取节点的后继</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isShared</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 后继为空或者为共享模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 以共享模式进行释放</span></span>
<span class="line"><span style="color:#61AFEF;">            doReleaseShared</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该方法设置头节点并且释放头节点后面的满足条件的结点，该方法中可能会调用到AQS的doReleaseShared方法，其源码如下。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doReleaseShared</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Ensure that a release propagates, even if there are other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * in-progress acquires/releases.  This proceeds in the usual</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * way of trying to unparkSuccessor of head if it needs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * signal. But if it does not, status is set to PROPAGATE to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * ensure that upon release, propagation continues.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Additionally, we must loop in case a new node is added</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * while we are doing this. Also, unlike other uses of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * unparkSuccessor, we need to know if CAS to reset status</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * fails, if so rechecking.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 无限循环</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存头节点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> tail) { </span><span style="color:#7F848E;font-style:italic;">// 头节点不为空并且头节点不为尾结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取头节点的等待状态</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> ws </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> h</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 状态为SIGNAL</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">compareAndSetWaitStatus</span><span style="color:#E06C75;">(h</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)) </span><span style="color:#7F848E;font-style:italic;">// 不成功就继续</span></span>
<span class="line"><span style="color:#C678DD;">                    continue</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">            // loop to recheck cases</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 释放后继结点</span></span>
<span class="line"><span style="color:#61AFEF;">                unparkSuccessor</span><span style="color:#E06C75;">(h)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">                        !</span><span style="color:#61AFEF;">compareAndSetWaitStatus</span><span style="color:#E06C75;">(h</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PROPAGATE</span><span style="color:#E06C75;">)) </span><span style="color:#7F848E;font-style:italic;">// 状态为0并且不成功，继续</span></span>
<span class="line"><span style="color:#C678DD;">                continue</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">                // loop on failed CAS</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> head) </span><span style="color:#7F848E;font-style:italic;">// 若头节点改变，继续循环  </span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 该方法在共享模式下释放，具体的流程再之后会通过一个示例给出。</p><p>所以，对CountDownLatch的await调用大致会有如下的调用链。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 上图给出了可能会调用到的主要方法，并非一定会调用到，之后，会通过一个示例给出详细的分析。</p><h3 id="核心函数-countdown函数" tabindex="-1"><a class="header-anchor" href="#核心函数-countdown函数"><span><a href="#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0-countdown%E5%87%BD%E6%95%B0">#</a> 核心函数 - countDown函数</span></a></h3><p>此函数将递减锁存器的计数，如果计数到达零，则释放所有等待的线程</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> countDown</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    sync</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">releaseShared</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 对countDown的调用转换为对Sync对象的releaseShared(从AQS继承而来)方法的调用。</p><ul><li>releaseShared源码如下</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> releaseShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> arg) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">tryReleaseShared</span><span style="color:#E06C75;">(arg)) {</span></span>
<span class="line"><span style="color:#61AFEF;">        doReleaseShared</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数会以共享模式释放对象，并且在函数中会调用到CountDownLatch的tryReleaseShared函数，并且可能会调用AQS的doReleaseShared函数。</p><ul><li>tryReleaseShared源码如下</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> tryReleaseShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> releases) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Decrement count; signal when transition to zero</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 无限循环</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取状态</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (c </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 没有被线程占有</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 下一个状态</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> nextc </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">compareAndSetState</span><span style="color:#E06C75;">(c</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> nextc)) </span><span style="color:#7F848E;font-style:italic;">// 比较并且设置成功</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> nextc </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数会试图设置状态来反映共享模式下的一个释放。具体的流程在下面的示例中会进行分析。</p><ul><li>AQS的doReleaseShared的源码如下</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doReleaseShared</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Ensure that a release propagates, even if there are other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * in-progress acquires/releases.  This proceeds in the usual</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * way of trying to unparkSuccessor of head if it needs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * signal. But if it does not, status is set to PROPAGATE to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * ensure that upon release, propagation continues.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Additionally, we must loop in case a new node is added</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * while we are doing this. Also, unlike other uses of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * unparkSuccessor, we need to know if CAS to reset status</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * fails, if so rechecking.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 无限循环</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存头节点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> tail) { </span><span style="color:#7F848E;font-style:italic;">// 头节点不为空并且头节点不为尾结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取头节点的等待状态</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> ws </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> h</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 状态为SIGNAL</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">compareAndSetWaitStatus</span><span style="color:#E06C75;">(h</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)) </span><span style="color:#7F848E;font-style:italic;">// 不成功就继续</span></span>
<span class="line"><span style="color:#C678DD;">                    continue</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">            // loop to recheck cases</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 释放后继结点</span></span>
<span class="line"><span style="color:#61AFEF;">                unparkSuccessor</span><span style="color:#E06C75;">(h)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#56B6C2;">                        !</span><span style="color:#61AFEF;">compareAndSetWaitStatus</span><span style="color:#E06C75;">(h</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PROPAGATE</span><span style="color:#E06C75;">)) </span><span style="color:#7F848E;font-style:italic;">// 状态为0并且不成功，继续</span></span>
<span class="line"><span style="color:#C678DD;">                continue</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">                // loop on failed CAS</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> head) </span><span style="color:#7F848E;font-style:italic;">// 若头节点改变，继续循环  </span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 此函数在共享模式下释放资源。</p><p>所以，对CountDownLatch的countDown调用大致会有如下的调用链。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 上图给出了可能会调用到的主要方法，并非一定会调用到，之后，会通过一个示例给出详细的分析。</p><h2 id="countdownlatch示例" tabindex="-1"><a class="header-anchor" href="#countdownlatch示例"><span><a href="#countdownlatch%E7%A4%BA%E4%BE%8B">#</a> CountDownLatch示例</span></a></h2><p>下面给出了一个使用CountDownLatch的示例。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CountDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">CountDownLatch</span><span style="color:#E06C75;font-style:italic;"> countDownLatch</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> countDownLatch;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; doing something&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; finish&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">countDown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CountDownLatchDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CountDownLatch</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        MyThread</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1&quot;</span><span style="color:#ABB2BF;">, countDownLatch);</span></span>
<span class="line"><span style="color:#E5C07B;">        MyThread</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2&quot;</span><span style="color:#ABB2BF;">, countDownLatch);</span></span>
<span class="line"><span style="color:#E5C07B;">        t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Waiting for t1 thread and t2 thread to finish&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }            </span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; continue&quot;</span><span style="color:#ABB2BF;">);        </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(某一次):</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">Waiting for t1 thread and t2 thread to finish</span></span>
<span class="line"><span style="color:#ABB2BF;">t1 doing something</span></span>
<span class="line"><span style="color:#ABB2BF;">t2 doing something</span></span>
<span class="line"><span style="color:#ABB2BF;">t1 finish</span></span>
<span class="line"><span style="color:#ABB2BF;">t2 finish</span></span>
<span class="line"><span style="color:#ABB2BF;">main continue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 本程序首先计数器初始化为2。根据结果，可能会存在如下的一种时序图。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 首先main线程会调用await操作，此时main线程会被阻塞，等待被唤醒，之后t1线程执行了countDown操作，最后，t2线程执行了countDown操作，此时main线程就被唤醒了，可以继续运行。下面，进行详细分析。</p><ul><li>main线程执行countDownLatch.await操作，主要调用的函数如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-4.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 在最后，main线程就被park了，即禁止运行了。此时Sync queue(同步队列)中有两个节点，AQS的state为2，包含main线程的结点的nextWaiter指向SHARED结点。</p><ul><li>t1线程执行countDownLatch.countDown操作，主要调用的函数如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 此时，Sync queue队列里的结点个数未发生变化，但是此时，AQS的state已经变为1了。</p><ul><li>t2线程执行countDownLatch.countDown操作，主要调用的函数如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-6.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: 经过调用后，AQS的state为0，并且此时，main线程会被unpark，可以继续运行。当main线程获取cpu资源后，继续运行。</p><ul><li>main线程获取cpu资源，继续运行，由于main线程是在parkAndCheckInterrupt函数中被禁止的，所以此时，继续在parkAndCheckInterrupt函数运行。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-7.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>说明: main线程恢复，继续在parkAndCheckInterrupt函数中运行，之后又会回到最终达到的状态为AQS的state为0，并且head与tail指向同一个结点，该节点的额nextWaiter域还是指向SHARED结点。</p><h2 id="更深入理解" tabindex="-1"><a class="header-anchor" href="#更深入理解"><span><a href="#%E6%9B%B4%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">#</a> 更深入理解</span></a></h2><h3 id="写道面试题" tabindex="-1"><a class="header-anchor" href="#写道面试题"><span><a href="#%E5%86%99%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98">#</a> 写道面试题</span></a></h3><blockquote><p>实现一个容器，提供两个方法，add，size 写两个线程，线程1添加10个元素到容器中，线程2实现监控元素的个数，当个数到5个时，线程2给出提示并结束.</p></blockquote><h3 id="使用wait和notify实现" tabindex="-1"><a class="header-anchor" href="#使用wait和notify实现"><span><a href="#%E4%BD%BF%E7%94%A8wait%E5%92%8Cnotify%E5%AE%9E%E7%8E%B0">#</a> 使用wait和notify实现</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.ArrayList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.List</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  必须先让t2先进行启动 使用wait 和 notify 进行相互通讯，wait会释放锁，notify不会释放锁</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> T2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;">   List</span><span style="color:#E06C75;"> list </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> i</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getSize</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        T2</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> T2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;"> lock</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            synchronized</span><span style="color:#ABB2BF;">(lock){</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2 启动&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSize</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">                    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                        /**会释放锁*/</span></span>
<span class="line"><span style="color:#E5C07B;">                        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2 结束&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span><span style="color:#98C379;">&quot;t2&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">           synchronized</span><span style="color:#ABB2BF;"> (lock){</span></span>
<span class="line"><span style="color:#E5C07B;">               System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1 启动&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">               for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">;i++){</span></span>
<span class="line"><span style="color:#E5C07B;">                   t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#E5C07B;">                   System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">i);</span></span>
<span class="line"><span style="color:#C678DD;">                   if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSize</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                       /**不会释放锁*/</span></span>
<span class="line"><span style="color:#E5C07B;">                       lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                       try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                           lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                       } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                           e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                       }</span></span>
<span class="line"><span style="color:#ABB2BF;">                   }</span></span>
<span class="line"><span style="color:#ABB2BF;">               }</span></span>
<span class="line"><span style="color:#ABB2BF;">           }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">t2 启动</span></span>
<span class="line"><span style="color:#ABB2BF;">t1 启动</span></span>
<span class="line"><span style="color:#ABB2BF;">add0</span></span>
<span class="line"><span style="color:#ABB2BF;">add1</span></span>
<span class="line"><span style="color:#ABB2BF;">add2</span></span>
<span class="line"><span style="color:#ABB2BF;">add3</span></span>
<span class="line"><span style="color:#ABB2BF;">add4</span></span>
<span class="line"><span style="color:#ABB2BF;">t2 结束</span></span>
<span class="line"><span style="color:#ABB2BF;">add5</span></span>
<span class="line"><span style="color:#ABB2BF;">add6</span></span>
<span class="line"><span style="color:#ABB2BF;">add7</span></span>
<span class="line"><span style="color:#ABB2BF;">add8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="countdownlatch实现" tabindex="-1"><a class="header-anchor" href="#countdownlatch实现"><span><a href="#countdownlatch%E5%AE%9E%E7%8E%B0">#</a> CountDownLatch实现</span></a></h3><p>说出使用CountDownLatch 代替wait notify 好处?</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.ArrayList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.List</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.CountDownLatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 使用CountDownLatch 代替wait notify 好处是通讯方式简单，不涉及锁定  Count 值为0时当前线程继续执行，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> T3</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   volatile</span><span style="color:#E5C07B;"> List</span><span style="color:#E06C75;"> list </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ArrayList</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> i</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getSize</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        T3</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> T3</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        CountDownLatch</span><span style="color:#E06C75;"> countDownLatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CountDownLatch</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2 start&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">           if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSize</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">               try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                   countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                   System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2 end&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">               } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                   e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">               }</span></span>
<span class="line"><span style="color:#ABB2BF;">           }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span><span style="color:#98C379;">&quot;t2&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1 start&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">           for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">;i++){</span></span>
<span class="line"><span style="color:#E5C07B;">               t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#E5C07B;">               System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> i);</span></span>
<span class="line"><span style="color:#C678DD;">               if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSize</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">                   System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;countdown is open&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                   countDownLatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">countDown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">               }</span></span>
<span class="line"><span style="color:#ABB2BF;">           }</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1 end&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span><span style="color:#98C379;">&quot;t1&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89)]))}const i=n(p,[["render",o],["__file","JUC 工具类之 CountDownLatch 详解.html.vue"]]),r=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CountDownLatch%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 工具类之 CountDownLatch 详解","lang":"zh-CN","frontmatter":{"title":"JUC 工具类之 CountDownLatch 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":22,"description":"CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai JUC 工具类之 CountDownLatch 详解 带着BAT大厂的面试问题去理解 CountDownLatch介绍 CountDownLatch源码分析 类的继承关系 类的内部类 类的属性 类的构造函数 核心函数...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E5%B7%A5%E5%85%B7%E7%B1%BB%E4%B9%8B%20CountDownLatch%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 工具类之 CountDownLatch 详解"}],["meta",{"property":"og:description","content":"CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai JUC 工具类之 CountDownLatch 详解 带着BAT大厂的面试问题去理解 CountDownLatch介绍 CountDownLatch源码分析 类的继承关系 类的内部类 类的属性 类的构造函数 核心函数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 工具类之 CountDownLatch 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-countdownlatch-7.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# CountDownLatch介绍","slug":"countdownlatch介绍","link":"#countdownlatch介绍","children":[]},{"level":2,"title":"# CountDownLatch源码分析","slug":"countdownlatch源码分析","link":"#countdownlatch源码分析","children":[{"level":3,"title":"# 类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"# 类的内部类","slug":"类的内部类","link":"#类的内部类","children":[]},{"level":3,"title":"# 类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"# 类的构造函数","slug":"类的构造函数","link":"#类的构造函数","children":[]},{"level":3,"title":"# 核心函数 - await函数","slug":"核心函数-await函数","link":"#核心函数-await函数","children":[]},{"level":3,"title":"# 核心函数 - countDown函数","slug":"核心函数-countdown函数","link":"#核心函数-countdown函数","children":[]}]},{"level":2,"title":"# CountDownLatch示例","slug":"countdownlatch示例","link":"#countdownlatch示例","children":[]},{"level":2,"title":"# 更深入理解","slug":"更深入理解","link":"#更深入理解","children":[{"level":3,"title":"# 写道面试题","slug":"写道面试题","link":"#写道面试题","children":[]},{"level":3,"title":"# 使用wait和notify实现","slug":"使用wait和notify实现","link":"#使用wait和notify实现","children":[]},{"level":3,"title":"# CountDownLatch实现","slug":"countdownlatch实现","link":"#countdownlatch实现","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":11.47,"words":3440},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 工具类之 CountDownLatch 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>CuntDownLatch底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成。@pdai</p>\\n</blockquote>\\n<ul>\\n<li>JUC 工具类之 CountDownLatch 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3\\">带着BAT大厂的面试问题去理解</a></li>\\n<li><a href=\\"#countdownlatch%E4%BB%8B%E7%BB%8D\\">CountDownLatch介绍</a></li>\\n<li>CountDownLatch源码分析\\n<ul>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\\">类的继承关系</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB\\">类的内部类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\\">类的属性</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">类的构造函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0---await%E5%87%BD%E6%95%B0\\">核心函数 - await函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0---countdown%E5%87%BD%E6%95%B0\\">核心函数 - countDown函数</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#countdownlatch%E7%A4%BA%E4%BE%8B\\">CountDownLatch示例</a></li>\\n<li>更深入理解\\n<ul>\\n<li><a href=\\"#%E5%86%99%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98\\">写道面试题</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8wait%E5%92%8Cnotify%E5%AE%9E%E7%8E%B0\\">使用wait和notify实现</a></li>\\n<li><a href=\\"#countdownlatch%E5%AE%9E%E7%8E%B0\\">CountDownLatch实现</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{i as comp,r as data};
