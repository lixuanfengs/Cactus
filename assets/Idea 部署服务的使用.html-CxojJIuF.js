import{_ as s,o as n,c as e,h as a}from"./app-Bxu40QlK.js";const l={},i=a(`<h2 id="intellij-idea-deployment-教程" tabindex="-1"><a class="header-anchor" href="#intellij-idea-deployment-教程"><span>IntelliJ IDEA Deployment 教程</span></a></h2><p><strong>简介</strong></p><p>在本教程中，我们将讨论如何使用IntelliJ IDEA的Deployment模块来简化部署过程。Deployment模块允许您将本地开发的应用程序代码部署到远程服务器上。</p><h2 id="前提条件" tabindex="-1"><a class="header-anchor" href="#前提条件"><span>前提条件</span></a></h2><ul><li>安装了IntelliJ IDEA</li><li>基本的IDEA使用知识</li><li>访问权限到远程服务器（FTP/SFTP/FTPS等）</li></ul><h2 id="配置deployment模块" tabindex="-1"><a class="header-anchor" href="#配置deployment模块"><span>配置Deployment模块</span></a></h2><h3 id="_1-打开deployment设置" tabindex="-1"><a class="header-anchor" href="#_1-打开deployment设置"><span>1. 打开Deployment设置</span></a></h3><ul><li><p>在IDEA中，点击 <code>File</code> 菜单</p></li><li><p>选择 <code>Settings</code></p></li><li><p>在设置或首选项窗口中，导航到 <code>Build, Execution, Deployment</code> &gt; <code>Deployment</code></p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/PixPin_2024-05-07_17-15-04.gif" alt="PixPin_2024-05-07_17-15-04" tabindex="0" loading="lazy"><figcaption>PixPin_2024-05-07_17-15-04</figcaption></figure></li></ul><h3 id="_2-具体配置" tabindex="-1"><a class="header-anchor" href="#_2-具体配置"><span>2. 具体配置</span></a></h3><p>在IDEA中，点击 <code>File</code> 菜单，选择 <code>Settings</code>，在设置或首选项窗口中，导航到 <code>Build, Execution, Deployment</code> &gt; <code>Deployment</code>。然后配置服务器详情、映射本地与远程路径、测试连接。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240507173411359.png" alt="image-20240507173411359" tabindex="0" loading="lazy"><figcaption>image-20240507173411359</figcaption></figure><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/image-20240507173713331.png" alt="image-20240507173713331" tabindex="0" loading="lazy"><figcaption>image-20240507173713331</figcaption></figure><h2 id="部署项目" tabindex="-1"><a class="header-anchor" href="#部署项目"><span>部署项目</span></a></h2><h3 id="_1-手动上转文件到服务器" tabindex="-1"><a class="header-anchor" href="#_1-手动上转文件到服务器"><span>1. 手动上转文件到服务器</span></a></h3><p>选中文件，鼠标点击右键找到选项 <code>Deployment</code> &gt;<code> Upload to cactus</code>, 等待上传文件完毕。在配置的服务器指定目录下就能看到上传的文件。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/web/recording.gif" alt="recording" tabindex="0" loading="lazy"><figcaption>recording</figcaption></figure><h3 id="_2-自动上传" tabindex="-1"><a class="header-anchor" href="#_2-自动上传"><span>2. 自动上传</span></a></h3><p>在 <code>Tools</code> 菜单中的 <code>Deployment</code> 设置中，您可以启用 <code>Automatic Upload</code>（保存时自动上传）功能，以确保最新的更改总是被部署。</p><p>选择 <code>Sync with Deployed to...</code> 来查看哪些文件将被上传或下载。</p><h2 id="监听启动项目" tabindex="-1"><a class="header-anchor" href="#监听启动项目"><span>监听启动项目</span></a></h2><p>编写监听上传的文件，当上传的文件<code>inode</code>号码和修改时间戳改变时，进行项目的重新部署运行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">sudo</span><span style="color:#98C379;"> tee</span><span style="color:#98C379;"> /sg-work/cactus-server/start.sh</span><span style="color:#ABB2BF;"> &lt;&lt;-</span><span style="color:#ABB2BF;">&#39;EOF&#39;</span></span>
<span class="line"><span style="color:#98C379;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;"># 定义一个部署函数</span></span>
<span class="line"><span style="color:#98C379;">deploy_cactus_server() {</span></span>
<span class="line"><span style="color:#98C379;">    echo &quot;Start deploying...&quot;</span></span>
<span class="line"><span style="color:#98C379;">    sh deploy.sh</span></span>
<span class="line"><span style="color:#98C379;">    echo &quot;Deployment done.&quot;</span></span>
<span class="line"><span style="color:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;"># 定义一个通用的检查和处理文件变化的函数</span></span>
<span class="line"><span style="color:#98C379;">handle_file_change() {</span></span>
<span class="line"><span style="color:#98C379;">    local file_path=&quot;$1&quot;</span></span>
<span class="line"><span style="color:#98C379;">    local target_path=&quot;$2&quot;</span></span>
<span class="line"><span style="color:#98C379;">    local dockerfile_path=&quot;$3&quot;</span></span>
<span class="line"><span style="color:#98C379;">    local is_directory=&quot;$4&quot;</span></span>
<span class="line"><span style="color:#98C379;">    local initial_stat=&quot;$(stat &quot;$file_path&quot; --printf=&quot;%i %Y&quot;)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    while true; do</span></span>
<span class="line"><span style="color:#98C379;">        local current_stat=$(stat &quot;$file_path&quot; --printf=&quot;%i %Y&quot;)</span></span>
<span class="line"><span style="color:#98C379;">        if [ &quot;$current_stat&quot; != &quot;$initial_stat&quot; ]; then</span></span>
<span class="line"><span style="color:#98C379;">            echo &quot;File/Directory has been replaced or modified at $file_path.&quot;</span></span>
<span class="line"><span style="color:#98C379;">            sleep 15  # 等待上传完成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">            if [ &quot;$is_directory&quot; = &quot;yes&quot; ]; then</span></span>
<span class="line"><span style="color:#98C379;">                if [ -d &quot;$target_path&quot; ]; then</span></span>
<span class="line"><span style="color:#98C379;">                    rm -r &quot;$target_path&quot; &amp;&amp; echo &quot;Old directory removed: $target_path&quot; || { echo &quot;Failed to remove old directory: $target_path&quot;; continue; }</span></span>
<span class="line"><span style="color:#98C379;">                fi</span></span>
<span class="line"><span style="color:#98C379;">            else</span></span>
<span class="line"><span style="color:#98C379;">                if [ -e &quot;$target_path&quot; ]; then</span></span>
<span class="line"><span style="color:#98C379;">                    rm &quot;$target_path&quot; &amp;&amp; echo &quot;Old file removed: $target_path&quot; || { echo &quot;Failed to remove old file: $target_path&quot;; continue; }</span></span>
<span class="line"><span style="color:#98C379;">                fi</span></span>
<span class="line"><span style="color:#98C379;">            fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">            mv &quot;$file_path&quot; &quot;$target_path&quot; &amp;&amp; echo &quot;New $file_path moved to $target_path&quot; || { echo &quot;Failed to move $file_path to $target_path&quot;; continue; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">            if [ -n &quot;$dockerfile_path&quot; ]; then</span></span>
<span class="line"><span style="color:#98C379;">                docker build -t cactus-server -f $dockerfile_path &amp;&amp; echo &quot;Docker build successful.&quot; || { echo &quot;Docker build failed.&quot;; continue; }</span></span>
<span class="line"><span style="color:#98C379;">                deploy_cactus_server</span></span>
<span class="line"><span style="color:#98C379;">            fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">            initial_stat=$current_stat</span></span>
<span class="line"><span style="color:#98C379;">        fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">        sleep 15</span></span>
<span class="line"><span style="color:#98C379;">    done</span></span>
<span class="line"><span style="color:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;"># 启动后端服务模块的监听</span></span>
<span class="line"><span style="color:#98C379;">handle_file_change &quot;/home/cactus/cactus-server.jar&quot; &quot;/sg-work/cactus-server/cactus-server.jar&quot; &quot;/sg-work/cactus-server/Dockerfile .&quot; &quot;no&quot; &amp;</span></span>
<span class="line"><span style="color:#98C379;"># 启动后端页面模块的监听</span></span>
<span class="line"><span style="color:#98C379;">handle_file_change &quot;/home/cactus/dist-pro&quot; &quot;/sg-work/nginx/html/cactus-ui-admin-vue3&quot; &quot;&quot; &quot;yes&quot; &amp;</span></span>
<span class="line"><span style="color:#98C379;"># 启动门户页面模块的监听</span></span>
<span class="line"><span style="color:#98C379;">handle_file_change &quot;/home/cactus/dist-pro&quot; &quot;/sg-work/nginx/html/cactus-ui-web-vue2&quot; &quot;&quot; &quot;yes&quot; &amp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">wait</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">EOF</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查看进程使用内存：</p><ul><li>cat /proc/[ PID ]/status | grep &#39;VmSize|VmRSS&#39; | awk &#39;{print $1, $2/1024/1024, &quot;GB&quot;}&#39;</li></ul></blockquote><p>后台启动此监听脚本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nohup</span><span style="color:#98C379;"> /sg-work/cactus-server/start.sh</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">/sg-work/cactus-server/start.log</span><span style="color:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>动态查看输出的日志</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">tail</span><span style="color:#D19A66;"> -f</span><span style="color:#98C379;"> /sg-work/cactus-server/start.log</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写停止以上脚本的命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用 pgrep 寻找特定脚本的 PID</span></span>
<span class="line"><span style="color:#E06C75;">PID</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">$(</span><span style="color:#61AFEF;">ps</span><span style="color:#98C379;"> aux</span><span style="color:#ABB2BF;">  | </span><span style="color:#61AFEF;">grep</span><span style="color:#98C379;"> /sg-work/cactus-server/[s]tart.sh</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">awk</span><span style="color:#98C379;"> &#39;{print $2}&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检查是否找到了 PID</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [ </span><span style="color:#56B6C2;">-z</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;">$PID</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> ]; </span><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;No process found.&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    exit</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;Killing process with PID </span><span style="color:#E06C75;">$PID</span><span style="color:#98C379;">...&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    kill</span><span style="color:#D19A66;"> -9</span><span style="color:#E06C75;"> $PID</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;Process </span><span style="color:#E06C75;">$PID</span><span style="color:#98C379;"> has been killed.&quot;</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">exit</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于 Docker 的一些命令：</p><ul><li>删除个镜像：docker rmi $(docker images | grep cactus-server | awk &#39;{print $3}&#39;)</li></ul><p>Docker 的层级缓存机制非常有效地帮助节省时间和资源，在文件或指令未变更的情况下，重新构建将不会改变镜像 ID。要管理和控制这种行为，你可以选择使用 <code>--no-cache</code> 选项来强制 Docker 进行全新的构建，或者在 Dockerfile 中做微小调整来触发新层的创建。</p></blockquote><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>使用IntelliJ IDEA的Deployment模块可以大大简化远程服务器部署过程。一旦正确配置，您可以轻松同步代码，自动或手动部署更新。</p>`,32),t=[i];function o(p,c){return n(),e("div",null,t)}const d=s(l,[["render",o],["__file","Idea 部署服务的使用.html.vue"]]),u=JSON.parse(`{"path":"/tutorial/Devops%20%E6%95%99%E7%A8%8B/Idea%20%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"Idea 部署服务的使用","lang":"zh-CN","frontmatter":{"title":"Idea 部署服务的使用","subtitle":"devops","date":"2024-04-03T14:06:01.000Z","category":["devops"],"tag":["devops"],"order":1,"description":"IntelliJ IDEA Deployment 教程 简介 在本教程中，我们将讨论如何使用IntelliJ IDEA的Deployment模块来简化部署过程。Deployment模块允许您将本地开发的应用程序代码部署到远程服务器上。 前提条件 安装了IntelliJ IDEA 基本的IDEA使用知识 访问权限到远程服务器（FTP/SFTP/FTPS等...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/tutorial/Devops%20%E6%95%99%E7%A8%8B/Idea%20%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Idea 部署服务的使用"}],["meta",{"property":"og:description","content":"IntelliJ IDEA Deployment 教程 简介 在本教程中，我们将讨论如何使用IntelliJ IDEA的Deployment模块来简化部署过程。Deployment模块允许您将本地开发的应用程序代码部署到远程服务器上。 前提条件 安装了IntelliJ IDEA 基本的IDEA使用知识 访问权限到远程服务器（FTP/SFTP/FTPS等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/web/PixPin_2024-05-07_17-15-04.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T01:52:44.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2024-04-03T14:06:01.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-11T01:52:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Idea 部署服务的使用\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/web/PixPin_2024-05-07_17-15-04.gif\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240507173411359.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/image-20240507173713331.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/web/recording.gif\\"],\\"datePublished\\":\\"2024-04-03T14:06:01.000Z\\",\\"dateModified\\":\\"2024-05-11T01:52:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"IntelliJ IDEA Deployment 教程","slug":"intellij-idea-deployment-教程","link":"#intellij-idea-deployment-教程","children":[]},{"level":2,"title":"前提条件","slug":"前提条件","link":"#前提条件","children":[]},{"level":2,"title":"配置Deployment模块","slug":"配置deployment模块","link":"#配置deployment模块","children":[{"level":3,"title":"1. 打开Deployment设置","slug":"_1-打开deployment设置","link":"#_1-打开deployment设置","children":[]},{"level":3,"title":"2. 具体配置","slug":"_2-具体配置","link":"#_2-具体配置","children":[]}]},{"level":2,"title":"部署项目","slug":"部署项目","link":"#部署项目","children":[{"level":3,"title":"1. 手动上转文件到服务器","slug":"_1-手动上转文件到服务器","link":"#_1-手动上转文件到服务器","children":[]},{"level":3,"title":"2. 自动上传","slug":"_2-自动上传","link":"#_2-自动上传","children":[]}]},{"level":2,"title":"监听启动项目","slug":"监听启动项目","link":"#监听启动项目","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1715392364000,"updatedTime":1715392364000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":3.18,"words":954},"filePathRelative":"tutorial/Devops 教程/Idea 部署服务的使用.md","localizedDate":"2024年4月3日","excerpt":"<h2>IntelliJ IDEA Deployment 教程</h2>\\n<p><strong>简介</strong></p>\\n<p>在本教程中，我们将讨论如何使用IntelliJ IDEA的Deployment模块来简化部署过程。Deployment模块允许您将本地开发的应用程序代码部署到远程服务器上。</p>\\n<h2>前提条件</h2>\\n<ul>\\n<li>安装了IntelliJ IDEA</li>\\n<li>基本的IDEA使用知识</li>\\n<li>访问权限到远程服务器（FTP/SFTP/FTPS等）</li>\\n</ul>\\n<h2>配置Deployment模块</h2>\\n<h3>1. 打开Deployment设置</h3>","autoDesc":true}`);export{d as comp,u as data};
