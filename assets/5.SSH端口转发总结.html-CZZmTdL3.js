import{_ as s,c as a,a as h,o as t}from"./app-BoWQpgSW.js";const e={};function l(n,i){return t(),a("div",null,[...i[0]||(i[0]=[h(`<h1 id="ssh端口转发总结" tabindex="-1"><a class="header-anchor" href="#ssh端口转发总结"><span>SSH端口转发总结</span></a></h1><p>SSH端口转发是一种通过SSH连接建立网络隧道的技术，可以实现不同网络环境下的安全通信。本文详细介绍三种端口转发类型及其实际应用场景。</p><hr><h2 id="🔄-本地转发-local-forwarding" tabindex="-1"><a class="header-anchor" href="#🔄-本地转发-local-forwarding"><span>🔄 本地转发 (Local Forwarding)</span></a></h2><h3 id="概念说明" tabindex="-1"><a class="header-anchor" href="#概念说明"><span>概念说明</span></a></h3><p>本地转发用于解决本地机器无法直接访问目标服务的问题，通过SSH隧道将本地端口的流量转发到远程服务。</p><h3 id="语法格式" tabindex="-1"><a class="header-anchor" href="#语法格式"><span>语法格式</span></a></h3><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SSH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hostnam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre></div><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><p>通过下图了解用法和应用场景：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/9fc0baad2bcc3fad52def3a1e0d80536424b02d8_2_690x291.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="示例解析" tabindex="-1"><a class="header-anchor" href="#示例解析"><span>示例解析</span></a></h3><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:HOST_C:80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HOST_A</span></span></code></pre></div><p><strong>工作流程：</strong></p><ul><li>通过A机器作为跳板访问C机器的80端口</li><li>在本机监听8080端口</li><li>访问本地8080端口时，流量会经过A机器转发到C的80端口</li><li>实现本地访问原本无法直接连接的受限制远程主机</li></ul><h3 id="💡-应用场景" tabindex="-1"><a class="header-anchor" href="#💡-应用场景"><span>💡 应用场景</span></a></h3><h4 id="场景一-跨网络访问数据库" tabindex="-1"><a class="header-anchor" href="#场景一-跨网络访问数据库"><span>场景一：跨网络访问数据库</span></a></h4><p><strong>需求：</strong> 国外有一台MySQL服务器，本地机器无法直接访问，但有一台中转服务器可以同时连接本地和MySQL服务器。</p><p><strong>解决方案：</strong> 利用中转服务器建立SSH隧道，让它在本地机器和MySQL服务器之间搭建通信桥梁。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3306:mysql-server:3306</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@jump-server</span></span></code></pre></div><h4 id="场景二-端口映射与防火墙绕过" tabindex="-1"><a class="header-anchor" href="#场景二-端口映射与防火墙绕过"><span>场景二：端口映射与防火墙绕过</span></a></h4><p><strong>需求：</strong> 本机运行在8080端口的Web服务因防火墙限制无法被其他机器访问，希望通过8888端口提供访问。</p><p><strong>步骤：</strong></p><ol><li><p>启动Web服务：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http.server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8080</span></span></code></pre></div></li><li><p>建立本地端口映射：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8888:127.0.0.1:8080</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> qaq@127.0.0.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -N</span></span></code></pre></div></li><li><p><strong>验证结果：</strong> 两个端口都能正常访问同一个Web服务</p></li></ol><blockquote><p><strong>💡 提示：</strong> 对于本机端口转发，也可以使用 <code>iptables</code> 或更简单的 <code>socat</code> 工具。</p></blockquote><hr><h2 id="⬆️-远端转发-remote-forwarding" tabindex="-1"><a class="header-anchor" href="#⬆️-远端转发-remote-forwarding"><span>⬆️ 远端转发 (Remote Forwarding)</span></a></h2><h3 id="概念说明-1" tabindex="-1"><a class="header-anchor" href="#概念说明-1"><span>概念说明</span></a></h3><p>远端转发的作用是将远端机器作为代理，转发流量到本地服务，实现内网穿透功能。</p><h3 id="语法格式-1" tabindex="-1"><a class="header-anchor" href="#语法格式-1"><span>语法格式</span></a></h3><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">remote</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SSH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hostnam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre></div><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1"><span>工作原理</span></a></h3><p>通过下图了解原理和应用场景：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/3d56dec4e78888fdc1f4ec07822d8e72ba5187a6_2_690x419.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="示例解析-1" tabindex="-1"><a class="header-anchor" href="#示例解析-1"><span>示例解析</span></a></h3><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0.0.0.0:8080:HOST_C:80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HOST_A</span></span></code></pre></div><p><strong>工作流程：</strong></p><ul><li>将C机器的80端口映射到A机器的8080端口</li><li>外部访问A机器的8080端口时，流量会转发到C机器的80端口</li><li>实现内网服务的外部访问能力</li></ul><h3 id="💡-应用场景-1" tabindex="-1"><a class="header-anchor" href="#💡-应用场景-1"><span>💡 应用场景</span></a></h3><h4 id="场景一-内网服务外部共享" tabindex="-1"><a class="header-anchor" href="#场景一-内网服务外部共享"><span>场景一：内网服务外部共享</span></a></h4><p><strong>需求：</strong> 本地有一个Web服务，希望分享给其他人测试，但由于网络限制其他人无法直接访问本地网络。</p><p><strong>解决方案：</strong> 通过SSH远端转发，将本地服务映射到外网服务器上。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0.0.0.0:8888:127.0.0.1:8080</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ubuntu@external-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -N</span></span></code></pre></div><p><strong>结果：</strong> 其他人可以通过 <code>external-server:8888</code> 访问你本机的8080服务。</p><blockquote><p><strong>📝 说明：</strong> 虽然通常使用frp等专用工具，但SSH也能实现相同效果。</p></blockquote><h3 id="⚙️-服务器配置要求" tabindex="-1"><a class="header-anchor" href="#⚙️-服务器配置要求"><span>⚙️ 服务器配置要求</span></a></h3><p>远端转发需要在SSH服务器上开启转发和外部访问权限：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 编辑SSH配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;s/#GatewayPorts no/GatewayPorts yes/g&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/ssh/sshd_config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;s/#AllowTcpForwarding/AllowTcpForwarding/g&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/ssh/sshd_config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 重启SSH服务</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ssh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sshd</span></span></code></pre></div><hr><h2 id="🔀-动态转发-dynamic-forwarding" tabindex="-1"><a class="header-anchor" href="#🔀-动态转发-dynamic-forwarding"><span>🔀 动态转发 (Dynamic Forwarding)</span></a></h2><h3 id="概念说明-2" tabindex="-1"><a class="header-anchor" href="#概念说明-2"><span>概念说明</span></a></h3><p><strong>动态转发</strong>通过创建本地SOCKS代理，实现灵活的流量转发。无需指定具体的远程主机和端口，可以根据实际需求动态转发流量。</p><h3 id="语法格式-2" tabindex="-1"><a class="header-anchor" href="#语法格式-2"><span>语法格式</span></a></h3><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">SSH</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hostnam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-N</span></span></code></pre></div><h3 id="工作原理-2" tabindex="-1"><a class="header-anchor" href="#工作原理-2"><span>工作原理</span></a></h3><p>通过下图了解原理和应用场景：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/2cc8589225cd76952e6ed29249d5420de64a6f6f_2_690x296.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h3 id="特点分析" tabindex="-1"><a class="header-anchor" href="#特点分析"><span>特点分析</span></a></h3><ul><li><strong>灵活性高：</strong> 动态转发在本机与SSH服务器之间创建加密连接，本机所有通过指定端口的通信都会转发</li><li><strong>用途广泛：</strong> 主要应用场景是让所有外部网站访问都通过SSH服务器中转</li><li><strong>动态路由：</strong> SSH服务器访问哪个网站完全取决于原始通信内容，因此称为&quot;动态转发&quot;</li><li><strong>代理功能：</strong> 由于可以按原始通信转发所有流量，因此常用于网络代理或突破网络限制</li></ul><h3 id="💡-应用场景-2" tabindex="-1"><a class="header-anchor" href="#💡-应用场景-2"><span>💡 应用场景</span></a></h3><h4 id="创建socks代理" tabindex="-1"><a class="header-anchor" href="#创建socks代理"><span>创建SOCKS代理</span></a></h4><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -D</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2121</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root@proxy-server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -N</span></span></code></pre></div><p><strong>功能说明：</strong></p><ul><li>在本地监听2121端口，所有流量都通过proxy-server进行转发</li><li>本地的2121端口成为一个SOCKS代理，可供浏览器或其他程序使用</li><li>支持多种应用程序的代理配置</li></ul><h4 id="网络访问优化" tabindex="-1"><a class="header-anchor" href="#网络访问优化"><span>网络访问优化</span></a></h4><p><strong>使用场景：</strong></p><ul><li>绕过网络限制，访问被屏蔽的网站</li><li>通过海外服务器加速国际网站访问</li><li>为应用程序提供统一的代理出口</li></ul><hr><h2 id="🌐-实战案例-为远程服务器提供外网访问能力" tabindex="-1"><a class="header-anchor" href="#🌐-实战案例-为远程服务器提供外网访问能力"><span>🌐 实战案例：为远程服务器提供外网访问能力</span></a></h2><h3 id="应用背景" tabindex="-1"><a class="header-anchor" href="#应用背景"><span>应用背景</span></a></h3><p><strong>适用场景：</strong> 远程服务器位于国内，无法连接外网，且不希望在远程服务器上运行代理软件。</p><h3 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤"><span>实现步骤</span></a></h3><h4 id="第一步-建立ssh反向隧道" tabindex="-1"><a class="header-anchor" href="#第一步-建立ssh反向隧道"><span>第一步：建立SSH反向隧道</span></a></h4><p>假设本地代理端口是7890（已运行代理软件），通过SSH将远程服务器的8888端口转发到本地的7890端口：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ssh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -R</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8888:127.0.0.1:7890</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user@remote-server</span></span></code></pre></div><h4 id="第二步-配置远程服务器代理" tabindex="-1"><a class="header-anchor" href="#第二步-配置远程服务器代理"><span>第二步：配置远程服务器代理</span></a></h4><p>在远程服务器上配置代理环境变量：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> HTTP_PROXY</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://127.0.0.1:8888&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> HTTPS_PROXY</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://127.0.0.1:8888&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ALL_PROXY</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;socks5://127.0.0.1:8888&quot;</span></span></code></pre></div><h3 id="验证效果" tabindex="-1"><a class="header-anchor" href="#验证效果"><span>验证效果</span></a></h3><p>远程服务器现在可以通过本地代理访问外网，实现了网络访问能力的扩展。</p><hr><h2 id="📚-总结对比" tabindex="-1"><a class="header-anchor" href="#📚-总结对比"><span>📚 总结对比</span></a></h2><table><thead><tr><th>转发类型</th><th>语法格式</th><th>主要用途</th><th>典型场景</th></tr></thead><tbody><tr><td><strong>本地转发</strong></td><td><code>ssh -L local:remote:port host</code></td><td>访问受限远程服务</td><td>跨网络数据库访问、防火墙绕过</td></tr><tr><td><strong>远端转发</strong></td><td><code>ssh -R remote:local:port host</code></td><td>内网服务外部化</td><td>内网服务分享、临时外网访问</td></tr><tr><td><strong>动态转发</strong></td><td><code>ssh -D port host</code></td><td>创建SOCKS代理</td><td>网络代理、访问限制绕过</td></tr></tbody></table><h3 id="🎯-选择建议" tabindex="-1"><a class="header-anchor" href="#🎯-选择建议"><span>🎯 选择建议</span></a></h3><ul><li><strong>需要访问特定远程服务时</strong> → 选择本地转发</li><li><strong>需要让外部访问内网服务时</strong> → 选择远端转发</li><li><strong>需要灵活的代理服务时</strong> → 选择动态转发</li></ul><p>通过合理运用这三种SSH端口转发技术，可以有效解决各种网络连接和访问问题，为系统管理和开发工作提供便利。</p>`,86)])])}const p=s(e,[["render",l]]),k=JSON.parse(`{"path":"/devops/linux/5.SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%80%BB%E7%BB%93.html","title":"SSH端口转发总结","lang":"zh-CN","frontmatter":{"title":"SSH端口转发总结","subtitle":"SSH端口转发总结","date":"2025-09-10T17:08:26.000Z","category":["Linux"],"tag":["端口转发"],"order":5,"description":"SSH端口转发总结 SSH端口转发是一种通过SSH连接建立网络隧道的技术，可以实现不同网络环境下的安全通信。本文详细介绍三种端口转发类型及其实际应用场景。 🔄 本地转发 (Local Forwarding) 概念说明 本地转发用于解决本地机器无法直接访问目标服务的问题，通过SSH隧道将本地端口的流量转发到远程服务。 语法格式 工作原理 通过下图了解用...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/devops/linux/5.SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"SSH端口转发总结"}],["meta",{"property":"og:description","content":"SSH端口转发总结 SSH端口转发是一种通过SSH连接建立网络隧道的技术，可以实现不同网络环境下的安全通信。本文详细介绍三种端口转发类型及其实际应用场景。 🔄 本地转发 (Local Forwarding) 概念说明 本地转发用于解决本地机器无法直接访问目标服务的问题，通过SSH隧道将本地端口的流量转发到远程服务。 语法格式 工作原理 通过下图了解用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://beauties.eu.org/blogimg/main/img1/9fc0baad2bcc3fad52def3a1e0d80536424b02d8_2_690x291.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-10T09:29:34.000Z"}],["meta",{"property":"article:tag","content":"端口转发"}],["meta",{"property":"article:published_time","content":"2025-09-10T17:08:26.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-10T09:29:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SSH端口转发总结\\",\\"image\\":[\\"https://beauties.eu.org/blogimg/main/img1/9fc0baad2bcc3fad52def3a1e0d80536424b02d8_2_690x291.png\\",\\"https://beauties.eu.org/blogimg/main/img1/3d56dec4e78888fdc1f4ec07822d8e72ba5187a6_2_690x419.png\\",\\"https://beauties.eu.org/blogimg/main/img1/2cc8589225cd76952e6ed29249d5420de64a6f6f_2_690x296.png\\"],\\"datePublished\\":\\"2025-09-10T17:08:26.000Z\\",\\"dateModified\\":\\"2025-09-10T09:29:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"🔄 本地转发 (Local Forwarding)","slug":"🔄-本地转发-local-forwarding","link":"#🔄-本地转发-local-forwarding","children":[{"level":3,"title":"概念说明","slug":"概念说明","link":"#概念说明","children":[]},{"level":3,"title":"语法格式","slug":"语法格式","link":"#语法格式","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"示例解析","slug":"示例解析","link":"#示例解析","children":[]},{"level":3,"title":"💡 应用场景","slug":"💡-应用场景","link":"#💡-应用场景","children":[]}]},{"level":2,"title":"⬆️ 远端转发 (Remote Forwarding)","slug":"⬆️-远端转发-remote-forwarding","link":"#⬆️-远端转发-remote-forwarding","children":[{"level":3,"title":"概念说明","slug":"概念说明-1","link":"#概念说明-1","children":[]},{"level":3,"title":"语法格式","slug":"语法格式-1","link":"#语法格式-1","children":[]},{"level":3,"title":"工作原理","slug":"工作原理-1","link":"#工作原理-1","children":[]},{"level":3,"title":"示例解析","slug":"示例解析-1","link":"#示例解析-1","children":[]},{"level":3,"title":"💡 应用场景","slug":"💡-应用场景-1","link":"#💡-应用场景-1","children":[]},{"level":3,"title":"⚙️ 服务器配置要求","slug":"⚙️-服务器配置要求","link":"#⚙️-服务器配置要求","children":[]}]},{"level":2,"title":"🔀 动态转发 (Dynamic Forwarding)","slug":"🔀-动态转发-dynamic-forwarding","link":"#🔀-动态转发-dynamic-forwarding","children":[{"level":3,"title":"概念说明","slug":"概念说明-2","link":"#概念说明-2","children":[]},{"level":3,"title":"语法格式","slug":"语法格式-2","link":"#语法格式-2","children":[]},{"level":3,"title":"工作原理","slug":"工作原理-2","link":"#工作原理-2","children":[]},{"level":3,"title":"特点分析","slug":"特点分析","link":"#特点分析","children":[]},{"level":3,"title":"💡 应用场景","slug":"💡-应用场景-2","link":"#💡-应用场景-2","children":[]}]},{"level":2,"title":"🌐 实战案例：为远程服务器提供外网访问能力","slug":"🌐-实战案例-为远程服务器提供外网访问能力","link":"#🌐-实战案例-为远程服务器提供外网访问能力","children":[{"level":3,"title":"应用背景","slug":"应用背景","link":"#应用背景","children":[]},{"level":3,"title":"实现步骤","slug":"实现步骤","link":"#实现步骤","children":[]},{"level":3,"title":"验证效果","slug":"验证效果","link":"#验证效果","children":[]}]},{"level":2,"title":"📚 总结对比","slug":"📚-总结对比","link":"#📚-总结对比","children":[{"level":3,"title":"🎯 选择建议","slug":"🎯-选择建议","link":"#🎯-选择建议","children":[]}]}],"git":{"createdTime":1757496574000,"updatedTime":1757496574000,"contributors":[{"name":"Dell","username":"Dell","email":"1183895890@qq.com","commits":1,"url":"https://github.com/Dell"}]},"readingTime":{"minutes":5.41,"words":1623},"filePathRelative":"devops/linux/5.SSH端口转发总结.md","localizedDate":"2025年9月10日","excerpt":"\\n<p>SSH端口转发是一种通过SSH连接建立网络隧道的技术，可以实现不同网络环境下的安全通信。本文详细介绍三种端口转发类型及其实际应用场景。</p>\\n<hr>\\n<h2>🔄 本地转发 (Local Forwarding)</h2>\\n<h3>概念说明</h3>\\n<p>本地转发用于解决本地机器无法直接访问目标服务的问题，通过SSH隧道将本地端口的流量转发到远程服务。</p>\\n<h3>语法格式</h3>\\n<div class=\\"language-bash\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">ssh</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> -L</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> &lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">local</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> por</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">t&gt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">:</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">remote</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> hos</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">t&gt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">:</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">remote</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> por</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">t&gt; &lt;</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">SSH</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> hostnam</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">e&gt;</span></span></code></pre>\\n</div>","autoDesc":true}`);export{p as comp,k as data};
