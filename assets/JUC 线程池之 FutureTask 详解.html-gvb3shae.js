import{_ as n,c as a,f as l,o as e}from"./app-BQmW_0nV.js";const p={};function o(t,s){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>Future 表示了一个任务的生命周期，是一个可取消的异步运算，可以把它看作是一个异步操作的结果的占位符，它将在未来的某个时刻完成，并提供对其结果的访问。在并发包中许多异步任务类都继承自Future，其中最典型的就是 FutureTask。</p></blockquote><ul><li>JUC 线程池之 FutureTask 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3futuretask">带着BAT大厂的面试问题去理解FutureTask</a></li><li><a href="#futuretask%E7%AE%80%E4%BB%8B">FutureTask简介</a></li><li><a href="#futuretask%E7%B1%BB%E5%85%B3%E7%B3%BB">FutureTask类关系</a></li><li>FutureTask源码解析 <ul><li><a href="#callable%E6%8E%A5%E5%8F%A3">Callable接口</a></li><li><a href="#future%E6%8E%A5%E5%8F%A3">Future接口</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">核心属性</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---run">核心方法 - run()</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---get">核心方法 - get()</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---awaitdoneboolean-timed-long-nanos">核心方法 - awaitDone(boolean timed, long nanos)</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---cancelboolean-mayinterruptifrunning">核心方法 - cancel(boolean mayInterruptIfRunning)</a></li></ul></li><li>FutureTask示例 <ul><li><a href="#future%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">Future使用示例</a></li><li><a href="#futuretaskthread%E4%BE%8B%E5%AD%90">FutureTask+Thread例子</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解futuretask" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解futuretask"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3futuretask">#</a> 带着BAT大厂的面试问题去理解FutureTask</span></a></h2><blockquote><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解FutureTask。@pdai</p></blockquote><ul><li>FutureTask用来解决什么问题的? 为什么会出现?</li><li>FutureTask类结构关系怎么样的?</li><li>FutureTask的线程安全是由什么保证的?</li><li>FutureTask结果返回机制?</li><li>FutureTask内部运行状态的转变?</li><li>FutureTask通常会怎么用? 举例说明。</li></ul><h2 id="futuretask简介" tabindex="-1"><a class="header-anchor" href="#futuretask简介"><span><a href="#futuretask%E7%AE%80%E4%BB%8B">#</a> FutureTask简介</span></a></h2><p>FutureTask 为 Future 提供了基础实现，如获取任务执行结果(get)和取消任务(cancel)等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消(除非使用runAndReset执行计算)。FutureTask 常用来封装 Callable 和 Runnable，也可以作为一个任务提交到线程池中执行。除了作为一个独立的类之外，此类也提供了一些功能性函数供我们创建自定义 task 类使用。FutureTask 的线程安全由CAS来保证。</p><h2 id="futuretask类关系" tabindex="-1"><a class="header-anchor" href="#futuretask类关系"><span><a href="#futuretask%E7%B1%BB%E5%85%B3%E7%B3%BB">#</a> FutureTask类关系</span></a></h2><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-futuretask-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>可以看到,FutureTask实现了RunnableFuture接口，则RunnableFuture接口继承了Runnable接口和Future接口，所以FutureTask既能当做一个Runnable直接被Thread执行，也能作为Future用来得到Callable的计算结果。</p><h2 id="futuretask源码解析" tabindex="-1"><a class="header-anchor" href="#futuretask源码解析"><span><a href="#futuretask%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">#</a> FutureTask源码解析</span></a></h2><h3 id="callable接口" tabindex="-1"><a class="header-anchor" href="#callable接口"><span><a href="#callable%E6%8E%A5%E5%8F%A3">#</a> Callable接口</span></a></h3><p>Callable是个泛型接口，泛型V就是要call()方法返回的类型。对比Runnable接口，Runnable不会返回数据也不能抛出异常。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Computes a result, or throws an exception if unable to do so.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> computed result</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> Exception</span><span style="color:#7F848E;font-style:italic;"> if unable to compute a result</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#E5C07B;">    V</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="future接口" tabindex="-1"><a class="header-anchor" href="#future接口"><span><a href="#future%E6%8E%A5%E5%8F%A3">#</a> Future接口</span></a></h3><p>Future接口代表异步计算的结果，通过Future接口提供的方法可以查看异步计算是否执行完成，或者等待执行结果并获取执行结果，同时还可以取消执行。Future接口的定义如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#61AFEF;"> cancel</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;font-style:italic;"> mayInterruptIfRunning</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#61AFEF;"> isCancelled</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#61AFEF;"> isDone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    V</span><span style="color:#61AFEF;"> get</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ExecutionException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    V</span><span style="color:#61AFEF;"> get</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> timeout</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#E06C75;font-style:italic;"> unit</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> ExecutionException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> TimeoutException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>cancel()</code>:cancel()方法用来取消异步任务的执行。如果异步任务已经完成或者已经被取消，或者由于某些原因不能取消，则会返回false。如果任务还没有被执行，则会返回true并且异步任务不会被执行。如果任务已经开始执行了但是还没有执行完成，若mayInterruptIfRunning为true，则会立即中断执行任务的线程并返回true，若mayInterruptIfRunning为false，则会返回true且不会中断任务执行线程。</li><li><code>isCanceled()</code>:判断任务是否被取消，如果任务在结束(正常执行结束或者执行异常结束)前被取消则返回true，否则返回false。</li><li><code>isDone()</code>:判断任务是否已经完成，如果完成则返回true，否则返回false。需要注意的是：任务执行过程中发生异常、任务被取消也属于任务已完成，也会返回true。</li><li><code>get()</code>:获取任务执行结果，如果任务还没完成则会阻塞等待直到任务执行完成。如果任务被取消则会抛出CancellationException异常，如果任务执行过程发生异常则会抛出ExecutionException异常，如果阻塞等待过程中被中断则会抛出InterruptedException异常。</li><li><code>get(long timeout,Timeunit unit)</code>:带超时时间的get()版本，如果阻塞等待过程中超时则会抛出TimeoutException异常。</li></ul><h3 id="核心属性" tabindex="-1"><a class="header-anchor" href="#核心属性"><span><a href="#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7">#</a> 核心属性</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//内部持有的callable任务，运行完毕后置空</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> callable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//从get()中返回的结果或抛出的异常</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> Object</span><span style="color:#E06C75;"> outcome</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // non-volatile, protected by state reads/writes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//运行callable的线程</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Thread</span><span style="color:#E06C75;"> runner</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使用Treiber栈保存等待线程</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> WaitNode</span><span style="color:#E06C75;"> waiters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//任务状态</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> NEW          </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> COMPLETING   </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> NORMAL       </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> EXCEPTIONAL  </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> CANCELLED    </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> INTERRUPTING </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> INTERRUPTED  </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中需要注意的是state是volatile类型的，也就是说只要有任何一个线程修改了这个变量，那么其他所有的线程都会知道最新的值。7种状态具体表示：</p><ul><li><code>NEW</code>:表示是个新的任务或者还没被执行完的任务。这是初始状态。</li><li><code>COMPLETING</code>:任务已经执行完成或者执行任务的时候发生异常，但是任务执行结果或者异常原因还没有保存到outcome字段(outcome字段用来保存任务执行结果，如果发生异常，则用来保存异常原因)的时候，状态会从NEW变更到COMPLETING。但是这个状态会时间会比较短，属于中间状态。</li><li><code>NORMAL</code>:任务已经执行完成并且任务执行结果已经保存到outcome字段，状态会从COMPLETING转换到NORMAL。这是一个最终态。</li><li><code>EXCEPTIONAL</code>:任务执行发生异常并且异常原因已经保存到outcome字段中后，状态会从COMPLETING转换到EXCEPTIONAL。这是一个最终态。</li><li><code>CANCELLED</code>:任务还没开始执行或者已经开始执行但是还没有执行完成的时候，用户调用了cancel(false)方法取消任务且不中断任务执行线程，这个时候状态会从NEW转化为CANCELLED状态。这是一个最终态。</li><li><code>INTERRUPTING</code>: 任务还没开始执行或者已经执行但是还没有执行完成的时候，用户调用了cancel(true)方法取消任务并且要中断任务执行线程但是还没有中断任务执行线程之前，状态会从NEW转化为INTERRUPTING。这是一个中间状态。</li><li><code>INTERRUPTED</code>:调用interrupt()中断任务执行线程之后状态会从INTERRUPTING转换到INTERRUPTED。这是一个最终态。 有一点需要注意的是，所有值大于COMPLETING的状态都表示任务已经执行完成(任务正常执行完成，任务执行异常或者任务被取消)。</li></ul><p>各个状态之间的可能转换关系如下图所示:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-futuretask-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><ul><li>FutureTask(Callable<code>&lt;V&gt;</code> callable)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> FutureTask</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Callable</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">V</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> callable) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (callable </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callable</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> callable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> NEW</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">       // ensure visibility of callable</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个构造函数会把传入的Callable变量保存在this.callable字段中，该字段定义为<code>private Callable&lt;V&gt; callable</code>;用来保存底层的调用，在被执行完成以后会指向null,接着会初始化state字段为NEW。</p><ul><li>FutureTask(Runnable runnable, V result)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> FutureTask</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Runnable</span><span style="color:#E06C75;"> runnable</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> V</span><span style="color:#E06C75;"> result) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">callable</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callable</span><span style="color:#ABB2BF;">(runnable, result);</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> NEW</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">       // ensure visibility of callable</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个构造函数会把传入的Runnable封装成一个Callable对象保存在callable字段中，同时如果任务执行成功的话就会返回传入的result。这种情况下如果不需要返回值的话可以传入一个null。</p><p>顺带看下Executors.callable()这个方法，这个方法的功能是把Runnable转换成Callable，代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;">T</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> Callable</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">T</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> callable</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Runnable</span><span style="color:#E06C75;"> task</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> T</span><span style="color:#E06C75;"> result) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (task </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">       throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> RunnableAdapter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">(task</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> result)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里采用的是适配器模式，调用<code>RunnableAdapter&lt;T&gt;(task, result)</code>方法来适配，实现如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> RunnableAdapter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#E06C75;"> task</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> T</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    RunnableAdapter</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Runnable</span><span style="color:#E06C75;font-style:italic;"> task</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#E06C75;font-style:italic;"> result</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">task</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> task;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> T</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        task</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个适配器很简单，就是简单的实现了Callable接口，在call()实现中调用Runnable.run()方法，然后把传入的result作为任务的结果返回。</p><p>在new了一个FutureTask对象之后，接下来就是在另一个线程中执行这个Task,无论是通过直接new一个Thread还是通过线程池，执行的都是run()方法，接下来就看看run()方法的实现。</p><h3 id="核心方法-run" tabindex="-1"><a class="header-anchor" href="#核心方法-run"><span><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-run">#</a> 核心方法 - run()</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //新建任务，CAS替换runner为当前线程</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (state </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> NEW </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#56B6C2;">        !</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, runnerOffset,</span></span>
<span class="line"><span style="color:#D19A66;">                                     null</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">())</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> c </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> callable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (c </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> state </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> NEW) {</span></span>
<span class="line"><span style="color:#E5C07B;">            V</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            boolean</span><span style="color:#E06C75;"> ran</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                result </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">                ran </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                result </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                ran </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">                setException</span><span style="color:#E06C75;">(ex)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (ran)</span></span>
<span class="line"><span style="color:#61AFEF;">                set</span><span style="color:#E06C75;">(result)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//设置执行结果</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // runner must be non-null until state is settled to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // prevent concurrent calls to run()</span></span>
<span class="line"><span style="color:#E06C75;">        runner </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // state must be re-read after nulling runner to prevent</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // leaked interrupts</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> INTERRUPTING)</span></span>
<span class="line"><span style="color:#61AFEF;">            handlePossibleCancellationInterrupt</span><span style="color:#E06C75;">(s)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//处理中断逻辑</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li>运行任务，如果任务状态为NEW状态，则利用CAS修改为当前线程。执行完毕调用set(result)方法设置执行结果。set(result)源码如下：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> set</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">V</span><span style="color:#E06C75;"> v) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, NEW, COMPLETING)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        outcome </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putOrderedInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, NORMAL);</span><span style="color:#7F848E;font-style:italic;"> // final state</span></span>
<span class="line"><span style="color:#61AFEF;">        finishCompletion</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//执行完毕，唤醒等待线程</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先利用cas修改state状态为COMPLETING，设置返回结果，然后使用 lazySet(UNSAFE.putOrderedInt)的方式设置state状态为NORMAL。结果设置完毕后，调用finishCompletion()方法唤醒等待线程，源码如下：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> finishCompletion</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // assert state &gt; COMPLETING;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">WaitNode</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> (q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> waiters) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, waitersOffset, q, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//移除等待线程</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//自旋遍历等待线程</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (t </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                    LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unpark</span><span style="color:#ABB2BF;">(t);</span><span style="color:#7F848E;font-style:italic;">//唤醒等待线程</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                WaitNode</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (next </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // unlink to help gc</span></span>
<span class="line"><span style="color:#E06C75;">                q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //任务完成后调用函数，自定义扩展</span></span>
<span class="line"><span style="color:#61AFEF;">    done</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    callable </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">        // to reduce footprint</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>回到run方法，如果在 run 期间被中断，此时需要调用handlePossibleCancellationInterrupt方法来处理中断逻辑，确保任何中断(例如cancel(true))只停留在当前run或runAndReset的任务中，源码如下：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> handlePossibleCancellationInterrupt</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> s) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //在中断者中断线程之前可能会延迟，所以我们只需要让出CPU时间片自旋等待</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> INTERRUPTING)</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#E06C75;"> (state </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> INTERRUPTING)</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">yield</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // wait out pending interrupt</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心方法-get" tabindex="-1"><a class="header-anchor" href="#核心方法-get"><span><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-get">#</a> 核心方法 - get()</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//获取执行结果</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">() throws InterruptedException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ExecutionException {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#E06C75;"> COMPLETING)</span></span>
<span class="line"><span style="color:#E06C75;">        s </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> awaitDone</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0L</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> report</span><span style="color:#E06C75;">(s)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：FutureTask 通过get()方法获取任务执行结果。如果任务处于未完成的状态(<code>state &lt;= COMPLETING</code>)，就调用awaitDone方法(后面单独讲解)等待任务完成。任务完成后，通过report方法获取执行结果或抛出执行期间的异常。report源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//返回执行结果或抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> report</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> s) throws ExecutionException {</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> outcome</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> NORMAL)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (V)x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#E06C75;"> CANCELLED)</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> CancellationException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ExecutionException</span><span style="color:#E06C75;">((Throwable)x)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心方法-awaitdone-boolean-timed-long-nanos" tabindex="-1"><a class="header-anchor" href="#核心方法-awaitdone-boolean-timed-long-nanos"><span><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-awaitdone-boolean-timed-long-nanos">#</a> 核心方法 awaitDone(boolean timed, long nanos)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> awaitDone</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> timed</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> nanos)</span></span>
<span class="line"><span style="color:#E06C75;">    throws InterruptedException {</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> deadline </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> timed </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> nanos </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    WaitNode</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> queued </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//自旋</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">//获取并清除中断状态</span></span>
<span class="line"><span style="color:#61AFEF;">            removeWaiter</span><span style="color:#E06C75;">(q)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//移除等待WaitNode</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> COMPLETING) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (q </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//置空等待节点的线程</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> COMPLETING) </span><span style="color:#7F848E;font-style:italic;">// cannot time out yet</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">yield</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (q </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">            q </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WaitNode</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">queued)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //CAS修改waiter</span></span>
<span class="line"><span style="color:#E06C75;">            queued </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, waitersOffset,</span></span>
<span class="line"><span style="color:#E5C07B;">                                                 q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> waiters, q);</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (timed) {</span></span>
<span class="line"><span style="color:#E06C75;">            nanos </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> deadline </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (nanos </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0L</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                removeWaiter</span><span style="color:#E06C75;">(q)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//超时，移除等待节点</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parkNanos</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, nanos);</span><span style="color:#7F848E;font-style:italic;">//阻塞当前线程</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        else</span></span>
<span class="line"><span style="color:#E5C07B;">            LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">park</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//阻塞当前线程</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：awaitDone用于等待任务完成，或任务因为中断或超时而终止。返回任务的完成状态。函数执行逻辑如下：</p><p>如果线程被中断，首先清除中断状态，调用removeWaiter移除等待节点，然后抛出InterruptedException。removeWaiter源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> removeWaiter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">WaitNode</span><span style="color:#E06C75;"> node) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (node </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//首先置空线程</span></span>
<span class="line"><span style="color:#E06C75;">        retry</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) {          </span><span style="color:#7F848E;font-style:italic;">// restart on removeWaiter race</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //依次遍历查找</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">WaitNode</span><span style="color:#E06C75;"> pred </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> waiters</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> q </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> s) {</span></span>
<span class="line"><span style="color:#E06C75;">                s </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                    pred </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (pred </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// check for race</span></span>
<span class="line"><span style="color:#C678DD;">                        continue</span><span style="color:#E06C75;"> retry</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, waitersOffset,q, s)</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">//cas替换</span></span>
<span class="line"><span style="color:#C678DD;">                    continue</span><span style="color:#E06C75;"> retry</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果当前状态为结束状态(state&gt;COMPLETING),则根据需要置空等待节点的线程，并返回 Future 状态；</li><li>如果当前状态为正在完成(COMPLETING)，说明此时 Future 还不能做出超时动作，为任务让出CPU执行时间片；</li><li>如果state为NEW，先新建一个WaitNode，然后CAS修改当前waiters；</li><li>如果等待超时，则调用removeWaiter移除等待节点，返回任务状态；如果设置了超时时间但是尚未超时，则park阻塞当前线程；</li><li>其他情况直接阻塞当前线程。</li></ul><h3 id="核心方法-cancel-boolean-mayinterruptifrunning" tabindex="-1"><a class="header-anchor" href="#核心方法-cancel-boolean-mayinterruptifrunning"><span><a href="#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-cancel-boolean-mayinterruptifrunning">#</a> 核心方法 - cancel(boolean mayInterruptIfRunning)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> cancel</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> mayInterruptIfRunning) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //如果当前Future状态为NEW，根据参数修改Future状态为INTERRUPTING或CANCELLED</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">(state </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> NEW </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">          UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, NEW,</span></span>
<span class="line"><span style="color:#ABB2BF;">              mayInterruptIfRunning </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> INTERRUPTING </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> CANCELLED)</span><span style="color:#E06C75;">))</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {    </span><span style="color:#7F848E;font-style:italic;">// in case call to interrupt throws exception</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (mayInterruptIfRunning) {</span><span style="color:#7F848E;font-style:italic;">//可以在运行时中断</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> runner</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (t </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                    t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">            } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// final state</span></span>
<span class="line"><span style="color:#E5C07B;">                UNSAFE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putOrderedInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, INTERRUPTED);</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        finishCompletion</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//移除并唤醒所有等待线程</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：尝试取消任务。如果任务已经完成或已经被取消，此操作会失败。</p><ul><li>如果当前Future状态为NEW，根据参数修改Future状态为INTERRUPTING或CANCELLED。</li><li>如果当前状态不为NEW，则根据参数mayInterruptIfRunning决定是否在任务运行中也可以中断。中断操作完成后，调用finishCompletion移除并唤醒所有等待线程。</li></ul><h2 id="futuretask示例" tabindex="-1"><a class="header-anchor" href="#futuretask示例"><span><a href="#futuretask%E7%A4%BA%E4%BE%8B">#</a> FutureTask示例</span></a></h2><p><strong>常用使用方式：</strong></p><ul><li>第一种方式: Future + ExecutorService</li><li>第二种方式: FutureTask + ExecutorService</li><li>第三种方式: FutureTask + Thread</li></ul><h3 id="future使用示例" tabindex="-1"><a class="header-anchor" href="#future使用示例"><span><a href="#future%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B">#</a> Future使用示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FutureDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">          ExecutorService</span><span style="color:#E06C75;"> executorService</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCachedThreadPool</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">          Future</span><span style="color:#E06C75;"> future</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">submit</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#ABB2BF;">              @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">              public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                  Long</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                  while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                      Long</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                     if</span><span style="color:#ABB2BF;"> ((current </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> start) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                         return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                     }</span></span>
<span class="line"><span style="color:#ABB2BF;">                 }</span></span>
<span class="line"><span style="color:#ABB2BF;">             }</span></span>
<span class="line"><span style="color:#ABB2BF;">         });</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#C678DD;">         try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">             Integer</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (Integer)</span><span style="color:#E5C07B;">future</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">             System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(result);</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">             e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="futuretask-thread例子" tabindex="-1"><a class="header-anchor" href="#futuretask-thread例子"><span><a href="#futuretask-thread%E4%BE%8B%E5%AD%90">#</a> FutureTask+Thread例子</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.*</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CallDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> ExecutionException</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * 第一种方式:Future + ExecutorService</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * Task task = new Task();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * ExecutorService service = Executors.newCachedThreadPool();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * Future&lt;Integer&gt; future = service.submit(task1);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * service.shutdown();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * 第二种方式: FutureTask + ExecutorService</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * ExecutorService executor = Executors.newCachedThreadPool();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * Task task = new Task();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(task);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * executor.submit(futureTask);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * executor.shutdown();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * 第三种方式:FutureTask + Thread</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 2. 新建FutureTask,需要一个实现了Callable接口的类的实例作为构造函数参数</span></span>
<span class="line"><span style="color:#E5C07B;">        FutureTask</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">futureTask</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> FutureTask</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Task</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 3. 新建Thread对象并启动</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> thread</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(futureTask);</span></span>
<span class="line"><span style="color:#E5C07B;">        thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Task thread&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Thread [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;] is running&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 4. 调用isDone()判断任务是否结束</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">futureTask</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isDone</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Task is not done&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 5. 调用get()方法获取任务结果,如果任务没有执行完成则阻塞等待</span></span>
<span class="line"><span style="color:#ABB2BF;">            result </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> futureTask</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;result is &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> result);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 1. 继承Callable接口,实现call()方法,泛型参数为要返回的类型</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Task</span><span style="color:#C678DD;">  implements</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#E5C07B;"> Integer</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Thread [&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;] is running&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;++i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                result </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">#</a> 参考文章</span></a></h2>`,68)]))}const c=n(p,[["render",o],["__file","JUC 线程池之 FutureTask 详解.html.vue"]]),i=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20FutureTask%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 线程池之 FutureTask 详解","lang":"zh-CN","frontmatter":{"title":"JUC 线程池之 FutureTask 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":18,"description":"Future 表示了一个任务的生命周期，是一个可取消的异步运算，可以把它看作是一个异步操作的结果的占位符，它将在未来的某个时刻完成，并提供对其结果的访问。在并发包中许多异步任务类都继承自Future，其中最典型的就是 FutureTask。 JUC 线程池之 FutureTask 详解 带着BAT大厂的面试问题去理解FutureTask FutureT...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B9%8B%20FutureTask%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 线程池之 FutureTask 详解"}],["meta",{"property":"og:description","content":"Future 表示了一个任务的生命周期，是一个可取消的异步运算，可以把它看作是一个异步操作的结果的占位符，它将在未来的某个时刻完成，并提供对其结果的访问。在并发包中许多异步任务类都继承自Future，其中最典型的就是 FutureTask。 JUC 线程池之 FutureTask 详解 带着BAT大厂的面试问题去理解FutureTask FutureT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-futuretask-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T06:05:48.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T06:05:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 线程池之 FutureTask 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-futuretask-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-futuretask-2.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T06:05:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解FutureTask","slug":"带着bat大厂的面试问题去理解futuretask","link":"#带着bat大厂的面试问题去理解futuretask","children":[]},{"level":2,"title":"# FutureTask简介","slug":"futuretask简介","link":"#futuretask简介","children":[]},{"level":2,"title":"# FutureTask类关系","slug":"futuretask类关系","link":"#futuretask类关系","children":[]},{"level":2,"title":"# FutureTask源码解析","slug":"futuretask源码解析","link":"#futuretask源码解析","children":[{"level":3,"title":"# Callable接口","slug":"callable接口","link":"#callable接口","children":[]},{"level":3,"title":"# Future接口","slug":"future接口","link":"#future接口","children":[]},{"level":3,"title":"# 核心属性","slug":"核心属性","link":"#核心属性","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"# 核心方法 - run()","slug":"核心方法-run","link":"#核心方法-run","children":[]},{"level":3,"title":"# 核心方法 - get()","slug":"核心方法-get","link":"#核心方法-get","children":[]},{"level":3,"title":"# 核心方法 awaitDone(boolean timed, long nanos)","slug":"核心方法-awaitdone-boolean-timed-long-nanos","link":"#核心方法-awaitdone-boolean-timed-long-nanos","children":[]},{"level":3,"title":"# 核心方法 - cancel(boolean mayInterruptIfRunning)","slug":"核心方法-cancel-boolean-mayinterruptifrunning","link":"#核心方法-cancel-boolean-mayinterruptifrunning","children":[]}]},{"level":2,"title":"# FutureTask示例","slug":"futuretask示例","link":"#futuretask示例","children":[{"level":3,"title":"# Future使用示例","slug":"future使用示例","link":"#future使用示例","children":[]},{"level":3,"title":"# FutureTask+Thread例子","slug":"futuretask-thread例子","link":"#futuretask-thread例子","children":[]}]},{"level":2,"title":"# 参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1709869916000,"updatedTime":1709877948000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":13.06,"words":3919},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 线程池之 FutureTask 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>Future 表示了一个任务的生命周期，是一个可取消的异步运算，可以把它看作是一个异步操作的结果的占位符，它将在未来的某个时刻完成，并提供对其结果的访问。在并发包中许多异步任务类都继承自Future，其中最典型的就是 FutureTask。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 线程池之 FutureTask 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3futuretask\\">带着BAT大厂的面试问题去理解FutureTask</a></li>\\n<li><a href=\\"#futuretask%E7%AE%80%E4%BB%8B\\">FutureTask简介</a></li>\\n<li><a href=\\"#futuretask%E7%B1%BB%E5%85%B3%E7%B3%BB\\">FutureTask类关系</a></li>\\n<li>FutureTask源码解析\\n<ul>\\n<li><a href=\\"#callable%E6%8E%A5%E5%8F%A3\\">Callable接口</a></li>\\n<li><a href=\\"#future%E6%8E%A5%E5%8F%A3\\">Future接口</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7\\">核心属性</a></li>\\n<li><a href=\\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">构造函数</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---run\\">核心方法 - run()</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---get\\">核心方法 - get()</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---awaitdoneboolean-timed-long-nanos\\">核心方法 - awaitDone(boolean timed, long nanos)</a></li>\\n<li><a href=\\"#%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---cancelboolean-mayinterruptifrunning\\">核心方法 - cancel(boolean mayInterruptIfRunning)</a></li>\\n</ul>\\n</li>\\n<li>FutureTask示例\\n<ul>\\n<li><a href=\\"#future%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\\">Future使用示例</a></li>\\n<li><a href=\\"#futuretaskthread%E4%BE%8B%E5%AD%90\\">FutureTask+Thread例子</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,i as data};
