import{_ as s,c as a,a as n,o as l}from"./app-Dg1sn2Fv.js";const t={};function e(h,i){return l(),a("div",null,[...i[0]||(i[0]=[n(`<p>本章介绍如何使用Docker 容器来搭建压力测试监控平台。</p><h2 id="_1-分布式压测" tabindex="-1"><a class="header-anchor" href="#_1-分布式压测"><span>1. 分布式压测</span></a></h2><p>在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。</p><p>为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。</p><p>单机网络带宽有限，高延时场景下，单机可模拟最大线程数有限。</p><p>下图是分布式压测架构：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png" alt="分布式压测图.drawio" tabindex="0" loading="lazy"><figcaption>分布式压测图.drawio</figcaption></figure><blockquote><p>需要注意的是，JMeter 分布式压测中，Controller 节点负责协调，Slave 节点负责执行测试。当控制器节点配置 10 个线程，每个线程循环 100 次时，单个控制器会产生 1000 个请求样本。在 Master 启动压测后，每台 Slave 都会执行相同的测试配置，向被测服务发送 1000 次请求。因此，如果使用 3 台 Slave，总共会产生 3000 次请求样本。</p></blockquote><p>搭建 JMeter 分布式压测环境注意事项：</p><ul><li>三台 JMeter Slave 都是在 Linux（ <strong>Ubuntu 22.04.1 LTS</strong> ） 服务器上搭建。</li><li>需要确保 Server 和 Salve 之间的时间是同步的。</li><li>需在内网配置 JMeter 主从通信端口【1个固定，1个随机】，简单的配置方式就是关闭防火墙，但存 在安全隐患。</li></ul><h3 id="_1-1-在-window-系统中搭建部署-jmeter-master" tabindex="-1"><a class="header-anchor" href="#_1-1-在-window-系统中搭建部署-jmeter-master"><span>1.1 在 Window 系统中搭建部署 JMeter Master</span></a></h3><ul><li>与Window中安装JMeter一样简单，略</li></ul><h3 id="_1-2-linux-部署-jmeter-salve" tabindex="-1"><a class="header-anchor" href="#_1-2-linux-部署-jmeter-salve"><span>1.2 Linux 部署 JMeter Salve</span></a></h3><p>下载解压安装包命令</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /work/JMeter-slave</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -zxvf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apache-jmeter-5.6.3.tgz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mv</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apache-jmeter-5.6.3</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./apache-jmeter-5.6.3-salve</span></span></code></pre></div><p>修改<code>rmi</code>配置文件和主机的 hostname</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apache-jmeter-5.6.3-salve/bin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 修改ip</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jmeter-server</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RMI_HOST_DEF=-Djava.rmi.server.hostname=本机ip</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 改端口</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jmeter.properties</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RMI port to be used by the server (must start rmiregistry with same port)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server_port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">1099</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># To change the default port (1099) used to access the server:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server.rmi.port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=1098</span></span></code></pre></div><p>配置关闭server.rmi.ssl</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Set this if you don&#39;t want to use SSL for RMI</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">server.rmi.ssl.disable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">true</span></span></code></pre></div><p>启动jmeter-server服务</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./jmeter-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">./jmeter.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span></code></pre></div><blockquote><p>注意：剩下两台 Slave 也是同样的操作。</p></blockquote><h3 id="_1-3-分布式环境配置" tabindex="-1"><a class="header-anchor" href="#_1-3-分布式环境配置"><span>1.3 分布式环境配置</span></a></h3><ul><li><p>确保 JMeter Controller 和 Salve 安装正确</p></li><li><p>Salve启动，并监听1099端口</p></li><li><p>在JMeter Controller 机器安装目录bin下，找到jmeter.properties文件，修改远程主机选项，添加3个 Salve服务器的地址</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">remote_hosts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">192.168.1.18:1099,192.168.1.19:1099,192.168.1.20:1099</span></span></code></pre></div></li><li><p>启动jmeter，如果是多网卡模式需要指定 IP 地址启动</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> jmeter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Djava.rmi.server.hostname=192.168.1.218</span></span></code></pre></div></li><li><p>验证分布式环境是否搭建成功</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250117174511298.png" alt="image-20250117174511298" tabindex="0" loading="lazy"><figcaption>image-20250117174511298</figcaption></figure></li></ul><h2 id="_3-容器服务优化" tabindex="-1"><a class="header-anchor" href="#_3-容器服务优化"><span>3. 容器服务优化</span></a></h2><h3 id="_3-1-tomcat容器调优" tabindex="-1"><a class="header-anchor" href="#_3-1-tomcat容器调优"><span>3.1 Tomcat容器调优</span></a></h3><p>Spring Boot 应用性能优化中，嵌入式 Tomcat 的调优是关键环节。</p><p>当出现响应时间延迟时，通常是由于 Tomcat 内部的 IO 模型（多线程与网络编程）成为瓶颈，并导致系统异常率升高。为了更好地理解系统并发处理能力，并指导线程池配置，我们可以基于响应时间（RT）和吞吐量（TPS）进行服务端并发线程数的估算，公式为：TPS / (1000ms / RT均值)。</p><p>Spring Boot 应用依赖于嵌入式 Tomcat 服务器，默认配置可能存在性能瓶颈。通过对 Tomcat 配置进行适当优化，可以显著提升应用性能。</p><p><strong>修改配置如下所示：可以使用外挂配置，也可以修改配置文件application.yml</strong></p><blockquote><p>注意，做了任何修改一定要确认配置生效，否则干的再久也是白搭！</p></blockquote><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">48080</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置服务器监听的端口号为 48080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  max-http-header-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">10MB</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置 HTTP 请求头的最大为 10MB</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    accept-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置当所有工作线程都被使用时，Tomcat 可以接受的最大排队请求数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    max-connections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置服务器允许的最大连接数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    threads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置最大工作线程数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      min-spare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置最小空闲线程数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">management</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  endpoints</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    web</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      exposure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;*&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置暴露所有管理端点</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      base-path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/actuator</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 配置管理端点的基本路径为 /actuator</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  endpoint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 允许通过 /actuator/shutdown 来关闭应用程序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>accept-count：最大等待连接数</strong></p><ul><li>当调用HTTP请求数达到Tomcat的最大线程数时，还有新的请求进来，这时Tomcat会将该剩余请 求放到等待队列</li><li>acceptCount就是指队列能够接受的最大的等待连接数</li><li>默认值是100，如果等待队列超了，新的请求会被拒绝（connection refused）</li></ul></li><li><p><strong>maxConnections：最大连接数</strong></p><ul><li>默认值是8192。这意味着Tomcat能够同时处理的最大TCP连接数量是8192个。这个设置包括了正在活跃的请求以及等待处理的请求。</li></ul></li><li><p><strong>maxThreads：最大线程数</strong></p><ul><li>默认值是200。这意味着Tomcat能够创建的最大工作线程数是200个，这些线程用来处理HTTP请求。当所有工作线程都在处理请求时，新的请求将会放入到等待队列中，如果等待队列也满了，则超出部分的请求会被拒绝。</li></ul><blockquote><p>在优化 Tomcat 性能时，你是否认为最大线程数越大越好？实际上，线程数只是影响吞吐量（TPS）的因素之一，并非关键因素。</p><p>增加线程是有成本的，过多的线程会导致线程上下文切换开销和内存资源消耗。</p><p>JVM 默认的线程堆栈大小为 1MB（通过 <code>-Xss</code> 参数进行配置）。</p><p>关于线程上下文切换的详细机制，我们将在并发编程章节中深入探讨。</p></blockquote></li></ul><p><strong>那么最大线程数的值应该设置多少合适呢？</strong></p><ul><li>这个需要基于业务系统的监控结果来定。RT均值很低，可以不用设置，RT均值很高，可以考虑加 线程数</li><li>当然，如果接口响应时间低于100毫秒，足以产生足够的TPS，系统瓶颈不在于此，则不建议设置最大线程数</li></ul><blockquote><p>个人经验：</p><ul><li><p>1C2G，线程数200</p></li><li><p>4C8G，线程数800</p></li><li><p>8C16G，线程数1600</p></li></ul></blockquote><h4 id="_3-1-1-确认调优配置生效" tabindex="-1"><a class="header-anchor" href="#_3-1-1-确认调优配置生效"><span>3.1.1 确认调优配置生效</span></a></h4><p>访问：<a href="http://218.249.73.244:48080/actuator/configprops" target="_blank" rel="noopener noreferrer">http://218.249.73.244:48080/actuator/configprops</a></p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250120155625524.png" alt="image-20250120155625524" tabindex="0" loading="lazy"><figcaption>image-20250120155625524</figcaption></figure><h4 id="_3-1-2-调优前后的性能对比" tabindex="-1"><a class="header-anchor" href="#_3-1-2-调优前后的性能对比"><span>3.1.2 调优前后的性能对比</span></a></h4><p>调优前：压力机Active，RT、TPS、系统进程运行状态【应用活动线程数】</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250121165615127.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250121171137564.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在调整完Spring boot 配置后，使用 Jmeter 压测时可能出现：<strong>java.net.BindException：Address already in use.</strong> 错误。</p><p>出现错误原因：Windows提供给TCPIP连接的端口为1024-5000，并且要四分钟左右循环回收，这就导致我们短时间内频繁调用大量请求时，端口将被占满。</p><p>解决这个错误方案 ：</p><ul><li>打开注册表：在cmd（win+R）中输入regedit，打开注册表；</li><li>设置系统参数：最大端口连接数； <ul><li>找到系统参数设置项：\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters</li><li>右击parameters，添加一个新的DWORD，参数名为MaxUserPort；</li><li>双击MaxMaxUserPort，输入数值为65534，基数选择十进制；</li><li>重启电脑！重启电脑！重启电脑！</li></ul></li></ul><p>按照以上配置后压测项目还会出现 <strong>java.net.BindException：Address already in use.</strong> 错误。这时就需要调整 Ramp-up period 参数。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250208165241362.png" alt="image-20250208165241362" tabindex="0" loading="lazy"><figcaption>image-20250208165241362</figcaption></figure><p>可以根据实际情况调整：</p><p><strong>基础方案（温和启动）：</strong></p><ul><li>Ramp-up period: 60-120 秒</li><li>这意味着每秒会增加 3-6 个线程</li><li>给系统足够时间预热和适应负载增长</li></ul><p><strong>激进方案（快速启动）：</strong></p><ul><li>Ramp-up period: 20-30 秒</li><li>每秒增加 13-20 个线程</li><li>适用于系统性能较好或需要快速达到目标并发的场景</li></ul><p><strong>保守方案（缓慢启动）：</strong></p><ul><li>Ramp-up period: 180-240 秒</li><li>每秒增加 1-2 个线程</li><li>适用于需要特别关注系统稳定性的场景</li></ul><blockquote><p>我的建议是：</p><ol><li>先用保守方案（180秒）测试一轮</li><li>观察系统响应情况（TPS、响应时间、错误率）</li><li>如果系统表现稳定，可以逐步降低到基础方案（60秒）</li><li>重点关注以下指标： <ul><li>响应时间是否稳定</li><li>错误率是否在可接受范围内</li><li>系统资源使用情况</li></ul></li></ol><p>如果你的系统能够很好地处理基础方案，而且需要测试更极限的情况，才考虑使用激进方案。</p><p>记住：较短的 Ramp-up period 会产生更大的突发压力，可能导致更多的连接错误。建议从较大的值开始，然后根据实际情况逐步调整。</p></blockquote><p>**推荐：**把 jmmeter 程序迁移到一台安装程序较少比较干净的系统内进行压力测试。这样也可以解决这个问题！</p><p>调优后：压力机Active，RT、TPS、系统进程运行状态【应用活动线程数】</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250212103139395.png" alt="image-20250212103139395" tabindex="0" loading="lazy"><figcaption>image-20250212103139395</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250212103935128.png" alt="image-20250212103935128" tabindex="0" loading="lazy"><figcaption>image-20250212103935128</figcaption></figure><p>优化结论：提升Tomcat最大线程数，在高负载场景下，TPS提升接近1倍多，同时RT大幅降低；</p><h3 id="_3-2-网络io模型调优" tabindex="-1"><a class="header-anchor" href="#_3-2-网络io模型调优"><span>3.2 网络IO模型调优</span></a></h3><h4 id="_3-2-1-io-模型介绍" tabindex="-1"><a class="header-anchor" href="#_3-2-1-io-模型介绍"><span>3.2.1 IO 模型介绍</span></a></h4><p><img src="https://beauties.eu.org/blogimg/main/img1/新旧IO比较.png" alt="新旧IO比较" loading="lazy">在Java 程序中文件读写性能是影响应用程序性能的关键因素之一，NIO与原来的IO有同样的作用和目的，但 是使用的方式完全不同，NIO支持面向缓冲区的、基于通道的IO操作，NIO以更加高效的方式进行文件 的读写操作。</p><blockquote><p>在Java 中NIO是从Java 1.4版本开始引入的一套新的IO API用于替代标准的Java IO API。</p><p>JDK1.7之后，Java对NIO再次进行了极大的改进，增强了对文件处理和文件系统特性的支持。我们称之 为AIO，也可以叫NIO2。</p></blockquote><p>优化 <strong>Spring Boot 2.7.x</strong> 内置 <strong>Tomcat 9.x</strong> 配置，使用NIO2的Http协议实现，对请求连接器进行改写！</p><p>调整后的配置：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TomcatConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 启用 NIO2（Http11Nio2Protocol）协议</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@return</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WebServerFactoryCustomizer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TomcatServletWebServerFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tomcatCustomizer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> factory </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setProtocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            factory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addConnectorCustomizers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">http11Nio2Connector);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> http11Nio2Connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Connector</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Http11Nio2Protocol</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nio2Protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Http11Nio2Protocol)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProtocolHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //等待队列最多允许1000个线程在队列中等待</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        nio2Protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAcceptCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 设置最大线程数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        nio2Protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 设置最大连接数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        nio2Protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxConnections</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //定制化keepalivetimeout,设置30秒内没有请求则服务端自动断开keepalive链接</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        nio2Protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setKeepAliveTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">30000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        //当客户端发送超过10000个请求则自动断开keepalive链接</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        nio2Protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setMaxKeepAliveRequests</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 请求方式</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setScheme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">48080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//自定义的端口，与源端口9001</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRedirectPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8443</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.2.2 调优前后的性能对比</strong></p><p>没有使用NIO2的Http协议实现之前的 RT、TPS</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-202502121031393951111.png" alt="image-20250212103139395" tabindex="0" loading="lazy"><figcaption>image-20250212103139395</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250214094940158.png" alt="image-20250214094940158" tabindex="0" loading="lazy"><figcaption>image-20250214094940158</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250214095046933.png" alt="image-20250214095046933" tabindex="0" loading="lazy"><figcaption>image-20250214095046933</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218130541053.png" alt="image-20250218130541053" tabindex="0" loading="lazy"><figcaption>image-20250218130541053</figcaption></figure><p>使用NIO2的Http协议实现之后的 RT、TPS</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250214104446889.png" alt="image-20250214104446889" tabindex="0" loading="lazy"><figcaption>image-20250214104446889</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250214104623856.png" alt="image-20250214104623856" tabindex="0" loading="lazy"><figcaption>image-20250214104623856</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250214104641451.png" alt="image-20250214104641451" tabindex="0" loading="lazy"><figcaption>image-20250214104641451</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250214104823601.png" alt="image-20250214104823601" tabindex="0" loading="lazy"><figcaption>image-20250214104823601</figcaption></figure><p>从以上图片信息的对比来看，使用<strong>NIO</strong>和<strong>NIO2</strong>后，主要的提升体现在以下几个方面：</p><ul><li><p><strong>吞吐量 (ops/s)：</strong></p><ul><li>在<strong>NIO2</strong>中，吞吐量为461.5 ops/s，相比<strong>NIO</strong>的480 ops/s略有下降。但是，<strong>NIO2</strong>的性能更稳定，波动较小。</li></ul></li><li><p><strong>响应时间 (ms)：</strong></p><ul><li>在<strong>NIO2</strong>中，大部分线程请求的平均响应时间都有所下降，特别是在400线程请求方面（从519.23 ms降到517.33 ms）。其他较高线程的请求也显示出轻微的改善。</li><li><strong>最大响应时间</strong>在<strong>NIO2</strong>中也有所下降。例如，400线程请求的最大响应时间在<strong>NIO2</strong>中为776 ms，而在<strong>NIO</strong>中为792.34 ms。</li></ul></li><li><p><strong>TPS、TPM 和 TPH：</strong></p><ul><li><strong>NIO2</strong>中的<strong>TPS</strong>（每秒事务数）在400线程请求及以上有所增加，表明<strong>NIO2</strong>的处理能力更强。</li><li>同样，TPM（每分钟事务数）和TPH（每小时事务数）在<strong>NIO2</strong>中也有所提高，显示出系统在更高速率下处理更多事务。</li></ul></li><li><p><strong>错误率：</strong></p><ul><li>在<strong>NIO和NIO2</strong>中，错误率均为0%，因此在这一点上没有差异。</li></ul></li><li><p><strong>其他指标</strong>（如90%、95%、99%的响应时间）在<strong>NIO2</strong>中也表现出一些小幅的提升，整体响应时间有所降低。</p></li></ul><p>总的来说，<strong>NIO2</strong>在性能上表现出了更加<strong>稳定的响应时间和吞吐量</strong>，尤其是在高线程情况下，系统处理更多请求时的效率得到了明显提升。</p><h3 id="_3-3-内置tomcat升级成undertow" tabindex="-1"><a class="header-anchor" href="#_3-3-内置tomcat升级成undertow"><span>3.3 内置Tomcat升级成Undertow</span></a></h3><p><strong>官网</strong>：<a href="https://undertow.io/" target="_blank" rel="noopener noreferrer">https://undertow.io/</a></p><p>Tomcat是Apache开源的一个轻量级的<strong>Servlet容器</strong>。Tomcat具有Web服务器特有的功能，包括 Tomcat管理和控制平台、安全局管理和Tomcat阀等。<code>Tomcat本身包含了HTTP服务器，因此也可以视作单独的Web服务器。</code>但是，Tomcat和ApacheHTTP服务器不是一个东西，ApacheHTTP服务器是用C语言实现的HTTP Web服务器。Tomcat是完全免费的，深受开发者的喜爱。</p><p>Undertow是Red Hat公司的开源产品, 它完全采用Java语言开发，是一款灵活的高性能Web服务器，<code>支持阻塞IO和非阻塞IO</code>。由于Undertow采用Java语言开发，可以直接嵌入到Java项目中使用。同时， Undertow完全支持Servlet和Web Socket，在高并发情况下表现非常出色。</p><h4 id="_3-3-1-具体配置过程" tabindex="-1"><a class="header-anchor" href="#_3-3-1-具体配置过程"><span>3.3.1 具体配置过程</span></a></h4><ol><li><p>排除tomcat 在spring-boot-starter-web中</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 排除 Spring Boot 默认的 Tomcat --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-tomcat&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">exclusions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div></li><li><p>导入 starter-undertow</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 添加 Undertow 作为 Web 服务器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-undertow&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div></li><li><p>配置 application.yml</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">48080</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  max-http-header-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">10MB</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 最大 HTTP 头大小，默认 8KB</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  undertow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    threads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # IO线程数量，这里设置为800。这些线程专门用于处理网络I/O操作，如读取和写入数据，提高了并发处理能力</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      worker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5000</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 默认值是IO线程数*8</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    buffer-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 设置Undertow使用的缓冲区大小，这里是1024字节（1KB）。缓冲区大小影响数据传输的效率，较大的缓冲区可以减少I/O操作的次数，但也会增加内存使用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    direct-buffers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 是否使用直接缓冲区，这里设置为true。直接缓冲区可以减少内存拷贝操作，提高性能，但需要更多的内存管理，因为它们不受垃圾回收的影响</span></span></code></pre></div></li></ol><h4 id="_3-3-2-升级优化前后的性能对比" tabindex="-1"><a class="header-anchor" href="#_3-3-2-升级优化前后的性能对比"><span>3.3.2 升级优化前后的性能对比</span></a></h4><p><strong>优化前</strong>：RT、TPS ，注意下图是没有配置<strong>NIO2</strong>优化的Tomcat。</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218152340445.png" alt="image-20250218152340445" tabindex="0" loading="lazy"><figcaption>image-20250218152340445</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218152513403.png" alt="image-20250218152513403" tabindex="0" loading="lazy"><figcaption>image-20250218152513403</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218152620075.png" alt="image-20250218152620075" tabindex="0" loading="lazy"><figcaption>image-20250218152620075</figcaption></figure><p><strong>调优后</strong>：RT、TPS</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218161952123.png" alt="image-20250218161952123" tabindex="0" loading="lazy"><figcaption>image-20250218161952123</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218162017567.png" alt="image-20250218162017567" tabindex="0" loading="lazy"><figcaption>image-20250218162017567</figcaption></figure><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20250218162036170.png" alt="image-20250218162036170" tabindex="0" loading="lazy"><figcaption>image-20250218162036170</figcaption></figure><p><strong>根据报告总结：</strong></p><ul><li>升级服务器后，RT更为平稳，TPS的增长趋势也趋于稳定。</li><li>在低负载情况下，接口通吐量不及Tomcat。</li><li>系统稳定性提升，如果只使用JSON接口且接口请求稳定性高，可考虑使用Undertow。</li></ul><p><strong>此外，还有一些优化点：</strong></p><ul><li>ARP-IO模型</li><li>Jetty容器</li><li>KeepAliveTimeout（默认）</li><li>MaxKeepAliveRequests</li></ul><p>这些优化方式可以根据实际情况进行选择，例如我们通过分析应用性能瓶颈，找到关键的优化点，以达到最佳的性能表现。虽然无法保证完全优化，但可以显著提升性能。</p><h2 id="_4-数据库调优" tabindex="-1"><a class="header-anchor" href="#_4-数据库调优"><span>4. 数据库调优</span></a></h2><h3 id="_4-1-为什么要数据库调优" tabindex="-1"><a class="header-anchor" href="#_4-1-为什么要数据库调优"><span>4.1 为什么要数据库调优？</span></a></h3><p>因为程序的响应时间，是受数据库读写操作影响的。</p><p>提升网站整体通吐量，优化用户体验数据库是关键性能之一。</p><p>总的来说，数据库调优是为了提高查询速度、节省资源、提升用户体验、降低成本、支持业务增长和解决性能瓶颈，确保数据库系统高效运行。</p><h3 id="_4-2-什么影响数据库性能" tabindex="-1"><a class="header-anchor" href="#_4-2-什么影响数据库性能"><span>4.2 什么影响数据库性能？</span></a></h3><ul><li><p><strong>硬件配置</strong></p><ul><li><strong>CPU</strong>：处理器的速度和核心数影响并发处理能力。</li><li><strong>内存（RAM）</strong>：更多的内存可以减少磁盘I/O，提升缓存命中率。</li><li><strong>存储设备</strong>：硬盘或SSD的性能（如IOPS、吞吐量）直接影响数据读取和写入速度。</li><li><strong>网络带宽</strong>：在分布式系统或客户端-服务器架构中，网络速度影响数据传输。</li></ul></li><li><p><strong>MySQL服务</strong></p><ul><li>数据库表结构【对性能影响最大】</li><li>低下效率的SQL语句</li><li>超大的表</li><li>大事务</li><li>数据库配置</li><li>数据库整体架构</li><li>.......</li></ul></li></ul><h3 id="_4-3-数据库调优到底调什么" tabindex="-1"><a class="header-anchor" href="#_4-3-数据库调优到底调什么"><span>4.3 数据库调优到底调什么？</span></a></h3><ul><li><strong>硬件优化</strong><ul><li>增加CPU</li><li>增加内存</li><li>.....</li></ul></li><li><strong>数据库设计优化</strong><ul><li>表结构优化</li><li>主键索引优化</li><li>外键</li><li>多表关系</li><li>.....</li></ul></li><li><strong>查询优化</strong><ul><li>避免全表扫描,通过合适的索引或查询重写减少全表扫描。</li><li>简化复杂查询,拆分复杂查询，减少子查询使用，避免笛卡尔积。</li><li>使用适当的连接方法,如INNER JOIN替代WHERE条件的连接。</li><li>....</li></ul></li><li><strong>数据库配置调整</strong><ul><li>最大连接数</li><li>连接超时</li><li>线程缓存</li><li>查询缓存</li><li>排序缓存</li><li>连接查询缓存</li><li>.......</li></ul></li></ul><p><strong>为什么使用索引就能加快查询速度呢？</strong></p><ul><li>索引就是事先排好顺序，从而在查询的时候可以使用二分法等高效率的算法查找</li><li>除了索引查找，就是一般顺序查找，这两者的差异是数量级的差异。</li><li>二分法查找的时间复杂度是O(logn)，而一般顺序查找的时间复杂度是O(n)。</li><li>索引的数据结构是B+树，是一种比二分法查找时间复杂度更好的数据结构。</li></ul><p>列举出来算法的时间复杂度有部分，可能感知不到差距。</p><p>假设表中有100w条数据，如果是根据id查找，一般顺序查找平均需要找50万条数据，对比50万次才能找到。如果采用索引二分法查找，最多不超过20次对比即可找到。</p><p>可以的看出，两种方式的执行效率相差2.5万倍.</p><h2 id="_5-openresty-调优" tabindex="-1"><a class="header-anchor" href="#_5-openresty-调优"><span>5. OpenResty 调优</span></a></h2><p><strong>OpenResty 简单介绍</strong></p><p><strong>官网</strong>：<a href="https://openresty.org/en/installation.html" target="_blank" rel="noopener noreferrer">https://openresty.org/en/installation.html</a></p><p><strong>OpenResty</strong> 是一个基于 Nginx 的 Web 平台，用于构建高效的 Web 应用程序,API 和网关。其内部集成了大量精良的 Lua 库、第三方 模块以及大多数的依赖项。</p><p><strong>OpenResty</strong> 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻 塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p><p><strong>关于Nginx 是什么？</strong></p><p>Nginx 是一个开源的高性能HTTP服务器和反向代理服务器，同时也能够作为IMAP/POP3代理服务器。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中 表现较好。</p><h3 id="_5-1-使用-docker-安装-openresty" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-docker-安装-openresty"><span>5.1 使用 Docker 安装 OpenResty</span></a></h3><p>拉取最新镜像:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> openresty/openresty:latest</span></span></code></pre></div><p>要特定的版本，比如固定版本1.19.9.1，可以这样拉取:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> openresty/openresty:1.19.9.1-4-alpine</span></span></code></pre></div><blockquote><p>alpine 标签表示基于Alpine Linux的镜像，通常体积较小。</p></blockquote><p>创建openresty需要挂载的目录文件：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/conf/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/luascript/</span></span></code></pre></div><p>启动容器并挂载目录：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8456:80</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">     openresty/openresty:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty:/usr/local/openresty/nginx/conf/nginx.conf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/conf/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty:/etc/nginx/conf.d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/conf/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty:/usr/local/openresty/nginx/logs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty:/usr/local/openresty/nginx/html</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8456:80</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/conf:/usr/local/openresty/nginx/conf/nginx.conf</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/conf/conf.d:/etc/nginx/conf.d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/logs:/usr/local/openresty/nginx/logs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /sg-work/openresty/nginx/html:/usr/local/openresty/nginx/html</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    openresty/openresty:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my-openresty</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 80:80</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 443:443</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8786:8786</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8987:8987</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /sg-work/openresty/nginx/conf:/usr/local/openresty/nginx/conf</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /sg-work/openresty/nginx/html:/usr/local/openresty/nginx/html</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /sg-work/openresty/nginx/logs:/usr/local/openresty/nginx/logs</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /sg-work/openresty/conf:/etc/nginx/conf.d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  /sg-work/openresty/luascript:/usr/local/openresty/luascript</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    openresty/openresty:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-缓存调优" tabindex="-1"><a class="header-anchor" href="#_6-缓存调优"><span>6. 缓存调优</span></a></h2><h2 id="_7-jvm调优" tabindex="-1"><a class="header-anchor" href="#_7-jvm调优"><span>7. JVM调优</span></a></h2>`,136)])])}const k=s(t,[["render",e]]),r=JSON.parse(`{"path":"/tutorials/projects/performance/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E5%92%8C%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%B0%83%E4%BC%98.html","title":"分布式压测和项目调优","lang":"zh-CN","frontmatter":{"title":"分布式压测和项目调优","subtitle":"分布式压测和项目调优","date":"2024-12-26T09:26:20.000Z","category":["项目性能优化"],"tag":["项目性能优化"],"order":4,"description":"本章介绍如何使用Docker 容器来搭建压力测试监控平台。 1. 分布式压测 在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。 为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。 单机网络带宽有限，高延时场景下，单机可模拟...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/tutorials/projects/performance/4.%E5%88%86%E5%B8%83%E5%BC%8F%E5%8E%8B%E5%92%8C%E9%A1%B9%E7%9B%AE%E6%B5%8B%E8%B0%83%E4%BC%98.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"分布式压测和项目调优"}],["meta",{"property":"og:description","content":"本章介绍如何使用Docker 容器来搭建压力测试监控平台。 1. 分布式压测 在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。 为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。 单机网络带宽有限，高延时场景下，单机可模拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-18T09:49:26.000Z"}],["meta",{"property":"article:tag","content":"项目性能优化"}],["meta",{"property":"article:published_time","content":"2024-12-26T09:26:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-18T09:49:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式压测和项目调优\\",\\"image\\":[\\"https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250117174511298.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250120155625524.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250121165615127.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250121171137564.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250208165241362.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250212103139395.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250212103935128.png\\",\\"https://beauties.eu.org/blogimg/main/img1/新旧IO比较.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-202502121031393951111.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250214094940158.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250214095046933.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218130541053.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250214104446889.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250214104623856.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250214104641451.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250214104823601.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218152340445.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218152513403.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218152620075.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218161952123.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218162017567.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20250218162036170.png\\"],\\"datePublished\\":\\"2024-12-26T09:26:20.000Z\\",\\"dateModified\\":\\"2025-08-18T09:49:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1. 分布式压测","slug":"_1-分布式压测","link":"#_1-分布式压测","children":[{"level":3,"title":"1.1 在 Window 系统中搭建部署 JMeter Master","slug":"_1-1-在-window-系统中搭建部署-jmeter-master","link":"#_1-1-在-window-系统中搭建部署-jmeter-master","children":[]},{"level":3,"title":"1.2 Linux 部署 JMeter Salve","slug":"_1-2-linux-部署-jmeter-salve","link":"#_1-2-linux-部署-jmeter-salve","children":[]},{"level":3,"title":"1.3  分布式环境配置","slug":"_1-3-分布式环境配置","link":"#_1-3-分布式环境配置","children":[]}]},{"level":2,"title":"3. 容器服务优化","slug":"_3-容器服务优化","link":"#_3-容器服务优化","children":[{"level":3,"title":"3.1 Tomcat容器调优","slug":"_3-1-tomcat容器调优","link":"#_3-1-tomcat容器调优","children":[]},{"level":3,"title":"3.2 网络IO模型调优","slug":"_3-2-网络io模型调优","link":"#_3-2-网络io模型调优","children":[]},{"level":3,"title":"3.3 内置Tomcat升级成Undertow","slug":"_3-3-内置tomcat升级成undertow","link":"#_3-3-内置tomcat升级成undertow","children":[]}]},{"level":2,"title":"4. 数据库调优","slug":"_4-数据库调优","link":"#_4-数据库调优","children":[{"level":3,"title":"4.1 为什么要数据库调优？","slug":"_4-1-为什么要数据库调优","link":"#_4-1-为什么要数据库调优","children":[]},{"level":3,"title":"4.2 什么影响数据库性能？","slug":"_4-2-什么影响数据库性能","link":"#_4-2-什么影响数据库性能","children":[]},{"level":3,"title":"4.3 数据库调优到底调什么？","slug":"_4-3-数据库调优到底调什么","link":"#_4-3-数据库调优到底调什么","children":[]}]},{"level":2,"title":"5. OpenResty 调优","slug":"_5-openresty-调优","link":"#_5-openresty-调优","children":[{"level":3,"title":"5.1 使用 Docker 安装 OpenResty","slug":"_5-1-使用-docker-安装-openresty","link":"#_5-1-使用-docker-安装-openresty","children":[]}]},{"level":2,"title":"6. 缓存调优","slug":"_6-缓存调优","link":"#_6-缓存调优","children":[]},{"level":2,"title":"7. JVM调优","slug":"_7-jvm调优","link":"#_7-jvm调优","children":[]}],"git":{"createdTime":1755510566000,"updatedTime":1755510566000,"contributors":[{"name":"Dell","username":"Dell","email":"1183895890@qq.com","commits":1,"url":"https://github.com/Dell"}]},"readingTime":{"minutes":16.48,"words":4943},"filePathRelative":"tutorials/projects/performance/4.分布式压和项目测调优.md","localizedDate":"2024年12月26日","excerpt":"<p>本章介绍如何使用Docker 容器来搭建压力测试监控平台。</p>\\n<h2>1. 分布式压测</h2>\\n<p>在使用 JMeter 进行大并发压力测试时，单台机器往往受限于内存、CPU 和网络 I/O，导致服务器压力未达到预期，但压测机的压力已经过大并发生崩溃。</p>\\n<p>为了解决这一问题，JMeter 提供了分布式压测功能，从而显著提升其负载能力。</p>\\n<p>单机网络带宽有限，高延时场景下，单机可模拟最大线程数有限。</p>\\n<p>下图是分布式压测架构：</p>\\n<figure><img src=\\"https://beauties.eu.org/blogimg/main/img1/分布式压测图.drawio.png\\" alt=\\"分布式压测图.drawio\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>分布式压测图.drawio</figcaption></figure>","autoDesc":true}`);export{k as comp,r as data};
