import{_ as e,e as p,o,c as t,b as s,g as n,f as i,h as a}from"./app-CQH77Pjo.js";const c={},r=a(`<blockquote><p>AbstractQueuedSynchronizer抽象类是核心，需要重点掌握。它提供了一个基于FIFO队列，可以用于构建锁或者其他相关同步装置的基础框架。</p></blockquote><ul><li>JUC 锁之核心类 AQS 详解 <ul><li><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">带着BAT大厂的面试问题去理解</a></li><li>AbstractQueuedSynchronizer简介 <ul><li><a href="#aqs-%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3">AQS 核心思想</a></li><li><a href="#aqs-%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%B9%E5%BC%8F">AQS 对资源的共享方式</a></li><li><a href="#aqs%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">AQS底层使用了模板方法模式</a></li></ul></li><li><a href="#abstractqueuedsynchronizer%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">AbstractQueuedSynchronizer数据结构</a></li><li>AbstractQueuedSynchronizer源码分析 <ul><li><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">类的继承关系</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---node%E7%B1%BB">类的内部类 - Node类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---conditionobject%E7%B1%BB">类的内部类 - ConditionObject类</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">类的属性</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">类的构造方法</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---acquire%E6%96%B9%E6%B3%95">类的核心方法 - acquire方法</a></li><li><a href="#%E7%B1%BB%E7%9A%84%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---release%E6%96%B9%E6%B3%95">类的核心方法 - release方法</a></li></ul></li><li><a href="#abstractqueuedsynchronizer%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%B8%80">AbstractQueuedSynchronizer示例详解一</a></li><li><a href="#abstractqueuedsynchronizer%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%BA%8C">AbstractQueuedSynchronizer示例详解二</a></li><li><a href="#abstractqueuedsynchronizer%E6%80%BB%E7%BB%93">AbstractQueuedSynchronizer总结</a></li><li><a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0">参考文章</a></li></ul></li></ul><h2 id="带着bat大厂的面试问题去理解" tabindex="-1"><a class="header-anchor" href="#带着bat大厂的面试问题去理解"><span><a href="#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3">#</a> 带着BAT大厂的面试问题去理解</span></a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>什么是AQS? 为什么它是核心?</li><li>AQS的核心思想是什么? 它是怎么实现的? 底层数据结构等</li><li>AQS有哪些核心的方法?</li><li>AQS定义什么样的资源获取方式? AQS定义了两种资源获取方式：<code>独占</code>(只有一个线程能访问执行，又根据是否按队列的顺序分为<code>公平锁</code>和<code>非公平锁</code>，如<code>ReentrantLock</code>) 和<code>共享</code>(多个线程可同时访问执行，如<code>Semaphore</code>、<code>CountDownLatch</code>、 <code>CyclicBarrier</code> )。<code>ReentrantReadWriteLock</code>可以看成是组合式，允许多个线程同时对某一资源进行读。</li><li>AQS底层使用了什么样的设计模式? 模板</li><li>AQS的应用示例?</li></ul><h2 id="abstractqueuedsynchronizer简介" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer简介"><span><a href="#abstractqueuedsynchronizer%E7%AE%80%E4%BB%8B">#</a> AbstractQueuedSynchronizer简介</span></a></h2><p>AQS是一个用来构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的ReentrantLock，Semaphore，其他的诸如ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的。当然，我们自己也能利用AQS非常轻松容易地构造出符合我们自己需求的同步器。</p><h3 id="aqs-核心思想" tabindex="-1"><a class="header-anchor" href="#aqs-核心思想"><span><a href="#aqs-%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3">#</a> AQS 核心思想</span></a></h3><p>AQS核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><blockquote><p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列(虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系)。AQS是将每条请求共享资源的线程封装成一个CLH锁队列的一个结点(Node)来实现锁的分配。</p></blockquote><p>AQS使用一个int成员变量来表示同步状态，通过内置的FIFO队列来完成获取资源线程的排队工作。AQS使用CAS对该同步状态进行原子操作实现对其值的修改。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//共享变量，使用volatile修饰保证线程可见性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>状态信息通过procted类型的getState，setState，compareAndSetState进行操作</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//返回同步状态的当前值</span></span>
<span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getState</span><span style="color:#E06C75;">() {  </span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 设置同步状态的值</span></span>
<span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setState</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> newState) { </span></span>
<span class="line"><span style="color:#E06C75;">        state </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//原子地(CAS操作)将同步状态值设置为给定值update如果当前同步状态的值等于expect(期望值)</span></span>
<span class="line"><span style="color:#C678DD;">protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> compareAndSetState</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> expect</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> update) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSwapInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, stateOffset, expect, update);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aqs-对资源的共享方式" tabindex="-1"><a class="header-anchor" href="#aqs-对资源的共享方式"><span><a href="#aqs-%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%B9%E5%BC%8F">#</a> AQS 对资源的共享方式</span></a></h3><p>AQS定义两种资源共享方式</p><ul><li>Exclusive(独占)：只有一个线程能执行，如ReentrantLock。又可分为公平锁和非公平锁： <ul><li>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁</li><li>非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的</li></ul></li><li>Share(共享)：多个线程可同时执行，如Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。</li></ul><p>ReentrantReadWriteLock 可以看成是组合式，因为ReentrantReadWriteLock也就是读写锁允许多个线程同时对某一资源进行读。</p><p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源 state 的获取与释放方式即可，至于具体线程等待队列的维护(如获取资源失败入队/唤醒出队等)，AQS已经在上层已经帮我们实现好了。</p><h3 id="aqs底层使用了模板方法模式" tabindex="-1"><a class="header-anchor" href="#aqs底层使用了模板方法模式"><span><a href="#aqs%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">#</a> AQS底层使用了模板方法模式</span></a></h3><blockquote><p>同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样(模板方法模式很经典的一个应用)：</p></blockquote><p>使用者继承AbstractQueuedSynchronizer并重写指定的方法。(这些重写方法很简单，无非是对于共享资源state的获取和释放) 将AQS组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</p><p>这和我们以往通过实现接口的方式有很大区别，模板方法模式请参看：<a href="">设计模式行为型 - 模板方法(Template Method)详解</a></p><p>AQS使用了模板方法模式，自定义同步器时需要重写下面几个AQS提供的模板方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#E06C75;">()</span><span style="color:#7F848E;font-style:italic;">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span>
<span class="line"><span style="color:#61AFEF;">tryAcquire</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span>
<span class="line"><span style="color:#61AFEF;">tryRelease</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span>
<span class="line"><span style="color:#61AFEF;">tryAcquireShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span>
<span class="line"><span style="color:#61AFEF;">tryReleaseShared</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;">)</span><span style="color:#7F848E;font-style:italic;">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，每个方法都抛出 UnsupportedOperationException。 这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS类中的其他方法都是final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。</p><p>以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0(即释放锁)为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的(state会累加)，这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p><h2 id="abstractqueuedsynchronizer数据结构" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer数据结构"><span><a href="#abstractqueuedsynchronizer%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> AbstractQueuedSynchronizer数据结构</span></a></h2><p>AbstractQueuedSynchronizer类底层的数据结构是使用<code>CLH(Craig,Landin,and Hagersten)队列</code>是一个虚拟的双向队列(虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系)。AQS是将每条请求共享资源的线程封装成一个CLH锁队列的一个结点(Node)来实现锁的分配。其中Sync queue，即同步队列，是双向链表，包括head结点和tail结点，head结点主要用作后续的调度。而Condition queue不是必须的，其是一个单向链表，只有当使用Condition时，才会存在此单向链表。并且可能会有多个Condition queue。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-1.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="abstractqueuedsynchronizer源码分析" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer源码分析"><span><a href="#abstractqueuedsynchronizer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">#</a> AbstractQueuedSynchronizer源码分析</span></a></h2><h3 id="类的继承关系" tabindex="-1"><a class="header-anchor" href="#类的继承关系"><span><a href="#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">#</a> 类的继承关系</span></a></h3><p>AbstractQueuedSynchronizer继承自AbstractOwnableSynchronizer抽象类，并且实现了Serializable接口，可以进行序列化。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AbstractOwnableSynchronizer</span><span style="color:#C678DD;"> implements</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中AbstractOwnableSynchronizer抽象类的源码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AbstractOwnableSynchronizer</span><span style="color:#C678DD;"> implements</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本序列号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 3737899427754241961L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造方法</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#61AFEF;"> AbstractOwnableSynchronizer</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 独占模式下的线程</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> Thread</span><span style="color:#E06C75;"> exclusiveOwnerThread</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置独占线程 </span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> setExclusiveOwnerThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;font-style:italic;"> thread</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        exclusiveOwnerThread </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> thread;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取独占线程 </span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Thread</span><span style="color:#61AFEF;"> getExclusiveOwnerThread</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> exclusiveOwnerThread;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AbstractOwnableSynchronizer抽象类中，可以设置独占资源线程和获取独占资源线程。分别为setExclusiveOwnerThread与getExclusiveOwnerThread方法，这两个方法会被子类调用。</p><blockquote><p>AbstractQueuedSynchronizer类有两个内部类，分别为Node类与ConditionObject类。下面分别做介绍。</p></blockquote><h3 id="类的内部类-node类" tabindex="-1"><a class="header-anchor" href="#类的内部类-node类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB-node%E7%B1%BB">#</a> 类的内部类 - Node类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 模式，分为共享与独占</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 共享模式</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> SHARED </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Node</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 独占模式</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> EXCLUSIVE </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 结点状态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // CANCELLED，值为1，表示当前的线程被取消</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // SIGNAL，值为-1，表示当前节点的后继节点包含的线程需要运行，也就是unpark</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // CONDITION，值为-2，表示当前节点在等待condition，也就是在condition队列中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // PROPAGATE，值为-3，表示当前场景下后续的acquireShared能够得以执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 值为0，表示当前节点在sync队列中，等待着获取锁</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> CANCELLED </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">  1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> SIGNAL    </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> CONDITION </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> PROPAGATE </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 结点状态</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> waitStatus</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 前驱结点</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 后继结点</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 结点所对应的线程</span></span>
<span class="line"><span style="color:#C678DD;">    volatile</span><span style="color:#E5C07B;"> Thread</span><span style="color:#E06C75;"> thread</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 下一个等待者</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> nextWaiter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 结点是否在共享模式下等待</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> isShared</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> nextWaiter </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> SHARED;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取前驱结点，若前驱结点为空，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#E5C07B;"> Node</span><span style="color:#61AFEF;"> predecessor</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> NullPointerException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存前驱结点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> prev; </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (p </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 前驱结点为空，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NullPointerException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#7F848E;font-style:italic;"> // 前驱结点不为空，返回</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 无参构造方法</span></span>
<span class="line"><span style="color:#61AFEF;">    Node</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {    </span><span style="color:#7F848E;font-style:italic;">// Used to establish initial head or SHARED marker</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造方法</span></span>
<span class="line"><span style="color:#61AFEF;">        Node</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;font-style:italic;"> thread</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;font-style:italic;"> mode</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {    </span><span style="color:#7F848E;font-style:italic;">// Used by addWaiter</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> mode;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> thread;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造方法</span></span>
<span class="line"><span style="color:#61AFEF;">    Node</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;font-style:italic;"> thread</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> waitStatus</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// Used by Condition</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> waitStatus;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> thread;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个线程被阻塞的线程都会被封装成一个Node结点，放入队列。每个节点包含了一个Thread类型的引用，并且每个节点都存在一个状态，具体状态如下。</p><ul><li><code>CANCELLED</code>，值为1，表示当前的线程被取消。</li><li><code>SIGNAL</code>，值为-1，表示当前节点的后继节点包含的线程需要运行，需要进行unpark操作。</li><li><code>CONDITION</code>，值为-2，表示当前节点在等待condition，也就是在condition queue中。</li><li><code>PROPAGATE</code>，值为-3，表示当前场景下后续的acquireShared能够得以执行。</li><li>值为0，表示当前节点在sync queue中，等待着获取锁。</li></ul><h3 id="类的内部类-conditionobject类" tabindex="-1"><a class="header-anchor" href="#类的内部类-conditionobject类"><span><a href="#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB-conditionobject%E7%B1%BB">#</a> 类的内部类 - ConditionObject类</span></a></h3><p>这个类有点长，耐心看下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 内部类</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ConditionObject</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Condition</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1173984872572414699L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** First node of condition queue. */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // condition队列的头节点</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> firstWaiter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** Last node of condition queue. */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // condition队列的尾结点</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> lastWaiter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Creates a new {@code ConditionObject} instance.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 构造方法</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> ConditionObject</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Internal methods</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Adds a new waiter to wait queue.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> its new wait node</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 添加新的waiter到wait队列</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Node</span><span style="color:#61AFEF;"> addConditionWaiter</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存尾结点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> lastWaiter;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // If lastWaiter is cancelled, clean out.</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (t </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> !=</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONDITION</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 尾结点不为空，并且尾结点的状态不为CONDITION</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 清除状态为CONDITION的结点</span></span>
<span class="line"><span style="color:#61AFEF;">            unlinkCancelledWaiters</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将最后一个结点重新赋值给t</span></span>
<span class="line"><span style="color:#ABB2BF;">            t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> lastWaiter;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 新建一个结点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Node</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONDITION</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (t </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 尾结点为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置condition队列的头节点</span></span>
<span class="line"><span style="color:#ABB2BF;">            firstWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#7F848E;font-style:italic;"> // 尾结点不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置为节点的nextWaiter域为node结点</span></span>
<span class="line"><span style="color:#E5C07B;">            t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 更新condition队列的尾结点</span></span>
<span class="line"><span style="color:#ABB2BF;">        lastWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> node;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Removes and transfers nodes until hit non-cancelled one or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * null. Split out from signal in part to encourage compilers</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * to inline the case of no waiters.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> first</span><span style="color:#7F848E;font-style:italic;"> (non-null) the first node on condition queue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doSignal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;font-style:italic;"> first</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 循环</span></span>
<span class="line"><span style="color:#C678DD;">        do</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> ( (firstWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 该节点的nextWaiter为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置尾结点为空</span></span>
<span class="line"><span style="color:#ABB2BF;">                lastWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置first结点的nextWaiter域</span></span>
<span class="line"><span style="color:#E5C07B;">            first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">transferForSignal</span><span style="color:#ABB2BF;">(first) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">                    (first </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> firstWaiter) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 将结点从condition队列转移到sync队列失败并且condition队列中的头节点不为空，一直循环</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Removes and transfers all nodes.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> first</span><span style="color:#7F848E;font-style:italic;"> (non-null) the first node on condition queue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doSignalAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;font-style:italic;"> first</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // condition队列的头节点尾结点都设置为空</span></span>
<span class="line"><span style="color:#ABB2BF;">        lastWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> firstWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 循环</span></span>
<span class="line"><span style="color:#C678DD;">        do</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取first结点的nextWaiter域结点</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#E06C75;"> next</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置first结点的nextWaiter域为空</span></span>
<span class="line"><span style="color:#E5C07B;">            first</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将first结点从condition队列转移到sync队列</span></span>
<span class="line"><span style="color:#61AFEF;">            transferForSignal</span><span style="color:#ABB2BF;">(first);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 重新设置first</span></span>
<span class="line"><span style="color:#ABB2BF;">            first </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> next;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (first </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Unlinks cancelled waiter nodes from condition queue.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Called only while holding lock. This is called when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * cancellation occurred during condition wait, and upon</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * insertion of a new waiter when lastWaiter is seen to have</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * been cancelled. This method is needed to avoid garbage</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * retention in the absence of signals. So even though it may</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * require a full traversal, it comes into play only when</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * timeouts or cancellations occur in the absence of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * signals. It traverses all nodes rather than stopping at a</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * particular target to unlink all pointers to garbage nodes</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * without requiring many re-traversals during cancellation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * storms.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 从condition队列中清除状态为CANCEL的结点</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> unlinkCancelledWaiters</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存condition队列头节点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstWaiter;</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> trail</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (t </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// t不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 下一个结点</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#E06C75;"> next</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> !=</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONDITION</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// t结点的状态不为CONDTION状态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置t节点的nextWaiter域为空</span></span>
<span class="line"><span style="color:#E5C07B;">                t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (trail </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// trail为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 重新设置condition队列的头节点</span></span>
<span class="line"><span style="color:#ABB2BF;">                    firstWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> next;</span></span>
<span class="line"><span style="color:#C678DD;">                else</span><span style="color:#7F848E;font-style:italic;"> // trail不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 设置trail结点的nextWaiter域为next结点</span></span>
<span class="line"><span style="color:#E5C07B;">                    trail</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> next;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (next </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// next结点为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 设置condition队列的尾结点</span></span>
<span class="line"><span style="color:#ABB2BF;">                    lastWaiter </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> trail;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#7F848E;font-style:italic;"> // t结点的状态为CONDTION状态</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置trail结点</span></span>
<span class="line"><span style="color:#ABB2BF;">                trail </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> t;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置t结点</span></span>
<span class="line"><span style="color:#ABB2BF;">            t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> next;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // public methods</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Moves the longest-waiting thread, if one exists, from the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * wait queue for this condition to the wait queue for the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * owning lock.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IllegalMonitorStateException</span><span style="color:#7F848E;font-style:italic;"> if {@link #isHeldExclusively}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         returns {@code false}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 唤醒一个等待线程。如果所有的线程都在等待此条件，则选择其中的一个唤醒。在从 await 返回之前，该线程必须重新获取锁。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> signal</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 不被当前线程独占，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存condition队列头节点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> first</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstWaiter;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (first </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 头节点不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 唤醒一个等待线程</span></span>
<span class="line"><span style="color:#61AFEF;">            doSignal</span><span style="color:#ABB2BF;">(first);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Moves all threads from the wait queue for this condition to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * the wait queue for the owning lock.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IllegalMonitorStateException</span><span style="color:#7F848E;font-style:italic;"> if {@link #isHeldExclusively}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         returns {@code false}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 唤醒所有等待线程。如果所有的线程都在等待此条件，则唤醒所有线程。在从 await 返回之前，每个线程都必须重新获取锁。</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> signalAll</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 不被当前线程独占，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存condition队列头节点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> first</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstWaiter;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (first </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 头节点不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 唤醒所有等待线程</span></span>
<span class="line"><span style="color:#61AFEF;">            doSignalAll</span><span style="color:#ABB2BF;">(first);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements uninterruptible condition wait.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Save lock state returned by {@link #getState}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Invoke {@link #release} with saved state as argument,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      throwing IllegalMonitorStateException if it fails.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Block until signalled.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Reacquire by invoking specialized version of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      {@link #acquire} with saved state as argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号之前一直处于等待状态，不响应中断</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> awaitUninterruptibly</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 添加一个结点到等待队列</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> addConditionWaiter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取释放的状态</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> savedState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fullyRelease</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">        boolean</span><span style="color:#E06C75;"> interrupted</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOnSyncQueue</span><span style="color:#ABB2BF;">(node)) { </span><span style="color:#7F848E;font-style:italic;">// </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 阻塞当前线程</span></span>
<span class="line"><span style="color:#E5C07B;">            LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">park</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 当前线程被中断</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置interrupted状态</span></span>
<span class="line"><span style="color:#ABB2BF;">                interrupted </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">acquireQueued</span><span style="color:#ABB2BF;">(node, savedState) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> interrupted) </span><span style="color:#7F848E;font-style:italic;">// </span></span>
<span class="line"><span style="color:#61AFEF;">            selfInterrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * For interruptible waits, we need to track whether to throw</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * InterruptedException, if interrupted while blocked on</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * condition, versus reinterrupt current thread, if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * interrupted while blocked waiting to re-acquire.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** Mode meaning to reinterrupt on exit from wait */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> REINTERRUPT </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">  1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** Mode meaning to throw InterruptedException on exit from wait */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> THROW_IE    </span><span style="color:#56B6C2;">=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Checks for interrupt, returning THROW_IE if interrupted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * before signalled, REINTERRUPT if after signalled, or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * 0 if not interrupted.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> checkInterruptWhileWaiting</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;font-style:italic;"> node</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">?</span></span>
<span class="line"><span style="color:#ABB2BF;">            (</span><span style="color:#61AFEF;">transferAfterCancelledWait</span><span style="color:#ABB2BF;">(node) </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> THROW_IE </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> REINTERRUPT) </span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#D19A66;">            0</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Throws InterruptedException, reinterrupts current thread, or</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * does nothing, depending on mode.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> reportInterruptAfterWait</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> interruptMode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (interruptMode </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> THROW_IE)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (interruptMode </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> REINTERRUPT)</span></span>
<span class="line"><span style="color:#61AFEF;">            selfInterrupt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements interruptible condition wait.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If current thread is interrupted, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Save lock state returned by {@link #getState}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Invoke {@link #release} with saved state as argument,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      throwing IllegalMonitorStateException if it fails.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Block until signalled or interrupted.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Reacquire by invoking specialized version of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      {@link #acquire} with saved state as argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If interrupted while blocked in step 4, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // // 等待，当前线程在接到信号或被中断之前一直处于等待状态</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> await</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 当前线程被中断，抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在wait队列上添加一个结点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> addConditionWaiter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // </span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> savedState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fullyRelease</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> interruptMode</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOnSyncQueue</span><span style="color:#ABB2BF;">(node)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 阻塞当前线程</span></span>
<span class="line"><span style="color:#E5C07B;">            LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">park</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> ((interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> checkInterruptWhileWaiting</span><span style="color:#ABB2BF;">(node)) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 检查结点等待时的中断类型</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">acquireQueued</span><span style="color:#ABB2BF;">(node, savedState) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> THROW_IE)</span></span>
<span class="line"><span style="color:#ABB2BF;">            interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> REINTERRUPT;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// clean up if cancelled</span></span>
<span class="line"><span style="color:#61AFEF;">            unlinkCancelledWaiters</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            reportInterruptAfterWait</span><span style="color:#ABB2BF;">(interruptMode);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements timed condition wait.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If current thread is interrupted, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Save lock state returned by {@link #getState}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Invoke {@link #release} with saved state as argument,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      throwing IllegalMonitorStateException if it fails.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Block until signalled, interrupted, or timed out.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Reacquire by invoking specialized version of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      {@link #acquire} with saved state as argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If interrupted while blocked in step 4, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态 </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> awaitNanos</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> nanosTimeout</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> addConditionWaiter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> savedState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fullyRelease</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> deadline</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> nanosTimeout;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> interruptMode</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOnSyncQueue</span><span style="color:#ABB2BF;">(node)) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nanosTimeout </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                transferAfterCancelledWait</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nanosTimeout </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> spinForTimeoutThreshold)</span></span>
<span class="line"><span style="color:#E5C07B;">                LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parkNanos</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, nanosTimeout);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> ((interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> checkInterruptWhileWaiting</span><span style="color:#ABB2BF;">(node)) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            nanosTimeout </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> deadline </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">acquireQueued</span><span style="color:#ABB2BF;">(node, savedState) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> THROW_IE)</span></span>
<span class="line"><span style="color:#ABB2BF;">            interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> REINTERRUPT;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            unlinkCancelledWaiters</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            reportInterruptAfterWait</span><span style="color:#ABB2BF;">(interruptMode);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> deadline </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements absolute timed condition wait.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If current thread is interrupted, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Save lock state returned by {@link #getState}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Invoke {@link #release} with saved state as argument,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      throwing IllegalMonitorStateException if it fails.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Block until signalled, interrupted, or timed out.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Reacquire by invoking specialized version of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      {@link #acquire} with saved state as argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If interrupted while blocked in step 4, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If timed out while blocked in step 4, return false, else true.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> awaitUntil</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Date</span><span style="color:#E06C75;font-style:italic;"> deadline</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> abstime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> deadline</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> addConditionWaiter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> savedState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fullyRelease</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">        boolean</span><span style="color:#E06C75;"> timedout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> interruptMode</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOnSyncQueue</span><span style="color:#ABB2BF;">(node)) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> abstime) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                timedout </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> transferAfterCancelledWait</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parkUntil</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, abstime);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> ((interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> checkInterruptWhileWaiting</span><span style="color:#ABB2BF;">(node)) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">acquireQueued</span><span style="color:#ABB2BF;">(node, savedState) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> THROW_IE)</span></span>
<span class="line"><span style="color:#ABB2BF;">            interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> REINTERRUPT;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            unlinkCancelledWaiters</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            reportInterruptAfterWait</span><span style="color:#ABB2BF;">(interruptMode);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">timedout;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements timed condition wait.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If current thread is interrupted, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Save lock state returned by {@link #getState}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Invoke {@link #release} with saved state as argument,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      throwing IllegalMonitorStateException if it fails.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Block until signalled, interrupted, or timed out.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; Reacquire by invoking specialized version of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *      {@link #acquire} with saved state as argument.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If interrupted while blocked in step 4, throw InterruptedException.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;li&gt; If timed out while blocked in step 4, return false, else true.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。此方法在行为上等效于: awaitNanos(unit.toNanos(time)) &gt; 0</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> await</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> time</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#E06C75;font-style:italic;"> unit</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> nanosTimeout</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unit</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toNanos</span><span style="color:#ABB2BF;">(time);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> InterruptedException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> addConditionWaiter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> savedState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fullyRelease</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> deadline</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> nanosTimeout;</span></span>
<span class="line"><span style="color:#C678DD;">        boolean</span><span style="color:#E06C75;"> timedout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> interruptMode</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOnSyncQueue</span><span style="color:#ABB2BF;">(node)) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nanosTimeout </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                timedout </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> transferAfterCancelledWait</span><span style="color:#ABB2BF;">(node);</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (nanosTimeout </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> spinForTimeoutThreshold)</span></span>
<span class="line"><span style="color:#E5C07B;">                LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parkNanos</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, nanosTimeout);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> ((interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> checkInterruptWhileWaiting</span><span style="color:#ABB2BF;">(node)) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            nanosTimeout </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> deadline </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">acquireQueued</span><span style="color:#ABB2BF;">(node, savedState) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> THROW_IE)</span></span>
<span class="line"><span style="color:#ABB2BF;">            interruptMode </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> REINTERRUPT;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            unlinkCancelledWaiters</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (interruptMode </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">            reportInterruptAfterWait</span><span style="color:#ABB2BF;">(interruptMode);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">timedout;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //  support for instrumentation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Returns true if this condition was created by the given</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * synchronization object.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if owned</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#C678DD;">    final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> isOwnedBy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AbstractQueuedSynchronizer</span><span style="color:#E06C75;font-style:italic;"> sync</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> sync </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Queries whether any threads are waiting on this condition.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements {</span><span style="color:#C678DD;font-style:italic;">@link</span><span style="color:#E5C07B;font-style:italic;"> AbstractQueuedSynchronizer</span><span style="color:#7F848E;font-style:italic;">#</span><span style="color:#E06C75;font-style:italic;">hasWaiters(ConditionObject)</span><span style="color:#7F848E;font-style:italic;">}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if there are any waiting threads</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IllegalMonitorStateException</span><span style="color:#7F848E;font-style:italic;"> if {@link #isHeldExclusively}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         returns {@code false}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //  查询是否有正在等待此条件的任何线程</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> hasWaiters</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> w</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstWaiter; w </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; w </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONDITION</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Returns an estimate of the number of threads waiting on</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * this condition.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements {</span><span style="color:#C678DD;font-style:italic;">@link</span><span style="color:#E5C07B;font-style:italic;"> AbstractQueuedSynchronizer</span><span style="color:#7F848E;font-style:italic;">#</span><span style="color:#E06C75;font-style:italic;">getWaitQueueLength(ConditionObject)</span><span style="color:#7F848E;font-style:italic;">}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the estimated number of waiting threads</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IllegalMonitorStateException</span><span style="color:#7F848E;font-style:italic;"> if {@link #isHeldExclusively}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         returns {@code false}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回正在等待此条件的线程数估计值</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> getWaitQueueLength</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> w</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstWaiter; w </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; w </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONDITION</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                ++n;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Returns a collection containing those threads that may be</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * waiting on this Condition.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Implements {</span><span style="color:#C678DD;font-style:italic;">@link</span><span style="color:#E5C07B;font-style:italic;"> AbstractQueuedSynchronizer</span><span style="color:#7F848E;font-style:italic;">#</span><span style="color:#E06C75;font-style:italic;">getWaitingThreads(ConditionObject)</span><span style="color:#7F848E;font-style:italic;">}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the collection of threads</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IllegalMonitorStateException</span><span style="color:#7F848E;font-style:italic;"> if {@link #isHeldExclusively}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        *         returns {@code false}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回包含那些可能正在等待此条件的线程集合</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Collection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> getWaitingThreads</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isHeldExclusively</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IllegalMonitorStateException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">list</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> w</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> firstWaiter; w </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; w </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nextWaiter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONDITION</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                Thread</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (t </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                    list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(t);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> list;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此类实现了Condition接口，Condition接口定义了条件操作规范，具体如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Condition</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号或被中断之前一直处于等待状态</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> await</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号之前一直处于等待状态，不响应中断</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> awaitUninterruptibly</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //等待，当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态 </span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#61AFEF;"> awaitNanos</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> nanosTimeout</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。此方法在行为上等效于: awaitNanos(unit.toNanos(time)) &gt; 0</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#61AFEF;"> await</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;font-style:italic;"> time</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#E06C75;font-style:italic;"> unit</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待，当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#61AFEF;"> awaitUntil</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Date</span><span style="color:#E06C75;font-style:italic;"> deadline</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 唤醒一个等待线程。如果所有的线程都在等待此条件，则选择其中的一个唤醒。在从 await 返回之前，该线程必须重新获取锁。</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> signal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 唤醒所有等待线程。如果所有的线程都在等待此条件，则唤醒所有线程。在从 await 返回之前，每个线程都必须重新获取锁。</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> signalAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Condition接口中定义了await、signal方法，用来等待条件、释放条件。之后会详细分析CondtionObject的源码。</p><h3 id="类的属性" tabindex="-1"><a class="header-anchor" href="#类的属性"><span><a href="#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7">#</a> 类的属性</span></a></h3><p>属性中包含了头节点head，尾结点tail，状态state、自旋时间spinForTimeoutThreshold，还有AbstractQueuedSynchronizer抽象的属性在内存中的偏移地址，通过该偏移地址，可以获取和设置该属性的值，同时还包括一个静态初始化块，用于加载内存偏移地址。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> abstract</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AbstractOwnableSynchronizer</span></span>
<span class="line"><span style="color:#C678DD;">    implements</span><span style="color:#E06C75;"> java.io.</span><span style="color:#E5C07B;">Serializable</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 版本号</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> serialVersionUID </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 7373984972572414691L</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 头节点</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 尾结点</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> transient</span><span style="color:#C678DD;"> volatile</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> tail</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 状态</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 自旋时间</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> spinForTimeoutThreshold </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1000L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Unsafe类实例</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Unsafe</span><span style="color:#E06C75;"> unsafe </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUnsafe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // state内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> stateOffset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // head内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> headOffset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // state内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> tailOffset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // tail内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> waitStatusOffset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // next内存偏移地址</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> nextOffset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 静态初始化块</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            stateOffset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;state&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            headOffset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;head&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            tailOffset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">AbstractQueuedSynchronizer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tail&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            waitStatusOffset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;waitStatus&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            nextOffset </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> unsafe</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">objectFieldOffset</span></span>
<span class="line"><span style="color:#E06C75;">                (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaredField</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;next&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#E06C75;">) { </span><span style="color:#C678DD;">throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#E06C75;">(ex)</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的构造方法" tabindex="-1"><a class="header-anchor" href="#类的构造方法"><span><a href="#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">#</a> 类的构造方法</span></a></h3><p>此类构造方法为从抽象构造方法，供子类调用。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">protected</span><span style="color:#61AFEF;"> AbstractQueuedSynchronizer</span><span style="color:#E06C75;">() { }    </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类的核心方法-acquire方法" tabindex="-1"><a class="header-anchor" href="#类的核心方法-acquire方法"><span><a href="#%E7%B1%BB%E7%9A%84%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-acquire%E6%96%B9%E6%B3%95">#</a> 类的核心方法 - acquire方法</span></a></h3><p>该方法以独占模式获取(资源)，忽略中断，即线程在aquire过程中，中断此线程是无效的。源码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> acquire</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> arg) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">tryAcquire</span><span style="color:#E06C75;">(arg) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> acquireQueued</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">addWaiter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">EXCLUSIVE</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> arg))</span></span>
<span class="line"><span style="color:#61AFEF;">        selfInterrupt</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上述源码可以知道，当一个线程调用acquire时，调用方法流程如下</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-2.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><ul><li>首先调用tryAcquire方法，调用此方法的线程会试图在独占模式下获取对象状态。此方法应该查询是否允许它在独占模式下获取对象状态，如果允许，则获取它。在AbstractQueuedSynchronizer源码中默认会抛出一个异常，即需要子类去重写此方法完成自己的逻辑。之后会进行分析。</li><li>若tryAcquire失败，则调用addWaiter方法，addWaiter方法完成的功能是将调用此方法的线程封装成为一个结点并放入Sync queue。</li><li>调用acquireQueued方法，此方法完成的功能是Sync queue中的结点不断尝试获取资源，若成功，则返回true，否则，返回false。</li><li>由于tryAcquire默认实现是抛出异常，所以此时，不进行分析，之后会结合一个例子进行分析。</li></ul><p>首先分析addWaiter方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 添加等待者</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> Node</span><span style="color:#61AFEF;"> addWaiter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> mode) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 新生成一个结点，默认为独占模式</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> node </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Node</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">(),</span><span style="color:#E06C75;"> mode)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Try the fast path of enq; backup to full enq on failure</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 保存尾结点</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> pred </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tail</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (pred </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 尾结点不为空，即已经被初始化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 将node结点的prev域连接到尾结点</span></span>
<span class="line"><span style="color:#E5C07B;">        node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pred</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">compareAndSetTail</span><span style="color:#E06C75;">(pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> node)) { </span><span style="color:#7F848E;font-style:italic;">// 比较pred是否为尾结点，是则将尾结点设置为node </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 设置尾结点的next域为node</span></span>
<span class="line"><span style="color:#E5C07B;">            pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 返回新生成的结点</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    enq</span><span style="color:#E06C75;">(node)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 尾结点为空(即还没有被初始化过)，或者是compareAndSetTail操作失败，则入队列</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>addWaiter方法使用快速添加的方式往sync queue尾部添加结点，如果sync queue队列还没有初始化，则会使用enq插入队列中，enq方法源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#E5C07B;"> Node</span><span style="color:#61AFEF;"> enq</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> node) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环，确保结点能够成功入队列</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存尾结点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tail</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (t </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 尾结点为空，即还没被初始化</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">compareAndSetHead</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Node</span><span style="color:#E06C75;">())) </span><span style="color:#7F848E;font-style:italic;">// 头节点为空，并设置头节点为新生成的结点</span></span>
<span class="line"><span style="color:#E06C75;">                tail </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 头节点与尾结点都指向同一个新生结点</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 尾结点不为空，即已经被初始化过</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将node结点的prev域连接到尾结点</span></span>
<span class="line"><span style="color:#E5C07B;">            node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">compareAndSetTail</span><span style="color:#E06C75;">(t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> node)) { </span><span style="color:#7F848E;font-style:italic;">// 比较结点t是否为尾结点，若是则将尾结点设置为node</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 设置尾结点的next域为node</span></span>
<span class="line"><span style="color:#E5C07B;">                t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 返回尾结点</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>enq方法会使用无限循环来确保节点的成功插入。</p><p>现在，分析acquireQueue方法。其源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// sync队列中的结点在独占且忽略中断的模式下获取(资源)</span></span>
<span class="line"><span style="color:#C678DD;">final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> acquireQueued</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> arg) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 标志</span></span>
<span class="line"><span style="color:#C678DD;">    boolean</span><span style="color:#E06C75;"> failed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 中断标志</span></span>
<span class="line"><span style="color:#C678DD;">        boolean</span><span style="color:#E06C75;"> interrupted </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#ABB2BF;">;;</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 无限循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取node节点的前驱结点</span></span>
<span class="line"><span style="color:#C678DD;">            final</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">predecessor</span><span style="color:#ABB2BF;">();</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (p </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> head </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> tryAcquire</span><span style="color:#E06C75;">(arg)) { </span><span style="color:#7F848E;font-style:italic;">// 前驱为头节点并且成功获得锁</span></span>
<span class="line"><span style="color:#61AFEF;">                setHead</span><span style="color:#E06C75;">(node)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 设置头节点</span></span>
<span class="line"><span style="color:#E5C07B;">                p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // help GC</span></span>
<span class="line"><span style="color:#E06C75;">                failed </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 设置标志</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> interrupted</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">shouldParkAfterFailedAcquire</span><span style="color:#E06C75;">(p</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> node) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#61AFEF;">                parkAndCheckInterrupt</span><span style="color:#E06C75;">())</span></span>
<span class="line"><span style="color:#E06C75;">                interrupted </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (failed)</span></span>
<span class="line"><span style="color:#61AFEF;">            cancelAcquire</span><span style="color:#E06C75;">(node)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先获取当前节点的前驱节点，如果前驱节点是头节点并且能够获取(资源)，代表该当前节点能够占有锁，设置头节点为当前节点，返回。否则，调用shouldParkAfterFailedAcquire和parkAndCheckInterrupt方法，首先，我们看shouldParkAfterFailedAcquire方法，代码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 当获取(资源)失败后，检查并且更新结点状态</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> shouldParkAfterFailedAcquire</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#E06C75;"> node) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取前驱结点的状态</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> ws </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 状态为SIGNAL，为-1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * This node has already set status asking a release</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * to signal it, so it can safely park.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 可以进行park操作</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 表示状态为CANCELLED，为1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * Predecessor was cancelled. Skip over predecessors and</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * indicate retry.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            */</span></span>
<span class="line"><span style="color:#C678DD;">        do</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pred </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 找到pred结点前面最近的一个状态不为CANCELLED的结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 赋值pred结点的next域</span></span>
<span class="line"><span style="color:#E5C07B;">        pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// 为PROPAGATE -3 或者是0 表示无状态,(为CONDITION -2时，表示此节点在condition queue中) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * need a signal, but don&#39;t park yet.  Caller will need to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            * retry to make sure it cannot acquire before parking.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 比较并设置前驱结点的状态为SIGNAL</span></span>
<span class="line"><span style="color:#61AFEF;">        compareAndSetWaitStatus</span><span style="color:#E06C75;">(pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ws</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不能进行park操作</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当该节点的前驱结点的状态为SIGNAL时，才可以对该结点所封装的线程进行park操作。否则，将不能进行park操作。再看parkAndCheckInterrupt方法，源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 进行park操作并且返回该线程是否被中断</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> parkAndCheckInterrupt</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在许可可用之前禁用当前线程，并且设置了blocker</span></span>
<span class="line"><span style="color:#E5C07B;">    LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">park</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">interrupted</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 当前线程是否已被中断，并清除中断标记位</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>parkAndCheckInterrupt方法里的逻辑是首先执行park操作，即禁用当前线程，然后返回该线程是否已经被中断。再看final块中的cancelAcquire方法，其源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 取消继续获取(资源)</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> cancelAcquire</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> node) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Ignore if node doesn&#39;t exist</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // node为空，返回</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (node </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置node结点的thread为空</span></span>
<span class="line"><span style="color:#E5C07B;">    node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Skip cancelled predecessors</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 保存node的前驱结点</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> pred </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 找到node前驱结点中第一个状态小于0的结点，即不为CANCELLED状态的结点</span></span>
<span class="line"><span style="color:#E5C07B;">        node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pred </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // predNext is the apparent node to unsplice. CASes below will</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // fail if not, in which case, we lost race vs another cancel</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // or signal, so no further action is necessary.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取pred结点的下一个结点</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> predNext </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Can use unconditional write instead of CAS here.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // After this atomic step, other Nodes can skip past us.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Before, we are free of interference from other threads.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 设置node结点的状态为CANCELLED</span></span>
<span class="line"><span style="color:#E5C07B;">    node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CANCELLED</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // If we are the tail, remove ourselves.</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (node </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> tail </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#61AFEF;"> compareAndSetTail</span><span style="color:#E06C75;">(node</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> pred)) { </span><span style="color:#7F848E;font-style:italic;">// node结点为尾结点，则设置尾结点为pred结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 比较并设置pred结点的next节点为null</span></span>
<span class="line"><span style="color:#61AFEF;">        compareAndSetNext</span><span style="color:#E06C75;">(pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> predNext</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> { </span><span style="color:#7F848E;font-style:italic;">// node结点不为尾结点，或者比较设置不成功</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // If successor needs signal, try to set pred&#39;s next-link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // so it will get one. Otherwise wake it up to propagate.</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> ws</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (pred </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> head </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">            ((ws </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#E06C75;">) </span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">                (ws </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> compareAndSetWaitStatus</span><span style="color:#E06C75;">(pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ws</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SIGNAL</span><span style="color:#E06C75;">))) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">            pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// (pred结点不为头节点，并且pred结点的状态为SIGNAL)或者 </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                                // pred结点状态小于等于0，并且比较并设置等待状态为SIGNAL成功，并且pred结点所封装的线程不为空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 保存结点的后继</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (next </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> next</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 后继不为空并且后继的状态小于等于0</span></span>
<span class="line"><span style="color:#61AFEF;">                compareAndSetNext</span><span style="color:#E06C75;">(pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> predNext</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> next)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 比较并设置pred.next = next;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            unparkSuccessor</span><span style="color:#E06C75;">(node)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 释放node的前一个结点</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // help GC</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法完成的功能就是取消当前线程对资源的获取，即设置该结点的状态为CANCELLED，接着我们再看unparkSuccessor方法，源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 释放后继结点</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> unparkSuccessor</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> node) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * If status is negative (i.e., possibly needing signal) try</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * to clear in anticipation of signalling.  It is OK if this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * fails or if status is changed by waiting thread.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取node结点的等待状态</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> ws </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (ws </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 状态值小于0，为SIGNAL -1 或 CONDITION -2 或 PROPAGATE -3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 比较并且设置结点等待状态，设置为0</span></span>
<span class="line"><span style="color:#61AFEF;">        compareAndSetWaitStatus</span><span style="color:#E06C75;">(node</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> ws</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * Thread to unpark is held in successor, which is normally</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * just the next node.  But if cancelled or apparently null,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * traverse backwards from tail to find the actual</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        * non-cancelled successor.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取node节点的下一个结点</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 下一个结点为空或者下一个节点的等待状态大于0，即为CANCELLED</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // s赋值为空</span></span>
<span class="line"><span style="color:#E06C75;">        s </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 从尾结点开始从后往前开始遍历</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tail</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> t </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 找到等待状态小于等于0的结点，找到最前的状态小于等于0的结点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 保存结点</span></span>
<span class="line"><span style="color:#E06C75;">                s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (s </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 该结点不为为空，释放许可</span></span>
<span class="line"><span style="color:#E5C07B;">        LockSupport</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unpark</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thread</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的作用就是为了释放node节点的后继结点。</p><p>对于cancelAcquire与unparkSuccessor方法，如下示意图可以清晰的表示:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-3.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>其中node为参数，在执行完cancelAcquire方法后的效果就是unpark了s结点所包含的t4线程。</p><p>现在，再来看acquireQueued方法的整个的逻辑。逻辑如下:</p><ul><li>判断结点的前驱是否为head并且是否成功获取(资源)。</li><li>若步骤1均满足，则设置结点为head，之后会判断是否finally模块，然后返回。</li><li>若步骤2不满足，则判断是否需要park当前线程，是否需要park当前线程的逻辑是判断结点的前驱结点的状态是否为SIGNAL，若是，则park当前结点，否则，不进行park操作。</li><li>若park了当前线程，之后某个线程对本线程unpark后，并且本线程也获得机会运行。那么，将会继续进行步骤①的判断。</li></ul><h3 id="类的核心方法-release方法" tabindex="-1"><a class="header-anchor" href="#类的核心方法-release方法"><span><a href="#%E7%B1%BB%E7%9A%84%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95-release%E6%96%B9%E6%B3%95">#</a> 类的核心方法 - release方法</span></a></h3><p>以独占模式释放对象，其源码如下:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> release</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> arg) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">tryRelease</span><span style="color:#E06C75;">(arg)) { </span><span style="color:#7F848E;font-style:italic;">// 释放成功</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 保存头节点</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#E06C75;"> h </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (h </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> h</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">waitStatus</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">) </span><span style="color:#7F848E;font-style:italic;">// 头节点不为空并且头节点状态不为0</span></span>
<span class="line"><span style="color:#61AFEF;">            unparkSuccessor</span><span style="color:#E06C75;">(h)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> //释放头节点的后继结点</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，tryRelease的默认实现是抛出异常，需要具体的子类实现，如果tryRelease成功，那么如果头节点不为空并且头节点的状态不为0，则释放头节点的后继结点，unparkSuccessor方法已经分析过，不再累赘。</p><p>对于其他方法我们也可以分析，与前面分析的方法大同小异，所以，不再累赘。</p><h2 id="abstractqueuedsynchronizer示例详解一" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer示例详解一"><span><a href="#abstractqueuedsynchronizer%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%B8%80">#</a> AbstractQueuedSynchronizer示例详解一</span></a></h2><p>借助下面示例来分析AbstractQueuedSyncrhonizer内部的工作机制。示例源码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.locks.Lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.locks.ReentrantLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Lock</span><span style="color:#E06C75;"> lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Lock</span><span style="color:#E06C75;font-style:italic;"> lock</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lock</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> lock;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;"> ()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; running&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AbstractQueuedSynchronizerDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Lock</span><span style="color:#E06C75;"> lock</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#E5C07B;">        MyThread</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t1&quot;</span><span style="color:#ABB2BF;">, lock);</span></span>
<span class="line"><span style="color:#E5C07B;">        MyThread</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;t2&quot;</span><span style="color:#ABB2BF;">, lock);</span></span>
<span class="line"><span style="color:#E5C07B;">        t1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        t2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();    </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果(可能的一种):</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">Thread[t1,5,main] running</span></span>
<span class="line"><span style="color:#ABB2BF;">Thread[t2,5,main] running</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果分析: 从示例可知，线程t1与t2共用了一把锁，即同一个lock。可能会存在如下一种时序。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-4.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 首先线程t1先执行lock.lock操作，然后t2执行lock.lock操作，然后t1执行lock.unlock操作，最后t2执行lock.unlock操作。基于这样的时序，分析AbstractQueuedSynchronizer内部的工作机制。</p><ul><li>t1线程调用lock.lock方法，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-5.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 其中，前面的部分表示哪个类，后面是具体的类中的哪个方法，AQS表示AbstractQueuedSynchronizer类，AOS表示AbstractOwnableSynchronizer类。</p><ul><li>t2线程调用lock.lock方法，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-6.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 经过一系列的方法调用，最后达到的状态是禁用t2线程，因为调用了LockSupport.park。</p><ul><li>t1线程调用lock.unlock，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-7.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: t1线程中调用lock.unlock后，经过一系列的调用，最终的状态是释放了许可，因为调用了LockSupport.unpark。这时，t2线程就可以继续运行了。此时，会继续恢复t2线程运行环境，继续执行LockSupport.park后面的语句，即进一步调用如下。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-8.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 在上一步调用了LockSupport.unpark后，t2线程恢复运行，则运行parkAndCheckInterrupt，之后，继续运行acquireQueued方法，最后达到的状态是头节点head与尾结点tail均指向了t2线程所在的结点，并且之前的头节点已经从sync队列中断开了。</p><ul><li>t2线程调用lock.unlock，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-9.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: t2线程执行lock.unlock后，最终达到的状态还是与之前的状态一样。</p><h2 id="abstractqueuedsynchronizer示例详解二" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer示例详解二"><span><a href="#abstractqueuedsynchronizer%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%BA%8C">#</a> AbstractQueuedSynchronizer示例详解二</span></a></h2><p>下面我们结合Condition实现生产者与消费者，来进一步分析AbstractQueuedSynchronizer的内部工作机制。</p><ul><li>Depot(仓库)类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.locks.Condition</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.locks.Lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.util.concurrent.locks.ReentrantLock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Depot</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> capacity</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Lock</span><span style="color:#E06C75;"> lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Condition</span><span style="color:#E06C75;"> fullCondition</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Condition</span><span style="color:#E06C75;"> emptyCondition</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> Depot</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> capacity</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">capacity</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> capacity;    </span></span>
<span class="line"><span style="color:#ABB2BF;">        lock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        fullCondition </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCondition</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        emptyCondition </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCondition</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> produce</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> no</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> left</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> no;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (left </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                while</span><span style="color:#ABB2BF;"> (size </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> capacity)  {</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; before await&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                    fullCondition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; after await&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> inc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (left </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> size) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> capacity </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> (capacity </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> size) </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> left;</span></span>
<span class="line"><span style="color:#ABB2BF;">                left </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> inc;</span></span>
<span class="line"><span style="color:#ABB2BF;">                size </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> inc;</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;produce = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> inc </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;, size = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> size);</span></span>
<span class="line"><span style="color:#E5C07B;">                emptyCondition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">signal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> consume</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> no</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> left</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> no;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {            </span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (left </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                while</span><span style="color:#ABB2BF;"> (size </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; before await&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                    emptyCondition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; after await&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                int</span><span style="color:#E06C75;"> dec</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (size </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> left) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> left </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">                left </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> dec;</span></span>
<span class="line"><span style="color:#ABB2BF;">                size </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> dec;</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;consume = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> dec </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;, size = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> size);</span></span>
<span class="line"><span style="color:#E5C07B;">                fullCondition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">signal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Consumer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Depot</span><span style="color:#E06C75;"> depot</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> Consumer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Depot</span><span style="color:#E06C75;font-style:italic;"> depot</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">depot</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> depot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> consume</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> no</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                depot</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">consume</span><span style="color:#ABB2BF;">(no);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }, no </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; consume thread&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Producer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Depot</span><span style="color:#E06C75;"> depot</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> Producer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Depot</span><span style="color:#E06C75;font-style:italic;"> depot</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">depot</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> depot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> produce</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> no</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                depot</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">produce</span><span style="color:#ABB2BF;">(no);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }, no </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; produce thread&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReentrantLockDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Depot</span><span style="color:#E06C75;"> depot</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Depot</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Producer</span><span style="color:#ABB2BF;">(depot).</span><span style="color:#61AFEF;">produce</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Producer</span><span style="color:#ABB2BF;">(depot).</span><span style="color:#61AFEF;">produce</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Consumer</span><span style="color:#ABB2BF;">(depot).</span><span style="color:#61AFEF;">consume</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Consumer</span><span style="color:#ABB2BF;">(depot).</span><span style="color:#61AFEF;">consume</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行结果(可能的一种):</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E06C75;">produce </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 500</span></span>
<span class="line"><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">200</span><span style="color:#E06C75;"> produce thread</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">main] before await</span></span>
<span class="line"><span style="color:#E06C75;">consume </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">200</span><span style="color:#E06C75;"> consume thread</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">main] before await</span></span>
<span class="line"><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">200</span><span style="color:#E06C75;"> produce thread</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">main] after await</span></span>
<span class="line"><span style="color:#E06C75;">produce </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 200</span></span>
<span class="line"><span style="color:#E5C07B;">Thread</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">200</span><span style="color:#E06C75;"> consume thread</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">main] after await</span></span>
<span class="line"><span style="color:#E06C75;">consume </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明: 根据结果，我们猜测一种可能的时序如下</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-10.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: p1代表produce 500的那个线程，p2代表produce 200的那个线程，c1代表consume 500的那个线程，c2代表consume 200的那个线程。</p><ul><li>p1线程调用lock.lock，获得锁，继续运行，方法调用顺序在前面已经给出。</li><li>p2线程调用lock.lock，由前面的分析可得到如下的最终状态。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-11.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: p2线程调用lock.lock后，会禁止p2线程的继续运行，因为执行了LockSupport.park操作。</p><ul><li>c1线程调用lock.lock，由前面的分析得到如下的最终状态。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-12.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 最终c1线程会在sync queue队列的尾部，并且其结点的前驱结点(包含p2的结点)的waitStatus变为了SIGNAL。</p><ul><li>c2线程调用lock.lock，由前面的分析得到如下的最终状态。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-13.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 最终c1线程会在sync queue队列的尾部，并且其结点的前驱结点(包含c1的结点)的waitStatus变为了SIGNAL。</p><ul><li>p1线程执行emptyCondition.signal，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-14.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: AQS.CO表示AbstractQueuedSynchronizer.ConditionObject类。此时调用signal方法不会产生任何其他效果。</p><ul><li>p1线程执行lock.unlock，根据前面的分析可知，最终的状态如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-15.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 此时，p2线程所在的结点为头节点，并且其他两个线程(c1、c2)依旧被禁止，所以，此时p2线程继续运行，执行用户逻辑。</p><ul><li>p2线程执行fullCondition.await，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-17-1.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 最终到达的状态是新生成了一个结点，包含了p2线程，此结点在condition queue中；并且sync queue中p2线程被禁止了，因为在执行了LockSupport.park操作。从方法一些调用可知，在await操作中线程会释放锁资源，供其他线程获取。同时，head结点后继结点的包含的线程的许可被释放了，故其可以继续运行。由于此时，只有c1线程可以运行，故运行c1。</p><ul><li>继续运行c1线程，c1线程由于之前被park了，所以此时恢复，继续之前的步骤，即还是执行前面提到的acquireQueued方法，之后，c1判断自己的前驱结点为head，并且可以获取锁资源，最终到达的状态如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-16.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 其中，head设置为包含c1线程的结点，c1继续运行。</p><ul><li>c1线程执行fullCondtion.signal，其方法调用顺序如下，只给出了主要的方法调用。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-17.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: signal方法达到的最终结果是将包含p2线程的结点从condition queue中转移到sync queue中，之后condition queue为null，之前的尾结点的状态变为SIGNAL。</p><ul><li>c1线程执行lock.unlock操作，根据之前的分析，经历的状态变化如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-18.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 最终c2线程会获取锁资源，继续运行用户逻辑。</p><ul><li>c2线程执行emptyCondition.await，由前面的第七步分析，可知最终的状态如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-19.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: await操作将会生成一个结点放入condition queue中与之前的一个condition queue是不相同的，并且unpark头节点后面的结点，即包含线程p2的结点。</p>`,150),y={href:"http://xn--AQS-gx9h4a.CO",target:"_blank",rel:"noopener noreferrer"},B=a('<figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-20.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><ul><li>p2继续运行，执行emptyCondition.signal，根据第九步分析可知，最终到达的状态如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-21.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: 最终，将condition queue中的结点转移到sync queue中，并添加至尾部，condition queue会为空，并且将head的状态设置为SIGNAL。</p><ul><li>p2线程执行lock.unlock操作，根据前面的分析可知，最后的到达的状态如下。</li></ul><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-22.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>说明: unlock操作会释放c2线程的许可，并且将头节点设置为c2线程所在的结点。</p><ul><li>c2线程继续运行，执行fullCondition. signal，由于此时fullCondition的condition queue已经不存在任何结点了，故其不会产生作用。</li><li>c2执行lock.unlock，由于c2是sync队列中最后一个结点，故其不会再调用unparkSuccessor了，直接返回true。即整个流程就完成了。</li></ul><h2 id="abstractqueuedsynchronizer总结" tabindex="-1"><a class="header-anchor" href="#abstractqueuedsynchronizer总结"><span><a href="#abstractqueuedsynchronizer%E6%80%BB%E7%BB%93">#</a> AbstractQueuedSynchronizer总结</span></a></h2><p>对于AbstractQueuedSynchronizer的分析，最核心的就是sync queue的分析。</p><ul><li>每一个结点都是由前一个结点唤醒</li><li>当结点发现前驱结点是head并且尝试获取成功，则会轮到该线程运行。</li><li>condition queue中的结点向sync queue中转移是通过signal操作完成的。</li><li>当结点的状态为SIGNAL时，表示后面的结点需要运行。</li></ul>',11);function d(v,u){const l=p("ExternalLinkIcon");return o(),t("div",null,[r,s("ul",null,[s("li",null,[n("p2线程被unpark，故可以继续运行，经过CPU调度后，p2继续运行，之后p2线程在AQS:await方法中被park，"),s("a",y,[n("继续AQS.CO"),i(l)]),n(":await方法的运行，其方法调用顺序如下，只给出了主要的方法调用。")])]),B])}const F=e(c,[["render",d],["__file","JUC 锁之核心类 AQS 详解.html.vue"]]),C=JSON.parse(`{"path":"/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%B1%BB%20AQS%20%E8%AF%A6%E8%A7%A3.html","title":"JUC 锁之核心类 AQS 详解","lang":"zh-CN","frontmatter":{"title":"JUC 锁之核心类 AQS 详解","subtitle":"Java，Java开发，Java 体系","date":"2024-03-07T10:15:26.000Z","category":["Java"],"tag":["Java","Thread","concurrency"],"order":11,"description":"AbstractQueuedSynchronizer抽象类是核心，需要重点掌握。它提供了一个基于FIFO队列，可以用于构建锁或者其他相关同步装置的基础框架。 JUC 锁之核心类 AQS 详解 带着BAT大厂的面试问题去理解 AbstractQueuedSynchronizer简介 AQS 核心思想 AQS 对资源的共享方式 AQS底层使用了模板方法模式...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/ThreadConcurrency/JUC%20%E9%94%81%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%B1%BB%20AQS%20%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"JUC 锁之核心类 AQS 详解"}],["meta",{"property":"og:description","content":"AbstractQueuedSynchronizer抽象类是核心，需要重点掌握。它提供了一个基于FIFO队列，可以用于构建锁或者其他相关同步装置的基础框架。 JUC 锁之核心类 AQS 详解 带着BAT大厂的面试问题去理解 AbstractQueuedSynchronizer简介 AQS 核心思想 AQS 对资源的共享方式 AQS底层使用了模板方法模式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"concurrency"}],["meta",{"property":"article:published_time","content":"2024-03-07T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUC 锁之核心类 AQS 详解\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-2.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-3.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-4.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-5.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-6.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-7.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-8.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-9.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-10.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-11.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-12.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-13.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-14.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-15.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-17-1.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-16.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-17.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-18.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-19.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-20.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-21.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-thread-x-juc-aqs-22.png\\"],\\"datePublished\\":\\"2024-03-07T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 带着BAT大厂的面试问题去理解","slug":"带着bat大厂的面试问题去理解","link":"#带着bat大厂的面试问题去理解","children":[]},{"level":2,"title":"# AbstractQueuedSynchronizer简介","slug":"abstractqueuedsynchronizer简介","link":"#abstractqueuedsynchronizer简介","children":[{"level":3,"title":"# AQS 核心思想","slug":"aqs-核心思想","link":"#aqs-核心思想","children":[]},{"level":3,"title":"# AQS 对资源的共享方式","slug":"aqs-对资源的共享方式","link":"#aqs-对资源的共享方式","children":[]},{"level":3,"title":"# AQS底层使用了模板方法模式","slug":"aqs底层使用了模板方法模式","link":"#aqs底层使用了模板方法模式","children":[]}]},{"level":2,"title":"# AbstractQueuedSynchronizer数据结构","slug":"abstractqueuedsynchronizer数据结构","link":"#abstractqueuedsynchronizer数据结构","children":[]},{"level":2,"title":"# AbstractQueuedSynchronizer源码分析","slug":"abstractqueuedsynchronizer源码分析","link":"#abstractqueuedsynchronizer源码分析","children":[{"level":3,"title":"# 类的继承关系","slug":"类的继承关系","link":"#类的继承关系","children":[]},{"level":3,"title":"# 类的内部类 - Node类","slug":"类的内部类-node类","link":"#类的内部类-node类","children":[]},{"level":3,"title":"# 类的内部类 - ConditionObject类","slug":"类的内部类-conditionobject类","link":"#类的内部类-conditionobject类","children":[]},{"level":3,"title":"# 类的属性","slug":"类的属性","link":"#类的属性","children":[]},{"level":3,"title":"# 类的构造方法","slug":"类的构造方法","link":"#类的构造方法","children":[]},{"level":3,"title":"# 类的核心方法 - acquire方法","slug":"类的核心方法-acquire方法","link":"#类的核心方法-acquire方法","children":[]},{"level":3,"title":"# 类的核心方法 - release方法","slug":"类的核心方法-release方法","link":"#类的核心方法-release方法","children":[]}]},{"level":2,"title":"# AbstractQueuedSynchronizer示例详解一","slug":"abstractqueuedsynchronizer示例详解一","link":"#abstractqueuedsynchronizer示例详解一","children":[]},{"level":2,"title":"# AbstractQueuedSynchronizer示例详解二","slug":"abstractqueuedsynchronizer示例详解二","link":"#abstractqueuedsynchronizer示例详解二","children":[]},{"level":2,"title":"# AbstractQueuedSynchronizer总结","slug":"abstractqueuedsynchronizer总结","link":"#abstractqueuedsynchronizer总结","children":[]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":35.44,"words":10631},"filePathRelative":"posts/Java/ThreadConcurrency/JUC 锁之核心类 AQS 详解.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>AbstractQueuedSynchronizer抽象类是核心，需要重点掌握。它提供了一个基于FIFO队列，可以用于构建锁或者其他相关同步装置的基础框架。</p>\\n</blockquote>\\n<ul>\\n<li>JUC 锁之核心类 AQS 详解\\n<ul>\\n<li><a href=\\"#%E5%B8%A6%E7%9D%80bat%E5%A4%A7%E5%8E%82%E7%9A%84%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8E%BB%E7%90%86%E8%A7%A3\\">带着BAT大厂的面试问题去理解</a></li>\\n<li>AbstractQueuedSynchronizer简介\\n<ul>\\n<li><a href=\\"#aqs-%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\\">AQS 核心思想</a></li>\\n<li><a href=\\"#aqs-%E5%AF%B9%E8%B5%84%E6%BA%90%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%B9%E5%BC%8F\\">AQS 对资源的共享方式</a></li>\\n<li><a href=\\"#aqs%E5%BA%95%E5%B1%82%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\\">AQS底层使用了模板方法模式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#abstractqueuedsynchronizer%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\\">AbstractQueuedSynchronizer数据结构</a></li>\\n<li>AbstractQueuedSynchronizer源码分析\\n<ul>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB\\">类的继承关系</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---node%E7%B1%BB\\">类的内部类 - Node类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB---conditionobject%E7%B1%BB\\">类的内部类 - ConditionObject类</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\\">类的属性</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\\">类的构造方法</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---acquire%E6%96%B9%E6%B3%95\\">类的核心方法 - acquire方法</a></li>\\n<li><a href=\\"#%E7%B1%BB%E7%9A%84%E6%A0%B8%E5%BF%83%E6%96%B9%E6%B3%95---release%E6%96%B9%E6%B3%95\\">类的核心方法 - release方法</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#abstractqueuedsynchronizer%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%B8%80\\">AbstractQueuedSynchronizer示例详解一</a></li>\\n<li><a href=\\"#abstractqueuedsynchronizer%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3%E4%BA%8C\\">AbstractQueuedSynchronizer示例详解二</a></li>\\n<li><a href=\\"#abstractqueuedsynchronizer%E6%80%BB%E7%BB%93\\">AbstractQueuedSynchronizer总结</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0\\">参考文章</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{F as comp,C as data};
