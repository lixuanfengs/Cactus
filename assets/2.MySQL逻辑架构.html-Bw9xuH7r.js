import{_ as a,c as t,a as n,o as i}from"./app-BcTj92Yq.js";const r={};function s(p,e){return i(),t("div",null,[...e[0]||(e[0]=[n('<h2 id="_1、逻辑架构剖析" tabindex="-1"><a class="header-anchor" href="#_1、逻辑架构剖析"><span>1、逻辑架构剖析</span></a></h2><h3 id="_1-1、逻辑架构图" tabindex="-1"><a class="header-anchor" href="#_1-1、逻辑架构图"><span>1.1、逻辑架构图</span></a></h3><p>下面是MySQL5.7使用的<strong>经典架构图</strong>，MySQL 8中去掉了Caches（缓存）部分：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20230916012832077.png" alt="image-20230916012832077" tabindex="0" loading="lazy"><figcaption>image-20230916012832077</figcaption></figure><h3 id="_1-2、connectors-客户端" tabindex="-1"><a class="header-anchor" href="#_1-2、connectors-客户端"><span>1.2、Connectors（客户端）</span></a></h3><p>MySQL服务器之外的客户端程序，与具体的语言相关，例如Java中的JDBC，图形用户界面SQLyog等。本质上都是在TCP连接上通过MySQL协议和MySQL服务器进行通信。</p><h3 id="_1-3、mysql-server-服务器" tabindex="-1"><a class="header-anchor" href="#_1-3、mysql-server-服务器"><span>1.3、MySQL Server（服务器）</span></a></h3><h4 id="连接层" tabindex="-1"><a class="header-anchor" href="#连接层"><span>连接层</span></a></h4><p>1、客户端访问 MySQL 服务器前，做的第一件事就是<strong>建立TCP连接</strong>。</p><p>2、经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做<strong>身份认证、权限获取</strong>。</p><p>3、用户名或密码不对，会收到一个<strong>Access denied for user</strong>错误，客户端程序结束执行。</p><p>4、用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</p><p>5、TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个<strong>线程池</strong>，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h4 id="sql接口" tabindex="-1"><a class="header-anchor" href="#sql接口"><span>SQL接口</span></a></h4><p>作用：</p><p>1、接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL Interface</p><p>2、MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口</p><h4 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器"><span>解析器</span></a></h4><p>在SQL命令传递到解析器的时候会被解析器验证和解析。解析器中SQL 语句进行<strong>词法分析、语法分析、语义分析</strong>，并为其<strong>创建语法树</strong>。</p><p>1、词法分析：检测SQL语句的关键字是否正确</p><p>2、语法分析：检测SQL语句是否符合MySQL的语法要求，按照MySQl语法规则，生成解析树</p><p>3、语义分析：检查解析树是否合法，比如查看表是否存在，列是否存在</p><p>典型的解析树如下：</p><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20220702002430362.png" alt="image-20220702002430362" tabindex="0" loading="lazy"><figcaption>image-20220702002430362</figcaption></figure><h4 id="查询优化器" tabindex="-1"><a class="header-anchor" href="#查询优化器"><span>查询优化器</span></a></h4><p>SQL语句在语法解析后、查询前会使用查询优化器对查询进行优化，确定SQL语句的执行路径，生成一个执行计划。</p><h4 id="查询缓存组件" tabindex="-1"><a class="header-anchor" href="#查询缓存组件"><span>查询缓存组件</span></a></h4><p>1、MySQL内部维持着一些Cache（缓存）和Buffer（缓冲区），比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行解析、优化、执行，直接将结果反馈给客户端。</p><p>2、这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。</p><p>3、这个查询缓存可以在不同客户端之间共享 。</p><p><strong>问：为什么MySQL8之后去掉了查询缓存？</strong></p><p>1、只有相同的SQL语句才会命中查询缓存。两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中。</p><p>2、在两条查询之间 有 INSERT 、 UPDATE 、 DELETE 、 TRUNCATE TABLE 、 ALTER TABLE 、 DROP TABLE 或 DROP DATABASE 语句也会导致缓存失效</p><p>3、因此 MySQL的查询缓存命中率不高。所以在MySQL 8之后就抛弃了这个功能。</p><h4 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎"><span>存储引擎</span></a></h4><p>存储引擎层（ Storage Engines），负责<strong>MySQL中数据的存储和提取</strong>，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，管理的表有不同的存储结构，采用的存取算法也不同。<strong>例如MyISAM引擎、InnoDB引擎</strong>。</p><h4 id="系统管理和控制工具" tabindex="-1"><a class="header-anchor" href="#系统管理和控制工具"><span>系统管理和控制工具</span></a></h4><p>数据恢复、数据安全、数据副本、服务器集群、服务器管理、服务器配置、数据迁移、元数据</p><h3 id="_1-4、存储层" tabindex="-1"><a class="header-anchor" href="#_1-4、存储层"><span>1.4、存储层</span></a></h3><p>所有的数据、数据库、表的定义、表的每一行的内容、索引，都是存在<strong>文件系统</strong>上，以文件的方式存在，并完成与存储引擎的交互。</p><h2 id="_2、查询流程说明" tabindex="-1"><a class="header-anchor" href="#_2、查询流程说明"><span>2、查询流程说明</span></a></h2><figure><img src="https://beauties.eu.org/blogimg/main/img1/image-20220914161040788.png" alt="image-20220914161040788" tabindex="0" loading="lazy"><figcaption>image-20220914161040788</figcaption></figure><p>**首先，**MySQL客户端通过TCP协议与MySQL服务器建连接，通过SQL接口发送SQL语句，先检查查询缓存，如果命中，直接返回结果，否则将语句交给解析器。</p><p>**接下来是解析过程，**解析器将SQL语句进行解析，通过词法和语法分析，生成一棵解析树，预处理器进一步检查解析树是否合法，**例如，**这里将检查数据表和数据列是否存在，还会解析名字和别名，看是否有歧义等，并生成一棵新解析树。</p><p>**然后是优化过程，**查询优化器会对SQL语句做一些优化，将查询的IO成本和CPU成本降到最低。优化的结果就是生成一个执行计划。</p><p>**最后，**查询执行引擎会按照生成的执行计划调用存储引擎提供的接口执行SQL查询并将结果返回给客户端。</p><p>在MySQL8以下的版本中，如果开启了查询缓存，这时会将查询结果进行缓存，再返回给客户端。</p>',47)])])}const g=a(r,[["render",s]]),c=JSON.parse(`{"path":"/backend/database/MySQL/2.MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84.html","title":"MySQL逻辑架构","lang":"zh-CN","frontmatter":{"title":"MySQL逻辑架构","subtitle":"MySQL逻辑架构","date":"2025-03-21T21:15:26.000Z","category":["MySQL"],"tag":["MySQL"],"order":2,"description":"1、逻辑架构剖析 1.1、逻辑架构图 下面是MySQL5.7使用的经典架构图，MySQL 8中去掉了Caches（缓存）部分： image-20230916012832077image-20230916012832077 1.2、Connectors（客户端） MySQL服务器之外的客户端程序，与具体的语言相关，例如Java中的JDBC，图形用户界面S...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/backend/database/MySQL/2.MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"MySQL逻辑架构"}],["meta",{"property":"og:description","content":"1、逻辑架构剖析 1.1、逻辑架构图 下面是MySQL5.7使用的经典架构图，MySQL 8中去掉了Caches（缓存）部分： image-20230916012832077image-20230916012832077 1.2、Connectors（客户端） MySQL服务器之外的客户端程序，与具体的语言相关，例如Java中的JDBC，图形用户界面S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://beauties.eu.org/blogimg/main/img1/image-20230916012832077.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-21T05:25:15.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2025-03-21T21:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-21T05:25:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL逻辑架构\\",\\"image\\":[\\"https://beauties.eu.org/blogimg/main/img1/image-20230916012832077.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20220702002430362.png\\",\\"https://beauties.eu.org/blogimg/main/img1/image-20220914161040788.png\\"],\\"datePublished\\":\\"2025-03-21T21:15:26.000Z\\",\\"dateModified\\":\\"2025-08-21T05:25:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"1、逻辑架构剖析","slug":"_1、逻辑架构剖析","link":"#_1、逻辑架构剖析","children":[{"level":3,"title":"1.1、逻辑架构图","slug":"_1-1、逻辑架构图","link":"#_1-1、逻辑架构图","children":[]},{"level":3,"title":"1.2、Connectors（客户端）","slug":"_1-2、connectors-客户端","link":"#_1-2、connectors-客户端","children":[]},{"level":3,"title":"1.3、MySQL Server（服务器）","slug":"_1-3、mysql-server-服务器","link":"#_1-3、mysql-server-服务器","children":[]},{"level":3,"title":"1.4、存储层","slug":"_1-4、存储层","link":"#_1-4、存储层","children":[]}]},{"level":2,"title":"2、查询流程说明","slug":"_2、查询流程说明","link":"#_2、查询流程说明","children":[]}],"git":{"createdTime":1755753915000,"updatedTime":1755753915000,"contributors":[{"name":"Dell","username":"Dell","email":"1183895890@qq.com","commits":1,"url":"https://github.com/Dell"}]},"readingTime":{"minutes":4.53,"words":1360},"filePathRelative":"backend/database/MySQL/2.MySQL逻辑架构.md","localizedDate":"2025年3月21日","excerpt":"<h2>1、逻辑架构剖析</h2>\\n<h3>1.1、逻辑架构图</h3>\\n<p>下面是MySQL5.7使用的<strong>经典架构图</strong>，MySQL 8中去掉了Caches（缓存）部分：</p>\\n<figure><img src=\\"https://beauties.eu.org/blogimg/main/img1/image-20230916012832077.png\\" alt=\\"image-20230916012832077\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20230916012832077</figcaption></figure>","autoDesc":true}`);export{g as comp,c as data};
