import{_ as n,e as l,o,c as p,b as s,g as e,f as t,h as r}from"./app-Ntmq5oN3.js";const c={},B=r(`<blockquote><p>我们关心的是如何写出好代码，而不是符合函数编程风格的代码。</p></blockquote><ul><li>Java8 函数编程lambda表达式 <ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">lambda表达式</a></li><li>分类 <ul><li><a href="#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">惰性求值方法</a></li><li><a href="#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">及早求值方法</a></li></ul></li><li>stream &amp; parallelStream <ul><li><a href="#stream--parallelstream-1">stream &amp; parallelStream</a></li><li><a href="#parallelstream%E5%8E%9F%E7%90%86">parallelStream原理:</a></li><li><a href="#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94">stream与parallelStream性能测试对比</a></li><li><a href="#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B">Stream中常用方法如下:</a></li></ul></li><li>常用例子 <ul><li><a href="#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99">匿名类简写</a></li><li><a href="#foreach">forEach</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">方法引用</a></li><li><a href="#filter--predicate">Filter &amp; Predicate</a></li><li><a href="#mapreduce">Map&amp;Reduce</a></li><li><a href="#collectors">Collectors</a></li><li><a href="#flatmap">flatMap</a></li><li><a href="#distinct">distinct</a></li><li><a href="#count">count</a></li><li><a href="#match">Match</a></li><li><a href="#minmaxsummarystatistics">min,max,summaryStatistics</a></li><li><a href="#peek">peek</a></li></ul></li><li>FunctionalInterface <ul><li><a href="#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface">理解注解 @FunctionInterface</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">自定义函数接口</a></li><li><a href="#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">内置四大函数接口</a></li></ul></li><li><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">一些例子</a></li><li><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">参考资料</a></li></ul></li></ul><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span><a href="#%E7%AE%80%E4%BB%8B">#</a> 简介</span></a></h2><blockquote><p>在Java世界里面，面向对象还是主流思想，对于习惯了面向对象编程的开发者来说，抽象的概念并不陌生。面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此，因此这两种编程方式我们都得学。</p></blockquote><blockquote><p>这种新的抽象方式还有其他好处。很多人不总是在编写性能优先的代码，对于这些人来说，函数式编程带来的好处尤为明显。程序员能编写出更容易阅读的代码——这种代码更多地表达了业务逻辑，而不是从机制上如何实现。易读的代码也易于维护、更可靠、更不容易出错。</p></blockquote><blockquote><p>在写回调函数和事件处理器时，程序员不必再纠缠于匿名内部类的冗繁和可读性，函数式编程让事件处理系统变得更加简单。能将函数方便地传递也让编写惰性代码变得容易，只有在真正需要的时候，才初始化变量的值。</p></blockquote><p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p><p>核心思想: 使用不可变值和函数，函数对一个值进行处理，映射成另一个值。</p><p>对核心类库的改进主要包括集合类的API和新引入的流Stream。流使程序员可以站在更高的抽象层次上对集合进行操作。</p><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">#</a> lambda表达式</span></a></h2><ul><li>lambda表达式仅能放入如下代码: 预定义使用了 @Functional 注释的函数式接口，自带一个抽象函数的方法，或者SAM(Single Abstract Method 单个抽象方法)类型。这些称为lambda表达式的目标类型，可以用作返回类型，或lambda目标代码的参数。例如，若一个方法接收Runnable、Comparable或者 Callable 接口，都有单个抽象方法，可以传入lambda表达式。类似的，如果一个方法接受声明于 java.util.function 包内的接口，例如 Predicate、Function、Consumer 或 Supplier，那么可以向其传lambda表达式。</li><li>lambda表达式内可以使用<code>方法引用</code>，仅当该方法不修改lambda表达式提供的参数。本例中的lambda表达式可以换为方法引用，因为这仅是一个参数相同的简单方法调用。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(n </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(n));</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">println);</span><span style="color:#7F848E;font-style:italic;">  // 使用方法引用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，若对参数有任何修改，则不能使用方法引用，而需键入完整地lambda表达式，如下所示:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> s) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> s </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;*&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>事实上，可以省略这里的lambda参数的类型声明，编译器可以从列表的类属性推测出来。</p><ul><li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li><li>Lambda表达式在Java中又称为闭包或匿名函数，所以如果有同事把它叫闭包的时候，不用惊讶。</li><li>Lambda方法在编译器内部被翻译成私有方法，并派发 invokedynamic 字节码指令来进行调用。可以使用JDK中的 javap 工具来反编译class文件。使用 javap -p 或 javap -c -v 命令来看一看lambda表达式生成的字节码。大致应该长这样:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Object</span><span style="color:#61AFEF;"> lambda$0</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">java</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lang</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>lambda表达式有个限制，那就是只能引用 final 或 final 局部变量，这就是说不能在lambda内部修改定义在域外的变量。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> primes </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">[]{</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> factor </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">primes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(element </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> { factor++; });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compile time error : &quot;local variables referenced from a lambda expression must be final or effectively final&quot; 另外，只是访问它而不作修改是可以的，如下所示:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> primes </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">[]{</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> factor </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">primes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(element </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(factor</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">element); });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span><a href="#%E5%88%86%E7%B1%BB">#</a> 分类</span></a></h2><h3 id="惰性求值方法" tabindex="-1"><a class="header-anchor" href="#惰性求值方法"><span><a href="#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">#</a> 惰性求值方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(f </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p1&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上示例，这行代码并未做什么实际性的工作，filter只是<strong>描述</strong>了Stream，<strong>没有产生新的集合</strong>。</p><p>如果是多个条件组合，可以通过代码块{}</p><h3 id="及早求值方法" tabindex="-1"><a class="header-anchor" href="#及早求值方法"><span><a href="#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95">#</a> 及早求值方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> list2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(f </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p1&quot;</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上示例，collect最终会从Stream产生新值，拥有终止操作。</p><p>理想方式是形成一个惰性求值的链，最后用一个及早求值的操作返回想要的结果。与建造者模式相似，建造者模式先是使用一系列操作设置属性和配置，最后调用build方法，创建对象。</p><h2 id="stream-parallelstream" tabindex="-1"><a class="header-anchor" href="#stream-parallelstream"><span><a href="#stream-parallelstream">#</a> stream &amp; parallelStream</span></a></h2><h3 id="stream-parallelstream-1" tabindex="-1"><a class="header-anchor" href="#stream-parallelstream-1"><span><a href="#stream-parallelstream-1">#</a> stream &amp; parallelStream</span></a></h3><p>每个Stream都有两种模式: 顺序执行和并行执行。</p><p>顺序流:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> people </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> list</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并行流:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> people </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> list</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">getStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parallel</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>顾名思义，当使用顺序方式去遍历时，每个item读完后再读下一个item。而使用并行去遍历时，数组会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出。</p><h3 id="parallelstream原理" tabindex="-1"><a class="header-anchor" href="#parallelstream原理"><span><a href="#parallelstream%E5%8E%9F%E7%90%86">#</a> parallelStream原理:</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#E06C75;"> originalList </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> someData</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">split1 </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> originalList</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> mid)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//将数据分小部分</span></span>
<span class="line"><span style="color:#E06C75;">split2 </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> originalList</span><span style="color:#E06C75;">(mid</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">end)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">split1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//小部分执行操作</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">split2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#E06C75;"> revisedList </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> split1 </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> split2</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//将结果合并</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家对hadoop有稍微了解就知道，里面的 MapReduce 本身就是用于并行处理大数据集的软件框架，其 处理大数据的核心思想就是大而化小，分配到不同机器去运行map，最终通过reduce将所有机器的结果结合起来得到一个最终结果，与MapReduce不同，Stream则是利用多核技术可将大数据通过多核并行处理，而MapReduce则可以分布式的。</p><h3 id="stream与parallelstream性能测试对比" tabindex="-1"><a class="header-anchor" href="#stream与parallelstream性能测试对比"><span><a href="#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94">#</a> stream与parallelStream性能测试对比</span></a></h3><p>如果是多核机器，理论上并行流则会比顺序流快上一倍，下面是测试代码</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> t0 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//初始化一个范围100万整数流,求能被2整除的数字，toArray()是终点方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> a[]</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">IntStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1_000_000</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(p </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> p </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> t1 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//和上面功能一样，这里是用并行流来计算</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> b[]</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">IntStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">range</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1_000_000</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">parallel</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(p </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> p </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> t2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//我本机的结果是serial: 0.06s, parallel 0.02s，证明并行流确实比顺序流快</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;serial: %.2fs, parallel %.2fs%n&quot;</span><span style="color:#ABB2BF;">, (t1 </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> t0) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 1e-9</span><span style="color:#ABB2BF;">, (t2 </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> t1) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 1e-9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stream中常用方法如下" tabindex="-1"><a class="header-anchor" href="#stream中常用方法如下"><span><a href="#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B">#</a> Stream中常用方法如下:</span></a></h3><ul><li><code>stream()</code>, <code>parallelStream()</code></li><li><code>filter()</code></li><li><code>findAny()</code> <code>findFirst()</code></li><li><code>sort</code></li><li><code>forEach</code> void</li><li><code>map(), reduce()</code></li><li><code>flatMap()</code> - 将多个Stream连接成一个Stream</li><li><code>collect(Collectors.toList())</code></li><li><code>distinct</code>, <code>limit</code></li><li><code>count</code></li><li><code>min</code>, <code>max</code>, <code>summaryStatistics</code></li></ul><p>看下所有API:</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="常用例子" tabindex="-1"><a class="header-anchor" href="#常用例子"><span><a href="#%E5%B8%B8%E7%94%A8%E4%BE%8B%E5%AD%90">#</a> 常用例子</span></a></h2><h3 id="匿名类简写" tabindex="-1"><a class="header-anchor" href="#匿名类简写"><span><a href="#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99">#</a> 匿名类简写</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#E06C75;">( () </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;In Java8, Lambda expression rocks !!&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;"> )</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 用法</span></span>
<span class="line"><span style="color:#E06C75;">(params) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;"> expression</span></span>
<span class="line"><span style="color:#E06C75;">(params) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;"> statement</span></span>
<span class="line"><span style="color:#E06C75;">(params) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;"> { statements }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span><a href="#foreach">#</a> forEach</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// forEach</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#E06C75;"> features </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Lambdas&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Default Method&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Stream API&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Date and Time API&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">features</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(n </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(n));</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用Java 8的方法引用更方便，方法引用由::双冒号操作符标示，</span></span>
<span class="line"><span style="color:#E5C07B;">features</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用"><span><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">#</a> 方法引用</span></a></h3><p><em>构造引用</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Supplier&lt;Student&gt; s = () -&gt; new Student();</span></span>
<span class="line"><span style="color:#E5C07B;">Supplier</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Student</span><span style="color:#C678DD;">::new</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>对象::实例方法 Lambda表达式的(形参列表)与实例方法的(实参列表)类型，个数是对应</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// set.forEach(t -&gt; System.out.println(t));</span></span>
<span class="line"><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">println);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类名::静态方法</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Stream&lt;Double&gt; stream = Stream.generate(() -&gt; Math.random());</span></span>
<span class="line"><span style="color:#E5C07B;">Stream</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Double</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> stream </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generate</span><span style="color:#ABB2BF;">(Math</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">random);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>类名::实例方法</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;((s1,s2) -&gt; s1.compareTo(s2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*  这里如果使用第一句话，编译器会有提示: Can be replaced with Comparator.naturalOrder，这句话告诉我们</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  String已经重写了compareTo()方法，在这里写是多此一举，这里为什么这么写，是因为为了体现下面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  这句编译器的提示: Lambda can be replaced with method reference。好了，下面的这句就是改写成方法引用之后: </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#E5C07B;">TreeSet</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> set </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> TreeSet</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">(String</span><span style="color:#C678DD;">::</span><span style="color:#E06C75;">compareTo)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-predicate" tabindex="-1"><a class="header-anchor" href="#filter-predicate"><span><a href="#filter-predicate">#</a> Filter &amp; Predicate</span></a></h3><p>常规用法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(args[]){</span></span>
<span class="line"><span style="color:#E5C07B;">    List</span><span style="color:#E06C75;"> languages </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Java&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Scala&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;C++&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Haskell&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Lisp&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Languages which starts with J :&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    filter</span><span style="color:#E06C75;">(languages</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (str)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;J&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Languages which ends with a &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    filter</span><span style="color:#E06C75;">(languages</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (str)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Print all languages :&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    filter</span><span style="color:#E06C75;">(languages</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (str)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#D19A66;">true</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Print no language : &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    filter</span><span style="color:#E06C75;">(languages</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (str)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#D19A66;">false</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Print language whose length greater than 4:&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    filter</span><span style="color:#E06C75;">(languages</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> (str)</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 4</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> filter</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">List</span><span style="color:#E06C75;"> names</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Predicate</span><span style="color:#E06C75;"> condition) {</span></span>
<span class="line"><span style="color:#E5C07B;">    names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((name) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">condition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(name))).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((name) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(name </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个Predicate组合filter</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 可以用and()、or()和xor()逻辑函数来合并Predicate，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span>
<span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> startsWithJ </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (n) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> n</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;J&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> fourLetterLong </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (n) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> n</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">startsWithJ</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">and</span><span style="color:#ABB2BF;">(fourLetterLong))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((n) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;nName, which starts with &#39;J&#39; and four letter long is : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> n));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map-reduce" tabindex="-1"><a class="header-anchor" href="#map-reduce"><span><a href="#map-reduce">#</a> Map&amp;Reduce</span></a></h3><p>map将集合类(例如列表)元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#E06C75;"> costBeforeTax </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">double</span><span style="color:#E06C75;"> bill </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> costBeforeTax</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((cost) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> cost </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> .12</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;">cost).</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((sum, cost) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> sum </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> cost).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Total : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> bill);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collectors" tabindex="-1"><a class="header-anchor" href="#collectors"><span><a href="#collectors">#</a> Collectors</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将字符串换成大写并用逗号链接起来</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> G7 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;USA&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Japan&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;France&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Germany&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Italy&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;U.K.&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;Canada&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> G7Countries </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> G7</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(x </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">joining</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(G7Countries);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Collectors.joining(&quot;, &quot;)</li><li>Collectors.toList()</li><li>Collectors.toSet() ，生成set集合</li><li>Collectors.toMap(MemberModel::getUid, Function.identity())</li><li>Collectors.toMap(ImageModel::getAid, o -&gt; IMAGE_ADDRESS_PREFIX + o.getUrl())</li></ul><h3 id="flatmap" tabindex="-1"><a class="header-anchor" href="#flatmap"><span><a href="#flatmap">#</a> flatMap</span></a></h3><p>将多个Stream连接成一个Stream</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">),</span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">flatMap</span><span style="color:#ABB2BF;">(a</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果: [1, 3, 5, 6]</p><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct"><span><a href="#distinct">#</a> distinct</span></a></h3><p>去重</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LikeDO</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> likeDOs</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LikeDO</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> likeTidList </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> likeDOs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(LikeDO</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getTid)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">distinct</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count"><span><a href="#count">#</a> count</span></a></h3><p>计总数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> countOfAdult</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">persons</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                       .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(p </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAge</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                       .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(person </span><span style="color:#C678DD;">-&gt;</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Adult</span><span style="color:#ABB2BF;">(person))</span></span>
<span class="line"><span style="color:#ABB2BF;">                       .</span><span style="color:#61AFEF;">count</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match"><span><a href="#match">#</a> Match</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> anyStartsWithA </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E06C75;">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">anyMatch</span><span style="color:#ABB2BF;">((s) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(anyStartsWithA);</span><span style="color:#7F848E;font-style:italic;">      // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> allStartsWithA </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E06C75;">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">allMatch</span><span style="color:#ABB2BF;">((s) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(allStartsWithA);</span><span style="color:#7F848E;font-style:italic;">      // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> noneStartsWithZ </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E06C75;">    stringCollection</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">noneMatch</span><span style="color:#ABB2BF;">((s) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;z&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(noneStartsWithZ);</span><span style="color:#7F848E;font-style:italic;">      // true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="min-max-summarystatistics" tabindex="-1"><a class="header-anchor" href="#min-max-summarystatistics"><span><a href="#min-max-summarystatistics">#</a> min,max,summaryStatistics</span></a></h3><p>最小值，最大值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> lists </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p1&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p2&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p3&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p4&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;"> a </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Comparator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">comparing</span><span style="color:#ABB2BF;">(t </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">())).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果比较器涉及多个条件，比较复杂，可以定制</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;"> Person</span><span style="color:#E06C75;"> a </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Comparator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">      public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;font-style:italic;"> o1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;font-style:italic;"> o2</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">           if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">o1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> o2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">()) </span><span style="color:#C678DD;">return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">           if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">o1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> o2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getId</span><span style="color:#ABB2BF;">()) </span><span style="color:#C678DD;">return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">           return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">       }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>summaryStatistics</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//获取数字的个数、最小值、最大值、总和以及平均值</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> primes </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asList</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">17</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">29</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">IntSummaryStatistics</span><span style="color:#E06C75;"> stats </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> primes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">mapToInt</span><span style="color:#ABB2BF;">((x) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> x).</span><span style="color:#61AFEF;">summaryStatistics</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Highest prime number in List : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> stats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMax</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Lowest prime number in List : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> stats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMin</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Sum of all prime numbers : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> stats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSum</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Average of all prime numbers : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> stats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAverage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="peek" tabindex="-1"><a class="header-anchor" href="#peek"><span><a href="#peek">#</a> peek</span></a></h3><p>可以使用peek方法，peek方法可只包含一个空的方法体，只要能设置断点即可，但有些IDE不允许空，可以如下文示例，简单写一个打印逻辑。</p><p>注意，调试完后要删掉。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> lists </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p1&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p2&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p3&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4L</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;p4&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(lists);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> list2 </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">				 .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(f </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">peek</span><span style="color:#ABB2BF;">(t </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(list2);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="functionalinterface" tabindex="-1"><a class="header-anchor" href="#functionalinterface"><span><a href="#functionalinterface">#</a> FunctionalInterface</span></a></h2><h3 id="理解注解-functioninterface" tabindex="-1"><a class="header-anchor" href="#理解注解-functioninterface"><span><a href="#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface">#</a> 理解注解 @FunctionInterface</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * An informative annotation type used to indicate that an interface</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * type declaration is intended to be a &lt;i&gt;functional interface&lt;/i&gt; as</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * defined by the Java Language Specification.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Conceptually, a functional interface has exactly one abstract</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * method.  Since {@linkplain java.lang.reflect.Method#isDefault()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * default methods} have an implementation, they are not abstract.  If</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * an interface declares an abstract method overriding one of the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * public methods of {@code java.lang.Object}, that also does</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;em&gt;not&lt;/em&gt; count toward the interface&#39;s abstract method count</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * since any implementation of the interface will have an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * implementation from {@code java.lang.Object} or elsewhere.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;p&gt;Note that instances of functional interfaces can be created with</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * lambda expressions, method references, or constructor references.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;p&gt;If a type is annotated with this annotation type, compilers are</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * required to generate an error message unless:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;li&gt; The type is an interface type and not an annotation type, enum, or class.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;li&gt; The annotated type satisfies the requirements of a functional interface.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * &lt;p&gt;However, the compiler will treat any interface meeting the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * definition of a functional interface as a functional interface</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * regardless of whether or not a {@code FunctionalInterface}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * annotation is present on the interface declaration.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @jls 4.3.2. The Class Object</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @jls 9.8 Functional Interfaces</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @jls 9.4.3 Interface Method Body</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Documented</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Retention</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">RetentionPolicy</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RUNTIME</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Target</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ElementType</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TYPE</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> @</span><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> FunctionalInterface</span><span style="color:#E06C75;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>interface做注解的注解类型，被定义成java语言规范</li><li>一个被它注解的接口只能有一个抽象方法，有两种例外</li><li>第一是接口允许有实现的方法，这种实现的方法是用default关键字来标记的(java反射中java.lang.reflect.Method#isDefault()方法用来判断是否是default方法)</li><li>第二如果声明的方法和java.lang.Object中的某个方法一样，它可以不当做未实现的方法，不违背这个原则: 一个被它注解的接口只能有一个抽象方法, 比如: <code>java public interface Comparator&lt;T&gt; { int compare(T o1, T o2); boolean equals(Object obj); } </code></li><li>如果一个类型被这个注解修饰，那么编译器会要求这个类型必须满足如下条件: <ul><li>这个类型必须是一个interface，而不是其他的注解类型、枚举enum或者类class</li><li>这个类型必须满足function interface的所有要求，如你个包含两个抽象方法的接口增加这个注解，会有编译错误。</li></ul></li><li>编译器会自动把满足function interface要求的接口自动识别为function interface，所以你才不需要对上面示例中的 ITest接口增加@FunctionInterface注解。</li></ul><h3 id="自定义函数接口" tabindex="-1"><a class="header-anchor" href="#自定义函数接口"><span><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">#</a> 自定义函数接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">FunctionalInterface</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> IMyInterface</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> study</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> com.isea.java</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestIMyInterface</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        IMyInterface</span><span style="color:#E06C75;"> iMyInterface</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I like study&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        iMyInterface</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">study</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置四大函数接口" tabindex="-1"><a class="header-anchor" href="#内置四大函数接口"><span><a href="#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3">#</a> 内置四大函数接口</span></a></h3><ul><li>消费型接口: Consumer&lt; T&gt; void accept(T t)有参数，无返回值的抽象方法；</li></ul><blockquote><p><code>比如: map.forEach(BiConsumer&lt;A, T&gt;)</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Consumer</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> greeter </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (p) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello, &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">firstName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">greeter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Luke&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Skywalker&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>供给型接口: <code>Supplier &lt; T&gt; T get()</code> 无参有返回值的抽象方法；</li></ul><blockquote><p><code>以stream().collect(Collector&lt;? super T, A, R&gt; collector)为例:</code></p></blockquote><p>比如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Supplier</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> personSupplier </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Person</span><span style="color:#C678DD;">::new</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">personSupplier</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">   // new Person</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再如:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 调用方法</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">R</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> A</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> R</span><span style="color:#61AFEF;"> collect</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collector</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> super</span><span style="color:#E06C75;"> T</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> A</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> R</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> collector)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Collectors.toSet</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;">T</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	Collector</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Set</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">T</span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#61AFEF;"> toSet</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> CollectorImpl</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">((</span><span style="color:#E5C07B;">Supplier</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">Set</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">T</span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#E06C75;">) HashSet</span><span style="color:#C678DD;">::new</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> Set</span><span style="color:#C678DD;">::</span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                               (left</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> right) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;"> { </span><span style="color:#E5C07B;">left</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAll</span><span style="color:#ABB2BF;">(right);</span><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> left</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> }</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                               CH_UNORDERED_ID)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// CollectorImpl</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Supplier</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> supplier</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> BiConsumer</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> accumulator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> BinaryOperator</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> combiner</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> R</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> finisher</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Set</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Characteristics</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> characteristics</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">CollectorImpl</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Supplier</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> supplier</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              BiConsumer</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> T</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> accumulator</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              BinaryOperator</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> combiner</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              Function</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">R</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> finisher</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              Set</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Characteristics</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> characteristics) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">supplier</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> supplier</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">accumulator</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> accumulator</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">combiner</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> combiner</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">finisher</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> finisher</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">characteristics</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> characteristics</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">CollectorImpl</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Supplier</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> supplier</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              BiConsumer</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> T</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> accumulator</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              BinaryOperator</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">A</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> combiner</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">              Set</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Characteristics</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> characteristics) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#E06C75;">(supplier</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> accumulator</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> combiner</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;"> castingIdentity</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> characteristics)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// collect()方法实现</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> final</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;">R</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> A</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E5C07B;"> R</span><span style="color:#61AFEF;"> collect</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collector</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> super</span><span style="color:#E06C75;"> P_OUT</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> A</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> R</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> collector) {</span></span>
<span class="line"><span style="color:#E5C07B;">    A</span><span style="color:#E06C75;"> container</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#61AFEF;">isParallel</span><span style="color:#E06C75;">()</span></span>
<span class="line"><span style="color:#56B6C2;">            &amp;&amp;</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">characteristics</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collector</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Characteristics</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CONCURRENT</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#56B6C2;">            &amp;&amp;</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isOrdered</span><span style="color:#E06C75;">() </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">characteristics</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collector</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Characteristics</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UNORDERED</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">        container </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">supplier</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        BiConsumer</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> ?</span><span style="color:#C678DD;"> super</span><span style="color:#E5C07B;"> P_OUT</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> accumulator </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accumulator</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        forEach</span><span style="color:#E06C75;">(u </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> accumulator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">(container, u)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        container </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> evaluate</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">ReduceOps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">makeRef</span><span style="color:#ABB2BF;">(collector)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">characteristics</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collector</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Characteristics</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">IDENTITY_FINISH</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">           ?</span><span style="color:#E06C75;"> (R) container</span></span>
<span class="line"><span style="color:#C678DD;">           :</span><span style="color:#E5C07B;"> collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">finisher</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(container);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>断定型接口: <code>Predicate&lt;T&gt; boolean test(T t)</code>:有参，但是返回值类型是固定的boolean</li></ul><blockquote><p><code>比如: steam().filter()中参数就是Predicate</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> predicate </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (s) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">predicate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">              // true</span></span>
<span class="line"><span style="color:#E5C07B;">predicate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">negate</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">     // false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> nonNull </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Objects</span><span style="color:#C678DD;">::</span><span style="color:#E06C75;">nonNull</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Boolean</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> isNull </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Objects</span><span style="color:#C678DD;">::</span><span style="color:#E06C75;">isNull</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> isEmpty </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> String</span><span style="color:#C678DD;">::</span><span style="color:#E06C75;">isEmpty</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Predicate</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> isNotEmpty </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> isEmpty</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">negate</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数型接口: Function&lt;T,R&gt; R apply(T t)有参有返回值的抽象方法；</li></ul><blockquote><p><code>比如: steam().map() 中参数就是Function&lt;? super T, ? extends R&gt;；reduce()中参数BinaryOperator&lt;T&gt; (ps: BinaryOperator&lt;T&gt; extends BiFunction&lt;T,T,T&gt;)</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> toInteger </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Integer</span><span style="color:#C678DD;">::</span><span style="color:#E06C75;">valueOf</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> backToString </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> toInteger</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">andThen</span><span style="color:#ABB2BF;">(String</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">valueOf);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">backToString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;123&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">     // &quot;123&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一些例子" tabindex="-1"><a class="header-anchor" href="#一些例子"><span><a href="#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90">#</a> 一些例子</span></a></h2><ul><li>输出 年龄&gt;25的女程序员中名字排名前3位的姓名</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">javaProgrammers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((p) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAge</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 25</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((p) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&quot;female&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getGender</span><span style="color:#ABB2BF;">())))</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">sorted</span><span style="color:#ABB2BF;">((p, p2) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFirstName</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">compareTo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFirstName</span><span style="color:#ABB2BF;">())))</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">limit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          //.forEach(e -&gt; e.setSalary(e.getSalary() / 100 * 5 + e.getSalary()))//涨工资</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((p) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;%s %s; &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFirstName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLastName</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>工资最高的 Java programmer</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;"> person </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">((p, p2) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSalary</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSalary</span><span style="color:#ABB2BF;">()))</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将 Java programmers 的 first name 存放到 TreeSet</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TreeSet</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> javaDevLastName </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(Person</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getLastName)</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">toCollection</span><span style="color:#ABB2BF;">(TreeSet</span><span style="color:#C678DD;">::new</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算付给 Java programmers 的所有money</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> totalSalary </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> javaProgrammers</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">parallelStream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">mapToInt</span><span style="color:#ABB2BF;">(p </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSalary</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">          .</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Comparator多属性排序: 先按名字不分大小写排，再按GID倒序排，最后按年龄正序排</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">	List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> personList </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getTestList</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	personList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Comparator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">comparing</span><span style="color:#ABB2BF;">(Person</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getName, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CASE_INSENSITIVE_ORDER</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">thenComparing</span><span style="color:#ABB2BF;">(Person</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getGid, (a, b) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareTo</span><span style="color:#ABB2BF;">(a))</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">thenComparingInt</span><span style="color:#ABB2BF;">(Person</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getAge));</span></span>
<span class="line"><span style="color:#E5C07B;">	personList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">println);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> List</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Person</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> getTestList</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Lists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newArrayList</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dai&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;301&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dai&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;303&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dai&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;303&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dai&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;303&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dai&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;303&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dai&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;302&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;zhang&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;302&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;zhang&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;301&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;301&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出结果</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=dai, gid=303, age=6]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=dai, gid=303, age=8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=dai, gid=303, age=10]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=dai, gid=303, age=11]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=dai, gid=302, age=9]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=dai, gid=301, age=10]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=Li, gid=301, age=8]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=zhang, gid=302, age=9]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person [name=zhang, gid=301, age=9]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>处理字符串</li></ul><p>两个新的方法可在字符串类上使用: join和chars。第一个方法使用指定的分隔符，将任何数量的字符串连接为一个字符串。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;foobar&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; foobar:foo:bar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个方法chars从字符串所有字符创建数据流，所以你可以在这些字符上使用流式操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;foobar:foo:bar&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">chars</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">distinct</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">mapToObj</span><span style="color:#ABB2BF;">(c </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;">)c))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">sorted</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">joining</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; :abfor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅仅是字符串，正则表达式模式串也能受益于数据流。我们可以分割任何模式串，并创建数据流来处理它们，而不是将字符串分割为单个字符的数据流，像下面这样:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">splitAsStream</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foobar:foo:bar&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(s </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">sorted</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">joining</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; bar:foobar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，正则模式串可以转换为谓词。这些谓词可以像下面那样用于过滤字符串流:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Pattern</span><span style="color:#E06C75;"> pattern </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.*@gmail</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">.com&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bob@gmail.com&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;alice@hotmail.com&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asPredicate</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">count</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的模式串接受任何以<code>@gmail.com</code>结尾的字符串，并且之后用作Java8的Predicate来过滤电子邮件地址流。</p><ul><li>Local Cache实现</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> TestLocalCache</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> ConcurrentHashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Long</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> cache </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ConcurrentHashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> fibonacci</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> i</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (i </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">computeIfAbsent</span><span style="color:#ABB2BF;">(i, (key) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Slow calculation of &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> key);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> fibonacci</span><span style="color:#ABB2BF;">(i </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#61AFEF;"> fibonacci</span><span style="color:#ABB2BF;">(i </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// warm up</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 101</span><span style="color:#ABB2BF;">; i++)</span></span>
<span class="line"><span style="color:#E5C07B;">	        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	            &quot;f(&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;) = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#61AFEF;"> fibonacci</span><span style="color:#ABB2BF;">(i));</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// read -&gt; cal</span></span>
<span class="line"><span style="color:#C678DD;">		long</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fibonacci</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">current);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>集合--》取元素的一个属性--》去重---》组装成List--》返回</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LikeDO</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> likeDOs</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LikeDO</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> likeTidList </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> likeDOs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(LikeDO</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getTid)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">distinct</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>集合--》按表达式过滤--》遍历、每个元系处理--》放入预先定义的集合中</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">  Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> StkProduct</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> newStockName2Product </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Maps</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newConcurrentMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        stockProducts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(stkProduct </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> stkProduct</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">enabled</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(stkProduct </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> newName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> BCConvert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bj2qj</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stkProduct</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">            newStockName2Product</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(newName, stkProduct);</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#E5C07B;"> Set</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> qjStockNames</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;"> qjStockNames</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(name </span><span style="color:#C678DD;">-&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">acAutomaton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getKey2link</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">containsKey</span><span style="color:#ABB2BF;">(name)).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(name </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            String</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            StkProduct</span><span style="color:#E06C75;"> stkProduct</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stockNameQj2Product</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (stkProduct </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                value </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> stkProduct</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            acAutomaton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getKey2link</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(name, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>集合 --&gt; map</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ImageModel</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> imageModelList </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> imagesMap </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">imagesMap </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> imageModelList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toMap</span><span style="color:#ABB2BF;">(ImageModel</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getAid, o </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> IMAGE_ADDRESS_PREFIX </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUrl</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#E06C75;">              </span></span>
<span class="line"><span style="color:#E06C75;">             </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> kvMap </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> postDetailCacheList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toMap</span><span style="color:#ABB2BF;">((detailCache) </span><span style="color:#C678DD;">-&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">                getBbsSimplePostKey</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">detailCache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTid</span><span style="color:#ABB2BF;">()), JSON</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">toJSONString));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Map</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">Long</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> Long</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> pidToTid；</span></span>
<span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> pidKeyList </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> pidToTid</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entrySet</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((o) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;"> getKeyBbsReplyPid</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getKey</span><span style="color:#ABB2BF;">())).</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DO模型 --&gt; Model</code>模型</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AdDO</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> adDOList</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">adDOList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(adDo </span><span style="color:#C678DD;">-&gt;</span><span style="color:#61AFEF;"> convertAdModel</span><span style="color:#ABB2BF;">(adDo))</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toList</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>phones 是一个<code>List&lt;String&gt;</code>，将相同的元素分组、归类</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> phones</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> ArrayList</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;&gt;</span><span style="color:#E06C75;"> phoneClassify </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> phones</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Collectors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">groupingBy</span><span style="color:#ABB2BF;">(item </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> item));</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(phoneClassify);</span></span>
<span class="line"><span style="color:#E06C75;">返回结果</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#E06C75;">{a</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">[a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> a]</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">[b</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> b]</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">[c]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99">#</a> 参考资料</span></a></h2>`,152),i={href:"https://mp.weixin.qq.com/s/Xhr9aNEMr0fIUWh27mH1pw",target:"_blank",rel:"noopener noreferrer"};function y(d,F){const a=l("ExternalLinkIcon");return o(),p("div",null,[B,s("ul",null,[s("li",null,[s("a",i,[e("Lambda 表达式的 10 个示例"),t(a)])])])])}const E=n(c,[["render",y],["__file","Java8 函数编程lambda表达式.html.vue"]]),u=JSON.parse(`{"path":"/posts/Java/Java8NewFeatures/Java8%20%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"Java8 函数编程lambda表达式","lang":"zh-CN","frontmatter":{"title":"Java8 函数编程lambda表达式","subtitle":"Java，Java开发，Java 体系","date":"2024-03-17T15:06:55.000Z","category":["Java"],"tag":["Java","Java8 新特性"],"order":2,"description":"我们关心的是如何写出好代码，而不是符合函数编程风格的代码。 Java8 函数编程lambda表达式 简介 lambda表达式 分类 惰性求值方法 及早求值方法 stream & parallelStream stream & parallelStream parallelStream原理: stream与parallelStream性能测试对比 Str...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Java8NewFeatures/Java8%20%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Java8 函数编程lambda表达式"}],["meta",{"property":"og:description","content":"我们关心的是如何写出好代码，而不是符合函数编程风格的代码。 Java8 函数编程lambda表达式 简介 lambda表达式 分类 惰性求值方法 及早求值方法 stream & parallelStream stream & parallelStream parallelStream原理: stream与parallelStream性能测试对比 Str..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:29:54.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Java8 新特性"}],["meta",{"property":"article:published_time","content":"2024-03-17T15:06:55.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:29:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8 函数编程lambda表达式\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/java-stream-functions.png\\"],\\"datePublished\\":\\"2024-03-17T15:06:55.000Z\\",\\"dateModified\\":\\"2024-03-21T03:29:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"# lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[]},{"level":2,"title":"# 分类","slug":"分类","link":"#分类","children":[{"level":3,"title":"# 惰性求值方法","slug":"惰性求值方法","link":"#惰性求值方法","children":[]},{"level":3,"title":"# 及早求值方法","slug":"及早求值方法","link":"#及早求值方法","children":[]}]},{"level":2,"title":"# stream & parallelStream","slug":"stream-parallelstream","link":"#stream-parallelstream","children":[{"level":3,"title":"# stream & parallelStream","slug":"stream-parallelstream-1","link":"#stream-parallelstream-1","children":[]},{"level":3,"title":"# parallelStream原理:","slug":"parallelstream原理","link":"#parallelstream原理","children":[]},{"level":3,"title":"# stream与parallelStream性能测试对比","slug":"stream与parallelstream性能测试对比","link":"#stream与parallelstream性能测试对比","children":[]},{"level":3,"title":"# Stream中常用方法如下:","slug":"stream中常用方法如下","link":"#stream中常用方法如下","children":[]}]},{"level":2,"title":"# 常用例子","slug":"常用例子","link":"#常用例子","children":[{"level":3,"title":"# 匿名类简写","slug":"匿名类简写","link":"#匿名类简写","children":[]},{"level":3,"title":"# forEach","slug":"foreach","link":"#foreach","children":[]},{"level":3,"title":"# 方法引用","slug":"方法引用","link":"#方法引用","children":[]},{"level":3,"title":"# Filter & Predicate","slug":"filter-predicate","link":"#filter-predicate","children":[]},{"level":3,"title":"# Map&Reduce","slug":"map-reduce","link":"#map-reduce","children":[]},{"level":3,"title":"# Collectors","slug":"collectors","link":"#collectors","children":[]},{"level":3,"title":"# flatMap","slug":"flatmap","link":"#flatmap","children":[]},{"level":3,"title":"# distinct","slug":"distinct","link":"#distinct","children":[]},{"level":3,"title":"# count","slug":"count","link":"#count","children":[]},{"level":3,"title":"# Match","slug":"match","link":"#match","children":[]},{"level":3,"title":"# min,max,summaryStatistics","slug":"min-max-summarystatistics","link":"#min-max-summarystatistics","children":[]},{"level":3,"title":"# peek","slug":"peek","link":"#peek","children":[]}]},{"level":2,"title":"# FunctionalInterface","slug":"functionalinterface","link":"#functionalinterface","children":[{"level":3,"title":"# 理解注解 @FunctionInterface","slug":"理解注解-functioninterface","link":"#理解注解-functioninterface","children":[]},{"level":3,"title":"# 自定义函数接口","slug":"自定义函数接口","link":"#自定义函数接口","children":[]},{"level":3,"title":"# 内置四大函数接口","slug":"内置四大函数接口","link":"#内置四大函数接口","children":[]}]},{"level":2,"title":"# 一些例子","slug":"一些例子","link":"#一些例子","children":[]},{"level":2,"title":"# 参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1710991794000,"updatedTime":1710991794000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":16.22,"words":4866},"filePathRelative":"posts/Java/Java8NewFeatures/Java8 函数编程lambda表达式.md","localizedDate":"2024年3月17日","excerpt":"<blockquote>\\n<p>我们关心的是如何写出好代码，而不是符合函数编程风格的代码。</p>\\n</blockquote>\\n<ul>\\n<li>Java8 函数编程lambda表达式\\n<ul>\\n<li><a href=\\"#%E7%AE%80%E4%BB%8B\\">简介</a></li>\\n<li><a href=\\"#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F\\">lambda表达式</a></li>\\n<li>分类\\n<ul>\\n<li><a href=\\"#%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95\\">惰性求值方法</a></li>\\n<li><a href=\\"#%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC%E6%96%B9%E6%B3%95\\">及早求值方法</a></li>\\n</ul>\\n</li>\\n<li>stream &amp; parallelStream\\n<ul>\\n<li><a href=\\"#stream--parallelstream-1\\">stream &amp; parallelStream</a></li>\\n<li><a href=\\"#parallelstream%E5%8E%9F%E7%90%86\\">parallelStream原理:</a></li>\\n<li><a href=\\"#stream%E4%B8%8Eparallelstream%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AF%B9%E6%AF%94\\">stream与parallelStream性能测试对比</a></li>\\n<li><a href=\\"#stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%A6%82%E4%B8%8B\\">Stream中常用方法如下:</a></li>\\n</ul>\\n</li>\\n<li>常用例子\\n<ul>\\n<li><a href=\\"#%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%AE%80%E5%86%99\\">匿名类简写</a></li>\\n<li><a href=\\"#foreach\\">forEach</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\\">方法引用</a></li>\\n<li><a href=\\"#filter--predicate\\">Filter &amp; Predicate</a></li>\\n<li><a href=\\"#mapreduce\\">Map&amp;Reduce</a></li>\\n<li><a href=\\"#collectors\\">Collectors</a></li>\\n<li><a href=\\"#flatmap\\">flatMap</a></li>\\n<li><a href=\\"#distinct\\">distinct</a></li>\\n<li><a href=\\"#count\\">count</a></li>\\n<li><a href=\\"#match\\">Match</a></li>\\n<li><a href=\\"#minmaxsummarystatistics\\">min,max,summaryStatistics</a></li>\\n<li><a href=\\"#peek\\">peek</a></li>\\n</ul>\\n</li>\\n<li>FunctionalInterface\\n<ul>\\n<li><a href=\\"#%E7%90%86%E8%A7%A3%E6%B3%A8%E8%A7%A3-functioninterface\\">理解注解 @FunctionInterface</a></li>\\n<li><a href=\\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3\\">自定义函数接口</a></li>\\n<li><a href=\\"#%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3\\">内置四大函数接口</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90\\">一些例子</a></li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\\">参考资料</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{E as comp,u as data};
