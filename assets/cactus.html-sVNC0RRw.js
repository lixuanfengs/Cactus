import{_ as i,e as t,o,c,b as s,g as n,f as a,h as l}from"./app-CWFajf3D.js";const p={},r=s("h2",{id:"🔨-搭建-cactus",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🔨-搭建-cactus"},[s("span",null,"🔨 搭建 Cactus")])],-1),g={href:"https://github.com/lixuanfengs/Cactus",target:"_blank",rel:"noopener noreferrer"},d=s("figure",null,[s("img",{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170117254.png",alt:"image-20240306170117254",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20240306170117254")],-1),u=s("figure",null,[s("img",{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170313963.png",alt:"image-20240306170313963",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20240306170313963")],-1),m=s("li",null,[s("p",null,[n("接着，进入项目仓库的「Settings」>「Actions」>「General」，选中底部 Workflow permissions 中的 "),s("code",null,"Read and write permissions"),n("，然后点击保存即可。如果未授权，GitHub Page 部署会由于 repo 权限不足而报错 "),s("code",null,"failed with exit code 128"),n("。")]),s("figure",null,[s("img",{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306171213682.png",alt:"image-20240306171213682",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20240306171213682")])],-1),b=s("li",null,[s("p",null,"接下来，请进入菜单栏顶部的「Actions」>「最新的 workflow」，并点击右上方的「Re-run jobs」>「Re-run all jobs」，以重新生成网页。若部署正确，GitHub 将自动搭建 gh-page 分支页面。")],-1),h=l('<h2 id="🍀配置-cactus" tabindex="-1"><a class="header-anchor" href="#🍀配置-cactus"><span>🍀配置 Cactus</span></a></h2><h2 id="🎯部署-cactus" tabindex="-1"><a class="header-anchor" href="#🎯部署-cactus"><span>🎯部署 Cactus</span></a></h2><h3 id="部署到-vercel" tabindex="-1"><a class="header-anchor" href="#部署到-vercel"><span>部署到 Vercel</span></a></h3><p>Vercel 的速度相对 GitHub Pages 更快，但 <code>*.vercel.app</code> 域名已受 DNS 污染影响。为保证国内用户访问稳定，需绑定自定义域名。</p><p>Vercel 部署步骤如下：</p>',5),y={href:"https://vercel.com/new/clone?repository-url=https://github.com/lixuanfengs/Cactus/tree/gh-pages",target:"_blank",rel:"noopener noreferrer"},v=s("img",{src:"https://lixuanfengs.github.io/blog-images/cactus-blogs/68747470733a2f2f76657263656c2e636f6d2f627574746f6e",alt:"Vercel",loading:"lazy"},null,-1),B=s("code",null,"https://vercel.com/new/clone?repository-url=https://github.com/lixuanfengs/Cactus/tree/gh-pages",-1),f=s("code",null,"rockbenben/Cactus",-1),D=s("code",null,"你的用户名/仓库名",-1),x=s("li",null,[n("输入一个你喜欢的 Vercel 项目名称，默认 private 即可，然后点击 "),s("code",null,"Create"),n("。")],-1),C=l(`<figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307101726683.png" alt="image-20240307101726683" tabindex="0" loading="lazy"><figcaption>image-20240307101726683</figcaption></figure><ol start="3"><li><p>接着，Vercel 会基于 Cactus 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。几十秒后，满屏的烟花会庆祝你部署成功。此时，点击 <code>Go to Dashboard</code> 跳转到应用的控制台。</p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307101851481.png" alt="image-20240307101851481" tabindex="0" loading="lazy"><figcaption>image-20240307101851481</figcaption></figure></li><li><p>为了让 Vercel 页面与 GitHub Pages 自动保持同步更新，你需要配置 <code>VERCEL_TOKEN</code>、<code>VERCEL_ORG_ID</code>、<code>VERCEL_PROJECT_ID</code>、 和 GitHub Actions。</p><ul><li>在 Vercel 控制面板选择 [settings ] &gt; [Tokens] &gt; [Create] 创建 <code>VERCEL_TOKEN</code>，复制 Tokens 到 github 中 [settings ] &gt; [Secrets and variables] &gt; [Actions] &gt; [new repository secret] 创建 <code>VERCEL_TOKEN</code> 仓库密钥。</li><li>在 Vercel 控制面板选择 [settings ] &gt; [General] &gt; [Vercel ID] ，复制 Vercel ID 到 github 中 [settings ] &gt; [Secrets and variables] &gt; [Actions] &gt; [new repository secret] 创建 <code>VERCEL_ORG_ID</code> 仓库密钥。</li><li>在 Vercel 控制面板选择 [Project Settings] &gt; [General] &gt; [Project ID] ，复制 Project ID 到 github 中 [settings ] &gt; [Secrets and variables] &gt; [Actions] &gt; [new repository secret] 创建 <code>VERCEL_PROJECT_ID</code> 仓库密钥。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 将页面更新到 Vercel</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">部署到 Vercel</span></span>
<span class="line"><span style="color:#E06C75;">        uses</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">amondnet/vercel-action@v20</span><span style="color:#7F848E;font-style:italic;"> # 使用Vercel Action</span></span>
<span class="line"><span style="color:#E06C75;">        with</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          vercel-token</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\${{ secrets.VERCEL_TOKEN }}</span><span style="color:#7F848E;font-style:italic;"> # 使用存储在Secrets的Vercel Token</span></span>
<span class="line"><span style="color:#E06C75;">          vercel-org-id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\${{ secrets.VERCEL_ORG_ID }}</span><span style="color:#7F848E;font-style:italic;"> # 你的Vercel组织ID</span></span>
<span class="line"><span style="color:#E06C75;">          vercel-project-id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\${{ secrets.VERCEL_PROJECT_ID }}</span><span style="color:#7F848E;font-style:italic;"> # 你的Vercel项目ID</span></span>
<span class="line"><span style="color:#E06C75;">          vercel-args</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;--prod&#39;</span><span style="color:#7F848E;font-style:italic;"> # 部署到生产环境</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>注意在 vercel 控制台如果出现了部署错误可能是因为main和gh-pages 某一个分支部署错了。找到 Vercel 控制面板选择 [Project Settings] &gt; [git] &gt; [Production Branch] (框里写 main)。然后在下面找到 [Ignored Build Step] &gt; [custom] 填入 【bash -c &#39;if [[ &quot;$VERCEL_GIT_COMMIT_REF&quot; == &quot;gh-pages&quot; ]]; then exit 0; fi&#39;】</p></blockquote><h3 id="使用-docker-部署到自己的服务器上" tabindex="-1"><a class="header-anchor" href="#使用-docker-部署到自己的服务器上"><span>使用 Docker 部署到自己的服务器上</span></a></h3><h4 id="一、搭建准备" tabindex="-1"><a class="header-anchor" href="#一、搭建准备"><span>一、搭建准备</span></a></h4><h4 id="二、项目结构说明" tabindex="-1"><a class="header-anchor" href="#二、项目结构说明"><span>二、项目结构说明</span></a></h4><p>首先把博客知识框架克隆到本地。</p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307163754657.png" alt="image-20240307163754657" tabindex="0" loading="lazy"><figcaption>image-20240307163754657</figcaption></figure><ul><li>src 目录下，是博客的框架模板和已经写好的文章内容，在项目根目录下的 <code>package.json</code>中的 <code>docs:build</code> 用于构建， <code>docs:dev</code>用于本地启动测试。</li><li>dev-ops 目录是提供博客的部署，这里的 docker-compose.yml 是 Docker 执行脚本安装 Nginx 环境。</li><li>在 <code>src/.vuepress-&gt; config.ts</code>文件中下配置了把项目 build 到 nginx/html 文件夹。这样可以更加方便我们部署。</li></ul><h4 id="三、部署项目" tabindex="-1"><a class="header-anchor" href="#三、部署项目"><span>三、部署项目</span></a></h4><p>使用 WebStrom 前端开发工具，打开克隆到本地的项目。在工具界面会提示你执行 npm install 安装项目运行和部署所需的环境。如果没有收到提示的话，可以打开 Terminal 窗口。执行安装命令就可以做下一步的博客部署工作了。</p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307165049368.png" alt="image-20240307165049368" tabindex="0" loading="lazy"><figcaption>image-20240307165049368</figcaption></figure><ol><li><p><strong>构建项目</strong></p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307171205175.png" alt="image-20240307171205175" tabindex="0" loading="lazy"><figcaption>image-20240307171205175</figcaption></figure><ul><li>打开项目的 <code>package.json</code>里面有<code>构建</code>和<code>运行</code>命名。</li><li>构建的操作会把工程打包为 HTML 文件写入到 dev-ops/nginx/html 文件夹下。</li><li>运行的操作会直接本地启动服务，启动后你可以在本地预览。这样你在修改一些内容的时候也可以随时看到效果。</li></ul></li><li><p><strong>构建结果</strong></p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307170359320.png" alt="image-20240307170359320" tabindex="0" loading="lazy"><figcaption>image-20240307170359320</figcaption></figure><ul><li>如图操作，完成构建。当看到<code>dev-ops/nginx/html</code> 下出现构建后的静态文件，表示构建成功。</li></ul></li><li><p><strong>配置 Nginx</strong></p><p>Nginx 提供了三种配置方式，分别支持访问类型：IP 地址直接访问、通过 HTTP 协议访问域名、通过 HTTPS 协议访问域名。</p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307171739941.png" alt="image-20240307171739941" tabindex="0" loading="lazy"><figcaption>image-20240307171739941</figcaption></figure><ol><li><p><strong>localhost.conf</strong></p><p>这个配置方式为了方便，没有域名的伙伴们测试使用。也就是你部署后可以直接通过IP进行访问。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">server</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#D19A66;">      80</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#ABB2BF;"> [::]:80;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    location</span><span style="color:#ABB2BF;"> / {</span></span>
<span class="line"><span style="color:#C678DD;">       root </span><span style="color:#ABB2BF;">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#C678DD;">       index </span><span style="color:#ABB2BF;">index.html;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    error_page </span><span style="color:#D19A66;">  500</span><span style="color:#D19A66;"> 502</span><span style="color:#D19A66;"> 503</span><span style="color:#D19A66;"> 504</span><span style="color:#ABB2BF;">  /50x.html;</span></span>
<span class="line"><span style="color:#C678DD;">    location</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">/50x.html </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">        root </span><span style="color:#ABB2BF;">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接把 80 请求转发到本地的根目录地址的 html 文件上即可</li></ul></li><li><p><strong>http.blog.conf</strong></p><p>如果是云服务器和域名，首先先配置域名解析。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">server</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#D19A66;">      80</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#ABB2BF;"> [::]:80;</span></span>
<span class="line"><span style="color:#C678DD;">    server_name </span><span style="color:#ABB2BF;"> blog.cactusli.net;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    location</span><span style="color:#ABB2BF;"> / {</span></span>
<span class="line"><span style="color:#C678DD;">       root </span><span style="color:#ABB2BF;">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#C678DD;">       index </span><span style="color:#ABB2BF;">index.html;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    error_page </span><span style="color:#D19A66;">  500</span><span style="color:#D19A66;"> 502</span><span style="color:#D19A66;"> 503</span><span style="color:#D19A66;"> 504</span><span style="color:#ABB2BF;">  /50x.html;</span></span>
<span class="line"><span style="color:#C678DD;">    location</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">/50x.html </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">        root </span><span style="color:#ABB2BF;">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>https.blog.conf</strong></p><p>如果你有域名那么还可以配置免费的ssl验证，配置完成后把 ssl key、pem 文件放到 dev-ops/nginx/ssl 文件夹下并上传到云服务器上。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">server</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#D19A66;">      80</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#ABB2BF;"> [::]:80;</span></span>
<span class="line"><span style="color:#C678DD;">    server_name </span><span style="color:#ABB2BF;"> blog.cactusli.net;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    rewrite</span><span style="color:#E06C75;"> ^(.*) https://$</span><span style="color:#ABB2BF;">server_name$</span><span style="color:#E06C75;">1</span><span style="color:#C678DD;"> permanent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">server</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    listen </span><span style="color:#D19A66;">      443</span><span style="color:#ABB2BF;"> ssl;</span></span>
<span class="line"><span style="color:#C678DD;">    server_name </span><span style="color:#ABB2BF;"> api.cactusli.net;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    ssl_certificate </span><span style="color:#ABB2BF;">     /etc/nginx/ssl/blogs.cactusli.net.pem;</span></span>
<span class="line"><span style="color:#C678DD;">    ssl_certificate_key </span><span style="color:#ABB2BF;"> /etc/nginx/ssl/blogs.cactusli.net.key;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    ssl_session_cache </span><span style="color:#ABB2BF;">   shared:SSL:1m;</span></span>
<span class="line"><span style="color:#C678DD;">    ssl_session_timeout </span><span style="color:#D19A66;"> 5m</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    ssl_ciphers </span><span style="color:#ABB2BF;"> HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span style="color:#C678DD;">    ssl_prefer_server_ciphers </span><span style="color:#D19A66;"> on</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    location</span><span style="color:#ABB2BF;"> / {</span></span>
<span class="line"><span style="color:#C678DD;">         root </span><span style="color:#ABB2BF;">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#C678DD;">         index </span><span style="color:#ABB2BF;">index.html;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    error_page </span><span style="color:#D19A66;">  500</span><span style="color:#D19A66;"> 502</span><span style="color:#D19A66;"> 503</span><span style="color:#D19A66;"> 504</span><span style="color:#ABB2BF;">  /50x.html;</span></span>
<span class="line"><span style="color:#C678DD;">    location</span><span style="color:#ABB2BF;"> = </span><span style="color:#E06C75;">/50x.html </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">        root </span><span style="color:#ABB2BF;">  /usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个方式就是配置 ssl 的方式。</li></ul></li></ol></li><li><p><strong>上传文件</strong></p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307182607039.png" alt="image-20240307182607039" tabindex="0" loading="lazy"><figcaption>image-20240307182607039</figcaption></figure><ul><li>通过<code>SSH/FTP</code> 工具，连接云服务器，并把我们在工程下创建的 <code>dev-ops</code> 上传到云服务器端。</li></ul></li><li><p><strong>服务启动</strong></p><p>接下来，你只需要务器进入到 dev-ops 文件夹下，执行脚本 <code>docker compose -f docker-compose.yml up -d</code> 即可完成部署。</p><figure><img src="https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307182717011.png" alt="image-20240307182717011" tabindex="0" loading="lazy"><figcaption>image-20240307182717011</figcaption></figure></li><li><p><strong>访问测试</strong></p></li></ol>`,13);function A(_,F){const e=t("ExternalLinkIcon");return o(),c("div",null,[r,s("ol",null,[s("li",null,[s("p",null,[n("首先，进入 "),s("a",g,[n("Cactus"),a(e)]),n(" 项目页，点击右上角「Use this template」后选择「Create a new repository」。")]),d,u]),m,b]),h,s("ol",null,[s("li",null,[n("点击 "),s("a",y,[v,a(e)]),n(" 或将 "),B,n(" 中的 "),f,n(" 改为 "),D,n("，然后会跳转至 Vercel 进行网页部署。如果你未登录，Vercel 提示你注册或登录，请使用 GitHub 账户进行快捷登录。")]),x]),C])}const k=i(p,[["render",A],["__file","cactus.html.vue"]]),V=JSON.parse(`{"path":"/blog/cactus.html","title":"Cactus 搭建个人博客","lang":"zh-CN","frontmatter":{"title":"Cactus 搭建个人博客","icon":"read","date":"2024-03-03T12:00:00.000Z","category":["Blog"],"tag":["Blog"],"description":"🔨 搭建 Cactus 首先，进入 Cactus 项目页，点击右上角「Use this template」后选择「Create a new repository」。 image-20240306170117254image-20240306170117254 image-20240306170313963image-20240306170313963...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/blog/cactus.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"Cactus 搭建个人博客"}],["meta",{"property":"og:description","content":"🔨 搭建 Cactus 首先，进入 Cactus 项目页，点击右上角「Use this template」后选择「Create a new repository」。 image-20240306170117254image-20240306170117254 image-20240306170313963image-20240306170313963..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170117254.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-26T02:13:28.000Z"}],["meta",{"property":"article:author","content":"Cactus li"}],["meta",{"property":"article:tag","content":"Blog"}],["meta",{"property":"article:published_time","content":"2024-03-03T12:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-26T02:13:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cactus 搭建个人博客\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170117254.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170313963.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306171213682.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/68747470733a2f2f76657263656c2e636f6d2f627574746f6e\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307101726683.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307101851481.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307163754657.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307165049368.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307171205175.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307170359320.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307171739941.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307182607039.png\\",\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240307182717011.png\\"],\\"datePublished\\":\\"2024-03-03T12:00:00.000Z\\",\\"dateModified\\":\\"2024-04-26T02:13:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"🔨 搭建 Cactus","slug":"🔨-搭建-cactus","link":"#🔨-搭建-cactus","children":[]},{"level":2,"title":"🍀配置 Cactus","slug":"🍀配置-cactus","link":"#🍀配置-cactus","children":[]},{"level":2,"title":"🎯部署 Cactus","slug":"🎯部署-cactus","link":"#🎯部署-cactus","children":[{"level":3,"title":"部署到 Vercel","slug":"部署到-vercel","link":"#部署到-vercel","children":[]},{"level":3,"title":"使用 Docker 部署到自己的服务器上","slug":"使用-docker-部署到自己的服务器上","link":"#使用-docker-部署到自己的服务器上","children":[]}]}],"git":{"createdTime":1709710899000,"updatedTime":1714097608000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":2}]},"readingTime":{"minutes":4.95,"words":1484},"filePathRelative":"blog/cactus.md","localizedDate":"2024年3月3日","excerpt":"<h2>🔨 搭建 Cactus</h2>\\n<ol>\\n<li>\\n<p>首先，进入 <a href=\\"https://github.com/lixuanfengs/Cactus\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Cactus</a> 项目页，点击右上角「Use this template」后选择「Create a new repository」。</p>\\n<figure><img src=\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170117254.png\\" alt=\\"image-20240306170117254\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240306170117254</figcaption></figure>\\n<figure><img src=\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306170313963.png\\" alt=\\"image-20240306170313963\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240306170313963</figcaption></figure>\\n</li>\\n<li>\\n<p>接着，进入项目仓库的「Settings」&gt;「Actions」&gt;「General」，选中底部 Workflow permissions 中的 <code>Read and write permissions</code>，然后点击保存即可。如果未授权，GitHub Page 部署会由于 repo 权限不足而报错 <code>failed with exit code 128</code>。</p>\\n<figure><img src=\\"https://lixuanfengs.github.io/blog-images/cactus-blogs/image-20240306171213682.png\\" alt=\\"image-20240306171213682\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20240306171213682</figcaption></figure>\\n</li>\\n<li>\\n<p>接下来，请进入菜单栏顶部的「Actions」&gt;「最新的 workflow」，并点击右上方的「Re-run jobs」&gt;「Re-run all jobs」，以重新生成网页。若部署正确，GitHub 将自动搭建 gh-page 分支页面。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{k as comp,V as data};
