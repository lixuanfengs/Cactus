import{_ as n,c as l,f as a,o as e}from"./app-RizwwZaB.js";const p={};function o(t,s){return e(),l("div",null,s[0]||(s[0]=[a(`<blockquote><p>本文主要对LinkedList进行源码解析。</p></blockquote><ul><li>LinkedList源码解析 <ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li>LinkedList实现 <ul><li><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">底层数据结构</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a></li><li><a href="#getfirst-getlast">getFirst(), getLast()</a></li><li><a href="#removeFirst-removelast-removee-removeindex">removeFirst(), removeLast(), remove(e), remove(index)</a></li><li><a href="#add">add()</a></li><li><a href="#addall">addAll()</a></li><li><a href="#clear">clear()</a></li><li><a href="#positional-access-%E6%96%B9%E6%B3%95">Positional Access 方法</a></li><li><a href="#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C">查找操作</a></li><li><a href="#queue-%E6%96%B9%E6%B3%95">Queue 方法</a></li><li><a href="#deque-%E6%96%B9%E6%B3%95">Deque 方法</a></li></ul></li><li><a href="#%E5%8F%82%E8%80%83">参考</a></li></ul></li></ul><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span><a href="#%E6%A6%82%E8%BF%B0">#</a> 概述</span></a></h2><p><em>LinkedList</em>同时实现了<em>List</em>接口和<em>Deque</em>接口，也就是说它既可以看作一个顺序容器，又可以看作一个队列(<em>Queue</em>)，同时又可以看作一个栈(<em>Stack</em>)。这样看来，<em>LinkedList</em>简直就是个全能冠军。当你需要使用栈或者队列时，可以考虑使用<em>LinkedList</em>，一方面是因为Java官方已经声明不建议使用<em>Stack</em>类，更遗憾的是，Java里根本没有一个叫做<em>Queue</em>的类(它是个接口名字)。关于栈或队列，现在的首选是<em>ArrayDeque</em>，它有着比<em>LinkedList</em>(当作栈或队列使用时)有着更好的性能。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png" alt="LinkedList_base" tabindex="0" loading="lazy"><figcaption>LinkedList_base</figcaption></figure><p><em>LinkedList</em>的实现方式决定了所有跟下标相关的操作都是线性时间，而在首段或者末尾删除元素只需要常数时间。为追求效率<em>LinkedList</em>没有实现同步(synchronized)，如果需要多个线程并发访问，可以先采用<code>Collections.synchronizedList()</code>方法对其进行包装。</p><h2 id="linkedlist实现" tabindex="-1"><a class="header-anchor" href="#linkedlist实现"><span><a href="#linkedlist%E5%AE%9E%E7%8E%B0">#</a> LinkedList实现</span></a></h2><h3 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构"><span><a href="#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">#</a> 底层数据结构</span></a></h3><p><em>LinkedList</em>底层<strong>通过双向链表实现</strong>，本节将着重讲解插入和删除元素时双向链表的维护过程，也即是之间解跟<em>List</em>接口相关的函数，而将<em>Queue</em>和<em>Stack</em>以及<em>Deque</em>相关的知识放在下一节讲。双向链表的每个节点用内部类<em>Node</em>表示。<em>LinkedList</em>通过<code>first</code>和<code>last</code>引用分别指向链表的第一个和最后一个元素。注意这里没有所谓的哑元，当链表为空的时候<code>first</code>和<code>last</code>都指向<code>null</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">    transient</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Pointer to first node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *            (first.prev == null &amp;&amp; first.item != null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    transient</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Pointer to last node.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Invariant: (first == null &amp;&amp; last == null) ||</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *            (last.next == null &amp;&amp; last.item != null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    transient</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中Node是私有的内部类:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        E</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        Node</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">prev</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;font-style:italic;"> element</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> element;</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> next;</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> prev;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">#</a> 构造函数</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Constructs an empty list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> LinkedList</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Constructs a list containing the elements of the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * collection, in the order they are returned by the collection&#39;s</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;">  c</span><span style="color:#7F848E;font-style:italic;"> the collection whose elements are to be placed into this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NullPointerException</span><span style="color:#7F848E;font-style:italic;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> LinkedList</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        addAll</span><span style="color:#E06C75;">(c)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getfirst-getlast" tabindex="-1"><a class="header-anchor" href="#getfirst-getlast"><span><a href="#getfirst-getlast">#</a> getFirst(), getLast()</span></a></h3><p>获取第一个元素， 和获取最后一个元素:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the first element in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the first element in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> getFirst</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> f </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (f </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the last element in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the last element in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> getLast</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (l </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="removefirst-removelast-remove-e-remove-index" tabindex="-1"><a class="header-anchor" href="#removefirst-removelast-remove-e-remove-index"><span><a href="#removefirst-removelast-remove-e-remove-index">#</a> removeFirst(), removeLast(), remove(e), remove(index)</span></a></h3><p><code>remove()</code>方法也有两个版本，一个是删除跟指定元素相等的第一个元素<code>remove(Object o)</code>，另一个是删除指定下标处的元素<code>remove(int index)</code>。</p><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_remove.png" alt="LinkedList_remove.png" tabindex="0" loading="lazy"><figcaption>LinkedList_remove.png</figcaption></figure><p>删除元素 - 指的是删除第一次出现的这个元素, 如果没有这个元素，则返回false；判断的依据是equals方法， 如果equals，则直接unlink这个node；由于LinkedList可存放null元素，故也可以删除第一次出现null的元素；</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes the first occurrence of the specified element from this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * if it is present.  If this list does not contain the element, it is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * unchanged.  More formally, removes the element with the lowest index</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * (if such an element exists).  Returns {@code true} if this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * contained the specified element (or equivalently, if this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * changed as a result of the call).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> o</span><span style="color:#7F848E;font-style:italic;"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if this list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    unlink</span><span style="color:#E06C75;">(x)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    unlink</span><span style="color:#E06C75;">(x)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Unlinks non-null node x.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#E5C07B;">    E</span><span style="color:#61AFEF;"> unlink</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> x) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // assert x != null;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> prev </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (prev </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">// 第一个元素</span></span>
<span class="line"><span style="color:#E06C75;">            first </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            prev</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (next </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span><span style="color:#7F848E;font-style:italic;">// 最后一个元素</span></span>
<span class="line"><span style="color:#E06C75;">            last </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            next</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // GC</span></span>
<span class="line"><span style="color:#E06C75;">        size</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>remove(int index)</code>使用的是下标计数， 只需要判断该index是否有元素即可，如果有则直接unlink这个node。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes the element at the specified position in this list.  Shifts any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * subsequent elements to the left (subtracts one from their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the element that was removed from the list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> the index of the element to be removed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkElementIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> unlink</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">node</span><span style="color:#E06C75;">(index))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除head元素:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes and returns the first element from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the first element from this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> removeFirst</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> f </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (f </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> unlinkFirst</span><span style="color:#E06C75;">(f)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Unlinks non-null first node f.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> unlinkFirst</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> f) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // assert f == first &amp;&amp; f != null;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // help GC</span></span>
<span class="line"><span style="color:#E06C75;">        first </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (next </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">            last </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span></span>
<span class="line"><span style="color:#E5C07B;">            next</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        size</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除last元素:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes and returns the last element from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the last element from this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> removeLast</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (l </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> NoSuchElementException</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> unlinkLast</span><span style="color:#E06C75;">(l)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Unlinks non-null last node l.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> unlinkLast</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> l) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // assert l == last &amp;&amp; l != null;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> prev </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // help GC</span></span>
<span class="line"><span style="color:#E06C75;">        last </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (prev </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">            first </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span></span>
<span class="line"><span style="color:#E5C07B;">            prev</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        size</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span><a href="#add">#</a> add()</span></a></h3><p><em>add()*方法有两个版本，一个是<code>add(E e)</code>，该方法在*LinkedList</em>的末尾插入元素，因为有<code>last</code>指向链表末尾，在末尾插入元素的花费是常数时间。只需要简单修改几个相关引用即可；另一个是<code>add(int index, E element)</code>，该方法是在指定下表处插入元素，需要先通过线性查找找到具体位置，然后修改相关引用完成插入操作。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Appends the specified element to the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;p&gt;This method is equivalent to {@link #addLast}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> element to be appended to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} (as specified by {@link Collection#add})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#61AFEF;">        linkLast</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Links e as last element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> linkLast</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> newNode </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">(l</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        last </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (l </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">            first </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span></span>
<span class="line"><span style="color:#E5C07B;">            l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        size</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_add.png" alt="LinkedList_add" tabindex="0" loading="lazy"><figcaption>LinkedList_add</figcaption></figure><p><code>add(int index, E element)</code>, 当index==size时，等同于add(E e); 如果不是，则分两步: 1.先根据index找到要插入的位置,即node(index)方法；2.修改引用，完成插入操作。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts the specified element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Shifts the element currently at that position (if any) and any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> element</span><span style="color:#7F848E;font-style:italic;"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkPositionIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (index </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> size)</span></span>
<span class="line"><span style="color:#61AFEF;">            linkLast</span><span style="color:#E06C75;">(element)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span></span>
<span class="line"><span style="color:#61AFEF;">            linkBefore</span><span style="color:#E06C75;">(element</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;"> node</span><span style="color:#E06C75;">(index))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的<code>node(int index)</code>函数有一点小小的trick，因为链表双向的，可以从开始往后找，也可以从结尾往前找，具体朝那个方向找取决于条件<code>index &lt; (size &gt;&gt; 1)</code>，也即是index是靠近前端还是后端。从这里也可以看出，linkedList通过index检索元素的效率没有arrayList高。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the (non-null) Node at the specified element index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#E5C07B;">    Node</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#61AFEF;"> node</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // assert isElementIndex(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (index </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> (size </span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="addall" tabindex="-1"><a class="header-anchor" href="#addall"><span><a href="#addall">#</a> addAll()</span></a></h3><p>addAll(index, c) 实现方式并不是直接调用add(index,e)来实现，主要是因为效率的问题，另一个是fail-fast中modCount只会增加1次；</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Appends all of the elements in the specified collection to the end of</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * this list, in the order that they are returned by the specified</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * collection&#39;s iterator.  The behavior of this operation is undefined if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * the specified collection is modified while the operation is in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * progress.  (Note that this will occur if the specified collection is</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * this list, and it&#39;s nonempty.)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> c</span><span style="color:#7F848E;font-style:italic;"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NullPointerException</span><span style="color:#7F848E;font-style:italic;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> addAll</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> addAll</span><span style="color:#E06C75;">(size</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> c)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts all of the elements in the specified collection into this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list, starting at the specified position.  Shifts the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * currently at that position (if any) and any subsequent elements to</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * the right (increases their indices).  The new elements will appear</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * in the list in the order that they are returned by the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * specified collection&#39;s iterator.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index at which to insert the first element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *              from the specified collection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> c</span><span style="color:#7F848E;font-style:italic;"> collection containing elements to be added to this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if this list changed as a result of the call</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NullPointerException</span><span style="color:#7F848E;font-style:italic;"> if the specified collection is null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> addAll</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> Collection</span><span style="color:#56B6C2;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> extends E</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> c) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkPositionIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;">[] a </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> numNew </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (numNew </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> succ</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (index </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> size) {</span></span>
<span class="line"><span style="color:#E06C75;">            succ </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            pred </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            succ </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> node</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            pred </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> succ</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> a) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            @</span><span style="color:#E5C07B;">SuppressWarnings</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;unchecked&quot;</span><span style="color:#E06C75;">) </span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> (E) o</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> newNode </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">(pred</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> (pred </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E06C75;">                first </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            else</span></span>
<span class="line"><span style="color:#E5C07B;">                pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            pred </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (succ </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            last </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> pred</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            pred</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> succ</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            succ</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> pred</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">        size </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> numNew</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clear" tabindex="-1"><a class="header-anchor" href="#clear"><span><a href="#clear">#</a> clear()</span></a></h3><p>为了让GC更快可以回收放置的元素，需要将node之间的引用关系赋空。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes all of the elements from this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * The list will be empty after this call returns.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> clear</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Clearing all of the links between nodes is &quot;unnecessary&quot;, but:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // - helps a generational GC if the discarded nodes inhabit</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //   more than one generation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // - is sure to free memory even if there is a reachable Iterator</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> ) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> next </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        first </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        size </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        modCount</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="positional-access-方法" tabindex="-1"><a class="header-anchor" href="#positional-access-方法"><span><a href="#positional-access-%E6%96%B9%E6%B3%95">#</a> Positional Access 方法</span></a></h3><p>通过index获取元素</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index of the element to return</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the element at the specified position in this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> get</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkElementIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> node</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将某个位置的元素重新赋值:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Replaces the element at the specified position in this list with the</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * specified element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index of the element to replace</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> element</span><span style="color:#7F848E;font-style:italic;"> element to be stored at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> set</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkElementIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> node</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        E</span><span style="color:#E06C75;"> oldVal </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> oldVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将元素插入到指定index位置:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts the specified element at the specified position in this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Shifts the element currently at that position (if any) and any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * subsequent elements to the right (adds one to their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> index at which the specified element is to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> element</span><span style="color:#7F848E;font-style:italic;"> element to be inserted</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> E</span><span style="color:#E06C75;"> element) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkPositionIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (index </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> size)</span></span>
<span class="line"><span style="color:#61AFEF;">            linkLast</span><span style="color:#E06C75;">(element)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        else</span></span>
<span class="line"><span style="color:#61AFEF;">            linkBefore</span><span style="color:#E06C75;">(element</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;"> node</span><span style="color:#E06C75;">(index))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除指定位置的元素:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes the element at the specified position in this list.  Shifts any</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * subsequent elements to the left (subtracts one from their indices).</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the element that was removed from the list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> index</span><span style="color:#7F848E;font-style:italic;"> the index of the element to be removed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the element previously at the specified position</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> IndexOutOfBoundsException</span><span style="color:#7F848E;font-style:italic;"> {@inheritDoc}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#61AFEF;">        checkElementIndex</span><span style="color:#E06C75;">(index)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> unlink</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">node</span><span style="color:#E06C75;">(index))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它位置的方法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Tells if the argument is the index of an existing element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> isElementIndex</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Tells if the argument is the index of a valid position for an</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * iterator or an add operation.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> isPositionIndex</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Constructs an IndexOutOfBoundsException detail message.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Of the many possible refactorings of the error handling code,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * this &quot;outlining&quot; performs best with both server and client VMs.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> outOfBoundsMsg</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;Index: &quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot;, Size: &quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> checkElementIndex</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isElementIndex</span><span style="color:#E06C75;">(index))</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IndexOutOfBoundsException</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">outOfBoundsMsg</span><span style="color:#E06C75;">(index))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> checkPositionIndex</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> index) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isPositionIndex</span><span style="color:#E06C75;">(index))</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IndexOutOfBoundsException</span><span style="color:#E06C75;">(</span><span style="color:#61AFEF;">outOfBoundsMsg</span><span style="color:#E06C75;">(index))</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找操作" tabindex="-1"><a class="header-anchor" href="#查找操作"><span><a href="#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C">#</a> 查找操作</span></a></h3><p>查找操作的本质是查找元素的下标:</p><p>查找第一次出现的index, 如果找不到返回-1；</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the index of the first occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * More formally, returns the lowest index {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> o</span><span style="color:#7F848E;font-style:italic;"> element to search for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the index of the first occurrence of the specified element in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *         this list, or -1 if this list does not contain the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> indexOf</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                index</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">next</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                index</span><span style="color:#ABB2BF;">++;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找最后一次出现的index, 如果找不到返回-1；</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Returns the index of the last occurrence of the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * in this list, or -1 if this list does not contain the element.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * More formally, returns the highest index {@code i} such that</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or -1 if there is no such index.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> o</span><span style="color:#7F848E;font-style:italic;"> element to search for</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the index of the last occurrence of the specified element in</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *         this list, or -1 if this list does not contain the element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> lastIndexOf</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> index </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                index</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                index</span><span style="color:#ABB2BF;">--;</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="queue-方法" tabindex="-1"><a class="header-anchor" href="#queue-方法"><span><a href="#queue-%E6%96%B9%E6%B3%95">#</a> Queue 方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves, but does not remove, the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the head of this list, or {@code null} if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> peek</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> f </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (f </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves, but does not remove, the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the head of this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> element</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> getFirst</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves and removes the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the head of this list, or {@code null} if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> poll</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> f </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (f </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> unlinkFirst</span><span style="color:#E06C75;">(f)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves and removes the head (first element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the head of this list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> removeFirst</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Adds the specified element as the tail (last element) of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> the element to add</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} (as specified by {@link Queue#offer})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> offer</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deque-方法" tabindex="-1"><a class="header-anchor" href="#deque-方法"><span><a href="#deque-%E6%96%B9%E6%B3%95">#</a> Deque 方法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#282c34;color:#abb2bf;"><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts the specified element at the front of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> the element to insert</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} (as specified by {@link Deque#offerFirst})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> offerFirst</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#61AFEF;">        addFirst</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Inserts the specified element at the end of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> the element to insert</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} (as specified by {@link Deque#offerLast})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> offerLast</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#61AFEF;">        addLast</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves, but does not remove, the first element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the first element of this list, or {@code null}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *         if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> peekFirst</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> f </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (f </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> f</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves, but does not remove, the last element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the last element of this list, or {@code null}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *         if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> peekLast</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (l </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> l</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves and removes the first element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the first element of this list, or {@code null} if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *     this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> pollFirst</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> f </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> first</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (f </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> unlinkFirst</span><span style="color:#E06C75;">(f)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Retrieves and removes the last element of this list,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * or returns {@code null} if this list is empty.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the last element of this list, or {@code null} if</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *     this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> pollLast</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        final</span><span style="color:#E5C07B;"> Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> l </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> (l </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> unlinkLast</span><span style="color:#E06C75;">(l)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Pushes an element onto the stack represented by this list.  In other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * words, inserts the element at the front of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;p&gt;This method is equivalent to {@link #addFirst}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#7F848E;font-style:italic;"> the element to push</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> push</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">E</span><span style="color:#E06C75;"> e) {</span></span>
<span class="line"><span style="color:#61AFEF;">        addFirst</span><span style="color:#E06C75;">(e)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Pops an element from the stack represented by this list.  In other</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * words, removes and returns the first element of this list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * &lt;p&gt;This method is equivalent to {</span><span style="color:#C678DD;font-style:italic;">@link</span><span style="color:#7F848E;font-style:italic;"> #</span><span style="color:#E06C75;font-style:italic;">removeFirst()</span><span style="color:#7F848E;font-style:italic;">}.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> the element at the front of this list (which is the top</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *         of the stack represented by this list)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@throws</span><span style="color:#E5C07B;font-style:italic;"> NoSuchElementException</span><span style="color:#7F848E;font-style:italic;"> if this list is empty</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> E</span><span style="color:#61AFEF;"> pop</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> removeFirst</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes the first occurrence of the specified element in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list (when traversing the list from head to tail).  If the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * does not contain the element, it is unchanged.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> o</span><span style="color:#7F848E;font-style:italic;"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if the list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> removeFirstOccurrence</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> remove</span><span style="color:#E06C75;">(o)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * Removes the last occurrence of the specified element in this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * list (when traversing the list from head to tail).  If the list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * does not contain the element, it is unchanged.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> o</span><span style="color:#7F848E;font-style:italic;"> element to be removed from this list, if present</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> {@code true} if the list contained the specified element</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@since</span><span style="color:#7F848E;font-style:italic;"> 1.6</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> removeLastOccurrence</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;"> o) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    unlink</span><span style="color:#E06C75;">(x)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Node</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> x </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">prev</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                    unlink</span><span style="color:#E06C75;">(x)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                }</span></span>
<span class="line"><span style="color:#E06C75;">            }</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63)]))}const c=n(p,[["render",o],["__file","LinkedList 源码解析.html.vue"]]),r=JSON.parse(`{"path":"/posts/Java/Collection/LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html","title":"LinkedList 源码解析","lang":"zh-CN","frontmatter":{"title":"LinkedList 源码解析","subtitle":"Java，Java开发，Java 体系","date":"2024-03-06T10:15:26.000Z","category":["Java"],"tag":["Java","Collection"],"order":3,"description":"本文主要对LinkedList进行源码解析。 LinkedList源码解析 概述 LinkedList实现 底层数据结构 构造函数 getFirst(), getLast() removeFirst(), removeLast(), remove(e), remove(index) add() addAll() clear() Positional A...","head":[["meta",{"property":"og:url","content":"https://cactusli.net/posts/Java/Collection/LinkedList%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Cactus's Blog"}],["meta",{"property":"og:title","content":"LinkedList 源码解析"}],["meta",{"property":"og:description","content":"本文主要对LinkedList进行源码解析。 LinkedList源码解析 概述 LinkedList实现 底层数据结构 构造函数 getFirst(), getLast() removeFirst(), removeLast(), remove(e), remove(index) add() addAll() clear() Positional A..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T03:51:56.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Collection"}],["meta",{"property":"article:published_time","content":"2024-03-06T10:15:26.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T03:51:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LinkedList 源码解析\\",\\"image\\":[\\"https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_base.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_remove.png\\",\\"https://lixuanfengs.github.io/blog-images/vp/Java/LinkedList_add.png\\"],\\"datePublished\\":\\"2024-03-06T10:15:26.000Z\\",\\"dateModified\\":\\"2024-03-08T03:51:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cactus li\\",\\"url\\":\\"https://cactusli.net\\"}]}"]]},"headers":[{"level":2,"title":"# 概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"# LinkedList实现","slug":"linkedlist实现","link":"#linkedlist实现","children":[{"level":3,"title":"# 底层数据结构","slug":"底层数据结构","link":"#底层数据结构","children":[]},{"level":3,"title":"# 构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"# getFirst(), getLast()","slug":"getfirst-getlast","link":"#getfirst-getlast","children":[]},{"level":3,"title":"# removeFirst(), removeLast(), remove(e), remove(index)","slug":"removefirst-removelast-remove-e-remove-index","link":"#removefirst-removelast-remove-e-remove-index","children":[]},{"level":3,"title":"# add()","slug":"add","link":"#add","children":[]},{"level":3,"title":"# addAll()","slug":"addall","link":"#addall","children":[]},{"level":3,"title":"# clear()","slug":"clear","link":"#clear","children":[]},{"level":3,"title":"# Positional Access 方法","slug":"positional-access-方法","link":"#positional-access-方法","children":[]},{"level":3,"title":"# 查找操作","slug":"查找操作","link":"#查找操作","children":[]},{"level":3,"title":"# Queue 方法","slug":"queue-方法","link":"#queue-方法","children":[]},{"level":3,"title":"# Deque 方法","slug":"deque-方法","link":"#deque-方法","children":[]}]}],"git":{"createdTime":1709869916000,"updatedTime":1709869916000,"contributors":[{"name":"lixuanfengs","email":"1183895890@qq.com","commits":1}]},"readingTime":{"minutes":13.01,"words":3904},"filePathRelative":"posts/Java/Collection/LinkedList 源码解析.md","localizedDate":"2024年3月6日","excerpt":"<blockquote>\\n<p>本文主要对LinkedList进行源码解析。</p>\\n</blockquote>\\n<ul>\\n<li>LinkedList源码解析\\n<ul>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0\\">概述</a></li>\\n<li>LinkedList实现\\n<ul>\\n<li><a href=\\"#%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\\">底层数据结构</a></li>\\n<li><a href=\\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\\">构造函数</a></li>\\n<li><a href=\\"#getfirst-getlast\\">getFirst(), getLast()</a></li>\\n<li><a href=\\"#removeFirst-removelast-removee-removeindex\\">removeFirst(), removeLast(), remove(e), remove(index)</a></li>\\n<li><a href=\\"#add\\">add()</a></li>\\n<li><a href=\\"#addall\\">addAll()</a></li>\\n<li><a href=\\"#clear\\">clear()</a></li>\\n<li><a href=\\"#positional-access-%E6%96%B9%E6%B3%95\\">Positional Access 方法</a></li>\\n<li><a href=\\"#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C\\">查找操作</a></li>\\n<li><a href=\\"#queue-%E6%96%B9%E6%B3%95\\">Queue 方法</a></li>\\n<li><a href=\\"#deque-%E6%96%B9%E6%B3%95\\">Deque 方法</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8F%82%E8%80%83\\">参考</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{c as comp,r as data};
